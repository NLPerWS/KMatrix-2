[
    {
        "instruction": "",
        "id": "q1",
        "input": "python code to write bool value 1",
        "output": "",
        "rule": [
            "d1"
        ]
    },
    {
        "instruction": "",
        "id": "q2",
        "input": "\"python how to manipulate clipboard\"",
        "output": "",
        "rule": [
            "d2"
        ]
    },
    {
        "instruction": "",
        "id": "q3",
        "input": "python colored output to html",
        "output": "",
        "rule": [
            "d3"
        ]
    },
    {
        "instruction": "",
        "id": "q4",
        "input": "python \"create directory\" using \"relative path\"",
        "output": "",
        "rule": [
            "d4"
        ]
    },
    {
        "instruction": "",
        "id": "q5",
        "input": "python column of an array",
        "output": "",
        "rule": [
            "d5"
        ]
    },
    {
        "instruction": "",
        "id": "q6",
        "input": "python calling a property returns \"property object\"",
        "output": "",
        "rule": [
            "d6"
        ]
    },
    {
        "instruction": "",
        "id": "q7",
        "input": "python combine wav file into one as separate channels",
        "output": "",
        "rule": [
            "d7"
        ]
    },
    {
        "instruction": "",
        "id": "q8",
        "input": "+how to use range with a dictionary python",
        "output": "",
        "rule": [
            "d8"
        ]
    },
    {
        "instruction": "",
        "id": "q9",
        "input": "python compare timespan to number",
        "output": "",
        "rule": [
            "d9"
        ]
    },
    {
        "instruction": "",
        "id": "q10",
        "input": "1d array in char datatype in python",
        "output": "",
        "rule": [
            "d10"
        ]
    },
    {
        "instruction": "",
        "id": "q11",
        "input": "python comprehension list distinct",
        "output": "",
        "rule": [
            "d11"
        ]
    },
    {
        "instruction": "",
        "id": "q12",
        "input": "1d interpolation function python example",
        "output": "",
        "rule": [
            "d12"
        ]
    },
    {
        "instruction": "",
        "id": "q13",
        "input": "python compress array to string",
        "output": "",
        "rule": [
            "d13"
        ]
    },
    {
        "instruction": "",
        "id": "q14",
        "input": "25 and 75 percentile of a list python",
        "output": "",
        "rule": [
            "d14"
        ]
    },
    {
        "instruction": "",
        "id": "q15",
        "input": "python compute hash of string",
        "output": "",
        "rule": [
            "d15"
        ]
    },
    {
        "instruction": "",
        "id": "q16",
        "input": "3d rotatioin matrix in python",
        "output": "",
        "rule": [
            "d16"
        ]
    },
    {
        "instruction": "",
        "id": "q17",
        "input": "python concatenate bool to string",
        "output": "",
        "rule": [
            "d17"
        ]
    },
    {
        "instruction": "",
        "id": "q18",
        "input": "3d rotation in python around z axis",
        "output": "",
        "rule": [
            "d18"
        ]
    },
    {
        "instruction": "",
        "id": "q19",
        "input": "python condition non none",
        "output": "",
        "rule": [
            "d19"
        ]
    },
    {
        "instruction": "",
        "id": "q20",
        "input": "403 code from request python",
        "output": "",
        "rule": [
            "d20"
        ]
    },
    {
        "instruction": "",
        "id": "q21",
        "input": "python configparser get keys in section",
        "output": "",
        "rule": [
            "d21"
        ]
    },
    {
        "instruction": "",
        "id": "q22",
        "input": "a array of vector, compute the norm of each vector python",
        "output": "",
        "rule": [
            "d22"
        ]
    },
    {
        "instruction": "",
        "id": "q23",
        "input": "python configparser transfer dict",
        "output": "",
        "rule": [
            "d23"
        ]
    },
    {
        "instruction": "",
        "id": "q24",
        "input": "a+b in python addition code",
        "output": "",
        "rule": [
            "d24"
        ]
    },
    {
        "instruction": "",
        "id": "q25",
        "input": "python connect mysql denied password",
        "output": "",
        "rule": [
            "d25"
        ]
    },
    {
        "instruction": "",
        "id": "q26",
        "input": "accessing a column from a matrix in python",
        "output": "",
        "rule": [
            "d26"
        ]
    },
    {
        "instruction": "",
        "id": "q27",
        "input": "python connecting to an api with username and password",
        "output": "",
        "rule": [
            "d27"
        ]
    },
    {
        "instruction": "",
        "id": "q28",
        "input": "add empty series to data frame python",
        "output": "",
        "rule": [
            "d28"
        ]
    },
    {
        "instruction": "",
        "id": "q29",
        "input": "python container pod stuck in terminating",
        "output": "",
        "rule": [
            "d29"
        ]
    },
    {
        "instruction": "",
        "id": "q30",
        "input": "add indentations to code in python",
        "output": "",
        "rule": [
            "d30"
        ]
    },
    {
        "instruction": "",
        "id": "q31",
        "input": "python context manager exit",
        "output": "",
        "rule": [
            "d31"
        ]
    },
    {
        "instruction": "",
        "id": "q32",
        "input": "add print depth inpython",
        "output": "",
        "rule": [
            "d32"
        ]
    },
    {
        "instruction": "",
        "id": "q33",
        "input": "python contextmanager temperarily set env",
        "output": "",
        "rule": [
            "d33"
        ]
    },
    {
        "instruction": "",
        "id": "q34",
        "input": "add serializer for type python",
        "output": "",
        "rule": [
            "d34"
        ]
    },
    {
        "instruction": "",
        "id": "q35",
        "input": "python continuation on next line",
        "output": "",
        "rule": [
            "d35"
        ]
    },
    {
        "instruction": "",
        "id": "q36",
        "input": "add swagger to python django",
        "output": "",
        "rule": [
            "d36"
        ]
    },
    {
        "instruction": "",
        "id": "q37",
        "input": "python continue executing the next command",
        "output": "",
        "rule": [
            "d37"
        ]
    },
    {
        "instruction": "",
        "id": "q38",
        "input": "add two matrix with same shape expect one dim python",
        "output": "",
        "rule": [
            "d38"
        ]
    },
    {
        "instruction": "",
        "id": "q39",
        "input": "python contourf interpolation method",
        "output": "",
        "rule": [
            "d39"
        ]
    },
    {
        "instruction": "",
        "id": "q40",
        "input": "add websocket support to python",
        "output": "",
        "rule": [
            "d40"
        ]
    },
    {
        "instruction": "",
        "id": "q41",
        "input": "python conver string to number",
        "output": "",
        "rule": [
            "d41"
        ]
    },
    {
        "instruction": "",
        "id": "q42",
        "input": "adding a horxontal line python",
        "output": "",
        "rule": [
            "d42"
        ]
    },
    {
        "instruction": "",
        "id": "q43",
        "input": "python cookies change to dict",
        "output": "",
        "rule": [
            "d43"
        ]
    },
    {
        "instruction": "",
        "id": "q44",
        "input": "alternate uppercase and lower case in python",
        "output": "",
        "rule": [
            "d44"
        ]
    },
    {
        "instruction": "",
        "id": "q45",
        "input": "python copy a dict to object attributes",
        "output": "",
        "rule": [
            "d45"
        ]
    },
    {
        "instruction": "",
        "id": "q46",
        "input": "analyze the frequency of a word using python",
        "output": "",
        "rule": [
            "d46"
        ]
    },
    {
        "instruction": "",
        "id": "q47",
        "input": "python copy files effeciently",
        "output": "",
        "rule": [
            "d47"
        ]
    },
    {
        "instruction": "",
        "id": "q48",
        "input": "append last element of the stack in pythong",
        "output": "",
        "rule": [
            "d48"
        ]
    },
    {
        "instruction": "",
        "id": "q49",
        "input": "python copy paste clipboard drop",
        "output": "",
        "rule": [
            "d49"
        ]
    },
    {
        "instruction": "",
        "id": "q50",
        "input": "apply a filter to an image python",
        "output": "",
        "rule": [
            "d50"
        ]
    },
    {
        "instruction": "",
        "id": "q51",
        "input": "python count number of words in each sentence",
        "output": "",
        "rule": [
            "d51"
        ]
    },
    {
        "instruction": "",
        "id": "q52",
        "input": "apply a function to dictionary python",
        "output": "",
        "rule": [
            "d52"
        ]
    },
    {
        "instruction": "",
        "id": "q53",
        "input": "python count partitions of a number",
        "output": "",
        "rule": [
            "d53"
        ]
    },
    {
        "instruction": "",
        "id": "q54",
        "input": "apply range to method python",
        "output": "",
        "rule": [
            "d54"
        ]
    },
    {
        "instruction": "",
        "id": "q55",
        "input": "python creat a dir",
        "output": "",
        "rule": [
            "d55"
        ]
    },
    {
        "instruction": "",
        "id": "q56",
        "input": "apply rotation on vector along a axis python",
        "output": "",
        "rule": [
            "d56"
        ]
    },
    {
        "instruction": "",
        "id": "q57",
        "input": "python create a numpy of chars",
        "output": "",
        "rule": [
            "d57"
        ]
    },
    {
        "instruction": "",
        "id": "q58",
        "input": "are python strings hashable",
        "output": "",
        "rule": [
            "d58"
        ]
    },
    {
        "instruction": "",
        "id": "q59",
        "input": "python create list of dictionary from csv file no key",
        "output": "",
        "rule": [
            "d59"
        ]
    },
    {
        "instruction": "",
        "id": "q60",
        "input": "area of a triangle python function",
        "output": "",
        "rule": [
            "d60"
        ]
    },
    {
        "instruction": "",
        "id": "q61",
        "input": "python create numpy onehot",
        "output": "",
        "rule": [
            "d61"
        ]
    },
    {
        "instruction": "",
        "id": "q62",
        "input": "around to precision python",
        "output": "",
        "rule": [
            "d62"
        ]
    },
    {
        "instruction": "",
        "id": "q63",
        "input": "python create object without class",
        "output": "",
        "rule": [
            "d63"
        ]
    },
    {
        "instruction": "",
        "id": "q64",
        "input": "ascii character representation in python 3",
        "output": "",
        "rule": [
            "d64"
        ]
    },
    {
        "instruction": "",
        "id": "q65",
        "input": "python create path pathlib create directory",
        "output": "",
        "rule": [
            "d65"
        ]
    },
    {
        "instruction": "",
        "id": "q66",
        "input": "ask any python 3 question",
        "output": "",
        "rule": [
            "d66"
        ]
    },
    {
        "instruction": "",
        "id": "q67",
        "input": "python create pointer ctypes array",
        "output": "",
        "rule": [
            "d67"
        ]
    },
    {
        "instruction": "",
        "id": "q68",
        "input": "asking user yes or no in python",
        "output": "",
        "rule": [
            "d68"
        ]
    },
    {
        "instruction": "",
        "id": "q69",
        "input": "python create print text in grid",
        "output": "",
        "rule": [
            "d69"
        ]
    },
    {
        "instruction": "",
        "id": "q70",
        "input": "assert based on part of string in a list python",
        "output": "",
        "rule": [
            "d70"
        ]
    },
    {
        "instruction": "",
        "id": "q71",
        "input": "python create range in steps",
        "output": "",
        "rule": [
            "d71"
        ]
    },
    {
        "instruction": "",
        "id": "q72",
        "input": "assure all true of a list of boolean python",
        "output": "",
        "rule": [
            "d72"
        ]
    },
    {
        "instruction": "",
        "id": "q73",
        "input": "python create unique 5 letter id",
        "output": "",
        "rule": [
            "d73"
        ]
    },
    {
        "instruction": "",
        "id": "q74",
        "input": "async list comprehension python",
        "output": "",
        "rule": [
            "d74"
        ]
    },
    {
        "instruction": "",
        "id": "q75",
        "input": "python creating a dictionary from reading a csv file with dictreader",
        "output": "",
        "rule": [
            "d75"
        ]
    },
    {
        "instruction": "",
        "id": "q76",
        "input": "attr dot notation python",
        "output": "",
        "rule": [
            "d76"
        ]
    },
    {
        "instruction": "",
        "id": "q77",
        "input": "python croniter sigle question",
        "output": "",
        "rule": [
            "d77"
        ]
    },
    {
        "instruction": "",
        "id": "q78",
        "input": "autoexit python shell after script executed",
        "output": "",
        "rule": [
            "d78"
        ]
    },
    {
        "instruction": "",
        "id": "q79",
        "input": "python cross product of two vectors",
        "output": "",
        "rule": [
            "d79"
        ]
    },
    {
        "instruction": "",
        "id": "q80",
        "input": "automatically restart python program after crash",
        "output": "",
        "rule": [
            "d80"
        ]
    },
    {
        "instruction": "",
        "id": "q81",
        "input": "python csv with comma in string",
        "output": "",
        "rule": [
            "d81"
        ]
    },
    {
        "instruction": "",
        "id": "q82",
        "input": "average time python takes to run a for loop",
        "output": "",
        "rule": [
            "d82"
        ]
    },
    {
        "instruction": "",
        "id": "q83",
        "input": "python ctypes array int",
        "output": "",
        "rule": [
            "d83"
        ]
    },
    {
        "instruction": "",
        "id": "q84",
        "input": "aws python boto3 list all ec2 with tags",
        "output": "",
        "rule": [
            "d84"
        ]
    },
    {
        "instruction": "",
        "id": "q85",
        "input": "python ctypes array to pointer",
        "output": "",
        "rule": [
            "d85"
        ]
    },
    {
        "instruction": "",
        "id": "q86",
        "input": "azure python use cli session",
        "output": "",
        "rule": [
            "d86"
        ]
    },
    {
        "instruction": "",
        "id": "q87",
        "input": "python ctypes make float string",
        "output": "",
        "rule": [
            "d87"
        ]
    },
    {
        "instruction": "",
        "id": "q88",
        "input": "before after underscore python",
        "output": "",
        "rule": [
            "d88"
        ]
    },
    {
        "instruction": "",
        "id": "q89",
        "input": "python ctypes pointer from int",
        "output": "",
        "rule": [
            "d89"
        ]
    },
    {
        "instruction": "",
        "id": "q90",
        "input": "best stopword list for python",
        "output": "",
        "rule": [
            "d90"
        ]
    },
    {
        "instruction": "",
        "id": "q91",
        "input": "python curses addstr returned err",
        "output": "",
        "rule": [
            "d91"
        ]
    },
    {
        "instruction": "",
        "id": "q92",
        "input": "best way to give file path in python",
        "output": "",
        "rule": [
            "d92"
        ]
    },
    {
        "instruction": "",
        "id": "q93",
        "input": "python cursor fetchall field name",
        "output": "",
        "rule": [
            "d93"
        ]
    },
    {
        "instruction": "",
        "id": "q94",
        "input": "best way to parse xml files in python",
        "output": "",
        "rule": [
            "d94"
        ]
    },
    {
        "instruction": "",
        "id": "q95",
        "input": "python cursor fetchone to dictionary",
        "output": "",
        "rule": [
            "d95"
        ]
    },
    {
        "instruction": "",
        "id": "q96",
        "input": "beta distribution function graph in python",
        "output": "",
        "rule": [
            "d96"
        ]
    },
    {
        "instruction": "",
        "id": "q97",
        "input": "python custom filter based on extra",
        "output": "",
        "rule": [
            "d97"
        ]
    },
    {
        "instruction": "",
        "id": "q98",
        "input": "bin as 8 digits python",
        "output": "",
        "rule": [
            "d98"
        ]
    },
    {
        "instruction": "",
        "id": "q99",
        "input": "python custom object nonetype",
        "output": "",
        "rule": [
            "d99"
        ]
    },
    {
        "instruction": "",
        "id": "q100",
        "input": "bottom 5 rows in python",
        "output": "",
        "rule": [
            "d100"
        ]
    },
    {
        "instruction": "",
        "id": "q101",
        "input": "python custom probability distribution",
        "output": "",
        "rule": [
            "d101"
        ]
    },
    {
        "instruction": "",
        "id": "q102",
        "input": "c style array to python",
        "output": "",
        "rule": [
            "d102"
        ]
    },
    {
        "instruction": "",
        "id": "q103",
        "input": "python cv2 np array to gray scale",
        "output": "",
        "rule": [
            "d103"
        ]
    },
    {
        "instruction": "",
        "id": "q104",
        "input": "calculate average value over datetime python",
        "output": "",
        "rule": [
            "d104"
        ]
    },
    {
        "instruction": "",
        "id": "q105",
        "input": "python cv2 rotate image",
        "output": "",
        "rule": [
            "d105"
        ]
    },
    {
        "instruction": "",
        "id": "q106",
        "input": "calculate cosine similarity between two document vectors python",
        "output": "",
        "rule": [
            "d106"
        ]
    },
    {
        "instruction": "",
        "id": "q107",
        "input": "python cv2 rotate image 90 degrees",
        "output": "",
        "rule": [
            "d107"
        ]
    },
    {
        "instruction": "",
        "id": "q108",
        "input": "calculate distance between two coorinates python",
        "output": "",
        "rule": [
            "d108"
        ]
    },
    {
        "instruction": "",
        "id": "q109",
        "input": "python cv2 show image in same window",
        "output": "",
        "rule": [
            "d109"
        ]
    },
    {
        "instruction": "",
        "id": "q110",
        "input": "calculate distance between two points on a map on python",
        "output": "",
        "rule": [
            "d110"
        ]
    },
    {
        "instruction": "",
        "id": "q111",
        "input": "python cycle through each column name that is obejct type and show the unique values in each",
        "output": "",
        "rule": [
            "d111"
        ]
    },
    {
        "instruction": "",
        "id": "q112",
        "input": "calculate dpi of image python",
        "output": "",
        "rule": [
            "d112"
        ]
    },
    {
        "instruction": "",
        "id": "q113",
        "input": "python date parser without format",
        "output": "",
        "rule": [
            "d113"
        ]
    },
    {
        "instruction": "",
        "id": "q114",
        "input": "calculate time complexity in python",
        "output": "",
        "rule": [
            "d114"
        ]
    },
    {
        "instruction": "",
        "id": "q115",
        "input": "python date plus one week",
        "output": "",
        "rule": [
            "d115"
        ]
    },
    {
        "instruction": "",
        "id": "q116",
        "input": "calculateinverse of a matrix in python",
        "output": "",
        "rule": [
            "d116"
        ]
    },
    {
        "instruction": "",
        "id": "q117",
        "input": "python date range iterator",
        "output": "",
        "rule": [
            "d117"
        ]
    },
    {
        "instruction": "",
        "id": "q118",
        "input": "call async function in python from another thread",
        "output": "",
        "rule": [
            "d118"
        ]
    },
    {
        "instruction": "",
        "id": "q119",
        "input": "python dateime adjust date by month",
        "output": "",
        "rule": [
            "d119"
        ]
    },
    {
        "instruction": "",
        "id": "q120",
        "input": "call external command and get output from python",
        "output": "",
        "rule": [
            "d120"
        ]
    },
    {
        "instruction": "",
        "id": "q121",
        "input": "python datetime calculate millisec",
        "output": "",
        "rule": [
            "d121"
        ]
    },
    {
        "instruction": "",
        "id": "q122",
        "input": "call function in the try condition python",
        "output": "",
        "rule": [
            "d122"
        ]
    },
    {
        "instruction": "",
        "id": "q123",
        "input": "python datetime covert to timezone",
        "output": "",
        "rule": [
            "d123"
        ]
    },
    {
        "instruction": "",
        "id": "q124",
        "input": "call python tests from robotframework",
        "output": "",
        "rule": [
            "d124"
        ]
    },
    {
        "instruction": "",
        "id": "q125",
        "input": "python datetime drop microseconds",
        "output": "",
        "rule": [
            "d125"
        ]
    },
    {
        "instruction": "",
        "id": "q126",
        "input": "callable title objects in python",
        "output": "",
        "rule": [
            "d126"
        ]
    },
    {
        "instruction": "",
        "id": "q127",
        "input": "python datetime get local time zone",
        "output": "",
        "rule": [
            "d127"
        ]
    },
    {
        "instruction": "",
        "id": "q128",
        "input": "callbacks for progress bars in python",
        "output": "",
        "rule": [
            "d128"
        ]
    },
    {
        "instruction": "",
        "id": "q129",
        "input": "python datetime has no attribute utcnow",
        "output": "",
        "rule": [
            "d129"
        ]
    },
    {
        "instruction": "",
        "id": "q130",
        "input": "camel case to upper and underscore python",
        "output": "",
        "rule": [
            "d130"
        ]
    },
    {
        "instruction": "",
        "id": "q131",
        "input": "python datetime now as timezone",
        "output": "",
        "rule": [
            "d131"
        ]
    },
    {
        "instruction": "",
        "id": "q132",
        "input": "can a datetime object be a dictionary key python 3",
        "output": "",
        "rule": [
            "d132"
        ]
    },
    {
        "instruction": "",
        "id": "q133",
        "input": "python datetime round microseconds as object",
        "output": "",
        "rule": [
            "d133"
        ]
    },
    {
        "instruction": "",
        "id": "q134",
        "input": "can i change an arraylist to a list in python",
        "output": "",
        "rule": [
            "d134"
        ]
    },
    {
        "instruction": "",
        "id": "q135",
        "input": "python datetime timezone iso",
        "output": "",
        "rule": [
            "d135"
        ]
    },
    {
        "instruction": "",
        "id": "q136",
        "input": "can i use javascript in python",
        "output": "",
        "rule": [
            "d136"
        ]
    },
    {
        "instruction": "",
        "id": "q137",
        "input": "python datetime utcfromtimestamp local time zone",
        "output": "",
        "rule": [
            "d137"
        ]
    },
    {
        "instruction": "",
        "id": "q138",
        "input": "can latex compile documents from python code",
        "output": "",
        "rule": [
            "d138"
        ]
    },
    {
        "instruction": "",
        "id": "q139",
        "input": "python datetime64 ns separate",
        "output": "",
        "rule": [
            "d139"
        ]
    },
    {
        "instruction": "",
        "id": "q140",
        "input": "can python merge with tensorflow",
        "output": "",
        "rule": [
            "d140"
        ]
    },
    {
        "instruction": "",
        "id": "q141",
        "input": "python decide interactive mode",
        "output": "",
        "rule": [
            "d141"
        ]
    },
    {
        "instruction": "",
        "id": "q142",
        "input": "can python open windows symbolic links",
        "output": "",
        "rule": [
            "d142"
        ]
    },
    {
        "instruction": "",
        "id": "q143",
        "input": "python decorate builtin methods",
        "output": "",
        "rule": [
            "d143"
        ]
    },
    {
        "instruction": "",
        "id": "q144",
        "input": "can python xml parser parse comments",
        "output": "",
        "rule": [
            "d144"
        ]
    },
    {
        "instruction": "",
        "id": "q145",
        "input": "python decorate function with optional",
        "output": "",
        "rule": [
            "d145"
        ]
    },
    {
        "instruction": "",
        "id": "q146",
        "input": "can we access img in django python",
        "output": "",
        "rule": [
            "d146"
        ]
    },
    {
        "instruction": "",
        "id": "q147",
        "input": "python default input values for a function",
        "output": "",
        "rule": [
            "d147"
        ]
    },
    {
        "instruction": "",
        "id": "q148",
        "input": "can you create an array with different intervals in python",
        "output": "",
        "rule": [
            "d148"
        ]
    },
    {
        "instruction": "",
        "id": "q149",
        "input": "python delay before closing a popup",
        "output": "",
        "rule": [
            "d149"
        ]
    },
    {
        "instruction": "",
        "id": "q150",
        "input": "can you make a gui in spyder using python",
        "output": "",
        "rule": [
            "d150"
        ]
    },
    {
        "instruction": "",
        "id": "q151",
        "input": "python delete a label",
        "output": "",
        "rule": [
            "d151"
        ]
    },
    {
        "instruction": "",
        "id": "q152",
        "input": "capitalize an arguement in python",
        "output": "",
        "rule": [
            "d152"
        ]
    },
    {
        "instruction": "",
        "id": "q153",
        "input": "python delete egg file",
        "output": "",
        "rule": [
            "d153"
        ]
    },
    {
        "instruction": "",
        "id": "q154",
        "input": "capture the cpu utilisation by using python",
        "output": "",
        "rule": [
            "d154"
        ]
    },
    {
        "instruction": "",
        "id": "q155",
        "input": "python delete solr doc",
        "output": "",
        "rule": [
            "d155"
        ]
    },
    {
        "instruction": "",
        "id": "q156",
        "input": "cast hash to string python",
        "output": "",
        "rule": [
            "d156"
        ]
    },
    {
        "instruction": "",
        "id": "q157",
        "input": "python delimit for regular expression",
        "output": "",
        "rule": [
            "d157"
        ]
    },
    {
        "instruction": "",
        "id": "q158",
        "input": "cast nametuple to dictionary python",
        "output": "",
        "rule": [
            "d158"
        ]
    },
    {
        "instruction": "",
        "id": "q159",
        "input": "python delimited join strings",
        "output": "",
        "rule": [
            "d159"
        ]
    },
    {
        "instruction": "",
        "id": "q160",
        "input": "cast python string to c string",
        "output": "",
        "rule": [
            "d160"
        ]
    },
    {
        "instruction": "",
        "id": "q161",
        "input": "python delimiter check for a file",
        "output": "",
        "rule": [
            "d161"
        ]
    },
    {
        "instruction": "",
        "id": "q162",
        "input": "cast to datetime object python",
        "output": "",
        "rule": [
            "d162"
        ]
    },
    {
        "instruction": "",
        "id": "q163",
        "input": "python deque pop block empty",
        "output": "",
        "rule": [
            "d163"
        ]
    },
    {
        "instruction": "",
        "id": "q164",
        "input": "center align text python",
        "output": "",
        "rule": [
            "d164"
        ]
    },
    {
        "instruction": "",
        "id": "q165",
        "input": "python deserializingjson to object",
        "output": "",
        "rule": [
            "d165"
        ]
    },
    {
        "instruction": "",
        "id": "q166",
        "input": "centos yum remove python",
        "output": "",
        "rule": [
            "d166"
        ]
    },
    {
        "instruction": "",
        "id": "q167",
        "input": "python detect encoding in text",
        "output": "",
        "rule": [
            "d167"
        ]
    },
    {
        "instruction": "",
        "id": "q168",
        "input": "chain iterable python one element followed by comma",
        "output": "",
        "rule": [
            "d168"
        ]
    },
    {
        "instruction": "",
        "id": "q169",
        "input": "python detect if color is on screen",
        "output": "",
        "rule": [
            "d169"
        ]
    },
    {
        "instruction": "",
        "id": "q170",
        "input": "change hhmmss format to seconds from midngiht in python",
        "output": "",
        "rule": [
            "d170"
        ]
    },
    {
        "instruction": "",
        "id": "q171",
        "input": "python detect if key is in dictionary",
        "output": "",
        "rule": [
            "d171"
        ]
    },
    {
        "instruction": "",
        "id": "q172",
        "input": "change nonetype to int python",
        "output": "",
        "rule": [
            "d172"
        ]
    },
    {
        "instruction": "",
        "id": "q173",
        "input": "python detect not json serializable",
        "output": "",
        "rule": [
            "d173"
        ]
    },
    {
        "instruction": "",
        "id": "q174",
        "input": "change path of log files using python rotatingfilehandler",
        "output": "",
        "rule": [
            "d174"
        ]
    },
    {
        "instruction": "",
        "id": "q175",
        "input": "python deter is an invalid keyword",
        "output": "",
        "rule": [
            "d175"
        ]
    },
    {
        "instruction": "",
        "id": "q176",
        "input": "change python enumerate iterator",
        "output": "",
        "rule": [
            "d176"
        ]
    },
    {
        "instruction": "",
        "id": "q177",
        "input": "python determine the type of a user input",
        "output": "",
        "rule": [
            "d177"
        ]
    },
    {
        "instruction": "",
        "id": "q178",
        "input": "change the data type in data frame in python",
        "output": "",
        "rule": [
            "d178"
        ]
    },
    {
        "instruction": "",
        "id": "q179",
        "input": "python determine whether windows or linux",
        "output": "",
        "rule": [
            "d179"
        ]
    },
    {
        "instruction": "",
        "id": "q180",
        "input": "change width of columns in all sheets python",
        "output": "",
        "rule": [
            "d180"
        ]
    },
    {
        "instruction": "",
        "id": "q181",
        "input": "python dict case insensitive",
        "output": "",
        "rule": [
            "d181"
        ]
    },
    {
        "instruction": "",
        "id": "q182",
        "input": "changes bytes obj to json python",
        "output": "",
        "rule": [
            "d182"
        ]
    },
    {
        "instruction": "",
        "id": "q183",
        "input": "python dict get hash",
        "output": "",
        "rule": [
            "d183"
        ]
    },
    {
        "instruction": "",
        "id": "q184",
        "input": "changing date from int to date in python",
        "output": "",
        "rule": [
            "d184"
        ]
    },
    {
        "instruction": "",
        "id": "q185",
        "input": "python dict remove items by keys",
        "output": "",
        "rule": [
            "d185"
        ]
    },
    {
        "instruction": "",
        "id": "q186",
        "input": "check all attributes in an object python",
        "output": "",
        "rule": [
            "d186"
        ]
    },
    {
        "instruction": "",
        "id": "q187",
        "input": "python dict update none",
        "output": "",
        "rule": [
            "d187"
        ]
    },
    {
        "instruction": "",
        "id": "q188",
        "input": "check equality between arrays python",
        "output": "",
        "rule": [
            "d188"
        ]
    },
    {
        "instruction": "",
        "id": "q189",
        "input": "python dictionary add one by one or",
        "output": "",
        "rule": [
            "d189"
        ]
    },
    {
        "instruction": "",
        "id": "q190",
        "input": "check for internet connection python",
        "output": "",
        "rule": [
            "d190"
        ]
    },
    {
        "instruction": "",
        "id": "q191",
        "input": "python dictionary if key not in dict make a default value",
        "output": "",
        "rule": [
            "d191"
        ]
    },
    {
        "instruction": "",
        "id": "q192",
        "input": "check for json python",
        "output": "",
        "rule": [
            "d192"
        ]
    },
    {
        "instruction": "",
        "id": "q193",
        "input": "python dictionary remove key with value",
        "output": "",
        "rule": [
            "d193"
        ]
    },
    {
        "instruction": "",
        "id": "q194",
        "input": "check git commit messages python",
        "output": "",
        "rule": [
            "d194"
        ]
    },
    {
        "instruction": "",
        "id": "q195",
        "input": "python dictionary setdefault nested",
        "output": "",
        "rule": [
            "d195"
        ]
    },
    {
        "instruction": "",
        "id": "q196",
        "input": "check if a file is a valid image python",
        "output": "",
        "rule": [
            "d196"
        ]
    },
    {
        "instruction": "",
        "id": "q197",
        "input": "python dictionary to html",
        "output": "",
        "rule": [
            "d197"
        ]
    },
    {
        "instruction": "",
        "id": "q198",
        "input": "check if a file is binary python",
        "output": "",
        "rule": [
            "d198"
        ]
    },
    {
        "instruction": "",
        "id": "q199",
        "input": "python dictionary to query string",
        "output": "",
        "rule": [
            "d199"
        ]
    },
    {
        "instruction": "",
        "id": "q200",
        "input": "check if all elements in a list are the same python",
        "output": "",
        "rule": [
            "d200"
        ]
    },
    {
        "instruction": "",
        "id": "q201",
        "input": "python dictionary to querystring",
        "output": "",
        "rule": [
            "d201"
        ]
    },
    {
        "instruction": "",
        "id": "q202",
        "input": "check if all elements in list are same python",
        "output": "",
        "rule": [
            "d202"
        ]
    },
    {
        "instruction": "",
        "id": "q203",
        "input": "python dictionary with keys but no values",
        "output": "",
        "rule": [
            "d203"
        ]
    },
    {
        "instruction": "",
        "id": "q204",
        "input": "check if an element is present in python and webdriver",
        "output": "",
        "rule": [
            "d204"
        ]
    },
    {
        "instruction": "",
        "id": "q205",
        "input": "python dictonary as kwargs",
        "output": "",
        "rule": [
            "d205"
        ]
    },
    {
        "instruction": "",
        "id": "q206",
        "input": "check if arg is function python",
        "output": "",
        "rule": [
            "d206"
        ]
    },
    {
        "instruction": "",
        "id": "q207",
        "input": "python disconnect shared connection",
        "output": "",
        "rule": [
            "d207"
        ]
    },
    {
        "instruction": "",
        "id": "q208",
        "input": "check if column is object in python",
        "output": "",
        "rule": [
            "d208"
        ]
    },
    {
        "instruction": "",
        "id": "q209",
        "input": "python discover unit tests",
        "output": "",
        "rule": [
            "d209"
        ]
    },
    {
        "instruction": "",
        "id": "q210",
        "input": "check if datetime python",
        "output": "",
        "rule": [
            "d210"
        ]
    },
    {
        "instruction": "",
        "id": "q211",
        "input": "python disctionary from json string",
        "output": "",
        "rule": [
            "d211"
        ]
    },
    {
        "instruction": "",
        "id": "q212",
        "input": "check if function is defined python",
        "output": "",
        "rule": [
            "d212"
        ]
    },
    {
        "instruction": "",
        "id": "q213",
        "input": "python display horizontal line",
        "output": "",
        "rule": [
            "d213"
        ]
    },
    {
        "instruction": "",
        "id": "q214",
        "input": "check if group exists python",
        "output": "",
        "rule": [
            "d214"
        ]
    },
    {
        "instruction": "",
        "id": "q215",
        "input": "python displaying data in two treeviews",
        "output": "",
        "rule": [
            "d215"
        ]
    },
    {
        "instruction": "",
        "id": "q216",
        "input": "check if images are identical python",
        "output": "",
        "rule": [
            "d216"
        ]
    },
    {
        "instruction": "",
        "id": "q217",
        "input": "python distance two points",
        "output": "",
        "rule": [
            "d217"
        ]
    },
    {
        "instruction": "",
        "id": "q218",
        "input": "check if images are similar python",
        "output": "",
        "rule": [
            "d218"
        ]
    },
    {
        "instruction": "",
        "id": "q219",
        "input": "python distort image like fisheye",
        "output": "",
        "rule": [
            "d219"
        ]
    },
    {
        "instruction": "",
        "id": "q220",
        "input": "check if multiple variables are none python",
        "output": "",
        "rule": [
            "d220"
        ]
    },
    {
        "instruction": "",
        "id": "q221",
        "input": "python django delete all rows in table",
        "output": "",
        "rule": [
            "d221"
        ]
    },
    {
        "instruction": "",
        "id": "q222",
        "input": "check if number is complex python",
        "output": "",
        "rule": [
            "d222"
        ]
    },
    {
        "instruction": "",
        "id": "q223",
        "input": "python django delete project",
        "output": "",
        "rule": [
            "d223"
        ]
    },
    {
        "instruction": "",
        "id": "q224",
        "input": "check if stdin exists python",
        "output": "",
        "rule": [
            "d224"
        ]
    },
    {
        "instruction": "",
        "id": "q225",
        "input": "python django return response status",
        "output": "",
        "rule": [
            "d225"
        ]
    },
    {
        "instruction": "",
        "id": "q226",
        "input": "check if string is file or directory python",
        "output": "",
        "rule": [
            "d226"
        ]
    },
    {
        "instruction": "",
        "id": "q227",
        "input": "python doc comment of a field",
        "output": "",
        "rule": [
            "d227"
        ]
    },
    {
        "instruction": "",
        "id": "q228",
        "input": "check if the radiobutton is selected in python",
        "output": "",
        "rule": [
            "d228"
        ]
    },
    {
        "instruction": "",
        "id": "q229",
        "input": "python documentation radians to degrees",
        "output": "",
        "rule": [
            "d229"
        ]
    },
    {
        "instruction": "",
        "id": "q230",
        "input": "check is string is date in python",
        "output": "",
        "rule": [
            "d230"
        ]
    },
    {
        "instruction": "",
        "id": "q231",
        "input": "python docx section' object has no attribute 'header'",
        "output": "",
        "rule": [
            "d231"
        ]
    },
    {
        "instruction": "",
        "id": "q232",
        "input": "check key type python",
        "output": "",
        "rule": [
            "d232"
        ]
    },
    {
        "instruction": "",
        "id": "q233",
        "input": "python doesn't return prompt",
        "output": "",
        "rule": [
            "d233"
        ]
    },
    {
        "instruction": "",
        "id": "q234",
        "input": "check max supported depth of recursion python",
        "output": "",
        "rule": [
            "d234"
        ]
    },
    {
        "instruction": "",
        "id": "q235",
        "input": "python draw a box at random coordinates",
        "output": "",
        "rule": [
            "d235"
        ]
    },
    {
        "instruction": "",
        "id": "q236",
        "input": "check my python path",
        "output": "",
        "rule": [
            "d236"
        ]
    },
    {
        "instruction": "",
        "id": "q237",
        "input": "python draw a line",
        "output": "",
        "rule": [
            "d237"
        ]
    },
    {
        "instruction": "",
        "id": "q238",
        "input": "check not nonetype python",
        "output": "",
        "rule": [
            "d238"
        ]
    },
    {
        "instruction": "",
        "id": "q239",
        "input": "python duck typing object validate",
        "output": "",
        "rule": [
            "d239"
        ]
    },
    {
        "instruction": "",
        "id": "q240",
        "input": "check prefix of a list python",
        "output": "",
        "rule": [
            "d240"
        ]
    },
    {
        "instruction": "",
        "id": "q241",
        "input": "python dump dictionary to yaml pretty",
        "output": "",
        "rule": [
            "d241"
        ]
    },
    {
        "instruction": "",
        "id": "q242",
        "input": "check set covers other set python",
        "output": "",
        "rule": [
            "d242"
        ]
    },
    {
        "instruction": "",
        "id": "q243",
        "input": "python dump numpy array to json",
        "output": "",
        "rule": [
            "d243"
        ]
    },
    {
        "instruction": "",
        "id": "q244",
        "input": "check several strings empty in python",
        "output": "",
        "rule": [
            "d244"
        ]
    },
    {
        "instruction": "",
        "id": "q245",
        "input": "python dynamic type of an object",
        "output": "",
        "rule": [
            "d245"
        ]
    },
    {
        "instruction": "",
        "id": "q246",
        "input": "python dynamically make data go from one table to another",
        "output": "",
        "rule": [
            "d246"
        ]
    },
    {
        "instruction": "",
        "id": "q247",
        "input": "check the status of windows service in python",
        "output": "",
        "rule": [
            "d247"
        ]
    },
    {
        "instruction": "",
        "id": "q248",
        "input": "python dynamodb export all hash key",
        "output": "",
        "rule": [
            "d248"
        ]
    },
    {
        "instruction": "",
        "id": "q249",
        "input": "check type throughout a list python",
        "output": "",
        "rule": [
            "d249"
        ]
    },
    {
        "instruction": "",
        "id": "q250",
        "input": "python editing text files to replace quotes in tex",
        "output": "",
        "rule": [
            "d250"
        ]
    },
    {
        "instruction": "",
        "id": "q251",
        "input": "check virtualenv is loaded on python",
        "output": "",
        "rule": [
            "d251"
        ]
    },
    {
        "instruction": "",
        "id": "q252",
        "input": "python elasticsearch bulk index",
        "output": "",
        "rule": [
            "d252"
        ]
    },
    {
        "instruction": "",
        "id": "q253",
        "input": "check whether column is datetime in python",
        "output": "",
        "rule": [
            "d253"
        ]
    },
    {
        "instruction": "",
        "id": "q254",
        "input": "python empty cursor object",
        "output": "",
        "rule": [
            "d254"
        ]
    },
    {
        "instruction": "",
        "id": "q255",
        "input": "check windows service status from python",
        "output": "",
        "rule": [
            "d255"
        ]
    },
    {
        "instruction": "",
        "id": "q256",
        "input": "python emulate copy docx with style",
        "output": "",
        "rule": [
            "d256"
        ]
    },
    {
        "instruction": "",
        "id": "q257",
        "input": "checking if something is a string in python 3",
        "output": "",
        "rule": [
            "d257"
        ]
    },
    {
        "instruction": "",
        "id": "q258",
        "input": "python encoding to read files",
        "output": "",
        "rule": [
            "d258"
        ]
    },
    {
        "instruction": "",
        "id": "q259",
        "input": "checking to see if there is input from a serial port python",
        "output": "",
        "rule": [
            "d259"
        ]
    },
    {
        "instruction": "",
        "id": "q260",
        "input": "python ensure current user root",
        "output": "",
        "rule": [
            "d260"
        ]
    },
    {
        "instruction": "",
        "id": "q261",
        "input": "checking types of elements inside of an 2d array python",
        "output": "",
        "rule": [
            "d261"
        ]
    },
    {
        "instruction": "",
        "id": "q262",
        "input": "python enum custom members",
        "output": "",
        "rule": [
            "d262"
        ]
    },
    {
        "instruction": "",
        "id": "q263",
        "input": "checking user in group python",
        "output": "",
        "rule": [
            "d263"
        ]
    },
    {
        "instruction": "",
        "id": "q264",
        "input": "python enum get all name",
        "output": "",
        "rule": [
            "d264"
        ]
    },
    {
        "instruction": "",
        "id": "q265",
        "input": "choose k from n python fact",
        "output": "",
        "rule": [
            "d265"
        ]
    },
    {
        "instruction": "",
        "id": "q266",
        "input": "python enum get all values",
        "output": "",
        "rule": [
            "d266"
        ]
    },
    {
        "instruction": "",
        "id": "q267",
        "input": "cifar 10 python how to open",
        "output": "",
        "rule": [
            "d267"
        ]
    },
    {
        "instruction": "",
        "id": "q268",
        "input": "python enum values to list",
        "output": "",
        "rule": [
            "d268"
        ]
    },
    {
        "instruction": "",
        "id": "q269",
        "input": "cifar10 python tensorflow example",
        "output": "",
        "rule": [
            "d269"
        ]
    },
    {
        "instruction": "",
        "id": "q270",
        "input": "python equal aspect ratio",
        "output": "",
        "rule": [
            "d270"
        ]
    },
    {
        "instruction": "",
        "id": "q271",
        "input": "clear memory python after each loop",
        "output": "",
        "rule": [
            "d271"
        ]
    },
    {
        "instruction": "",
        "id": "q272",
        "input": "python equivalent of matlab movmean function",
        "output": "",
        "rule": [
            "d272"
        ]
    },
    {
        "instruction": "",
        "id": "q273",
        "input": "clearing data from memory in python",
        "output": "",
        "rule": [
            "d273"
        ]
    },
    {
        "instruction": "",
        "id": "q274",
        "input": "python even or odd booleans only",
        "output": "",
        "rule": [
            "d274"
        ]
    },
    {
        "instruction": "",
        "id": "q275",
        "input": "clip python truncate extreme",
        "output": "",
        "rule": [
            "d275"
        ]
    },
    {
        "instruction": "",
        "id": "q276",
        "input": "python excpetion add attributes and reraise",
        "output": "",
        "rule": [
            "d276"
        ]
    },
    {
        "instruction": "",
        "id": "q277",
        "input": "close all figures at once python",
        "output": "",
        "rule": [
            "d277"
        ]
    },
    {
        "instruction": "",
        "id": "q278",
        "input": "python exec string name not defined",
        "output": "",
        "rule": [
            "d278"
        ]
    },
    {
        "instruction": "",
        "id": "q279",
        "input": "close connection in server using sockets in python",
        "output": "",
        "rule": [
            "d279"
        ]
    },
    {
        "instruction": "",
        "id": "q280",
        "input": "python execute function with locals",
        "output": "",
        "rule": [
            "d280"
        ]
    },
    {
        "instruction": "",
        "id": "q281",
        "input": "close connection python sqlalchemy",
        "output": "",
        "rule": [
            "d281"
        ]
    },
    {
        "instruction": "",
        "id": "q282",
        "input": "python expected byte like object not a string object",
        "output": "",
        "rule": [
            "d282"
        ]
    },
    {
        "instruction": "",
        "id": "q283",
        "input": "close figure python example",
        "output": "",
        "rule": [
            "d283"
        ]
    },
    {
        "instruction": "",
        "id": "q284",
        "input": "python exponential function fit",
        "output": "",
        "rule": [
            "d284"
        ]
    },
    {
        "instruction": "",
        "id": "q285",
        "input": "closest nonzero value in array python",
        "output": "",
        "rule": [
            "d285"
        ]
    },
    {
        "instruction": "",
        "id": "q286",
        "input": "python express gaussian function",
        "output": "",
        "rule": [
            "d286"
        ]
    },
    {
        "instruction": "",
        "id": "q287",
        "input": "code that deletes any folder if empty python",
        "output": "",
        "rule": [
            "d287"
        ]
    },
    {
        "instruction": "",
        "id": "q288",
        "input": "python extract 5 pages at once from pdf",
        "output": "",
        "rule": [
            "d288"
        ]
    },
    {
        "instruction": "",
        "id": "q289",
        "input": "code to use to terminate a program on python",
        "output": "",
        "rule": [
            "d289"
        ]
    },
    {
        "instruction": "",
        "id": "q290",
        "input": "python fast dot product between matrices",
        "output": "",
        "rule": [
            "d290"
        ]
    },
    {
        "instruction": "",
        "id": "q291",
        "input": "colors for text in python code",
        "output": "",
        "rule": [
            "d291"
        ]
    },
    {
        "instruction": "",
        "id": "q292",
        "input": "python fastest way to compare two files",
        "output": "",
        "rule": [
            "d292"
        ]
    },
    {
        "instruction": "",
        "id": "q293",
        "input": "column and row of matrix python",
        "output": "",
        "rule": [
            "d293"
        ]
    },
    {
        "instruction": "",
        "id": "q294",
        "input": "python fastest way to create a string size n",
        "output": "",
        "rule": [
            "d294"
        ]
    },
    {
        "instruction": "",
        "id": "q295",
        "input": "column names in table sqlite3 python",
        "output": "",
        "rule": [
            "d295"
        ]
    },
    {
        "instruction": "",
        "id": "q296",
        "input": "python fastest way to remove duplicates from a list",
        "output": "",
        "rule": [
            "d296"
        ]
    },
    {
        "instruction": "",
        "id": "q297",
        "input": "combobox methods in tkinter python",
        "output": "",
        "rule": [
            "d297"
        ]
    },
    {
        "instruction": "",
        "id": "q298",
        "input": "python fft high amplitude at 0",
        "output": "",
        "rule": [
            "d298"
        ]
    },
    {
        "instruction": "",
        "id": "q299",
        "input": "compare an empty set python",
        "output": "",
        "rule": [
            "d299"
        ]
    },
    {
        "instruction": "",
        "id": "q300",
        "input": "python file chooser restrict file types",
        "output": "",
        "rule": [
            "d300"
        ]
    },
    {
        "instruction": "",
        "id": "q301",
        "input": "compare dict for equality python",
        "output": "",
        "rule": [
            "d301"
        ]
    },
    {
        "instruction": "",
        "id": "q302",
        "input": "python file flush doesnot work",
        "output": "",
        "rule": [
            "d302"
        ]
    },
    {
        "instruction": "",
        "id": "q303",
        "input": "compare numpy dtype to python type",
        "output": "",
        "rule": [
            "d303"
        ]
    },
    {
        "instruction": "",
        "id": "q304",
        "input": "python file is empty or not",
        "output": "",
        "rule": [
            "d304"
        ]
    },
    {
        "instruction": "",
        "id": "q305",
        "input": "compare primitive arrays for equality python",
        "output": "",
        "rule": [
            "d305"
        ]
    },
    {
        "instruction": "",
        "id": "q306",
        "input": "python file size determination",
        "output": "",
        "rule": [
            "d306"
        ]
    },
    {
        "instruction": "",
        "id": "q307",
        "input": "comparing floats and ints python",
        "output": "",
        "rule": [
            "d307"
        ]
    },
    {
        "instruction": "",
        "id": "q308",
        "input": "python fill a form",
        "output": "",
        "rule": [
            "d308"
        ]
    },
    {
        "instruction": "",
        "id": "q309",
        "input": "compile python with clang",
        "output": "",
        "rule": [
            "d309"
        ]
    },
    {
        "instruction": "",
        "id": "q310",
        "input": "python fillna if false",
        "output": "",
        "rule": [
            "d310"
        ]
    },
    {
        "instruction": "",
        "id": "q311",
        "input": "compression in python without using zlib",
        "output": "",
        "rule": [
            "d311"
        ]
    },
    {
        "instruction": "",
        "id": "q312",
        "input": "python fillna inplace not working",
        "output": "",
        "rule": [
            "d312"
        ]
    },
    {
        "instruction": "",
        "id": "q313",
        "input": "compute degrees from survey bearing python function",
        "output": "",
        "rule": [
            "d313"
        ]
    },
    {
        "instruction": "",
        "id": "q314",
        "input": "python filter str object is not callable",
        "output": "",
        "rule": [
            "d314"
        ]
    },
    {
        "instruction": "",
        "id": "q315",
        "input": "compute distance from longitude and latitude python",
        "output": "",
        "rule": [
            "d315"
        ]
    },
    {
        "instruction": "",
        "id": "q316",
        "input": "python finding the smallest and largetst valuse in a list",
        "output": "",
        "rule": [
            "d316"
        ]
    },
    {
        "instruction": "",
        "id": "q317",
        "input": "compute eigenvalues of transition matrix in python",
        "output": "",
        "rule": [
            "d317"
        ]
    },
    {
        "instruction": "",
        "id": "q318",
        "input": "python fit in 2 dimensions",
        "output": "",
        "rule": [
            "d318"
        ]
    },
    {
        "instruction": "",
        "id": "q319",
        "input": "compute euclidean distance between test set and training setin python",
        "output": "",
        "rule": [
            "d319"
        ]
    },
    {
        "instruction": "",
        "id": "q320",
        "input": "python fit to exponential function",
        "output": "",
        "rule": [
            "d320"
        ]
    },
    {
        "instruction": "",
        "id": "q321",
        "input": "compute euclidean distance python 2d",
        "output": "",
        "rule": [
            "d321"
        ]
    },
    {
        "instruction": "",
        "id": "q322",
        "input": "python fits table add a column",
        "output": "",
        "rule": [
            "d322"
        ]
    },
    {
        "instruction": "",
        "id": "q323",
        "input": "compute gcd of a list of element in python",
        "output": "",
        "rule": [
            "d323"
        ]
    },
    {
        "instruction": "",
        "id": "q324",
        "input": "python flake8 line too long",
        "output": "",
        "rule": [
            "d324"
        ]
    },
    {
        "instruction": "",
        "id": "q325",
        "input": "conactecate array python without numpy",
        "output": "",
        "rule": [
            "d325"
        ]
    },
    {
        "instruction": "",
        "id": "q326",
        "input": "python flask booleanfield center",
        "output": "",
        "rule": [
            "d326"
        ]
    },
    {
        "instruction": "",
        "id": "q327",
        "input": "concate column names in python",
        "output": "",
        "rule": [
            "d327"
        ]
    },
    {
        "instruction": "",
        "id": "q328",
        "input": "python flask get text from form post",
        "output": "",
        "rule": [
            "d328"
        ]
    },
    {
        "instruction": "",
        "id": "q329",
        "input": "concertnate strings and ints in python",
        "output": "",
        "rule": [
            "d329"
        ]
    },
    {
        "instruction": "",
        "id": "q330",
        "input": "python flask header cors allow",
        "output": "",
        "rule": [
            "d330"
        ]
    },
    {
        "instruction": "",
        "id": "q331",
        "input": "conditional probability function in python",
        "output": "",
        "rule": [
            "d331"
        ]
    },
    {
        "instruction": "",
        "id": "q332",
        "input": "python flask method for common request",
        "output": "",
        "rule": [
            "d332"
        ]
    },
    {
        "instruction": "",
        "id": "q333",
        "input": "conditional probability functions in python",
        "output": "",
        "rule": [
            "d333"
        ]
    },
    {
        "instruction": "",
        "id": "q334",
        "input": "python flask mime types",
        "output": "",
        "rule": [
            "d334"
        ]
    },
    {
        "instruction": "",
        "id": "q335",
        "input": "confluent kafka consume poll python",
        "output": "",
        "rule": [
            "d335"
        ]
    },
    {
        "instruction": "",
        "id": "q336",
        "input": "python flask render list of files as links",
        "output": "",
        "rule": [
            "d336"
        ]
    },
    {
        "instruction": "",
        "id": "q337",
        "input": "contolling the x and y limits of plot in python",
        "output": "",
        "rule": [
            "d337"
        ]
    },
    {
        "instruction": "",
        "id": "q338",
        "input": "python flask sqlalchemy query on a query",
        "output": "",
        "rule": [
            "d338"
        ]
    },
    {
        "instruction": "",
        "id": "q339",
        "input": "convolve image with kernel python stack overflow",
        "output": "",
        "rule": [
            "d339"
        ]
    },
    {
        "instruction": "",
        "id": "q340",
        "input": "python flask template extend with context",
        "output": "",
        "rule": [
            "d340"
        ]
    },
    {
        "instruction": "",
        "id": "q341",
        "input": "coroutine blocking functions python",
        "output": "",
        "rule": [
            "d341"
        ]
    },
    {
        "instruction": "",
        "id": "q342",
        "input": "python flask template request status 403",
        "output": "",
        "rule": [
            "d342"
        ]
    },
    {
        "instruction": "",
        "id": "q343",
        "input": "cosine similarity python query",
        "output": "",
        "rule": [
            "d343"
        ]
    },
    {
        "instruction": "",
        "id": "q344",
        "input": "python flask template static file",
        "output": "",
        "rule": [
            "d344"
        ]
    },
    {
        "instruction": "",
        "id": "q345",
        "input": "count frequency of unique values in list python",
        "output": "",
        "rule": [
            "d345"
        ]
    },
    {
        "instruction": "",
        "id": "q346",
        "input": "python float precision rounding",
        "output": "",
        "rule": [
            "d346"
        ]
    },
    {
        "instruction": "",
        "id": "q347",
        "input": "count number of overlaps in two python lists",
        "output": "",
        "rule": [
            "d347"
        ]
    },
    {
        "instruction": "",
        "id": "q348",
        "input": "python float to int cast round",
        "output": "",
        "rule": [
            "d348"
        ]
    },
    {
        "instruction": "",
        "id": "q349",
        "input": "covert datetime date to datetime python",
        "output": "",
        "rule": [
            "d349"
        ]
    },
    {
        "instruction": "",
        "id": "q350",
        "input": "python focusout comes before button",
        "output": "",
        "rule": [
            "d350"
        ]
    },
    {
        "instruction": "",
        "id": "q351",
        "input": "creat new folder in python",
        "output": "",
        "rule": [
            "d351"
        ]
    },
    {
        "instruction": "",
        "id": "q352",
        "input": "create 2d array python numpy one hot encoding",
        "output": "",
        "rule": [
            "d352"
        ]
    },
    {
        "instruction": "",
        "id": "q353",
        "input": "python for each regex match in a string",
        "output": "",
        "rule": [
            "d353"
        ]
    },
    {
        "instruction": "",
        "id": "q354",
        "input": "create 5 by 5 matrix in python",
        "output": "",
        "rule": [
            "d354"
        ]
    },
    {
        "instruction": "",
        "id": "q355",
        "input": "python for multiple iterables",
        "output": "",
        "rule": [
            "d355"
        ]
    },
    {
        "instruction": "",
        "id": "q356",
        "input": "create a dict as ordered dict in python",
        "output": "",
        "rule": [
            "d356"
        ]
    },
    {
        "instruction": "",
        "id": "q357",
        "input": "python for sql server bulk load",
        "output": "",
        "rule": [
            "d357"
        ]
    },
    {
        "instruction": "",
        "id": "q358",
        "input": "create a trie with a words python",
        "output": "",
        "rule": [
            "d358"
        ]
    },
    {
        "instruction": "",
        "id": "q359",
        "input": "python foreign key to a foreign key",
        "output": "",
        "rule": [
            "d359"
        ]
    },
    {
        "instruction": "",
        "id": "q360",
        "input": "create an array in python without numpy",
        "output": "",
        "rule": [
            "d360"
        ]
    },
    {
        "instruction": "",
        "id": "q361",
        "input": "python fork output incomplete",
        "output": "",
        "rule": [
            "d361"
        ]
    },
    {
        "instruction": "",
        "id": "q362",
        "input": "create automatic unique id in python",
        "output": "",
        "rule": [
            "d362"
        ]
    },
    {
        "instruction": "",
        "id": "q363",
        "input": "python form data to dict",
        "output": "",
        "rule": [
            "d363"
        ]
    },
    {
        "instruction": "",
        "id": "q364",
        "input": "create database postgres python sqlalchemy",
        "output": "",
        "rule": [
            "d364"
        ]
    },
    {
        "instruction": "",
        "id": "q365",
        "input": "python format string pass varialbes",
        "output": "",
        "rule": [
            "d365"
        ]
    },
    {
        "instruction": "",
        "id": "q366",
        "input": "create dictionary python unique key",
        "output": "",
        "rule": [
            "d366"
        ]
    },
    {
        "instruction": "",
        "id": "q367",
        "input": "python formatting a long line",
        "output": "",
        "rule": [
            "d367"
        ]
    },
    {
        "instruction": "",
        "id": "q368",
        "input": "create executable python script directly instead of chmod",
        "output": "",
        "rule": [
            "d368"
        ]
    },
    {
        "instruction": "",
        "id": "q369",
        "input": "python formatting code into 2 lines",
        "output": "",
        "rule": [
            "d369"
        ]
    },
    {
        "instruction": "",
        "id": "q370",
        "input": "create matrix from vectors python3",
        "output": "",
        "rule": [
            "d370"
        ]
    },
    {
        "instruction": "",
        "id": "q371",
        "input": "python found to nearest integer",
        "output": "",
        "rule": [
            "d371"
        ]
    },
    {
        "instruction": "",
        "id": "q372",
        "input": "create parse args python script",
        "output": "",
        "rule": [
            "d372"
        ]
    },
    {
        "instruction": "",
        "id": "q373",
        "input": "python free unused numpy array memory",
        "output": "",
        "rule": [
            "d373"
        ]
    },
    {
        "instruction": "",
        "id": "q374",
        "input": "create polygon from lists of points python",
        "output": "",
        "rule": [
            "d374"
        ]
    },
    {
        "instruction": "",
        "id": "q375",
        "input": "python ftp login and get file",
        "output": "",
        "rule": [
            "d375"
        ]
    },
    {
        "instruction": "",
        "id": "q376",
        "input": "create temporary directory in python with a specific name",
        "output": "",
        "rule": [
            "d376"
        ]
    },
    {
        "instruction": "",
        "id": "q377",
        "input": "python ftp server user name and password",
        "output": "",
        "rule": [
            "d377"
        ]
    },
    {
        "instruction": "",
        "id": "q378",
        "input": "create unique list from a list in python",
        "output": "",
        "rule": [
            "d378"
        ]
    },
    {
        "instruction": "",
        "id": "q379",
        "input": "python ftps implicit ssl",
        "output": "",
        "rule": [
            "d379"
        ]
    },
    {
        "instruction": "",
        "id": "q380",
        "input": "creating a function to fit exponential curve python",
        "output": "",
        "rule": [
            "d380"
        ]
    },
    {
        "instruction": "",
        "id": "q381",
        "input": "python fucntion if every element is true",
        "output": "",
        "rule": [
            "d381"
        ]
    },
    {
        "instruction": "",
        "id": "q382",
        "input": "creating a matrix in python tensorflow",
        "output": "",
        "rule": [
            "d382"
        ]
    },
    {
        "instruction": "",
        "id": "q383",
        "input": "python fully qualified filename",
        "output": "",
        "rule": [
            "d383"
        ]
    },
    {
        "instruction": "",
        "id": "q384",
        "input": "creating an index file in python",
        "output": "",
        "rule": [
            "d384"
        ]
    },
    {
        "instruction": "",
        "id": "q385",
        "input": "python function states whether a list is sorted",
        "output": "",
        "rule": [
            "d385"
        ]
    },
    {
        "instruction": "",
        "id": "q386",
        "input": "credit card number check digit python",
        "output": "",
        "rule": [
            "d386"
        ]
    },
    {
        "instruction": "",
        "id": "q387",
        "input": "python function stating with underscore",
        "output": "",
        "rule": [
            "d387"
        ]
    },
    {
        "instruction": "",
        "id": "q388",
        "input": "csv to yaml python",
        "output": "",
        "rule": [
            "d388"
        ]
    },
    {
        "instruction": "",
        "id": "q389",
        "input": "python function that returns the average of each length of words in a string",
        "output": "",
        "rule": [
            "d389"
        ]
    },
    {
        "instruction": "",
        "id": "q390",
        "input": "cumulative sum of list python",
        "output": "",
        "rule": [
            "d390"
        ]
    },
    {
        "instruction": "",
        "id": "q391",
        "input": "python function to bold the print statemetn",
        "output": "",
        "rule": [
            "d391"
        ]
    },
    {
        "instruction": "",
        "id": "q392",
        "input": "cursor movement in game using python",
        "output": "",
        "rule": [
            "d392"
        ]
    },
    {
        "instruction": "",
        "id": "q393",
        "input": "python function to get object attributes",
        "output": "",
        "rule": [
            "d393"
        ]
    },
    {
        "instruction": "",
        "id": "q394",
        "input": "cursor position graphics python",
        "output": "",
        "rule": [
            "d394"
        ]
    },
    {
        "instruction": "",
        "id": "q395",
        "input": "python function to remove spaces in a string",
        "output": "",
        "rule": [
            "d395"
        ]
    },
    {
        "instruction": "",
        "id": "q396",
        "input": "custom scatter plot marker with png python",
        "output": "",
        "rule": [
            "d396"
        ]
    },
    {
        "instruction": "",
        "id": "q397",
        "input": "python function to upload file to s3",
        "output": "",
        "rule": [
            "d397"
        ]
    },
    {
        "instruction": "",
        "id": "q398",
        "input": "cv2 python load image",
        "output": "",
        "rule": [
            "d398"
        ]
    },
    {
        "instruction": "",
        "id": "q399",
        "input": "python function use variable defined in outer scope",
        "output": "",
        "rule": [
            "d399"
        ]
    },
    {
        "instruction": "",
        "id": "q400",
        "input": "python function used to explode a string into a list of strings",
        "output": "",
        "rule": [
            "d400"
        ]
    },
    {
        "instruction": "",
        "id": "q401",
        "input": "date to jday python",
        "output": "",
        "rule": [
            "d401"
        ]
    },
    {
        "instruction": "",
        "id": "q402",
        "input": "python gaussian filter blur image",
        "output": "",
        "rule": [
            "d402"
        ]
    },
    {
        "instruction": "",
        "id": "q403",
        "input": "datetime to json in python",
        "output": "",
        "rule": [
            "d403"
        ]
    },
    {
        "instruction": "",
        "id": "q404",
        "input": "python gaussian pdf plot",
        "output": "",
        "rule": [
            "d404"
        ]
    },
    {
        "instruction": "",
        "id": "q405",
        "input": "datetime to timestamp ironpython",
        "output": "",
        "rule": [
            "d405"
        ]
    },
    {
        "instruction": "",
        "id": "q406",
        "input": "python generate a string based on a list",
        "output": "",
        "rule": [
            "d406"
        ]
    },
    {
        "instruction": "",
        "id": "q407",
        "input": "decision tree for the data with all the categorical data in python",
        "output": "",
        "rule": [
            "d407"
        ]
    },
    {
        "instruction": "",
        "id": "q408",
        "input": "python generate code from json schema definition",
        "output": "",
        "rule": [
            "d408"
        ]
    },
    {
        "instruction": "",
        "id": "q409",
        "input": "declaring a hash in python",
        "output": "",
        "rule": [
            "d409"
        ]
    },
    {
        "instruction": "",
        "id": "q410",
        "input": "python generate list of cononants",
        "output": "",
        "rule": [
            "d410"
        ]
    },
    {
        "instruction": "",
        "id": "q411",
        "input": "default function arg in python",
        "output": "",
        "rule": [
            "d411"
        ]
    },
    {
        "instruction": "",
        "id": "q412",
        "input": "python generate method name",
        "output": "",
        "rule": [
            "d412"
        ]
    },
    {
        "instruction": "",
        "id": "q413",
        "input": "default value in argparse python",
        "output": "",
        "rule": [
            "d413"
        ]
    },
    {
        "instruction": "",
        "id": "q414",
        "input": "python get all callables from an object",
        "output": "",
        "rule": [
            "d414"
        ]
    },
    {
        "instruction": "",
        "id": "q415",
        "input": "define an empty column in a data frame in python",
        "output": "",
        "rule": [
            "d415"
        ]
    },
    {
        "instruction": "",
        "id": "q416",
        "input": "python get all keys in a section configparser",
        "output": "",
        "rule": [
            "d416"
        ]
    },
    {
        "instruction": "",
        "id": "q417",
        "input": "delaunay triangulation polygon python",
        "output": "",
        "rule": [
            "d417"
        ]
    },
    {
        "instruction": "",
        "id": "q418",
        "input": "python get all keys in object",
        "output": "",
        "rule": [
            "d418"
        ]
    },
    {
        "instruction": "",
        "id": "q419",
        "input": "delete a python virtual env",
        "output": "",
        "rule": [
            "d419"
        ]
    },
    {
        "instruction": "",
        "id": "q420",
        "input": "python get all the function names in this model",
        "output": "",
        "rule": [
            "d420"
        ]
    },
    {
        "instruction": "",
        "id": "q421",
        "input": "delete all columns except one in python",
        "output": "",
        "rule": [
            "d421"
        ]
    },
    {
        "instruction": "",
        "id": "q422",
        "input": "python get an objects id",
        "output": "",
        "rule": [
            "d422"
        ]
    },
    {
        "instruction": "",
        "id": "q423",
        "input": "delete commas from a string python",
        "output": "",
        "rule": [
            "d423"
        ]
    },
    {
        "instruction": "",
        "id": "q424",
        "input": "python get angle from x, y",
        "output": "",
        "rule": [
            "d424"
        ]
    },
    {
        "instruction": "",
        "id": "q425",
        "input": "delete duplicates in an array python",
        "output": "",
        "rule": [
            "d425"
        ]
    },
    {
        "instruction": "",
        "id": "q426",
        "input": "python get appropriate extension for file",
        "output": "",
        "rule": [
            "d426"
        ]
    },
    {
        "instruction": "",
        "id": "q427",
        "input": "delete flask data in python",
        "output": "",
        "rule": [
            "d427"
        ]
    },
    {
        "instruction": "",
        "id": "q428",
        "input": "python get boolean input from user",
        "output": "",
        "rule": [
            "d428"
        ]
    },
    {
        "instruction": "",
        "id": "q429",
        "input": "python get colors in image",
        "output": "",
        "rule": [
            "d429"
        ]
    },
    {
        "instruction": "",
        "id": "q430",
        "input": "delete value from heap python",
        "output": "",
        "rule": [
            "d430"
        ]
    },
    {
        "instruction": "",
        "id": "q431",
        "input": "python get current process memory",
        "output": "",
        "rule": [
            "d431"
        ]
    },
    {
        "instruction": "",
        "id": "q432",
        "input": "delete zeros in sparse matrix python",
        "output": "",
        "rule": [
            "d432"
        ]
    },
    {
        "instruction": "",
        "id": "q433",
        "input": "python get day number of month",
        "output": "",
        "rule": [
            "d433"
        ]
    },
    {
        "instruction": "",
        "id": "q434",
        "input": "delimit list by tabs in python",
        "output": "",
        "rule": [
            "d434"
        ]
    },
    {
        "instruction": "",
        "id": "q435",
        "input": "python get days in month",
        "output": "",
        "rule": [
            "d435"
        ]
    },
    {
        "instruction": "",
        "id": "q436",
        "input": "dequeue check for item python",
        "output": "",
        "rule": [
            "d436"
        ]
    },
    {
        "instruction": "",
        "id": "q437",
        "input": "python get decorated function's value",
        "output": "",
        "rule": [
            "d437"
        ]
    },
    {
        "instruction": "",
        "id": "q438",
        "input": "detect char encoding python",
        "output": "",
        "rule": [
            "d438"
        ]
    },
    {
        "instruction": "",
        "id": "q439",
        "input": "python get directory of self",
        "output": "",
        "rule": [
            "d439"
        ]
    },
    {
        "instruction": "",
        "id": "q440",
        "input": "detect is host in in the network python",
        "output": "",
        "rule": [
            "d440"
        ]
    },
    {
        "instruction": "",
        "id": "q441",
        "input": "python get distance between two lat lon",
        "output": "",
        "rule": [
            "d441"
        ]
    },
    {
        "instruction": "",
        "id": "q442",
        "input": "determine if passed variable a function python",
        "output": "",
        "rule": [
            "d442"
        ]
    },
    {
        "instruction": "",
        "id": "q443",
        "input": "python get distance between two points in same cluster",
        "output": "",
        "rule": [
            "d443"
        ]
    },
    {
        "instruction": "",
        "id": "q444",
        "input": "determine whether two strings are the same python",
        "output": "",
        "rule": [
            "d444"
        ]
    },
    {
        "instruction": "",
        "id": "q445",
        "input": "python get element by name",
        "output": "",
        "rule": [
            "d445"
        ]
    },
    {
        "instruction": "",
        "id": "q446",
        "input": "dictionary schema validation python",
        "output": "",
        "rule": [
            "d446"
        ]
    },
    {
        "instruction": "",
        "id": "q447",
        "input": "python get file parent path name",
        "output": "",
        "rule": [
            "d447"
        ]
    },
    {
        "instruction": "",
        "id": "q448",
        "input": "discord bot python mention user",
        "output": "",
        "rule": [
            "d448"
        ]
    },
    {
        "instruction": "",
        "id": "q449",
        "input": "python get file size in gb",
        "output": "",
        "rule": [
            "d449"
        ]
    },
    {
        "instruction": "",
        "id": "q450",
        "input": "display table in html now reflaticing data only blanck box using python flask'",
        "output": "",
        "rule": [
            "d450"
        ]
    },
    {
        "instruction": "",
        "id": "q451",
        "input": "python get first date month",
        "output": "",
        "rule": [
            "d451"
        ]
    },
    {
        "instruction": "",
        "id": "q452",
        "input": "display the count of index in adjacent position python",
        "output": "",
        "rule": [
            "d452"
        ]
    },
    {
        "instruction": "",
        "id": "q453",
        "input": "python get git lastest commit",
        "output": "",
        "rule": [
            "d453"
        ]
    },
    {
        "instruction": "",
        "id": "q454",
        "input": "displaying tabular data stream python",
        "output": "",
        "rule": [
            "d454"
        ]
    },
    {
        "instruction": "",
        "id": "q455",
        "input": "python get length of array]",
        "output": "",
        "rule": [
            "d455"
        ]
    },
    {
        "instruction": "",
        "id": "q456",
        "input": "divide the string into n parts in python",
        "output": "",
        "rule": [
            "d456"
        ]
    },
    {
        "instruction": "",
        "id": "q457",
        "input": "python get length of queue",
        "output": "",
        "rule": [
            "d457"
        ]
    },
    {
        "instruction": "",
        "id": "q458",
        "input": "django python check if static file exists",
        "output": "",
        "rule": [
            "d458"
        ]
    },
    {
        "instruction": "",
        "id": "q459",
        "input": "python get list of enum names",
        "output": "",
        "rule": [
            "d459"
        ]
    },
    {
        "instruction": "",
        "id": "q460",
        "input": "django static files in templates working but not in python code",
        "output": "",
        "rule": [
            "d460"
        ]
    },
    {
        "instruction": "",
        "id": "q461",
        "input": "python get list of enum values",
        "output": "",
        "rule": [
            "d461"
        ]
    },
    {
        "instruction": "",
        "id": "q462",
        "input": "do i press enter or tab to start new line in python",
        "output": "",
        "rule": [
            "d462"
        ]
    },
    {
        "instruction": "",
        "id": "q463",
        "input": "python get list of fonts",
        "output": "",
        "rule": [
            "d463"
        ]
    },
    {
        "instruction": "",
        "id": "q464",
        "input": "does a tree node have parent node associated with it using python",
        "output": "",
        "rule": [
            "d464"
        ]
    },
    {
        "instruction": "",
        "id": "q465",
        "input": "python get list of values sorted by dict key",
        "output": "",
        "rule": [
            "d465"
        ]
    },
    {
        "instruction": "",
        "id": "q466",
        "input": "does python automatically deallocate memory",
        "output": "",
        "rule": [
            "d466"
        ]
    },
    {
        "instruction": "",
        "id": "q467",
        "input": "python get local ipa address",
        "output": "",
        "rule": [
            "d467"
        ]
    },
    {
        "instruction": "",
        "id": "q468",
        "input": "does python do camelcase",
        "output": "",
        "rule": [
            "d468"
        ]
    },
    {
        "instruction": "",
        "id": "q469",
        "input": "python get methods and properties of an object",
        "output": "",
        "rule": [
            "d469"
        ]
    },
    {
        "instruction": "",
        "id": "q470",
        "input": "does python have a built in timer",
        "output": "",
        "rule": [
            "d470"
        ]
    },
    {
        "instruction": "",
        "id": "q471",
        "input": "python get month last date",
        "output": "",
        "rule": [
            "d471"
        ]
    },
    {
        "instruction": "",
        "id": "q472",
        "input": "does python have an inverse tangent function",
        "output": "",
        "rule": [
            "d472"
        ]
    },
    {
        "instruction": "",
        "id": "q473",
        "input": "python get object columns for dataset",
        "output": "",
        "rule": [
            "d473"
        ]
    },
    {
        "instruction": "",
        "id": "q474",
        "input": "double the pixels without changing the aspect ration python",
        "output": "",
        "rule": [
            "d474"
        ]
    },
    {
        "instruction": "",
        "id": "q475",
        "input": "python get object property by name",
        "output": "",
        "rule": [
            "d475"
        ]
    },
    {
        "instruction": "",
        "id": "q476",
        "input": "double underscore function python",
        "output": "",
        "rule": [
            "d476"
        ]
    },
    {
        "instruction": "",
        "id": "q477",
        "input": "python get only unique values from list",
        "output": "",
        "rule": [
            "d477"
        ]
    },
    {
        "instruction": "",
        "id": "q478",
        "input": "duration format in python django",
        "output": "",
        "rule": [
            "d478"
        ]
    },
    {
        "instruction": "",
        "id": "q479",
        "input": "python get path of a function",
        "output": "",
        "rule": [
            "d479"
        ]
    },
    {
        "instruction": "",
        "id": "q480",
        "input": "efficient way to calculate a checksum of an array in python",
        "output": "",
        "rule": [
            "d480"
        ]
    },
    {
        "instruction": "",
        "id": "q481",
        "input": "python get pinyin from characters python",
        "output": "",
        "rule": [
            "d481"
        ]
    },
    {
        "instruction": "",
        "id": "q482",
        "input": "eigen values calculation in python",
        "output": "",
        "rule": [
            "d482"
        ]
    },
    {
        "instruction": "",
        "id": "q483",
        "input": "python get property value by name",
        "output": "",
        "rule": [
            "d483"
        ]
    },
    {
        "instruction": "",
        "id": "q484",
        "input": "eigen values of gradients of images, python",
        "output": "",
        "rule": [
            "d484"
        ]
    },
    {
        "instruction": "",
        "id": "q485",
        "input": "python get size of an open file",
        "output": "",
        "rule": [
            "d485"
        ]
    },
    {
        "instruction": "",
        "id": "q486",
        "input": "eigenvalues of a matrix in python code",
        "output": "",
        "rule": [
            "d486"
        ]
    },
    {
        "instruction": "",
        "id": "q487",
        "input": "python get size of cytpes array in memory",
        "output": "",
        "rule": [
            "d487"
        ]
    },
    {
        "instruction": "",
        "id": "q488",
        "input": "elasticsearch delete by query python",
        "output": "",
        "rule": [
            "d488"
        ]
    },
    {
        "instruction": "",
        "id": "q489",
        "input": "python get specific indexes list",
        "output": "",
        "rule": [
            "d489"
        ]
    },
    {
        "instruction": "",
        "id": "q490",
        "input": "elementtree get parent python",
        "output": "",
        "rule": [
            "d490"
        ]
    },
    {
        "instruction": "",
        "id": "q491",
        "input": "python get str rep of object",
        "output": "",
        "rule": [
            "d491"
        ]
    },
    {
        "instruction": "",
        "id": "q492",
        "input": "eliminate duplicate entries python list",
        "output": "",
        "rule": [
            "d492"
        ]
    },
    {
        "instruction": "",
        "id": "q493",
        "input": "python get tensorflow ver",
        "output": "",
        "rule": [
            "d493"
        ]
    },
    {
        "instruction": "",
        "id": "q494",
        "input": "email strto list python",
        "output": "",
        "rule": [
            "d494"
        ]
    },
    {
        "instruction": "",
        "id": "q495",
        "input": "python get the char width number of shell window",
        "output": "",
        "rule": [
            "d495"
        ]
    },
    {
        "instruction": "",
        "id": "q496",
        "input": "encode boolean to binary python",
        "output": "",
        "rule": [
            "d496"
        ]
    },
    {
        "instruction": "",
        "id": "q497",
        "input": "python get the index of a list item",
        "output": "",
        "rule": [
            "d497"
        ]
    },
    {
        "instruction": "",
        "id": "q498",
        "input": "enum en python definicion",
        "output": "",
        "rule": [
            "d498"
        ]
    },
    {
        "instruction": "",
        "id": "q499",
        "input": "python get the index of top va;ie",
        "output": "",
        "rule": [
            "d499"
        ]
    },
    {
        "instruction": "",
        "id": "q500",
        "input": "epoch for datetime python",
        "output": "",
        "rule": [
            "d500"
        ]
    },
    {
        "instruction": "",
        "id": "q501",
        "input": "python get top three row index",
        "output": "",
        "rule": [
            "d501"
        ]
    },
    {
        "instruction": "",
        "id": "q502",
        "input": "epsilon in plot in python",
        "output": "",
        "rule": [
            "d502"
        ]
    },
    {
        "instruction": "",
        "id": "q503",
        "input": "python get type of property by name",
        "output": "",
        "rule": [
            "d503"
        ]
    },
    {
        "instruction": "",
        "id": "q504",
        "input": "equal aspect plot in python with large different axes ranges",
        "output": "",
        "rule": [
            "d504"
        ]
    },
    {
        "instruction": "",
        "id": "q505",
        "input": "es bulk update python",
        "output": "",
        "rule": [
            "d505"
        ]
    },
    {
        "instruction": "",
        "id": "q506",
        "input": "python get uid on windows",
        "output": "",
        "rule": [
            "d506"
        ]
    },
    {
        "instruction": "",
        "id": "q507",
        "input": "escaping characters for non printable characters in python mysql query",
        "output": "",
        "rule": [
            "d507"
        ]
    },
    {
        "instruction": "",
        "id": "q508",
        "input": "python get url element by id",
        "output": "",
        "rule": [
            "d508"
        ]
    },
    {
        "instruction": "",
        "id": "q509",
        "input": "euclidean distance between two vectors python",
        "output": "",
        "rule": [
            "d509"
        ]
    },
    {
        "instruction": "",
        "id": "q510",
        "input": "python get url in browser",
        "output": "",
        "rule": [
            "d510"
        ]
    },
    {
        "instruction": "",
        "id": "q511",
        "input": "euclidean distance of two lists python",
        "output": "",
        "rule": [
            "d511"
        ]
    },
    {
        "instruction": "",
        "id": "q512",
        "input": "python get used memory info",
        "output": "",
        "rule": [
            "d512"
        ]
    },
    {
        "instruction": "",
        "id": "q513",
        "input": "evaluate expression python xpath",
        "output": "",
        "rule": [
            "d513"
        ]
    },
    {
        "instruction": "",
        "id": "q514",
        "input": "python get value from enum",
        "output": "",
        "rule": [
            "d514"
        ]
    },
    {
        "instruction": "",
        "id": "q515",
        "input": "evaluate if a set of points are inside of a polygon python",
        "output": "",
        "rule": [
            "d515"
        ]
    },
    {
        "instruction": "",
        "id": "q516",
        "input": "python get volume size",
        "output": "",
        "rule": [
            "d516"
        ]
    },
    {
        "instruction": "",
        "id": "q517",
        "input": "evaluate if two ndarrays are equal python",
        "output": "",
        "rule": [
            "d517"
        ]
    },
    {
        "instruction": "",
        "id": "q518",
        "input": "python get window title of selected window",
        "output": "",
        "rule": [
            "d518"
        ]
    },
    {
        "instruction": "",
        "id": "q519",
        "input": "evaluting boolean values in python function",
        "output": "",
        "rule": [
            "d519"
        ]
    },
    {
        "instruction": "",
        "id": "q520",
        "input": "python get xml text",
        "output": "",
        "rule": [
            "d520"
        ]
    },
    {
        "instruction": "",
        "id": "q521",
        "input": "execute code line by line in python",
        "output": "",
        "rule": [
            "d521"
        ]
    },
    {
        "instruction": "",
        "id": "q522",
        "input": "python gevent pool paralle",
        "output": "",
        "rule": [
            "d522"
        ]
    },
    {
        "instruction": "",
        "id": "q523",
        "input": "execute order based on value python",
        "output": "",
        "rule": [
            "d523"
        ]
    },
    {
        "instruction": "",
        "id": "q524",
        "input": "python given an array of boolean to decide values of another array",
        "output": "",
        "rule": [
            "d524"
        ]
    },
    {
        "instruction": "",
        "id": "q525",
        "input": "execute(query, arg) cursor python",
        "output": "",
        "rule": [
            "d525"
        ]
    },
    {
        "instruction": "",
        "id": "q526",
        "input": "python go to parent folder",
        "output": "",
        "rule": [
            "d526"
        ]
    },
    {
        "instruction": "",
        "id": "q527",
        "input": "expected string got float instead python",
        "output": "",
        "rule": [
            "d527"
        ]
    },
    {
        "instruction": "",
        "id": "q528",
        "input": "python go to the bottom of a listbox",
        "output": "",
        "rule": [
            "d528"
        ]
    },
    {
        "instruction": "",
        "id": "q529",
        "input": "exponential decay python fit",
        "output": "",
        "rule": [
            "d529"
        ]
    },
    {
        "instruction": "",
        "id": "q530",
        "input": "python gps coordinates to x, y, z",
        "output": "",
        "rule": [
            "d530"
        ]
    },
    {
        "instruction": "",
        "id": "q531",
        "input": "export ipynb as python file",
        "output": "",
        "rule": [
            "d531"
        ]
    },
    {
        "instruction": "",
        "id": "q532",
        "input": "python grab last n elments",
        "output": "",
        "rule": [
            "d532"
        ]
    },
    {
        "instruction": "",
        "id": "q533",
        "input": "expose data in json format in python using data frame",
        "output": "",
        "rule": [
            "d533"
        ]
    },
    {
        "instruction": "",
        "id": "q534",
        "input": "python graphviz format png",
        "output": "",
        "rule": [
            "d534"
        ]
    },
    {
        "instruction": "",
        "id": "q535",
        "input": "extract color components of an image in python",
        "output": "",
        "rule": [
            "d535"
        ]
    },
    {
        "instruction": "",
        "id": "q536",
        "input": "python group minute data into half hour",
        "output": "",
        "rule": [
            "d536"
        ]
    },
    {
        "instruction": "",
        "id": "q537",
        "input": "extract first array in python",
        "output": "",
        "rule": [
            "d537"
        ]
    },
    {
        "instruction": "",
        "id": "q538",
        "input": "python gtk starting separate thread but doesn't run",
        "output": "",
        "rule": [
            "d538"
        ]
    },
    {
        "instruction": "",
        "id": "q539",
        "input": "extract pdf fields in python",
        "output": "",
        "rule": [
            "d539"
        ]
    },
    {
        "instruction": "",
        "id": "q540",
        "input": "python gtk3 not work on window",
        "output": "",
        "rule": [
            "d540"
        ]
    },
    {
        "instruction": "",
        "id": "q541",
        "input": "fast matrix dot products in python",
        "output": "",
        "rule": [
            "d541"
        ]
    },
    {
        "instruction": "",
        "id": "q542",
        "input": "python guess text encoding",
        "output": "",
        "rule": [
            "d542"
        ]
    },
    {
        "instruction": "",
        "id": "q543",
        "input": "fast way of setting certain elements in array to zero python",
        "output": "",
        "rule": [
            "d543"
        ]
    },
    {
        "instruction": "",
        "id": "q544",
        "input": "python gzip compress a file",
        "output": "",
        "rule": [
            "d544"
        ]
    },
    {
        "instruction": "",
        "id": "q545",
        "input": "faster update bulk in python mysql",
        "output": "",
        "rule": [
            "d545"
        ]
    },
    {
        "instruction": "",
        "id": "q546",
        "input": "python h5 file how to decrease size",
        "output": "",
        "rule": [
            "d546"
        ]
    },
    {
        "instruction": "",
        "id": "q547",
        "input": "fft 2d spectrum python",
        "output": "",
        "rule": [
            "d547"
        ]
    },
    {
        "instruction": "",
        "id": "q548",
        "input": "python h5file force read into memory",
        "output": "",
        "rule": [
            "d548"
        ]
    },
    {
        "instruction": "",
        "id": "q549",
        "input": "fibonacci with function for in python",
        "output": "",
        "rule": [
            "d549"
        ]
    },
    {
        "instruction": "",
        "id": "q550",
        "input": "python h5py read data",
        "output": "",
        "rule": [
            "d550"
        ]
    },
    {
        "instruction": "",
        "id": "q551",
        "input": "file is not a zip file python",
        "output": "",
        "rule": [
            "d551"
        ]
    },
    {
        "instruction": "",
        "id": "q552",
        "input": "python handling windows paths in strings",
        "output": "",
        "rule": [
            "d552"
        ]
    },
    {
        "instruction": "",
        "id": "q553",
        "input": "fileinput python specify encoding",
        "output": "",
        "rule": [
            "d553"
        ]
    },
    {
        "instruction": "",
        "id": "q554",
        "input": "python hash bang line",
        "output": "",
        "rule": [
            "d554"
        ]
    },
    {
        "instruction": "",
        "id": "q555",
        "input": "fille a vector in a parallelize way python",
        "output": "",
        "rule": [
            "d555"
        ]
    },
    {
        "instruction": "",
        "id": "q556",
        "input": "python hashlib return string",
        "output": "",
        "rule": [
            "d556"
        ]
    },
    {
        "instruction": "",
        "id": "q557",
        "input": "filter empty rows python",
        "output": "",
        "rule": [
            "d557"
        ]
    },
    {
        "instruction": "",
        "id": "q558",
        "input": "python heap limit length",
        "output": "",
        "rule": [
            "d558"
        ]
    },
    {
        "instruction": "",
        "id": "q559",
        "input": "filter list using regex email example python",
        "output": "",
        "rule": [
            "d559"
        ]
    },
    {
        "instruction": "",
        "id": "q560",
        "input": "python heap sort stackoverflow",
        "output": "",
        "rule": [
            "d560"
        ]
    },
    {
        "instruction": "",
        "id": "q561",
        "input": "filter stopwords from a dictionary python",
        "output": "",
        "rule": [
            "d561"
        ]
    },
    {
        "instruction": "",
        "id": "q562",
        "input": "python heapify time complexity",
        "output": "",
        "rule": [
            "d562"
        ]
    },
    {
        "instruction": "",
        "id": "q563",
        "input": "filter uniques from python list",
        "output": "",
        "rule": [
            "d563"
        ]
    },
    {
        "instruction": "",
        "id": "q564",
        "input": "python heapq get last element",
        "output": "",
        "rule": [
            "d564"
        ]
    },
    {
        "instruction": "",
        "id": "q565",
        "input": "find/replace in a file python",
        "output": "",
        "rule": [
            "d565"
        ]
    },
    {
        "instruction": "",
        "id": "q566",
        "input": "python histogram matplotlib kwargs",
        "output": "",
        "rule": [
            "d566"
        ]
    },
    {
        "instruction": "",
        "id": "q567",
        "input": "finding 25 percent points in distribution python",
        "output": "",
        "rule": [
            "d567"
        ]
    },
    {
        "instruction": "",
        "id": "q568",
        "input": "python how do i know what data type",
        "output": "",
        "rule": [
            "d568"
        ]
    },
    {
        "instruction": "",
        "id": "q569",
        "input": "finding a string in a python tuple",
        "output": "",
        "rule": [
            "d569"
        ]
    },
    {
        "instruction": "",
        "id": "q570",
        "input": "python how join to lists as pairs",
        "output": "",
        "rule": [
            "d570"
        ]
    },
    {
        "instruction": "",
        "id": "q571",
        "input": "finding area of an irregular polygon python",
        "output": "",
        "rule": [
            "d571"
        ]
    },
    {
        "instruction": "",
        "id": "q572",
        "input": "python how to autocomplate to show super method",
        "output": "",
        "rule": [
            "d572"
        ]
    },
    {
        "instruction": "",
        "id": "q573",
        "input": "finding center of histogram bins python",
        "output": "",
        "rule": [
            "d573"
        ]
    },
    {
        "instruction": "",
        "id": "q574",
        "input": "python how to calculate bins from bin edges",
        "output": "",
        "rule": [
            "d574"
        ]
    },
    {
        "instruction": "",
        "id": "q575",
        "input": "finding common values in dictionaries python",
        "output": "",
        "rule": [
            "d575"
        ]
    },
    {
        "instruction": "",
        "id": "q576",
        "input": "python how to cast string to timestamp",
        "output": "",
        "rule": [
            "d576"
        ]
    },
    {
        "instruction": "",
        "id": "q577",
        "input": "finding extensions of files through python",
        "output": "",
        "rule": [
            "d577"
        ]
    },
    {
        "instruction": "",
        "id": "q578",
        "input": "python how to change list items to capital",
        "output": "",
        "rule": [
            "d578"
        ]
    },
    {
        "instruction": "",
        "id": "q579",
        "input": "finding inverse of matrix in python",
        "output": "",
        "rule": [
            "d579"
        ]
    },
    {
        "instruction": "",
        "id": "q580",
        "input": "python how to change text to uppercase",
        "output": "",
        "rule": [
            "d580"
        ]
    },
    {
        "instruction": "",
        "id": "q581",
        "input": "finding median of list python",
        "output": "",
        "rule": [
            "d581"
        ]
    },
    {
        "instruction": "",
        "id": "q582",
        "input": "python how to check if a database query failed",
        "output": "",
        "rule": [
            "d582"
        ]
    },
    {
        "instruction": "",
        "id": "q583",
        "input": "finding multiple strings using regex in python",
        "output": "",
        "rule": [
            "d583"
        ]
    },
    {
        "instruction": "",
        "id": "q584",
        "input": "python how to check if a process exists by pid",
        "output": "",
        "rule": [
            "d584"
        ]
    },
    {
        "instruction": "",
        "id": "q585",
        "input": "finding prime and divisors python",
        "output": "",
        "rule": [
            "d585"
        ]
    },
    {
        "instruction": "",
        "id": "q586",
        "input": "python how to check if datattype is string",
        "output": "",
        "rule": [
            "d586"
        ]
    },
    {
        "instruction": "",
        "id": "q587",
        "input": "finding the two smallest values in a list python",
        "output": "",
        "rule": [
            "d587"
        ]
    },
    {
        "instruction": "",
        "id": "q588",
        "input": "finding what points are contained in polygon python",
        "output": "",
        "rule": [
            "d588"
        ]
    },
    {
        "instruction": "",
        "id": "q589",
        "input": "python how to check logging is disabled",
        "output": "",
        "rule": [
            "d589"
        ]
    },
    {
        "instruction": "",
        "id": "q590",
        "input": "fit r like formula model in python without intercept",
        "output": "",
        "rule": [
            "d590"
        ]
    },
    {
        "instruction": "",
        "id": "q591",
        "input": "python how to check methods implemented in a type",
        "output": "",
        "rule": [
            "d591"
        ]
    },
    {
        "instruction": "",
        "id": "q592",
        "input": "fit the variables into a equation python",
        "output": "",
        "rule": [
            "d592"
        ]
    },
    {
        "instruction": "",
        "id": "q593",
        "input": "python how to clear a variables value",
        "output": "",
        "rule": [
            "d593"
        ]
    },
    {
        "instruction": "",
        "id": "q594",
        "input": "flatten list of list python using yield",
        "output": "",
        "rule": [
            "d594"
        ]
    },
    {
        "instruction": "",
        "id": "q595",
        "input": "python how to close and if",
        "output": "",
        "rule": [
            "d595"
        ]
    },
    {
        "instruction": "",
        "id": "q596",
        "input": "flip a 1d vector python",
        "output": "",
        "rule": [
            "d596"
        ]
    },
    {
        "instruction": "",
        "id": "q597",
        "input": "python how to create a ordered dict",
        "output": "",
        "rule": [
            "d597"
        ]
    },
    {
        "instruction": "",
        "id": "q598",
        "input": "flip image vertical python",
        "output": "",
        "rule": [
            "d598"
        ]
    },
    {
        "instruction": "",
        "id": "q599",
        "input": "python how to create dir",
        "output": "",
        "rule": [
            "d599"
        ]
    },
    {
        "instruction": "",
        "id": "q600",
        "input": "frequency of a word in a document python",
        "output": "",
        "rule": [
            "d600"
        ]
    },
    {
        "instruction": "",
        "id": "q601",
        "input": "python how to disconnect signal from a widget",
        "output": "",
        "rule": [
            "d601"
        ]
    },
    {
        "instruction": "",
        "id": "q602",
        "input": "ftplib python secure connection",
        "output": "",
        "rule": [
            "d602"
        ]
    },
    {
        "instruction": "",
        "id": "q603",
        "input": "python how to dowload all dependencies",
        "output": "",
        "rule": [
            "d603"
        ]
    },
    {
        "instruction": "",
        "id": "q604",
        "input": "full screen in python tkinter",
        "output": "",
        "rule": [
            "d604"
        ]
    },
    {
        "instruction": "",
        "id": "q605",
        "input": "python how to download a json url",
        "output": "",
        "rule": [
            "d605"
        ]
    },
    {
        "instruction": "",
        "id": "q606",
        "input": "function to check strngth of password with regex in python",
        "output": "",
        "rule": [
            "d606"
        ]
    },
    {
        "instruction": "",
        "id": "q607",
        "input": "python how to drag a element to another element and stay at second element",
        "output": "",
        "rule": [
            "d607"
        ]
    },
    {
        "instruction": "",
        "id": "q608",
        "input": "gaussian distribution python formula",
        "output": "",
        "rule": [
            "d608"
        ]
    },
    {
        "instruction": "",
        "id": "q609",
        "input": "python how to encode url",
        "output": "",
        "rule": [
            "d609"
        ]
    },
    {
        "instruction": "",
        "id": "q610",
        "input": "gaussian distribution python function",
        "output": "",
        "rule": [
            "d610"
        ]
    },
    {
        "instruction": "",
        "id": "q611",
        "input": "python how to enter a new line",
        "output": "",
        "rule": [
            "d611"
        ]
    },
    {
        "instruction": "",
        "id": "q612",
        "input": "gdb execute python expression",
        "output": "",
        "rule": [
            "d612"
        ]
    },
    {
        "instruction": "",
        "id": "q613",
        "input": "python how to exit script for all threads",
        "output": "",
        "rule": [
            "d613"
        ]
    },
    {
        "instruction": "",
        "id": "q614",
        "input": "generalized normal distribution python",
        "output": "",
        "rule": [
            "d614"
        ]
    },
    {
        "instruction": "",
        "id": "q615",
        "input": "python how to get a small bounding box around lat lon coordinate",
        "output": "",
        "rule": [
            "d615"
        ]
    },
    {
        "instruction": "",
        "id": "q616",
        "input": "generarating random strings in python",
        "output": "",
        "rule": [
            "d616"
        ]
    },
    {
        "instruction": "",
        "id": "q617",
        "input": "python how to get base64 encoded string",
        "output": "",
        "rule": [
            "d617"
        ]
    },
    {
        "instruction": "",
        "id": "q618",
        "input": "generate maps between entities in python",
        "output": "",
        "rule": [
            "d618"
        ]
    },
    {
        "instruction": "",
        "id": "q619",
        "input": "python how to get dict intersection",
        "output": "",
        "rule": [
            "d619"
        ]
    },
    {
        "instruction": "",
        "id": "q620",
        "input": "generate random (x,y) pairs python",
        "output": "",
        "rule": [
            "d620"
        ]
    },
    {
        "instruction": "",
        "id": "q621",
        "input": "python how to get length of array",
        "output": "",
        "rule": [
            "d621"
        ]
    },
    {
        "instruction": "",
        "id": "q622",
        "input": "generate sine wave python",
        "output": "",
        "rule": [
            "d622"
        ]
    },
    {
        "instruction": "",
        "id": "q623",
        "input": "python how to get the index of a rank",
        "output": "",
        "rule": [
            "d623"
        ]
    },
    {
        "instruction": "",
        "id": "q624",
        "input": "generate string from array python",
        "output": "",
        "rule": [
            "d624"
        ]
    },
    {
        "instruction": "",
        "id": "q625",
        "input": "python how to get the index of minimum value in an array",
        "output": "",
        "rule": [
            "d625"
        ]
    },
    {
        "instruction": "",
        "id": "q626",
        "input": "generating random strings from a variable in python",
        "output": "",
        "rule": [
            "d626"
        ]
    },
    {
        "instruction": "",
        "id": "q627",
        "input": "python how to jump to next calculation",
        "output": "",
        "rule": [
            "d627"
        ]
    },
    {
        "instruction": "",
        "id": "q628",
        "input": "generating random unique strings in python",
        "output": "",
        "rule": [
            "d628"
        ]
    },
    {
        "instruction": "",
        "id": "q629",
        "input": "python how to keep file permissions after transferring files",
        "output": "",
        "rule": [
            "d629"
        ]
    },
    {
        "instruction": "",
        "id": "q630",
        "input": "get angle given three points python",
        "output": "",
        "rule": [
            "d630"
        ]
    },
    {
        "instruction": "",
        "id": "q631",
        "input": "python how to make a deepcopy of a dictionary",
        "output": "",
        "rule": [
            "d631"
        ]
    },
    {
        "instruction": "",
        "id": "q632",
        "input": "get array with longest length python",
        "output": "",
        "rule": [
            "d632"
        ]
    },
    {
        "instruction": "",
        "id": "q633",
        "input": "python how to make a file read only in python",
        "output": "",
        "rule": [
            "d633"
        ]
    },
    {
        "instruction": "",
        "id": "q634",
        "input": "get attributes of all ancestors python",
        "output": "",
        "rule": [
            "d634"
        ]
    },
    {
        "instruction": "",
        "id": "q635",
        "input": "python how to make a flaten list",
        "output": "",
        "rule": [
            "d635"
        ]
    },
    {
        "instruction": "",
        "id": "q636",
        "input": "get average of date array python",
        "output": "",
        "rule": [
            "d636"
        ]
    },
    {
        "instruction": "",
        "id": "q637",
        "input": "python how to make a function return a tuple",
        "output": "",
        "rule": [
            "d637"
        ]
    },
    {
        "instruction": "",
        "id": "q638",
        "input": "get bit depth of audio python",
        "output": "",
        "rule": [
            "d638"
        ]
    },
    {
        "instruction": "",
        "id": "q639",
        "input": "python how to make an enum",
        "output": "",
        "rule": [
            "d639"
        ]
    },
    {
        "instruction": "",
        "id": "q640",
        "input": "get column names in a data frame python",
        "output": "",
        "rule": [
            "d640"
        ]
    },
    {
        "instruction": "",
        "id": "q641",
        "input": "python how to make an iterable variable",
        "output": "",
        "rule": [
            "d641"
        ]
    },
    {
        "instruction": "",
        "id": "q642",
        "input": "get date from string in python",
        "output": "",
        "rule": [
            "d642"
        ]
    },
    {
        "instruction": "",
        "id": "q643",
        "input": "python how to merge cells",
        "output": "",
        "rule": [
            "d643"
        ]
    },
    {
        "instruction": "",
        "id": "q644",
        "input": "get days in between two dates in python",
        "output": "",
        "rule": [
            "d644"
        ]
    },
    {
        "instruction": "",
        "id": "q645",
        "input": "get distinct items in list python",
        "output": "",
        "rule": [
            "d645"
        ]
    },
    {
        "instruction": "",
        "id": "q646",
        "input": "python how to order a date list",
        "output": "",
        "rule": [
            "d646"
        ]
    },
    {
        "instruction": "",
        "id": "q647",
        "input": "get distinct values from a column in python",
        "output": "",
        "rule": [
            "d647"
        ]
    },
    {
        "instruction": "",
        "id": "q648",
        "input": "python how to pass reference to method",
        "output": "",
        "rule": [
            "d648"
        ]
    },
    {
        "instruction": "",
        "id": "q649",
        "input": "get elevation from lat long python",
        "output": "",
        "rule": [
            "d649"
        ]
    },
    {
        "instruction": "",
        "id": "q650",
        "input": "python how to read content of bufferedreader",
        "output": "",
        "rule": [
            "d650"
        ]
    },
    {
        "instruction": "",
        "id": "q651",
        "input": "get factors of a number python",
        "output": "",
        "rule": [
            "d651"
        ]
    },
    {
        "instruction": "",
        "id": "q652",
        "input": "python how to remove elements from an iterated list",
        "output": "",
        "rule": [
            "d652"
        ]
    },
    {
        "instruction": "",
        "id": "q653",
        "input": "get file md5 python",
        "output": "",
        "rule": [
            "d653"
        ]
    },
    {
        "instruction": "",
        "id": "q654",
        "input": "python how to remove spaces and add hashtag",
        "output": "",
        "rule": [
            "d654"
        ]
    },
    {
        "instruction": "",
        "id": "q655",
        "input": "get greatest index from bag of words python",
        "output": "",
        "rule": [
            "d655"
        ]
    },
    {
        "instruction": "",
        "id": "q656",
        "input": "python how to reset index and drop old index",
        "output": "",
        "rule": [
            "d656"
        ]
    },
    {
        "instruction": "",
        "id": "q657",
        "input": "get last line of file python without reading it",
        "output": "",
        "rule": [
            "d657"
        ]
    },
    {
        "instruction": "",
        "id": "q658",
        "input": "python how to run doctest in cmd",
        "output": "",
        "rule": [
            "d658"
        ]
    },
    {
        "instruction": "",
        "id": "q659",
        "input": "get last list element pythong",
        "output": "",
        "rule": [
            "d659"
        ]
    },
    {
        "instruction": "",
        "id": "q660",
        "input": "python how to save object to pickle",
        "output": "",
        "rule": [
            "d660"
        ]
    },
    {
        "instruction": "",
        "id": "q661",
        "input": "get length text python",
        "output": "",
        "rule": [
            "d661"
        ]
    },
    {
        "instruction": "",
        "id": "q662",
        "input": "python how to say if not string",
        "output": "",
        "rule": [
            "d662"
        ]
    },
    {
        "instruction": "",
        "id": "q663",
        "input": "get local path in python2",
        "output": "",
        "rule": [
            "d663"
        ]
    },
    {
        "instruction": "",
        "id": "q664",
        "input": "python how to see local variables in spyder",
        "output": "",
        "rule": [
            "d664"
        ]
    },
    {
        "instruction": "",
        "id": "q665",
        "input": "get method name python",
        "output": "",
        "rule": [
            "d665"
        ]
    },
    {
        "instruction": "",
        "id": "q666",
        "input": "python how to set numpy random seed",
        "output": "",
        "rule": [
            "d666"
        ]
    },
    {
        "instruction": "",
        "id": "q667",
        "input": "get methods from python suds",
        "output": "",
        "rule": [
            "d667"
        ]
    },
    {
        "instruction": "",
        "id": "q668",
        "input": "python how to start a thread in bottle",
        "output": "",
        "rule": [
            "d668"
        ]
    },
    {
        "instruction": "",
        "id": "q669",
        "input": "get network details from device logs appium python",
        "output": "",
        "rule": [
            "d669"
        ]
    },
    {
        "instruction": "",
        "id": "q670",
        "input": "python how to use a string to access list index",
        "output": "",
        "rule": [
            "d670"
        ]
    },
    {
        "instruction": "",
        "id": "q671",
        "input": "get number of rows in data frame in python",
        "output": "",
        "rule": [
            "d671"
        ]
    },
    {
        "instruction": "",
        "id": "q672",
        "input": "python how to write async api",
        "output": "",
        "rule": [
            "d672"
        ]
    },
    {
        "instruction": "",
        "id": "q673",
        "input": "get only first occurance of a value based on the condition using python",
        "output": "",
        "rule": [
            "d673"
        ]
    },
    {
        "instruction": "",
        "id": "q674",
        "input": "python http server in the background",
        "output": "",
        "rule": [
            "d674"
        ]
    },
    {
        "instruction": "",
        "id": "q675",
        "input": "get only letters from string python",
        "output": "",
        "rule": [
            "d675"
        ]
    },
    {
        "instruction": "",
        "id": "q676",
        "input": "python httpd run server for an amount of time",
        "output": "",
        "rule": [
            "d676"
        ]
    },
    {
        "instruction": "",
        "id": "q677",
        "input": "get query string from request python",
        "output": "",
        "rule": [
            "d677"
        ]
    },
    {
        "instruction": "",
        "id": "q678",
        "input": "python httpserver both non ssl and ssl",
        "output": "",
        "rule": [
            "d678"
        ]
    },
    {
        "instruction": "",
        "id": "q679",
        "input": "get rid of spaces in str python",
        "output": "",
        "rule": [
            "d679"
        ]
    },
    {
        "instruction": "",
        "id": "q680",
        "input": "python human readable timedelta",
        "output": "",
        "rule": [
            "d680"
        ]
    },
    {
        "instruction": "",
        "id": "q681",
        "input": "get sort index python numpy",
        "output": "",
        "rule": [
            "d681"
        ]
    },
    {
        "instruction": "",
        "id": "q682",
        "input": "python if a function default return is",
        "output": "",
        "rule": [
            "d682"
        ]
    },
    {
        "instruction": "",
        "id": "q683",
        "input": "get start and end date of quarter in python",
        "output": "",
        "rule": [
            "d683"
        ]
    },
    {
        "instruction": "",
        "id": "q684",
        "input": "python if bool assume true",
        "output": "",
        "rule": [
            "d684"
        ]
    },
    {
        "instruction": "",
        "id": "q685",
        "input": "get start day for a month python",
        "output": "",
        "rule": [
            "d685"
        ]
    },
    {
        "instruction": "",
        "id": "q686",
        "input": "python if empty value in list",
        "output": "",
        "rule": [
            "d686"
        ]
    },
    {
        "instruction": "",
        "id": "q687",
        "input": "get stdout from python call",
        "output": "",
        "rule": [
            "d687"
        ]
    },
    {
        "instruction": "",
        "id": "q688",
        "input": "python if field is empty",
        "output": "",
        "rule": [
            "d688"
        ]
    },
    {
        "instruction": "",
        "id": "q689",
        "input": "get string width with font python",
        "output": "",
        "rule": [
            "d689"
        ]
    },
    {
        "instruction": "",
        "id": "q690",
        "input": "python if object is a string do something",
        "output": "",
        "rule": [
            "d690"
        ]
    },
    {
        "instruction": "",
        "id": "q691",
        "input": "get te left most value of a column in python",
        "output": "",
        "rule": [
            "d691"
        ]
    },
    {
        "instruction": "",
        "id": "q692",
        "input": "python image crop box",
        "output": "",
        "rule": [
            "d692"
        ]
    },
    {
        "instruction": "",
        "id": "q693",
        "input": "get the data type in python code",
        "output": "",
        "rule": [
            "d693"
        ]
    },
    {
        "instruction": "",
        "id": "q694",
        "input": "python image normalize to 0 255",
        "output": "",
        "rule": [
            "d694"
        ]
    },
    {
        "instruction": "",
        "id": "q695",
        "input": "get the index of the last item iterated in list python",
        "output": "",
        "rule": [
            "d695"
        ]
    },
    {
        "instruction": "",
        "id": "q696",
        "input": "python image processing fft ifft",
        "output": "",
        "rule": [
            "d696"
        ]
    },
    {
        "instruction": "",
        "id": "q697",
        "input": "get the last column of a group by in python",
        "output": "",
        "rule": [
            "d697"
        ]
    },
    {
        "instruction": "",
        "id": "q698",
        "input": "python image to buffer",
        "output": "",
        "rule": [
            "d698"
        ]
    },
    {
        "instruction": "",
        "id": "q699",
        "input": "get unique set in list python",
        "output": "",
        "rule": [
            "d699"
        ]
    },
    {
        "instruction": "",
        "id": "q700",
        "input": "python image to uint8",
        "output": "",
        "rule": [
            "d700"
        ]
    },
    {
        "instruction": "",
        "id": "q701",
        "input": "get user based on uid python",
        "output": "",
        "rule": [
            "d701"
        ]
    },
    {
        "instruction": "",
        "id": "q702",
        "input": "python impossible to call blocking function in the event loop callback",
        "output": "",
        "rule": [
            "d702"
        ]
    },
    {
        "instruction": "",
        "id": "q703",
        "input": "get value from series except null values python",
        "output": "",
        "rule": [
            "d703"
        ]
    },
    {
        "instruction": "",
        "id": "q704",
        "input": "python increase the upper limit of gpu memory",
        "output": "",
        "rule": [
            "d704"
        ]
    },
    {
        "instruction": "",
        "id": "q705",
        "input": "get values of a domain in python",
        "output": "",
        "rule": [
            "d705"
        ]
    },
    {
        "instruction": "",
        "id": "q706",
        "input": "python indent all but first line",
        "output": "",
        "rule": [
            "d706"
        ]
    },
    {
        "instruction": "",
        "id": "q707",
        "input": "get weights from keras model python",
        "output": "",
        "rule": [
            "d707"
        ]
    },
    {
        "instruction": "",
        "id": "q708",
        "input": "python index of maximum value of an array",
        "output": "",
        "rule": [
            "d708"
        ]
    },
    {
        "instruction": "",
        "id": "q709",
        "input": "get windows uuid with python",
        "output": "",
        "rule": [
            "d709"
        ]
    },
    {
        "instruction": "",
        "id": "q710",
        "input": "python init mixins different args",
        "output": "",
        "rule": [
            "d710"
        ]
    },
    {
        "instruction": "",
        "id": "q711",
        "input": "getattr return property object python",
        "output": "",
        "rule": [
            "d711"
        ]
    },
    {
        "instruction": "",
        "id": "q712",
        "input": "python insert a line to the front of the file",
        "output": "",
        "rule": [
            "d712"
        ]
    },
    {
        "instruction": "",
        "id": "q713",
        "input": "gettingvariables names inside a dataset in python",
        "output": "",
        "rule": [
            "d713"
        ]
    },
    {
        "instruction": "",
        "id": "q714",
        "input": "python inspect name of function",
        "output": "",
        "rule": [
            "d714"
        ]
    },
    {
        "instruction": "",
        "id": "q715",
        "input": "git of python is not working",
        "output": "",
        "rule": [
            "d715"
        ]
    },
    {
        "instruction": "",
        "id": "q716",
        "input": "python instance into list",
        "output": "",
        "rule": [
            "d716"
        ]
    },
    {
        "instruction": "",
        "id": "q717",
        "input": "give a variable a random integer value in python",
        "output": "",
        "rule": [
            "d717"
        ]
    },
    {
        "instruction": "",
        "id": "q718",
        "input": "python instance method decorate",
        "output": "",
        "rule": [
            "d718"
        ]
    },
    {
        "instruction": "",
        "id": "q719",
        "input": "give index of specific line in python",
        "output": "",
        "rule": [
            "d719"
        ]
    },
    {
        "instruction": "",
        "id": "q720",
        "input": "python int and float coerce",
        "output": "",
        "rule": [
            "d720"
        ]
    },
    {
        "instruction": "",
        "id": "q721",
        "input": "giving python a directory path and create its path",
        "output": "",
        "rule": [
            "d721"
        ]
    },
    {
        "instruction": "",
        "id": "q722",
        "input": "python int value boolean true false",
        "output": "",
        "rule": [
            "d722"
        ]
    },
    {
        "instruction": "",
        "id": "q723",
        "input": "hdf5 python h5py read data by",
        "output": "",
        "rule": [
            "d723"
        ]
    },
    {
        "instruction": "",
        "id": "q724",
        "input": "python int yyyymmdd to datetime",
        "output": "",
        "rule": [
            "d724"
        ]
    },
    {
        "instruction": "",
        "id": "q725",
        "input": "histogram probability density function python normed",
        "output": "",
        "rule": [
            "d725"
        ]
    },
    {
        "instruction": "",
        "id": "q726",
        "input": "python interactive behavior different",
        "output": "",
        "rule": [
            "d726"
        ]
    },
    {
        "instruction": "",
        "id": "q727",
        "input": "how add noise in python",
        "output": "",
        "rule": [
            "d727"
        ]
    },
    {
        "instruction": "",
        "id": "q728",
        "input": "python interpolate time data at specific datetimes",
        "output": "",
        "rule": [
            "d728"
        ]
    },
    {
        "instruction": "",
        "id": "q729",
        "input": "how can i access dataimages from a dataset in hdf5 file in python",
        "output": "",
        "rule": [
            "d729"
        ]
    },
    {
        "instruction": "",
        "id": "q730",
        "input": "python inverse dictionary with key and value",
        "output": "",
        "rule": [
            "d730"
        ]
    },
    {
        "instruction": "",
        "id": "q731",
        "input": "how can i mke a list in python that is n long with equal icrements",
        "output": "",
        "rule": [
            "d731"
        ]
    },
    {
        "instruction": "",
        "id": "q732",
        "input": "python ipaddress how to test for errors",
        "output": "",
        "rule": [
            "d732"
        ]
    },
    {
        "instruction": "",
        "id": "q733",
        "input": "how can i sleep within a while loop but not slow it down python",
        "output": "",
        "rule": [
            "d733"
        ]
    },
    {
        "instruction": "",
        "id": "q734",
        "input": "python is empty set",
        "output": "",
        "rule": [
            "d734"
        ]
    },
    {
        "instruction": "",
        "id": "q735",
        "input": "how check unique values in python",
        "output": "",
        "rule": [
            "d735"
        ]
    },
    {
        "instruction": "",
        "id": "q736",
        "input": "python is none nonetype",
        "output": "",
        "rule": [
            "d736"
        ]
    },
    {
        "instruction": "",
        "id": "q737",
        "input": "how do i check if a string is in a list in python",
        "output": "",
        "rule": [
            "d737"
        ]
    },
    {
        "instruction": "",
        "id": "q738",
        "input": "python is null boolean filter",
        "output": "",
        "rule": [
            "d738"
        ]
    },
    {
        "instruction": "",
        "id": "q739",
        "input": "how do i create a dictionary in python",
        "output": "",
        "rule": [
            "d739"
        ]
    },
    {
        "instruction": "",
        "id": "q740",
        "input": "python is there a list of prime factors",
        "output": "",
        "rule": [
            "d740"
        ]
    },
    {
        "instruction": "",
        "id": "q741",
        "input": "how do i draw a horizontal line in python",
        "output": "",
        "rule": [
            "d741"
        ]
    },
    {
        "instruction": "",
        "id": "q742",
        "input": "python is writeable directory test",
        "output": "",
        "rule": [
            "d742"
        ]
    },
    {
        "instruction": "",
        "id": "q743",
        "input": "how do i get sympy into python",
        "output": "",
        "rule": [
            "d743"
        ]
    },
    {
        "instruction": "",
        "id": "q744",
        "input": "python isdir invalid syntax",
        "output": "",
        "rule": [
            "d744"
        ]
    },
    {
        "instruction": "",
        "id": "q745",
        "input": "how do i make a list a certain size in python",
        "output": "",
        "rule": [
            "d745"
        ]
    },
    {
        "instruction": "",
        "id": "q746",
        "input": "python isfinite false is not in list",
        "output": "",
        "rule": [
            "d746"
        ]
    },
    {
        "instruction": "",
        "id": "q747",
        "input": "how do i replace a string with another string in python",
        "output": "",
        "rule": [
            "d747"
        ]
    },
    {
        "instruction": "",
        "id": "q748",
        "input": "python isinstance tuple or list",
        "output": "",
        "rule": [
            "d748"
        ]
    },
    {
        "instruction": "",
        "id": "q749",
        "input": "how do i round to two decimal places in python",
        "output": "",
        "rule": [
            "d749"
        ]
    },
    {
        "instruction": "",
        "id": "q750",
        "input": "python iter has no next",
        "output": "",
        "rule": [
            "d750"
        ]
    },
    {
        "instruction": "",
        "id": "q751",
        "input": "how do you center text python",
        "output": "",
        "rule": [
            "d751"
        ]
    },
    {
        "instruction": "",
        "id": "q752",
        "input": "python iter with read",
        "output": "",
        "rule": [
            "d752"
        ]
    },
    {
        "instruction": "",
        "id": "q753",
        "input": "how do you change list into tuple python",
        "output": "",
        "rule": [
            "d753"
        ]
    },
    {
        "instruction": "",
        "id": "q754",
        "input": "python iterate in reverse order",
        "output": "",
        "rule": [
            "d754"
        ]
    },
    {
        "instruction": "",
        "id": "q755",
        "input": "how do you code in lemmatizer python",
        "output": "",
        "rule": [
            "d755"
        ]
    },
    {
        "instruction": "",
        "id": "q756",
        "input": "python iterate over every 10 items iterable",
        "output": "",
        "rule": [
            "d756"
        ]
    },
    {
        "instruction": "",
        "id": "q757",
        "input": "how do you flatten a list in python",
        "output": "",
        "rule": [
            "d757"
        ]
    },
    {
        "instruction": "",
        "id": "q758",
        "input": "python iterate through all the files in a directory",
        "output": "",
        "rule": [
            "d758"
        ]
    },
    {
        "instruction": "",
        "id": "q759",
        "input": "how do you load python numpy",
        "output": "",
        "rule": [
            "d759"
        ]
    },
    {
        "instruction": "",
        "id": "q760",
        "input": "python itertools groupby multiple keys",
        "output": "",
        "rule": [
            "d760"
        ]
    },
    {
        "instruction": "",
        "id": "q761",
        "input": "how do you put python is in windows path",
        "output": "",
        "rule": [
            "d761"
        ]
    },
    {
        "instruction": "",
        "id": "q762",
        "input": "python jinja2 template function calling",
        "output": "",
        "rule": [
            "d762"
        ]
    },
    {
        "instruction": "",
        "id": "q763",
        "input": "how do you tell python to drop a column with no values",
        "output": "",
        "rule": [
            "d763"
        ]
    },
    {
        "instruction": "",
        "id": "q764",
        "input": "python join data frame",
        "output": "",
        "rule": [
            "d764"
        ]
    },
    {
        "instruction": "",
        "id": "q765",
        "input": "how do you use nbytes in python",
        "output": "",
        "rule": [
            "d765"
        ]
    },
    {
        "instruction": "",
        "id": "q766",
        "input": "python join images into one",
        "output": "",
        "rule": [
            "d766"
        ]
    },
    {
        "instruction": "",
        "id": "q767",
        "input": "how in python coerce data frame to dictionary",
        "output": "",
        "rule": [
            "d767"
        ]
    },
    {
        "instruction": "",
        "id": "q768",
        "input": "python join only part of a list",
        "output": "",
        "rule": [
            "d768"
        ]
    },
    {
        "instruction": "",
        "id": "q769",
        "input": "how is a python script compiled",
        "output": "",
        "rule": [
            "d769"
        ]
    },
    {
        "instruction": "",
        "id": "q770",
        "input": "python join to dict",
        "output": "",
        "rule": [
            "d770"
        ]
    },
    {
        "instruction": "",
        "id": "q771",
        "input": "how python hash a tuple",
        "output": "",
        "rule": [
            "d771"
        ]
    },
    {
        "instruction": "",
        "id": "q772",
        "input": "python join used in listcomprehension",
        "output": "",
        "rule": [
            "d772"
        ]
    },
    {
        "instruction": "",
        "id": "q773",
        "input": "how to a matrix diagonally dominant in python",
        "output": "",
        "rule": [
            "d773"
        ]
    },
    {
        "instruction": "",
        "id": "q774",
        "input": "python join with delimiter",
        "output": "",
        "rule": [
            "d774"
        ]
    },
    {
        "instruction": "",
        "id": "q775",
        "input": "how to acces setter method property python",
        "output": "",
        "rule": [
            "d775"
        ]
    },
    {
        "instruction": "",
        "id": "q776",
        "input": "python js object passing",
        "output": "",
        "rule": [
            "d776"
        ]
    },
    {
        "instruction": "",
        "id": "q777",
        "input": "how to access aws s3 bucket file in python",
        "output": "",
        "rule": [
            "d777"
        ]
    },
    {
        "instruction": "",
        "id": "q778",
        "input": "python json dump beautifier",
        "output": "",
        "rule": [
            "d778"
        ]
    },
    {
        "instruction": "",
        "id": "q779",
        "input": "how to access file properties python",
        "output": "",
        "rule": [
            "d779"
        ]
    },
    {
        "instruction": "",
        "id": "q780",
        "input": "python json dump pretty format",
        "output": "",
        "rule": [
            "d780"
        ]
    },
    {
        "instruction": "",
        "id": "q781",
        "input": "how to access python help",
        "output": "",
        "rule": [
            "d781"
        ]
    },
    {
        "instruction": "",
        "id": "q782",
        "input": "python json save file new file",
        "output": "",
        "rule": [
            "d782"
        ]
    },
    {
        "instruction": "",
        "id": "q783",
        "input": "how to add a line to the end of a python file",
        "output": "",
        "rule": [
            "d783"
        ]
    },
    {
        "instruction": "",
        "id": "q784",
        "input": "python json schema validation",
        "output": "",
        "rule": [
            "d784"
        ]
    },
    {
        "instruction": "",
        "id": "q785",
        "input": "how to add all outputs python",
        "output": "",
        "rule": [
            "d785"
        ]
    },
    {
        "instruction": "",
        "id": "q786",
        "input": "python json serialize types",
        "output": "",
        "rule": [
            "d786"
        ]
    },
    {
        "instruction": "",
        "id": "q787",
        "input": "how to add helper function in python",
        "output": "",
        "rule": [
            "d787"
        ]
    },
    {
        "instruction": "",
        "id": "q788",
        "input": "python json to attributes",
        "output": "",
        "rule": [
            "d788"
        ]
    },
    {
        "instruction": "",
        "id": "q789",
        "input": "how to add local abs file path in python 3",
        "output": "",
        "rule": [
            "d789"
        ]
    },
    {
        "instruction": "",
        "id": "q790",
        "input": "python jsonify database query",
        "output": "",
        "rule": [
            "d790"
        ]
    },
    {
        "instruction": "",
        "id": "q791",
        "input": "how to add noise to sound in python",
        "output": "",
        "rule": [
            "d791"
        ]
    },
    {
        "instruction": "",
        "id": "q792",
        "input": "python judge empty dict",
        "output": "",
        "rule": [
            "d792"
        ]
    },
    {
        "instruction": "",
        "id": "q793",
        "input": "how to align text in center with python",
        "output": "",
        "rule": [
            "d793"
        ]
    },
    {
        "instruction": "",
        "id": "q794",
        "input": "python keras get embedding",
        "output": "",
        "rule": [
            "d794"
        ]
    },
    {
        "instruction": "",
        "id": "q795",
        "input": "how to align text python",
        "output": "",
        "rule": [
            "d795"
        ]
    },
    {
        "instruction": "",
        "id": "q796",
        "input": "python kill process if time out",
        "output": "",
        "rule": [
            "d796"
        ]
    },
    {
        "instruction": "",
        "id": "q797",
        "input": "how to allow python permission to copy files",
        "output": "",
        "rule": [
            "d797"
        ]
    },
    {
        "instruction": "",
        "id": "q798",
        "input": "python know last element in for loop",
        "output": "",
        "rule": [
            "d798"
        ]
    },
    {
        "instruction": "",
        "id": "q799",
        "input": "how to append data to a json file python",
        "output": "",
        "rule": [
            "d799"
        ]
    },
    {
        "instruction": "",
        "id": "q800",
        "input": "python lambda join dict values",
        "output": "",
        "rule": [
            "d800"
        ]
    },
    {
        "instruction": "",
        "id": "q801",
        "input": "how to append text file name in python",
        "output": "",
        "rule": [
            "d801"
        ]
    },
    {
        "instruction": "",
        "id": "q802",
        "input": "python last element in stack",
        "output": "",
        "rule": [
            "d802"
        ]
    },
    {
        "instruction": "",
        "id": "q803",
        "input": "how to apply a log scale in python",
        "output": "",
        "rule": [
            "d803"
        ]
    },
    {
        "instruction": "",
        "id": "q804",
        "input": "python last modified file in directory",
        "output": "",
        "rule": [
            "d804"
        ]
    },
    {
        "instruction": "",
        "id": "q805",
        "input": "how to ask for input on python 3",
        "output": "",
        "rule": [
            "d805"
        ]
    },
    {
        "instruction": "",
        "id": "q806",
        "input": "python len of dimension list",
        "output": "",
        "rule": [
            "d806"
        ]
    },
    {
        "instruction": "",
        "id": "q807",
        "input": "how to automatically sort files based on name, python",
        "output": "",
        "rule": [
            "d807"
        ]
    },
    {
        "instruction": "",
        "id": "q808",
        "input": "python levenshtein ratio is wrong",
        "output": "",
        "rule": [
            "d808"
        ]
    },
    {
        "instruction": "",
        "id": "q809",
        "input": "how to block python code before executing",
        "output": "",
        "rule": [
            "d809"
        ]
    },
    {
        "instruction": "",
        "id": "q810",
        "input": "python limit the execution time of the given function",
        "output": "",
        "rule": [
            "d810"
        ]
    },
    {
        "instruction": "",
        "id": "q811",
        "input": "how to build json param object in python",
        "output": "",
        "rule": [
            "d811"
        ]
    },
    {
        "instruction": "",
        "id": "q812",
        "input": "python line by line parse file yield",
        "output": "",
        "rule": [
            "d812"
        ]
    },
    {
        "instruction": "",
        "id": "q813",
        "input": "how to calculate object size in python",
        "output": "",
        "rule": [
            "d813"
        ]
    },
    {
        "instruction": "",
        "id": "q814",
        "input": "python list all elements distinct",
        "output": "",
        "rule": [
            "d814"
        ]
    },
    {
        "instruction": "",
        "id": "q815",
        "input": "how to calculate standard error on python",
        "output": "",
        "rule": [
            "d815"
        ]
    },
    {
        "instruction": "",
        "id": "q816",
        "input": "python list all tables in sqlite",
        "output": "",
        "rule": [
            "d816"
        ]
    },
    {
        "instruction": "",
        "id": "q817",
        "input": "how to calculate time to execute function python",
        "output": "",
        "rule": [
            "d817"
        ]
    },
    {
        "instruction": "",
        "id": "q818",
        "input": "python list comprehension over two indexes",
        "output": "",
        "rule": [
            "d818"
        ]
    },
    {
        "instruction": "",
        "id": "q819",
        "input": "how to capitalize a certain letter in a string in python",
        "output": "",
        "rule": [
            "d819"
        ]
    },
    {
        "instruction": "",
        "id": "q820",
        "input": "how to captolize the first letter of a varriable string in python",
        "output": "",
        "rule": [
            "d820"
        ]
    },
    {
        "instruction": "",
        "id": "q821",
        "input": "python list how to duplicate",
        "output": "",
        "rule": [
            "d821"
        ]
    },
    {
        "instruction": "",
        "id": "q822",
        "input": "how to cast to string in python",
        "output": "",
        "rule": [
            "d822"
        ]
    },
    {
        "instruction": "",
        "id": "q823",
        "input": "python list of nan values",
        "output": "",
        "rule": [
            "d823"
        ]
    },
    {
        "instruction": "",
        "id": "q824",
        "input": "how to catch errors and store it in python",
        "output": "",
        "rule": [
            "d824"
        ]
    },
    {
        "instruction": "",
        "id": "q825",
        "input": "python list of numpy array",
        "output": "",
        "rule": [
            "d825"
        ]
    },
    {
        "instruction": "",
        "id": "q826",
        "input": "how to change a string to a lower case string within a list in python",
        "output": "",
        "rule": [
            "d826"
        ]
    },
    {
        "instruction": "",
        "id": "q827",
        "input": "python list of numpy arrays",
        "output": "",
        "rule": [
            "d827"
        ]
    },
    {
        "instruction": "",
        "id": "q828",
        "input": "how to change an array of lists into an array python",
        "output": "",
        "rule": [
            "d828"
        ]
    },
    {
        "instruction": "",
        "id": "q829",
        "input": "python list of objet methods",
        "output": "",
        "rule": [
            "d829"
        ]
    },
    {
        "instruction": "",
        "id": "q830",
        "input": "how to change epoch time into zulu time python 3",
        "output": "",
        "rule": [
            "d830"
        ]
    },
    {
        "instruction": "",
        "id": "q831",
        "input": "python list of zero numpy",
        "output": "",
        "rule": [
            "d831"
        ]
    },
    {
        "instruction": "",
        "id": "q832",
        "input": "how to change headers of table in python",
        "output": "",
        "rule": [
            "d832"
        ]
    },
    {
        "instruction": "",
        "id": "q833",
        "input": "python load argparse from json",
        "output": "",
        "rule": [
            "d833"
        ]
    },
    {
        "instruction": "",
        "id": "q834",
        "input": "how to change ioerror python3",
        "output": "",
        "rule": [
            "d834"
        ]
    },
    {
        "instruction": "",
        "id": "q835",
        "input": "python load mnist data no numpy",
        "output": "",
        "rule": [
            "d835"
        ]
    },
    {
        "instruction": "",
        "id": "q836",
        "input": "how to change max line length in python",
        "output": "",
        "rule": [
            "d836"
        ]
    },
    {
        "instruction": "",
        "id": "q837",
        "input": "python load variable into environment from function",
        "output": "",
        "rule": [
            "d837"
        ]
    },
    {
        "instruction": "",
        "id": "q838",
        "input": "how to change name of a column in python data frame",
        "output": "",
        "rule": [
            "d838"
        ]
    },
    {
        "instruction": "",
        "id": "q839",
        "input": "python load yaml inline",
        "output": "",
        "rule": [
            "d839"
        ]
    },
    {
        "instruction": "",
        "id": "q840",
        "input": "how to change strings to float in python",
        "output": "",
        "rule": [
            "d840"
        ]
    },
    {
        "instruction": "",
        "id": "q841",
        "input": "python local time to utc",
        "output": "",
        "rule": [
            "d841"
        ]
    },
    {
        "instruction": "",
        "id": "q842",
        "input": "how to change the case of any string data python",
        "output": "",
        "rule": [
            "d842"
        ]
    },
    {
        "instruction": "",
        "id": "q843",
        "input": "python locate item in a tuple",
        "output": "",
        "rule": [
            "d843"
        ]
    },
    {
        "instruction": "",
        "id": "q844",
        "input": "how to check aspect ratio photo in python",
        "output": "",
        "rule": [
            "d844"
        ]
    },
    {
        "instruction": "",
        "id": "q845",
        "input": "python lock if already aquired",
        "output": "",
        "rule": [
            "d845"
        ]
    },
    {
        "instruction": "",
        "id": "q846",
        "input": "how to check column format in python",
        "output": "",
        "rule": [
            "d846"
        ]
    },
    {
        "instruction": "",
        "id": "q847",
        "input": "how to check data type of variable in python",
        "output": "",
        "rule": [
            "d847"
        ]
    },
    {
        "instruction": "",
        "id": "q848",
        "input": "python log distribution between two numbers numpy",
        "output": "",
        "rule": [
            "d848"
        ]
    },
    {
        "instruction": "",
        "id": "q849",
        "input": "how to check datatype in list in python",
        "output": "",
        "rule": [
            "d849"
        ]
    },
    {
        "instruction": "",
        "id": "q850",
        "input": "python log get handlers",
        "output": "",
        "rule": [
            "d850"
        ]
    },
    {
        "instruction": "",
        "id": "q851",
        "input": "how to check for non ascii in python",
        "output": "",
        "rule": [
            "d851"
        ]
    },
    {
        "instruction": "",
        "id": "q852",
        "input": "python logger remove color",
        "output": "",
        "rule": [
            "d852"
        ]
    },
    {
        "instruction": "",
        "id": "q853",
        "input": "how to check function definition in python spyder",
        "output": "",
        "rule": [
            "d853"
        ]
    },
    {
        "instruction": "",
        "id": "q854",
        "input": "python logging custom format",
        "output": "",
        "rule": [
            "d854"
        ]
    },
    {
        "instruction": "",
        "id": "q855",
        "input": "how to check if a string contains any punctuation marks in python",
        "output": "",
        "rule": [
            "d855"
        ]
    },
    {
        "instruction": "",
        "id": "q856",
        "input": "python logging fileconfig add config",
        "output": "",
        "rule": [
            "d856"
        ]
    },
    {
        "instruction": "",
        "id": "q857",
        "input": "how to check if element is callable python",
        "output": "",
        "rule": [
            "d857"
        ]
    },
    {
        "instruction": "",
        "id": "q858",
        "input": "python logging highlight colors in log",
        "output": "",
        "rule": [
            "d858"
        ]
    },
    {
        "instruction": "",
        "id": "q859",
        "input": "how to check if iterable in python",
        "output": "",
        "rule": [
            "d859"
        ]
    },
    {
        "instruction": "",
        "id": "q860",
        "input": "python logging only my code",
        "output": "",
        "rule": [
            "d860"
        ]
    },
    {
        "instruction": "",
        "id": "q861",
        "input": "how to check if something is a nested list python",
        "output": "",
        "rule": [
            "d861"
        ]
    },
    {
        "instruction": "",
        "id": "q862",
        "input": "python make 1d array into 2d array",
        "output": "",
        "rule": [
            "d862"
        ]
    },
    {
        "instruction": "",
        "id": "q863",
        "input": "how to check if something is on range or not in python",
        "output": "",
        "rule": [
            "d863"
        ]
    },
    {
        "instruction": "",
        "id": "q864",
        "input": "python make array to string",
        "output": "",
        "rule": [
            "d864"
        ]
    },
    {
        "instruction": "",
        "id": "q865",
        "input": "how to check if string input is empty python",
        "output": "",
        "rule": [
            "d865"
        ]
    },
    {
        "instruction": "",
        "id": "q866",
        "input": "python make datetime naive",
        "output": "",
        "rule": [
            "d866"
        ]
    },
    {
        "instruction": "",
        "id": "q867",
        "input": "how to check if there's a match not case senseitive python string",
        "output": "",
        "rule": [
            "d867"
        ]
    },
    {
        "instruction": "",
        "id": "q868",
        "input": "python make dictionary immutable values",
        "output": "",
        "rule": [
            "d868"
        ]
    },
    {
        "instruction": "",
        "id": "q869",
        "input": "how to check multiple data type in python",
        "output": "",
        "rule": [
            "d869"
        ]
    },
    {
        "instruction": "",
        "id": "q870",
        "input": "python make path absolute",
        "output": "",
        "rule": [
            "d870"
        ]
    },
    {
        "instruction": "",
        "id": "q871",
        "input": "how to check python cuda devices",
        "output": "",
        "rule": [
            "d871"
        ]
    },
    {
        "instruction": "",
        "id": "q872",
        "input": "python make pty raw",
        "output": "",
        "rule": [
            "d872"
        ]
    },
    {
        "instruction": "",
        "id": "q873",
        "input": "how to check the distance between two columns in python in python",
        "output": "",
        "rule": [
            "d873"
        ]
    },
    {
        "instruction": "",
        "id": "q874",
        "input": "python make table from list",
        "output": "",
        "rule": [
            "d874"
        ]
    },
    {
        "instruction": "",
        "id": "q875",
        "input": "how to check to see if matrix is square in python",
        "output": "",
        "rule": [
            "d875"
        ]
    },
    {
        "instruction": "",
        "id": "q876",
        "input": "python make tuple out of string",
        "output": "",
        "rule": [
            "d876"
        ]
    },
    {
        "instruction": "",
        "id": "q877",
        "input": "how to check what type something is python",
        "output": "",
        "rule": [
            "d877"
        ]
    },
    {
        "instruction": "",
        "id": "q878",
        "input": "python make variable format percentage",
        "output": "",
        "rule": [
            "d878"
        ]
    },
    {
        "instruction": "",
        "id": "q879",
        "input": "how to check whether a filename contains certain characters in python",
        "output": "",
        "rule": [
            "d879"
        ]
    },
    {
        "instruction": "",
        "id": "q880",
        "input": "python making a valid password",
        "output": "",
        "rule": [
            "d880"
        ]
    },
    {
        "instruction": "",
        "id": "q881",
        "input": "how to check whether a type is float python",
        "output": "",
        "rule": [
            "d881"
        ]
    },
    {
        "instruction": "",
        "id": "q882",
        "input": "python many regex sub calls",
        "output": "",
        "rule": [
            "d882"
        ]
    },
    {
        "instruction": "",
        "id": "q883",
        "input": "how to choose a directory path using tkinter in python",
        "output": "",
        "rule": [
            "d883"
        ]
    },
    {
        "instruction": "",
        "id": "q884",
        "input": "python map json to list of object",
        "output": "",
        "rule": [
            "d884"
        ]
    },
    {
        "instruction": "",
        "id": "q885",
        "input": "how to clean up python sp cache",
        "output": "",
        "rule": [
            "d885"
        ]
    },
    {
        "instruction": "",
        "id": "q886",
        "input": "python map two functions",
        "output": "",
        "rule": [
            "d886"
        ]
    },
    {
        "instruction": "",
        "id": "q887",
        "input": "how to clear all cells in python notrebook",
        "output": "",
        "rule": [
            "d887"
        ]
    },
    {
        "instruction": "",
        "id": "q888",
        "input": "python match not start with a word",
        "output": "",
        "rule": [
            "d888"
        ]
    },
    {
        "instruction": "",
        "id": "q889",
        "input": "how to clear cache in python",
        "output": "",
        "rule": [
            "d889"
        ]
    },
    {
        "instruction": "",
        "id": "q890",
        "input": "python matplotlib axis range auto",
        "output": "",
        "rule": [
            "d890"
        ]
    },
    {
        "instruction": "",
        "id": "q891",
        "input": "how to clear the cpu memory in python",
        "output": "",
        "rule": [
            "d891"
        ]
    },
    {
        "instruction": "",
        "id": "q892",
        "input": "python matplotlib generate hex color string",
        "output": "",
        "rule": [
            "d892"
        ]
    },
    {
        "instruction": "",
        "id": "q893",
        "input": "how to clear the previous line in python",
        "output": "",
        "rule": [
            "d893"
        ]
    },
    {
        "instruction": "",
        "id": "q894",
        "input": "python matplotlib how to plot a line parallel to x axis",
        "output": "",
        "rule": [
            "d894"
        ]
    },
    {
        "instruction": "",
        "id": "q895",
        "input": "how to close all threads in a thread array in python3",
        "output": "",
        "rule": [
            "d895"
        ]
    },
    {
        "instruction": "",
        "id": "q896",
        "input": "python matplotlib open in window",
        "output": "",
        "rule": [
            "d896"
        ]
    },
    {
        "instruction": "",
        "id": "q897",
        "input": "how to code python sum least of squares regression",
        "output": "",
        "rule": [
            "d897"
        ]
    },
    {
        "instruction": "",
        "id": "q898",
        "input": "python matplotlib remove axis ticks",
        "output": "",
        "rule": [
            "d898"
        ]
    },
    {
        "instruction": "",
        "id": "q899",
        "input": "python matplotlib set ylimit for subplot",
        "output": "",
        "rule": [
            "d899"
        ]
    },
    {
        "instruction": "",
        "id": "q900",
        "input": "how to code the norm in python",
        "output": "",
        "rule": [
            "d900"
        ]
    },
    {
        "instruction": "",
        "id": "q901",
        "input": "python matplotlib show multiple images",
        "output": "",
        "rule": [
            "d901"
        ]
    },
    {
        "instruction": "",
        "id": "q902",
        "input": "how to combine two data frame with same columns python",
        "output": "",
        "rule": [
            "d902"
        ]
    },
    {
        "instruction": "",
        "id": "q903",
        "input": "python matrix random select k points",
        "output": "",
        "rule": [
            "d903"
        ]
    },
    {
        "instruction": "",
        "id": "q904",
        "input": "how to compare file content in python",
        "output": "",
        "rule": [
            "d904"
        ]
    },
    {
        "instruction": "",
        "id": "q905",
        "input": "python max an min integers",
        "output": "",
        "rule": [
            "d905"
        ]
    },
    {
        "instruction": "",
        "id": "q906",
        "input": "how to compare two matrices for accuracy python",
        "output": "",
        "rule": [
            "d906"
        ]
    },
    {
        "instruction": "",
        "id": "q907",
        "input": "how to compare zip files in python",
        "output": "",
        "rule": [
            "d907"
        ]
    },
    {
        "instruction": "",
        "id": "q908",
        "input": "python measure coverage from bash script",
        "output": "",
        "rule": [
            "d908"
        ]
    },
    {
        "instruction": "",
        "id": "q909",
        "input": "how to compares if two python dictionaries are equal",
        "output": "",
        "rule": [
            "d909"
        ]
    },
    {
        "instruction": "",
        "id": "q910",
        "input": "python memory usage of a function",
        "output": "",
        "rule": [
            "d910"
        ]
    },
    {
        "instruction": "",
        "id": "q911",
        "input": "how to compile c++ with python",
        "output": "",
        "rule": [
            "d911"
        ]
    },
    {
        "instruction": "",
        "id": "q912",
        "input": "python merge and update dictionaries",
        "output": "",
        "rule": [
            "d912"
        ]
    },
    {
        "instruction": "",
        "id": "q913",
        "input": "how to continue from a line to next in python",
        "output": "",
        "rule": [
            "d913"
        ]
    },
    {
        "instruction": "",
        "id": "q914",
        "input": "python merge object not callable",
        "output": "",
        "rule": [
            "d914"
        ]
    },
    {
        "instruction": "",
        "id": "q915",
        "input": "how to control the display string length python",
        "output": "",
        "rule": [
            "d915"
        ]
    },
    {
        "instruction": "",
        "id": "q916",
        "input": "python method wraps instance",
        "output": "",
        "rule": [
            "d916"
        ]
    },
    {
        "instruction": "",
        "id": "q917",
        "input": "how to conver email message object to string in python",
        "output": "",
        "rule": [
            "d917"
        ]
    },
    {
        "instruction": "",
        "id": "q918",
        "input": "python minimum of np matrix",
        "output": "",
        "rule": [
            "d918"
        ]
    },
    {
        "instruction": "",
        "id": "q919",
        "input": "how to conver to array python",
        "output": "",
        "rule": [
            "d919"
        ]
    },
    {
        "instruction": "",
        "id": "q920",
        "input": "python minmaxscaler with range",
        "output": "",
        "rule": [
            "d920"
        ]
    },
    {
        "instruction": "",
        "id": "q921",
        "input": "how to correct the image of perspective transform using python",
        "output": "",
        "rule": [
            "d921"
        ]
    },
    {
        "instruction": "",
        "id": "q922",
        "input": "python mkdir mode examples",
        "output": "",
        "rule": [
            "d922"
        ]
    },
    {
        "instruction": "",
        "id": "q923",
        "input": "how to correct typing errors in python",
        "output": "",
        "rule": [
            "d923"
        ]
    },
    {
        "instruction": "",
        "id": "q924",
        "input": "python mongodb model how to initialize collection from json",
        "output": "",
        "rule": [
            "d924"
        ]
    },
    {
        "instruction": "",
        "id": "q925",
        "input": "how to count the number of occurences of each unique combination in th list in python",
        "output": "",
        "rule": [
            "d925"
        ]
    },
    {
        "instruction": "",
        "id": "q926",
        "input": "python mongoengine findone object",
        "output": "",
        "rule": [
            "d926"
        ]
    },
    {
        "instruction": "",
        "id": "q927",
        "input": "how to cout the number of indents in a string i python",
        "output": "",
        "rule": [
            "d927"
        ]
    },
    {
        "instruction": "",
        "id": "q928",
        "input": "python most common element in a list",
        "output": "",
        "rule": [
            "d928"
        ]
    },
    {
        "instruction": "",
        "id": "q929",
        "input": "how to create a concat key in python",
        "output": "",
        "rule": [
            "d929"
        ]
    },
    {
        "instruction": "",
        "id": "q930",
        "input": "how to create a list of prime numbers in python",
        "output": "",
        "rule": [
            "d930"
        ]
    },
    {
        "instruction": "",
        "id": "q931",
        "input": "how to create bucket through python scripts",
        "output": "",
        "rule": [
            "d931"
        ]
    },
    {
        "instruction": "",
        "id": "q932",
        "input": "python move file pointer back",
        "output": "",
        "rule": [
            "d932"
        ]
    },
    {
        "instruction": "",
        "id": "q933",
        "input": "how to create cell separator in python",
        "output": "",
        "rule": [
            "d933"
        ]
    },
    {
        "instruction": "",
        "id": "q934",
        "input": "python move to next position in a line",
        "output": "",
        "rule": [
            "d934"
        ]
    },
    {
        "instruction": "",
        "id": "q935",
        "input": "how to create copy of python ordered dictionary",
        "output": "",
        "rule": [
            "d935"
        ]
    },
    {
        "instruction": "",
        "id": "q936",
        "input": "python multi instance singleton",
        "output": "",
        "rule": [
            "d936"
        ]
    },
    {
        "instruction": "",
        "id": "q937",
        "input": "how to create dictionary in python from string",
        "output": "",
        "rule": [
            "d937"
        ]
    },
    {
        "instruction": "",
        "id": "q938",
        "input": "python multiline string and multiline comments",
        "output": "",
        "rule": [
            "d938"
        ]
    },
    {
        "instruction": "",
        "id": "q939",
        "input": "how to create soft link in python os",
        "output": "",
        "rule": [
            "d939"
        ]
    },
    {
        "instruction": "",
        "id": "q940",
        "input": "python multiline string with comment",
        "output": "",
        "rule": [
            "d940"
        ]
    },
    {
        "instruction": "",
        "id": "q941",
        "input": "how to cuont the number of items produced in python",
        "output": "",
        "rule": [
            "d941"
        ]
    },
    {
        "instruction": "",
        "id": "q942",
        "input": "python multiple context managers",
        "output": "",
        "rule": [
            "d942"
        ]
    },
    {
        "instruction": "",
        "id": "q943",
        "input": "how to define a list of n size in python",
        "output": "",
        "rule": [
            "d943"
        ]
    },
    {
        "instruction": "",
        "id": "q944",
        "input": "python multiple context vars",
        "output": "",
        "rule": [
            "d944"
        ]
    },
    {
        "instruction": "",
        "id": "q945",
        "input": "how to define a matrix of random numbers in python",
        "output": "",
        "rule": [
            "d945"
        ]
    },
    {
        "instruction": "",
        "id": "q946",
        "input": "python multiple qr codes from one image",
        "output": "",
        "rule": [
            "d946"
        ]
    },
    {
        "instruction": "",
        "id": "q947",
        "input": "how to define unichr in python",
        "output": "",
        "rule": [
            "d947"
        ]
    },
    {
        "instruction": "",
        "id": "q948",
        "input": "python multiprocess pool function",
        "output": "",
        "rule": [
            "d948"
        ]
    },
    {
        "instruction": "",
        "id": "q949",
        "input": "how to delclare a variable global in python",
        "output": "",
        "rule": [
            "d949"
        ]
    },
    {
        "instruction": "",
        "id": "q950",
        "input": "python multiprocessing pool get results while pool is still running",
        "output": "",
        "rule": [
            "d950"
        ]
    },
    {
        "instruction": "",
        "id": "q951",
        "input": "how to deleat all references of an object python'",
        "output": "",
        "rule": [
            "d951"
        ]
    },
    {
        "instruction": "",
        "id": "q952",
        "input": "python multiprocessing pool lock",
        "output": "",
        "rule": [
            "d952"
        ]
    },
    {
        "instruction": "",
        "id": "q953",
        "input": "how to delete an entry from the dictionary python",
        "output": "",
        "rule": [
            "d953"
        ]
    },
    {
        "instruction": "",
        "id": "q954",
        "input": "python multiprocessing queue get last",
        "output": "",
        "rule": [
            "d954"
        ]
    },
    {
        "instruction": "",
        "id": "q955",
        "input": "how to delete columns from dataset in python",
        "output": "",
        "rule": [
            "d955"
        ]
    },
    {
        "instruction": "",
        "id": "q956",
        "input": "python multiprocessing synchronize lock",
        "output": "",
        "rule": [
            "d956"
        ]
    },
    {
        "instruction": "",
        "id": "q957",
        "input": "how to delete file on python",
        "output": "",
        "rule": [
            "d957"
        ]
    },
    {
        "instruction": "",
        "id": "q958",
        "input": "python mysqldb get all tables name",
        "output": "",
        "rule": [
            "d958"
        ]
    },
    {
        "instruction": "",
        "id": "q959",
        "input": "how to delete multiple copies in a list python",
        "output": "",
        "rule": [
            "d959"
        ]
    },
    {
        "instruction": "",
        "id": "q960",
        "input": "python name of parent window",
        "output": "",
        "rule": [
            "d960"
        ]
    },
    {
        "instruction": "",
        "id": "q961",
        "input": "how to delete string in python",
        "output": "",
        "rule": [
            "d961"
        ]
    },
    {
        "instruction": "",
        "id": "q962",
        "input": "python navigationtoolbar remove zoom",
        "output": "",
        "rule": [
            "d962"
        ]
    },
    {
        "instruction": "",
        "id": "q963",
        "input": "how to delete things in an list in python",
        "output": "",
        "rule": [
            "d963"
        ]
    },
    {
        "instruction": "",
        "id": "q964",
        "input": "python nearest value in array",
        "output": "",
        "rule": [
            "d964"
        ]
    },
    {
        "instruction": "",
        "id": "q965",
        "input": "how to deprecate a function in python",
        "output": "",
        "rule": [
            "d965"
        ]
    },
    {
        "instruction": "",
        "id": "q966",
        "input": "python networkx remove node",
        "output": "",
        "rule": [
            "d966"
        ]
    },
    {
        "instruction": "",
        "id": "q967",
        "input": "how to deprecate a function un python",
        "output": "",
        "rule": [
            "d967"
        ]
    },
    {
        "instruction": "",
        "id": "q968",
        "input": "python nltk remove stopwords punctuation kaggle",
        "output": "",
        "rule": [
            "d968"
        ]
    },
    {
        "instruction": "",
        "id": "q969",
        "input": "how to detect if cmd is running as administrator/has elevated privileges python",
        "output": "",
        "rule": [
            "d969"
        ]
    },
    {
        "instruction": "",
        "id": "q970",
        "input": "python no connection could be made because target machine actively thread",
        "output": "",
        "rule": [
            "d970"
        ]
    },
    {
        "instruction": "",
        "id": "q971",
        "input": "python non unique items in a list",
        "output": "",
        "rule": [
            "d971"
        ]
    },
    {
        "instruction": "",
        "id": "q972",
        "input": "how to detect str in python 3",
        "output": "",
        "rule": [
            "d972"
        ]
    },
    {
        "instruction": "",
        "id": "q973",
        "input": "python normal distribution maximum likelihood estimation",
        "output": "",
        "rule": [
            "d973"
        ]
    },
    {
        "instruction": "",
        "id": "q974",
        "input": "how to determine api type python",
        "output": "",
        "rule": [
            "d974"
        ]
    },
    {
        "instruction": "",
        "id": "q975",
        "input": "python normalize an image into p0,1]",
        "output": "",
        "rule": [
            "d975"
        ]
    },
    {
        "instruction": "",
        "id": "q976",
        "input": "how to determine if a variable is as sequence in python",
        "output": "",
        "rule": [
            "d976"
        ]
    },
    {
        "instruction": "",
        "id": "q977",
        "input": "python nose skip test",
        "output": "",
        "rule": [
            "d977"
        ]
    },
    {
        "instruction": "",
        "id": "q978",
        "input": "how to determine number of bins in a histogram python",
        "output": "",
        "rule": [
            "d978"
        ]
    },
    {
        "instruction": "",
        "id": "q979",
        "input": "python not showing up in documents",
        "output": "",
        "rule": [
            "d979"
        ]
    },
    {
        "instruction": "",
        "id": "q980",
        "input": "how to determine the path of a directory in python",
        "output": "",
        "rule": [
            "d980"
        ]
    },
    {
        "instruction": "",
        "id": "q981",
        "input": "how to detokenize in python",
        "output": "",
        "rule": [
            "d981"
        ]
    },
    {
        "instruction": "",
        "id": "q982",
        "input": "python numpy array iterable",
        "output": "",
        "rule": [
            "d982"
        ]
    },
    {
        "instruction": "",
        "id": "q983",
        "input": "how to devide a list into 5 same length lists python",
        "output": "",
        "rule": [
            "d983"
        ]
    },
    {
        "instruction": "",
        "id": "q984",
        "input": "python numpy array output as type",
        "output": "",
        "rule": [
            "d984"
        ]
    },
    {
        "instruction": "",
        "id": "q985",
        "input": "how to display an error message and stop the code execution in python",
        "output": "",
        "rule": [
            "d985"
        ]
    },
    {
        "instruction": "",
        "id": "q986",
        "input": "python numpy generate list from array",
        "output": "",
        "rule": [
            "d986"
        ]
    },
    {
        "instruction": "",
        "id": "q987",
        "input": "how to display images in a list python",
        "output": "",
        "rule": [
            "d987"
        ]
    },
    {
        "instruction": "",
        "id": "q988",
        "input": "python numpy get nonzero list",
        "output": "",
        "rule": [
            "d988"
        ]
    },
    {
        "instruction": "",
        "id": "q989",
        "input": "how to divide one tensor with another in python",
        "output": "",
        "rule": [
            "d989"
        ]
    },
    {
        "instruction": "",
        "id": "q990",
        "input": "python object properties to dict",
        "output": "",
        "rule": [
            "d990"
        ]
    },
    {
        "instruction": "",
        "id": "q991",
        "input": "how to do if answer is not python",
        "output": "",
        "rule": [
            "d991"
        ]
    },
    {
        "instruction": "",
        "id": "q992",
        "input": "python object with datetime to json",
        "output": "",
        "rule": [
            "d992"
        ]
    },
    {
        "instruction": "",
        "id": "q993",
        "input": "how to do lower case function in python",
        "output": "",
        "rule": [
            "d993"
        ]
    },
    {
        "instruction": "",
        "id": "q994",
        "input": "python onehotencoding for categorical variables",
        "output": "",
        "rule": [
            "d994"
        ]
    },
    {
        "instruction": "",
        "id": "q995",
        "input": "how to do python syntax check run in spyder",
        "output": "",
        "rule": [
            "d995"
        ]
    },
    {
        "instruction": "",
        "id": "q996",
        "input": "how to do string comparison in python",
        "output": "",
        "rule": [
            "d996"
        ]
    },
    {
        "instruction": "",
        "id": "q997",
        "input": "python only make property setter",
        "output": "",
        "rule": [
            "d997"
        ]
    },
    {
        "instruction": "",
        "id": "q998",
        "input": "how to dot two vectors in python",
        "output": "",
        "rule": [
            "d998"
        ]
    },
    {
        "instruction": "",
        "id": "q999",
        "input": "python only update dict with values not present",
        "output": "",
        "rule": [
            "d999"
        ]
    },
    {
        "instruction": "",
        "id": "q1000",
        "input": "how to download a json file in python",
        "output": "",
        "rule": [
            "d1000"
        ]
    },
    {
        "instruction": "",
        "id": "q1001",
        "input": "python open cv image dimension",
        "output": "",
        "rule": [
            "d1001"
        ]
    },
    {
        "instruction": "",
        "id": "q1002",
        "input": "how to download a json in python",
        "output": "",
        "rule": [
            "d1002"
        ]
    },
    {
        "instruction": "",
        "id": "q1003",
        "input": "python open file as raw string",
        "output": "",
        "rule": [
            "d1003"
        ]
    },
    {
        "instruction": "",
        "id": "q1004",
        "input": "how to download requests python 3",
        "output": "",
        "rule": [
            "d1004"
        ]
    },
    {
        "instruction": "",
        "id": "q1005",
        "input": "python open symbolic link on windows",
        "output": "",
        "rule": [
            "d1005"
        ]
    },
    {
        "instruction": "",
        "id": "q1006",
        "input": "how to draw dot in python",
        "output": "",
        "rule": [
            "d1006"
        ]
    },
    {
        "instruction": "",
        "id": "q1007",
        "input": "python openpyxl open workbook and keep visible",
        "output": "",
        "rule": [
            "d1007"
        ]
    },
    {
        "instruction": "",
        "id": "q1008",
        "input": "how to drop all columns with string values python",
        "output": "",
        "rule": [
            "d1008"
        ]
    },
    {
        "instruction": "",
        "id": "q1009",
        "input": "python order based on lookup",
        "output": "",
        "rule": [
            "d1009"
        ]
    },
    {
        "instruction": "",
        "id": "q1010",
        "input": "how to ecept upper and lower case in python",
        "output": "",
        "rule": [
            "d1010"
        ]
    },
    {
        "instruction": "",
        "id": "q1011",
        "input": "python ordereddict values to numpy array",
        "output": "",
        "rule": [
            "d1011"
        ]
    },
    {
        "instruction": "",
        "id": "q1012",
        "input": "how to eliminate duplicates from a list in python",
        "output": "",
        "rule": [
            "d1012"
        ]
    },
    {
        "instruction": "",
        "id": "q1013",
        "input": "python os path normalize",
        "output": "",
        "rule": [
            "d1013"
        ]
    },
    {
        "instruction": "",
        "id": "q1014",
        "input": "how to evaluate sin in degrees python",
        "output": "",
        "rule": [
            "d1014"
        ]
    },
    {
        "instruction": "",
        "id": "q1015",
        "input": "python out of range float values are not json compliant",
        "output": "",
        "rule": [
            "d1015"
        ]
    },
    {
        "instruction": "",
        "id": "q1016",
        "input": "how to exclude values from range function python 3",
        "output": "",
        "rule": [
            "d1016"
        ]
    },
    {
        "instruction": "",
        "id": "q1017",
        "input": "python output colors from a string",
        "output": "",
        "rule": [
            "d1017"
        ]
    },
    {
        "instruction": "",
        "id": "q1018",
        "input": "how to explicitly close a port in python",
        "output": "",
        "rule": [
            "d1018"
        ]
    },
    {
        "instruction": "",
        "id": "q1019",
        "input": "python pages that scrap a pdf file",
        "output": "",
        "rule": [
            "d1019"
        ]
    },
    {
        "instruction": "",
        "id": "q1020",
        "input": "how to extract keywords for a given text in python",
        "output": "",
        "rule": [
            "d1020"
        ]
    },
    {
        "instruction": "",
        "id": "q1021",
        "input": "python parse a string into a datetime object",
        "output": "",
        "rule": [
            "d1021"
        ]
    },
    {
        "instruction": "",
        "id": "q1022",
        "input": "how to fetch the contents of a webpage using requests in python",
        "output": "",
        "rule": [
            "d1022"
        ]
    },
    {
        "instruction": "",
        "id": "q1023",
        "input": "python parse date string to date object",
        "output": "",
        "rule": [
            "d1023"
        ]
    },
    {
        "instruction": "",
        "id": "q1024",
        "input": "how to fill in null values in python fillna",
        "output": "",
        "rule": [
            "d1024"
        ]
    },
    {
        "instruction": "",
        "id": "q1025",
        "input": "python pass a synchronized object",
        "output": "",
        "rule": [
            "d1025"
        ]
    },
    {
        "instruction": "",
        "id": "q1026",
        "input": "how to finda substring after certain index in python",
        "output": "",
        "rule": [
            "d1026"
        ]
    },
    {
        "instruction": "",
        "id": "q1027",
        "input": "python pass function to map",
        "output": "",
        "rule": [
            "d1027"
        ]
    },
    {
        "instruction": "",
        "id": "q1028",
        "input": "how to flat a list python",
        "output": "",
        "rule": [
            "d1028"
        ]
    },
    {
        "instruction": "",
        "id": "q1029",
        "input": "python pass list to format",
        "output": "",
        "rule": [
            "d1029"
        ]
    },
    {
        "instruction": "",
        "id": "q1030",
        "input": "how to flush text files in python",
        "output": "",
        "rule": [
            "d1030"
        ]
    },
    {
        "instruction": "",
        "id": "q1031",
        "input": "python pass method name for logger",
        "output": "",
        "rule": [
            "d1031"
        ]
    },
    {
        "instruction": "",
        "id": "q1032",
        "input": "how to force python to integers",
        "output": "",
        "rule": [
            "d1032"
        ]
    },
    {
        "instruction": "",
        "id": "q1033",
        "input": "python passing a string with quotes",
        "output": "",
        "rule": [
            "d1033"
        ]
    },
    {
        "instruction": "",
        "id": "q1034",
        "input": "how to force python to return an integer",
        "output": "",
        "rule": [
            "d1034"
        ]
    },
    {
        "instruction": "",
        "id": "q1035",
        "input": "python pathlib create directory",
        "output": "",
        "rule": [
            "d1035"
        ]
    },
    {
        "instruction": "",
        "id": "q1036",
        "input": "how to fourier transform python",
        "output": "",
        "rule": [
            "d1036"
        ]
    },
    {
        "instruction": "",
        "id": "q1037",
        "input": "python pca based on covariance matrix",
        "output": "",
        "rule": [
            "d1037"
        ]
    },
    {
        "instruction": "",
        "id": "q1038",
        "input": "how to fresh the window created in python maya",
        "output": "",
        "rule": [
            "d1038"
        ]
    },
    {
        "instruction": "",
        "id": "q1039",
        "input": "python pdb print stack trace",
        "output": "",
        "rule": [
            "d1039"
        ]
    },
    {
        "instruction": "",
        "id": "q1040",
        "input": "how to generate random rectangles in python",
        "output": "",
        "rule": [
            "d1040"
        ]
    },
    {
        "instruction": "",
        "id": "q1041",
        "input": "python pdb set trace",
        "output": "",
        "rule": [
            "d1041"
        ]
    },
    {
        "instruction": "",
        "id": "q1042",
        "input": "how to generate unique id for each object in python",
        "output": "",
        "rule": [
            "d1042"
        ]
    },
    {
        "instruction": "",
        "id": "q1043",
        "input": "python pdb stack trace",
        "output": "",
        "rule": [
            "d1043"
        ]
    },
    {
        "instruction": "",
        "id": "q1044",
        "input": "how to get a letter displayed as uppercase in python",
        "output": "",
        "rule": [
            "d1044"
        ]
    },
    {
        "instruction": "",
        "id": "q1045",
        "input": "python pdfkit page height in pixels",
        "output": "",
        "rule": [
            "d1045"
        ]
    },
    {
        "instruction": "",
        "id": "q1046",
        "input": "how to get a past command history python",
        "output": "",
        "rule": [
            "d1046"
        ]
    },
    {
        "instruction": "",
        "id": "q1047",
        "input": "python percent sign to character",
        "output": "",
        "rule": [
            "d1047"
        ]
    },
    {
        "instruction": "",
        "id": "q1048",
        "input": "how to get a return from a process python",
        "output": "",
        "rule": [
            "d1048"
        ]
    },
    {
        "instruction": "",
        "id": "q1049",
        "input": "python permute a set of booleans",
        "output": "",
        "rule": [
            "d1049"
        ]
    },
    {
        "instruction": "",
        "id": "q1050",
        "input": "how to get a summary of linear regression in python",
        "output": "",
        "rule": [
            "d1050"
        ]
    },
    {
        "instruction": "",
        "id": "q1051",
        "input": "python pil image frombytes",
        "output": "",
        "rule": [
            "d1051"
        ]
    },
    {
        "instruction": "",
        "id": "q1052",
        "input": "how to get all but last n elements python",
        "output": "",
        "rule": [
            "d1052"
        ]
    },
    {
        "instruction": "",
        "id": "q1053",
        "input": "python placeholder symble for boolean",
        "output": "",
        "rule": [
            "d1053"
        ]
    },
    {
        "instruction": "",
        "id": "q1054",
        "input": "how to get an oauth2 access token from python",
        "output": "",
        "rule": [
            "d1054"
        ]
    },
    {
        "instruction": "",
        "id": "q1055",
        "input": "python playsound stop sound",
        "output": "",
        "rule": [
            "d1055"
        ]
    },
    {
        "instruction": "",
        "id": "q1056",
        "input": "how to get array's minimum in python",
        "output": "",
        "rule": [
            "d1056"
        ]
    },
    {
        "instruction": "",
        "id": "q1057",
        "input": "python plt dynamic render a image",
        "output": "",
        "rule": [
            "d1057"
        ]
    },
    {
        "instruction": "",
        "id": "q1058",
        "input": "how to get average python for loop",
        "output": "",
        "rule": [
            "d1058"
        ]
    },
    {
        "instruction": "",
        "id": "q1059",
        "input": "python polar coordinates to vector",
        "output": "",
        "rule": [
            "d1059"
        ]
    },
    {
        "instruction": "",
        "id": "q1060",
        "input": "how to get certain columns from tables python",
        "output": "",
        "rule": [
            "d1060"
        ]
    },
    {
        "instruction": "",
        "id": "q1061",
        "input": "python pool map async",
        "output": "",
        "rule": [
            "d1061"
        ]
    },
    {
        "instruction": "",
        "id": "q1062",
        "input": "how to get column names of a data frame python",
        "output": "",
        "rule": [
            "d1062"
        ]
    },
    {
        "instruction": "",
        "id": "q1063",
        "input": "python popen kill process tree",
        "output": "",
        "rule": [
            "d1063"
        ]
    },
    {
        "instruction": "",
        "id": "q1064",
        "input": "how to get column names of df in python",
        "output": "",
        "rule": [
            "d1064"
        ]
    },
    {
        "instruction": "",
        "id": "q1065",
        "input": "python pos and mat to draw a cube",
        "output": "",
        "rule": [
            "d1065"
        ]
    },
    {
        "instruction": "",
        "id": "q1066",
        "input": "how to get combobox to call method from selected value python",
        "output": "",
        "rule": [
            "d1066"
        ]
    },
    {
        "instruction": "",
        "id": "q1067",
        "input": "python postfix expression calculator",
        "output": "",
        "rule": [
            "d1067"
        ]
    },
    {
        "instruction": "",
        "id": "q1068",
        "input": "how to get data using phantomjs and python",
        "output": "",
        "rule": [
            "d1068"
        ]
    },
    {
        "instruction": "",
        "id": "q1069",
        "input": "python print contents of oredereddict",
        "output": "",
        "rule": [
            "d1069"
        ]
    },
    {
        "instruction": "",
        "id": "q1070",
        "input": "how to get dimension from python list",
        "output": "",
        "rule": [
            "d1070"
        ]
    },
    {
        "instruction": "",
        "id": "q1071",
        "input": "python print custom type to string",
        "output": "",
        "rule": [
            "d1071"
        ]
    },
    {
        "instruction": "",
        "id": "q1072",
        "input": "how to get elements of a list python slice",
        "output": "",
        "rule": [
            "d1072"
        ]
    },
    {
        "instruction": "",
        "id": "q1073",
        "input": "python print formatting in fixed length",
        "output": "",
        "rule": [
            "d1073"
        ]
    },
    {
        "instruction": "",
        "id": "q1074",
        "input": "how to get end quarter dates in python",
        "output": "",
        "rule": [
            "d1074"
        ]
    },
    {
        "instruction": "",
        "id": "q1075",
        "input": "python print full traceback",
        "output": "",
        "rule": [
            "d1075"
        ]
    },
    {
        "instruction": "",
        "id": "q1076",
        "input": "how to get function help in python",
        "output": "",
        "rule": [
            "d1076"
        ]
    },
    {
        "instruction": "",
        "id": "q1077",
        "input": "python print killed on the screeen",
        "output": "",
        "rule": [
            "d1077"
        ]
    },
    {
        "instruction": "",
        "id": "q1078",
        "input": "how to get git to work in python",
        "output": "",
        "rule": [
            "d1078"
        ]
    },
    {
        "instruction": "",
        "id": "q1079",
        "input": "python print object to file",
        "output": "",
        "rule": [
            "d1079"
        ]
    },
    {
        "instruction": "",
        "id": "q1080",
        "input": "how to get keys of a table along with values in python",
        "output": "",
        "rule": [
            "d1080"
        ]
    },
    {
        "instruction": "",
        "id": "q1081",
        "input": "python print object to string",
        "output": "",
        "rule": [
            "d1081"
        ]
    },
    {
        "instruction": "",
        "id": "q1082",
        "input": "how to get length of file contents using python function",
        "output": "",
        "rule": [
            "d1082"
        ]
    },
    {
        "instruction": "",
        "id": "q1083",
        "input": "python print the object",
        "output": "",
        "rule": [
            "d1083"
        ]
    },
    {
        "instruction": "",
        "id": "q1084",
        "input": "how to get microseconds in python",
        "output": "",
        "rule": [
            "d1084"
        ]
    },
    {
        "instruction": "",
        "id": "q1085",
        "input": "python prints characters from buffer after script is run",
        "output": "",
        "rule": [
            "d1085"
        ]
    },
    {
        "instruction": "",
        "id": "q1086",
        "input": "how to get most common value in list python",
        "output": "",
        "rule": [
            "d1086"
        ]
    },
    {
        "instruction": "",
        "id": "q1087",
        "input": "python process join doesn't return",
        "output": "",
        "rule": [
            "d1087"
        ]
    },
    {
        "instruction": "",
        "id": "q1088",
        "input": "how to get multiple matches on a regex python",
        "output": "",
        "rule": [
            "d1088"
        ]
    },
    {
        "instruction": "",
        "id": "q1089",
        "input": "python property within a property",
        "output": "",
        "rule": [
            "d1089"
        ]
    },
    {
        "instruction": "",
        "id": "q1090",
        "input": "how to get number of lines of a file python",
        "output": "",
        "rule": [
            "d1090"
        ]
    },
    {
        "instruction": "",
        "id": "q1091",
        "input": "python public proxy list",
        "output": "",
        "rule": [
            "d1091"
        ]
    },
    {
        "instruction": "",
        "id": "q1092",
        "input": "how to get points in python",
        "output": "",
        "rule": [
            "d1092"
        ]
    },
    {
        "instruction": "",
        "id": "q1093",
        "input": "python pylint disable unused",
        "output": "",
        "rule": [
            "d1093"
        ]
    },
    {
        "instruction": "",
        "id": "q1094",
        "input": "how to get real quantum random values python",
        "output": "",
        "rule": [
            "d1094"
        ]
    },
    {
        "instruction": "",
        "id": "q1095",
        "input": "python pyodbc delete table function",
        "output": "",
        "rule": [
            "d1095"
        ]
    },
    {
        "instruction": "",
        "id": "q1096",
        "input": "how to get rid of the space in between the word and punctuation in python",
        "output": "",
        "rule": [
            "d1096"
        ]
    },
    {
        "instruction": "",
        "id": "q1097",
        "input": "python pysftp put file on server chmod",
        "output": "",
        "rule": [
            "d1097"
        ]
    },
    {
        "instruction": "",
        "id": "q1098",
        "input": "how to get segment of array at a time in python",
        "output": "",
        "rule": [
            "d1098"
        ]
    },
    {
        "instruction": "",
        "id": "q1099",
        "input": "python pytest test as though called from command line",
        "output": "",
        "rule": [
            "d1099"
        ]
    },
    {
        "instruction": "",
        "id": "q1100",
        "input": "how to get specific column from dmatrix python",
        "output": "",
        "rule": [
            "d1100"
        ]
    },
    {
        "instruction": "",
        "id": "q1101",
        "input": "python qcheckbox ischecked false",
        "output": "",
        "rule": [
            "d1101"
        ]
    },
    {
        "instruction": "",
        "id": "q1102",
        "input": "how to get subplotunder xis python",
        "output": "",
        "rule": [
            "d1102"
        ]
    },
    {
        "instruction": "",
        "id": "q1103",
        "input": "python qgraphicsview resizeevent firinview",
        "output": "",
        "rule": [
            "d1103"
        ]
    },
    {
        "instruction": "",
        "id": "q1104",
        "input": "how to get summary of table in python",
        "output": "",
        "rule": [
            "d1104"
        ]
    },
    {
        "instruction": "",
        "id": "q1105",
        "input": "python query socket state",
        "output": "",
        "rule": [
            "d1105"
        ]
    },
    {
        "instruction": "",
        "id": "q1106",
        "input": "how to get swagger on flask python",
        "output": "",
        "rule": [
            "d1106"
        ]
    },
    {
        "instruction": "",
        "id": "q1107",
        "input": "python queue count consumed items",
        "output": "",
        "rule": [
            "d1107"
        ]
    },
    {
        "instruction": "",
        "id": "q1108",
        "input": "how to get tables from sqlite database python",
        "output": "",
        "rule": [
            "d1108"
        ]
    },
    {
        "instruction": "",
        "id": "q1109",
        "input": "python quickest way get rid of duplicates in a list",
        "output": "",
        "rule": [
            "d1109"
        ]
    },
    {
        "instruction": "",
        "id": "q1110",
        "input": "how to get the directory path in python",
        "output": "",
        "rule": [
            "d1110"
        ]
    },
    {
        "instruction": "",
        "id": "q1111",
        "input": "python quickfix timestamp with microseconds",
        "output": "",
        "rule": [
            "d1111"
        ]
    },
    {
        "instruction": "",
        "id": "q1112",
        "input": "how to get the filename of a file in python",
        "output": "",
        "rule": [
            "d1112"
        ]
    },
    {
        "instruction": "",
        "id": "q1113",
        "input": "python quit from outside function",
        "output": "",
        "rule": [
            "d1113"
        ]
    },
    {
        "instruction": "",
        "id": "q1114",
        "input": "how to get the index of something in a list python",
        "output": "",
        "rule": [
            "d1114"
        ]
    },
    {
        "instruction": "",
        "id": "q1115",
        "input": "python rabbitmq connection refused",
        "output": "",
        "rule": [
            "d1115"
        ]
    },
    {
        "instruction": "",
        "id": "q1116",
        "input": "how to get the index of the element in a list python",
        "output": "",
        "rule": [
            "d1116"
        ]
    },
    {
        "instruction": "",
        "id": "q1117",
        "input": "python random gen normal distribution",
        "output": "",
        "rule": [
            "d1117"
        ]
    },
    {
        "instruction": "",
        "id": "q1118",
        "input": "how to get the maximum number of core in a machine using python",
        "output": "",
        "rule": [
            "d1118"
        ]
    },
    {
        "instruction": "",
        "id": "q1119",
        "input": "how to get the most recent file from a list python",
        "output": "",
        "rule": [
            "d1119"
        ]
    },
    {
        "instruction": "",
        "id": "q1120",
        "input": "python random uniform points with random coordinates",
        "output": "",
        "rule": [
            "d1120"
        ]
    },
    {
        "instruction": "",
        "id": "q1121",
        "input": "how to get the python path",
        "output": "",
        "rule": [
            "d1121"
        ]
    },
    {
        "instruction": "",
        "id": "q1122",
        "input": "python raw strings single quote",
        "output": "",
        "rule": [
            "d1122"
        ]
    },
    {
        "instruction": "",
        "id": "q1123",
        "input": "how to get time of output in python",
        "output": "",
        "rule": [
            "d1123"
        ]
    },
    {
        "instruction": "",
        "id": "q1124",
        "input": "python read bytes in a file",
        "output": "",
        "rule": [
            "d1124"
        ]
    },
    {
        "instruction": "",
        "id": "q1125",
        "input": "how to get toolbar on python",
        "output": "",
        "rule": [
            "d1125"
        ]
    },
    {
        "instruction": "",
        "id": "q1126",
        "input": "python read csv as matrix",
        "output": "",
        "rule": [
            "d1126"
        ]
    },
    {
        "instruction": "",
        "id": "q1127",
        "input": "how to get user id of a process using python",
        "output": "",
        "rule": [
            "d1127"
        ]
    },
    {
        "instruction": "",
        "id": "q1128",
        "input": "python read document and remove line breaks",
        "output": "",
        "rule": [
            "d1128"
        ]
    },
    {
        "instruction": "",
        "id": "q1129",
        "input": "how to get user name in python",
        "output": "",
        "rule": [
            "d1129"
        ]
    },
    {
        "instruction": "",
        "id": "q1130",
        "input": "python read file cache",
        "output": "",
        "rule": [
            "d1130"
        ]
    },
    {
        "instruction": "",
        "id": "q1131",
        "input": "how to get variable coefficients in python",
        "output": "",
        "rule": [
            "d1131"
        ]
    },
    {
        "instruction": "",
        "id": "q1132",
        "input": "python read file untill certain char",
        "output": "",
        "rule": [
            "d1132"
        ]
    },
    {
        "instruction": "",
        "id": "q1133",
        "input": "how to give object in tokenization in python 3",
        "output": "",
        "rule": [
            "d1133"
        ]
    },
    {
        "instruction": "",
        "id": "q1134",
        "input": "python read file with any encoding",
        "output": "",
        "rule": [
            "d1134"
        ]
    },
    {
        "instruction": "",
        "id": "q1135",
        "input": "how to handle the file paths in python",
        "output": "",
        "rule": [
            "d1135"
        ]
    },
    {
        "instruction": "",
        "id": "q1136",
        "input": "python read first line of a file to a string",
        "output": "",
        "rule": [
            "d1136"
        ]
    },
    {
        "instruction": "",
        "id": "q1137",
        "input": "how to hide python interactive windows",
        "output": "",
        "rule": [
            "d1137"
        ]
    },
    {
        "instruction": "",
        "id": "q1138",
        "input": "python read from stdin until eof",
        "output": "",
        "rule": [
            "d1138"
        ]
    },
    {
        "instruction": "",
        "id": "q1139",
        "input": "how to include an excel file in python",
        "output": "",
        "rule": [
            "d1139"
        ]
    },
    {
        "instruction": "",
        "id": "q1140",
        "input": "python read input non blocking",
        "output": "",
        "rule": [
            "d1140"
        ]
    },
    {
        "instruction": "",
        "id": "q1141",
        "input": "how to increase the text size in python",
        "output": "",
        "rule": [
            "d1141"
        ]
    },
    {
        "instruction": "",
        "id": "q1142",
        "input": "python read only file using json",
        "output": "",
        "rule": [
            "d1142"
        ]
    },
    {
        "instruction": "",
        "id": "q1143",
        "input": "how to index lines in a file python 2",
        "output": "",
        "rule": [
            "d1143"
        ]
    },
    {
        "instruction": "",
        "id": "q1144",
        "input": "python read only mode",
        "output": "",
        "rule": [
            "d1144"
        ]
    },
    {
        "instruction": "",
        "id": "q1145",
        "input": "how to insert underline in python",
        "output": "",
        "rule": [
            "d1145"
        ]
    },
    {
        "instruction": "",
        "id": "q1146",
        "input": "python read raw txt from url",
        "output": "",
        "rule": [
            "d1146"
        ]
    },
    {
        "instruction": "",
        "id": "q1147",
        "input": "how to interpolate raster using gdal python",
        "output": "",
        "rule": [
            "d1147"
        ]
    },
    {
        "instruction": "",
        "id": "q1148",
        "input": "python reading a yaml config file",
        "output": "",
        "rule": [
            "d1148"
        ]
    },
    {
        "instruction": "",
        "id": "q1149",
        "input": "how to invert a dct in one line python",
        "output": "",
        "rule": [
            "d1149"
        ]
    },
    {
        "instruction": "",
        "id": "q1150",
        "input": "python recommended way to check empty string",
        "output": "",
        "rule": [
            "d1150"
        ]
    },
    {
        "instruction": "",
        "id": "q1151",
        "input": "how to iterate over a json file in python",
        "output": "",
        "rule": [
            "d1151"
        ]
    },
    {
        "instruction": "",
        "id": "q1152",
        "input": "python record mouse movement",
        "output": "",
        "rule": [
            "d1152"
        ]
    },
    {
        "instruction": "",
        "id": "q1153",
        "input": "how to know the type of a python variable",
        "output": "",
        "rule": [
            "d1153"
        ]
    },
    {
        "instruction": "",
        "id": "q1154",
        "input": "python redis conncurent lock",
        "output": "",
        "rule": [
            "d1154"
        ]
    },
    {
        "instruction": "",
        "id": "q1155",
        "input": "how to learn python if i know java",
        "output": "",
        "rule": [
            "d1155"
        ]
    },
    {
        "instruction": "",
        "id": "q1156",
        "input": "python redis hmset expire",
        "output": "",
        "rule": [
            "d1156"
        ]
    },
    {
        "instruction": "",
        "id": "q1157",
        "input": "how to list out python native functions",
        "output": "",
        "rule": [
            "d1157"
        ]
    },
    {
        "instruction": "",
        "id": "q1158",
        "input": "python reference to parent object",
        "output": "",
        "rule": [
            "d1158"
        ]
    },
    {
        "instruction": "",
        "id": "q1159",
        "input": "how to load a image on opengl python",
        "output": "",
        "rule": [
            "d1159"
        ]
    },
    {
        "instruction": "",
        "id": "q1160",
        "input": "python refrence print formatting in a list",
        "output": "",
        "rule": [
            "d1160"
        ]
    },
    {
        "instruction": "",
        "id": "q1161",
        "input": "how to load a text file line by line in python",
        "output": "",
        "rule": [
            "d1161"
        ]
    },
    {
        "instruction": "",
        "id": "q1162",
        "input": "python regex finditer example",
        "output": "",
        "rule": [
            "d1162"
        ]
    },
    {
        "instruction": "",
        "id": "q1163",
        "input": "how to make a binary tree in python",
        "output": "",
        "rule": [
            "d1163"
        ]
    },
    {
        "instruction": "",
        "id": "q1164",
        "input": "python regex validity check",
        "output": "",
        "rule": [
            "d1164"
        ]
    },
    {
        "instruction": "",
        "id": "q1165",
        "input": "how to make a clone of something in python",
        "output": "",
        "rule": [
            "d1165"
        ]
    },
    {
        "instruction": "",
        "id": "q1166",
        "input": "python regression with constraint",
        "output": "",
        "rule": [
            "d1166"
        ]
    },
    {
        "instruction": "",
        "id": "q1167",
        "input": "how to make a column a comma separated list in python",
        "output": "",
        "rule": [
            "d1167"
        ]
    },
    {
        "instruction": "",
        "id": "q1168",
        "input": "python reindex to multindex",
        "output": "",
        "rule": [
            "d1168"
        ]
    },
    {
        "instruction": "",
        "id": "q1169",
        "input": "how to make a custom messagebox python tkinter",
        "output": "",
        "rule": [
            "d1169"
        ]
    },
    {
        "instruction": "",
        "id": "q1170",
        "input": "python reindexing only valid with uniquely valued index objects",
        "output": "",
        "rule": [
            "d1170"
        ]
    },
    {
        "instruction": "",
        "id": "q1171",
        "input": "how to make a list not case sensitive in python",
        "output": "",
        "rule": [
            "d1171"
        ]
    },
    {
        "instruction": "",
        "id": "q1172",
        "input": "python reload page drop down",
        "output": "",
        "rule": [
            "d1172"
        ]
    },
    {
        "instruction": "",
        "id": "q1173",
        "input": "how to make a list the coloumn names for an sql in python",
        "output": "",
        "rule": [
            "d1173"
        ]
    },
    {
        "instruction": "",
        "id": "q1174",
        "input": "python remove a list of keyes from dict",
        "output": "",
        "rule": [
            "d1174"
        ]
    },
    {
        "instruction": "",
        "id": "q1175",
        "input": "how to make a list words out sentence in python",
        "output": "",
        "rule": [
            "d1175"
        ]
    },
    {
        "instruction": "",
        "id": "q1176",
        "input": "python remove all tab and whitespace",
        "output": "",
        "rule": [
            "d1176"
        ]
    },
    {
        "instruction": "",
        "id": "q1177",
        "input": "how to make a neat table in python",
        "output": "",
        "rule": [
            "d1177"
        ]
    },
    {
        "instruction": "",
        "id": "q1178",
        "input": "python remove all zeros from list",
        "output": "",
        "rule": [
            "d1178"
        ]
    },
    {
        "instruction": "",
        "id": "q1179",
        "input": "how to make a python print go to the next line",
        "output": "",
        "rule": [
            "d1179"
        ]
    },
    {
        "instruction": "",
        "id": "q1180",
        "input": "python remove colored output from shell",
        "output": "",
        "rule": [
            "d1180"
        ]
    },
    {
        "instruction": "",
        "id": "q1181",
        "input": "how to make a smaller sphere in python",
        "output": "",
        "rule": [
            "d1181"
        ]
    },
    {
        "instruction": "",
        "id": "q1182",
        "input": "python remove dict values based",
        "output": "",
        "rule": [
            "d1182"
        ]
    },
    {
        "instruction": "",
        "id": "q1183",
        "input": "how to make a square plot in python aspect ratio",
        "output": "",
        "rule": [
            "d1183"
        ]
    },
    {
        "instruction": "",
        "id": "q1184",
        "input": "how to make a string full caps with python",
        "output": "",
        "rule": [
            "d1184"
        ]
    },
    {
        "instruction": "",
        "id": "q1185",
        "input": "python remove every other item in list",
        "output": "",
        "rule": [
            "d1185"
        ]
    },
    {
        "instruction": "",
        "id": "q1186",
        "input": "how to make a string that removes vowels in python",
        "output": "",
        "rule": [
            "d1186"
        ]
    },
    {
        "instruction": "",
        "id": "q1187",
        "input": "python remove first n itrems from list",
        "output": "",
        "rule": [
            "d1187"
        ]
    },
    {
        "instruction": "",
        "id": "q1188",
        "input": "how to make a submit button in html run python",
        "output": "",
        "rule": [
            "d1188"
        ]
    },
    {
        "instruction": "",
        "id": "q1189",
        "input": "python remove folder recursively",
        "output": "",
        "rule": [
            "d1189"
        ]
    },
    {
        "instruction": "",
        "id": "q1190",
        "input": "how to make all elements in array as list elements python",
        "output": "",
        "rule": [
            "d1190"
        ]
    },
    {
        "instruction": "",
        "id": "q1191",
        "input": "python remove key from dictionary if key value",
        "output": "",
        "rule": [
            "d1191"
        ]
    },
    {
        "instruction": "",
        "id": "q1192",
        "input": "how to make an ellipse in python",
        "output": "",
        "rule": [
            "d1192"
        ]
    },
    {
        "instruction": "",
        "id": "q1193",
        "input": "python remove none dict value",
        "output": "",
        "rule": [
            "d1193"
        ]
    },
    {
        "instruction": "",
        "id": "q1194",
        "input": "how to make black background for python",
        "output": "",
        "rule": [
            "d1194"
        ]
    },
    {
        "instruction": "",
        "id": "q1195",
        "input": "python remove the ith element",
        "output": "",
        "rule": [
            "d1195"
        ]
    },
    {
        "instruction": "",
        "id": "q1196",
        "input": "how to make boolean column python based on several criteria",
        "output": "",
        "rule": [
            "d1196"
        ]
    },
    {
        "instruction": "",
        "id": "q1197",
        "input": "python removing accents from words",
        "output": "",
        "rule": [
            "d1197"
        ]
    },
    {
        "instruction": "",
        "id": "q1198",
        "input": "how to make booleans in python global",
        "output": "",
        "rule": [
            "d1198"
        ]
    },
    {
        "instruction": "",
        "id": "q1199",
        "input": "python replace a pattern regex iterative",
        "output": "",
        "rule": [
            "d1199"
        ]
    },
    {
        "instruction": "",
        "id": "q1200",
        "input": "how to make centered text in python",
        "output": "",
        "rule": [
            "d1200"
        ]
    },
    {
        "instruction": "",
        "id": "q1201",
        "input": "python replace dos slash with unix slash",
        "output": "",
        "rule": [
            "d1201"
        ]
    },
    {
        "instruction": "",
        "id": "q1202",
        "input": "how to make multiple slices in a list in python",
        "output": "",
        "rule": [
            "d1202"
        ]
    },
    {
        "instruction": "",
        "id": "q1203",
        "input": "python replace text between two strings",
        "output": "",
        "rule": [
            "d1203"
        ]
    },
    {
        "instruction": "",
        "id": "q1204",
        "input": "how to make python generate relations",
        "output": "",
        "rule": [
            "d1204"
        ]
    },
    {
        "instruction": "",
        "id": "q1205",
        "input": "python replacing value with nan conditionally",
        "output": "",
        "rule": [
            "d1205"
        ]
    },
    {
        "instruction": "",
        "id": "q1206",
        "input": "how to make python print different colors in command line",
        "output": "",
        "rule": [
            "d1206"
        ]
    },
    {
        "instruction": "",
        "id": "q1207",
        "input": "python request get json type response",
        "output": "",
        "rule": [
            "d1207"
        ]
    },
    {
        "instruction": "",
        "id": "q1208",
        "input": "how to make python print in one line",
        "output": "",
        "rule": [
            "d1208"
        ]
    },
    {
        "instruction": "",
        "id": "q1209",
        "input": "python request user agent chrome",
        "output": "",
        "rule": [
            "d1209"
        ]
    },
    {
        "instruction": "",
        "id": "q1210",
        "input": "how to make python print something to a printer",
        "output": "",
        "rule": [
            "d1210"
        ]
    },
    {
        "instruction": "",
        "id": "q1211",
        "input": "python requests save session for future use",
        "output": "",
        "rule": [
            "d1211"
        ]
    },
    {
        "instruction": "",
        "id": "q1212",
        "input": "how to make python round a float to int",
        "output": "",
        "rule": [
            "d1212"
        ]
    },
    {
        "instruction": "",
        "id": "q1213",
        "input": "python requests see if port open",
        "output": "",
        "rule": [
            "d1213"
        ]
    },
    {
        "instruction": "",
        "id": "q1214",
        "input": "how to make python unittest discoverable",
        "output": "",
        "rule": [
            "d1214"
        ]
    },
    {
        "instruction": "",
        "id": "q1215",
        "input": "python requests set request encoding",
        "output": "",
        "rule": [
            "d1215"
        ]
    },
    {
        "instruction": "",
        "id": "q1216",
        "input": "how to make sentence to list of words python",
        "output": "",
        "rule": [
            "d1216"
        ]
    },
    {
        "instruction": "",
        "id": "q1217",
        "input": "python reset or clear plot",
        "output": "",
        "rule": [
            "d1217"
        ]
    },
    {
        "instruction": "",
        "id": "q1218",
        "input": "how to make something follow the mouse python",
        "output": "",
        "rule": [
            "d1218"
        ]
    },
    {
        "instruction": "",
        "id": "q1219",
        "input": "python resize array with none",
        "output": "",
        "rule": [
            "d1219"
        ]
    },
    {
        "instruction": "",
        "id": "q1220",
        "input": "how to make special method for print python",
        "output": "",
        "rule": [
            "d1220"
        ]
    },
    {
        "instruction": "",
        "id": "q1221",
        "input": "python response raise for status",
        "output": "",
        "rule": [
            "d1221"
        ]
    },
    {
        "instruction": "",
        "id": "q1222",
        "input": "how to make the cursor disappear on python",
        "output": "",
        "rule": [
            "d1222"
        ]
    },
    {
        "instruction": "",
        "id": "q1223",
        "input": "python response to text",
        "output": "",
        "rule": [
            "d1223"
        ]
    },
    {
        "instruction": "",
        "id": "q1224",
        "input": "how to make username and password login on python",
        "output": "",
        "rule": [
            "d1224"
        ]
    },
    {
        "instruction": "",
        "id": "q1225",
        "input": "python rest docstring for kwargs",
        "output": "",
        "rule": [
            "d1225"
        ]
    },
    {
        "instruction": "",
        "id": "q1226",
        "input": "how to make variables case insensitive in python",
        "output": "",
        "rule": [
            "d1226"
        ]
    },
    {
        "instruction": "",
        "id": "q1227",
        "input": "python rest self document",
        "output": "",
        "rule": [
            "d1227"
        ]
    },
    {
        "instruction": "",
        "id": "q1228",
        "input": "how to mass de indent python",
        "output": "",
        "rule": [
            "d1228"
        ]
    },
    {
        "instruction": "",
        "id": "q1229",
        "input": "python retrieve keys in orer",
        "output": "",
        "rule": [
            "d1229"
        ]
    },
    {
        "instruction": "",
        "id": "q1230",
        "input": "how to mimick a post request in python",
        "output": "",
        "rule": [
            "d1230"
        ]
    },
    {
        "instruction": "",
        "id": "q1231",
        "input": "python return elements of index range",
        "output": "",
        "rule": [
            "d1231"
        ]
    },
    {
        "instruction": "",
        "id": "q1232",
        "input": "how to move cursor to previous line in python",
        "output": "",
        "rule": [
            "d1232"
        ]
    },
    {
        "instruction": "",
        "id": "q1233",
        "input": "python return index of start of continuous variable",
        "output": "",
        "rule": [
            "d1233"
        ]
    },
    {
        "instruction": "",
        "id": "q1234",
        "input": "how to only return unique values in a python list",
        "output": "",
        "rule": [
            "d1234"
        ]
    },
    {
        "instruction": "",
        "id": "q1235",
        "input": "python return length of a vector",
        "output": "",
        "rule": [
            "d1235"
        ]
    },
    {
        "instruction": "",
        "id": "q1236",
        "input": "how to open a file from a path in python",
        "output": "",
        "rule": [
            "d1236"
        ]
    },
    {
        "instruction": "",
        "id": "q1237",
        "input": "python return regex match groups as tuple",
        "output": "",
        "rule": [
            "d1237"
        ]
    },
    {
        "instruction": "",
        "id": "q1238",
        "input": "how to open a sql file with python",
        "output": "",
        "rule": [
            "d1238"
        ]
    },
    {
        "instruction": "",
        "id": "q1239",
        "input": "python return shapes ofarrays",
        "output": "",
        "rule": [
            "d1239"
        ]
    },
    {
        "instruction": "",
        "id": "q1240",
        "input": "how to open s3 uri python",
        "output": "",
        "rule": [
            "d1240"
        ]
    },
    {
        "instruction": "",
        "id": "q1241",
        "input": "python return strings that match a regexp",
        "output": "",
        "rule": [
            "d1241"
        ]
    },
    {
        "instruction": "",
        "id": "q1242",
        "input": "how to opena and check the contents of file in python using load and pickle",
        "output": "",
        "rule": [
            "d1242"
        ]
    },
    {
        "instruction": "",
        "id": "q1243",
        "input": "python return the value of a key in a dictionary",
        "output": "",
        "rule": [
            "d1243"
        ]
    },
    {
        "instruction": "",
        "id": "q1244",
        "input": "how to overlay normal dist on histogram python",
        "output": "",
        "rule": [
            "d1244"
        ]
    },
    {
        "instruction": "",
        "id": "q1245",
        "input": "python returning a pdf",
        "output": "",
        "rule": [
            "d1245"
        ]
    },
    {
        "instruction": "",
        "id": "q1246",
        "input": "how to parse proto python",
        "output": "",
        "rule": [
            "d1246"
        ]
    },
    {
        "instruction": "",
        "id": "q1247",
        "input": "python round down np",
        "output": "",
        "rule": [
            "d1247"
        ]
    },
    {
        "instruction": "",
        "id": "q1248",
        "input": "how to pass an arguement between functions python",
        "output": "",
        "rule": [
            "d1248"
        ]
    },
    {
        "instruction": "",
        "id": "q1249",
        "input": "python round to another significant digit",
        "output": "",
        "rule": [
            "d1249"
        ]
    },
    {
        "instruction": "",
        "id": "q1250",
        "input": "how to pass encoding with open in python",
        "output": "",
        "rule": [
            "d1250"
        ]
    },
    {
        "instruction": "",
        "id": "q1251",
        "input": "python run command after exit",
        "output": "",
        "rule": [
            "d1251"
        ]
    },
    {
        "instruction": "",
        "id": "q1252",
        "input": "how to perform outer join python",
        "output": "",
        "rule": [
            "d1252"
        ]
    },
    {
        "instruction": "",
        "id": "q1253",
        "input": "python run task async while returning first a value",
        "output": "",
        "rule": [
            "d1253"
        ]
    },
    {
        "instruction": "",
        "id": "q1254",
        "input": "how to place text in a matplotlib plot in python without knowing scales",
        "output": "",
        "rule": [
            "d1254"
        ]
    },
    {
        "instruction": "",
        "id": "q1255",
        "input": "python safe html output",
        "output": "",
        "rule": [
            "d1255"
        ]
    },
    {
        "instruction": "",
        "id": "q1256",
        "input": "how to post with requests in python",
        "output": "",
        "rule": [
            "d1256"
        ]
    },
    {
        "instruction": "",
        "id": "q1257",
        "input": "python save plot as svg",
        "output": "",
        "rule": [
            "d1257"
        ]
    },
    {
        "instruction": "",
        "id": "q1258",
        "input": "how to print an error message in python for inputs",
        "output": "",
        "rule": [
            "d1258"
        ]
    },
    {
        "instruction": "",
        "id": "q1259",
        "input": "python save plot but dont show it",
        "output": "",
        "rule": [
            "d1259"
        ]
    },
    {
        "instruction": "",
        "id": "q1260",
        "input": "how to print first 20 lines in file handling python",
        "output": "",
        "rule": [
            "d1260"
        ]
    },
    {
        "instruction": "",
        "id": "q1261",
        "input": "python save session to file",
        "output": "",
        "rule": [
            "d1261"
        ]
    },
    {
        "instruction": "",
        "id": "q1262",
        "input": "how to print out only certain letters in a string python",
        "output": "",
        "rule": [
            "d1262"
        ]
    },
    {
        "instruction": "",
        "id": "q1263",
        "input": "python saving object in session",
        "output": "",
        "rule": [
            "d1263"
        ]
    },
    {
        "instruction": "",
        "id": "q1264",
        "input": "how to print python 3 traceback object",
        "output": "",
        "rule": [
            "d1264"
        ]
    },
    {
        "instruction": "",
        "id": "q1265",
        "input": "python scipy convolution 2d with stride 2",
        "output": "",
        "rule": [
            "d1265"
        ]
    },
    {
        "instruction": "",
        "id": "q1266",
        "input": "how to print the name of a key in python",
        "output": "",
        "rule": [
            "d1266"
        ]
    },
    {
        "instruction": "",
        "id": "q1267",
        "input": "python scipy sparse matrix",
        "output": "",
        "rule": [
            "d1267"
        ]
    },
    {
        "instruction": "",
        "id": "q1268",
        "input": "how to print without starting a new line in python",
        "output": "",
        "rule": [
            "d1268"
        ]
    },
    {
        "instruction": "",
        "id": "q1269",
        "input": "python scipy sparse matrix product",
        "output": "",
        "rule": [
            "d1269"
        ]
    },
    {
        "instruction": "",
        "id": "q1270",
        "input": "how to printout behave python std out",
        "output": "",
        "rule": [
            "d1270"
        ]
    },
    {
        "instruction": "",
        "id": "q1271",
        "input": "python scipy wav write",
        "output": "",
        "rule": [
            "d1271"
        ]
    },
    {
        "instruction": "",
        "id": "q1272",
        "input": "how to pull a dictionary from inside a string python",
        "output": "",
        "rule": [
            "d1272"
        ]
    },
    {
        "instruction": "",
        "id": "q1273",
        "input": "python scrape requests beautifulsoup urllib",
        "output": "",
        "rule": [
            "d1273"
        ]
    },
    {
        "instruction": "",
        "id": "q1274",
        "input": "how to pull functions from definitions python",
        "output": "",
        "rule": [
            "d1274"
        ]
    },
    {
        "instruction": "",
        "id": "q1275",
        "input": "python scroll to element",
        "output": "",
        "rule": [
            "d1275"
        ]
    },
    {
        "instruction": "",
        "id": "q1276",
        "input": "how to push two objects on a stack in python",
        "output": "",
        "rule": [
            "d1276"
        ]
    },
    {
        "instruction": "",
        "id": "q1277",
        "input": "python scrolling tkinter canvas",
        "output": "",
        "rule": [
            "d1277"
        ]
    },
    {
        "instruction": "",
        "id": "q1278",
        "input": "how to put a bash command in a python script",
        "output": "",
        "rule": [
            "d1278"
        ]
    },
    {
        "instruction": "",
        "id": "q1279",
        "input": "python see if stdin",
        "output": "",
        "rule": [
            "d1279"
        ]
    },
    {
        "instruction": "",
        "id": "q1280",
        "input": "how to put a hashtag on python lines",
        "output": "",
        "rule": [
            "d1280"
        ]
    },
    {
        "instruction": "",
        "id": "q1281",
        "input": "python select a column based on a condition",
        "output": "",
        "rule": [
            "d1281"
        ]
    },
    {
        "instruction": "",
        "id": "q1282",
        "input": "how to put a process in background python",
        "output": "",
        "rule": [
            "d1282"
        ]
    },
    {
        "instruction": "",
        "id": "q1283",
        "input": "python select columns with condition",
        "output": "",
        "rule": [
            "d1283"
        ]
    },
    {
        "instruction": "",
        "id": "q1284",
        "input": "how to put javascript variable into python",
        "output": "",
        "rule": [
            "d1284"
        ]
    },
    {
        "instruction": "",
        "id": "q1285",
        "input": "python select conditional rows based on column value",
        "output": "",
        "rule": [
            "d1285"
        ]
    },
    {
        "instruction": "",
        "id": "q1286",
        "input": "how to put percentage in python",
        "output": "",
        "rule": [
            "d1286"
        ]
    },
    {
        "instruction": "",
        "id": "q1287",
        "input": "python select folder dialog",
        "output": "",
        "rule": [
            "d1287"
        ]
    },
    {
        "instruction": "",
        "id": "q1288",
        "input": "how to read dicom image in python",
        "output": "",
        "rule": [
            "d1288"
        ]
    },
    {
        "instruction": "",
        "id": "q1289",
        "input": "python select greater of two values",
        "output": "",
        "rule": [
            "d1289"
        ]
    },
    {
        "instruction": "",
        "id": "q1290",
        "input": "how to read file with uft8 in python",
        "output": "",
        "rule": [
            "d1290"
        ]
    },
    {
        "instruction": "",
        "id": "q1291",
        "input": "python select non null rows",
        "output": "",
        "rule": [
            "d1291"
        ]
    },
    {
        "instruction": "",
        "id": "q1292",
        "input": "how to read in a yml file python",
        "output": "",
        "rule": [
            "d1292"
        ]
    },
    {
        "instruction": "",
        "id": "q1293",
        "input": "python select rows with no null",
        "output": "",
        "rule": [
            "d1293"
        ]
    },
    {
        "instruction": "",
        "id": "q1294",
        "input": "how to read the first number in a string in python",
        "output": "",
        "rule": [
            "d1294"
        ]
    },
    {
        "instruction": "",
        "id": "q1295",
        "input": "python select the row of ids that match the ids in a list",
        "output": "",
        "rule": [
            "d1295"
        ]
    },
    {
        "instruction": "",
        "id": "q1296",
        "input": "how to read yaml file from python",
        "output": "",
        "rule": [
            "d1296"
        ]
    },
    {
        "instruction": "",
        "id": "q1297",
        "input": "python self id double underscore",
        "output": "",
        "rule": [
            "d1297"
        ]
    },
    {
        "instruction": "",
        "id": "q1298",
        "input": "how to refresh the window in python maya",
        "output": "",
        "rule": [
            "d1298"
        ]
    },
    {
        "instruction": "",
        "id": "q1299",
        "input": "python serial readline has a delay",
        "output": "",
        "rule": [
            "d1299"
        ]
    },
    {
        "instruction": "",
        "id": "q1300",
        "input": "how to remove a black border from an image python",
        "output": "",
        "rule": [
            "d1300"
        ]
    },
    {
        "instruction": "",
        "id": "q1301",
        "input": "python series remove last value",
        "output": "",
        "rule": [
            "d1301"
        ]
    },
    {
        "instruction": "",
        "id": "q1302",
        "input": "how to remove columns by name in python",
        "output": "",
        "rule": [
            "d1302"
        ]
    },
    {
        "instruction": "",
        "id": "q1303",
        "input": "python server side detext request headers",
        "output": "",
        "rule": [
            "d1303"
        ]
    },
    {
        "instruction": "",
        "id": "q1304",
        "input": "how to remove object out of list in python",
        "output": "",
        "rule": [
            "d1304"
        ]
    },
    {
        "instruction": "",
        "id": "q1305",
        "input": "python session cookie save",
        "output": "",
        "rule": [
            "d1305"
        ]
    },
    {
        "instruction": "",
        "id": "q1306",
        "input": "how to remove signatures in emails, in python",
        "output": "",
        "rule": [
            "d1306"
        ]
    },
    {
        "instruction": "",
        "id": "q1307",
        "input": "python set file mtime",
        "output": "",
        "rule": [
            "d1307"
        ]
    },
    {
        "instruction": "",
        "id": "q1308",
        "input": "how to remove stop words in python without ntlk",
        "output": "",
        "rule": [
            "d1308"
        ]
    },
    {
        "instruction": "",
        "id": "q1309",
        "input": "python set global variable from variable name",
        "output": "",
        "rule": [
            "d1309"
        ]
    },
    {
        "instruction": "",
        "id": "q1310",
        "input": "how to remove table fields in python",
        "output": "",
        "rule": [
            "d1310"
        ]
    },
    {
        "instruction": "",
        "id": "q1311",
        "input": "python set last element",
        "output": "",
        "rule": [
            "d1311"
        ]
    },
    {
        "instruction": "",
        "id": "q1312",
        "input": "how to remove the axis from the graph by python",
        "output": "",
        "rule": [
            "d1312"
        ]
    },
    {
        "instruction": "",
        "id": "q1313",
        "input": "python set loglevel with a variable",
        "output": "",
        "rule": [
            "d1313"
        ]
    },
    {
        "instruction": "",
        "id": "q1314",
        "input": "how to remove the comma in a string python",
        "output": "",
        "rule": [
            "d1314"
        ]
    },
    {
        "instruction": "",
        "id": "q1315",
        "input": "python set mime type as iage",
        "output": "",
        "rule": [
            "d1315"
        ]
    },
    {
        "instruction": "",
        "id": "q1316",
        "input": "how to rename in pivot in python",
        "output": "",
        "rule": [
            "d1316"
        ]
    },
    {
        "instruction": "",
        "id": "q1317",
        "input": "python set mock attribute",
        "output": "",
        "rule": [
            "d1317"
        ]
    },
    {
        "instruction": "",
        "id": "q1318",
        "input": "how to replace a string witb another string python",
        "output": "",
        "rule": [
            "d1318"
        ]
    },
    {
        "instruction": "",
        "id": "q1319",
        "input": "python set remove an element",
        "output": "",
        "rule": [
            "d1319"
        ]
    },
    {
        "instruction": "",
        "id": "q1320",
        "input": "how to replace na with median python",
        "output": "",
        "rule": [
            "d1320"
        ]
    },
    {
        "instruction": "",
        "id": "q1321",
        "input": "python set the current file",
        "output": "",
        "rule": [
            "d1321"
        ]
    },
    {
        "instruction": "",
        "id": "q1322",
        "input": "how to replace spaces with underscores in python",
        "output": "",
        "rule": [
            "d1322"
        ]
    },
    {
        "instruction": "",
        "id": "q1323",
        "input": "python set timezone to utc",
        "output": "",
        "rule": [
            "d1323"
        ]
    },
    {
        "instruction": "",
        "id": "q1324",
        "input": "how to replace word with space in python",
        "output": "",
        "rule": [
            "d1324"
        ]
    },
    {
        "instruction": "",
        "id": "q1325",
        "input": "python set to value of dictionary if exists else defaul",
        "output": "",
        "rule": [
            "d1325"
        ]
    },
    {
        "instruction": "",
        "id": "q1326",
        "input": "how to reshape images in python",
        "output": "",
        "rule": [
            "d1326"
        ]
    },
    {
        "instruction": "",
        "id": "q1327",
        "input": "python set type to string",
        "output": "",
        "rule": [
            "d1327"
        ]
    },
    {
        "instruction": "",
        "id": "q1328",
        "input": "how to restart computer with python",
        "output": "",
        "rule": [
            "d1328"
        ]
    },
    {
        "instruction": "",
        "id": "q1329",
        "input": "python sets contains another set",
        "output": "",
        "rule": [
            "d1329"
        ]
    },
    {
        "instruction": "",
        "id": "q1330",
        "input": "how to retreive json data from dynamic url using python",
        "output": "",
        "rule": [
            "d1330"
        ]
    },
    {
        "instruction": "",
        "id": "q1331",
        "input": "python sftp eof during negotiation",
        "output": "",
        "rule": [
            "d1331"
        ]
    },
    {
        "instruction": "",
        "id": "q1332",
        "input": "how to return the highest value of a tree python",
        "output": "",
        "rule": [
            "d1332"
        ]
    },
    {
        "instruction": "",
        "id": "q1333",
        "input": "python shapely string polygon to polygon",
        "output": "",
        "rule": [
            "d1333"
        ]
    },
    {
        "instruction": "",
        "id": "q1334",
        "input": "how to rewind the itretator in python",
        "output": "",
        "rule": [
            "d1334"
        ]
    },
    {
        "instruction": "",
        "id": "q1335",
        "input": "python show traceback nice",
        "output": "",
        "rule": [
            "d1335"
        ]
    },
    {
        "instruction": "",
        "id": "q1336",
        "input": "how to round floats using f2 python %",
        "output": "",
        "rule": [
            "d1336"
        ]
    },
    {
        "instruction": "",
        "id": "q1337",
        "input": "python shuffle array along with the first dim",
        "output": "",
        "rule": [
            "d1337"
        ]
    },
    {
        "instruction": "",
        "id": "q1338",
        "input": "how to round to a specific number of decimals in python",
        "output": "",
        "rule": [
            "d1338"
        ]
    },
    {
        "instruction": "",
        "id": "q1339",
        "input": "python shuffle numpy array index",
        "output": "",
        "rule": [
            "d1339"
        ]
    },
    {
        "instruction": "",
        "id": "q1340",
        "input": "how to round to sig figs in python",
        "output": "",
        "rule": [
            "d1340"
        ]
    },
    {
        "instruction": "",
        "id": "q1341",
        "input": "python signal low pass filter",
        "output": "",
        "rule": [
            "d1341"
        ]
    },
    {
        "instruction": "",
        "id": "q1342",
        "input": "how to run a loop again after sleeping in python inside the loop",
        "output": "",
        "rule": [
            "d1342"
        ]
    },
    {
        "instruction": "",
        "id": "q1343",
        "input": "python sine wave with periods",
        "output": "",
        "rule": [
            "d1343"
        ]
    },
    {
        "instruction": "",
        "id": "q1344",
        "input": "how to run flake8 python",
        "output": "",
        "rule": [
            "d1344"
        ]
    },
    {
        "instruction": "",
        "id": "q1345",
        "input": "python single tuple read as list",
        "output": "",
        "rule": [
            "d1345"
        ]
    },
    {
        "instruction": "",
        "id": "q1346",
        "input": "how to run python script in deburger mode",
        "output": "",
        "rule": [
            "d1346"
        ]
    },
    {
        "instruction": "",
        "id": "q1347",
        "input": "python size of input buffer",
        "output": "",
        "rule": [
            "d1347"
        ]
    },
    {
        "instruction": "",
        "id": "q1348",
        "input": "how to save a variable to a text file in python",
        "output": "",
        "rule": [
            "d1348"
        ]
    },
    {
        "instruction": "",
        "id": "q1349",
        "input": "python skip lines for loop",
        "output": "",
        "rule": [
            "d1349"
        ]
    },
    {
        "instruction": "",
        "id": "q1350",
        "input": "how to save an excel sheet as a new file python",
        "output": "",
        "rule": [
            "d1350"
        ]
    },
    {
        "instruction": "",
        "id": "q1351",
        "input": "python skip to next element in for loop",
        "output": "",
        "rule": [
            "d1351"
        ]
    },
    {
        "instruction": "",
        "id": "q1352",
        "input": "python slice front of array",
        "output": "",
        "rule": [
            "d1352"
        ]
    },
    {
        "instruction": "",
        "id": "q1353",
        "input": "how to save something on python",
        "output": "",
        "rule": [
            "d1353"
        ]
    },
    {
        "instruction": "",
        "id": "q1354",
        "input": "python slice without an element",
        "output": "",
        "rule": [
            "d1354"
        ]
    },
    {
        "instruction": "",
        "id": "q1355",
        "input": "how to save the output imagw with full size without white spaces in python",
        "output": "",
        "rule": [
            "d1355"
        ]
    },
    {
        "instruction": "",
        "id": "q1356",
        "input": "python socket close shutdown",
        "output": "",
        "rule": [
            "d1356"
        ]
    },
    {
        "instruction": "",
        "id": "q1357",
        "input": "how to securely stop threading python",
        "output": "",
        "rule": [
            "d1357"
        ]
    },
    {
        "instruction": "",
        "id": "q1358",
        "input": "python soft link removal",
        "output": "",
        "rule": [
            "d1358"
        ]
    },
    {
        "instruction": "",
        "id": "q1359",
        "input": "how to see type of column data python",
        "output": "",
        "rule": [
            "d1359"
        ]
    },
    {
        "instruction": "",
        "id": "q1360",
        "input": "python sort list of filenames with numbers ascending",
        "output": "",
        "rule": [
            "d1360"
        ]
    },
    {
        "instruction": "",
        "id": "q1361",
        "input": "python sort names last to first with composite key",
        "output": "",
        "rule": [
            "d1361"
        ]
    },
    {
        "instruction": "",
        "id": "q1362",
        "input": "how to set ansi encoding in python",
        "output": "",
        "rule": [
            "d1362"
        ]
    },
    {
        "instruction": "",
        "id": "q1363",
        "input": "python sorted comppond key",
        "output": "",
        "rule": [
            "d1363"
        ]
    },
    {
        "instruction": "",
        "id": "q1364",
        "input": "how to set domain in python to allow complex numbers",
        "output": "",
        "rule": [
            "d1364"
        ]
    },
    {
        "instruction": "",
        "id": "q1365",
        "input": "python sorted iterator dictionary",
        "output": "",
        "rule": [
            "d1365"
        ]
    },
    {
        "instruction": "",
        "id": "q1366",
        "input": "how to set infinity as a bound in python",
        "output": "",
        "rule": [
            "d1366"
        ]
    },
    {
        "instruction": "",
        "id": "q1367",
        "input": "python source code for distance between two points",
        "output": "",
        "rule": [
            "d1367"
        ]
    },
    {
        "instruction": "",
        "id": "q1368",
        "input": "how to set permissions /dev in python",
        "output": "",
        "rule": [
            "d1368"
        ]
    },
    {
        "instruction": "",
        "id": "q1369",
        "input": "python spacy how to remove stopwords and lower",
        "output": "",
        "rule": [
            "d1369"
        ]
    },
    {
        "instruction": "",
        "id": "q1370",
        "input": "how to set python libpath",
        "output": "",
        "rule": [
            "d1370"
        ]
    },
    {
        "instruction": "",
        "id": "q1371",
        "input": "python spearman rank correlation",
        "output": "",
        "rule": [
            "d1371"
        ]
    },
    {
        "instruction": "",
        "id": "q1372",
        "input": "how to set python path in windows 7",
        "output": "",
        "rule": [
            "d1372"
        ]
    },
    {
        "instruction": "",
        "id": "q1373",
        "input": "python specify not condition",
        "output": "",
        "rule": [
            "d1373"
        ]
    },
    {
        "instruction": "",
        "id": "q1374",
        "input": "how to set the number of decimal places shown for a float in python",
        "output": "",
        "rule": [
            "d1374"
        ]
    },
    {
        "instruction": "",
        "id": "q1375",
        "input": "python split command args into list",
        "output": "",
        "rule": [
            "d1375"
        ]
    },
    {
        "instruction": "",
        "id": "q1376",
        "input": "how to set timezone datetime python",
        "output": "",
        "rule": [
            "d1376"
        ]
    },
    {
        "instruction": "",
        "id": "q1377",
        "input": "python split multiple delimeters",
        "output": "",
        "rule": [
            "d1377"
        ]
    },
    {
        "instruction": "",
        "id": "q1378",
        "input": "how to set value in python data frame",
        "output": "",
        "rule": [
            "d1378"
        ]
    },
    {
        "instruction": "",
        "id": "q1379",
        "input": "python split string in form of command argv",
        "output": "",
        "rule": [
            "d1379"
        ]
    },
    {
        "instruction": "",
        "id": "q1380",
        "input": "how to set world cordinates for a turtle in python",
        "output": "",
        "rule": [
            "d1380"
        ]
    },
    {
        "instruction": "",
        "id": "q1381",
        "input": "python split string into n substrings",
        "output": "",
        "rule": [
            "d1381"
        ]
    },
    {
        "instruction": "",
        "id": "q1382",
        "input": "how to simplify if elif python timechecks",
        "output": "",
        "rule": [
            "d1382"
        ]
    },
    {
        "instruction": "",
        "id": "q1383",
        "input": "python split underscore reverse",
        "output": "",
        "rule": [
            "d1383"
        ]
    },
    {
        "instruction": "",
        "id": "q1384",
        "input": "how to skip if a file doesnt exist in python",
        "output": "",
        "rule": [
            "d1384"
        ]
    },
    {
        "instruction": "",
        "id": "q1385",
        "input": "python spyder kernel died restarting",
        "output": "",
        "rule": [
            "d1385"
        ]
    },
    {
        "instruction": "",
        "id": "q1386",
        "input": "how to solve a matrix in python",
        "output": "",
        "rule": [
            "d1386"
        ]
    },
    {
        "instruction": "",
        "id": "q1387",
        "input": "python sql result to dict",
        "output": "",
        "rule": [
            "d1387"
        ]
    },
    {
        "instruction": "",
        "id": "q1388",
        "input": "how to solve equations with singular matrix python",
        "output": "",
        "rule": [
            "d1388"
        ]
    },
    {
        "instruction": "",
        "id": "q1389",
        "input": "python sqlalchemy altering table",
        "output": "",
        "rule": [
            "d1389"
        ]
    },
    {
        "instruction": "",
        "id": "q1390",
        "input": "how to solve exponential function with python",
        "output": "",
        "rule": [
            "d1390"
        ]
    },
    {
        "instruction": "",
        "id": "q1391",
        "input": "python sqlalchemy create tables in different schemas",
        "output": "",
        "rule": [
            "d1391"
        ]
    },
    {
        "instruction": "",
        "id": "q1392",
        "input": "how to sort a dictionary in descending orderpython",
        "output": "",
        "rule": [
            "d1392"
        ]
    },
    {
        "instruction": "",
        "id": "q1393",
        "input": "python sqlalchemy this transaction is inactive",
        "output": "",
        "rule": [
            "d1393"
        ]
    },
    {
        "instruction": "",
        "id": "q1394",
        "input": "how to sort an array in python descending",
        "output": "",
        "rule": [
            "d1394"
        ]
    },
    {
        "instruction": "",
        "id": "q1395",
        "input": "python sqlite get tables",
        "output": "",
        "rule": [
            "d1395"
        ]
    },
    {
        "instruction": "",
        "id": "q1396",
        "input": "how to sort an ordered dictionary python",
        "output": "",
        "rule": [
            "d1396"
        ]
    },
    {
        "instruction": "",
        "id": "q1397",
        "input": "python sqlite3 object has no attribute commit",
        "output": "",
        "rule": [
            "d1397"
        ]
    },
    {
        "instruction": "",
        "id": "q1398",
        "input": "how to sort array in descending order in python",
        "output": "",
        "rule": [
            "d1398"
        ]
    },
    {
        "instruction": "",
        "id": "q1399",
        "input": "python ssl handshake connection reset by peer",
        "output": "",
        "rule": [
            "d1399"
        ]
    },
    {
        "instruction": "",
        "id": "q1400",
        "input": "how to sort list in python strings start with numbers",
        "output": "",
        "rule": [
            "d1400"
        ]
    },
    {
        "instruction": "",
        "id": "q1401",
        "input": "python standard deviation and average",
        "output": "",
        "rule": [
            "d1401"
        ]
    },
    {
        "instruction": "",
        "id": "q1402",
        "input": "how to sort names in reverse alphabetical in python",
        "output": "",
        "rule": [
            "d1402"
        ]
    },
    {
        "instruction": "",
        "id": "q1403",
        "input": "python standard deviation method",
        "output": "",
        "rule": [
            "d1403"
        ]
    },
    {
        "instruction": "",
        "id": "q1404",
        "input": "python start fnction asynchronously",
        "output": "",
        "rule": [
            "d1404"
        ]
    },
    {
        "instruction": "",
        "id": "q1405",
        "input": "how to specify a function return enumerated type, python",
        "output": "",
        "rule": [
            "d1405"
        ]
    },
    {
        "instruction": "",
        "id": "q1406",
        "input": "python static method call static method",
        "output": "",
        "rule": [
            "d1406"
        ]
    },
    {
        "instruction": "",
        "id": "q1407",
        "input": "how to specify widths in python",
        "output": "",
        "rule": [
            "d1407"
        ]
    },
    {
        "instruction": "",
        "id": "q1408",
        "input": "python static variabl in function",
        "output": "",
        "rule": [
            "d1408"
        ]
    },
    {
        "instruction": "",
        "id": "q1409",
        "input": "how to splice a confusion matrix python",
        "output": "",
        "rule": [
            "d1409"
        ]
    },
    {
        "instruction": "",
        "id": "q1410",
        "input": "python staticmethod call another staticmethod",
        "output": "",
        "rule": [
            "d1410"
        ]
    },
    {
        "instruction": "",
        "id": "q1411",
        "input": "how to stack a list of array values in a grid in python",
        "output": "",
        "rule": [
            "d1411"
        ]
    },
    {
        "instruction": "",
        "id": "q1412",
        "input": "python stmp connection unexpectedly closed",
        "output": "",
        "rule": [
            "d1412"
        ]
    },
    {
        "instruction": "",
        "id": "q1413",
        "input": "how to stop a python program running in the background",
        "output": "",
        "rule": [
            "d1413"
        ]
    },
    {
        "instruction": "",
        "id": "q1414",
        "input": "python stop logging for unit tests",
        "output": "",
        "rule": [
            "d1414"
        ]
    },
    {
        "instruction": "",
        "id": "q1415",
        "input": "how to stop a python thread object",
        "output": "",
        "rule": [
            "d1415"
        ]
    },
    {
        "instruction": "",
        "id": "q1416",
        "input": "python str decode types",
        "output": "",
        "rule": [
            "d1416"
        ]
    },
    {
        "instruction": "",
        "id": "q1417",
        "input": "how to stop python auto gui",
        "output": "",
        "rule": [
            "d1417"
        ]
    },
    {
        "instruction": "",
        "id": "q1418",
        "input": "python str format md5 hashlib",
        "output": "",
        "rule": [
            "d1418"
        ]
    },
    {
        "instruction": "",
        "id": "q1419",
        "input": "how to supress subprocess output python",
        "output": "",
        "rule": [
            "d1419"
        ]
    },
    {
        "instruction": "",
        "id": "q1420",
        "input": "python str is valid date",
        "output": "",
        "rule": [
            "d1420"
        ]
    },
    {
        "instruction": "",
        "id": "q1421",
        "input": "how to take a matrix to a power in python",
        "output": "",
        "rule": [
            "d1421"
        ]
    },
    {
        "instruction": "",
        "id": "q1422",
        "input": "python str to fileobject",
        "output": "",
        "rule": [
            "d1422"
        ]
    },
    {
        "instruction": "",
        "id": "q1423",
        "input": "how to take dot product of two vecotrs in python",
        "output": "",
        "rule": [
            "d1423"
        ]
    },
    {
        "instruction": "",
        "id": "q1424",
        "input": "python stream from image bytes",
        "output": "",
        "rule": [
            "d1424"
        ]
    },
    {
        "instruction": "",
        "id": "q1425",
        "input": "how to take the average value each day on group of datetime strings in python",
        "output": "",
        "rule": [
            "d1425"
        ]
    },
    {
        "instruction": "",
        "id": "q1426",
        "input": "python stream json to file",
        "output": "",
        "rule": [
            "d1426"
        ]
    },
    {
        "instruction": "",
        "id": "q1427",
        "input": "how to tell if a url is valid in python",
        "output": "",
        "rule": [
            "d1427"
        ]
    },
    {
        "instruction": "",
        "id": "q1428",
        "input": "python strftime millisecond digits",
        "output": "",
        "rule": [
            "d1428"
        ]
    },
    {
        "instruction": "",
        "id": "q1429",
        "input": "how to tell size of array in python",
        "output": "",
        "rule": [
            "d1429"
        ]
    },
    {
        "instruction": "",
        "id": "q1430",
        "input": "python string % substitution float",
        "output": "",
        "rule": [
            "d1430"
        ]
    },
    {
        "instruction": "",
        "id": "q1431",
        "input": "how to test for maximum of a random integer function python",
        "output": "",
        "rule": [
            "d1431"
        ]
    },
    {
        "instruction": "",
        "id": "q1432",
        "input": "python string a float",
        "output": "",
        "rule": [
            "d1432"
        ]
    },
    {
        "instruction": "",
        "id": "q1433",
        "input": "how to test if a kwarg was supplied in python",
        "output": "",
        "rule": [
            "d1433"
        ]
    },
    {
        "instruction": "",
        "id": "q1434",
        "input": "python string binary to int",
        "output": "",
        "rule": [
            "d1434"
        ]
    },
    {
        "instruction": "",
        "id": "q1435",
        "input": "how to test if it is a string python",
        "output": "",
        "rule": [
            "d1435"
        ]
    },
    {
        "instruction": "",
        "id": "q1436",
        "input": "python string comparison case",
        "output": "",
        "rule": [
            "d1436"
        ]
    },
    {
        "instruction": "",
        "id": "q1437",
        "input": "how to total a list without reduce python",
        "output": "",
        "rule": [
            "d1437"
        ]
    },
    {
        "instruction": "",
        "id": "q1438",
        "input": "python string contains non hex characters in a string",
        "output": "",
        "rule": [
            "d1438"
        ]
    },
    {
        "instruction": "",
        "id": "q1439",
        "input": "how to train and fit model and test accuracy python",
        "output": "",
        "rule": [
            "d1439"
        ]
    },
    {
        "instruction": "",
        "id": "q1440",
        "input": "python string contains non hex charcters in a string",
        "output": "",
        "rule": [
            "d1440"
        ]
    },
    {
        "instruction": "",
        "id": "q1441",
        "input": "how to turn a document ino python",
        "output": "",
        "rule": [
            "d1441"
        ]
    },
    {
        "instruction": "",
        "id": "q1442",
        "input": "python string replace source",
        "output": "",
        "rule": [
            "d1442"
        ]
    },
    {
        "instruction": "",
        "id": "q1443",
        "input": "how to turn a string into a datetime python",
        "output": "",
        "rule": [
            "d1443"
        ]
    },
    {
        "instruction": "",
        "id": "q1444",
        "input": "python string to cstr",
        "output": "",
        "rule": [
            "d1444"
        ]
    },
    {
        "instruction": "",
        "id": "q1445",
        "input": "how to turn an array of arrays into an list python",
        "output": "",
        "rule": [
            "d1445"
        ]
    },
    {
        "instruction": "",
        "id": "q1446",
        "input": "python string to float based on format",
        "output": "",
        "rule": [
            "d1446"
        ]
    },
    {
        "instruction": "",
        "id": "q1447",
        "input": "how to turn str to bytes python",
        "output": "",
        "rule": [
            "d1447"
        ]
    },
    {
        "instruction": "",
        "id": "q1448",
        "input": "python string to hash code",
        "output": "",
        "rule": [
            "d1448"
        ]
    },
    {
        "instruction": "",
        "id": "q1449",
        "input": "how to type a string in python",
        "output": "",
        "rule": [
            "d1449"
        ]
    },
    {
        "instruction": "",
        "id": "q1450",
        "input": "python string to java",
        "output": "",
        "rule": [
            "d1450"
        ]
    },
    {
        "instruction": "",
        "id": "q1451",
        "input": "how to typecast a list in python",
        "output": "",
        "rule": [
            "d1451"
        ]
    },
    {
        "instruction": "",
        "id": "q1452",
        "input": "python strip non word characters",
        "output": "",
        "rule": [
            "d1452"
        ]
    },
    {
        "instruction": "",
        "id": "q1453",
        "input": "how to unregister for python",
        "output": "",
        "rule": [
            "d1453"
        ]
    },
    {
        "instruction": "",
        "id": "q1454",
        "input": "python strip none list",
        "output": "",
        "rule": [
            "d1454"
        ]
    },
    {
        "instruction": "",
        "id": "q1455",
        "input": "how to unzip gz file python",
        "output": "",
        "rule": [
            "d1455"
        ]
    },
    {
        "instruction": "",
        "id": "q1456",
        "input": "python substring index variable",
        "output": "",
        "rule": [
            "d1456"
        ]
    },
    {
        "instruction": "",
        "id": "q1457",
        "input": "how to update a x, y tuple python",
        "output": "",
        "rule": [
            "d1457"
        ]
    },
    {
        "instruction": "",
        "id": "q1458",
        "input": "python suds authenticate to soap web service",
        "output": "",
        "rule": [
            "d1458"
        ]
    },
    {
        "instruction": "",
        "id": "q1459",
        "input": "how to uppercase or lowercase using lists in python",
        "output": "",
        "rule": [
            "d1459"
        ]
    },
    {
        "instruction": "",
        "id": "q1460",
        "input": "python suspend until response",
        "output": "",
        "rule": [
            "d1460"
        ]
    },
    {
        "instruction": "",
        "id": "q1461",
        "input": "how to use a dictionary to replace in python",
        "output": "",
        "rule": [
            "d1461"
        ]
    },
    {
        "instruction": "",
        "id": "q1462",
        "input": "python sync tables sqlalchem",
        "output": "",
        "rule": [
            "d1462"
        ]
    },
    {
        "instruction": "",
        "id": "q1463",
        "input": "how to use a predict function on python",
        "output": "",
        "rule": [
            "d1463"
        ]
    },
    {
        "instruction": "",
        "id": "q1464",
        "input": "python table like output",
        "output": "",
        "rule": [
            "d1464"
        ]
    },
    {
        "instruction": "",
        "id": "q1465",
        "input": "how to use capitalize to make every word in a string upper case python",
        "output": "",
        "rule": [
            "d1465"
        ]
    },
    {
        "instruction": "",
        "id": "q1466",
        "input": "python table to dict",
        "output": "",
        "rule": [
            "d1466"
        ]
    },
    {
        "instruction": "",
        "id": "q1467",
        "input": "how to use colons in a string in python",
        "output": "",
        "rule": [
            "d1467"
        ]
    },
    {
        "instruction": "",
        "id": "q1468",
        "input": "python task auto start",
        "output": "",
        "rule": [
            "d1468"
        ]
    },
    {
        "instruction": "",
        "id": "q1469",
        "input": "how to use local stopwords file in python",
        "output": "",
        "rule": [
            "d1469"
        ]
    },
    {
        "instruction": "",
        "id": "q1470",
        "input": "python temp file creation for testing",
        "output": "",
        "rule": [
            "d1470"
        ]
    },
    {
        "instruction": "",
        "id": "q1471",
        "input": "how to use multiple logical opetators in python",
        "output": "",
        "rule": [
            "d1471"
        ]
    },
    {
        "instruction": "",
        "id": "q1472",
        "input": "python template render json object",
        "output": "",
        "rule": [
            "d1472"
        ]
    },
    {
        "instruction": "",
        "id": "q1473",
        "input": "how to use pymongo query in mongoengine in python",
        "output": "",
        "rule": [
            "d1473"
        ]
    },
    {
        "instruction": "",
        "id": "q1474",
        "input": "python tensor of dimension (h, w)",
        "output": "",
        "rule": [
            "d1474"
        ]
    },
    {
        "instruction": "",
        "id": "q1475",
        "input": "how to use python ldap to query some users",
        "output": "",
        "rule": [
            "d1475"
        ]
    },
    {
        "instruction": "",
        "id": "q1476",
        "input": "python tensorflow auc incompatible shapes",
        "output": "",
        "rule": [
            "d1476"
        ]
    },
    {
        "instruction": "",
        "id": "q1477",
        "input": "how to use remove last thing inserted in a list in python",
        "output": "",
        "rule": [
            "d1477"
        ]
    },
    {
        "instruction": "",
        "id": "q1478",
        "input": "python tensorflow slim demo",
        "output": "",
        "rule": [
            "d1478"
        ]
    },
    {
        "instruction": "",
        "id": "q1479",
        "input": "how to use rowspan for varing length using python",
        "output": "",
        "rule": [
            "d1479"
        ]
    },
    {
        "instruction": "",
        "id": "q1480",
        "input": "python test if attribute exists",
        "output": "",
        "rule": [
            "d1480"
        ]
    },
    {
        "instruction": "",
        "id": "q1481",
        "input": "how to use the range function in descending order python",
        "output": "",
        "rule": [
            "d1481"
        ]
    },
    {
        "instruction": "",
        "id": "q1482",
        "input": "python test if matrix is singlor",
        "output": "",
        "rule": [
            "d1482"
        ]
    },
    {
        "instruction": "",
        "id": "q1483",
        "input": "how to use the session attributes from one intent to another using python",
        "output": "",
        "rule": [
            "d1483"
        ]
    },
    {
        "instruction": "",
        "id": "q1484",
        "input": "python test if socket is connected",
        "output": "",
        "rule": [
            "d1484"
        ]
    },
    {
        "instruction": "",
        "id": "q1485",
        "input": "how to use to parse a yaml script in python",
        "output": "",
        "rule": [
            "d1485"
        ]
    },
    {
        "instruction": "",
        "id": "q1486",
        "input": "python text file iterator",
        "output": "",
        "rule": [
            "d1486"
        ]
    },
    {
        "instruction": "",
        "id": "q1487",
        "input": "how to use type check validation in python",
        "output": "",
        "rule": [
            "d1487"
        ]
    },
    {
        "instruction": "",
        "id": "q1488",
        "input": "python tfidf add token to vocabulary",
        "output": "",
        "rule": [
            "d1488"
        ]
    },
    {
        "instruction": "",
        "id": "q1489",
        "input": "how to use yaml to make a configure file example python",
        "output": "",
        "rule": [
            "d1489"
        ]
    },
    {
        "instruction": "",
        "id": "q1490",
        "input": "python thread kill alive",
        "output": "",
        "rule": [
            "d1490"
        ]
    },
    {
        "instruction": "",
        "id": "q1491",
        "input": "how to validate mac address in python",
        "output": "",
        "rule": [
            "d1491"
        ]
    },
    {
        "instruction": "",
        "id": "q1492",
        "input": "python thread safe flush buffer",
        "output": "",
        "rule": [
            "d1492"
        ]
    },
    {
        "instruction": "",
        "id": "q1493",
        "input": "how to view a list as an array in python",
        "output": "",
        "rule": [
            "d1493"
        ]
    },
    {
        "instruction": "",
        "id": "q1494",
        "input": "python threading kill all",
        "output": "",
        "rule": [
            "d1494"
        ]
    },
    {
        "instruction": "",
        "id": "q1495",
        "input": "how to warp image python",
        "output": "",
        "rule": [
            "d1495"
        ]
    },
    {
        "instruction": "",
        "id": "q1496",
        "input": "python threadpool executor terminate thread early",
        "output": "",
        "rule": [
            "d1496"
        ]
    },
    {
        "instruction": "",
        "id": "q1497",
        "input": "how to write a list into a tab delimit text file, python",
        "output": "",
        "rule": [
            "d1497"
        ]
    },
    {
        "instruction": "",
        "id": "q1498",
        "input": "python threadpool join hang",
        "output": "",
        "rule": [
            "d1498"
        ]
    },
    {
        "instruction": "",
        "id": "q1499",
        "input": "how to write a string in python with first word starting with a capital and ending with a period",
        "output": "",
        "rule": [
            "d1499"
        ]
    },
    {
        "instruction": "",
        "id": "q1500",
        "input": "python threadpool map async",
        "output": "",
        "rule": [
            "d1500"
        ]
    },
    {
        "instruction": "",
        "id": "q1501",
        "input": "how to write an wav file in python using scipy",
        "output": "",
        "rule": [
            "d1501"
        ]
    },
    {
        "instruction": "",
        "id": "q1502",
        "input": "python threadsafe create directory",
        "output": "",
        "rule": [
            "d1502"
        ]
    },
    {
        "instruction": "",
        "id": "q1503",
        "input": "how to write matrix values in csv using python",
        "output": "",
        "rule": [
            "d1503"
        ]
    },
    {
        "instruction": "",
        "id": "q1504",
        "input": "python three dimensional rotation matrix",
        "output": "",
        "rule": [
            "d1504"
        ]
    },
    {
        "instruction": "",
        "id": "q1505",
        "input": "how to write to create a file in source code then write to it in python",
        "output": "",
        "rule": [
            "d1505"
        ]
    },
    {
        "instruction": "",
        "id": "q1506",
        "input": "python time change to miliseconds",
        "output": "",
        "rule": [
            "d1506"
        ]
    },
    {
        "instruction": "",
        "id": "q1507",
        "input": "how to write unit test functions for a try loop in python",
        "output": "",
        "rule": [
            "d1507"
        ]
    },
    {
        "instruction": "",
        "id": "q1508",
        "input": "python time covert to epoch time",
        "output": "",
        "rule": [
            "d1508"
        ]
    },
    {
        "instruction": "",
        "id": "q1509",
        "input": "how yo print hostname of ip in python",
        "output": "",
        "rule": [
            "d1509"
        ]
    },
    {
        "instruction": "",
        "id": "q1510",
        "input": "python time timezone tzoffset",
        "output": "",
        "rule": [
            "d1510"
        ]
    },
    {
        "instruction": "",
        "id": "q1511",
        "input": "howt to update attobute to object python",
        "output": "",
        "rule": [
            "d1511"
        ]
    },
    {
        "instruction": "",
        "id": "q1512",
        "input": "python timestamp with microsecond to datetime",
        "output": "",
        "rule": [
            "d1512"
        ]
    },
    {
        "instruction": "",
        "id": "q1513",
        "input": "howto comvert string to byte type in python",
        "output": "",
        "rule": [
            "d1513"
        ]
    },
    {
        "instruction": "",
        "id": "q1514",
        "input": "python timezone offset to timezone",
        "output": "",
        "rule": [
            "d1514"
        ]
    },
    {
        "instruction": "",
        "id": "q1515",
        "input": "html table format with python variables",
        "output": "",
        "rule": [
            "d1515"
        ]
    },
    {
        "instruction": "",
        "id": "q1516",
        "input": "python tk scrollbar in a frame",
        "output": "",
        "rule": [
            "d1516"
        ]
    },
    {
        "instruction": "",
        "id": "q1517",
        "input": "identify if its a zipped file in python",
        "output": "",
        "rule": [
            "d1517"
        ]
    },
    {
        "instruction": "",
        "id": "q1518",
        "input": "python tkinter modal dialog with scroll",
        "output": "",
        "rule": [
            "d1518"
        ]
    },
    {
        "instruction": "",
        "id": "q1519",
        "input": "if a is list python",
        "output": "",
        "rule": [
            "d1519"
        ]
    },
    {
        "instruction": "",
        "id": "q1520",
        "input": "python to compute fourier transform",
        "output": "",
        "rule": [
            "d1520"
        ]
    },
    {
        "instruction": "",
        "id": "q1521",
        "input": "if queue not empty python",
        "output": "",
        "rule": [
            "d1521"
        ]
    },
    {
        "instruction": "",
        "id": "q1522",
        "input": "python to connect postgresql remote database",
        "output": "",
        "rule": [
            "d1522"
        ]
    },
    {
        "instruction": "",
        "id": "q1523",
        "input": "if value not present in json, take default values python",
        "output": "",
        "rule": [
            "d1523"
        ]
    },
    {
        "instruction": "",
        "id": "q1524",
        "input": "python to dict with key lambda",
        "output": "",
        "rule": [
            "d1524"
        ]
    },
    {
        "instruction": "",
        "id": "q1525",
        "input": "image resize while protecting aspect ration python",
        "output": "",
        "rule": [
            "d1525"
        ]
    },
    {
        "instruction": "",
        "id": "q1526",
        "input": "python to get 3d object",
        "output": "",
        "rule": [
            "d1526"
        ]
    },
    {
        "instruction": "",
        "id": "q1527",
        "input": "in python how do i ask a user a yes or no question",
        "output": "",
        "rule": [
            "d1527"
        ]
    },
    {
        "instruction": "",
        "id": "q1528",
        "input": "python to retrieve attribute from xml string with namespace",
        "output": "",
        "rule": [
            "d1528"
        ]
    },
    {
        "instruction": "",
        "id": "q1529",
        "input": "index of a known elemnt python list",
        "output": "",
        "rule": [
            "d1529"
        ]
    },
    {
        "instruction": "",
        "id": "q1530",
        "input": "python to see if file handler is stdout",
        "output": "",
        "rule": [
            "d1530"
        ]
    },
    {
        "instruction": "",
        "id": "q1531",
        "input": "inner join function in python",
        "output": "",
        "rule": [
            "d1531"
        ]
    },
    {
        "instruction": "",
        "id": "q1532",
        "input": "python to skip if file do not exist",
        "output": "",
        "rule": [
            "d1532"
        ]
    },
    {
        "instruction": "",
        "id": "q1533",
        "input": "interpolate a 2d matrix to the size of another 2d matrix python",
        "output": "",
        "rule": [
            "d1533"
        ]
    },
    {
        "instruction": "",
        "id": "q1534",
        "input": "python to tell windows or linux",
        "output": "",
        "rule": [
            "d1534"
        ]
    },
    {
        "instruction": "",
        "id": "q1535",
        "input": "invert a dictionary containing lists python",
        "output": "",
        "rule": [
            "d1535"
        ]
    },
    {
        "instruction": "",
        "id": "q1536",
        "input": "python tornado multiple port",
        "output": "",
        "rule": [
            "d1536"
        ]
    },
    {
        "instruction": "",
        "id": "q1537",
        "input": "is divisible function in python",
        "output": "",
        "rule": [
            "d1537"
        ]
    },
    {
        "instruction": "",
        "id": "q1538",
        "input": "python transfer to sparse matrix",
        "output": "",
        "rule": [
            "d1538"
        ]
    },
    {
        "instruction": "",
        "id": "q1539",
        "input": "is there a average function for lists in python",
        "output": "",
        "rule": [
            "d1539"
        ]
    },
    {
        "instruction": "",
        "id": "q1540",
        "input": "python transform numpy to data fram",
        "output": "",
        "rule": [
            "d1540"
        ]
    },
    {
        "instruction": "",
        "id": "q1541",
        "input": "is there some way to create a pdf with python",
        "output": "",
        "rule": [
            "d1541"
        ]
    },
    {
        "instruction": "",
        "id": "q1542",
        "input": "python translate json to list of objects",
        "output": "",
        "rule": [
            "d1542"
        ]
    },
    {
        "instruction": "",
        "id": "q1543",
        "input": "iserie python how to get the cursor return value",
        "output": "",
        "rule": [
            "d1543"
        ]
    },
    {
        "instruction": "",
        "id": "q1544",
        "input": "python traverse tree leaf",
        "output": "",
        "rule": [
            "d1544"
        ]
    },
    {
        "instruction": "",
        "id": "q1545",
        "input": "isinstance python 3 user defined data type",
        "output": "",
        "rule": [
            "d1545"
        ]
    },
    {
        "instruction": "",
        "id": "q1546",
        "input": "python truncate spaces in string",
        "output": "",
        "rule": [
            "d1546"
        ]
    },
    {
        "instruction": "",
        "id": "q1547",
        "input": "iso format timezone offset python",
        "output": "",
        "rule": [
            "d1547"
        ]
    },
    {
        "instruction": "",
        "id": "q1548",
        "input": "python try block inside the function and how to use return",
        "output": "",
        "rule": [
            "d1548"
        ]
    },
    {
        "instruction": "",
        "id": "q1549",
        "input": "iterate over all but first element python",
        "output": "",
        "rule": [
            "d1549"
        ]
    },
    {
        "instruction": "",
        "id": "q1550",
        "input": "python try excpet in loop",
        "output": "",
        "rule": [
            "d1550"
        ]
    },
    {
        "instruction": "",
        "id": "q1551",
        "input": "iterator for reading from file python",
        "output": "",
        "rule": [
            "d1551"
        ]
    },
    {
        "instruction": "",
        "id": "q1552",
        "input": "python turn datetime into timestamp",
        "output": "",
        "rule": [
            "d1552"
        ]
    },
    {
        "instruction": "",
        "id": "q1553",
        "input": "itertools for dictionary values in python",
        "output": "",
        "rule": [
            "d1553"
        ]
    },
    {
        "instruction": "",
        "id": "q1554",
        "input": "python turn forward slashes to back slashes",
        "output": "",
        "rule": [
            "d1554"
        ]
    },
    {
        "instruction": "",
        "id": "q1555",
        "input": "itertools python groupby group keys",
        "output": "",
        "rule": [
            "d1555"
        ]
    },
    {
        "instruction": "",
        "id": "q1556",
        "input": "python turn instance method to function",
        "output": "",
        "rule": [
            "d1556"
        ]
    },
    {
        "instruction": "",
        "id": "q1557",
        "input": "java 2 dimensional array return to python",
        "output": "",
        "rule": [
            "d1557"
        ]
    },
    {
        "instruction": "",
        "id": "q1558",
        "input": "python turn int to 16 but bin",
        "output": "",
        "rule": [
            "d1558"
        ]
    },
    {
        "instruction": "",
        "id": "q1559",
        "input": "java path python like",
        "output": "",
        "rule": [
            "d1559"
        ]
    },
    {
        "instruction": "",
        "id": "q1560",
        "input": "python turning lambda expression into a key",
        "output": "",
        "rule": [
            "d1560"
        ]
    },
    {
        "instruction": "",
        "id": "q1561",
        "input": "java python integration jython vs",
        "output": "",
        "rule": [
            "d1561"
        ]
    },
    {
        "instruction": "",
        "id": "q1562",
        "input": "python turning space delimited text into list",
        "output": "",
        "rule": [
            "d1562"
        ]
    },
    {
        "instruction": "",
        "id": "q1563",
        "input": "jinja2 template list of strings python",
        "output": "",
        "rule": [
            "d1563"
        ]
    },
    {
        "instruction": "",
        "id": "q1564",
        "input": "python two image similarity",
        "output": "",
        "rule": [
            "d1564"
        ]
    },
    {
        "instruction": "",
        "id": "q1565",
        "input": "join characters in list python",
        "output": "",
        "rule": [
            "d1565"
        ]
    },
    {
        "instruction": "",
        "id": "q1566",
        "input": "python type hinting 'method'",
        "output": "",
        "rule": [
            "d1566"
        ]
    },
    {
        "instruction": "",
        "id": "q1567",
        "input": "json date format milliseconds python",
        "output": "",
        "rule": [
            "d1567"
        ]
    },
    {
        "instruction": "",
        "id": "q1568",
        "input": "python type hinting allow 2 types",
        "output": "",
        "rule": [
            "d1568"
        ]
    },
    {
        "instruction": "",
        "id": "q1569",
        "input": "json load python isoformat datetime",
        "output": "",
        "rule": [
            "d1569"
        ]
    },
    {
        "instruction": "",
        "id": "q1570",
        "input": "python typecast as int",
        "output": "",
        "rule": [
            "d1570"
        ]
    },
    {
        "instruction": "",
        "id": "q1571",
        "input": "json load utf dict python",
        "output": "",
        "rule": [
            "d1571"
        ]
    },
    {
        "instruction": "",
        "id": "q1572",
        "input": "python typecast object to string",
        "output": "",
        "rule": [
            "d1572"
        ]
    },
    {
        "instruction": "",
        "id": "q1573",
        "input": "json serializable types python",
        "output": "",
        "rule": [
            "d1573"
        ]
    },
    {
        "instruction": "",
        "id": "q1574",
        "input": "python underscore to camel",
        "output": "",
        "rule": [
            "d1574"
        ]
    },
    {
        "instruction": "",
        "id": "q1575",
        "input": "jsonschema python multiple schema files",
        "output": "",
        "rule": [
            "d1575"
        ]
    },
    {
        "instruction": "",
        "id": "q1576",
        "input": "python unitest how to assing variable to object in setup",
        "output": "",
        "rule": [
            "d1576"
        ]
    },
    {
        "instruction": "",
        "id": "q1577",
        "input": "keep only elements in list python",
        "output": "",
        "rule": [
            "d1577"
        ]
    },
    {
        "instruction": "",
        "id": "q1578",
        "input": "python unittest show passed tests and failed tests",
        "output": "",
        "rule": [
            "d1578"
        ]
    },
    {
        "instruction": "",
        "id": "q1579",
        "input": "kill a root process from python",
        "output": "",
        "rule": [
            "d1579"
        ]
    },
    {
        "instruction": "",
        "id": "q1580",
        "input": "python unittesting assert raise failing with callable function",
        "output": "",
        "rule": [
            "d1580"
        ]
    },
    {
        "instruction": "",
        "id": "q1581",
        "input": "kill thread python daemon",
        "output": "",
        "rule": [
            "d1581"
        ]
    },
    {
        "instruction": "",
        "id": "q1582",
        "input": "python unknown url type https",
        "output": "",
        "rule": [
            "d1582"
        ]
    },
    {
        "instruction": "",
        "id": "q1583",
        "input": "l2 normalization python numpy",
        "output": "",
        "rule": [
            "d1583"
        ]
    },
    {
        "instruction": "",
        "id": "q1584",
        "input": "python unzip gzip file",
        "output": "",
        "rule": [
            "d1584"
        ]
    },
    {
        "instruction": "",
        "id": "q1585",
        "input": "labels and legends for ploting python",
        "output": "",
        "rule": [
            "d1585"
        ]
    },
    {
        "instruction": "",
        "id": "q1586",
        "input": "python uppercase lower case variables",
        "output": "",
        "rule": [
            "d1586"
        ]
    },
    {
        "instruction": "",
        "id": "q1587",
        "input": "lamba function that returns boolean python",
        "output": "",
        "rule": [
            "d1587"
        ]
    },
    {
        "instruction": "",
        "id": "q1588",
        "input": "python url encoding and requests",
        "output": "",
        "rule": [
            "d1588"
        ]
    },
    {
        "instruction": "",
        "id": "q1589",
        "input": "lambda python create file s3",
        "output": "",
        "rule": [
            "d1589"
        ]
    },
    {
        "instruction": "",
        "id": "q1590",
        "input": "python url read text",
        "output": "",
        "rule": [
            "d1590"
        ]
    },
    {
        "instruction": "",
        "id": "q1591",
        "input": "large dataset for model training in python",
        "output": "",
        "rule": [
            "d1591"
        ]
    },
    {
        "instruction": "",
        "id": "q1592",
        "input": "python url safety checker",
        "output": "",
        "rule": [
            "d1592"
        ]
    },
    {
        "instruction": "",
        "id": "q1593",
        "input": "last five entries from data in python",
        "output": "",
        "rule": [
            "d1593"
        ]
    },
    {
        "instruction": "",
        "id": "q1594",
        "input": "python url without opening browser window",
        "output": "",
        "rule": [
            "d1594"
        ]
    },
    {
        "instruction": "",
        "id": "q1595",
        "input": "last n elements of python list",
        "output": "",
        "rule": [
            "d1595"
        ]
    },
    {
        "instruction": "",
        "id": "q1596",
        "input": "python urlquery to dict",
        "output": "",
        "rule": [
            "d1596"
        ]
    },
    {
        "instruction": "",
        "id": "q1597",
        "input": "latex python code snippet",
        "output": "",
        "rule": [
            "d1597"
        ]
    },
    {
        "instruction": "",
        "id": "q1598",
        "input": "python use a colorbar range",
        "output": "",
        "rule": [
            "d1598"
        ]
    },
    {
        "instruction": "",
        "id": "q1599",
        "input": "leave subplots empty in python",
        "output": "",
        "rule": [
            "d1599"
        ]
    },
    {
        "instruction": "",
        "id": "q1600",
        "input": "python use one dict to new a",
        "output": "",
        "rule": [
            "d1600"
        ]
    },
    {
        "instruction": "",
        "id": "q1601",
        "input": "lenght of a number array in python",
        "output": "",
        "rule": [
            "d1601"
        ]
    },
    {
        "instruction": "",
        "id": "q1602",
        "input": "python use quote in string",
        "output": "",
        "rule": [
            "d1602"
        ]
    },
    {
        "instruction": "",
        "id": "q1603",
        "input": "length normalization of vector python",
        "output": "",
        "rule": [
            "d1603"
        ]
    },
    {
        "instruction": "",
        "id": "q1604",
        "input": "python use staticmethod function in another staticmethod function",
        "output": "",
        "rule": [
            "d1604"
        ]
    },
    {
        "instruction": "",
        "id": "q1605",
        "input": "linux python mmap only maps 240 bytes",
        "output": "",
        "rule": [
            "d1605"
        ]
    },
    {
        "instruction": "",
        "id": "q1606",
        "input": "python use timer to call function every 10 sec",
        "output": "",
        "rule": [
            "d1606"
        ]
    },
    {
        "instruction": "",
        "id": "q1607",
        "input": "linux python really close serial",
        "output": "",
        "rule": [
            "d1607"
        ]
    },
    {
        "instruction": "",
        "id": "q1608",
        "input": "python user enters 10 intergers",
        "output": "",
        "rule": [
            "d1608"
        ]
    },
    {
        "instruction": "",
        "id": "q1609",
        "input": "list all attributes of an object python",
        "output": "",
        "rule": [
            "d1609"
        ]
    },
    {
        "instruction": "",
        "id": "q1610",
        "input": "python user prompt hide input",
        "output": "",
        "rule": [
            "d1610"
        ]
    },
    {
        "instruction": "",
        "id": "q1611",
        "input": "list all variables in python size",
        "output": "",
        "rule": [
            "d1611"
        ]
    },
    {
        "instruction": "",
        "id": "q1612",
        "input": "python username and password from files",
        "output": "",
        "rule": [
            "d1612"
        ]
    },
    {
        "instruction": "",
        "id": "q1613",
        "input": "list of methods on an object in python",
        "output": "",
        "rule": [
            "d1613"
        ]
    },
    {
        "instruction": "",
        "id": "q1614",
        "input": "python uuencode stringto bytes",
        "output": "",
        "rule": [
            "d1614"
        ]
    },
    {
        "instruction": "",
        "id": "q1615",
        "input": "list of numpy arrays in python",
        "output": "",
        "rule": [
            "d1615"
        ]
    },
    {
        "instruction": "",
        "id": "q1616",
        "input": "python validate is integer",
        "output": "",
        "rule": [
            "d1616"
        ]
    },
    {
        "instruction": "",
        "id": "q1617",
        "input": "list of tuples to list of dictionary python 3",
        "output": "",
        "rule": [
            "d1617"
        ]
    },
    {
        "instruction": "",
        "id": "q1618",
        "input": "python validate mac address check",
        "output": "",
        "rule": [
            "d1618"
        ]
    },
    {
        "instruction": "",
        "id": "q1619",
        "input": "list with all values except for one python",
        "output": "",
        "rule": [
            "d1619"
        ]
    },
    {
        "instruction": "",
        "id": "q1620",
        "input": "python validate two dataset",
        "output": "",
        "rule": [
            "d1620"
        ]
    },
    {
        "instruction": "",
        "id": "q1621",
        "input": "load data to file from json in python",
        "output": "",
        "rule": [
            "d1621"
        ]
    },
    {
        "instruction": "",
        "id": "q1622",
        "input": "python value none how to encode in protocol buffer",
        "output": "",
        "rule": [
            "d1622"
        ]
    },
    {
        "instruction": "",
        "id": "q1623",
        "input": "load rds into python",
        "output": "",
        "rule": [
            "d1623"
        ]
    },
    {
        "instruction": "",
        "id": "q1624",
        "input": "python verify datetime format of string",
        "output": "",
        "rule": [
            "d1624"
        ]
    },
    {
        "instruction": "",
        "id": "q1625",
        "input": "log normal distribution function in python",
        "output": "",
        "rule": [
            "d1625"
        ]
    },
    {
        "instruction": "",
        "id": "q1626",
        "input": "python view all rows in a pivot table cell",
        "output": "",
        "rule": [
            "d1626"
        ]
    },
    {
        "instruction": "",
        "id": "q1627",
        "input": "log normalization with zero values python",
        "output": "",
        "rule": [
            "d1627"
        ]
    },
    {
        "instruction": "",
        "id": "q1628",
        "input": "python webservers that have no external dependencies",
        "output": "",
        "rule": [
            "d1628"
        ]
    },
    {
        "instruction": "",
        "id": "q1629",
        "input": "loop through tokens in a string python",
        "output": "",
        "rule": [
            "d1629"
        ]
    },
    {
        "instruction": "",
        "id": "q1630",
        "input": "python what type of object is xml",
        "output": "",
        "rule": [
            "d1630"
        ]
    },
    {
        "instruction": "",
        "id": "q1631",
        "input": "mac osx not verrifying python",
        "output": "",
        "rule": [
            "d1631"
        ]
    },
    {
        "instruction": "",
        "id": "q1632",
        "input": "python windows close other windows except active window",
        "output": "",
        "rule": [
            "d1632"
        ]
    },
    {
        "instruction": "",
        "id": "q1633",
        "input": "magnitude of a matrix python",
        "output": "",
        "rule": [
            "d1633"
        ]
    },
    {
        "instruction": "",
        "id": "q1634",
        "input": "python windows shared memory api",
        "output": "",
        "rule": [
            "d1634"
        ]
    },
    {
        "instruction": "",
        "id": "q1635",
        "input": "make a matrix as vector python",
        "output": "",
        "rule": [
            "d1635"
        ]
    },
    {
        "instruction": "",
        "id": "q1636",
        "input": "python working with protobuf",
        "output": "",
        "rule": [
            "d1636"
        ]
    },
    {
        "instruction": "",
        "id": "q1637",
        "input": "make a python script executable ~chmod",
        "output": "",
        "rule": [
            "d1637"
        ]
    },
    {
        "instruction": "",
        "id": "q1638",
        "input": "python write json structure to file",
        "output": "",
        "rule": [
            "d1638"
        ]
    },
    {
        "instruction": "",
        "id": "q1639",
        "input": "make all items unique in list python",
        "output": "",
        "rule": [
            "d1639"
        ]
    },
    {
        "instruction": "",
        "id": "q1640",
        "input": "python write once property",
        "output": "",
        "rule": [
            "d1640"
        ]
    },
    {
        "instruction": "",
        "id": "q1641",
        "input": "make an array float python",
        "output": "",
        "rule": [
            "d1641"
        ]
    },
    {
        "instruction": "",
        "id": "q1642",
        "input": "python write text to file with different color",
        "output": "",
        "rule": [
            "d1642"
        ]
    },
    {
        "instruction": "",
        "id": "q1643",
        "input": "make an array of zeros in python",
        "output": "",
        "rule": [
            "d1643"
        ]
    },
    {
        "instruction": "",
        "id": "q1644",
        "input": "python writing a dictionary to file",
        "output": "",
        "rule": [
            "d1644"
        ]
    },
    {
        "instruction": "",
        "id": "q1645",
        "input": "make noise using python",
        "output": "",
        "rule": [
            "d1645"
        ]
    },
    {
        "instruction": "",
        "id": "q1646",
        "input": "python x and y gradients of an image",
        "output": "",
        "rule": [
            "d1646"
        ]
    },
    {
        "instruction": "",
        "id": "q1647",
        "input": "make time aware python",
        "output": "",
        "rule": [
            "d1647"
        ]
    },
    {
        "instruction": "",
        "id": "q1648",
        "input": "python yaml dump dict with blank ident",
        "output": "",
        "rule": [
            "d1648"
        ]
    },
    {
        "instruction": "",
        "id": "q1649",
        "input": "making a legend on a line graph subplot python",
        "output": "",
        "rule": [
            "d1649"
        ]
    },
    {
        "instruction": "",
        "id": "q1650",
        "input": "python yaml safe load json",
        "output": "",
        "rule": [
            "d1650"
        ]
    },
    {
        "instruction": "",
        "id": "q1651",
        "input": "making a string utf8 python",
        "output": "",
        "rule": [
            "d1651"
        ]
    },
    {
        "instruction": "",
        "id": "q1652",
        "input": "python yaml to dict",
        "output": "",
        "rule": [
            "d1652"
        ]
    },
    {
        "instruction": "",
        "id": "q1653",
        "input": "making changes to a url in python",
        "output": "",
        "rule": [
            "d1653"
        ]
    },
    {
        "instruction": "",
        "id": "q1654",
        "input": "python yaml write ordered dict",
        "output": "",
        "rule": [
            "d1654"
        ]
    },
    {
        "instruction": "",
        "id": "q1655",
        "input": "making one axis of imshow wider python",
        "output": "",
        "rule": [
            "d1655"
        ]
    },
    {
        "instruction": "",
        "id": "q1656",
        "input": "python zipfile extractall file not found",
        "output": "",
        "rule": [
            "d1656"
        ]
    },
    {
        "instruction": "",
        "id": "q1657",
        "input": "many to many relations python",
        "output": "",
        "rule": [
            "d1657"
        ]
    },
    {
        "instruction": "",
        "id": "q1658",
        "input": "python zipfile source and destination the same",
        "output": "",
        "rule": [
            "d1658"
        ]
    },
    {
        "instruction": "",
        "id": "q1659",
        "input": "map to dict python c++ swig",
        "output": "",
        "rule": [
            "d1659"
        ]
    },
    {
        "instruction": "",
        "id": "q1660",
        "input": "python zlib compress file",
        "output": "",
        "rule": [
            "d1660"
        ]
    },
    {
        "instruction": "",
        "id": "q1661",
        "input": "math average of a list python",
        "output": "",
        "rule": [
            "d1661"
        ]
    },
    {
        "instruction": "",
        "id": "q1662",
        "input": "python zmq pub build connection",
        "output": "",
        "rule": [
            "d1662"
        ]
    },
    {
        "instruction": "",
        "id": "q1663",
        "input": "matrix dot product python",
        "output": "",
        "rule": [
            "d1663"
        ]
    },
    {
        "instruction": "",
        "id": "q1664",
        "input": "python, how to check the dtype of a variable",
        "output": "",
        "rule": [
            "d1664"
        ]
    },
    {
        "instruction": "",
        "id": "q1665",
        "input": "max value of al ist python",
        "output": "",
        "rule": [
            "d1665"
        ]
    },
    {
        "instruction": "",
        "id": "q1666",
        "input": "python, how to run a bash command",
        "output": "",
        "rule": [
            "d1666"
        ]
    },
    {
        "instruction": "",
        "id": "q1667",
        "input": "maximize log likelihood python",
        "output": "",
        "rule": [
            "d1667"
        ]
    },
    {
        "instruction": "",
        "id": "q1668",
        "input": "python, lists to dict",
        "output": "",
        "rule": [
            "d1668"
        ]
    },
    {
        "instruction": "",
        "id": "q1669",
        "input": "maximum length of column in 2d array python",
        "output": "",
        "rule": [
            "d1669"
        ]
    },
    {
        "instruction": "",
        "id": "q1670",
        "input": "python3 2 list to dict",
        "output": "",
        "rule": [
            "d1670"
        ]
    },
    {
        "instruction": "",
        "id": "q1671",
        "input": "maximum numbers accepted by randrange in python",
        "output": "",
        "rule": [
            "d1671"
        ]
    },
    {
        "instruction": "",
        "id": "q1672",
        "input": "python3 change directory contextmanager",
        "output": "",
        "rule": [
            "d1672"
        ]
    },
    {
        "instruction": "",
        "id": "q1673",
        "input": "median filter data function python",
        "output": "",
        "rule": [
            "d1673"
        ]
    },
    {
        "instruction": "",
        "id": "q1674",
        "input": "python3 filter object is not",
        "output": "",
        "rule": [
            "d1674"
        ]
    },
    {
        "instruction": "",
        "id": "q1675",
        "input": "merge pdf into one python",
        "output": "",
        "rule": [
            "d1675"
        ]
    },
    {
        "instruction": "",
        "id": "q1676",
        "input": "python3 get datetime instance by milliseconds",
        "output": "",
        "rule": [
            "d1676"
        ]
    },
    {
        "instruction": "",
        "id": "q1677",
        "input": "mime type flask python",
        "output": "",
        "rule": [
            "d1677"
        ]
    },
    {
        "instruction": "",
        "id": "q1678",
        "input": "python3 get method by name",
        "output": "",
        "rule": [
            "d1678"
        ]
    },
    {
        "instruction": "",
        "id": "q1679",
        "input": "mock a function in python",
        "output": "",
        "rule": [
            "d1679"
        ]
    },
    {
        "instruction": "",
        "id": "q1680",
        "input": "python3 itertools flatten list",
        "output": "",
        "rule": [
            "d1680"
        ]
    },
    {
        "instruction": "",
        "id": "q1681",
        "input": "modify existing cmap python matplotlib",
        "output": "",
        "rule": [
            "d1681"
        ]
    },
    {
        "instruction": "",
        "id": "q1682",
        "input": "python3 json object must be str not bytes",
        "output": "",
        "rule": [
            "d1682"
        ]
    },
    {
        "instruction": "",
        "id": "q1683",
        "input": "mongo query to python converter",
        "output": "",
        "rule": [
            "d1683"
        ]
    },
    {
        "instruction": "",
        "id": "q1684",
        "input": "python3 json the json object must be str, not 'bytes'",
        "output": "",
        "rule": [
            "d1684"
        ]
    },
    {
        "instruction": "",
        "id": "q1685",
        "input": "multiple colons for string python",
        "output": "",
        "rule": [
            "d1685"
        ]
    },
    {
        "instruction": "",
        "id": "q1686",
        "input": "python3 logger timedrotatingfilehandler rotate doesn't work",
        "output": "",
        "rule": [
            "d1686"
        ]
    },
    {
        "instruction": "",
        "id": "q1687",
        "input": "multiple python devs using same server",
        "output": "",
        "rule": [
            "d1687"
        ]
    },
    {
        "instruction": "",
        "id": "q1688",
        "input": "python3 read first line of file",
        "output": "",
        "rule": [
            "d1688"
        ]
    },
    {
        "instruction": "",
        "id": "q1689",
        "input": "multiple sets of parentheses function python",
        "output": "",
        "rule": [
            "d1689"
        ]
    },
    {
        "instruction": "",
        "id": "q1690",
        "input": "python3 set default timezone",
        "output": "",
        "rule": [
            "d1690"
        ]
    },
    {
        "instruction": "",
        "id": "q1691",
        "input": "multiply vector element wise by matrix python",
        "output": "",
        "rule": [
            "d1691"
        ]
    },
    {
        "instruction": "",
        "id": "q1692",
        "input": "python3 stdout context manger",
        "output": "",
        "rule": [
            "d1692"
        ]
    },
    {
        "instruction": "",
        "id": "q1693",
        "input": "mutate boolean column python",
        "output": "",
        "rule": [
            "d1693"
        ]
    },
    {
        "instruction": "",
        "id": "q1694",
        "input": "python3 stop the current excutation",
        "output": "",
        "rule": [
            "d1694"
        ]
    },
    {
        "instruction": "",
        "id": "q1695",
        "input": "nested dictionaries python string",
        "output": "",
        "rule": [
            "d1695"
        ]
    },
    {
        "instruction": "",
        "id": "q1696",
        "input": "qgis python move layer up",
        "output": "",
        "rule": [
            "d1696"
        ]
    },
    {
        "instruction": "",
        "id": "q1697",
        "input": "nested dictionary python format string",
        "output": "",
        "rule": [
            "d1697"
        ]
    },
    {
        "instruction": "",
        "id": "q1698",
        "input": "qpython3 getlocale locale query failed",
        "output": "",
        "rule": [
            "d1698"
        ]
    },
    {
        "instruction": "",
        "id": "q1699",
        "input": "no is power of 2 in python",
        "output": "",
        "rule": [
            "d1699"
        ]
    },
    {
        "instruction": "",
        "id": "q1700",
        "input": "qrcode python how to save image to file",
        "output": "",
        "rule": [
            "d1700"
        ]
    },
    {
        "instruction": "",
        "id": "q1701",
        "input": "no style with name docx python",
        "output": "",
        "rule": [
            "d1701"
        ]
    },
    {
        "instruction": "",
        "id": "q1702",
        "input": "question make python copy",
        "output": "",
        "rule": [
            "d1702"
        ]
    },
    {
        "instruction": "",
        "id": "q1703",
        "input": "noise in an image python",
        "output": "",
        "rule": [
            "d1703"
        ]
    },
    {
        "instruction": "",
        "id": "q1704",
        "input": "random int with if else python",
        "output": "",
        "rule": [
            "d1704"
        ]
    },
    {
        "instruction": "",
        "id": "q1705",
        "input": "normalize cifar10 input python with tensorflow",
        "output": "",
        "rule": [
            "d1705"
        ]
    },
    {
        "instruction": "",
        "id": "q1706",
        "input": "random integer in a function set to variable python",
        "output": "",
        "rule": [
            "d1706"
        ]
    },
    {
        "instruction": "",
        "id": "q1707",
        "input": "normalize histogram python log",
        "output": "",
        "rule": [
            "d1707"
        ]
    },
    {
        "instruction": "",
        "id": "q1708",
        "input": "random uniform high and low data python",
        "output": "",
        "rule": [
            "d1708"
        ]
    },
    {
        "instruction": "",
        "id": "q1709",
        "input": "np array float python to string base64",
        "output": "",
        "rule": [
            "d1709"
        ]
    },
    {
        "instruction": "",
        "id": "q1710",
        "input": "range of indices of list python",
        "output": "",
        "rule": [
            "d1710"
        ]
    },
    {
        "instruction": "",
        "id": "q1711",
        "input": "number of prime factors in python",
        "output": "",
        "rule": [
            "d1711"
        ]
    },
    {
        "instruction": "",
        "id": "q1712",
        "input": "raspberry python get status of gpio pins",
        "output": "",
        "rule": [
            "d1712"
        ]
    },
    {
        "instruction": "",
        "id": "q1713",
        "input": "number of rows in a df python",
        "output": "",
        "rule": [
            "d1713"
        ]
    },
    {
        "instruction": "",
        "id": "q1714",
        "input": "read all subkeys from a key regedit python",
        "output": "",
        "rule": [
            "d1714"
        ]
    },
    {
        "instruction": "",
        "id": "q1715",
        "input": "number of rows in dataset in python",
        "output": "",
        "rule": [
            "d1715"
        ]
    },
    {
        "instruction": "",
        "id": "q1716",
        "input": "read config yaml file from python",
        "output": "",
        "rule": [
            "d1716"
        ]
    },
    {
        "instruction": "",
        "id": "q1717",
        "input": "obtain model accuracy in python",
        "output": "",
        "rule": [
            "d1717"
        ]
    },
    {
        "instruction": "",
        "id": "q1718",
        "input": "read data from file to matrix in python",
        "output": "",
        "rule": [
            "d1718"
        ]
    },
    {
        "instruction": "",
        "id": "q1719",
        "input": "one hot encode list of words in python",
        "output": "",
        "rule": [
            "d1719"
        ]
    },
    {
        "instruction": "",
        "id": "q1720",
        "input": "read file with lambda python",
        "output": "",
        "rule": [
            "d1720"
        ]
    },
    {
        "instruction": "",
        "id": "q1721",
        "input": "one to multiple mapping in python",
        "output": "",
        "rule": [
            "d1721"
        ]
    },
    {
        "instruction": "",
        "id": "q1722",
        "input": "read html as plain text file python",
        "output": "",
        "rule": [
            "d1722"
        ]
    },
    {
        "instruction": "",
        "id": "q1723",
        "input": "open geojson file with python",
        "output": "",
        "rule": [
            "d1723"
        ]
    },
    {
        "instruction": "",
        "id": "q1724",
        "input": "read json from web with python",
        "output": "",
        "rule": [
            "d1724"
        ]
    },
    {
        "instruction": "",
        "id": "q1725",
        "input": "open modelica generate python",
        "output": "",
        "rule": [
            "d1725"
        ]
    },
    {
        "instruction": "",
        "id": "q1726",
        "input": "read username and password from a file python3",
        "output": "",
        "rule": [
            "d1726"
        ]
    },
    {
        "instruction": "",
        "id": "q1727",
        "input": "open pdf specific size python",
        "output": "",
        "rule": [
            "d1727"
        ]
    },
    {
        "instruction": "",
        "id": "q1728",
        "input": "reading an api into python",
        "output": "",
        "rule": [
            "d1728"
        ]
    },
    {
        "instruction": "",
        "id": "q1729",
        "input": "open syntax python with variables as filename",
        "output": "",
        "rule": [
            "d1729"
        ]
    },
    {
        "instruction": "",
        "id": "q1730",
        "input": "reading compiled code in python",
        "output": "",
        "rule": [
            "d1730"
        ]
    },
    {
        "instruction": "",
        "id": "q1731",
        "input": "opening a file with certain owner/permissions python",
        "output": "",
        "rule": [
            "d1731"
        ]
    },
    {
        "instruction": "",
        "id": "q1732",
        "input": "recursive inser binary tree nodes python",
        "output": "",
        "rule": [
            "d1732"
        ]
    },
    {
        "instruction": "",
        "id": "q1733",
        "input": "opening serial port in python",
        "output": "",
        "rule": [
            "d1733"
        ]
    },
    {
        "instruction": "",
        "id": "q1734",
        "input": "recursively flatten list python3",
        "output": "",
        "rule": [
            "d1734"
        ]
    },
    {
        "instruction": "",
        "id": "q1735",
        "input": "order of elements in each subset python",
        "output": "",
        "rule": [
            "d1735"
        ]
    },
    {
        "instruction": "",
        "id": "q1736",
        "input": "recussion solution show all permutations python",
        "output": "",
        "rule": [
            "d1736"
        ]
    },
    {
        "instruction": "",
        "id": "q1737",
        "input": "outputting lists into tables python",
        "output": "",
        "rule": [
            "d1737"
        ]
    },
    {
        "instruction": "",
        "id": "q1738",
        "input": "redirect without refresh python flask",
        "output": "",
        "rule": [
            "d1738"
        ]
    },
    {
        "instruction": "",
        "id": "q1739",
        "input": "pad ones using python",
        "output": "",
        "rule": [
            "d1739"
        ]
    },
    {
        "instruction": "",
        "id": "q1740",
        "input": "redis get multiple keys with python",
        "output": "",
        "rule": [
            "d1740"
        ]
    },
    {
        "instruction": "",
        "id": "q1741",
        "input": "pad with 0s python",
        "output": "",
        "rule": [
            "d1741"
        ]
    },
    {
        "instruction": "",
        "id": "q1742",
        "input": "reduce multiple space to one python",
        "output": "",
        "rule": [
            "d1742"
        ]
    },
    {
        "instruction": "",
        "id": "q1743",
        "input": "padding code for python",
        "output": "",
        "rule": [
            "d1743"
        ]
    },
    {
        "instruction": "",
        "id": "q1744",
        "input": "refer to project directory in python",
        "output": "",
        "rule": [
            "d1744"
        ]
    },
    {
        "instruction": "",
        "id": "q1745",
        "input": "panda python how to get maximum value of a column",
        "output": "",
        "rule": [
            "d1745"
        ]
    },
    {
        "instruction": "",
        "id": "q1746",
        "input": "regex contains only letters and numbers with underscore python",
        "output": "",
        "rule": [
            "d1746"
        ]
    },
    {
        "instruction": "",
        "id": "q1747",
        "input": "paramiko python + remove remote file",
        "output": "",
        "rule": [
            "d1747"
        ]
    },
    {
        "instruction": "",
        "id": "q1748",
        "input": "regex python check symbol at end of line",
        "output": "",
        "rule": [
            "d1748"
        ]
    },
    {
        "instruction": "",
        "id": "q1749",
        "input": "parsing custom log files with python",
        "output": "",
        "rule": [
            "d1749"
        ]
    },
    {
        "instruction": "",
        "id": "q1750",
        "input": "relative path names python",
        "output": "",
        "rule": [
            "d1750"
        ]
    },
    {
        "instruction": "",
        "id": "q1751",
        "input": "parsing oder dict in python",
        "output": "",
        "rule": [
            "d1751"
        ]
    },
    {
        "instruction": "",
        "id": "q1752",
        "input": "remove all duplicates elements from a list python and keep only unique elements",
        "output": "",
        "rule": [
            "d1752"
        ]
    },
    {
        "instruction": "",
        "id": "q1753",
        "input": "pass none as default value in python or use defualt value",
        "output": "",
        "rule": [
            "d1753"
        ]
    },
    {
        "instruction": "",
        "id": "q1754",
        "input": "remove all spaces in strings python",
        "output": "",
        "rule": [
            "d1754"
        ]
    },
    {
        "instruction": "",
        "id": "q1755",
        "input": "passing function as parametr python",
        "output": "",
        "rule": [
            "d1755"
        ]
    },
    {
        "instruction": "",
        "id": "q1756",
        "input": "remove arguement from arg parser python",
        "output": "",
        "rule": [
            "d1756"
        ]
    },
    {
        "instruction": "",
        "id": "q1757",
        "input": "pick random from set python",
        "output": "",
        "rule": [
            "d1757"
        ]
    },
    {
        "instruction": "",
        "id": "q1758",
        "input": "remove backslash last char from string python",
        "output": "",
        "rule": [
            "d1758"
        ]
    },
    {
        "instruction": "",
        "id": "q1759",
        "input": "pil python image flip vertically",
        "output": "",
        "rule": [
            "d1759"
        ]
    },
    {
        "instruction": "",
        "id": "q1760",
        "input": "remove character type columns from dataset using python",
        "output": "",
        "rule": [
            "d1760"
        ]
    },
    {
        "instruction": "",
        "id": "q1761",
        "input": "place sql query into dictionary python",
        "output": "",
        "rule": [
            "d1761"
        ]
    },
    {
        "instruction": "",
        "id": "q1762",
        "input": "remove comma from string in python 3",
        "output": "",
        "rule": [
            "d1762"
        ]
    },
    {
        "instruction": "",
        "id": "q1763",
        "input": "plot precision recall curve in python matplotlib",
        "output": "",
        "rule": [
            "d1763"
        ]
    },
    {
        "instruction": "",
        "id": "q1764",
        "input": "remove duplicate elements in list preserve order python",
        "output": "",
        "rule": [
            "d1764"
        ]
    },
    {
        "instruction": "",
        "id": "q1765",
        "input": "points from a set of coordinates in python",
        "output": "",
        "rule": [
            "d1765"
        ]
    },
    {
        "instruction": "",
        "id": "q1766",
        "input": "remove duplicates from a sequence python",
        "output": "",
        "rule": [
            "d1766"
        ]
    },
    {
        "instruction": "",
        "id": "q1767",
        "input": "prettytable rename column python",
        "output": "",
        "rule": [
            "d1767"
        ]
    },
    {
        "instruction": "",
        "id": "q1768",
        "input": "remove invalid xml characters python",
        "output": "",
        "rule": [
            "d1768"
        ]
    },
    {
        "instruction": "",
        "id": "q1769",
        "input": "print duration per hour between start time and end time in python",
        "output": "",
        "rule": [
            "d1769"
        ]
    },
    {
        "instruction": "",
        "id": "q1770",
        "input": "remove items in a python dictionary",
        "output": "",
        "rule": [
            "d1770"
        ]
    },
    {
        "instruction": "",
        "id": "q1771",
        "input": "print function in python logging",
        "output": "",
        "rule": [
            "d1771"
        ]
    },
    {
        "instruction": "",
        "id": "q1772",
        "input": "remove letter other than english letters python",
        "output": "",
        "rule": [
            "d1772"
        ]
    },
    {
        "instruction": "",
        "id": "q1773",
        "input": "print many spaces in format python",
        "output": "",
        "rule": [
            "d1773"
        ]
    },
    {
        "instruction": "",
        "id": "q1774",
        "input": "remove punctuation from python key",
        "output": "",
        "rule": [
            "d1774"
        ]
    },
    {
        "instruction": "",
        "id": "q1775",
        "input": "print ram memory in python",
        "output": "",
        "rule": [
            "d1775"
        ]
    },
    {
        "instruction": "",
        "id": "q1776",
        "input": "remove query from url python",
        "output": "",
        "rule": [
            "d1776"
        ]
    },
    {
        "instruction": "",
        "id": "q1777",
        "input": "print the type of a varible python",
        "output": "",
        "rule": [
            "d1777"
        ]
    },
    {
        "instruction": "",
        "id": "q1778",
        "input": "remove repeated entries in list python",
        "output": "",
        "rule": [
            "d1778"
        ]
    },
    {
        "instruction": "",
        "id": "q1779",
        "input": "print used cuda device in python",
        "output": "",
        "rule": [
            "d1779"
        ]
    },
    {
        "instruction": "",
        "id": "q1780",
        "input": "remove series object from list python",
        "output": "",
        "rule": [
            "d1780"
        ]
    },
    {
        "instruction": "",
        "id": "q1781",
        "input": "print without a new line in python",
        "output": "",
        "rule": [
            "d1781"
        ]
    },
    {
        "instruction": "",
        "id": "q1782",
        "input": "remove spaces and punctuation python",
        "output": "",
        "rule": [
            "d1782"
        ]
    },
    {
        "instruction": "",
        "id": "q1783",
        "input": "print without new line in python",
        "output": "",
        "rule": [
            "d1783"
        ]
    },
    {
        "instruction": "",
        "id": "q1784",
        "input": "remove spaces python string",
        "output": "",
        "rule": [
            "d1784"
        ]
    },
    {
        "instruction": "",
        "id": "q1785",
        "input": "printing new line in python using string",
        "output": "",
        "rule": [
            "d1785"
        ]
    },
    {
        "instruction": "",
        "id": "q1786",
        "input": "remove spacing charactes python",
        "output": "",
        "rule": [
            "d1786"
        ]
    },
    {
        "instruction": "",
        "id": "q1787",
        "input": "printing nth occurence of character in string using python",
        "output": "",
        "rule": [
            "d1787"
        ]
    },
    {
        "instruction": "",
        "id": "q1788",
        "input": "removing a file from a bucket aws s3 python",
        "output": "",
        "rule": [
            "d1788"
        ]
    },
    {
        "instruction": "",
        "id": "q1789",
        "input": "printing request headers in python flask",
        "output": "",
        "rule": [
            "d1789"
        ]
    },
    {
        "instruction": "",
        "id": "q1790",
        "input": "removing duplicate objects from list in python",
        "output": "",
        "rule": [
            "d1790"
        ]
    },
    {
        "instruction": "",
        "id": "q1791",
        "input": "psutil python get total ram",
        "output": "",
        "rule": [
            "d1791"
        ]
    },
    {
        "instruction": "",
        "id": "q1792",
        "input": "reorder multiple rows as a column index in python",
        "output": "",
        "rule": [
            "d1792"
        ]
    },
    {
        "instruction": "",
        "id": "q1793",
        "input": "psutil python memory variable",
        "output": "",
        "rule": [
            "d1793"
        ]
    },
    {
        "instruction": "",
        "id": "q1794",
        "input": "replace a word in a string using start and end index python",
        "output": "",
        "rule": [
            "d1794"
        ]
    },
    {
        "instruction": "",
        "id": "q1795",
        "input": "put stdout of another method into a variable in python",
        "output": "",
        "rule": [
            "d1795"
        ]
    },
    {
        "instruction": "",
        "id": "q1796",
        "input": "replace nan with none python",
        "output": "",
        "rule": [
            "d1796"
        ]
    },
    {
        "instruction": "",
        "id": "q1797",
        "input": "putting a scraped table into a list python",
        "output": "",
        "rule": [
            "d1797"
        ]
    },
    {
        "instruction": "",
        "id": "q1798",
        "input": "replacing string values for specified columns in python data frame",
        "output": "",
        "rule": [
            "d1798"
        ]
    },
    {
        "instruction": "",
        "id": "q1799",
        "input": "python '\\x' plus an int",
        "output": "",
        "rule": [
            "d1799"
        ]
    },
    {
        "instruction": "",
        "id": "q1800",
        "input": "request form get python flask",
        "output": "",
        "rule": [
            "d1800"
        ]
    },
    {
        "instruction": "",
        "id": "q1801",
        "input": "python 'deprecationdict' object has no attribute 'mean'",
        "output": "",
        "rule": [
            "d1801"
        ]
    },
    {
        "instruction": "",
        "id": "q1802",
        "input": "rescaling a 10bit images to 8bit in python",
        "output": "",
        "rule": [
            "d1802"
        ]
    },
    {
        "instruction": "",
        "id": "q1803",
        "input": "python 'point' object is not iterable",
        "output": "",
        "rule": [
            "d1803"
        ]
    },
    {
        "instruction": "",
        "id": "q1804",
        "input": "reset index multi index python",
        "output": "",
        "rule": [
            "d1804"
        ]
    },
    {
        "instruction": "",
        "id": "q1805",
        "input": "python 'print' is not defined",
        "output": "",
        "rule": [
            "d1805"
        ]
    },
    {
        "instruction": "",
        "id": "q1806",
        "input": "reset index with multi index python",
        "output": "",
        "rule": [
            "d1806"
        ]
    },
    {
        "instruction": "",
        "id": "q1807",
        "input": "python 2 tkinter folder chooser",
        "output": "",
        "rule": [
            "d1807"
        ]
    },
    {
        "instruction": "",
        "id": "q1808",
        "input": "reshape the images into 2d image python",
        "output": "",
        "rule": [
            "d1808"
        ]
    },
    {
        "instruction": "",
        "id": "q1809",
        "input": "python 2to3 not found",
        "output": "",
        "rule": [
            "d1809"
        ]
    },
    {
        "instruction": "",
        "id": "q1810",
        "input": "respone base64 encoding in python3",
        "output": "",
        "rule": [
            "d1810"
        ]
    },
    {
        "instruction": "",
        "id": "q1811",
        "input": "python 3 beautifulsoup4 get page back",
        "output": "",
        "rule": [
            "d1811"
        ]
    },
    {
        "instruction": "",
        "id": "q1812",
        "input": "restrict file modification python",
        "output": "",
        "rule": [
            "d1812"
        ]
    },
    {
        "instruction": "",
        "id": "q1813",
        "input": "python 3 bound unbound method",
        "output": "",
        "rule": [
            "d1813"
        ]
    },
    {
        "instruction": "",
        "id": "q1814",
        "input": "retrieving column names from sql in python",
        "output": "",
        "rule": [
            "d1814"
        ]
    },
    {
        "instruction": "",
        "id": "q1815",
        "input": "python 3 django url validator",
        "output": "",
        "rule": [
            "d1815"
        ]
    },
    {
        "instruction": "",
        "id": "q1816",
        "input": "return a field in python on max condition",
        "output": "",
        "rule": [
            "d1816"
        ]
    },
    {
        "instruction": "",
        "id": "q1817",
        "input": "python 3 fft and fftshift with fftw",
        "output": "",
        "rule": [
            "d1817"
        ]
    },
    {
        "instruction": "",
        "id": "q1818",
        "input": "return a list of all unique letters in a string python",
        "output": "",
        "rule": [
            "d1818"
        ]
    },
    {
        "instruction": "",
        "id": "q1819",
        "input": "python 3 formatting seconds",
        "output": "",
        "rule": [
            "d1819"
        ]
    },
    {
        "instruction": "",
        "id": "q1820",
        "input": "return a list of the vowels that are not in s python",
        "output": "",
        "rule": [
            "d1820"
        ]
    },
    {
        "instruction": "",
        "id": "q1821",
        "input": "python 3 get name of calling routing",
        "output": "",
        "rule": [
            "d1821"
        ]
    },
    {
        "instruction": "",
        "id": "q1822",
        "input": "return if year of date typed in is leap year python",
        "output": "",
        "rule": [
            "d1822"
        ]
    },
    {
        "instruction": "",
        "id": "q1823",
        "input": "python 3 get the first sunday of the month",
        "output": "",
        "rule": [
            "d1823"
        ]
    },
    {
        "instruction": "",
        "id": "q1824",
        "input": "return index of row in series python",
        "output": "",
        "rule": [
            "d1824"
        ]
    },
    {
        "instruction": "",
        "id": "q1825",
        "input": "python 3 how to filter out words from a dictionary",
        "output": "",
        "rule": [
            "d1825"
        ]
    },
    {
        "instruction": "",
        "id": "q1826",
        "input": "return outer join python",
        "output": "",
        "rule": [
            "d1826"
        ]
    },
    {
        "instruction": "",
        "id": "q1827",
        "input": "python 3 input with default value",
        "output": "",
        "rule": [
            "d1827"
        ]
    },
    {
        "instruction": "",
        "id": "q1828",
        "input": "return response from an asynchronous call in python",
        "output": "",
        "rule": [
            "d1828"
        ]
    },
    {
        "instruction": "",
        "id": "q1829",
        "input": "python 3 interate over a dict",
        "output": "",
        "rule": [
            "d1829"
        ]
    },
    {
        "instruction": "",
        "id": "q1830",
        "input": "return type information in python",
        "output": "",
        "rule": [
            "d1830"
        ]
    },
    {
        "instruction": "",
        "id": "q1831",
        "input": "python 3 join strings on multiple",
        "output": "",
        "rule": [
            "d1831"
        ]
    },
    {
        "instruction": "",
        "id": "q1832",
        "input": "reverse edges of a graph python",
        "output": "",
        "rule": [
            "d1832"
        ]
    },
    {
        "instruction": "",
        "id": "q1833",
        "input": "python 3 match a string sequence exactly in another string",
        "output": "",
        "rule": [
            "d1833"
        ]
    },
    {
        "instruction": "",
        "id": "q1834",
        "input": "rnn reshape data based on 2d data frame python",
        "output": "",
        "rule": [
            "d1834"
        ]
    },
    {
        "instruction": "",
        "id": "q1835",
        "input": "python 3 parse datetime timezone",
        "output": "",
        "rule": [
            "d1835"
        ]
    },
    {
        "instruction": "",
        "id": "q1836",
        "input": "rot13 algorithim in python 3",
        "output": "",
        "rule": [
            "d1836"
        ]
    },
    {
        "instruction": "",
        "id": "q1837",
        "input": "python 3 redirect stdout to file",
        "output": "",
        "rule": [
            "d1837"
        ]
    },
    {
        "instruction": "",
        "id": "q1838",
        "input": "round off a float to int in python",
        "output": "",
        "rule": [
            "d1838"
        ]
    },
    {
        "instruction": "",
        "id": "q1839",
        "input": "round off float to intin python",
        "output": "",
        "rule": [
            "d1839"
        ]
    },
    {
        "instruction": "",
        "id": "q1840",
        "input": "python 3 store clipboard to variable",
        "output": "",
        "rule": [
            "d1840"
        ]
    },
    {
        "instruction": "",
        "id": "q1841",
        "input": "round the value of array numpy, python",
        "output": "",
        "rule": [
            "d1841"
        ]
    },
    {
        "instruction": "",
        "id": "q1842",
        "input": "python 3 string normalize",
        "output": "",
        "rule": [
            "d1842"
        ]
    },
    {
        "instruction": "",
        "id": "q1843",
        "input": "rove file extension name python",
        "output": "",
        "rule": [
            "d1843"
        ]
    },
    {
        "instruction": "",
        "id": "q1844",
        "input": "python 3d linear interpolation",
        "output": "",
        "rule": [
            "d1844"
        ]
    },
    {
        "instruction": "",
        "id": "q1845",
        "input": "run function with self variable python",
        "output": "",
        "rule": [
            "d1845"
        ]
    },
    {
        "instruction": "",
        "id": "q1846",
        "input": "python abort(404) global name 'abort' is not defined",
        "output": "",
        "rule": [
            "d1846"
        ]
    },
    {
        "instruction": "",
        "id": "q1847",
        "input": "run python test current directory",
        "output": "",
        "rule": [
            "d1847"
        ]
    },
    {
        "instruction": "",
        "id": "q1848",
        "input": "python abstract method raise notimplemented",
        "output": "",
        "rule": [
            "d1848"
        ]
    },
    {
        "instruction": "",
        "id": "q1849",
        "input": "run python test using tox",
        "output": "",
        "rule": [
            "d1849"
        ]
    },
    {
        "instruction": "",
        "id": "q1850",
        "input": "python access numpy array range",
        "output": "",
        "rule": [
            "d1850"
        ]
    },
    {
        "instruction": "",
        "id": "q1851",
        "input": "running nose tests python",
        "output": "",
        "rule": [
            "d1851"
        ]
    },
    {
        "instruction": "",
        "id": "q1852",
        "input": "python access property dynamically",
        "output": "",
        "rule": [
            "d1852"
        ]
    },
    {
        "instruction": "",
        "id": "q1853",
        "input": "saving a html file python",
        "output": "",
        "rule": [
            "d1853"
        ]
    },
    {
        "instruction": "",
        "id": "q1854",
        "input": "python accpet http request mock server",
        "output": "",
        "rule": [
            "d1854"
        ]
    },
    {
        "instruction": "",
        "id": "q1855",
        "input": "scale image on pil python",
        "output": "",
        "rule": [
            "d1855"
        ]
    },
    {
        "instruction": "",
        "id": "q1856",
        "input": "python add a line to the end of a text file",
        "output": "",
        "rule": [
            "d1856"
        ]
    },
    {
        "instruction": "",
        "id": "q1857",
        "input": "scapy python apply filter to pcap and export new file",
        "output": "",
        "rule": [
            "d1857"
        ]
    },
    {
        "instruction": "",
        "id": "q1858",
        "input": "scatter plot python deside each other",
        "output": "",
        "rule": [
            "d1858"
        ]
    },
    {
        "instruction": "",
        "id": "q1859",
        "input": "python add item in printing a list",
        "output": "",
        "rule": [
            "d1859"
        ]
    },
    {
        "instruction": "",
        "id": "q1860",
        "input": "scrap a fixed amount of links from a webpage python",
        "output": "",
        "rule": [
            "d1860"
        ]
    },
    {
        "instruction": "",
        "id": "q1861",
        "input": "python add noise to model",
        "output": "",
        "rule": [
            "d1861"
        ]
    },
    {
        "instruction": "",
        "id": "q1862",
        "input": "script for ui window in maya 2018 using python",
        "output": "",
        "rule": [
            "d1862"
        ]
    },
    {
        "instruction": "",
        "id": "q1863",
        "input": "python add property method dynamic to object",
        "output": "",
        "rule": [
            "d1863"
        ]
    },
    {
        "instruction": "",
        "id": "q1864",
        "input": "see if two strings are the same python",
        "output": "",
        "rule": [
            "d1864"
        ]
    },
    {
        "instruction": "",
        "id": "q1865",
        "input": "python all methods object show",
        "output": "",
        "rule": [
            "d1865"
        ]
    },
    {
        "instruction": "",
        "id": "q1866",
        "input": "select folder dialog in python",
        "output": "",
        "rule": [
            "d1866"
        ]
    },
    {
        "instruction": "",
        "id": "q1867",
        "input": "python argarse custom action",
        "output": "",
        "rule": [
            "d1867"
        ]
    },
    {
        "instruction": "",
        "id": "q1868",
        "input": "select last row python",
        "output": "",
        "rule": [
            "d1868"
        ]
    },
    {
        "instruction": "",
        "id": "q1869",
        "input": "python argmin ndarray too large",
        "output": "",
        "rule": [
            "d1869"
        ]
    },
    {
        "instruction": "",
        "id": "q1870",
        "input": "selecting a column in python matrix",
        "output": "",
        "rule": [
            "d1870"
        ]
    },
    {
        "instruction": "",
        "id": "q1871",
        "input": "python argparse parser no optional",
        "output": "",
        "rule": [
            "d1871"
        ]
    },
    {
        "instruction": "",
        "id": "q1872",
        "input": "send an email in python with flask",
        "output": "",
        "rule": [
            "d1872"
        ]
    },
    {
        "instruction": "",
        "id": "q1873",
        "input": "python array not nan",
        "output": "",
        "rule": [
            "d1873"
        ]
    },
    {
        "instruction": "",
        "id": "q1874",
        "input": "send text message using python",
        "output": "",
        "rule": [
            "d1874"
        ]
    },
    {
        "instruction": "",
        "id": "q1875",
        "input": "python array slice start stop skip",
        "output": "",
        "rule": [
            "d1875"
        ]
    },
    {
        "instruction": "",
        "id": "q1876",
        "input": "server side url parsing in python",
        "output": "",
        "rule": [
            "d1876"
        ]
    },
    {
        "instruction": "",
        "id": "q1877",
        "input": "python array split to chunk",
        "output": "",
        "rule": [
            "d1877"
        ]
    },
    {
        "instruction": "",
        "id": "q1878",
        "input": "serversocket in python inbackround, forever",
        "output": "",
        "rule": [
            "d1878"
        ]
    },
    {
        "instruction": "",
        "id": "q1879",
        "input": "python array to dict using attribute",
        "output": "",
        "rule": [
            "d1879"
        ]
    },
    {
        "instruction": "",
        "id": "q1880",
        "input": "set a default value if null python",
        "output": "",
        "rule": [
            "d1880"
        ]
    },
    {
        "instruction": "",
        "id": "q1881",
        "input": "python array to numpy scalar",
        "output": "",
        "rule": [
            "d1881"
        ]
    },
    {
        "instruction": "",
        "id": "q1882",
        "input": "set axes limits in a plot python",
        "output": "",
        "rule": [
            "d1882"
        ]
    },
    {
        "instruction": "",
        "id": "q1883",
        "input": "python ascii array build in",
        "output": "",
        "rule": [
            "d1883"
        ]
    },
    {
        "instruction": "",
        "id": "q1884",
        "input": "set color palette for gmap python",
        "output": "",
        "rule": [
            "d1884"
        ]
    },
    {
        "instruction": "",
        "id": "q1885",
        "input": "python assert all value in list are equal",
        "output": "",
        "rule": [
            "d1885"
        ]
    },
    {
        "instruction": "",
        "id": "q1886",
        "input": "set color value of a pixel python",
        "output": "",
        "rule": [
            "d1886"
        ]
    },
    {
        "instruction": "",
        "id": "q1887",
        "input": "python assert check type",
        "output": "",
        "rule": [
            "d1887"
        ]
    },
    {
        "instruction": "",
        "id": "q1888",
        "input": "set default in dictionary python",
        "output": "",
        "rule": [
            "d1888"
        ]
    },
    {
        "instruction": "",
        "id": "q1889",
        "input": "python asyncio add task in task",
        "output": "",
        "rule": [
            "d1889"
        ]
    },
    {
        "instruction": "",
        "id": "q1890",
        "input": "set horizontal line python",
        "output": "",
        "rule": [
            "d1890"
        ]
    },
    {
        "instruction": "",
        "id": "q1891",
        "input": "python asyncio wrap function async",
        "output": "",
        "rule": [
            "d1891"
        ]
    },
    {
        "instruction": "",
        "id": "q1892",
        "input": "set particular elements of a matric to zero python",
        "output": "",
        "rule": [
            "d1892"
        ]
    },
    {
        "instruction": "",
        "id": "q1893",
        "input": "python attr getter key",
        "output": "",
        "rule": [
            "d1893"
        ]
    },
    {
        "instruction": "",
        "id": "q1894",
        "input": "set python opposite of intersection",
        "output": "",
        "rule": [
            "d1894"
        ]
    },
    {
        "instruction": "",
        "id": "q1895",
        "input": "python autcomplete method name",
        "output": "",
        "rule": [
            "d1895"
        ]
    },
    {
        "instruction": "",
        "id": "q1896",
        "input": "setting a variable for user prompt python",
        "output": "",
        "rule": [
            "d1896"
        ]
    },
    {
        "instruction": "",
        "id": "q1897",
        "input": "python auto doc args",
        "output": "",
        "rule": [
            "d1897"
        ]
    },
    {
        "instruction": "",
        "id": "q1898",
        "input": "setting yaxis as log in python",
        "output": "",
        "rule": [
            "d1898"
        ]
    },
    {
        "instruction": "",
        "id": "q1899",
        "input": "python automaticlally change camelcase to snakecase",
        "output": "",
        "rule": [
            "d1899"
        ]
    },
    {
        "instruction": "",
        "id": "q1900",
        "input": "shape along x dimension in python",
        "output": "",
        "rule": [
            "d1900"
        ]
    },
    {
        "instruction": "",
        "id": "q1901",
        "input": "python average of values in dictionary",
        "output": "",
        "rule": [
            "d1901"
        ]
    },
    {
        "instruction": "",
        "id": "q1902",
        "input": "shortcut for substring in python",
        "output": "",
        "rule": [
            "d1902"
        ]
    },
    {
        "instruction": "",
        "id": "q1903",
        "input": "python average value or array",
        "output": "",
        "rule": [
            "d1903"
        ]
    },
    {
        "instruction": "",
        "id": "q1904",
        "input": "python average with if condition",
        "output": "",
        "rule": [
            "d1904"
        ]
    },
    {
        "instruction": "",
        "id": "q1905",
        "input": "show associated methods in python",
        "output": "",
        "rule": [
            "d1905"
        ]
    },
    {
        "instruction": "",
        "id": "q1906",
        "input": "python azure analysis service connect adomd",
        "output": "",
        "rule": [
            "d1906"
        ]
    },
    {
        "instruction": "",
        "id": "q1907",
        "input": "show attributes of object python",
        "output": "",
        "rule": [
            "d1907"
        ]
    },
    {
        "instruction": "",
        "id": "q1908",
        "input": "python background queue httpserver",
        "output": "",
        "rule": [
            "d1908"
        ]
    },
    {
        "instruction": "",
        "id": "q1909",
        "input": "show the \\n in python screen",
        "output": "",
        "rule": [
            "d1909"
        ]
    },
    {
        "instruction": "",
        "id": "q1910",
        "input": "python base64 decode to float array",
        "output": "",
        "rule": [
            "d1910"
        ]
    },
    {
        "instruction": "",
        "id": "q1911",
        "input": "show tsv file in python",
        "output": "",
        "rule": [
            "d1911"
        ]
    },
    {
        "instruction": "",
        "id": "q1912",
        "input": "python batch input matrix",
        "output": "",
        "rule": [
            "d1912"
        ]
    },
    {
        "instruction": "",
        "id": "q1913",
        "input": "signleton db2 conneciton python",
        "output": "",
        "rule": [
            "d1913"
        ]
    },
    {
        "instruction": "",
        "id": "q1914",
        "input": "python beautifulsoup 'nonetype' object is not callable",
        "output": "",
        "rule": [
            "d1914"
        ]
    },
    {
        "instruction": "",
        "id": "q1915",
        "input": "sine wave python code",
        "output": "",
        "rule": [
            "d1915"
        ]
    },
    {
        "instruction": "",
        "id": "q1916",
        "input": "python behavor tree json",
        "output": "",
        "rule": [
            "d1916"
        ]
    },
    {
        "instruction": "",
        "id": "q1917",
        "input": "singleton implementation python 3",
        "output": "",
        "rule": [
            "d1917"
        ]
    },
    {
        "instruction": "",
        "id": "q1918",
        "input": "python best way to stringify a date",
        "output": "",
        "rule": [
            "d1918"
        ]
    },
    {
        "instruction": "",
        "id": "q1919",
        "input": "skip lines that start with # in python",
        "output": "",
        "rule": [
            "d1919"
        ]
    },
    {
        "instruction": "",
        "id": "q1920",
        "input": "python best way to use swagger",
        "output": "",
        "rule": [
            "d1920"
        ]
    },
    {
        "instruction": "",
        "id": "q1921",
        "input": "slice a column from 2d list python",
        "output": "",
        "rule": [
            "d1921"
        ]
    },
    {
        "instruction": "",
        "id": "q1922",
        "input": "python bin interval to index",
        "output": "",
        "rule": [
            "d1922"
        ]
    },
    {
        "instruction": "",
        "id": "q1923",
        "input": "sorting an array in descending order in python",
        "output": "",
        "rule": [
            "d1923"
        ]
    },
    {
        "instruction": "",
        "id": "q1924",
        "input": "python bind event to a entry in treeview",
        "output": "",
        "rule": [
            "d1924"
        ]
    },
    {
        "instruction": "",
        "id": "q1925",
        "input": "spacing a print function in python",
        "output": "",
        "rule": [
            "d1925"
        ]
    },
    {
        "instruction": "",
        "id": "q1926",
        "input": "python binomial coefficient doc",
        "output": "",
        "rule": [
            "d1926"
        ]
    },
    {
        "instruction": "",
        "id": "q1927",
        "input": "split dash words in python",
        "output": "",
        "rule": [
            "d1927"
        ]
    },
    {
        "instruction": "",
        "id": "q1928",
        "input": "python boolen mask index",
        "output": "",
        "rule": [
            "d1928"
        ]
    },
    {
        "instruction": "",
        "id": "q1929",
        "input": "splitting a string by multiple charachters python",
        "output": "",
        "rule": [
            "d1929"
        ]
    },
    {
        "instruction": "",
        "id": "q1930",
        "input": "python boto retrieve s3 file",
        "output": "",
        "rule": [
            "d1930"
        ]
    },
    {
        "instruction": "",
        "id": "q1931",
        "input": "splitting string into list of words python",
        "output": "",
        "rule": [
            "d1931"
        ]
    },
    {
        "instruction": "",
        "id": "q1932",
        "input": "python boto3 stream bytes object s3",
        "output": "",
        "rule": [
            "d1932"
        ]
    },
    {
        "instruction": "",
        "id": "q1933",
        "input": "spyder 3 to do check mark python",
        "output": "",
        "rule": [
            "d1933"
        ]
    },
    {
        "instruction": "",
        "id": "q1934",
        "input": "python bottle how to use session variables in jinja2 template",
        "output": "",
        "rule": [
            "d1934"
        ]
    },
    {
        "instruction": "",
        "id": "q1935",
        "input": "sqlalchemy python column id update next availb seq id",
        "output": "",
        "rule": [
            "d1935"
        ]
    },
    {
        "instruction": "",
        "id": "q1936",
        "input": "python bound method get set",
        "output": "",
        "rule": [
            "d1936"
        ]
    },
    {
        "instruction": "",
        "id": "q1937",
        "input": "srgbcolor get tuple python",
        "output": "",
        "rule": [
            "d1937"
        ]
    },
    {
        "instruction": "",
        "id": "q1938",
        "input": "python bulk insert cursor to sql server",
        "output": "",
        "rule": [
            "d1938"
        ]
    },
    {
        "instruction": "",
        "id": "q1939",
        "input": "stack overflow python database",
        "output": "",
        "rule": [
            "d1939"
        ]
    },
    {
        "instruction": "",
        "id": "q1940",
        "input": "python butterworth high filter in frequency",
        "output": "",
        "rule": [
            "d1940"
        ]
    },
    {
        "instruction": "",
        "id": "q1941",
        "input": "standard deviation python numpy not correct",
        "output": "",
        "rule": [
            "d1941"
        ]
    },
    {
        "instruction": "",
        "id": "q1942",
        "input": "python byte string to numpy",
        "output": "",
        "rule": [
            "d1942"
        ]
    },
    {
        "instruction": "",
        "id": "q1943",
        "input": "stestr to invoke a python env variable",
        "output": "",
        "rule": [
            "d1943"
        ]
    },
    {
        "instruction": "",
        "id": "q1944",
        "input": "python cache file in memory",
        "output": "",
        "rule": [
            "d1944"
        ]
    },
    {
        "instruction": "",
        "id": "q1945",
        "input": "stop child thread python",
        "output": "",
        "rule": [
            "d1945"
        ]
    },
    {
        "instruction": "",
        "id": "q1946",
        "input": "python cache limit size",
        "output": "",
        "rule": [
            "d1946"
        ]
    },
    {
        "instruction": "",
        "id": "q1947",
        "input": "stop moving objects canvas python",
        "output": "",
        "rule": [
            "d1947"
        ]
    },
    {
        "instruction": "",
        "id": "q1948",
        "input": "python caching db update",
        "output": "",
        "rule": [
            "d1948"
        ]
    },
    {
        "instruction": "",
        "id": "q1949",
        "input": "stop the python shell from executing",
        "output": "",
        "rule": [
            "d1949"
        ]
    },
    {
        "instruction": "",
        "id": "q1950",
        "input": "python calculate angle from 3 points",
        "output": "",
        "rule": [
            "d1950"
        ]
    },
    {
        "instruction": "",
        "id": "q1951",
        "input": "store a file locally cache python",
        "output": "",
        "rule": [
            "d1951"
        ]
    },
    {
        "instruction": "",
        "id": "q1952",
        "input": "python calculate average from iterator",
        "output": "",
        "rule": [
            "d1952"
        ]
    },
    {
        "instruction": "",
        "id": "q1953",
        "input": "store python object in mongodb",
        "output": "",
        "rule": [
            "d1953"
        ]
    },
    {
        "instruction": "",
        "id": "q1954",
        "input": "python calculate distance cluster centroid",
        "output": "",
        "rule": [
            "d1954"
        ]
    },
    {
        "instruction": "",
        "id": "q1955",
        "input": "store sparse matrix in h5py python",
        "output": "",
        "rule": [
            "d1955"
        ]
    },
    {
        "instruction": "",
        "id": "q1956",
        "input": "python calculate eigenvector and eigenvalue of a matrix",
        "output": "",
        "rule": [
            "d1956"
        ]
    },
    {
        "instruction": "",
        "id": "q1957",
        "input": "storing gzip file contents in a variable in python",
        "output": "",
        "rule": [
            "d1957"
        ]
    },
    {
        "instruction": "",
        "id": "q1958",
        "input": "python calculate the angle between two points",
        "output": "",
        "rule": [
            "d1958"
        ]
    },
    {
        "instruction": "",
        "id": "q1959",
        "input": "string, capitalize each alpha letter and do nothing on others python",
        "output": "",
        "rule": [
            "d1959"
        ]
    },
    {
        "instruction": "",
        "id": "q1960",
        "input": "python calculate time delta",
        "output": "",
        "rule": [
            "d1960"
        ]
    },
    {
        "instruction": "",
        "id": "q1961",
        "input": "strip all letters except a word python",
        "output": "",
        "rule": [
            "d1961"
        ]
    },
    {
        "instruction": "",
        "id": "q1962",
        "input": "python call a function using a variable in termiinal",
        "output": "",
        "rule": [
            "d1962"
        ]
    },
    {
        "instruction": "",
        "id": "q1963",
        "input": "strips all leading and trailing space of each token in python list",
        "output": "",
        "rule": [
            "d1963"
        ]
    },
    {
        "instruction": "",
        "id": "q1964",
        "input": "python calling on random function wanting to to stay same",
        "output": "",
        "rule": [
            "d1964"
        ]
    },
    {
        "instruction": "",
        "id": "q1965",
        "input": "suppress help text python django",
        "output": "",
        "rule": [
            "d1965"
        ]
    },
    {
        "instruction": "",
        "id": "q1966",
        "input": "python can buffered reader",
        "output": "",
        "rule": [
            "d1966"
        ]
    },
    {
        "instruction": "",
        "id": "q1967",
        "input": "swagger python adding an authorization header",
        "output": "",
        "rule": [
            "d1967"
        ]
    },
    {
        "instruction": "",
        "id": "q1968",
        "input": "python can none value be used outside of functions",
        "output": "",
        "rule": [
            "d1968"
        ]
    },
    {
        "instruction": "",
        "id": "q1969",
        "input": "switch the order of names in python",
        "output": "",
        "rule": [
            "d1969"
        ]
    },
    {
        "instruction": "",
        "id": "q1970",
        "input": "python can not exit in cmd",
        "output": "",
        "rule": [
            "d1970"
        ]
    },
    {
        "instruction": "",
        "id": "q1971",
        "input": "take the average array value not zero numpy python",
        "output": "",
        "rule": [
            "d1971"
        ]
    },
    {
        "instruction": "",
        "id": "q1972",
        "input": "python canvas news scrolling",
        "output": "",
        "rule": [
            "d1972"
        ]
    },
    {
        "instruction": "",
        "id": "q1973",
        "input": "tensorflow on python37 not running",
        "output": "",
        "rule": [
            "d1973"
        ]
    },
    {
        "instruction": "",
        "id": "q1974",
        "input": "python capture results of a command",
        "output": "",
        "rule": [
            "d1974"
        ]
    },
    {
        "instruction": "",
        "id": "q1975",
        "input": "tensorflow with python2 and not python3",
        "output": "",
        "rule": [
            "d1975"
        ]
    },
    {
        "instruction": "",
        "id": "q1976",
        "input": "python cartesian product list comprehension",
        "output": "",
        "rule": [
            "d1976"
        ]
    },
    {
        "instruction": "",
        "id": "q1977",
        "input": "test if attribute exists python",
        "output": "",
        "rule": [
            "d1977"
        ]
    },
    {
        "instruction": "",
        "id": "q1978",
        "input": "python cast numpy array to bool",
        "output": "",
        "rule": [
            "d1978"
        ]
    },
    {
        "instruction": "",
        "id": "q1979",
        "input": "test if strings match python",
        "output": "",
        "rule": [
            "d1979"
        ]
    },
    {
        "instruction": "",
        "id": "q1980",
        "input": "python cast raw bytes as object",
        "output": "",
        "rule": [
            "d1980"
        ]
    },
    {
        "instruction": "",
        "id": "q1981",
        "input": "text into tokenized python",
        "output": "",
        "rule": [
            "d1981"
        ]
    },
    {
        "instruction": "",
        "id": "q1982",
        "input": "python cast string into date",
        "output": "",
        "rule": [
            "d1982"
        ]
    },
    {
        "instruction": "",
        "id": "q1983",
        "input": "text removing illegal charcater in python",
        "output": "",
        "rule": [
            "d1983"
        ]
    },
    {
        "instruction": "",
        "id": "q1984",
        "input": "python chain multiple function",
        "output": "",
        "rule": [
            "d1984"
        ]
    },
    {
        "instruction": "",
        "id": "q1985",
        "input": "tf stack and unstack python",
        "output": "",
        "rule": [
            "d1985"
        ]
    },
    {
        "instruction": "",
        "id": "q1986",
        "input": "python chain next iterable",
        "output": "",
        "rule": [
            "d1986"
        ]
    },
    {
        "instruction": "",
        "id": "q1987",
        "input": "the inde of the max in python",
        "output": "",
        "rule": [
            "d1987"
        ]
    },
    {
        "instruction": "",
        "id": "q1988",
        "input": "python change background color in grid",
        "output": "",
        "rule": [
            "d1988"
        ]
    },
    {
        "instruction": "",
        "id": "q1989",
        "input": "the length of the longest run of consecutive heads python",
        "output": "",
        "rule": [
            "d1989"
        ]
    },
    {
        "instruction": "",
        "id": "q1990",
        "input": "python change directory to my documents",
        "output": "",
        "rule": [
            "d1990"
        ]
    },
    {
        "instruction": "",
        "id": "q1991",
        "input": "the scope of variables inside a function is local to the python function",
        "output": "",
        "rule": [
            "d1991"
        ]
    },
    {
        "instruction": "",
        "id": "q1992",
        "input": "python change maximun line length",
        "output": "",
        "rule": [
            "d1992"
        ]
    },
    {
        "instruction": "",
        "id": "q1993",
        "input": "thread safety in python pdf",
        "output": "",
        "rule": [
            "d1993"
        ]
    },
    {
        "instruction": "",
        "id": "q1994",
        "input": "python change mtime of file",
        "output": "",
        "rule": [
            "d1994"
        ]
    },
    {
        "instruction": "",
        "id": "q1995",
        "input": "timestramp datetime localtime python",
        "output": "",
        "rule": [
            "d1995"
        ]
    },
    {
        "instruction": "",
        "id": "q1996",
        "input": "python change name of a column",
        "output": "",
        "rule": [
            "d1996"
        ]
    },
    {
        "instruction": "",
        "id": "q1997",
        "input": "tkinter python deselect check button",
        "output": "",
        "rule": [
            "d1997"
        ]
    },
    {
        "instruction": "",
        "id": "q1998",
        "input": "python change numpy dtype to python type",
        "output": "",
        "rule": [
            "d1998"
        ]
    },
    {
        "instruction": "",
        "id": "q1999",
        "input": "to array function python",
        "output": "",
        "rule": [
            "d1999"
        ]
    },
    {
        "instruction": "",
        "id": "q2000",
        "input": "python change oauth2 flask expire time",
        "output": "",
        "rule": [
            "d2000"
        ]
    },
    {
        "instruction": "",
        "id": "q2001",
        "input": "to check if object doesnt have attribute key python",
        "output": "",
        "rule": [
            "d2001"
        ]
    },
    {
        "instruction": "",
        "id": "q2002",
        "input": "python change the global stdout",
        "output": "",
        "rule": [
            "d2002"
        ]
    },
    {
        "instruction": "",
        "id": "q2003",
        "input": "to check if object doesnt have attribute variable python",
        "output": "",
        "rule": [
            "d2003"
        ]
    },
    {
        "instruction": "",
        "id": "q2004",
        "input": "python change to a dir",
        "output": "",
        "rule": [
            "d2004"
        ]
    },
    {
        "instruction": "",
        "id": "q2005",
        "input": "to get index based on values in python list",
        "output": "",
        "rule": [
            "d2005"
        ]
    },
    {
        "instruction": "",
        "id": "q2006",
        "input": "python change to su from admin",
        "output": "",
        "rule": [
            "d2006"
        ]
    },
    {
        "instruction": "",
        "id": "q2007",
        "input": "python change type to string",
        "output": "",
        "rule": [
            "d2007"
        ]
    },
    {
        "instruction": "",
        "id": "q2008",
        "input": "to plot gaussian distribution in python",
        "output": "",
        "rule": [
            "d2008"
        ]
    },
    {
        "instruction": "",
        "id": "q2009",
        "input": "python change window title",
        "output": "",
        "rule": [
            "d2009"
        ]
    },
    {
        "instruction": "",
        "id": "q2010",
        "input": "to write function of gradient of an image in python",
        "output": "",
        "rule": [
            "d2010"
        ]
    },
    {
        "instruction": "",
        "id": "q2011",
        "input": "python changing any amount of seconds into hours minutes and seconds",
        "output": "",
        "rule": [
            "d2011"
        ]
    },
    {
        "instruction": "",
        "id": "q2012",
        "input": "tokenize without creating a list python",
        "output": "",
        "rule": [
            "d2012"
        ]
    },
    {
        "instruction": "",
        "id": "q2013",
        "input": "python characters truncated in mssql query",
        "output": "",
        "rule": [
            "d2013"
        ]
    },
    {
        "instruction": "",
        "id": "q2014",
        "input": "transform data to normal distribution python",
        "output": "",
        "rule": [
            "d2014"
        ]
    },
    {
        "instruction": "",
        "id": "q2015",
        "input": "python check against a list of regular expressions",
        "output": "",
        "rule": [
            "d2015"
        ]
    },
    {
        "instruction": "",
        "id": "q2016",
        "input": "transform tuple to dict in python",
        "output": "",
        "rule": [
            "d2016"
        ]
    },
    {
        "instruction": "",
        "id": "q2017",
        "input": "python check all inputs for type",
        "output": "",
        "rule": [
            "d2017"
        ]
    },
    {
        "instruction": "",
        "id": "q2018",
        "input": "tree recursion python print",
        "output": "",
        "rule": [
            "d2018"
        ]
    },
    {
        "instruction": "",
        "id": "q2019",
        "input": "python check file size greater than 0",
        "output": "",
        "rule": [
            "d2019"
        ]
    },
    {
        "instruction": "",
        "id": "q2020",
        "input": "trim head from list python",
        "output": "",
        "rule": [
            "d2020"
        ]
    },
    {
        "instruction": "",
        "id": "q2021",
        "input": "python check folder exists and create",
        "output": "",
        "rule": [
            "d2021"
        ]
    },
    {
        "instruction": "",
        "id": "q2022",
        "input": "trun object into dictionary python",
        "output": "",
        "rule": [
            "d2022"
        ]
    },
    {
        "instruction": "",
        "id": "q2023",
        "input": "python check for existence of attribute",
        "output": "",
        "rule": [
            "d2023"
        ]
    },
    {
        "instruction": "",
        "id": "q2024",
        "input": "truncate a python list by one",
        "output": "",
        "rule": [
            "d2024"
        ]
    },
    {
        "instruction": "",
        "id": "q2025",
        "input": "python check for presence of srting in forst word of a line",
        "output": "",
        "rule": [
            "d2025"
        ]
    },
    {
        "instruction": "",
        "id": "q2026",
        "input": "turn a key into a string varible name python",
        "output": "",
        "rule": [
            "d2026"
        ]
    },
    {
        "instruction": "",
        "id": "q2027",
        "input": "python check for string or list",
        "output": "",
        "rule": [
            "d2027"
        ]
    },
    {
        "instruction": "",
        "id": "q2028",
        "input": "turn bytes to int python",
        "output": "",
        "rule": [
            "d2028"
        ]
    },
    {
        "instruction": "",
        "id": "q2029",
        "input": "python check for valid uuid4",
        "output": "",
        "rule": [
            "d2029"
        ]
    },
    {
        "instruction": "",
        "id": "q2030",
        "input": "turn def to data frame python",
        "output": "",
        "rule": [
            "d2030"
        ]
    },
    {
        "instruction": "",
        "id": "q2031",
        "input": "turn mac address into ip python",
        "output": "",
        "rule": [
            "d2031"
        ]
    },
    {
        "instruction": "",
        "id": "q2032",
        "input": "python check if a path is symlink",
        "output": "",
        "rule": [
            "d2032"
        ]
    },
    {
        "instruction": "",
        "id": "q2033",
        "input": "turning datetime t ostring python",
        "output": "",
        "rule": [
            "d2033"
        ]
    },
    {
        "instruction": "",
        "id": "q2034",
        "input": "python check if a path is valid",
        "output": "",
        "rule": [
            "d2034"
        ]
    },
    {
        "instruction": "",
        "id": "q2035",
        "input": "turtle program still running after mannually closing it in python",
        "output": "",
        "rule": [
            "d2035"
        ]
    },
    {
        "instruction": "",
        "id": "q2036",
        "input": "python check if a process with pid is running",
        "output": "",
        "rule": [
            "d2036"
        ]
    },
    {
        "instruction": "",
        "id": "q2037",
        "input": "two dimensional gaussian distribution python",
        "output": "",
        "rule": [
            "d2037"
        ]
    },
    {
        "instruction": "",
        "id": "q2038",
        "input": "python check if all condition is true",
        "output": "",
        "rule": [
            "d2038"
        ]
    },
    {
        "instruction": "",
        "id": "q2039",
        "input": "two vector angle python",
        "output": "",
        "rule": [
            "d2039"
        ]
    },
    {
        "instruction": "",
        "id": "q2040",
        "input": "python check if all elements in a list are digits",
        "output": "",
        "rule": [
            "d2040"
        ]
    },
    {
        "instruction": "",
        "id": "q2041",
        "input": "txt read iterator python",
        "output": "",
        "rule": [
            "d2041"
        ]
    },
    {
        "instruction": "",
        "id": "q2042",
        "input": "python check if dictionaries are equal",
        "output": "",
        "rule": [
            "d2042"
        ]
    },
    {
        "instruction": "",
        "id": "q2043",
        "input": "type cast python string",
        "output": "",
        "rule": [
            "d2043"
        ]
    },
    {
        "instruction": "",
        "id": "q2044",
        "input": "python check if element is list or int",
        "output": "",
        "rule": [
            "d2044"
        ]
    },
    {
        "instruction": "",
        "id": "q2045",
        "input": "type cast to int python",
        "output": "",
        "rule": [
            "d2045"
        ]
    },
    {
        "instruction": "",
        "id": "q2046",
        "input": "python check if filename has extension",
        "output": "",
        "rule": [
            "d2046"
        ]
    },
    {
        "instruction": "",
        "id": "q2047",
        "input": "unable to rollback python",
        "output": "",
        "rule": [
            "d2047"
        ]
    },
    {
        "instruction": "",
        "id": "q2048",
        "input": "python check if gevent monkey patch",
        "output": "",
        "rule": [
            "d2048"
        ]
    },
    {
        "instruction": "",
        "id": "q2049",
        "input": "underscore space replace python",
        "output": "",
        "rule": [
            "d2049"
        ]
    },
    {
        "instruction": "",
        "id": "q2050",
        "input": "python check if it win32com object",
        "output": "",
        "rule": [
            "d2050"
        ]
    },
    {
        "instruction": "",
        "id": "q2051",
        "input": "underscores surrounding word in python",
        "output": "",
        "rule": [
            "d2051"
        ]
    },
    {
        "instruction": "",
        "id": "q2052",
        "input": "python check if its a vector",
        "output": "",
        "rule": [
            "d2052"
        ]
    },
    {
        "instruction": "",
        "id": "q2053",
        "input": "unit test with mock and patch in python",
        "output": "",
        "rule": [
            "d2053"
        ]
    },
    {
        "instruction": "",
        "id": "q2054",
        "input": "python check if row value is null",
        "output": "",
        "rule": [
            "d2054"
        ]
    },
    {
        "instruction": "",
        "id": "q2055",
        "input": "unix utc to datetime in python",
        "output": "",
        "rule": [
            "d2055"
        ]
    },
    {
        "instruction": "",
        "id": "q2056",
        "input": "python check if run admin cmd",
        "output": "",
        "rule": [
            "d2056"
        ]
    },
    {
        "instruction": "",
        "id": "q2057",
        "input": "unsupported operand type(s) for python",
        "output": "",
        "rule": [
            "d2057"
        ]
    },
    {
        "instruction": "",
        "id": "q2058",
        "input": "python check if stream is open",
        "output": "",
        "rule": [
            "d2058"
        ]
    },
    {
        "instruction": "",
        "id": "q2059",
        "input": "uppercase lowercase title case in python",
        "output": "",
        "rule": [
            "d2059"
        ]
    },
    {
        "instruction": "",
        "id": "q2060",
        "input": "python check if string contains multiple lines",
        "output": "",
        "rule": [
            "d2060"
        ]
    },
    {
        "instruction": "",
        "id": "q2061",
        "input": "urlib open file in python",
        "output": "",
        "rule": [
            "d2061"
        ]
    },
    {
        "instruction": "",
        "id": "q2062",
        "input": "python check if table exists",
        "output": "",
        "rule": [
            "d2062"
        ]
    },
    {
        "instruction": "",
        "id": "q2063",
        "input": "use a function to store the code that displays the menu in python",
        "output": "",
        "rule": [
            "d2063"
        ]
    },
    {
        "instruction": "",
        "id": "q2064",
        "input": "python check if two arrays are equal",
        "output": "",
        "rule": [
            "d2064"
        ]
    },
    {
        "instruction": "",
        "id": "q2065",
        "input": "use of iterators without for loops in python 2",
        "output": "",
        "rule": [
            "d2065"
        ]
    },
    {
        "instruction": "",
        "id": "q2066",
        "input": "python check if two dictionaries are identical",
        "output": "",
        "rule": [
            "d2066"
        ]
    },
    {
        "instruction": "",
        "id": "q2067",
        "input": "use replace in python to cut characters",
        "output": "",
        "rule": [
            "d2067"
        ]
    },
    {
        "instruction": "",
        "id": "q2068",
        "input": "python check if url is localhost",
        "output": "",
        "rule": [
            "d2068"
        ]
    },
    {
        "instruction": "",
        "id": "q2069",
        "input": "use single quote in string python",
        "output": "",
        "rule": [
            "d2069"
        ]
    },
    {
        "instruction": "",
        "id": "q2070",
        "input": "python check if valid uuid",
        "output": "",
        "rule": [
            "d2070"
        ]
    },
    {
        "instruction": "",
        "id": "q2071",
        "input": "use variable to retrieve attribute in python",
        "output": "",
        "rule": [
            "d2071"
        ]
    },
    {
        "instruction": "",
        "id": "q2072",
        "input": "python check if value is sequence",
        "output": "",
        "rule": [
            "d2072"
        ]
    },
    {
        "instruction": "",
        "id": "q2073",
        "input": "using a data file as a data source python",
        "output": "",
        "rule": [
            "d2073"
        ]
    },
    {
        "instruction": "",
        "id": "q2074",
        "input": "python check is a string a path",
        "output": "",
        "rule": [
            "d2074"
        ]
    },
    {
        "instruction": "",
        "id": "q2075",
        "input": "using clipboard with python",
        "output": "",
        "rule": [
            "d2075"
        ]
    },
    {
        "instruction": "",
        "id": "q2076",
        "input": "python check is file is image",
        "output": "",
        "rule": [
            "d2076"
        ]
    },
    {
        "instruction": "",
        "id": "q2077",
        "input": "python check is list all int",
        "output": "",
        "rule": [
            "d2077"
        ]
    },
    {
        "instruction": "",
        "id": "q2078",
        "input": "using format with a list python",
        "output": "",
        "rule": [
            "d2078"
        ]
    },
    {
        "instruction": "",
        "id": "q2079",
        "input": "python check is namedtuple matches",
        "output": "",
        "rule": [
            "d2079"
        ]
    },
    {
        "instruction": "",
        "id": "q2080",
        "input": "using graphviz with python",
        "output": "",
        "rule": [
            "d2080"
        ]
    },
    {
        "instruction": "",
        "id": "q2081",
        "input": "python check is string is valid url",
        "output": "",
        "rule": [
            "d2081"
        ]
    },
    {
        "instruction": "",
        "id": "q2082",
        "input": "using runtime to execute python in java",
        "output": "",
        "rule": [
            "d2082"
        ]
    },
    {
        "instruction": "",
        "id": "q2083",
        "input": "python check last modified time",
        "output": "",
        "rule": [
            "d2083"
        ]
    },
    {
        "instruction": "",
        "id": "q2084",
        "input": "using this form for the binomial coefficient python",
        "output": "",
        "rule": [
            "d2084"
        ]
    },
    {
        "instruction": "",
        "id": "q2085",
        "input": "python check method defined",
        "output": "",
        "rule": [
            "d2085"
        ]
    },
    {
        "instruction": "",
        "id": "q2086",
        "input": "utc timestamp to specified timezone in python",
        "output": "",
        "rule": [
            "d2086"
        ]
    },
    {
        "instruction": "",
        "id": "q2087",
        "input": "python check object iterable",
        "output": "",
        "rule": [
            "d2087"
        ]
    },
    {
        "instruction": "",
        "id": "q2088",
        "input": "validate avro schema with data in python",
        "output": "",
        "rule": [
            "d2088"
        ]
    },
    {
        "instruction": "",
        "id": "q2089",
        "input": "python check own memory usage",
        "output": "",
        "rule": [
            "d2089"
        ]
    },
    {
        "instruction": "",
        "id": "q2090",
        "input": "validate email address with regex python",
        "output": "",
        "rule": [
            "d2090"
        ]
    },
    {
        "instruction": "",
        "id": "q2091",
        "input": "python check permissions of a folder",
        "output": "",
        "rule": [
            "d2091"
        ]
    },
    {
        "instruction": "",
        "id": "q2092",
        "input": "validate for arg python",
        "output": "",
        "rule": [
            "d2092"
        ]
    },
    {
        "instruction": "",
        "id": "q2093",
        "input": "python check process exist pid",
        "output": "",
        "rule": [
            "d2093"
        ]
    },
    {
        "instruction": "",
        "id": "q2094",
        "input": "validate xml with xsd file using python",
        "output": "",
        "rule": [
            "d2094"
        ]
    },
    {
        "instruction": "",
        "id": "q2095",
        "input": "python check request querystring none",
        "output": "",
        "rule": [
            "d2095"
        ]
    },
    {
        "instruction": "",
        "id": "q2096",
        "input": "validation of username and password in python and or",
        "output": "",
        "rule": [
            "d2096"
        ]
    },
    {
        "instruction": "",
        "id": "q2097",
        "input": "python check rpm exists",
        "output": "",
        "rule": [
            "d2097"
        ]
    },
    {
        "instruction": "",
        "id": "q2098",
        "input": "variable wrapped in [' django python json",
        "output": "",
        "rule": [
            "d2098"
        ]
    },
    {
        "instruction": "",
        "id": "q2099",
        "input": "python check set intersection",
        "output": "",
        "rule": [
            "d2099"
        ]
    },
    {
        "instruction": "",
        "id": "q2100",
        "input": "vs code python indentation reformat",
        "output": "",
        "rule": [
            "d2100"
        ]
    },
    {
        "instruction": "",
        "id": "q2101",
        "input": "python check string if float",
        "output": "",
        "rule": [
            "d2101"
        ]
    },
    {
        "instruction": "",
        "id": "q2102",
        "input": "vs code python type hinting",
        "output": "",
        "rule": [
            "d2102"
        ]
    },
    {
        "instruction": "",
        "id": "q2103",
        "input": "python check string is blank",
        "output": "",
        "rule": [
            "d2103"
        ]
    },
    {
        "instruction": "",
        "id": "q2104",
        "input": "vs code set python indent to two spaces",
        "output": "",
        "rule": [
            "d2104"
        ]
    },
    {
        "instruction": "",
        "id": "q2105",
        "input": "python check string not null",
        "output": "",
        "rule": [
            "d2105"
        ]
    },
    {
        "instruction": "",
        "id": "q2106",
        "input": "way to strip punctuation python",
        "output": "",
        "rule": [
            "d2106"
        ]
    },
    {
        "instruction": "",
        "id": "q2107",
        "input": "python check the truth value of a list of boolean elements",
        "output": "",
        "rule": [
            "d2107"
        ]
    },
    {
        "instruction": "",
        "id": "q2108",
        "input": "what clear markings do a python have",
        "output": "",
        "rule": [
            "d2108"
        ]
    },
    {
        "instruction": "",
        "id": "q2109",
        "input": "python check user is admin",
        "output": "",
        "rule": [
            "d2109"
        ]
    },
    {
        "instruction": "",
        "id": "q2110",
        "input": "what does 'id' gives in python",
        "output": "",
        "rule": [
            "d2110"
        ]
    },
    {
        "instruction": "",
        "id": "q2111",
        "input": "what function is used to get user input in python3",
        "output": "",
        "rule": [
            "d2111"
        ]
    },
    {
        "instruction": "",
        "id": "q2112",
        "input": "python check value allow enum",
        "output": "",
        "rule": [
            "d2112"
        ]
    },
    {
        "instruction": "",
        "id": "q2113",
        "input": "will python 3 accept polar coordinates",
        "output": "",
        "rule": [
            "d2113"
        ]
    },
    {
        "instruction": "",
        "id": "q2114",
        "input": "python check value of qcheckbox",
        "output": "",
        "rule": [
            "d2114"
        ]
    },
    {
        "instruction": "",
        "id": "q2115",
        "input": "win32 hook file python",
        "output": "",
        "rule": [
            "d2115"
        ]
    },
    {
        "instruction": "",
        "id": "q2116",
        "input": "python checking equality between objects",
        "output": "",
        "rule": [
            "d2116"
        ]
    },
    {
        "instruction": "",
        "id": "q2117",
        "input": "wrap a function python explicit keyword",
        "output": "",
        "rule": [
            "d2117"
        ]
    },
    {
        "instruction": "",
        "id": "q2118",
        "input": "python checking if string is multiple lines",
        "output": "",
        "rule": [
            "d2118"
        ]
    },
    {
        "instruction": "",
        "id": "q2119",
        "input": "wrap a method in python",
        "output": "",
        "rule": [
            "d2119"
        ]
    },
    {
        "instruction": "",
        "id": "q2120",
        "input": "python chmod sticky bit",
        "output": "",
        "rule": [
            "d2120"
        ]
    },
    {
        "instruction": "",
        "id": "q2121",
        "input": "wrap c python ctypes vs",
        "output": "",
        "rule": [
            "d2121"
        ]
    },
    {
        "instruction": "",
        "id": "q2122",
        "input": "python clean url function",
        "output": "",
        "rule": [
            "d2122"
        ]
    },
    {
        "instruction": "",
        "id": "q2123",
        "input": "wrap single line strings python as",
        "output": "",
        "rule": [
            "d2123"
        ]
    },
    {
        "instruction": "",
        "id": "q2124",
        "input": "python clear all figures",
        "output": "",
        "rule": [
            "d2124"
        ]
    },
    {
        "instruction": "",
        "id": "q2125",
        "input": "write a float to a binary file python",
        "output": "",
        "rule": [
            "d2125"
        ]
    },
    {
        "instruction": "",
        "id": "q2126",
        "input": "python clear leading whitespace",
        "output": "",
        "rule": [
            "d2126"
        ]
    },
    {
        "instruction": "",
        "id": "q2127",
        "input": "write a program that calculates the angle between two observed points python",
        "output": "",
        "rule": [
            "d2127"
        ]
    },
    {
        "instruction": "",
        "id": "q2128",
        "input": "python close socket port",
        "output": "",
        "rule": [
            "d2128"
        ]
    },
    {
        "instruction": "",
        "id": "q2129",
        "input": "write a python program to read first n lines of a file",
        "output": "",
        "rule": [
            "d2129"
        ]
    },
    {
        "instruction": "",
        "id": "q2130",
        "input": "python close websockets connection",
        "output": "",
        "rule": [
            "d2130"
        ]
    },
    {
        "instruction": "",
        "id": "q2131",
        "input": "write python data into pickles",
        "output": "",
        "rule": [
            "d2131"
        ]
    },
    {
        "instruction": "",
        "id": "q2132",
        "input": "python code example least squares best fit",
        "output": "",
        "rule": [
            "d2132"
        ]
    },
    {
        "instruction": "",
        "id": "q2133",
        "input": "writing softmax function python",
        "output": "",
        "rule": [
            "d2133"
        ]
    },
    {
        "instruction": "",
        "id": "q2134",
        "input": "python code for butter wirth filter",
        "output": "",
        "rule": [
            "d2134"
        ]
    },
    {
        "instruction": "",
        "id": "q2135",
        "input": "wxpython disable window close",
        "output": "",
        "rule": [
            "d2135"
        ]
    },
    {
        "instruction": "",
        "id": "q2136",
        "input": "python code for changing color of output text",
        "output": "",
        "rule": [
            "d2136"
        ]
    },
    {
        "instruction": "",
        "id": "q2137",
        "input": "wxpython popup auto close",
        "output": "",
        "rule": [
            "d2137"
        ]
    },
    {
        "instruction": "",
        "id": "q2138",
        "input": "python code for cifar 10 data set without batches",
        "output": "",
        "rule": [
            "d2138"
        ]
    },
    {
        "instruction": "",
        "id": "q2139",
        "input": "wxpython scrollbar doesn't update position with key press",
        "output": "",
        "rule": [
            "d2139"
        ]
    },
    {
        "instruction": "",
        "id": "q2140",
        "input": "python code runner is not recognized as an internal or external command",
        "output": "",
        "rule": [
            "d2140"
        ]
    },
    {
        "instruction": "",
        "id": "q2141",
        "input": "xlswriter python row width",
        "output": "",
        "rule": [
            "d2141"
        ]
    },
    {
        "instruction": "",
        "id": "q2142",
        "input": "python code to check for file extension",
        "output": "",
        "rule": [
            "d2142"
        ]
    },
    {
        "instruction": "",
        "id": "q2143",
        "input": "xml getelementsbytagname without tag python",
        "output": "",
        "rule": [
            "d2143"
        ]
    },
    {
        "instruction": "",
        "id": "q2144",
        "input": "python code to check spearman correlation coefficient",
        "output": "",
        "rule": [
            "d2144"
        ]
    },
    {
        "instruction": "",
        "id": "q2145",
        "input": "python code to check usb device connedted",
        "output": "",
        "rule": [
            "d2145"
        ]
    },
    {
        "instruction": "",
        "id": "q2146",
        "input": "xsd validation libraries for python",
        "output": "",
        "rule": [
            "d2146"
        ]
    },
    {
        "instruction": "",
        "id": "q2147",
        "input": "python code to clear all variables at the start of code execution",
        "output": "",
        "rule": [
            "d2147"
        ]
    },
    {
        "instruction": "",
        "id": "q2148",
        "input": "zero matrix without numpy python",
        "output": "",
        "rule": [
            "d2148"
        ]
    },
    {
        "instruction": "",
        "id": "q2149",
        "input": "python code to count no of rows in table in python",
        "output": "",
        "rule": [
            "d2149"
        ]
    },
    {
        "instruction": "",
        "id": "q2150",
        "input": "python code to make a dir",
        "output": "",
        "rule": [
            "d2150"
        ]
    },
    {
        "instruction": "",
        "id": "q2151",
        "input": "python code to replace string",
        "output": "",
        "rule": [
            "d2151"
        ]
    },
    {
        "instruction": "",
        "id": "q2152",
        "input": "python ctypes define argtypes on a pointer to a pointer",
        "output": "",
        "rule": [
            "d2152"
        ]
    },
    {
        "instruction": "",
        "id": "q2153",
        "input": "\"object of type 'datetime' is not json serializable\", postgres python",
        "output": "",
        "rule": [
            "d2153"
        ]
    },
    {
        "instruction": "",
        "id": "q2154",
        "input": "python ctypes dll deallocate",
        "output": "",
        "rule": [
            "d2154"
        ]
    },
    {
        "instruction": "",
        "id": "q2155",
        "input": "ascending and descending order dynamic python \"range\"",
        "output": "",
        "rule": [
            "d2155"
        ]
    },
    {
        "instruction": "",
        "id": "q2156",
        "input": "python ctypes float to int",
        "output": "",
        "rule": [
            "d2156"
        ]
    },
    {
        "instruction": "",
        "id": "q2157",
        "input": "how to check if \" is in python string",
        "output": "",
        "rule": [
            "d2157"
        ]
    },
    {
        "instruction": "",
        "id": "q2158",
        "input": "python ctypes indefinite length array",
        "output": "",
        "rule": [
            "d2158"
        ]
    },
    {
        "instruction": "",
        "id": "q2159",
        "input": "python \"resource has no attribute\"",
        "output": "",
        "rule": [
            "d2159"
        ]
    },
    {
        "instruction": "",
        "id": "q2160",
        "input": "python ctypes pass var to cpp constructor",
        "output": "",
        "rule": [
            "d2160"
        ]
    },
    {
        "instruction": "",
        "id": "q2161",
        "input": "python \"the event loop is already running\"",
        "output": "",
        "rule": [
            "d2161"
        ]
    },
    {
        "instruction": "",
        "id": "q2162",
        "input": "python ctypes setting buffer to 0",
        "output": "",
        "rule": [
            "d2162"
        ]
    },
    {
        "instruction": "",
        "id": "q2163",
        "input": "python 3 \"object of type 'bytes' is not json serializable\"",
        "output": "",
        "rule": [
            "d2163"
        ]
    },
    {
        "instruction": "",
        "id": "q2164",
        "input": "python cumulative sum list",
        "output": "",
        "rule": [
            "d2164"
        ]
    },
    {
        "instruction": "",
        "id": "q2165",
        "input": "python iso utc strftime \"utc offset\"",
        "output": "",
        "rule": [
            "d2165"
        ]
    },
    {
        "instruction": "",
        "id": "q2166",
        "input": "python curly brakcet string fixed width",
        "output": "",
        "rule": [
            "d2166"
        ]
    },
    {
        "instruction": "",
        "id": "q2167",
        "input": "python tensorflow can only concatenate list (not \"int\") to list",
        "output": "",
        "rule": [
            "d2167"
        ]
    },
    {
        "instruction": "",
        "id": "q2168",
        "input": "python current time string no colon",
        "output": "",
        "rule": [
            "d2168"
        ]
    },
    {
        "instruction": "",
        "id": "q2169",
        "input": "'function' object has no attribute 'predict' python",
        "output": "",
        "rule": [
            "d2169"
        ]
    },
    {
        "instruction": "",
        "id": "q2170",
        "input": "python cursor go to start",
        "output": "",
        "rule": [
            "d2170"
        ]
    },
    {
        "instruction": "",
        "id": "q2171",
        "input": "'nonetype' object is not subscriptable sql python",
        "output": "",
        "rule": [
            "d2171"
        ]
    },
    {
        "instruction": "",
        "id": "q2172",
        "input": "python cursor result to list",
        "output": "",
        "rule": [
            "d2172"
        ]
    },
    {
        "instruction": "",
        "id": "q2173",
        "input": "2d list in python into numpy array",
        "output": "",
        "rule": [
            "d2173"
        ]
    },
    {
        "instruction": "",
        "id": "q2174",
        "input": "python custom data type json",
        "output": "",
        "rule": [
            "d2174"
        ]
    },
    {
        "instruction": "",
        "id": "q2175",
        "input": "3x2x4 array of floats python",
        "output": "",
        "rule": [
            "d2175"
        ]
    },
    {
        "instruction": "",
        "id": "q2176",
        "input": "python cv2 image closes immediately",
        "output": "",
        "rule": [
            "d2176"
        ]
    },
    {
        "instruction": "",
        "id": "q2177",
        "input": "?python how to remove a trailing substring from a string",
        "output": "",
        "rule": [
            "d2177"
        ]
    },
    {
        "instruction": "",
        "id": "q2178",
        "input": "python cv2 rotate image by degrees",
        "output": "",
        "rule": [
            "d2178"
        ]
    },
    {
        "instruction": "",
        "id": "q2179",
        "input": "a list of variables python",
        "output": "",
        "rule": [
            "d2179"
        ]
    },
    {
        "instruction": "",
        "id": "q2180",
        "input": "python dash server not closing",
        "output": "",
        "rule": [
            "d2180"
        ]
    },
    {
        "instruction": "",
        "id": "q2181",
        "input": "accuracy of a model python",
        "output": "",
        "rule": [
            "d2181"
        ]
    },
    {
        "instruction": "",
        "id": "q2182",
        "input": "python date from datetime string",
        "output": "",
        "rule": [
            "d2182"
        ]
    },
    {
        "instruction": "",
        "id": "q2183",
        "input": "activation function for the output layer keras python",
        "output": "",
        "rule": [
            "d2183"
        ]
    },
    {
        "instruction": "",
        "id": "q2184",
        "input": "python datetime iso format string",
        "output": "",
        "rule": [
            "d2184"
        ]
    },
    {
        "instruction": "",
        "id": "q2185",
        "input": "add header and footer to python print",
        "output": "",
        "rule": [
            "d2185"
        ]
    },
    {
        "instruction": "",
        "id": "q2186",
        "input": "python datetime set microsecond",
        "output": "",
        "rule": [
            "d2186"
        ]
    },
    {
        "instruction": "",
        "id": "q2187",
        "input": "add margin to a figure python",
        "output": "",
        "rule": [
            "d2187"
        ]
    },
    {
        "instruction": "",
        "id": "q2188",
        "input": "python datetime string to utc timestamp",
        "output": "",
        "rule": [
            "d2188"
        ]
    },
    {
        "instruction": "",
        "id": "q2189",
        "input": "add margins to subplots python",
        "output": "",
        "rule": [
            "d2189"
        ]
    },
    {
        "instruction": "",
        "id": "q2190",
        "input": "python datetime to epoch milliseconds",
        "output": "",
        "rule": [
            "d2190"
        ]
    },
    {
        "instruction": "",
        "id": "q2191",
        "input": "add message at exit python",
        "output": "",
        "rule": [
            "d2191"
        ]
    },
    {
        "instruction": "",
        "id": "q2192",
        "input": "python datetime today date only",
        "output": "",
        "rule": [
            "d2192"
        ]
    },
    {
        "instruction": "",
        "id": "q2193",
        "input": "python dateutil first day of month",
        "output": "",
        "rule": [
            "d2193"
        ]
    },
    {
        "instruction": "",
        "id": "q2194",
        "input": "add new fields to an object python",
        "output": "",
        "rule": [
            "d2194"
        ]
    },
    {
        "instruction": "",
        "id": "q2195",
        "input": "python decode jsonify object",
        "output": "",
        "rule": [
            "d2195"
        ]
    },
    {
        "instruction": "",
        "id": "q2196",
        "input": "add root path in python",
        "output": "",
        "rule": [
            "d2196"
        ]
    },
    {
        "instruction": "",
        "id": "q2197",
        "input": "python decorate print funcion",
        "output": "",
        "rule": [
            "d2197"
        ]
    },
    {
        "instruction": "",
        "id": "q2198",
        "input": "adding a matrix to another matrix python",
        "output": "",
        "rule": [
            "d2198"
        ]
    },
    {
        "instruction": "",
        "id": "q2199",
        "input": "python deep format of dictionary",
        "output": "",
        "rule": [
            "d2199"
        ]
    },
    {
        "instruction": "",
        "id": "q2200",
        "input": "an integer, a string, and a boolean of an integer for python",
        "output": "",
        "rule": [
            "d2200"
        ]
    },
    {
        "instruction": "",
        "id": "q2201",
        "input": "python def funciton that return list",
        "output": "",
        "rule": [
            "d2201"
        ]
    },
    {
        "instruction": "",
        "id": "q2202",
        "input": "and multiple figures to save file in python",
        "output": "",
        "rule": [
            "d2202"
        ]
    },
    {
        "instruction": "",
        "id": "q2203",
        "input": "python define the exponents in a polynomial",
        "output": "",
        "rule": [
            "d2203"
        ]
    },
    {
        "instruction": "",
        "id": "q2204",
        "input": "angle between two vectors algorithm python",
        "output": "",
        "rule": [
            "d2204"
        ]
    },
    {
        "instruction": "",
        "id": "q2205",
        "input": "python define variable as an array",
        "output": "",
        "rule": [
            "d2205"
        ]
    },
    {
        "instruction": "",
        "id": "q2206",
        "input": "ansi escape sequence python",
        "output": "",
        "rule": [
            "d2206"
        ]
    },
    {
        "instruction": "",
        "id": "q2207",
        "input": "python delete a tag",
        "output": "",
        "rule": [
            "d2207"
        ]
    },
    {
        "instruction": "",
        "id": "q2208",
        "input": "append string to end of line in file python",
        "output": "",
        "rule": [
            "d2208"
        ]
    },
    {
        "instruction": "",
        "id": "q2209",
        "input": "python delete none value dict",
        "output": "",
        "rule": [
            "d2209"
        ]
    },
    {
        "instruction": "",
        "id": "q2210",
        "input": "apply a function to an entire data frame in python",
        "output": "",
        "rule": [
            "d2210"
        ]
    },
    {
        "instruction": "",
        "id": "q2211",
        "input": "python delete object command on button",
        "output": "",
        "rule": [
            "d2211"
        ]
    },
    {
        "instruction": "",
        "id": "q2212",
        "input": "apply upper case function over list of python strings",
        "output": "",
        "rule": [
            "d2212"
        ]
    },
    {
        "instruction": "",
        "id": "q2213",
        "input": "python describe varible panda",
        "output": "",
        "rule": [
            "d2213"
        ]
    },
    {
        "instruction": "",
        "id": "q2214",
        "input": "applying a filter python",
        "output": "",
        "rule": [
            "d2214"
        ]
    },
    {
        "instruction": "",
        "id": "q2215",
        "input": "python designing a time series filter after fourier analysis",
        "output": "",
        "rule": [
            "d2215"
        ]
    },
    {
        "instruction": "",
        "id": "q2216",
        "input": "applying a method to a dictionary python",
        "output": "",
        "rule": [
            "d2216"
        ]
    },
    {
        "instruction": "",
        "id": "q2217",
        "input": "applying existing columns as index python",
        "output": "",
        "rule": [
            "d2217"
        ]
    },
    {
        "instruction": "",
        "id": "q2218",
        "input": "python detect if object has a method",
        "output": "",
        "rule": [
            "d2218"
        ]
    },
    {
        "instruction": "",
        "id": "q2219",
        "input": "archer encoding text in python",
        "output": "",
        "rule": [
            "d2219"
        ]
    },
    {
        "instruction": "",
        "id": "q2220",
        "input": "python detect text encoding",
        "output": "",
        "rule": [
            "d2220"
        ]
    },
    {
        "instruction": "",
        "id": "q2221",
        "input": "asterisk notation in python 3 passing async functions",
        "output": "",
        "rule": [
            "d2221"
        ]
    },
    {
        "instruction": "",
        "id": "q2222",
        "input": "python determin the width of a character",
        "output": "",
        "rule": [
            "d2222"
        ]
    },
    {
        "instruction": "",
        "id": "q2223",
        "input": "average values for key in dictionary python",
        "output": "",
        "rule": [
            "d2223"
        ]
    },
    {
        "instruction": "",
        "id": "q2224",
        "input": "python determine column types",
        "output": "",
        "rule": [
            "d2224"
        ]
    },
    {
        "instruction": "",
        "id": "q2225",
        "input": "aws lambda python working with files",
        "output": "",
        "rule": [
            "d2225"
        ]
    },
    {
        "instruction": "",
        "id": "q2226",
        "input": "python determine if key is in dict",
        "output": "",
        "rule": [
            "d2226"
        ]
    },
    {
        "instruction": "",
        "id": "q2227",
        "input": "axis labels of subplot python",
        "output": "",
        "rule": [
            "d2227"
        ]
    },
    {
        "instruction": "",
        "id": "q2228",
        "input": "python determine one folder is a subfolder of another",
        "output": "",
        "rule": [
            "d2228"
        ]
    },
    {
        "instruction": "",
        "id": "q2229",
        "input": "bar plot with percentages python seaborn",
        "output": "",
        "rule": [
            "d2229"
        ]
    },
    {
        "instruction": "",
        "id": "q2230",
        "input": "python dialog title aply font",
        "output": "",
        "rule": [
            "d2230"
        ]
    },
    {
        "instruction": "",
        "id": "q2231",
        "input": "base64 encoding image python numpy",
        "output": "",
        "rule": [
            "d2231"
        ]
    },
    {
        "instruction": "",
        "id": "q2232",
        "input": "python dict key must be string",
        "output": "",
        "rule": [
            "d2232"
        ]
    },
    {
        "instruction": "",
        "id": "q2233",
        "input": "bold the line to print in python",
        "output": "",
        "rule": [
            "d2233"
        ]
    },
    {
        "instruction": "",
        "id": "q2234",
        "input": "python dict key, val only one item",
        "output": "",
        "rule": [
            "d2234"
        ]
    },
    {
        "instruction": "",
        "id": "q2235",
        "input": "boolean values of ints python",
        "output": "",
        "rule": [
            "d2235"
        ]
    },
    {
        "instruction": "",
        "id": "q2236",
        "input": "python dict merge with same key",
        "output": "",
        "rule": [
            "d2236"
        ]
    },
    {
        "instruction": "",
        "id": "q2237",
        "input": "bounding box given points 3d python",
        "output": "",
        "rule": [
            "d2237"
        ]
    },
    {
        "instruction": "",
        "id": "q2238",
        "input": "python dict update one dict without changing other",
        "output": "",
        "rule": [
            "d2238"
        ]
    },
    {
        "instruction": "",
        "id": "q2239",
        "input": "bounding box to capture an object inpython",
        "output": "",
        "rule": [
            "d2239"
        ]
    },
    {
        "instruction": "",
        "id": "q2240",
        "input": "python dictionary value iterator",
        "output": "",
        "rule": [
            "d2240"
        ]
    },
    {
        "instruction": "",
        "id": "q2241",
        "input": "bytearray default encoding python",
        "output": "",
        "rule": [
            "d2241"
        ]
    },
    {
        "instruction": "",
        "id": "q2242",
        "input": "python dictonary remove null value",
        "output": "",
        "rule": [
            "d2242"
        ]
    },
    {
        "instruction": "",
        "id": "q2243",
        "input": "c c++ remove comments python",
        "output": "",
        "rule": [
            "d2243"
        ]
    },
    {
        "instruction": "",
        "id": "q2244",
        "input": "python disable history file",
        "output": "",
        "rule": [
            "d2244"
        ]
    },
    {
        "instruction": "",
        "id": "q2245",
        "input": "c++ map to python dictionary",
        "output": "",
        "rule": [
            "d2245"
        ]
    },
    {
        "instruction": "",
        "id": "q2246",
        "input": "python distinct query django",
        "output": "",
        "rule": [
            "d2246"
        ]
    },
    {
        "instruction": "",
        "id": "q2247",
        "input": "caching to a file in python",
        "output": "",
        "rule": [
            "d2247"
        ]
    },
    {
        "instruction": "",
        "id": "q2248",
        "input": "python distinguish between float and int",
        "output": "",
        "rule": [
            "d2248"
        ]
    },
    {
        "instruction": "",
        "id": "q2249",
        "input": "calculate byte size of array python",
        "output": "",
        "rule": [
            "d2249"
        ]
    },
    {
        "instruction": "",
        "id": "q2250",
        "input": "python divide array into chunks",
        "output": "",
        "rule": [
            "d2250"
        ]
    },
    {
        "instruction": "",
        "id": "q2251",
        "input": "calculate distance between two longitudes and altitudes python",
        "output": "",
        "rule": [
            "d2251"
        ]
    },
    {
        "instruction": "",
        "id": "q2252",
        "input": "python django checkbox true",
        "output": "",
        "rule": [
            "d2252"
        ]
    },
    {
        "instruction": "",
        "id": "q2253",
        "input": "calculate the calum average of array python",
        "output": "",
        "rule": [
            "d2253"
        ]
    },
    {
        "instruction": "",
        "id": "q2254",
        "input": "python django get request locale",
        "output": "",
        "rule": [
            "d2254"
        ]
    },
    {
        "instruction": "",
        "id": "q2255",
        "input": "calculate time delta in python",
        "output": "",
        "rule": [
            "d2255"
        ]
    },
    {
        "instruction": "",
        "id": "q2256",
        "input": "python django how to get largest id",
        "output": "",
        "rule": [
            "d2256"
        ]
    },
    {
        "instruction": "",
        "id": "q2257",
        "input": "calculate variance of a column of a data frame in python",
        "output": "",
        "rule": [
            "d2257"
        ]
    },
    {
        "instruction": "",
        "id": "q2258",
        "input": "python django many to many field",
        "output": "",
        "rule": [
            "d2258"
        ]
    },
    {
        "instruction": "",
        "id": "q2259",
        "input": "calculating eigenvector centrality with eigenvector in python",
        "output": "",
        "rule": [
            "d2259"
        ]
    },
    {
        "instruction": "",
        "id": "q2260",
        "input": "python django model get largest primary key",
        "output": "",
        "rule": [
            "d2260"
        ]
    },
    {
        "instruction": "",
        "id": "q2261",
        "input": "calculating standard deviation from a list using python",
        "output": "",
        "rule": [
            "d2261"
        ]
    },
    {
        "instruction": "",
        "id": "q2262",
        "input": "python django or flask for json",
        "output": "",
        "rule": [
            "d2262"
        ]
    },
    {
        "instruction": "",
        "id": "q2263",
        "input": "call a javascript function from python file",
        "output": "",
        "rule": [
            "d2263"
        ]
    },
    {
        "instruction": "",
        "id": "q2264",
        "input": "python django response json stack",
        "output": "",
        "rule": [
            "d2264"
        ]
    },
    {
        "instruction": "",
        "id": "q2265",
        "input": "call python code from url",
        "output": "",
        "rule": [
            "d2265"
        ]
    },
    {
        "instruction": "",
        "id": "q2266",
        "input": "python django timezone map to new timezone",
        "output": "",
        "rule": [
            "d2266"
        ]
    },
    {
        "instruction": "",
        "id": "q2267",
        "input": "calling a definded function in python",
        "output": "",
        "rule": [
            "d2267"
        ]
    },
    {
        "instruction": "",
        "id": "q2268",
        "input": "python do you have to close a pool",
        "output": "",
        "rule": [
            "d2268"
        ]
    },
    {
        "instruction": "",
        "id": "q2269",
        "input": "can i check to see if two strings match python",
        "output": "",
        "rule": [
            "d2269"
        ]
    },
    {
        "instruction": "",
        "id": "q2270",
        "input": "python docker api build output stream",
        "output": "",
        "rule": [
            "d2270"
        ]
    },
    {
        "instruction": "",
        "id": "q2271",
        "input": "can i delete unused objects in python",
        "output": "",
        "rule": [
            "d2271"
        ]
    },
    {
        "instruction": "",
        "id": "q2272",
        "input": "python docstring how to make",
        "output": "",
        "rule": [
            "d2272"
        ]
    },
    {
        "instruction": "",
        "id": "q2273",
        "input": "can i initialize a python datetime to none",
        "output": "",
        "rule": [
            "d2273"
        ]
    },
    {
        "instruction": "",
        "id": "q2274",
        "input": "python does slicing return a new list",
        "output": "",
        "rule": [
            "d2274"
        ]
    },
    {
        "instruction": "",
        "id": "q2275",
        "input": "can i pickle and unpickle an object in the same python file",
        "output": "",
        "rule": [
            "d2275"
        ]
    },
    {
        "instruction": "",
        "id": "q2276",
        "input": "python dot product of a vector",
        "output": "",
        "rule": [
            "d2276"
        ]
    },
    {
        "instruction": "",
        "id": "q2277",
        "input": "can you patch within a method python",
        "output": "",
        "rule": [
            "d2277"
        ]
    },
    {
        "instruction": "",
        "id": "q2278",
        "input": "python draw a graph and save",
        "output": "",
        "rule": [
            "d2278"
        ]
    },
    {
        "instruction": "",
        "id": "q2279",
        "input": "can you use enumerate to iterate python",
        "output": "",
        "rule": [
            "d2279"
        ]
    },
    {
        "instruction": "",
        "id": "q2280",
        "input": "python dropdown cant select after change",
        "output": "",
        "rule": [
            "d2280"
        ]
    },
    {
        "instruction": "",
        "id": "q2281",
        "input": "capitalize entire string function python",
        "output": "",
        "rule": [
            "d2281"
        ]
    },
    {
        "instruction": "",
        "id": "q2282",
        "input": "python dump json object",
        "output": "",
        "rule": [
            "d2282"
        ]
    },
    {
        "instruction": "",
        "id": "q2283",
        "input": "capitalize every two letter python",
        "output": "",
        "rule": [
            "d2283"
        ]
    },
    {
        "instruction": "",
        "id": "q2284",
        "input": "python dump pretty json indent",
        "output": "",
        "rule": [
            "d2284"
        ]
    },
    {
        "instruction": "",
        "id": "q2285",
        "input": "capitalize letters in a string python",
        "output": "",
        "rule": [
            "d2285"
        ]
    },
    {
        "instruction": "",
        "id": "q2286",
        "input": "python dynamic create object from dict",
        "output": "",
        "rule": [
            "d2286"
        ]
    },
    {
        "instruction": "",
        "id": "q2287",
        "input": "cdf function generation python",
        "output": "",
        "rule": [
            "d2287"
        ]
    },
    {
        "instruction": "",
        "id": "q2288",
        "input": "python dynamic multiple processes",
        "output": "",
        "rule": [
            "d2288"
        ]
    },
    {
        "instruction": "",
        "id": "q2289",
        "input": "change a date from month end to month begin in python",
        "output": "",
        "rule": [
            "d2289"
        ]
    },
    {
        "instruction": "",
        "id": "q2290",
        "input": "python dynamicly allocate dict kye",
        "output": "",
        "rule": [
            "d2290"
        ]
    },
    {
        "instruction": "",
        "id": "q2291",
        "input": "change all text to lower case in python",
        "output": "",
        "rule": [
            "d2291"
        ]
    },
    {
        "instruction": "",
        "id": "q2292",
        "input": "python elasticsearch bulk performance",
        "output": "",
        "rule": [
            "d2292"
        ]
    },
    {
        "instruction": "",
        "id": "q2293",
        "input": "change array to string python",
        "output": "",
        "rule": [
            "d2293"
        ]
    },
    {
        "instruction": "",
        "id": "q2294",
        "input": "python elasticsearch index mapping",
        "output": "",
        "rule": [
            "d2294"
        ]
    },
    {
        "instruction": "",
        "id": "q2295",
        "input": "change data type python to boolean",
        "output": "",
        "rule": [
            "d2295"
        ]
    },
    {
        "instruction": "",
        "id": "q2296",
        "input": "python elasticsearch new field",
        "output": "",
        "rule": [
            "d2296"
        ]
    },
    {
        "instruction": "",
        "id": "q2297",
        "input": "change list to tuple in python",
        "output": "",
        "rule": [
            "d2297"
        ]
    },
    {
        "instruction": "",
        "id": "q2298",
        "input": "python elegant solution to removing spaces in column names",
        "output": "",
        "rule": [
            "d2298"
        ]
    },
    {
        "instruction": "",
        "id": "q2299",
        "input": "change long date into month in python",
        "output": "",
        "rule": [
            "d2299"
        ]
    },
    {
        "instruction": "",
        "id": "q2300",
        "input": "python elementtree iterparse clear",
        "output": "",
        "rule": [
            "d2300"
        ]
    },
    {
        "instruction": "",
        "id": "q2301",
        "input": "change python 2 to3",
        "output": "",
        "rule": [
            "d2301"
        ]
    },
    {
        "instruction": "",
        "id": "q2302",
        "input": "python email format check",
        "output": "",
        "rule": [
            "d2302"
        ]
    },
    {
        "instruction": "",
        "id": "q2303",
        "input": "change string from ascii enode to deafult in python",
        "output": "",
        "rule": [
            "d2303"
        ]
    },
    {
        "instruction": "",
        "id": "q2304",
        "input": "python ensure shape is ,1 and not ,",
        "output": "",
        "rule": [
            "d2304"
        ]
    },
    {
        "instruction": "",
        "id": "q2305",
        "input": "change sys args to string in python",
        "output": "",
        "rule": [
            "d2305"
        ]
    },
    {
        "instruction": "",
        "id": "q2306",
        "input": "python ensure utf8 string",
        "output": "",
        "rule": [
            "d2306"
        ]
    },
    {
        "instruction": "",
        "id": "q2307",
        "input": "change type for each value in list python",
        "output": "",
        "rule": [
            "d2307"
        ]
    },
    {
        "instruction": "",
        "id": "q2308",
        "input": "python enum list all names",
        "output": "",
        "rule": [
            "d2308"
        ]
    },
    {
        "instruction": "",
        "id": "q2309",
        "input": "change variable prompt in python",
        "output": "",
        "rule": [
            "d2309"
        ]
    },
    {
        "instruction": "",
        "id": "q2310",
        "input": "python enum or global variables",
        "output": "",
        "rule": [
            "d2310"
        ]
    },
    {
        "instruction": "",
        "id": "q2311",
        "input": "changing background widget color python",
        "output": "",
        "rule": [
            "d2311"
        ]
    },
    {
        "instruction": "",
        "id": "q2312",
        "input": "python equvalent of matlab index",
        "output": "",
        "rule": [
            "d2312"
        ]
    },
    {
        "instruction": "",
        "id": "q2313",
        "input": "changing values to complex python",
        "output": "",
        "rule": [
            "d2313"
        ]
    },
    {
        "instruction": "",
        "id": "q2314",
        "input": "python erase previous line",
        "output": "",
        "rule": [
            "d2314"
        ]
    },
    {
        "instruction": "",
        "id": "q2315",
        "input": "check a file in a folder location in python code",
        "output": "",
        "rule": [
            "d2315"
        ]
    },
    {
        "instruction": "",
        "id": "q2316",
        "input": "python eval globals locals",
        "output": "",
        "rule": [
            "d2316"
        ]
    },
    {
        "instruction": "",
        "id": "q2317",
        "input": "check for attribute python object",
        "output": "",
        "rule": [
            "d2317"
        ]
    },
    {
        "instruction": "",
        "id": "q2318",
        "input": "python exc log trace",
        "output": "",
        "rule": [
            "d2318"
        ]
    },
    {
        "instruction": "",
        "id": "q2319",
        "input": "check given regex is valid python regex",
        "output": "",
        "rule": [
            "d2319"
        ]
    },
    {
        "instruction": "",
        "id": "q2320",
        "input": "python excel workbook open giving none type",
        "output": "",
        "rule": [
            "d2320"
        ]
    },
    {
        "instruction": "",
        "id": "q2321",
        "input": "check if 2 arrays are equal python",
        "output": "",
        "rule": [
            "d2321"
        ]
    },
    {
        "instruction": "",
        "id": "q2322",
        "input": "python except flask http 400",
        "output": "",
        "rule": [
            "d2322"
        ]
    },
    {
        "instruction": "",
        "id": "q2323",
        "input": "check if a file is present in a folder using python",
        "output": "",
        "rule": [
            "d2323"
        ]
    },
    {
        "instruction": "",
        "id": "q2324",
        "input": "python exec function timing",
        "output": "",
        "rule": [
            "d2324"
        ]
    },
    {
        "instruction": "",
        "id": "q2325",
        "input": "check if a list contains multiple strings python 2",
        "output": "",
        "rule": [
            "d2325"
        ]
    },
    {
        "instruction": "",
        "id": "q2326",
        "input": "python exec global scope",
        "output": "",
        "rule": [
            "d2326"
        ]
    },
    {
        "instruction": "",
        "id": "q2327",
        "input": "check if a socket is connected python",
        "output": "",
        "rule": [
            "d2327"
        ]
    },
    {
        "instruction": "",
        "id": "q2328",
        "input": "python execute code before exit",
        "output": "",
        "rule": [
            "d2328"
        ]
    },
    {
        "instruction": "",
        "id": "q2329",
        "input": "check if an element exists python",
        "output": "",
        "rule": [
            "d2329"
        ]
    },
    {
        "instruction": "",
        "id": "q2330",
        "input": "python execute query is not returning letthers as the columns names",
        "output": "",
        "rule": [
            "d2330"
        ]
    },
    {
        "instruction": "",
        "id": "q2331",
        "input": "check if an item is in a tuple python",
        "output": "",
        "rule": [
            "d2331"
        ]
    },
    {
        "instruction": "",
        "id": "q2332",
        "input": "python exit still running",
        "output": "",
        "rule": [
            "d2332"
        ]
    },
    {
        "instruction": "",
        "id": "q2333",
        "input": "check if any item in a list is null python",
        "output": "",
        "rule": [
            "d2333"
        ]
    },
    {
        "instruction": "",
        "id": "q2334",
        "input": "python expanding variables inside strings",
        "output": "",
        "rule": [
            "d2334"
        ]
    },
    {
        "instruction": "",
        "id": "q2335",
        "input": "check if attribute key exists json python",
        "output": "",
        "rule": [
            "d2335"
        ]
    },
    {
        "instruction": "",
        "id": "q2336",
        "input": "python extend a dict with kwargs",
        "output": "",
        "rule": [
            "d2336"
        ]
    },
    {
        "instruction": "",
        "id": "q2337",
        "input": "check if cpython isntalled mac os",
        "output": "",
        "rule": [
            "d2337"
        ]
    },
    {
        "instruction": "",
        "id": "q2338",
        "input": "python extract from list to set",
        "output": "",
        "rule": [
            "d2338"
        ]
    },
    {
        "instruction": "",
        "id": "q2339",
        "input": "check if file is json file in python",
        "output": "",
        "rule": [
            "d2339"
        ]
    },
    {
        "instruction": "",
        "id": "q2340",
        "input": "python extract only letters from string",
        "output": "",
        "rule": [
            "d2340"
        ]
    },
    {
        "instruction": "",
        "id": "q2341",
        "input": "check if folder is writable python",
        "output": "",
        "rule": [
            "d2341"
        ]
    },
    {
        "instruction": "",
        "id": "q2342",
        "input": "python extract url parametes",
        "output": "",
        "rule": [
            "d2342"
        ]
    },
    {
        "instruction": "",
        "id": "q2343",
        "input": "check if item is in series python",
        "output": "",
        "rule": [
            "d2343"
        ]
    },
    {
        "instruction": "",
        "id": "q2344",
        "input": "python extract zip to folder",
        "output": "",
        "rule": [
            "d2344"
        ]
    },
    {
        "instruction": "",
        "id": "q2345",
        "input": "check if something is a string python without using type",
        "output": "",
        "rule": [
            "d2345"
        ]
    },
    {
        "instruction": "",
        "id": "q2346",
        "input": "python f string literal float",
        "output": "",
        "rule": [
            "d2346"
        ]
    },
    {
        "instruction": "",
        "id": "q2347",
        "input": "check if string ontains a value python",
        "output": "",
        "rule": [
            "d2347"
        ]
    },
    {
        "instruction": "",
        "id": "q2348",
        "input": "python fft faster than c fft",
        "output": "",
        "rule": [
            "d2348"
        ]
    },
    {
        "instruction": "",
        "id": "q2349",
        "input": "check if two arrays are equal or not python",
        "output": "",
        "rule": [
            "d2349"
        ]
    },
    {
        "instruction": "",
        "id": "q2350",
        "input": "python fft to give phase",
        "output": "",
        "rule": [
            "d2350"
        ]
    },
    {
        "instruction": "",
        "id": "q2351",
        "input": "check if uuid python",
        "output": "",
        "rule": [
            "d2351"
        ]
    },
    {
        "instruction": "",
        "id": "q2352",
        "input": "python fftn pyfft plan",
        "output": "",
        "rule": [
            "d2352"
        ]
    },
    {
        "instruction": "",
        "id": "q2353",
        "input": "check if variable is in locals python",
        "output": "",
        "rule": [
            "d2353"
        ]
    },
    {
        "instruction": "",
        "id": "q2354",
        "input": "python file modified date in milliseconds",
        "output": "",
        "rule": [
            "d2354"
        ]
    },
    {
        "instruction": "",
        "id": "q2355",
        "input": "check if variable is not passed into html python flask",
        "output": "",
        "rule": [
            "d2355"
        ]
    },
    {
        "instruction": "",
        "id": "q2356",
        "input": "python file open access modes",
        "output": "",
        "rule": [
            "d2356"
        ]
    },
    {
        "instruction": "",
        "id": "q2357",
        "input": "check list dimension python",
        "output": "",
        "rule": [
            "d2357"
        ]
    },
    {
        "instruction": "",
        "id": "q2358",
        "input": "python file pointer reset to beginning",
        "output": "",
        "rule": [
            "d2358"
        ]
    },
    {
        "instruction": "",
        "id": "q2359",
        "input": "check matrix dimension in python",
        "output": "",
        "rule": [
            "d2359"
        ]
    },
    {
        "instruction": "",
        "id": "q2360",
        "input": "python file stream length",
        "output": "",
        "rule": [
            "d2360"
        ]
    },
    {
        "instruction": "",
        "id": "q2361",
        "input": "check my python env location",
        "output": "",
        "rule": [
            "d2361"
        ]
    },
    {
        "instruction": "",
        "id": "q2362",
        "input": "python filepath from project folder",
        "output": "",
        "rule": [
            "d2362"
        ]
    },
    {
        "instruction": "",
        "id": "q2363",
        "input": "check set membership for attribute python",
        "output": "",
        "rule": [
            "d2363"
        ]
    },
    {
        "instruction": "",
        "id": "q2364",
        "input": "python fill column with null",
        "output": "",
        "rule": [
            "d2364"
        ]
    },
    {
        "instruction": "",
        "id": "q2365",
        "input": "check skewness of dataset using python",
        "output": "",
        "rule": [
            "d2365"
        ]
    },
    {
        "instruction": "",
        "id": "q2366",
        "input": "python fill masked array",
        "output": "",
        "rule": [
            "d2366"
        ]
    },
    {
        "instruction": "",
        "id": "q2367",
        "input": "check the dimension of the array python numpy",
        "output": "",
        "rule": [
            "d2367"
        ]
    },
    {
        "instruction": "",
        "id": "q2368",
        "input": "python filter none list",
        "output": "",
        "rule": [
            "d2368"
        ]
    },
    {
        "instruction": "",
        "id": "q2369",
        "input": "checking device list python tensorflow",
        "output": "",
        "rule": [
            "d2369"
        ]
    },
    {
        "instruction": "",
        "id": "q2370",
        "input": "python filter to remove certain lines",
        "output": "",
        "rule": [
            "d2370"
        ]
    },
    {
        "instruction": "",
        "id": "q2371",
        "input": "checking if two values are close to eachother python",
        "output": "",
        "rule": [
            "d2371"
        ]
    },
    {
        "instruction": "",
        "id": "q2372",
        "input": "python findall lower upper case",
        "output": "",
        "rule": [
            "d2372"
        ]
    },
    {
        "instruction": "",
        "id": "q2373",
        "input": "clear memory in python to avoid memory error",
        "output": "",
        "rule": [
            "d2373"
        ]
    },
    {
        "instruction": "",
        "id": "q2374",
        "input": "python finding index of item in list",
        "output": "",
        "rule": [
            "d2374"
        ]
    },
    {
        "instruction": "",
        "id": "q2375",
        "input": "clear screen of python shell",
        "output": "",
        "rule": [
            "d2375"
        ]
    },
    {
        "instruction": "",
        "id": "q2376",
        "input": "python finding the second largest number in a list without sorting",
        "output": "",
        "rule": [
            "d2376"
        ]
    },
    {
        "instruction": "",
        "id": "q2377",
        "input": "clearing browser cache after logging out python",
        "output": "",
        "rule": [
            "d2377"
        ]
    },
    {
        "instruction": "",
        "id": "q2378",
        "input": "python flask imagwees show up as file not found",
        "output": "",
        "rule": [
            "d2378"
        ]
    },
    {
        "instruction": "",
        "id": "q2379",
        "input": "clearing everything from memory python",
        "output": "",
        "rule": [
            "d2379"
        ]
    },
    {
        "instruction": "",
        "id": "q2380",
        "input": "python flask jsonify html/text",
        "output": "",
        "rule": [
            "d2380"
        ]
    },
    {
        "instruction": "",
        "id": "q2381",
        "input": "close an h5 file python",
        "output": "",
        "rule": [
            "d2381"
        ]
    },
    {
        "instruction": "",
        "id": "q2382",
        "input": "python flask pass boolean as post",
        "output": "",
        "rule": [
            "d2382"
        ]
    },
    {
        "instruction": "",
        "id": "q2383",
        "input": "close python interactive window",
        "output": "",
        "rule": [
            "d2383"
        ]
    },
    {
        "instruction": "",
        "id": "q2384",
        "input": "python flask return http status 500",
        "output": "",
        "rule": [
            "d2384"
        ]
    },
    {
        "instruction": "",
        "id": "q2385",
        "input": "close socket python shutdown",
        "output": "",
        "rule": [
            "d2385"
        ]
    },
    {
        "instruction": "",
        "id": "q2386",
        "input": "python flask session save",
        "output": "",
        "rule": [
            "d2386"
        ]
    },
    {
        "instruction": "",
        "id": "q2387",
        "input": "python flask set persistent cookies",
        "output": "",
        "rule": [
            "d2387"
        ]
    },
    {
        "instruction": "",
        "id": "q2388",
        "input": "code for go to new line in python",
        "output": "",
        "rule": [
            "d2388"
        ]
    },
    {
        "instruction": "",
        "id": "q2389",
        "input": "python flask static folder",
        "output": "",
        "rule": [
            "d2389"
        ]
    },
    {
        "instruction": "",
        "id": "q2390",
        "input": "code to clear all entries in python",
        "output": "",
        "rule": [
            "d2390"
        ]
    },
    {
        "instruction": "",
        "id": "q2391",
        "input": "python flaskalchemy filter use obejct's attribute",
        "output": "",
        "rule": [
            "d2391"
        ]
    },
    {
        "instruction": "",
        "id": "q2392",
        "input": "python flatten arbitrarily multi nested sequence",
        "output": "",
        "rule": [
            "d2392"
        ]
    },
    {
        "instruction": "",
        "id": "q2393",
        "input": "combine merge pdf files python",
        "output": "",
        "rule": [
            "d2393"
        ]
    },
    {
        "instruction": "",
        "id": "q2394",
        "input": "python flatten list if lists",
        "output": "",
        "rule": [
            "d2394"
        ]
    },
    {
        "instruction": "",
        "id": "q2395",
        "input": "combine to dictionaries python",
        "output": "",
        "rule": [
            "d2395"
        ]
    },
    {
        "instruction": "",
        "id": "q2396",
        "input": "python flatten list or tuples",
        "output": "",
        "rule": [
            "d2396"
        ]
    },
    {
        "instruction": "",
        "id": "q2397",
        "input": "combining hours and minutes to minutes in python",
        "output": "",
        "rule": [
            "d2397"
        ]
    },
    {
        "instruction": "",
        "id": "q2398",
        "input": "python flatten numpy array",
        "output": "",
        "rule": [
            "d2398"
        ]
    },
    {
        "instruction": "",
        "id": "q2399",
        "input": "command for running jar file in python",
        "output": "",
        "rule": [
            "d2399"
        ]
    },
    {
        "instruction": "",
        "id": "q2400",
        "input": "python flatten of nested list",
        "output": "",
        "rule": [
            "d2400"
        ]
    },
    {
        "instruction": "",
        "id": "q2401",
        "input": "command to clear a screen in python shell",
        "output": "",
        "rule": [
            "d2401"
        ]
    },
    {
        "instruction": "",
        "id": "q2402",
        "input": "python flatten string list",
        "output": "",
        "rule": [
            "d2402"
        ]
    },
    {
        "instruction": "",
        "id": "q2403",
        "input": "comments at the beginning of a python file",
        "output": "",
        "rule": [
            "d2403"
        ]
    },
    {
        "instruction": "",
        "id": "q2404",
        "input": "python float to int type round",
        "output": "",
        "rule": [
            "d2404"
        ]
    },
    {
        "instruction": "",
        "id": "q2405",
        "input": "compare character counts from two strings python",
        "output": "",
        "rule": [
            "d2405"
        ]
    },
    {
        "instruction": "",
        "id": "q2406",
        "input": "python flush all buffer",
        "output": "",
        "rule": [
            "d2406"
        ]
    },
    {
        "instruction": "",
        "id": "q2407",
        "input": "compare two xml documents python",
        "output": "",
        "rule": [
            "d2407"
        ]
    },
    {
        "instruction": "",
        "id": "q2408",
        "input": "python force a int type",
        "output": "",
        "rule": [
            "d2408"
        ]
    },
    {
        "instruction": "",
        "id": "q2409",
        "input": "compare unhashable lists python unique values",
        "output": "",
        "rule": [
            "d2409"
        ]
    },
    {
        "instruction": "",
        "id": "q2410",
        "input": "python fork off command and quit",
        "output": "",
        "rule": [
            "d2410"
        ]
    },
    {
        "instruction": "",
        "id": "q2411",
        "input": "compile c++ and python files into oneproject",
        "output": "",
        "rule": [
            "d2411"
        ]
    },
    {
        "instruction": "",
        "id": "q2412",
        "input": "python format multiline table",
        "output": "",
        "rule": [
            "d2412"
        ]
    },
    {
        "instruction": "",
        "id": "q2413",
        "input": "compute manhattan distance python",
        "output": "",
        "rule": [
            "d2413"
        ]
    },
    {
        "instruction": "",
        "id": "q2414",
        "input": "python format string multiple arguemtns example",
        "output": "",
        "rule": [
            "d2414"
        ]
    },
    {
        "instruction": "",
        "id": "q2415",
        "input": "compute the number of nodes in the tree python",
        "output": "",
        "rule": [
            "d2415"
        ]
    },
    {
        "instruction": "",
        "id": "q2416",
        "input": "python format work with latex",
        "output": "",
        "rule": [
            "d2416"
        ]
    },
    {
        "instruction": "",
        "id": "q2417",
        "input": "comupile python into native",
        "output": "",
        "rule": [
            "d2417"
        ]
    },
    {
        "instruction": "",
        "id": "q2418",
        "input": "python formatted print of a tuple",
        "output": "",
        "rule": [
            "d2418"
        ]
    },
    {
        "instruction": "",
        "id": "q2419",
        "input": "comvert timestamp to datetime python",
        "output": "",
        "rule": [
            "d2419"
        ]
    },
    {
        "instruction": "",
        "id": "q2420",
        "input": "python fromtimestamp without time zone",
        "output": "",
        "rule": [
            "d2420"
        ]
    },
    {
        "instruction": "",
        "id": "q2421",
        "input": "conbining str with int in python",
        "output": "",
        "rule": [
            "d2421"
        ]
    },
    {
        "instruction": "",
        "id": "q2422",
        "input": "python function definition of position of occurrences of substring",
        "output": "",
        "rule": [
            "d2422"
        ]
    },
    {
        "instruction": "",
        "id": "q2423",
        "input": "concatenate 1d arrays column wise python",
        "output": "",
        "rule": [
            "d2423"
        ]
    },
    {
        "instruction": "",
        "id": "q2424",
        "input": "python function doc returns none",
        "output": "",
        "rule": [
            "d2424"
        ]
    },
    {
        "instruction": "",
        "id": "q2425",
        "input": "concatenate array along axis python",
        "output": "",
        "rule": [
            "d2425"
        ]
    },
    {
        "instruction": "",
        "id": "q2426",
        "input": "python function get previous coupon date",
        "output": "",
        "rule": [
            "d2426"
        ]
    },
    {
        "instruction": "",
        "id": "q2427",
        "input": "concatenate multidimensional arrays python",
        "output": "",
        "rule": [
            "d2427"
        ]
    },
    {
        "instruction": "",
        "id": "q2428",
        "input": "python function modify global varable",
        "output": "",
        "rule": [
            "d2428"
        ]
    },
    {
        "instruction": "",
        "id": "q2429",
        "input": "concatenate string to list in python",
        "output": "",
        "rule": [
            "d2429"
        ]
    },
    {
        "instruction": "",
        "id": "q2430",
        "input": "python function to remove spaces from a string",
        "output": "",
        "rule": [
            "d2430"
        ]
    },
    {
        "instruction": "",
        "id": "q2431",
        "input": "conda create environment without python",
        "output": "",
        "rule": [
            "d2431"
        ]
    },
    {
        "instruction": "",
        "id": "q2432",
        "input": "python function to restrict decimal places",
        "output": "",
        "rule": [
            "d2432"
        ]
    },
    {
        "instruction": "",
        "id": "q2433",
        "input": "construct url without making request python",
        "output": "",
        "rule": [
            "d2433"
        ]
    },
    {
        "instruction": "",
        "id": "q2434",
        "input": "python functions eucladian distance",
        "output": "",
        "rule": [
            "d2434"
        ]
    },
    {
        "instruction": "",
        "id": "q2435",
        "input": "continuous read of stdin python",
        "output": "",
        "rule": [
            "d2435"
        ]
    },
    {
        "instruction": "",
        "id": "q2436",
        "input": "conver list to dictionary python",
        "output": "",
        "rule": [
            "d2436"
        ]
    },
    {
        "instruction": "",
        "id": "q2437",
        "input": "python generat descrupt hash",
        "output": "",
        "rule": [
            "d2437"
        ]
    },
    {
        "instruction": "",
        "id": "q2438",
        "input": "conver python 2 to python3",
        "output": "",
        "rule": [
            "d2438"
        ]
    },
    {
        "instruction": "",
        "id": "q2439",
        "input": "python generate a range of dates",
        "output": "",
        "rule": [
            "d2439"
        ]
    },
    {
        "instruction": "",
        "id": "q2440",
        "input": "convering string to float in python",
        "output": "",
        "rule": [
            "d2440"
        ]
    },
    {
        "instruction": "",
        "id": "q2441",
        "input": "python generate html report jinja",
        "output": "",
        "rule": [
            "d2441"
        ]
    },
    {
        "instruction": "",
        "id": "q2442",
        "input": "convertblack and white image to booleans python",
        "output": "",
        "rule": [
            "d2442"
        ]
    },
    {
        "instruction": "",
        "id": "q2443",
        "input": "python get a date from a string",
        "output": "",
        "rule": [
            "d2443"
        ]
    },
    {
        "instruction": "",
        "id": "q2444",
        "input": "convolve grid with gaussian python",
        "output": "",
        "rule": [
            "d2444"
        ]
    },
    {
        "instruction": "",
        "id": "q2445",
        "input": "python get a file from remote host",
        "output": "",
        "rule": [
            "d2445"
        ]
    },
    {
        "instruction": "",
        "id": "q2446",
        "input": "copy slice of list in python",
        "output": "",
        "rule": [
            "d2446"
        ]
    },
    {
        "instruction": "",
        "id": "q2447",
        "input": "python get a list item by name",
        "output": "",
        "rule": [
            "d2447"
        ]
    },
    {
        "instruction": "",
        "id": "q2448",
        "input": "cosine distance between vectors python ten",
        "output": "",
        "rule": [
            "d2448"
        ]
    },
    {
        "instruction": "",
        "id": "q2449",
        "input": "python get all fields from object",
        "output": "",
        "rule": [
            "d2449"
        ]
    },
    {
        "instruction": "",
        "id": "q2450",
        "input": "cosine similarity vectors python",
        "output": "",
        "rule": [
            "d2450"
        ]
    },
    {
        "instruction": "",
        "id": "q2451",
        "input": "python get all followers in twitter by twitter api #tweepy",
        "output": "",
        "rule": [
            "d2451"
        ]
    },
    {
        "instruction": "",
        "id": "q2452",
        "input": "count complete tree nodes python",
        "output": "",
        "rule": [
            "d2452"
        ]
    },
    {
        "instruction": "",
        "id": "q2453",
        "input": "python get all unique strings in list",
        "output": "",
        "rule": [
            "d2453"
        ]
    },
    {
        "instruction": "",
        "id": "q2454",
        "input": "count function foe binary treee python",
        "output": "",
        "rule": [
            "d2454"
        ]
    },
    {
        "instruction": "",
        "id": "q2455",
        "input": "python get appdata directory",
        "output": "",
        "rule": [
            "d2455"
        ]
    },
    {
        "instruction": "",
        "id": "q2456",
        "input": "count number of nodes in each subtree python",
        "output": "",
        "rule": [
            "d2456"
        ]
    },
    {
        "instruction": "",
        "id": "q2457",
        "input": "python get args for a called function",
        "output": "",
        "rule": [
            "d2457"
        ]
    },
    {
        "instruction": "",
        "id": "q2458",
        "input": "count number of unique values in list python",
        "output": "",
        "rule": [
            "d2458"
        ]
    },
    {
        "instruction": "",
        "id": "q2459",
        "input": "python get column name of max value",
        "output": "",
        "rule": [
            "d2459"
        ]
    },
    {
        "instruction": "",
        "id": "q2460",
        "input": "count numbers of nan in python numpy",
        "output": "",
        "rule": [
            "d2460"
        ]
    },
    {
        "instruction": "",
        "id": "q2461",
        "input": "python get cosine similarity between 0 and 1",
        "output": "",
        "rule": [
            "d2461"
        ]
    },
    {
        "instruction": "",
        "id": "q2462",
        "input": "count the depth of recursion in python",
        "output": "",
        "rule": [
            "d2462"
        ]
    },
    {
        "instruction": "",
        "id": "q2463",
        "input": "python get current language",
        "output": "",
        "rule": [
            "d2463"
        ]
    },
    {
        "instruction": "",
        "id": "q2464",
        "input": "count the frequency of each letter in a string python",
        "output": "",
        "rule": [
            "d2464"
        ]
    },
    {
        "instruction": "",
        "id": "q2465",
        "input": "python get df column names as list",
        "output": "",
        "rule": [
            "d2465"
        ]
    },
    {
        "instruction": "",
        "id": "q2466",
        "input": "count white space in python",
        "output": "",
        "rule": [
            "d2466"
        ]
    },
    {
        "instruction": "",
        "id": "q2467",
        "input": "python get digits from int without str",
        "output": "",
        "rule": [
            "d2467"
        ]
    },
    {
        "instruction": "",
        "id": "q2468",
        "input": "covert str to bytes in python",
        "output": "",
        "rule": [
            "d2468"
        ]
    },
    {
        "instruction": "",
        "id": "q2469",
        "input": "python get dimensions from web image",
        "output": "",
        "rule": [
            "d2469"
        ]
    },
    {
        "instruction": "",
        "id": "q2470",
        "input": "create a 3x3 identity matrix in python",
        "output": "",
        "rule": [
            "d2470"
        ]
    },
    {
        "instruction": "",
        "id": "q2471",
        "input": "python get directory modification time",
        "output": "",
        "rule": [
            "d2471"
        ]
    },
    {
        "instruction": "",
        "id": "q2472",
        "input": "create a data frame in python and display first 5 rows",
        "output": "",
        "rule": [
            "d2472"
        ]
    },
    {
        "instruction": "",
        "id": "q2473",
        "input": "create an algorithm that will count the number of letters in a given string python",
        "output": "",
        "rule": [
            "d2473"
        ]
    },
    {
        "instruction": "",
        "id": "q2474",
        "input": "python get file's parent directory",
        "output": "",
        "rule": [
            "d2474"
        ]
    },
    {
        "instruction": "",
        "id": "q2475",
        "input": "create an inner join python",
        "output": "",
        "rule": [
            "d2475"
        ]
    },
    {
        "instruction": "",
        "id": "q2476",
        "input": "python get first element from list quickly",
        "output": "",
        "rule": [
            "d2476"
        ]
    },
    {
        "instruction": "",
        "id": "q2477",
        "input": "create concave polygon from given points in python",
        "output": "",
        "rule": [
            "d2477"
        ]
    },
    {
        "instruction": "",
        "id": "q2478",
        "input": "python get first n items from iterator",
        "output": "",
        "rule": [
            "d2478"
        ]
    },
    {
        "instruction": "",
        "id": "q2479",
        "input": "create dictionary with list of lists of tuples are values python",
        "output": "",
        "rule": [
            "d2479"
        ]
    },
    {
        "instruction": "",
        "id": "q2480",
        "input": "python get frequncy from fft",
        "output": "",
        "rule": [
            "d2480"
        ]
    },
    {
        "instruction": "",
        "id": "q2481",
        "input": "create iterables from list in python",
        "output": "",
        "rule": [
            "d2481"
        ]
    },
    {
        "instruction": "",
        "id": "q2482",
        "input": "python get function name",
        "output": "",
        "rule": [
            "d2482"
        ]
    },
    {
        "instruction": "",
        "id": "q2483",
        "input": "create many symbols python sympy",
        "output": "",
        "rule": [
            "d2483"
        ]
    },
    {
        "instruction": "",
        "id": "q2484",
        "input": "create numpy array from list python",
        "output": "",
        "rule": [
            "d2484"
        ]
    },
    {
        "instruction": "",
        "id": "q2485",
        "input": "python get global varibles",
        "output": "",
        "rule": [
            "d2485"
        ]
    },
    {
        "instruction": "",
        "id": "q2486",
        "input": "create one hot values for input lenght python",
        "output": "",
        "rule": [
            "d2486"
        ]
    },
    {
        "instruction": "",
        "id": "q2487",
        "input": "python get image from a url and save as",
        "output": "",
        "rule": [
            "d2487"
        ]
    },
    {
        "instruction": "",
        "id": "q2488",
        "input": "create python api fucntion that takes params url",
        "output": "",
        "rule": [
            "d2488"
        ]
    },
    {
        "instruction": "",
        "id": "q2489",
        "input": "python get key form value",
        "output": "",
        "rule": [
            "d2489"
        ]
    },
    {
        "instruction": "",
        "id": "q2490",
        "input": "create python docstring site",
        "output": "",
        "rule": [
            "d2490"
        ]
    },
    {
        "instruction": "",
        "id": "q2491",
        "input": "python get len of two dimentional array",
        "output": "",
        "rule": [
            "d2491"
        ]
    },
    {
        "instruction": "",
        "id": "q2492",
        "input": "create rdd using parallelize python",
        "output": "",
        "rule": [
            "d2492"
        ]
    },
    {
        "instruction": "",
        "id": "q2493",
        "input": "python get list of devices on home network",
        "output": "",
        "rule": [
            "d2493"
        ]
    },
    {
        "instruction": "",
        "id": "q2494",
        "input": "create task asyncio python",
        "output": "",
        "rule": [
            "d2494"
        ]
    },
    {
        "instruction": "",
        "id": "q2495",
        "input": "creating a convolution function in python",
        "output": "",
        "rule": [
            "d2495"
        ]
    },
    {
        "instruction": "",
        "id": "q2496",
        "input": "python get locals for stack frame",
        "output": "",
        "rule": [
            "d2496"
        ]
    },
    {
        "instruction": "",
        "id": "q2497",
        "input": "creating a sequence of points python",
        "output": "",
        "rule": [
            "d2497"
        ]
    },
    {
        "instruction": "",
        "id": "q2498",
        "input": "python get md5 hash file",
        "output": "",
        "rule": [
            "d2498"
        ]
    },
    {
        "instruction": "",
        "id": "q2499",
        "input": "creating voronoi polygons in python",
        "output": "",
        "rule": [
            "d2499"
        ]
    },
    {
        "instruction": "",
        "id": "q2500",
        "input": "python get memory size of all ndarray",
        "output": "",
        "rule": [
            "d2500"
        ]
    },
    {
        "instruction": "",
        "id": "q2501",
        "input": "python get minutes elapsed two datetimes",
        "output": "",
        "rule": [
            "d2501"
        ]
    },
    {
        "instruction": "",
        "id": "q2502",
        "input": "crrate python list from json data",
        "output": "",
        "rule": [
            "d2502"
        ]
    },
    {
        "instruction": "",
        "id": "q2503",
        "input": "python get name of a passed variable",
        "output": "",
        "rule": [
            "d2503"
        ]
    },
    {
        "instruction": "",
        "id": "q2504",
        "input": "ctype array python initialize with list",
        "output": "",
        "rule": [
            "d2504"
        ]
    },
    {
        "instruction": "",
        "id": "q2505",
        "input": "python get name of current node",
        "output": "",
        "rule": [
            "d2505"
        ]
    },
    {
        "instruction": "",
        "id": "q2506",
        "input": "ctypes pointer to python variable",
        "output": "",
        "rule": [
            "d2506"
        ]
    },
    {
        "instruction": "",
        "id": "q2507",
        "input": "python get object attribute by string",
        "output": "",
        "rule": [
            "d2507"
        ]
    },
    {
        "instruction": "",
        "id": "q2508",
        "input": "ctypes python pointer to iunt",
        "output": "",
        "rule": [
            "d2508"
        ]
    },
    {
        "instruction": "",
        "id": "q2509",
        "input": "custom exponential fit python",
        "output": "",
        "rule": [
            "d2509"
        ]
    },
    {
        "instruction": "",
        "id": "q2510",
        "input": "python get open file length",
        "output": "",
        "rule": [
            "d2510"
        ]
    },
    {
        "instruction": "",
        "id": "q2511",
        "input": "cv2 python image grb2gray",
        "output": "",
        "rule": [
            "d2511"
        ]
    },
    {
        "instruction": "",
        "id": "q2512",
        "input": "python get opengl matrix",
        "output": "",
        "rule": [
            "d2512"
        ]
    },
    {
        "instruction": "",
        "id": "q2513",
        "input": "datetime data type python",
        "output": "",
        "rule": [
            "d2513"
        ]
    },
    {
        "instruction": "",
        "id": "q2514",
        "input": "python get output of subprocess run",
        "output": "",
        "rule": [
            "d2514"
        ]
    },
    {
        "instruction": "",
        "id": "q2515",
        "input": "datetime format for elasticsearch python",
        "output": "",
        "rule": [
            "d2515"
        ]
    },
    {
        "instruction": "",
        "id": "q2516",
        "input": "python get page text",
        "output": "",
        "rule": [
            "d2516"
        ]
    },
    {
        "instruction": "",
        "id": "q2517",
        "input": "datetime get local time zone python",
        "output": "",
        "rule": [
            "d2517"
        ]
    },
    {
        "instruction": "",
        "id": "q2518",
        "input": "python get parent dir name",
        "output": "",
        "rule": [
            "d2518"
        ]
    },
    {
        "instruction": "",
        "id": "q2519",
        "input": "datetime get utc offset python",
        "output": "",
        "rule": [
            "d2519"
        ]
    },
    {
        "instruction": "",
        "id": "q2520",
        "input": "python get parent directory of file",
        "output": "",
        "rule": [
            "d2520"
        ]
    },
    {
        "instruction": "",
        "id": "q2521",
        "input": "datetime to epoch seconds python",
        "output": "",
        "rule": [
            "d2521"
        ]
    },
    {
        "instruction": "",
        "id": "q2522",
        "input": "python get path of file in project",
        "output": "",
        "rule": [
            "d2522"
        ]
    },
    {
        "instruction": "",
        "id": "q2523",
        "input": "datetime64[ns, utc] python equivilant in mysql",
        "output": "",
        "rule": [
            "d2523"
        ]
    },
    {
        "instruction": "",
        "id": "q2524",
        "input": "python get pathname for font",
        "output": "",
        "rule": [
            "d2524"
        ]
    },
    {
        "instruction": "",
        "id": "q2525",
        "input": "decode base64 text string in python",
        "output": "",
        "rule": [
            "d2525"
        ]
    },
    {
        "instruction": "",
        "id": "q2526",
        "input": "python get pdf file properties",
        "output": "",
        "rule": [
            "d2526"
        ]
    },
    {
        "instruction": "",
        "id": "q2527",
        "input": "decompose a decimal number into binary numbersbin python",
        "output": "",
        "rule": [
            "d2527"
        ]
    },
    {
        "instruction": "",
        "id": "q2528",
        "input": "python get percentage of scrollbars for edge",
        "output": "",
        "rule": [
            "d2528"
        ]
    },
    {
        "instruction": "",
        "id": "q2529",
        "input": "define list python dynmic boolean values",
        "output": "",
        "rule": [
            "d2529"
        ]
    },
    {
        "instruction": "",
        "id": "q2530",
        "input": "python get pre decorated function",
        "output": "",
        "rule": [
            "d2530"
        ]
    },
    {
        "instruction": "",
        "id": "q2531",
        "input": "defining dictionary from a csv file in python",
        "output": "",
        "rule": [
            "d2531"
        ]
    },
    {
        "instruction": "",
        "id": "q2532",
        "input": "python get process's network usage",
        "output": "",
        "rule": [
            "d2532"
        ]
    },
    {
        "instruction": "",
        "id": "q2533",
        "input": "degree of similarity between strings python",
        "output": "",
        "rule": [
            "d2533"
        ]
    },
    {
        "instruction": "",
        "id": "q2534",
        "input": "python get ram usage in kb",
        "output": "",
        "rule": [
            "d2534"
        ]
    },
    {
        "instruction": "",
        "id": "q2535",
        "input": "delete a json key in python",
        "output": "",
        "rule": [
            "d2535"
        ]
    },
    {
        "instruction": "",
        "id": "q2536",
        "input": "python get rid of duplicates in a list",
        "output": "",
        "rule": [
            "d2536"
        ]
    },
    {
        "instruction": "",
        "id": "q2537",
        "input": "delete none value form dictionary python3",
        "output": "",
        "rule": [
            "d2537"
        ]
    },
    {
        "instruction": "",
        "id": "q2538",
        "input": "python get samples from wave file",
        "output": "",
        "rule": [
            "d2538"
        ]
    },
    {
        "instruction": "",
        "id": "q2539",
        "input": "delete variables in python from memory",
        "output": "",
        "rule": [
            "d2539"
        ]
    },
    {
        "instruction": "",
        "id": "q2540",
        "input": "python get second value form tuple",
        "output": "",
        "rule": [
            "d2540"
        ]
    },
    {
        "instruction": "",
        "id": "q2541",
        "input": "deleting duplicate eelements in list python",
        "output": "",
        "rule": [
            "d2541"
        ]
    },
    {
        "instruction": "",
        "id": "q2542",
        "input": "python get shell output",
        "output": "",
        "rule": [
            "d2542"
        ]
    },
    {
        "instruction": "",
        "id": "q2543",
        "input": "deleting files from a folder in python",
        "output": "",
        "rule": [
            "d2543"
        ]
    },
    {
        "instruction": "",
        "id": "q2544",
        "input": "python get shell width",
        "output": "",
        "rule": [
            "d2544"
        ]
    },
    {
        "instruction": "",
        "id": "q2545",
        "input": "denormalize normalized array python",
        "output": "",
        "rule": [
            "d2545"
        ]
    },
    {
        "instruction": "",
        "id": "q2546",
        "input": "python get tf holder size",
        "output": "",
        "rule": [
            "d2546"
        ]
    },
    {
        "instruction": "",
        "id": "q2547",
        "input": "design binary tree in python",
        "output": "",
        "rule": [
            "d2547"
        ]
    },
    {
        "instruction": "",
        "id": "q2548",
        "input": "python get the column name of the minimum value",
        "output": "",
        "rule": [
            "d2548"
        ]
    },
    {
        "instruction": "",
        "id": "q2549",
        "input": "design db memory cache python",
        "output": "",
        "rule": [
            "d2549"
        ]
    },
    {
        "instruction": "",
        "id": "q2550",
        "input": "python get the item from index",
        "output": "",
        "rule": [
            "d2550"
        ]
    },
    {
        "instruction": "",
        "id": "q2551",
        "input": "detect screen changes python",
        "output": "",
        "rule": [
            "d2551"
        ]
    },
    {
        "instruction": "",
        "id": "q2552",
        "input": "python get the length of a file",
        "output": "",
        "rule": [
            "d2552"
        ]
    },
    {
        "instruction": "",
        "id": "q2553",
        "input": "determine audio input volume in python",
        "output": "",
        "rule": [
            "d2553"
        ]
    },
    {
        "instruction": "",
        "id": "q2554",
        "input": "python get the local hostname",
        "output": "",
        "rule": [
            "d2554"
        ]
    },
    {
        "instruction": "",
        "id": "q2555",
        "input": "determine precision of float returned in python",
        "output": "",
        "rule": [
            "d2555"
        ]
    },
    {
        "instruction": "",
        "id": "q2556",
        "input": "python get the location of the script",
        "output": "",
        "rule": [
            "d2556"
        ]
    },
    {
        "instruction": "",
        "id": "q2557",
        "input": "determine the number of columns in a spreadsheet in python openpyxl",
        "output": "",
        "rule": [
            "d2557"
        ]
    },
    {
        "instruction": "",
        "id": "q2558",
        "input": "python get the name of an object as string",
        "output": "",
        "rule": [
            "d2558"
        ]
    },
    {
        "instruction": "",
        "id": "q2559",
        "input": "develop smart contract in python using flask",
        "output": "",
        "rule": [
            "d2559"
        ]
    },
    {
        "instruction": "",
        "id": "q2560",
        "input": "python get the object name",
        "output": "",
        "rule": [
            "d2560"
        ]
    },
    {
        "instruction": "",
        "id": "q2561",
        "input": "different types of extensions python",
        "output": "",
        "rule": [
            "d2561"
        ]
    },
    {
        "instruction": "",
        "id": "q2562",
        "input": "python get timestamp of files in dir",
        "output": "",
        "rule": [
            "d2562"
        ]
    },
    {
        "instruction": "",
        "id": "q2563",
        "input": "difne python list size",
        "output": "",
        "rule": [
            "d2563"
        ]
    },
    {
        "instruction": "",
        "id": "q2564",
        "input": "python get top post form reddit",
        "output": "",
        "rule": [
            "d2564"
        ]
    },
    {
        "instruction": "",
        "id": "q2565",
        "input": "dimension check list python",
        "output": "",
        "rule": [
            "d2565"
        ]
    },
    {
        "instruction": "",
        "id": "q2566",
        "input": "python get url of active browser",
        "output": "",
        "rule": [
            "d2566"
        ]
    },
    {
        "instruction": "",
        "id": "q2567",
        "input": "dimension of the array to a variable in python",
        "output": "",
        "rule": [
            "d2567"
        ]
    },
    {
        "instruction": "",
        "id": "q2568",
        "input": "python get username and password from file",
        "output": "",
        "rule": [
            "d2568"
        ]
    },
    {
        "instruction": "",
        "id": "q2569",
        "input": "dimensions of the array python",
        "output": "",
        "rule": [
            "d2569"
        ]
    },
    {
        "instruction": "",
        "id": "q2570",
        "input": "python get username by id",
        "output": "",
        "rule": [
            "d2570"
        ]
    },
    {
        "instruction": "",
        "id": "q2571",
        "input": "discord python bot join voice",
        "output": "",
        "rule": [
            "d2571"
        ]
    },
    {
        "instruction": "",
        "id": "q2572",
        "input": "python get variable object from name as string",
        "output": "",
        "rule": [
            "d2572"
        ]
    },
    {
        "instruction": "",
        "id": "q2573",
        "input": "discord python join voice channel;",
        "output": "",
        "rule": [
            "d2573"
        ]
    },
    {
        "instruction": "",
        "id": "q2574",
        "input": "python get window position",
        "output": "",
        "rule": [
            "d2574"
        ]
    },
    {
        "instruction": "",
        "id": "q2575",
        "input": "discord python user name change event",
        "output": "",
        "rule": [
            "d2575"
        ]
    },
    {
        "instruction": "",
        "id": "q2576",
        "input": "python get windows screen resolution",
        "output": "",
        "rule": [
            "d2576"
        ]
    },
    {
        "instruction": "",
        "id": "q2577",
        "input": "display top 2sum in column python",
        "output": "",
        "rule": [
            "d2577"
        ]
    },
    {
        "instruction": "",
        "id": "q2578",
        "input": "python get/post with a authtoken",
        "output": "",
        "rule": [
            "d2578"
        ]
    },
    {
        "instruction": "",
        "id": "q2579",
        "input": "displaying a png image in a widget using python",
        "output": "",
        "rule": [
            "d2579"
        ]
    },
    {
        "instruction": "",
        "id": "q2580",
        "input": "python getlogger set formal",
        "output": "",
        "rule": [
            "d2580"
        ]
    },
    {
        "instruction": "",
        "id": "q2581",
        "input": "displaying the page number of a pdf with python",
        "output": "",
        "rule": [
            "d2581"
        ]
    },
    {
        "instruction": "",
        "id": "q2582",
        "input": "python gevent pool crawler",
        "output": "",
        "rule": [
            "d2582"
        ]
    },
    {
        "instruction": "",
        "id": "q2583",
        "input": "django create copy of object python",
        "output": "",
        "rule": [
            "d2583"
        ]
    },
    {
        "instruction": "",
        "id": "q2584",
        "input": "python gevent request slow",
        "output": "",
        "rule": [
            "d2584"
        ]
    },
    {
        "instruction": "",
        "id": "q2585",
        "input": "django distinct values python",
        "output": "",
        "rule": [
            "d2585"
        ]
    },
    {
        "instruction": "",
        "id": "q2586",
        "input": "python gif too large",
        "output": "",
        "rule": [
            "d2586"
        ]
    },
    {
        "instruction": "",
        "id": "q2587",
        "input": "django managepy to run python file",
        "output": "",
        "rule": [
            "d2587"
        ]
    },
    {
        "instruction": "",
        "id": "q2588",
        "input": "python git list branches",
        "output": "",
        "rule": [
            "d2588"
        ]
    },
    {
        "instruction": "",
        "id": "q2589",
        "input": "django python returns object not name",
        "output": "",
        "rule": [
            "d2589"
        ]
    },
    {
        "instruction": "",
        "id": "q2590",
        "input": "python given two coordinates get distance azimuth",
        "output": "",
        "rule": [
            "d2590"
        ]
    },
    {
        "instruction": "",
        "id": "q2591",
        "input": "django set form data in python",
        "output": "",
        "rule": [
            "d2591"
        ]
    },
    {
        "instruction": "",
        "id": "q2592",
        "input": "python grab information from pdf",
        "output": "",
        "rule": [
            "d2592"
        ]
    },
    {
        "instruction": "",
        "id": "q2593",
        "input": "django template python object to javascript",
        "output": "",
        "rule": [
            "d2593"
        ]
    },
    {
        "instruction": "",
        "id": "q2594",
        "input": "python graphviz output html",
        "output": "",
        "rule": [
            "d2594"
        ]
    },
    {
        "instruction": "",
        "id": "q2595",
        "input": "do an array with the same value of a scalar python",
        "output": "",
        "rule": [
            "d2595"
        ]
    },
    {
        "instruction": "",
        "id": "q2596",
        "input": "python grouped calculation for standard deviation",
        "output": "",
        "rule": [
            "d2596"
        ]
    },
    {
        "instruction": "",
        "id": "q2597",
        "input": "do python dictionary keys have to be strings",
        "output": "",
        "rule": [
            "d2597"
        ]
    },
    {
        "instruction": "",
        "id": "q2598",
        "input": "python have a destructor",
        "output": "",
        "rule": [
            "d2598"
        ]
    },
    {
        "instruction": "",
        "id": "q2599",
        "input": "document content docx python",
        "output": "",
        "rule": [
            "d2599"
        ]
    },
    {
        "instruction": "",
        "id": "q2600",
        "input": "python hex to hsv",
        "output": "",
        "rule": [
            "d2600"
        ]
    },
    {
        "instruction": "",
        "id": "q2601",
        "input": "does django under python2 and python3 different",
        "output": "",
        "rule": [
            "d2601"
        ]
    },
    {
        "instruction": "",
        "id": "q2602",
        "input": "python how can you tell if a method is async",
        "output": "",
        "rule": [
            "d2602"
        ]
    },
    {
        "instruction": "",
        "id": "q2603",
        "input": "does every python object have repr",
        "output": "",
        "rule": [
            "d2603"
        ]
    },
    {
        "instruction": "",
        "id": "q2604",
        "input": "python how to access self arrgument of one function in another function",
        "output": "",
        "rule": [
            "d2604"
        ]
    },
    {
        "instruction": "",
        "id": "q2605",
        "input": "does http reuesta return a filehandle python",
        "output": "",
        "rule": [
            "d2605"
        ]
    },
    {
        "instruction": "",
        "id": "q2606",
        "input": "python how to add parent path",
        "output": "",
        "rule": [
            "d2606"
        ]
    },
    {
        "instruction": "",
        "id": "q2607",
        "input": "draw a line python",
        "output": "",
        "rule": [
            "d2607"
        ]
    },
    {
        "instruction": "",
        "id": "q2608",
        "input": "python how to adjust time for timezone",
        "output": "",
        "rule": [
            "d2608"
        ]
    },
    {
        "instruction": "",
        "id": "q2609",
        "input": "dynamically get the global constants of a python file",
        "output": "",
        "rule": [
            "d2609"
        ]
    },
    {
        "instruction": "",
        "id": "q2610",
        "input": "python how to apply linear transform to features",
        "output": "",
        "rule": [
            "d2610"
        ]
    },
    {
        "instruction": "",
        "id": "q2611",
        "input": "dynamically opening serial ports python",
        "output": "",
        "rule": [
            "d2611"
        ]
    },
    {
        "instruction": "",
        "id": "q2612",
        "input": "python how to bind window closing event",
        "output": "",
        "rule": [
            "d2612"
        ]
    },
    {
        "instruction": "",
        "id": "q2613",
        "input": "dynamodb delete all items python",
        "output": "",
        "rule": [
            "d2613"
        ]
    },
    {
        "instruction": "",
        "id": "q2614",
        "input": "python how to change datetime to different time zone",
        "output": "",
        "rule": [
            "d2614"
        ]
    },
    {
        "instruction": "",
        "id": "q2615",
        "input": "python how to change key name",
        "output": "",
        "rule": [
            "d2615"
        ]
    },
    {
        "instruction": "",
        "id": "q2616",
        "input": "ecef xyz to lat lon alt python",
        "output": "",
        "rule": [
            "d2616"
        ]
    },
    {
        "instruction": "",
        "id": "q2617",
        "input": "python how to check datatype",
        "output": "",
        "rule": [
            "d2617"
        ]
    },
    {
        "instruction": "",
        "id": "q2618",
        "input": "elasticsearch python scroll results lmit",
        "output": "",
        "rule": [
            "d2618"
        ]
    },
    {
        "instruction": "",
        "id": "q2619",
        "input": "python how to check file size",
        "output": "",
        "rule": [
            "d2619"
        ]
    },
    {
        "instruction": "",
        "id": "q2620",
        "input": "eliminate non alpha in a string in python",
        "output": "",
        "rule": [
            "d2620"
        ]
    },
    {
        "instruction": "",
        "id": "q2621",
        "input": "python how to check if dictionaries are equal",
        "output": "",
        "rule": [
            "d2621"
        ]
    },
    {
        "instruction": "",
        "id": "q2622",
        "input": "enerate random numbers python normal distribution",
        "output": "",
        "rule": [
            "d2622"
        ]
    },
    {
        "instruction": "",
        "id": "q2623",
        "input": "python how to check regex",
        "output": "",
        "rule": [
            "d2623"
        ]
    },
    {
        "instruction": "",
        "id": "q2624",
        "input": "ensure python magicmock was called with same dictionary",
        "output": "",
        "rule": [
            "d2624"
        ]
    },
    {
        "instruction": "",
        "id": "q2625",
        "input": "python how to check value length",
        "output": "",
        "rule": [
            "d2625"
        ]
    },
    {
        "instruction": "",
        "id": "q2626",
        "input": "epoch time to utc python",
        "output": "",
        "rule": [
            "d2626"
        ]
    },
    {
        "instruction": "",
        "id": "q2627",
        "input": "python how to check what type a value is",
        "output": "",
        "rule": [
            "d2627"
        ]
    },
    {
        "instruction": "",
        "id": "q2628",
        "input": "epoch to utc time python",
        "output": "",
        "rule": [
            "d2628"
        ]
    },
    {
        "instruction": "",
        "id": "q2629",
        "input": "python how to clear empty spots in a list",
        "output": "",
        "rule": [
            "d2629"
        ]
    },
    {
        "instruction": "",
        "id": "q2630",
        "input": "equation to tell whether two line segments overlap python",
        "output": "",
        "rule": [
            "d2630"
        ]
    },
    {
        "instruction": "",
        "id": "q2631",
        "input": "python how to compare type",
        "output": "",
        "rule": [
            "d2631"
        ]
    },
    {
        "instruction": "",
        "id": "q2632",
        "input": "equivalent or not equivalent python",
        "output": "",
        "rule": [
            "d2632"
        ]
    },
    {
        "instruction": "",
        "id": "q2633",
        "input": "python how to construct a n list",
        "output": "",
        "rule": [
            "d2633"
        ]
    },
    {
        "instruction": "",
        "id": "q2634",
        "input": "escape python % in string",
        "output": "",
        "rule": [
            "d2634"
        ]
    },
    {
        "instruction": "",
        "id": "q2635",
        "input": "python how to copy a file to theclipboard",
        "output": "",
        "rule": [
            "d2635"
        ]
    },
    {
        "instruction": "",
        "id": "q2636",
        "input": "escape string for percent sign python",
        "output": "",
        "rule": [
            "d2636"
        ]
    },
    {
        "instruction": "",
        "id": "q2637",
        "input": "python how to def (x,y)",
        "output": "",
        "rule": [
            "d2637"
        ]
    },
    {
        "instruction": "",
        "id": "q2638",
        "input": "exit python memory leak",
        "output": "",
        "rule": [
            "d2638"
        ]
    },
    {
        "instruction": "",
        "id": "q2639",
        "input": "python how to define an bytearray",
        "output": "",
        "rule": [
            "d2639"
        ]
    },
    {
        "instruction": "",
        "id": "q2640",
        "input": "explicitly specify the path in python",
        "output": "",
        "rule": [
            "d2640"
        ]
    },
    {
        "instruction": "",
        "id": "q2641",
        "input": "python how to delete a directory",
        "output": "",
        "rule": [
            "d2641"
        ]
    },
    {
        "instruction": "",
        "id": "q2642",
        "input": "exponential moving std in python",
        "output": "",
        "rule": [
            "d2642"
        ]
    },
    {
        "instruction": "",
        "id": "q2643",
        "input": "python how to determine a string is a file path or url",
        "output": "",
        "rule": [
            "d2643"
        ]
    },
    {
        "instruction": "",
        "id": "q2644",
        "input": "extract images from pdf and save it in different pdf using python",
        "output": "",
        "rule": [
            "d2644"
        ]
    },
    {
        "instruction": "",
        "id": "q2645",
        "input": "python how to do enter new line",
        "output": "",
        "rule": [
            "d2645"
        ]
    },
    {
        "instruction": "",
        "id": "q2646",
        "input": "extract number from tuple python",
        "output": "",
        "rule": [
            "d2646"
        ]
    },
    {
        "instruction": "",
        "id": "q2647",
        "input": "python how to do next next",
        "output": "",
        "rule": [
            "d2647"
        ]
    },
    {
        "instruction": "",
        "id": "q2648",
        "input": "extract word document custom properties with python",
        "output": "",
        "rule": [
            "d2648"
        ]
    },
    {
        "instruction": "",
        "id": "q2649",
        "input": "python how to download a json file",
        "output": "",
        "rule": [
            "d2649"
        ]
    },
    {
        "instruction": "",
        "id": "q2650",
        "input": "faster way to get indices of nan in array, python",
        "output": "",
        "rule": [
            "d2650"
        ]
    },
    {
        "instruction": "",
        "id": "q2651",
        "input": "python how to exit current directory",
        "output": "",
        "rule": [
            "d2651"
        ]
    },
    {
        "instruction": "",
        "id": "q2652",
        "input": "fastest way of finding maximum number in a heap python",
        "output": "",
        "rule": [
            "d2652"
        ]
    },
    {
        "instruction": "",
        "id": "q2653",
        "input": "python how to get all object method",
        "output": "",
        "rule": [
            "d2653"
        ]
    },
    {
        "instruction": "",
        "id": "q2654",
        "input": "fastest way to iterate python",
        "output": "",
        "rule": [
            "d2654"
        ]
    },
    {
        "instruction": "",
        "id": "q2655",
        "input": "python how to get back current method name",
        "output": "",
        "rule": [
            "d2655"
        ]
    },
    {
        "instruction": "",
        "id": "q2656",
        "input": "features with single value python",
        "output": "",
        "rule": [
            "d2656"
        ]
    },
    {
        "instruction": "",
        "id": "q2657",
        "input": "python how to get column type from database views",
        "output": "",
        "rule": [
            "d2657"
        ]
    },
    {
        "instruction": "",
        "id": "q2658",
        "input": "fetch last row python sql",
        "output": "",
        "rule": [
            "d2658"
        ]
    },
    {
        "instruction": "",
        "id": "q2659",
        "input": "python how to get dimension of list",
        "output": "",
        "rule": [
            "d2659"
        ]
    },
    {
        "instruction": "",
        "id": "q2660",
        "input": "fft 3d code in pure python",
        "output": "",
        "rule": [
            "d2660"
        ]
    },
    {
        "instruction": "",
        "id": "q2661",
        "input": "python how to get downloaded file",
        "output": "",
        "rule": [
            "d2661"
        ]
    },
    {
        "instruction": "",
        "id": "q2662",
        "input": "file not read in python with utf encoding",
        "output": "",
        "rule": [
            "d2662"
        ]
    },
    {
        "instruction": "",
        "id": "q2663",
        "input": "python how to get kubernetes pods counts on same namespace",
        "output": "",
        "rule": [
            "d2663"
        ]
    },
    {
        "instruction": "",
        "id": "q2664",
        "input": "file object python size",
        "output": "",
        "rule": [
            "d2664"
        ]
    },
    {
        "instruction": "",
        "id": "q2665",
        "input": "python how to get sorted list of dictionary keys",
        "output": "",
        "rule": [
            "d2665"
        ]
    },
    {
        "instruction": "",
        "id": "q2666",
        "input": "fill all numeric columns null values python",
        "output": "",
        "rule": [
            "d2666"
        ]
    },
    {
        "instruction": "",
        "id": "q2667",
        "input": "python how to get the amount of charaters in a varible",
        "output": "",
        "rule": [
            "d2667"
        ]
    },
    {
        "instruction": "",
        "id": "q2668",
        "input": "fill holes mask python",
        "output": "",
        "rule": [
            "d2668"
        ]
    },
    {
        "instruction": "",
        "id": "q2669",
        "input": "python how to get the max value in a field of a dictionary with ints",
        "output": "",
        "rule": [
            "d2669"
        ]
    },
    {
        "instruction": "",
        "id": "q2670",
        "input": "filling missing values in python df",
        "output": "",
        "rule": [
            "d2670"
        ]
    },
    {
        "instruction": "",
        "id": "q2671",
        "input": "python how to get the number of rows in a table",
        "output": "",
        "rule": [
            "d2671"
        ]
    },
    {
        "instruction": "",
        "id": "q2672",
        "input": "filter dictionary on key basis in python",
        "output": "",
        "rule": [
            "d2672"
        ]
    },
    {
        "instruction": "",
        "id": "q2673",
        "input": "python how to hide axes",
        "output": "",
        "rule": [
            "d2673"
        ]
    },
    {
        "instruction": "",
        "id": "q2674",
        "input": "filter out columns that is str python",
        "output": "",
        "rule": [
            "d2674"
        ]
    },
    {
        "instruction": "",
        "id": "q2675",
        "input": "python how to hide password typing input",
        "output": "",
        "rule": [
            "d2675"
        ]
    },
    {
        "instruction": "",
        "id": "q2676",
        "input": "finding a median code python",
        "output": "",
        "rule": [
            "d2676"
        ]
    },
    {
        "instruction": "",
        "id": "q2677",
        "input": "python how to join 2 data frame",
        "output": "",
        "rule": [
            "d2677"
        ]
    },
    {
        "instruction": "",
        "id": "q2678",
        "input": "finding absolute angle between two vectors python",
        "output": "",
        "rule": [
            "d2678"
        ]
    },
    {
        "instruction": "",
        "id": "q2679",
        "input": "python how to kill background threads",
        "output": "",
        "rule": [
            "d2679"
        ]
    },
    {
        "instruction": "",
        "id": "q2680",
        "input": "finding datframe type python",
        "output": "",
        "rule": [
            "d2680"
        ]
    },
    {
        "instruction": "",
        "id": "q2681",
        "input": "python how to kill process and child process",
        "output": "",
        "rule": [
            "d2681"
        ]
    },
    {
        "instruction": "",
        "id": "q2682",
        "input": "finding intersection points python",
        "output": "",
        "rule": [
            "d2682"
        ]
    },
    {
        "instruction": "",
        "id": "q2683",
        "input": "python how to know the encoding of a text",
        "output": "",
        "rule": [
            "d2683"
        ]
    },
    {
        "instruction": "",
        "id": "q2684",
        "input": "finding max in arrays python",
        "output": "",
        "rule": [
            "d2684"
        ]
    },
    {
        "instruction": "",
        "id": "q2685",
        "input": "python how to list database tables",
        "output": "",
        "rule": [
            "d2685"
        ]
    },
    {
        "instruction": "",
        "id": "q2686",
        "input": "finding max node in tree python",
        "output": "",
        "rule": [
            "d2686"
        ]
    },
    {
        "instruction": "",
        "id": "q2687",
        "input": "python how to log instead of print",
        "output": "",
        "rule": [
            "d2687"
        ]
    },
    {
        "instruction": "",
        "id": "q2688",
        "input": "finding max with lambda python",
        "output": "",
        "rule": [
            "d2688"
        ]
    },
    {
        "instruction": "",
        "id": "q2689",
        "input": "python how to make a folder",
        "output": "",
        "rule": [
            "d2689"
        ]
    },
    {
        "instruction": "",
        "id": "q2690",
        "input": "finding the depth of a node in python",
        "output": "",
        "rule": [
            "d2690"
        ]
    },
    {
        "instruction": "",
        "id": "q2691",
        "input": "python how to make a list a string",
        "output": "",
        "rule": [
            "d2691"
        ]
    },
    {
        "instruction": "",
        "id": "q2692",
        "input": "finding the index of an element in a list python",
        "output": "",
        "rule": [
            "d2692"
        ]
    },
    {
        "instruction": "",
        "id": "q2693",
        "input": "python how to move window position",
        "output": "",
        "rule": [
            "d2693"
        ]
    },
    {
        "instruction": "",
        "id": "q2694",
        "input": "finding the index of an entry python",
        "output": "",
        "rule": [
            "d2694"
        ]
    },
    {
        "instruction": "",
        "id": "q2695",
        "input": "python how to multiply function by value",
        "output": "",
        "rule": [
            "d2695"
        ]
    },
    {
        "instruction": "",
        "id": "q2696",
        "input": "finding the least common divisor in python",
        "output": "",
        "rule": [
            "d2696"
        ]
    },
    {
        "instruction": "",
        "id": "q2697",
        "input": "python how to normalize rgb from 0 to 1",
        "output": "",
        "rule": [
            "d2697"
        ]
    },
    {
        "instruction": "",
        "id": "q2698",
        "input": "finding the width and height of an image python",
        "output": "",
        "rule": [
            "d2698"
        ]
    },
    {
        "instruction": "",
        "id": "q2699",
        "input": "python how to read from tty stdin",
        "output": "",
        "rule": [
            "d2699"
        ]
    },
    {
        "instruction": "",
        "id": "q2700",
        "input": "fit and transform two functions in python",
        "output": "",
        "rule": [
            "d2700"
        ]
    },
    {
        "instruction": "",
        "id": "q2701",
        "input": "python how to read keypressed",
        "output": "",
        "rule": [
            "d2701"
        ]
    },
    {
        "instruction": "",
        "id": "q2702",
        "input": "fit transform tfidf python",
        "output": "",
        "rule": [
            "d2702"
        ]
    },
    {
        "instruction": "",
        "id": "q2703",
        "input": "python how to read returned command output",
        "output": "",
        "rule": [
            "d2703"
        ]
    },
    {
        "instruction": "",
        "id": "q2704",
        "input": "fix ssl error on windows for python",
        "output": "",
        "rule": [
            "d2704"
        ]
    },
    {
        "instruction": "",
        "id": "q2705",
        "input": "python how to read stdout realtime",
        "output": "",
        "rule": [
            "d2705"
        ]
    },
    {
        "instruction": "",
        "id": "q2706",
        "input": "flask python check request is localproxy unbound",
        "output": "",
        "rule": [
            "d2706"
        ]
    },
    {
        "instruction": "",
        "id": "q2707",
        "input": "flatten list in python 3 using isinstance",
        "output": "",
        "rule": [
            "d2707"
        ]
    },
    {
        "instruction": "",
        "id": "q2708",
        "input": "python how to represent sql queries in a data structure",
        "output": "",
        "rule": [
            "d2708"
        ]
    },
    {
        "instruction": "",
        "id": "q2709",
        "input": "flatten lists inside a list in python",
        "output": "",
        "rule": [
            "d2709"
        ]
    },
    {
        "instruction": "",
        "id": "q2710",
        "input": "python how to rotate an array 90 degrees",
        "output": "",
        "rule": [
            "d2710"
        ]
    },
    {
        "instruction": "",
        "id": "q2711",
        "input": "flatten nested list python",
        "output": "",
        "rule": [
            "d2711"
        ]
    },
    {
        "instruction": "",
        "id": "q2712",
        "input": "python how to run unittests",
        "output": "",
        "rule": [
            "d2712"
        ]
    },
    {
        "instruction": "",
        "id": "q2713",
        "input": "flip images vertically python",
        "output": "",
        "rule": [
            "d2713"
        ]
    },
    {
        "instruction": "",
        "id": "q2714",
        "input": "python how to set global random seed",
        "output": "",
        "rule": [
            "d2714"
        ]
    },
    {
        "instruction": "",
        "id": "q2715",
        "input": "flush out the serial buffer python",
        "output": "",
        "rule": [
            "d2715"
        ]
    },
    {
        "instruction": "",
        "id": "q2716",
        "input": "python how to specify width in bar chart",
        "output": "",
        "rule": [
            "d2716"
        ]
    },
    {
        "instruction": "",
        "id": "q2717",
        "input": "flushing memory i python",
        "output": "",
        "rule": [
            "d2717"
        ]
    },
    {
        "instruction": "",
        "id": "q2718",
        "input": "python how to tell if a file is a symlink",
        "output": "",
        "rule": [
            "d2718"
        ]
    },
    {
        "instruction": "",
        "id": "q2719",
        "input": "force python to use tensorflow back end",
        "output": "",
        "rule": [
            "d2719"
        ]
    },
    {
        "instruction": "",
        "id": "q2720",
        "input": "python how to tell if an object is a collection",
        "output": "",
        "rule": [
            "d2720"
        ]
    },
    {
        "instruction": "",
        "id": "q2721",
        "input": "forcefully quit python execution",
        "output": "",
        "rule": [
            "d2721"
        ]
    },
    {
        "instruction": "",
        "id": "q2722",
        "input": "python how to tell is a value is a string",
        "output": "",
        "rule": [
            "d2722"
        ]
    },
    {
        "instruction": "",
        "id": "q2723",
        "input": "fork off and die python",
        "output": "",
        "rule": [
            "d2723"
        ]
    },
    {
        "instruction": "",
        "id": "q2724",
        "input": "python how to time out if no response",
        "output": "",
        "rule": [
            "d2724"
        ]
    },
    {
        "instruction": "",
        "id": "q2725",
        "input": "format a number to m or k if large python",
        "output": "",
        "rule": [
            "d2725"
        ]
    },
    {
        "instruction": "",
        "id": "q2726",
        "input": "python how to update fig by keyboard",
        "output": "",
        "rule": [
            "d2726"
        ]
    },
    {
        "instruction": "",
        "id": "q2727",
        "input": "format multiline string python",
        "output": "",
        "rule": [
            "d2727"
        ]
    },
    {
        "instruction": "",
        "id": "q2728",
        "input": "python how write an apostraphy in a string",
        "output": "",
        "rule": [
            "d2728"
        ]
    },
    {
        "instruction": "",
        "id": "q2729",
        "input": "format numbers to percent python",
        "output": "",
        "rule": [
            "d2729"
        ]
    },
    {
        "instruction": "",
        "id": "q2730",
        "input": "python httpserver for production",
        "output": "",
        "rule": [
            "d2730"
        ]
    },
    {
        "instruction": "",
        "id": "q2731",
        "input": "temporary cache files in python",
        "output": "",
        "rule": [
            "d2731"
        ]
    },
    {
        "instruction": "",
        "id": "q2732",
        "input": "python httpserver separate thread",
        "output": "",
        "rule": [
            "d2732"
        ]
    },
    {
        "instruction": "",
        "id": "q2733",
        "input": "fourier transfrom of an array in python",
        "output": "",
        "rule": [
            "d2733"
        ]
    },
    {
        "instruction": "",
        "id": "q2734",
        "input": "python identify closest value to x in an array",
        "output": "",
        "rule": [
            "d2734"
        ]
    },
    {
        "instruction": "",
        "id": "q2735",
        "input": "function in python that takes list and returns most common item",
        "output": "",
        "rule": [
            "d2735"
        ]
    },
    {
        "instruction": "",
        "id": "q2736",
        "input": "python identify empty cells in columns",
        "output": "",
        "rule": [
            "d2736"
        ]
    },
    {
        "instruction": "",
        "id": "q2737",
        "input": "function names in python lowercase",
        "output": "",
        "rule": [
            "d2737"
        ]
    },
    {
        "instruction": "",
        "id": "q2738",
        "input": "python identify relative redirect http",
        "output": "",
        "rule": [
            "d2738"
        ]
    },
    {
        "instruction": "",
        "id": "q2739",
        "input": "function of measuring time in python code",
        "output": "",
        "rule": [
            "d2739"
        ]
    },
    {
        "instruction": "",
        "id": "q2740",
        "input": "python if a value is not in an array",
        "output": "",
        "rule": [
            "d2740"
        ]
    },
    {
        "instruction": "",
        "id": "q2741",
        "input": "function that converts string into a tuple in python",
        "output": "",
        "rule": [
            "d2741"
        ]
    },
    {
        "instruction": "",
        "id": "q2742",
        "input": "python if character is punctuation",
        "output": "",
        "rule": [
            "d2742"
        ]
    },
    {
        "instruction": "",
        "id": "q2743",
        "input": "generate random float between 1 and 10 python",
        "output": "",
        "rule": [
            "d2743"
        ]
    },
    {
        "instruction": "",
        "id": "q2744",
        "input": "python if float empty",
        "output": "",
        "rule": [
            "d2744"
        ]
    },
    {
        "instruction": "",
        "id": "q2745",
        "input": "generate random floats between 0 and 10 python",
        "output": "",
        "rule": [
            "d2745"
        ]
    },
    {
        "instruction": "",
        "id": "q2746",
        "input": "python if folder is empty, delete",
        "output": "",
        "rule": [
            "d2746"
        ]
    },
    {
        "instruction": "",
        "id": "q2747",
        "input": "generate random letter sequences in python",
        "output": "",
        "rule": [
            "d2747"
        ]
    },
    {
        "instruction": "",
        "id": "q2748",
        "input": "python if nan then fill from other column",
        "output": "",
        "rule": [
            "d2748"
        ]
    },
    {
        "instruction": "",
        "id": "q2749",
        "input": "generating sin wave with python",
        "output": "",
        "rule": [
            "d2749"
        ]
    },
    {
        "instruction": "",
        "id": "q2750",
        "input": "python if only one of two files exist",
        "output": "",
        "rule": [
            "d2750"
        ]
    },
    {
        "instruction": "",
        "id": "q2751",
        "input": "get a byte by index from byte array in python not converted to int",
        "output": "",
        "rule": [
            "d2751"
        ]
    },
    {
        "instruction": "",
        "id": "q2752",
        "input": "python if someone changes the file, remind me",
        "output": "",
        "rule": [
            "d2752"
        ]
    },
    {
        "instruction": "",
        "id": "q2753",
        "input": "get absolute path of file being called from script python",
        "output": "",
        "rule": [
            "d2753"
        ]
    },
    {
        "instruction": "",
        "id": "q2754",
        "input": "python if string is hex",
        "output": "",
        "rule": [
            "d2754"
        ]
    },
    {
        "instruction": "",
        "id": "q2755",
        "input": "get all days between two dates python",
        "output": "",
        "rule": [
            "d2755"
        ]
    },
    {
        "instruction": "",
        "id": "q2756",
        "input": "python if variable is str",
        "output": "",
        "rule": [
            "d2756"
        ]
    },
    {
        "instruction": "",
        "id": "q2757",
        "input": "get all loggers python",
        "output": "",
        "rule": [
            "d2757"
        ]
    },
    {
        "instruction": "",
        "id": "q2758",
        "input": "python image crop getbbox white",
        "output": "",
        "rule": [
            "d2758"
        ]
    },
    {
        "instruction": "",
        "id": "q2759",
        "input": "get basename from url python",
        "output": "",
        "rule": [
            "d2759"
        ]
    },
    {
        "instruction": "",
        "id": "q2760",
        "input": "python image intensity scale show",
        "output": "",
        "rule": [
            "d2760"
        ]
    },
    {
        "instruction": "",
        "id": "q2761",
        "input": "get cell background color python sheets api",
        "output": "",
        "rule": [
            "d2761"
        ]
    },
    {
        "instruction": "",
        "id": "q2762",
        "input": "python image mirror enlarge",
        "output": "",
        "rule": [
            "d2762"
        ]
    },
    {
        "instruction": "",
        "id": "q2763",
        "input": "get current time string python",
        "output": "",
        "rule": [
            "d2763"
        ]
    },
    {
        "instruction": "",
        "id": "q2764",
        "input": "python image normalization lighting condition",
        "output": "",
        "rule": [
            "d2764"
        ]
    },
    {
        "instruction": "",
        "id": "q2765",
        "input": "get date from string date python",
        "output": "",
        "rule": [
            "d2765"
        ]
    },
    {
        "instruction": "",
        "id": "q2766",
        "input": "python image shape detection",
        "output": "",
        "rule": [
            "d2766"
        ]
    },
    {
        "instruction": "",
        "id": "q2767",
        "input": "python include files in a sibling folder",
        "output": "",
        "rule": [
            "d2767"
        ]
    },
    {
        "instruction": "",
        "id": "q2768",
        "input": "get first date from month in python",
        "output": "",
        "rule": [
            "d2768"
        ]
    },
    {
        "instruction": "",
        "id": "q2769",
        "input": "python increase file size padding",
        "output": "",
        "rule": [
            "d2769"
        ]
    },
    {
        "instruction": "",
        "id": "q2770",
        "input": "get first element of a filter python",
        "output": "",
        "rule": [
            "d2770"
        ]
    },
    {
        "instruction": "",
        "id": "q2771",
        "input": "python increase value of key",
        "output": "",
        "rule": [
            "d2771"
        ]
    },
    {
        "instruction": "",
        "id": "q2772",
        "input": "get fitted values of ols python",
        "output": "",
        "rule": [
            "d2772"
        ]
    },
    {
        "instruction": "",
        "id": "q2773",
        "input": "python index specific value in data frame",
        "output": "",
        "rule": [
            "d2773"
        ]
    },
    {
        "instruction": "",
        "id": "q2774",
        "input": "get frequencies for column in python",
        "output": "",
        "rule": [
            "d2774"
        ]
    },
    {
        "instruction": "",
        "id": "q2775",
        "input": "python initialize logging config",
        "output": "",
        "rule": [
            "d2775"
        ]
    },
    {
        "instruction": "",
        "id": "q2776",
        "input": "get glortho matrix opengl python",
        "output": "",
        "rule": [
            "d2776"
        ]
    },
    {
        "instruction": "",
        "id": "q2777",
        "input": "python inner join data frames",
        "output": "",
        "rule": [
            "d2777"
        ]
    },
    {
        "instruction": "",
        "id": "q2778",
        "input": "get http header python flask",
        "output": "",
        "rule": [
            "d2778"
        ]
    },
    {
        "instruction": "",
        "id": "q2779",
        "input": "python input is not a tty",
        "output": "",
        "rule": [
            "d2779"
        ]
    },
    {
        "instruction": "",
        "id": "q2780",
        "input": "get index from key at python",
        "output": "",
        "rule": [
            "d2780"
        ]
    },
    {
        "instruction": "",
        "id": "q2781",
        "input": "python input without blocking",
        "output": "",
        "rule": [
            "d2781"
        ]
    },
    {
        "instruction": "",
        "id": "q2782",
        "input": "get index of iterator python",
        "output": "",
        "rule": [
            "d2782"
        ]
    },
    {
        "instruction": "",
        "id": "q2783",
        "input": "python insert delimiters in a list",
        "output": "",
        "rule": [
            "d2783"
        ]
    },
    {
        "instruction": "",
        "id": "q2784",
        "input": "get indices of an array python",
        "output": "",
        "rule": [
            "d2784"
        ]
    },
    {
        "instruction": "",
        "id": "q2785",
        "input": "python insert image pdf",
        "output": "",
        "rule": [
            "d2785"
        ]
    },
    {
        "instruction": "",
        "id": "q2786",
        "input": "get indices of reverse sorted matrix in python",
        "output": "",
        "rule": [
            "d2786"
        ]
    },
    {
        "instruction": "",
        "id": "q2787",
        "input": "python instance to return a product of 2 numbers",
        "output": "",
        "rule": [
            "d2787"
        ]
    },
    {
        "instruction": "",
        "id": "q2788",
        "input": "get ipdaddress of machine python",
        "output": "",
        "rule": [
            "d2788"
        ]
    },
    {
        "instruction": "",
        "id": "q2789",
        "input": "python int from bytes signed",
        "output": "",
        "rule": [
            "d2789"
        ]
    },
    {
        "instruction": "",
        "id": "q2790",
        "input": "get last item of iterator python",
        "output": "",
        "rule": [
            "d2790"
        ]
    },
    {
        "instruction": "",
        "id": "q2791",
        "input": "python int to base",
        "output": "",
        "rule": [
            "d2791"
        ]
    },
    {
        "instruction": "",
        "id": "q2792",
        "input": "get last monday python",
        "output": "",
        "rule": [
            "d2792"
        ]
    },
    {
        "instruction": "",
        "id": "q2793",
        "input": "python int to bin",
        "output": "",
        "rule": [
            "d2793"
        ]
    },
    {
        "instruction": "",
        "id": "q2794",
        "input": "get length of queue python",
        "output": "",
        "rule": [
            "d2794"
        ]
    },
    {
        "instruction": "",
        "id": "q2795",
        "input": "python integer max value how to present",
        "output": "",
        "rule": [
            "d2795"
        ]
    },
    {
        "instruction": "",
        "id": "q2796",
        "input": "get line without newline character python",
        "output": "",
        "rule": [
            "d2796"
        ]
    },
    {
        "instruction": "",
        "id": "q2797",
        "input": "python interploating a key from a dict",
        "output": "",
        "rule": [
            "d2797"
        ]
    },
    {
        "instruction": "",
        "id": "q2798",
        "input": "get list of collections names in mongo db from python",
        "output": "",
        "rule": [
            "d2798"
        ]
    },
    {
        "instruction": "",
        "id": "q2799",
        "input": "python interpolate periodic y coordinates",
        "output": "",
        "rule": [
            "d2799"
        ]
    },
    {
        "instruction": "",
        "id": "q2800",
        "input": "get local address python",
        "output": "",
        "rule": [
            "d2800"
        ]
    },
    {
        "instruction": "",
        "id": "q2801",
        "input": "python interpolates x axis timestamp",
        "output": "",
        "rule": [
            "d2801"
        ]
    },
    {
        "instruction": "",
        "id": "q2802",
        "input": "get most recent file in directory python linux",
        "output": "",
        "rule": [
            "d2802"
        ]
    },
    {
        "instruction": "",
        "id": "q2803",
        "input": "python intersection of 3d lines",
        "output": "",
        "rule": [
            "d2803"
        ]
    },
    {
        "instruction": "",
        "id": "q2804",
        "input": "get n and n+1 elements from a list in python 3",
        "output": "",
        "rule": [
            "d2804"
        ]
    },
    {
        "instruction": "",
        "id": "q2805",
        "input": "python is arraybyte or not",
        "output": "",
        "rule": [
            "d2805"
        ]
    },
    {
        "instruction": "",
        "id": "q2806",
        "input": "get number of days in year in python",
        "output": "",
        "rule": [
            "d2806"
        ]
    },
    {
        "instruction": "",
        "id": "q2807",
        "input": "python is not datetime if",
        "output": "",
        "rule": [
            "d2807"
        ]
    },
    {
        "instruction": "",
        "id": "q2808",
        "input": "get number of rows of data frame python",
        "output": "",
        "rule": [
            "d2808"
        ]
    },
    {
        "instruction": "",
        "id": "q2809",
        "input": "python is randint(a,b) a uniform distribution",
        "output": "",
        "rule": [
            "d2809"
        ]
    },
    {
        "instruction": "",
        "id": "q2810",
        "input": "get output from a linux command in python",
        "output": "",
        "rule": [
            "d2810"
        ]
    },
    {
        "instruction": "",
        "id": "q2811",
        "input": "python iterable take first n elements",
        "output": "",
        "rule": [
            "d2811"
        ]
    },
    {
        "instruction": "",
        "id": "q2812",
        "input": "get parent of element python xml",
        "output": "",
        "rule": [
            "d2812"
        ]
    },
    {
        "instruction": "",
        "id": "q2813",
        "input": "python iterat with index and element",
        "output": "",
        "rule": [
            "d2813"
        ]
    },
    {
        "instruction": "",
        "id": "q2814",
        "input": "get pinyin from characters python",
        "output": "",
        "rule": [
            "d2814"
        ]
    },
    {
        "instruction": "",
        "id": "q2815",
        "input": "python iterate dict sorted by key",
        "output": "",
        "rule": [
            "d2815"
        ]
    },
    {
        "instruction": "",
        "id": "q2816",
        "input": "get quarter of date python",
        "output": "",
        "rule": [
            "d2816"
        ]
    },
    {
        "instruction": "",
        "id": "q2817",
        "input": "python iterate throgh links",
        "output": "",
        "rule": [
            "d2817"
        ]
    },
    {
        "instruction": "",
        "id": "q2818",
        "input": "get size for files in directory in python",
        "output": "",
        "rule": [
            "d2818"
        ]
    },
    {
        "instruction": "",
        "id": "q2819",
        "input": "get size of an array in python",
        "output": "",
        "rule": [
            "d2819"
        ]
    },
    {
        "instruction": "",
        "id": "q2820",
        "input": "python iterator cycle set first element",
        "output": "",
        "rule": [
            "d2820"
        ]
    },
    {
        "instruction": "",
        "id": "q2821",
        "input": "get size of range python",
        "output": "",
        "rule": [
            "d2821"
        ]
    },
    {
        "instruction": "",
        "id": "q2822",
        "input": "python iterator still memory increase",
        "output": "",
        "rule": [
            "d2822"
        ]
    },
    {
        "instruction": "",
        "id": "q2823",
        "input": "get table list python sql",
        "output": "",
        "rule": [
            "d2823"
        ]
    },
    {
        "instruction": "",
        "id": "q2824",
        "input": "python jieba 'nonetype' object has no attribute 'decode'",
        "output": "",
        "rule": [
            "d2824"
        ]
    },
    {
        "instruction": "",
        "id": "q2825",
        "input": "get text by xpath python",
        "output": "",
        "rule": [
            "d2825"
        ]
    },
    {
        "instruction": "",
        "id": "q2826",
        "input": "python join all elements in a tuple",
        "output": "",
        "rule": [
            "d2826"
        ]
    },
    {
        "instruction": "",
        "id": "q2827",
        "input": "get the 4th sunday of every month in a year in python",
        "output": "",
        "rule": [
            "d2827"
        ]
    },
    {
        "instruction": "",
        "id": "q2828",
        "input": "python json bytes deserialize",
        "output": "",
        "rule": [
            "d2828"
        ]
    },
    {
        "instruction": "",
        "id": "q2829",
        "input": "get the excel cell background color into a list using python",
        "output": "",
        "rule": [
            "d2829"
        ]
    },
    {
        "instruction": "",
        "id": "q2830",
        "input": "python json datetime object",
        "output": "",
        "rule": [
            "d2830"
        ]
    },
    {
        "instruction": "",
        "id": "q2831",
        "input": "get the extension python",
        "output": "",
        "rule": [
            "d2831"
        ]
    },
    {
        "instruction": "",
        "id": "q2832",
        "input": "python json dump precision",
        "output": "",
        "rule": [
            "d2832"
        ]
    },
    {
        "instruction": "",
        "id": "q2833",
        "input": "get the file extension python",
        "output": "",
        "rule": [
            "d2833"
        ]
    },
    {
        "instruction": "",
        "id": "q2834",
        "input": "python json dump separator",
        "output": "",
        "rule": [
            "d2834"
        ]
    },
    {
        "instruction": "",
        "id": "q2835",
        "input": "get the location of a file in python",
        "output": "",
        "rule": [
            "d2835"
        ]
    },
    {
        "instruction": "",
        "id": "q2836",
        "input": "python json dumps not json serializable",
        "output": "",
        "rule": [
            "d2836"
        ]
    },
    {
        "instruction": "",
        "id": "q2837",
        "input": "get the number of rows of a data frame in python",
        "output": "",
        "rule": [
            "d2837"
        ]
    },
    {
        "instruction": "",
        "id": "q2838",
        "input": "python json dumps object",
        "output": "",
        "rule": [
            "d2838"
        ]
    },
    {
        "instruction": "",
        "id": "q2839",
        "input": "get the product of the numbers in a list python",
        "output": "",
        "rule": [
            "d2839"
        ]
    },
    {
        "instruction": "",
        "id": "q2840",
        "input": "python json serializer array order",
        "output": "",
        "rule": [
            "d2840"
        ]
    },
    {
        "instruction": "",
        "id": "q2841",
        "input": "get type name python",
        "output": "",
        "rule": [
            "d2841"
        ]
    },
    {
        "instruction": "",
        "id": "q2842",
        "input": "python json type preserve",
        "output": "",
        "rule": [
            "d2842"
        ]
    },
    {
        "instruction": "",
        "id": "q2843",
        "input": "get uniques of list python",
        "output": "",
        "rule": [
            "d2843"
        ]
    },
    {
        "instruction": "",
        "id": "q2844",
        "input": "python judge obj as str",
        "output": "",
        "rule": [
            "d2844"
        ]
    },
    {
        "instruction": "",
        "id": "q2845",
        "input": "get values from dictionary in a iterator python",
        "output": "",
        "rule": [
            "d2845"
        ]
    },
    {
        "instruction": "",
        "id": "q2846",
        "input": "python key sort not found",
        "output": "",
        "rule": [
            "d2846"
        ]
    },
    {
        "instruction": "",
        "id": "q2847",
        "input": "get variable in python in robotframework",
        "output": "",
        "rule": [
            "d2847"
        ]
    },
    {
        "instruction": "",
        "id": "q2848",
        "input": "python keyword extracton nltk",
        "output": "",
        "rule": [
            "d2848"
        ]
    },
    {
        "instruction": "",
        "id": "q2849",
        "input": "get xml element and prettify python",
        "output": "",
        "rule": [
            "d2849"
        ]
    },
    {
        "instruction": "",
        "id": "q2850",
        "input": "python kill process by pid not working",
        "output": "",
        "rule": [
            "d2850"
        ]
    },
    {
        "instruction": "",
        "id": "q2851",
        "input": "get xml text python",
        "output": "",
        "rule": [
            "d2851"
        ]
    },
    {
        "instruction": "",
        "id": "q2852",
        "input": "python kmeans clustering 1d array",
        "output": "",
        "rule": [
            "d2852"
        ]
    },
    {
        "instruction": "",
        "id": "q2853",
        "input": "getattr of local variable python",
        "output": "",
        "rule": [
            "d2853"
        ]
    },
    {
        "instruction": "",
        "id": "q2854",
        "input": "python kwargs with speicifed",
        "output": "",
        "rule": [
            "d2854"
        ]
    },
    {
        "instruction": "",
        "id": "q2855",
        "input": "getattribute empty xml in python",
        "output": "",
        "rule": [
            "d2855"
        ]
    },
    {
        "instruction": "",
        "id": "q2856",
        "input": "python lambda expression using two variables",
        "output": "",
        "rule": [
            "d2856"
        ]
    },
    {
        "instruction": "",
        "id": "q2857",
        "input": "gitpython get list of changed files and status",
        "output": "",
        "rule": [
            "d2857"
        ]
    },
    {
        "instruction": "",
        "id": "q2858",
        "input": "python lambda function with only kwargs inputs",
        "output": "",
        "rule": [
            "d2858"
        ]
    },
    {
        "instruction": "",
        "id": "q2859",
        "input": "giving a variable name to a function return python",
        "output": "",
        "rule": [
            "d2859"
        ]
    },
    {
        "instruction": "",
        "id": "q2860",
        "input": "python last modified datetime",
        "output": "",
        "rule": [
            "d2860"
        ]
    },
    {
        "instruction": "",
        "id": "q2861",
        "input": "global usage in python pytest",
        "output": "",
        "rule": [
            "d2861"
        ]
    },
    {
        "instruction": "",
        "id": "q2862",
        "input": "python latest browser user agent chrome",
        "output": "",
        "rule": [
            "d2862"
        ]
    },
    {
        "instruction": "",
        "id": "q2863",
        "input": "good indentations for matrix python",
        "output": "",
        "rule": [
            "d2863"
        ]
    },
    {
        "instruction": "",
        "id": "q2864",
        "input": "python length width table",
        "output": "",
        "rule": [
            "d2864"
        ]
    },
    {
        "instruction": "",
        "id": "q2865",
        "input": "graph exponential function python",
        "output": "",
        "rule": [
            "d2865"
        ]
    },
    {
        "instruction": "",
        "id": "q2866",
        "input": "python limit to positive values",
        "output": "",
        "rule": [
            "d2866"
        ]
    },
    {
        "instruction": "",
        "id": "q2867",
        "input": "graphviz executable not found python",
        "output": "",
        "rule": [
            "d2867"
        ]
    },
    {
        "instruction": "",
        "id": "q2868",
        "input": "python linear interpolate value on line segment",
        "output": "",
        "rule": [
            "d2868"
        ]
    },
    {
        "instruction": "",
        "id": "q2869",
        "input": "graphviz set graph in python",
        "output": "",
        "rule": [
            "d2869"
        ]
    },
    {
        "instruction": "",
        "id": "q2870",
        "input": "python linux shell hide output",
        "output": "",
        "rule": [
            "d2870"
        ]
    },
    {
        "instruction": "",
        "id": "q2871",
        "input": "greater than condition on column python",
        "output": "",
        "rule": [
            "d2871"
        ]
    },
    {
        "instruction": "",
        "id": "q2872",
        "input": "python list all indices of a value",
        "output": "",
        "rule": [
            "d2872"
        ]
    },
    {
        "instruction": "",
        "id": "q2873",
        "input": "gui designer for python script",
        "output": "",
        "rule": [
            "d2873"
        ]
    },
    {
        "instruction": "",
        "id": "q2874",
        "input": "python list all unique elements in 2d array",
        "output": "",
        "rule": [
            "d2874"
        ]
    },
    {
        "instruction": "",
        "id": "q2875",
        "input": "heck if environemnt variabl eexists python",
        "output": "",
        "rule": [
            "d2875"
        ]
    },
    {
        "instruction": "",
        "id": "q2876",
        "input": "python list of all states",
        "output": "",
        "rule": [
            "d2876"
        ]
    },
    {
        "instruction": "",
        "id": "q2877",
        "input": "hex to bitcoin script python",
        "output": "",
        "rule": [
            "d2877"
        ]
    },
    {
        "instruction": "",
        "id": "q2878",
        "input": "python list of array to dimension",
        "output": "",
        "rule": [
            "d2878"
        ]
    },
    {
        "instruction": "",
        "id": "q2879",
        "input": "how adjust the size of colorbar in python",
        "output": "",
        "rule": [
            "d2879"
        ]
    },
    {
        "instruction": "",
        "id": "q2880",
        "input": "python list of dates datetime",
        "output": "",
        "rule": [
            "d2880"
        ]
    },
    {
        "instruction": "",
        "id": "q2881",
        "input": "how are python sets unique",
        "output": "",
        "rule": [
            "d2881"
        ]
    },
    {
        "instruction": "",
        "id": "q2882",
        "input": "python list of indices with value",
        "output": "",
        "rule": [
            "d2882"
        ]
    },
    {
        "instruction": "",
        "id": "q2883",
        "input": "how can i do arrays in python",
        "output": "",
        "rule": [
            "d2883"
        ]
    },
    {
        "instruction": "",
        "id": "q2884",
        "input": "python list of strings get average length",
        "output": "",
        "rule": [
            "d2884"
        ]
    },
    {
        "instruction": "",
        "id": "q2885",
        "input": "how can i validate email syntax in python",
        "output": "",
        "rule": [
            "d2885"
        ]
    },
    {
        "instruction": "",
        "id": "q2886",
        "input": "python list transforms into array",
        "output": "",
        "rule": [
            "d2886"
        ]
    },
    {
        "instruction": "",
        "id": "q2887",
        "input": "how clear screen in python",
        "output": "",
        "rule": [
            "d2887"
        ]
    },
    {
        "instruction": "",
        "id": "q2888",
        "input": "python load mat efficient",
        "output": "",
        "rule": [
            "d2888"
        ]
    },
    {
        "instruction": "",
        "id": "q2889",
        "input": "how do i adjust colormap scale in matplotlib python",
        "output": "",
        "rule": [
            "d2889"
        ]
    },
    {
        "instruction": "",
        "id": "q2890",
        "input": "python load string from file as f string",
        "output": "",
        "rule": [
            "d2890"
        ]
    },
    {
        "instruction": "",
        "id": "q2891",
        "input": "how do i check if a float is between two floats in python",
        "output": "",
        "rule": [
            "d2891"
        ]
    },
    {
        "instruction": "",
        "id": "q2892",
        "input": "python local function capture",
        "output": "",
        "rule": [
            "d2892"
        ]
    },
    {
        "instruction": "",
        "id": "q2893",
        "input": "how do i check if it is text in python",
        "output": "",
        "rule": [
            "d2893"
        ]
    },
    {
        "instruction": "",
        "id": "q2894",
        "input": "python local variable stack release",
        "output": "",
        "rule": [
            "d2894"
        ]
    },
    {
        "instruction": "",
        "id": "q2895",
        "input": "how do i clear the variables in python",
        "output": "",
        "rule": [
            "d2895"
        ]
    },
    {
        "instruction": "",
        "id": "q2896",
        "input": "python localize datetime already timezone data",
        "output": "",
        "rule": [
            "d2896"
        ]
    },
    {
        "instruction": "",
        "id": "q2897",
        "input": "how do i close engine in python sqlalchemy",
        "output": "",
        "rule": [
            "d2897"
        ]
    },
    {
        "instruction": "",
        "id": "q2898",
        "input": "python log probability normpdf",
        "output": "",
        "rule": [
            "d2898"
        ]
    },
    {
        "instruction": "",
        "id": "q2899",
        "input": "how do i perform fast fourier transform in python",
        "output": "",
        "rule": [
            "d2899"
        ]
    },
    {
        "instruction": "",
        "id": "q2900",
        "input": "python logger not creating a file",
        "output": "",
        "rule": [
            "d2900"
        ]
    },
    {
        "instruction": "",
        "id": "q2901",
        "input": "how do i set a field to enum type python 3",
        "output": "",
        "rule": [
            "d2901"
        ]
    },
    {
        "instruction": "",
        "id": "q2902",
        "input": "python logger print summary",
        "output": "",
        "rule": [
            "d2902"
        ]
    },
    {
        "instruction": "",
        "id": "q2903",
        "input": "how do i stop python from closing a popup",
        "output": "",
        "rule": [
            "d2903"
        ]
    },
    {
        "instruction": "",
        "id": "q2904",
        "input": "python logging close file",
        "output": "",
        "rule": [
            "d2904"
        ]
    },
    {
        "instruction": "",
        "id": "q2905",
        "input": "how do you extract the username and password from the password file in python",
        "output": "",
        "rule": [
            "d2905"
        ]
    },
    {
        "instruction": "",
        "id": "q2906",
        "input": "python logging config using ini files",
        "output": "",
        "rule": [
            "d2906"
        ]
    },
    {
        "instruction": "",
        "id": "q2907",
        "input": "how do you get only latitude and longitude using geocode in python",
        "output": "",
        "rule": [
            "d2907"
        ]
    },
    {
        "instruction": "",
        "id": "q2908",
        "input": "python logging fro mdict, handler not in logger handlers",
        "output": "",
        "rule": [
            "d2908"
        ]
    },
    {
        "instruction": "",
        "id": "q2909",
        "input": "how do you give python range in django",
        "output": "",
        "rule": [
            "d2909"
        ]
    },
    {
        "instruction": "",
        "id": "q2910",
        "input": "python logging get all loggers",
        "output": "",
        "rule": [
            "d2910"
        ]
    },
    {
        "instruction": "",
        "id": "q2911",
        "input": "how do you join 2 data frames python",
        "output": "",
        "rule": [
            "d2911"
        ]
    },
    {
        "instruction": "",
        "id": "q2912",
        "input": "python logging handlers rotatingfilehandler",
        "output": "",
        "rule": [
            "d2912"
        ]
    },
    {
        "instruction": "",
        "id": "q2913",
        "input": "how do you make a string into a list in python",
        "output": "",
        "rule": [
            "d2913"
        ]
    },
    {
        "instruction": "",
        "id": "q2914",
        "input": "python logging how to define handler in code",
        "output": "",
        "rule": [
            "d2914"
        ]
    },
    {
        "instruction": "",
        "id": "q2915",
        "input": "how do you specify absolute path name in python",
        "output": "",
        "rule": [
            "d2915"
        ]
    },
    {
        "instruction": "",
        "id": "q2916",
        "input": "python logging print function name",
        "output": "",
        "rule": [
            "d2916"
        ]
    },
    {
        "instruction": "",
        "id": "q2917",
        "input": "how exit python in linux",
        "output": "",
        "rule": [
            "d2917"
        ]
    },
    {
        "instruction": "",
        "id": "q2918",
        "input": "python logging stop wrapping text at characters",
        "output": "",
        "rule": [
            "d2918"
        ]
    },
    {
        "instruction": "",
        "id": "q2919",
        "input": "how invoke web services in python",
        "output": "",
        "rule": [
            "d2919"
        ]
    },
    {
        "instruction": "",
        "id": "q2920",
        "input": "python logging to file not written",
        "output": "",
        "rule": [
            "d2920"
        ]
    },
    {
        "instruction": "",
        "id": "q2921",
        "input": "how ot multi index in python",
        "output": "",
        "rule": [
            "d2921"
        ]
    },
    {
        "instruction": "",
        "id": "q2922",
        "input": "python lookup country based on lat long",
        "output": "",
        "rule": [
            "d2922"
        ]
    },
    {
        "instruction": "",
        "id": "q2923",
        "input": "how t op ass sys arghuments from another python script \\",
        "output": "",
        "rule": [
            "d2923"
        ]
    },
    {
        "instruction": "",
        "id": "q2924",
        "input": "python loop to compare every element in 2 arrays to every element",
        "output": "",
        "rule": [
            "d2924"
        ]
    },
    {
        "instruction": "",
        "id": "q2925",
        "input": "how to access 1d array in python",
        "output": "",
        "rule": [
            "d2925"
        ]
    },
    {
        "instruction": "",
        "id": "q2926",
        "input": "python lower and slash string",
        "output": "",
        "rule": [
            "d2926"
        ]
    },
    {
        "instruction": "",
        "id": "q2927",
        "input": "how to access the message in attributeerror python",
        "output": "",
        "rule": [
            "d2927"
        ]
    },
    {
        "instruction": "",
        "id": "q2928",
        "input": "python lxml account for notext in xpath",
        "output": "",
        "rule": [
            "d2928"
        ]
    },
    {
        "instruction": "",
        "id": "q2929",
        "input": "how to activate tensorflow in python",
        "output": "",
        "rule": [
            "d2929"
        ]
    },
    {
        "instruction": "",
        "id": "q2930",
        "input": "python lxml get all text under node",
        "output": "",
        "rule": [
            "d2930"
        ]
    },
    {
        "instruction": "",
        "id": "q2931",
        "input": "how to add a suffix to a file in python",
        "output": "",
        "rule": [
            "d2931"
        ]
    },
    {
        "instruction": "",
        "id": "q2932",
        "input": "python magic determine file mime",
        "output": "",
        "rule": [
            "d2932"
        ]
    },
    {
        "instruction": "",
        "id": "q2933",
        "input": "how to add assertion error in python",
        "output": "",
        "rule": [
            "d2933"
        ]
    },
    {
        "instruction": "",
        "id": "q2934",
        "input": "python magicmock add a function",
        "output": "",
        "rule": [
            "d2934"
        ]
    },
    {
        "instruction": "",
        "id": "q2935",
        "input": "how to add css to python using django",
        "output": "",
        "rule": [
            "d2935"
        ]
    },
    {
        "instruction": "",
        "id": "q2936",
        "input": "python main conditional guard",
        "output": "",
        "rule": [
            "d2936"
        ]
    },
    {
        "instruction": "",
        "id": "q2937",
        "input": "how to add gaussian noise to an image python",
        "output": "",
        "rule": [
            "d2937"
        ]
    },
    {
        "instruction": "",
        "id": "q2938",
        "input": "python make 3 list into one",
        "output": "",
        "rule": [
            "d2938"
        ]
    },
    {
        "instruction": "",
        "id": "q2939",
        "input": "how to add jquery to my python static folder",
        "output": "",
        "rule": [
            "d2939"
        ]
    },
    {
        "instruction": "",
        "id": "q2940",
        "input": "python make a string html safe",
        "output": "",
        "rule": [
            "d2940"
        ]
    },
    {
        "instruction": "",
        "id": "q2941",
        "input": "how to apply fillna to none in python",
        "output": "",
        "rule": [
            "d2941"
        ]
    },
    {
        "instruction": "",
        "id": "q2942",
        "input": "python make a string safe for filenames",
        "output": "",
        "rule": [
            "d2942"
        ]
    },
    {
        "instruction": "",
        "id": "q2943",
        "input": "how to auto open excel with python",
        "output": "",
        "rule": [
            "d2943"
        ]
    },
    {
        "instruction": "",
        "id": "q2944",
        "input": "python make datetime aware",
        "output": "",
        "rule": [
            "d2944"
        ]
    },
    {
        "instruction": "",
        "id": "q2945",
        "input": "how to automatically open a excel file after a python program runs",
        "output": "",
        "rule": [
            "d2945"
        ]
    },
    {
        "instruction": "",
        "id": "q2946",
        "input": "python make input non blocking",
        "output": "",
        "rule": [
            "d2946"
        ]
    },
    {
        "instruction": "",
        "id": "q2947",
        "input": "how to average multiple grided datasets python",
        "output": "",
        "rule": [
            "d2947"
        ]
    },
    {
        "instruction": "",
        "id": "q2948",
        "input": "python make regex pattern from string",
        "output": "",
        "rule": [
            "d2948"
        ]
    },
    {
        "instruction": "",
        "id": "q2949",
        "input": "how to best implement rollbacks in python",
        "output": "",
        "rule": [
            "d2949"
        ]
    },
    {
        "instruction": "",
        "id": "q2950",
        "input": "python mapping array of arrays to dict",
        "output": "",
        "rule": [
            "d2950"
        ]
    },
    {
        "instruction": "",
        "id": "q2951",
        "input": "how to build a scalar function in python",
        "output": "",
        "rule": [
            "d2951"
        ]
    },
    {
        "instruction": "",
        "id": "q2952",
        "input": "python match return a word",
        "output": "",
        "rule": [
            "d2952"
        ]
    },
    {
        "instruction": "",
        "id": "q2953",
        "input": "how to calculate average data in array python",
        "output": "",
        "rule": [
            "d2953"
        ]
    },
    {
        "instruction": "",
        "id": "q2954",
        "input": "python matplot plot the histogram with fitting",
        "output": "",
        "rule": [
            "d2954"
        ]
    },
    {
        "instruction": "",
        "id": "q2955",
        "input": "how to calculate the pitch of each frame of an audio in python",
        "output": "",
        "rule": [
            "d2955"
        ]
    },
    {
        "instruction": "",
        "id": "q2956",
        "input": "python matplotlib plot histogram with dynamic bins",
        "output": "",
        "rule": [
            "d2956"
        ]
    },
    {
        "instruction": "",
        "id": "q2957",
        "input": "how to calculate the variance of column of an array in python",
        "output": "",
        "rule": [
            "d2957"
        ]
    },
    {
        "instruction": "",
        "id": "q2958",
        "input": "python matplotlib remove yaxis",
        "output": "",
        "rule": [
            "d2958"
        ]
    },
    {
        "instruction": "",
        "id": "q2959",
        "input": "how to calculate upper and lower case letters in python",
        "output": "",
        "rule": [
            "d2959"
        ]
    },
    {
        "instruction": "",
        "id": "q2960",
        "input": "python matplotlib square layout aspect ratio",
        "output": "",
        "rule": [
            "d2960"
        ]
    },
    {
        "instruction": "",
        "id": "q2961",
        "input": "how to call last item in column in python",
        "output": "",
        "rule": [
            "d2961"
        ]
    },
    {
        "instruction": "",
        "id": "q2962",
        "input": "python matrix to grey scale image",
        "output": "",
        "rule": [
            "d2962"
        ]
    },
    {
        "instruction": "",
        "id": "q2963",
        "input": "how to call on a matrix and eac column python",
        "output": "",
        "rule": [
            "d2963"
        ]
    },
    {
        "instruction": "",
        "id": "q2964",
        "input": "python max count in a column",
        "output": "",
        "rule": [
            "d2964"
        ]
    },
    {
        "instruction": "",
        "id": "q2965",
        "input": "how to call unit test python",
        "output": "",
        "rule": [
            "d2965"
        ]
    },
    {
        "instruction": "",
        "id": "q2966",
        "input": "python max heap with input list is a file",
        "output": "",
        "rule": [
            "d2966"
        ]
    },
    {
        "instruction": "",
        "id": "q2967",
        "input": "how to cast each and everyelemnt of a list to string in python",
        "output": "",
        "rule": [
            "d2967"
        ]
    },
    {
        "instruction": "",
        "id": "q2968",
        "input": "python max over 2d array",
        "output": "",
        "rule": [
            "d2968"
        ]
    },
    {
        "instruction": "",
        "id": "q2969",
        "input": "how to change a 1 value list to a tuple in python",
        "output": "",
        "rule": [
            "d2969"
        ]
    },
    {
        "instruction": "",
        "id": "q2970",
        "input": "python max sub min inline range",
        "output": "",
        "rule": [
            "d2970"
        ]
    },
    {
        "instruction": "",
        "id": "q2971",
        "input": "python md5 large file",
        "output": "",
        "rule": [
            "d2971"
        ]
    },
    {
        "instruction": "",
        "id": "q2972",
        "input": "how to change cell color through python",
        "output": "",
        "rule": [
            "d2972"
        ]
    },
    {
        "instruction": "",
        "id": "q2973",
        "input": "python measure function time",
        "output": "",
        "rule": [
            "d2973"
        ]
    },
    {
        "instruction": "",
        "id": "q2974",
        "input": "how to change color of print in python 3",
        "output": "",
        "rule": [
            "d2974"
        ]
    },
    {
        "instruction": "",
        "id": "q2975",
        "input": "python measure string in font",
        "output": "",
        "rule": [
            "d2975"
        ]
    },
    {
        "instruction": "",
        "id": "q2976",
        "input": "how to change one speicifc column name python",
        "output": "",
        "rule": [
            "d2976"
        ]
    },
    {
        "instruction": "",
        "id": "q2977",
        "input": "python mechanize how to identify login form by id",
        "output": "",
        "rule": [
            "d2977"
        ]
    },
    {
        "instruction": "",
        "id": "q2978",
        "input": "how to change string type to a float python",
        "output": "",
        "rule": [
            "d2978"
        ]
    },
    {
        "instruction": "",
        "id": "q2979",
        "input": "python message subject decode",
        "output": "",
        "rule": [
            "d2979"
        ]
    },
    {
        "instruction": "",
        "id": "q2980",
        "input": "how to change the cmd to conda config anaconda python",
        "output": "",
        "rule": [
            "d2980"
        ]
    },
    {
        "instruction": "",
        "id": "q2981",
        "input": "python method to make lowercase",
        "output": "",
        "rule": [
            "d2981"
        ]
    },
    {
        "instruction": "",
        "id": "q2982",
        "input": "how to check a datatype in python",
        "output": "",
        "rule": [
            "d2982"
        ]
    },
    {
        "instruction": "",
        "id": "q2983",
        "input": "python mkdirs with permission",
        "output": "",
        "rule": [
            "d2983"
        ]
    },
    {
        "instruction": "",
        "id": "q2984",
        "input": "how to check a file format in python stack overflow",
        "output": "",
        "rule": [
            "d2984"
        ]
    },
    {
        "instruction": "",
        "id": "q2985",
        "input": "python mock call check all calls",
        "output": "",
        "rule": [
            "d2985"
        ]
    },
    {
        "instruction": "",
        "id": "q2986",
        "input": "how to check a type of a arguement in python",
        "output": "",
        "rule": [
            "d2986"
        ]
    },
    {
        "instruction": "",
        "id": "q2987",
        "input": "python mock comparing calls ids are same, but has name",
        "output": "",
        "rule": [
            "d2987"
        ]
    },
    {
        "instruction": "",
        "id": "q2988",
        "input": "how to check a work case insensitive in a string in python",
        "output": "",
        "rule": [
            "d2988"
        ]
    },
    {
        "instruction": "",
        "id": "q2989",
        "input": "python modify instance with dict",
        "output": "",
        "rule": [
            "d2989"
        ]
    },
    {
        "instruction": "",
        "id": "q2990",
        "input": "how to check array to see if there are any strings in python",
        "output": "",
        "rule": [
            "d2990"
        ]
    },
    {
        "instruction": "",
        "id": "q2991",
        "input": "python monkeypatch instance method with another method",
        "output": "",
        "rule": [
            "d2991"
        ]
    },
    {
        "instruction": "",
        "id": "q2992",
        "input": "how to check data type of object python 3",
        "output": "",
        "rule": [
            "d2992"
        ]
    },
    {
        "instruction": "",
        "id": "q2993",
        "input": "python move cursor up one line",
        "output": "",
        "rule": [
            "d2993"
        ]
    },
    {
        "instruction": "",
        "id": "q2994",
        "input": "how to check datatype in python",
        "output": "",
        "rule": [
            "d2994"
        ]
    },
    {
        "instruction": "",
        "id": "q2995",
        "input": "python move element to the tail of a list",
        "output": "",
        "rule": [
            "d2995"
        ]
    },
    {
        "instruction": "",
        "id": "q2996",
        "input": "how to check equal row size in matrix python",
        "output": "",
        "rule": [
            "d2996"
        ]
    },
    {
        "instruction": "",
        "id": "q2997",
        "input": "python move file pointer to start",
        "output": "",
        "rule": [
            "d2997"
        ]
    },
    {
        "instruction": "",
        "id": "q2998",
        "input": "how to check for a pattern in a tuple of tuples in python",
        "output": "",
        "rule": [
            "d2998"
        ]
    },
    {
        "instruction": "",
        "id": "q2999",
        "input": "python move files wildcard",
        "output": "",
        "rule": [
            "d2999"
        ]
    },
    {
        "instruction": "",
        "id": "q3000",
        "input": "how to check if a column is dense in a sparse matrix in python",
        "output": "",
        "rule": [
            "d3000"
        ]
    },
    {
        "instruction": "",
        "id": "q3001",
        "input": "python moving window smoothing in 2d",
        "output": "",
        "rule": [
            "d3001"
        ]
    },
    {
        "instruction": "",
        "id": "q3002",
        "input": "how to check if a column is string or not in python",
        "output": "",
        "rule": [
            "d3002"
        ]
    },
    {
        "instruction": "",
        "id": "q3003",
        "input": "python multiindex index in",
        "output": "",
        "rule": [
            "d3003"
        ]
    },
    {
        "instruction": "",
        "id": "q3004",
        "input": "how to check if a discord user is a user with python",
        "output": "",
        "rule": [
            "d3004"
        ]
    },
    {
        "instruction": "",
        "id": "q3005",
        "input": "python multiline string split",
        "output": "",
        "rule": [
            "d3005"
        ]
    },
    {
        "instruction": "",
        "id": "q3006",
        "input": "how to check if a folder contains a particular file python",
        "output": "",
        "rule": [
            "d3006"
        ]
    },
    {
        "instruction": "",
        "id": "q3007",
        "input": "python multiple queries to json",
        "output": "",
        "rule": [
            "d3007"
        ]
    },
    {
        "instruction": "",
        "id": "q3008",
        "input": "how to check if a python object has a field",
        "output": "",
        "rule": [
            "d3008"
        ]
    },
    {
        "instruction": "",
        "id": "q3009",
        "input": "python multiple regression scipy",
        "output": "",
        "rule": [
            "d3009"
        ]
    },
    {
        "instruction": "",
        "id": "q3010",
        "input": "how to check if a string is in a string in a list python",
        "output": "",
        "rule": [
            "d3010"
        ]
    },
    {
        "instruction": "",
        "id": "q3011",
        "input": "python multiple returns in a function",
        "output": "",
        "rule": [
            "d3011"
        ]
    },
    {
        "instruction": "",
        "id": "q3012",
        "input": "how to check if all the items in a list are the same python",
        "output": "",
        "rule": [
            "d3012"
        ]
    },
    {
        "instruction": "",
        "id": "q3013",
        "input": "python multiprocessing get number of all cores on machine",
        "output": "",
        "rule": [
            "d3013"
        ]
    },
    {
        "instruction": "",
        "id": "q3014",
        "input": "how to check if an item is in a tuple python",
        "output": "",
        "rule": [
            "d3014"
        ]
    },
    {
        "instruction": "",
        "id": "q3015",
        "input": "python multiprocessing get number of core",
        "output": "",
        "rule": [
            "d3015"
        ]
    },
    {
        "instruction": "",
        "id": "q3016",
        "input": "how to check if an object is data frame in python",
        "output": "",
        "rule": [
            "d3016"
        ]
    },
    {
        "instruction": "",
        "id": "q3017",
        "input": "python multiprocessing kill mongo",
        "output": "",
        "rule": [
            "d3017"
        ]
    },
    {
        "instruction": "",
        "id": "q3018",
        "input": "how to check if any element of list is valid in a function in python",
        "output": "",
        "rule": [
            "d3018"
        ]
    },
    {
        "instruction": "",
        "id": "q3019",
        "input": "python multiprocessing pool return value",
        "output": "",
        "rule": [
            "d3019"
        ]
    },
    {
        "instruction": "",
        "id": "q3020",
        "input": "how to check if byte is empty python",
        "output": "",
        "rule": [
            "d3020"
        ]
    },
    {
        "instruction": "",
        "id": "q3021",
        "input": "python multiprocessing start multiple processes",
        "output": "",
        "rule": [
            "d3021"
        ]
    },
    {
        "instruction": "",
        "id": "q3022",
        "input": "how to check if data is string python",
        "output": "",
        "rule": [
            "d3022"
        ]
    },
    {
        "instruction": "",
        "id": "q3023",
        "input": "python multiprocessing workers spawning workers",
        "output": "",
        "rule": [
            "d3023"
        ]
    },
    {
        "instruction": "",
        "id": "q3024",
        "input": "how to check if data type is string in python",
        "output": "",
        "rule": [
            "d3024"
        ]
    },
    {
        "instruction": "",
        "id": "q3025",
        "input": "python mysql can not connect to mysql server on local host",
        "output": "",
        "rule": [
            "d3025"
        ]
    },
    {
        "instruction": "",
        "id": "q3026",
        "input": "how to check if its bytes or str in python",
        "output": "",
        "rule": [
            "d3026"
        ]
    },
    {
        "instruction": "",
        "id": "q3027",
        "input": "python mysql get scalar value from query",
        "output": "",
        "rule": [
            "d3027"
        ]
    },
    {
        "instruction": "",
        "id": "q3028",
        "input": "python mysql sync database table structure",
        "output": "",
        "rule": [
            "d3028"
        ]
    },
    {
        "instruction": "",
        "id": "q3029",
        "input": "python mysqldb semicolon executemany",
        "output": "",
        "rule": [
            "d3029"
        ]
    },
    {
        "instruction": "",
        "id": "q3030",
        "input": "how to check internet connection python",
        "output": "",
        "rule": [
            "d3030"
        ]
    },
    {
        "instruction": "",
        "id": "q3031",
        "input": "python namedtuple to dictionary",
        "output": "",
        "rule": [
            "d3031"
        ]
    },
    {
        "instruction": "",
        "id": "q3032",
        "input": "how to check json files exists using python",
        "output": "",
        "rule": [
            "d3032"
        ]
    },
    {
        "instruction": "",
        "id": "q3033",
        "input": "python naming convention for enum",
        "output": "",
        "rule": [
            "d3033"
        ]
    },
    {
        "instruction": "",
        "id": "q3034",
        "input": "how to check number of columns in 2d list python",
        "output": "",
        "rule": [
            "d3034"
        ]
    },
    {
        "instruction": "",
        "id": "q3035",
        "input": "python nested include files",
        "output": "",
        "rule": [
            "d3035"
        ]
    },
    {
        "instruction": "",
        "id": "q3036",
        "input": "how to check python filepath in windows",
        "output": "",
        "rule": [
            "d3036"
        ]
    },
    {
        "instruction": "",
        "id": "q3037",
        "input": "how to check pythonpath variable in virtualenv",
        "output": "",
        "rule": [
            "d3037"
        ]
    },
    {
        "instruction": "",
        "id": "q3038",
        "input": "python network to adjancency matrix",
        "output": "",
        "rule": [
            "d3038"
        ]
    },
    {
        "instruction": "",
        "id": "q3039",
        "input": "how to check size of avilable memory python",
        "output": "",
        "rule": [
            "d3039"
        ]
    },
    {
        "instruction": "",
        "id": "q3040",
        "input": "python new a instance from a string",
        "output": "",
        "rule": [
            "d3040"
        ]
    },
    {
        "instruction": "",
        "id": "q3041",
        "input": "how to check the data type of python instance",
        "output": "",
        "rule": [
            "d3041"
        ]
    },
    {
        "instruction": "",
        "id": "q3042",
        "input": "python new zero array",
        "output": "",
        "rule": [
            "d3042"
        ]
    },
    {
        "instruction": "",
        "id": "q3043",
        "input": "how to check the python path",
        "output": "",
        "rule": [
            "d3043"
        ]
    },
    {
        "instruction": "",
        "id": "q3044",
        "input": "python nltk named entity corpus",
        "output": "",
        "rule": [
            "d3044"
        ]
    },
    {
        "instruction": "",
        "id": "q3045",
        "input": "how to check whether the line is last or not in python",
        "output": "",
        "rule": [
            "d3045"
        ]
    },
    {
        "instruction": "",
        "id": "q3046",
        "input": "python none json dumps null",
        "output": "",
        "rule": [
            "d3046"
        ]
    },
    {
        "instruction": "",
        "id": "q3047",
        "input": "how to clear previous code in python",
        "output": "",
        "rule": [
            "d3047"
        ]
    },
    {
        "instruction": "",
        "id": "q3048",
        "input": "python none type object not iterable",
        "output": "",
        "rule": [
            "d3048"
        ]
    },
    {
        "instruction": "",
        "id": "q3049",
        "input": "how to clear python memory after every loop",
        "output": "",
        "rule": [
            "d3049"
        ]
    },
    {
        "instruction": "",
        "id": "q3050",
        "input": "python normalize image array 0 1",
        "output": "",
        "rule": [
            "d3050"
        ]
    },
    {
        "instruction": "",
        "id": "q3051",
        "input": "how to close all files in python",
        "output": "",
        "rule": [
            "d3051"
        ]
    },
    {
        "instruction": "",
        "id": "q3052",
        "input": "python normalize matrix by row",
        "output": "",
        "rule": [
            "d3052"
        ]
    },
    {
        "instruction": "",
        "id": "q3053",
        "input": "how to code selection lists in python",
        "output": "",
        "rule": [
            "d3053"
        ]
    },
    {
        "instruction": "",
        "id": "q3054",
        "input": "python nosetests skip if example",
        "output": "",
        "rule": [
            "d3054"
        ]
    },
    {
        "instruction": "",
        "id": "q3055",
        "input": "how to compare 2 arrays and give accurecy in percent python",
        "output": "",
        "rule": [
            "d3055"
        ]
    },
    {
        "instruction": "",
        "id": "q3056",
        "input": "python not exit runtime exec",
        "output": "",
        "rule": [
            "d3056"
        ]
    },
    {
        "instruction": "",
        "id": "q3057",
        "input": "how to compare if two objects are equal python",
        "output": "",
        "rule": [
            "d3057"
        ]
    },
    {
        "instruction": "",
        "id": "q3058",
        "input": "python not null dict",
        "output": "",
        "rule": [
            "d3058"
        ]
    },
    {
        "instruction": "",
        "id": "q3059",
        "input": "how to compute median of 3 values in python",
        "output": "",
        "rule": [
            "d3059"
        ]
    },
    {
        "instruction": "",
        "id": "q3060",
        "input": "python not to ask overwrite a file",
        "output": "",
        "rule": [
            "d3060"
        ]
    },
    {
        "instruction": "",
        "id": "q3061",
        "input": "how to compute the output shape of pooling layer in python",
        "output": "",
        "rule": [
            "d3061"
        ]
    },
    {
        "instruction": "",
        "id": "q3062",
        "input": "python numpy access last value",
        "output": "",
        "rule": [
            "d3062"
        ]
    },
    {
        "instruction": "",
        "id": "q3063",
        "input": "how to concainate list and string in python",
        "output": "",
        "rule": [
            "d3063"
        ]
    },
    {
        "instruction": "",
        "id": "q3064",
        "input": "python numpy argmax top",
        "output": "",
        "rule": [
            "d3064"
        ]
    },
    {
        "instruction": "",
        "id": "q3065",
        "input": "how to connect to a redis local host from python",
        "output": "",
        "rule": [
            "d3065"
        ]
    },
    {
        "instruction": "",
        "id": "q3066",
        "input": "python numpy array from table",
        "output": "",
        "rule": [
            "d3066"
        ]
    },
    {
        "instruction": "",
        "id": "q3067",
        "input": "how to construct mapper object from dictionary python",
        "output": "",
        "rule": [
            "d3067"
        ]
    },
    {
        "instruction": "",
        "id": "q3068",
        "input": "python numpy array object of array",
        "output": "",
        "rule": [
            "d3068"
        ]
    },
    {
        "instruction": "",
        "id": "q3069",
        "input": "how to count nodes on a tree through recursion in python",
        "output": "",
        "rule": [
            "d3069"
        ]
    },
    {
        "instruction": "",
        "id": "q3070",
        "input": "python numpy compute standard deviation",
        "output": "",
        "rule": [
            "d3070"
        ]
    },
    {
        "instruction": "",
        "id": "q3071",
        "input": "how to count number of values attached to key python",
        "output": "",
        "rule": [
            "d3071"
        ]
    },
    {
        "instruction": "",
        "id": "q3072",
        "input": "python numpy extend dimension by filling 0",
        "output": "",
        "rule": [
            "d3072"
        ]
    },
    {
        "instruction": "",
        "id": "q3073",
        "input": "how to covert string to 128 bit lenght key in python",
        "output": "",
        "rule": [
            "d3073"
        ]
    },
    {
        "instruction": "",
        "id": "q3074",
        "input": "python numpy flip vertical",
        "output": "",
        "rule": [
            "d3074"
        ]
    },
    {
        "instruction": "",
        "id": "q3075",
        "input": "how to create a conda environment in python",
        "output": "",
        "rule": [
            "d3075"
        ]
    },
    {
        "instruction": "",
        "id": "q3076",
        "input": "python numpy linear interpolation",
        "output": "",
        "rule": [
            "d3076"
        ]
    },
    {
        "instruction": "",
        "id": "q3077",
        "input": "how to create a dict with nested keys in python",
        "output": "",
        "rule": [
            "d3077"
        ]
    },
    {
        "instruction": "",
        "id": "q3078",
        "input": "python numpy moving aretmetic average",
        "output": "",
        "rule": [
            "d3078"
        ]
    },
    {
        "instruction": "",
        "id": "q3079",
        "input": "how to create a discord bot using python and asyncio",
        "output": "",
        "rule": [
            "d3079"
        ]
    },
    {
        "instruction": "",
        "id": "q3080",
        "input": "python numpy one hot",
        "output": "",
        "rule": [
            "d3080"
        ]
    },
    {
        "instruction": "",
        "id": "q3081",
        "input": "how to create a new folder if one does not exist in python",
        "output": "",
        "rule": [
            "d3081"
        ]
    },
    {
        "instruction": "",
        "id": "q3082",
        "input": "python numpy read tif image",
        "output": "",
        "rule": [
            "d3082"
        ]
    },
    {
        "instruction": "",
        "id": "q3083",
        "input": "how to create a scope in python",
        "output": "",
        "rule": [
            "d3083"
        ]
    },
    {
        "instruction": "",
        "id": "q3084",
        "input": "python numpy replace all nan with none",
        "output": "",
        "rule": [
            "d3084"
        ]
    },
    {
        "instruction": "",
        "id": "q3085",
        "input": "how to create a string of color name in python",
        "output": "",
        "rule": [
            "d3085"
        ]
    },
    {
        "instruction": "",
        "id": "q3086",
        "input": "python numpy round to integer",
        "output": "",
        "rule": [
            "d3086"
        ]
    },
    {
        "instruction": "",
        "id": "q3087",
        "input": "how to create directory in remote server using ssh in python",
        "output": "",
        "rule": [
            "d3087"
        ]
    },
    {
        "instruction": "",
        "id": "q3088",
        "input": "python numpy round up int",
        "output": "",
        "rule": [
            "d3088"
        ]
    },
    {
        "instruction": "",
        "id": "q3089",
        "input": "how to create symlink in python",
        "output": "",
        "rule": [
            "d3089"
        ]
    },
    {
        "instruction": "",
        "id": "q3090",
        "input": "python numpy to string",
        "output": "",
        "rule": [
            "d3090"
        ]
    },
    {
        "instruction": "",
        "id": "q3091",
        "input": "how to custom headers in connect request in python",
        "output": "",
        "rule": [
            "d3091"
        ]
    },
    {
        "instruction": "",
        "id": "q3092",
        "input": "python numpy topk array index",
        "output": "",
        "rule": [
            "d3092"
        ]
    },
    {
        "instruction": "",
        "id": "q3093",
        "input": "how to cut numerical variable into equal size in python",
        "output": "",
        "rule": [
            "d3093"
        ]
    },
    {
        "instruction": "",
        "id": "q3094",
        "input": "python numpy using max function for an array",
        "output": "",
        "rule": [
            "d3094"
        ]
    },
    {
        "instruction": "",
        "id": "q3095",
        "input": "how to cut the first chars of a string in python",
        "output": "",
        "rule": [
            "d3095"
        ]
    },
    {
        "instruction": "",
        "id": "q3096",
        "input": "python object by string name",
        "output": "",
        "rule": [
            "d3096"
        ]
    },
    {
        "instruction": "",
        "id": "q3097",
        "input": "how to deal python attributeerror",
        "output": "",
        "rule": [
            "d3097"
        ]
    },
    {
        "instruction": "",
        "id": "q3098",
        "input": "python object is not json serializable datetime now",
        "output": "",
        "rule": [
            "d3098"
        ]
    },
    {
        "instruction": "",
        "id": "q3099",
        "input": "how to define enums in python",
        "output": "",
        "rule": [
            "d3099"
        ]
    },
    {
        "instruction": "",
        "id": "q3100",
        "input": "python object member to dict keys",
        "output": "",
        "rule": [
            "d3100"
        ]
    },
    {
        "instruction": "",
        "id": "q3101",
        "input": "how to define return type for python methods",
        "output": "",
        "rule": [
            "d3101"
        ]
    },
    {
        "instruction": "",
        "id": "q3102",
        "input": "python ols fit model output",
        "output": "",
        "rule": [
            "d3102"
        ]
    },
    {
        "instruction": "",
        "id": "q3103",
        "input": "how to delete a file or folder python stackoverflow",
        "output": "",
        "rule": [
            "d3103"
        ]
    },
    {
        "instruction": "",
        "id": "q3104",
        "input": "python one column value unless nan",
        "output": "",
        "rule": [
            "d3104"
        ]
    },
    {
        "instruction": "",
        "id": "q3105",
        "input": "how to delete a label in python",
        "output": "",
        "rule": [
            "d3105"
        ]
    },
    {
        "instruction": "",
        "id": "q3106",
        "input": "python one hot dense array",
        "output": "",
        "rule": [
            "d3106"
        ]
    },
    {
        "instruction": "",
        "id": "q3107",
        "input": "how to delete a text file in python",
        "output": "",
        "rule": [
            "d3107"
        ]
    },
    {
        "instruction": "",
        "id": "q3108",
        "input": "python open a file to read in project folder",
        "output": "",
        "rule": [
            "d3108"
        ]
    },
    {
        "instruction": "",
        "id": "q3109",
        "input": "how to delete image from an image using python",
        "output": "",
        "rule": [
            "d3109"
        ]
    },
    {
        "instruction": "",
        "id": "q3110",
        "input": "python open file in encoding",
        "output": "",
        "rule": [
            "d3110"
        ]
    },
    {
        "instruction": "",
        "id": "q3111",
        "input": "how to delete non empty directory in python",
        "output": "",
        "rule": [
            "d3111"
        ]
    },
    {
        "instruction": "",
        "id": "q3112",
        "input": "python open file with different encoding",
        "output": "",
        "rule": [
            "d3112"
        ]
    },
    {
        "instruction": "",
        "id": "q3113",
        "input": "how to describe a binary tree in python",
        "output": "",
        "rule": [
            "d3113"
        ]
    },
    {
        "instruction": "",
        "id": "q3114",
        "input": "python open text file with encoding",
        "output": "",
        "rule": [
            "d3114"
        ]
    },
    {
        "instruction": "",
        "id": "q3115",
        "input": "how to detect an integer in a string python",
        "output": "",
        "rule": [
            "d3115"
        ]
    },
    {
        "instruction": "",
        "id": "q3116",
        "input": "python opencv decode base64 image",
        "output": "",
        "rule": [
            "d3116"
        ]
    },
    {
        "instruction": "",
        "id": "q3117",
        "input": "how to detect blank line in python",
        "output": "",
        "rule": [
            "d3117"
        ]
    },
    {
        "instruction": "",
        "id": "q3118",
        "input": "python opencv load image from byte string",
        "output": "",
        "rule": [
            "d3118"
        ]
    },
    {
        "instruction": "",
        "id": "q3119",
        "input": "how to determine if something is in the a line in a list in python",
        "output": "",
        "rule": [
            "d3119"
        ]
    },
    {
        "instruction": "",
        "id": "q3120",
        "input": "python operstion every interval",
        "output": "",
        "rule": [
            "d3120"
        ]
    },
    {
        "instruction": "",
        "id": "q3121",
        "input": "how to determine the availability of multiple extensions in python",
        "output": "",
        "rule": [
            "d3121"
        ]
    },
    {
        "instruction": "",
        "id": "q3122",
        "input": "python optionparser defualt args",
        "output": "",
        "rule": [
            "d3122"
        ]
    },
    {
        "instruction": "",
        "id": "q3123",
        "input": "how to determine the number of lines in a python string",
        "output": "",
        "rule": [
            "d3123"
        ]
    },
    {
        "instruction": "",
        "id": "q3124",
        "input": "python optionparser print help",
        "output": "",
        "rule": [
            "d3124"
        ]
    },
    {
        "instruction": "",
        "id": "q3125",
        "input": "how to displa an image in a window with cv2 python",
        "output": "",
        "rule": [
            "d3125"
        ]
    },
    {
        "instruction": "",
        "id": "q3126",
        "input": "python os check if folder exists and create otherwise",
        "output": "",
        "rule": [
            "d3126"
        ]
    },
    {
        "instruction": "",
        "id": "q3127",
        "input": "how to divide pixel values by 255 to normalize in python",
        "output": "",
        "rule": [
            "d3127"
        ]
    },
    {
        "instruction": "",
        "id": "q3128",
        "input": "python pad a number zeros",
        "output": "",
        "rule": [
            "d3128"
        ]
    },
    {
        "instruction": "",
        "id": "q3129",
        "input": "how to do an action on python before termination",
        "output": "",
        "rule": [
            "d3129"
        ]
    },
    {
        "instruction": "",
        "id": "q3130",
        "input": "python pad spaces to left and zeros to right",
        "output": "",
        "rule": [
            "d3130"
        ]
    },
    {
        "instruction": "",
        "id": "q3131",
        "input": "how to do an exponential in python",
        "output": "",
        "rule": [
            "d3131"
        ]
    },
    {
        "instruction": "",
        "id": "q3132",
        "input": "python panda check if column exists",
        "output": "",
        "rule": [
            "d3132"
        ]
    },
    {
        "instruction": "",
        "id": "q3133",
        "input": "how to do outer join python",
        "output": "",
        "rule": [
            "d3133"
        ]
    },
    {
        "instruction": "",
        "id": "q3134",
        "input": "python pands sum all fields",
        "output": "",
        "rule": [
            "d3134"
        ]
    },
    {
        "instruction": "",
        "id": "q3135",
        "input": "how to do tabular format with the appropriate header in python",
        "output": "",
        "rule": [
            "d3135"
        ]
    },
    {
        "instruction": "",
        "id": "q3136",
        "input": "python parse data from api",
        "output": "",
        "rule": [
            "d3136"
        ]
    },
    {
        "instruction": "",
        "id": "q3137",
        "input": "how to do thresholding of an image in python",
        "output": "",
        "rule": [
            "d3137"
        ]
    },
    {
        "instruction": "",
        "id": "q3138",
        "input": "python parse date string to timestamp with timezone",
        "output": "",
        "rule": [
            "d3138"
        ]
    },
    {
        "instruction": "",
        "id": "q3139",
        "input": "how to document kwargs python",
        "output": "",
        "rule": [
            "d3139"
        ]
    },
    {
        "instruction": "",
        "id": "q3140",
        "input": "python parse float list form string",
        "output": "",
        "rule": [
            "d3140"
        ]
    },
    {
        "instruction": "",
        "id": "q3141",
        "input": "how to download a regular file from the web in python",
        "output": "",
        "rule": [
            "d3141"
        ]
    },
    {
        "instruction": "",
        "id": "q3142",
        "input": "python parse json datetime",
        "output": "",
        "rule": [
            "d3142"
        ]
    },
    {
        "instruction": "",
        "id": "q3143",
        "input": "how to duplicate something in a list python",
        "output": "",
        "rule": [
            "d3143"
        ]
    },
    {
        "instruction": "",
        "id": "q3144",
        "input": "python parse query param",
        "output": "",
        "rule": [
            "d3144"
        ]
    },
    {
        "instruction": "",
        "id": "q3145",
        "input": "how to dynamically build a dictionary in python",
        "output": "",
        "rule": [
            "d3145"
        ]
    },
    {
        "instruction": "",
        "id": "q3146",
        "input": "python parse string by token",
        "output": "",
        "rule": [
            "d3146"
        ]
    },
    {
        "instruction": "",
        "id": "q3147",
        "input": "how to dynamically wrap a function python",
        "output": "",
        "rule": [
            "d3147"
        ]
    },
    {
        "instruction": "",
        "id": "q3148",
        "input": "python parse xml keep comments",
        "output": "",
        "rule": [
            "d3148"
        ]
    },
    {
        "instruction": "",
        "id": "q3149",
        "input": "how to eliminate na values in a data frame in python",
        "output": "",
        "rule": [
            "d3149"
        ]
    },
    {
        "instruction": "",
        "id": "q3150",
        "input": "python pass dict to be a kwargs",
        "output": "",
        "rule": [
            "d3150"
        ]
    },
    {
        "instruction": "",
        "id": "q3151",
        "input": "how to encode letters with dictionary python",
        "output": "",
        "rule": [
            "d3151"
        ]
    },
    {
        "instruction": "",
        "id": "q3152",
        "input": "python pass function as empty variabl",
        "output": "",
        "rule": [
            "d3152"
        ]
    },
    {
        "instruction": "",
        "id": "q3153",
        "input": "how to end a while loop with sleep function python",
        "output": "",
        "rule": [
            "d3153"
        ]
    },
    {
        "instruction": "",
        "id": "q3154",
        "input": "python passing **kwargs into a formatted string",
        "output": "",
        "rule": [
            "d3154"
        ]
    },
    {
        "instruction": "",
        "id": "q3155",
        "input": "how to exclude symbols and punctuation in python",
        "output": "",
        "rule": [
            "d3155"
        ]
    },
    {
        "instruction": "",
        "id": "q3156",
        "input": "python path isfile doesnt work macos",
        "output": "",
        "rule": [
            "d3156"
        ]
    },
    {
        "instruction": "",
        "id": "q3157",
        "input": "how to execute a python code from file",
        "output": "",
        "rule": [
            "d3157"
        ]
    },
    {
        "instruction": "",
        "id": "q3158",
        "input": "python pathlib change dir",
        "output": "",
        "rule": [
            "d3158"
        ]
    },
    {
        "instruction": "",
        "id": "q3159",
        "input": "how to exit a python fuction with error message",
        "output": "",
        "rule": [
            "d3159"
        ]
    },
    {
        "instruction": "",
        "id": "q3160",
        "input": "python pcolormesh set colorbar min/max",
        "output": "",
        "rule": [
            "d3160"
        ]
    },
    {
        "instruction": "",
        "id": "q3161",
        "input": "how to exit python from shel",
        "output": "",
        "rule": [
            "d3161"
        ]
    },
    {
        "instruction": "",
        "id": "q3162",
        "input": "python pdb setting variable",
        "output": "",
        "rule": [
            "d3162"
        ]
    },
    {
        "instruction": "",
        "id": "q3163",
        "input": "how to export a zipped folder from python",
        "output": "",
        "rule": [
            "d3163"
        ]
    },
    {
        "instruction": "",
        "id": "q3164",
        "input": "python pdfpages combine files",
        "output": "",
        "rule": [
            "d3164"
        ]
    },
    {
        "instruction": "",
        "id": "q3165",
        "input": "how to expose an object field in python",
        "output": "",
        "rule": [
            "d3165"
        ]
    },
    {
        "instruction": "",
        "id": "q3166",
        "input": "python phase shift fourier",
        "output": "",
        "rule": [
            "d3166"
        ]
    },
    {
        "instruction": "",
        "id": "q3167",
        "input": "how to expose file over local network python",
        "output": "",
        "rule": [
            "d3167"
        ]
    },
    {
        "instruction": "",
        "id": "q3168",
        "input": "python pick one element randomly from set",
        "output": "",
        "rule": [
            "d3168"
        ]
    },
    {
        "instruction": "",
        "id": "q3169",
        "input": "how to extend vectors python3",
        "output": "",
        "rule": [
            "d3169"
        ]
    },
    {
        "instruction": "",
        "id": "q3170",
        "input": "python pickling rlock objects",
        "output": "",
        "rule": [
            "d3170"
        ]
    },
    {
        "instruction": "",
        "id": "q3171",
        "input": "how to extract image from open cv in python",
        "output": "",
        "rule": [
            "d3171"
        ]
    },
    {
        "instruction": "",
        "id": "q3172",
        "input": "python pil image to cv2",
        "output": "",
        "rule": [
            "d3172"
        ]
    },
    {
        "instruction": "",
        "id": "q3173",
        "input": "how to extract property names from schema using python",
        "output": "",
        "rule": [
            "d3173"
        ]
    },
    {
        "instruction": "",
        "id": "q3174",
        "input": "python pil to resize an image",
        "output": "",
        "rule": [
            "d3174"
        ]
    },
    {
        "instruction": "",
        "id": "q3175",
        "input": "how to extract the date a file was created in python",
        "output": "",
        "rule": [
            "d3175"
        ]
    },
    {
        "instruction": "",
        "id": "q3176",
        "input": "python pool shared context object",
        "output": "",
        "rule": [
            "d3176"
        ]
    },
    {
        "instruction": "",
        "id": "q3177",
        "input": "how to filter out the counter object python",
        "output": "",
        "rule": [
            "d3177"
        ]
    },
    {
        "instruction": "",
        "id": "q3178",
        "input": "python prefix self to list",
        "output": "",
        "rule": [
            "d3178"
        ]
    },
    {
        "instruction": "",
        "id": "q3179",
        "input": "how to filter table in python",
        "output": "",
        "rule": [
            "d3179"
        ]
    },
    {
        "instruction": "",
        "id": "q3180",
        "input": "python print 20 first characters file",
        "output": "",
        "rule": [
            "d3180"
        ]
    },
    {
        "instruction": "",
        "id": "q3181",
        "input": "how to fix pylint error in python",
        "output": "",
        "rule": [
            "d3181"
        ]
    },
    {
        "instruction": "",
        "id": "q3182",
        "input": "python print all member vars",
        "output": "",
        "rule": [
            "d3182"
        ]
    },
    {
        "instruction": "",
        "id": "q3183",
        "input": "how to format something x amount of spaces over python",
        "output": "",
        "rule": [
            "d3183"
        ]
    },
    {
        "instruction": "",
        "id": "q3184",
        "input": "python print an env variable",
        "output": "",
        "rule": [
            "d3184"
        ]
    },
    {
        "instruction": "",
        "id": "q3185",
        "input": "how to generate a random list with n characters in python",
        "output": "",
        "rule": [
            "d3185"
        ]
    },
    {
        "instruction": "",
        "id": "q3186",
        "input": "python print color and bold",
        "output": "",
        "rule": [
            "d3186"
        ]
    },
    {
        "instruction": "",
        "id": "q3187",
        "input": "how to generate passwords with python",
        "output": "",
        "rule": [
            "d3187"
        ]
    },
    {
        "instruction": "",
        "id": "q3188",
        "input": "python print full precision",
        "output": "",
        "rule": [
            "d3188"
        ]
    },
    {
        "instruction": "",
        "id": "q3189",
        "input": "how to generate sublist with equal length python",
        "output": "",
        "rule": [
            "d3189"
        ]
    },
    {
        "instruction": "",
        "id": "q3190",
        "input": "python print how long a function runs for",
        "output": "",
        "rule": [
            "d3190"
        ]
    },
    {
        "instruction": "",
        "id": "q3191",
        "input": "how to generate test case report in python unittest",
        "output": "",
        "rule": [
            "d3191"
        ]
    },
    {
        "instruction": "",
        "id": "q3192",
        "input": "python print json tree",
        "output": "",
        "rule": [
            "d3192"
        ]
    },
    {
        "instruction": "",
        "id": "q3193",
        "input": "how to generate yaml files in python",
        "output": "",
        "rule": [
            "d3193"
        ]
    },
    {
        "instruction": "",
        "id": "q3194",
        "input": "python print multiple dictionaries in order",
        "output": "",
        "rule": [
            "d3194"
        ]
    },
    {
        "instruction": "",
        "id": "q3195",
        "input": "how to get 2 last row of a list in python",
        "output": "",
        "rule": [
            "d3195"
        ]
    },
    {
        "instruction": "",
        "id": "q3196",
        "input": "python print on last pass only",
        "output": "",
        "rule": [
            "d3196"
        ]
    },
    {
        "instruction": "",
        "id": "q3197",
        "input": "how to get area of a triangle python",
        "output": "",
        "rule": [
            "d3197"
        ]
    },
    {
        "instruction": "",
        "id": "q3198",
        "input": "python print output to a printer",
        "output": "",
        "rule": [
            "d3198"
        ]
    },
    {
        "instruction": "",
        "id": "q3199",
        "input": "how to get both return code and output executed by the code from subprocess in python",
        "output": "",
        "rule": [
            "d3199"
        ]
    },
    {
        "instruction": "",
        "id": "q3200",
        "input": "python print sqlite3 table column names",
        "output": "",
        "rule": [
            "d3200"
        ]
    },
    {
        "instruction": "",
        "id": "q3201",
        "input": "how to get child proccesses to run differently python",
        "output": "",
        "rule": [
            "d3201"
        ]
    },
    {
        "instruction": "",
        "id": "q3202",
        "input": "python print stdout imeddiatly",
        "output": "",
        "rule": [
            "d3202"
        ]
    },
    {
        "instruction": "",
        "id": "q3203",
        "input": "how to get datetime now in python utc",
        "output": "",
        "rule": [
            "d3203"
        ]
    },
    {
        "instruction": "",
        "id": "q3204",
        "input": "python print string to varaible",
        "output": "",
        "rule": [
            "d3204"
        ]
    },
    {
        "instruction": "",
        "id": "q3205",
        "input": "how to get dimenstionn of data frame python",
        "output": "",
        "rule": [
            "d3205"
        ]
    },
    {
        "instruction": "",
        "id": "q3206",
        "input": "how to get encoding type in python",
        "output": "",
        "rule": [
            "d3206"
        ]
    },
    {
        "instruction": "",
        "id": "q3207",
        "input": "python print+formatting output width",
        "output": "",
        "rule": [
            "d3207"
        ]
    },
    {
        "instruction": "",
        "id": "q3208",
        "input": "how to get environement variables and its name in python",
        "output": "",
        "rule": [
            "d3208"
        ]
    },
    {
        "instruction": "",
        "id": "q3209",
        "input": "python produce a string for json",
        "output": "",
        "rule": [
            "d3209"
        ]
    },
    {
        "instruction": "",
        "id": "q3210",
        "input": "how to get field in css in python",
        "output": "",
        "rule": [
            "d3210"
        ]
    },
    {
        "instruction": "",
        "id": "q3211",
        "input": "python program dividng seconds into hours minutes and seconds",
        "output": "",
        "rule": [
            "d3211"
        ]
    },
    {
        "instruction": "",
        "id": "q3212",
        "input": "how to get fields of object in python",
        "output": "",
        "rule": [
            "d3212"
        ]
    },
    {
        "instruction": "",
        "id": "q3213",
        "input": "python prompt input hide",
        "output": "",
        "rule": [
            "d3213"
        ]
    },
    {
        "instruction": "",
        "id": "q3214",
        "input": "how to get index of a line in python",
        "output": "",
        "rule": [
            "d3214"
        ]
    },
    {
        "instruction": "",
        "id": "q3215",
        "input": "python property with only a setter",
        "output": "",
        "rule": [
            "d3215"
        ]
    },
    {
        "instruction": "",
        "id": "q3216",
        "input": "how to get index or poition of an array input python",
        "output": "",
        "rule": [
            "d3216"
        ]
    },
    {
        "instruction": "",
        "id": "q3217",
        "input": "python protobuf functions delimited",
        "output": "",
        "rule": [
            "d3217"
        ]
    },
    {
        "instruction": "",
        "id": "q3218",
        "input": "how to get input of ordered dictionary in python",
        "output": "",
        "rule": [
            "d3218"
        ]
    },
    {
        "instruction": "",
        "id": "q3219",
        "input": "python psutil windows suspend",
        "output": "",
        "rule": [
            "d3219"
        ]
    },
    {
        "instruction": "",
        "id": "q3220",
        "input": "how to get list of python dictionary values only",
        "output": "",
        "rule": [
            "d3220"
        ]
    },
    {
        "instruction": "",
        "id": "q3221",
        "input": "python pull large json from url and put into file",
        "output": "",
        "rule": [
            "d3221"
        ]
    },
    {
        "instruction": "",
        "id": "q3222",
        "input": "how to get number of objects in document in python",
        "output": "",
        "rule": [
            "d3222"
        ]
    },
    {
        "instruction": "",
        "id": "q3223",
        "input": "python pygla transparent background color",
        "output": "",
        "rule": [
            "d3223"
        ]
    },
    {
        "instruction": "",
        "id": "q3224",
        "input": "how to get object name in python blender",
        "output": "",
        "rule": [
            "d3224"
        ]
    },
    {
        "instruction": "",
        "id": "q3225",
        "input": "python pymssql database how to set transaction",
        "output": "",
        "rule": [
            "d3225"
        ]
    },
    {
        "instruction": "",
        "id": "q3226",
        "input": "how to get object name in python rather than long code",
        "output": "",
        "rule": [
            "d3226"
        ]
    },
    {
        "instruction": "",
        "id": "q3227",
        "input": "python pyplot limit y axis range",
        "output": "",
        "rule": [
            "d3227"
        ]
    },
    {
        "instruction": "",
        "id": "q3228",
        "input": "how to get past ssl error python",
        "output": "",
        "rule": [
            "d3228"
        ]
    },
    {
        "instruction": "",
        "id": "q3229",
        "input": "python pytest single file",
        "output": "",
        "rule": [
            "d3229"
        ]
    },
    {
        "instruction": "",
        "id": "q3230",
        "input": "how to get python to iterate over files in a folder",
        "output": "",
        "rule": [
            "d3230"
        ]
    },
    {
        "instruction": "",
        "id": "q3231",
        "input": "python pytz timezone api",
        "output": "",
        "rule": [
            "d3231"
        ]
    },
    {
        "instruction": "",
        "id": "q3232",
        "input": "how to get rid of an axis in python",
        "output": "",
        "rule": [
            "d3232"
        ]
    },
    {
        "instruction": "",
        "id": "q3233",
        "input": "python queue get but not remove",
        "output": "",
        "rule": [
            "d3233"
        ]
    },
    {
        "instruction": "",
        "id": "q3234",
        "input": "how to get rid of spaces in python comma string",
        "output": "",
        "rule": [
            "d3234"
        ]
    },
    {
        "instruction": "",
        "id": "q3235",
        "input": "python queue get delete",
        "output": "",
        "rule": [
            "d3235"
        ]
    },
    {
        "instruction": "",
        "id": "q3236",
        "input": "how to get rid of the endline of a string python",
        "output": "",
        "rule": [
            "d3236"
        ]
    },
    {
        "instruction": "",
        "id": "q3237",
        "input": "python random string of n length",
        "output": "",
        "rule": [
            "d3237"
        ]
    },
    {
        "instruction": "",
        "id": "q3238",
        "input": "how to get start of an offset in python",
        "output": "",
        "rule": [
            "d3238"
        ]
    },
    {
        "instruction": "",
        "id": "q3239",
        "input": "python range function choose intervals",
        "output": "",
        "rule": [
            "d3239"
        ]
    },
    {
        "instruction": "",
        "id": "q3240",
        "input": "how to get subset of attributes from python object",
        "output": "",
        "rule": [
            "d3240"
        ]
    },
    {
        "instruction": "",
        "id": "q3241",
        "input": "python rank according to key",
        "output": "",
        "rule": [
            "d3241"
        ]
    },
    {
        "instruction": "",
        "id": "q3242",
        "input": "how to get the directory of the file inpython",
        "output": "",
        "rule": [
            "d3242"
        ]
    },
    {
        "instruction": "",
        "id": "q3243",
        "input": "python read bytes till file end",
        "output": "",
        "rule": [
            "d3243"
        ]
    },
    {
        "instruction": "",
        "id": "q3244",
        "input": "how to get the highest observation within the group by function in python",
        "output": "",
        "rule": [
            "d3244"
        ]
    },
    {
        "instruction": "",
        "id": "q3245",
        "input": "python read file in wondows absolute path",
        "output": "",
        "rule": [
            "d3245"
        ]
    },
    {
        "instruction": "",
        "id": "q3246",
        "input": "how to get the integer value for a string in python",
        "output": "",
        "rule": [
            "d3246"
        ]
    },
    {
        "instruction": "",
        "id": "q3247",
        "input": "python read file specified content",
        "output": "",
        "rule": [
            "d3247"
        ]
    },
    {
        "instruction": "",
        "id": "q3248",
        "input": "how to get the location of an list object in python",
        "output": "",
        "rule": [
            "d3248"
        ]
    },
    {
        "instruction": "",
        "id": "q3249",
        "input": "python read file with encoding",
        "output": "",
        "rule": [
            "d3249"
        ]
    },
    {
        "instruction": "",
        "id": "q3250",
        "input": "how to get the root of the treeview if click onchild treeview tkinter python",
        "output": "",
        "rule": [
            "d3250"
        ]
    },
    {
        "instruction": "",
        "id": "q3251",
        "input": "python read folder of text file into array",
        "output": "",
        "rule": [
            "d3251"
        ]
    },
    {
        "instruction": "",
        "id": "q3252",
        "input": "how to get the size of a data type in python",
        "output": "",
        "rule": [
            "d3252"
        ]
    },
    {
        "instruction": "",
        "id": "q3253",
        "input": "python read from stdin forever",
        "output": "",
        "rule": [
            "d3253"
        ]
    },
    {
        "instruction": "",
        "id": "q3254",
        "input": "how to get the smallest item in a list in python",
        "output": "",
        "rule": [
            "d3254"
        ]
    },
    {
        "instruction": "",
        "id": "q3255",
        "input": "python read from stdin immediately",
        "output": "",
        "rule": [
            "d3255"
        ]
    },
    {
        "instruction": "",
        "id": "q3256",
        "input": "how to get the x labels to run vertically instead of horizontally in python matplotlib",
        "output": "",
        "rule": [
            "d3256"
        ]
    },
    {
        "instruction": "",
        "id": "q3257",
        "input": "python read json from web page",
        "output": "",
        "rule": [
            "d3257"
        ]
    },
    {
        "instruction": "",
        "id": "q3258",
        "input": "how to get unique constraints from a msssql table in python",
        "output": "",
        "rule": [
            "d3258"
        ]
    },
    {
        "instruction": "",
        "id": "q3259",
        "input": "python read large binary file bytes yeild",
        "output": "",
        "rule": [
            "d3259"
        ]
    },
    {
        "instruction": "",
        "id": "q3260",
        "input": "how to get url params flask python",
        "output": "",
        "rule": [
            "d3260"
        ]
    },
    {
        "instruction": "",
        "id": "q3261",
        "input": "python read large tif into numpy array",
        "output": "",
        "rule": [
            "d3261"
        ]
    },
    {
        "instruction": "",
        "id": "q3262",
        "input": "how to give type annotation in defining a funciton in python",
        "output": "",
        "rule": [
            "d3262"
        ]
    },
    {
        "instruction": "",
        "id": "q3263",
        "input": "python read list of tuples from file space separated",
        "output": "",
        "rule": [
            "d3263"
        ]
    },
    {
        "instruction": "",
        "id": "q3264",
        "input": "how to go to a new line on python",
        "output": "",
        "rule": [
            "d3264"
        ]
    },
    {
        "instruction": "",
        "id": "q3265",
        "input": "python read protobuf pb file",
        "output": "",
        "rule": [
            "d3265"
        ]
    },
    {
        "instruction": "",
        "id": "q3266",
        "input": "how to grab each word in a line python",
        "output": "",
        "rule": [
            "d3266"
        ]
    },
    {
        "instruction": "",
        "id": "q3267",
        "input": "python read tiff file to numpy array",
        "output": "",
        "rule": [
            "d3267"
        ]
    },
    {
        "instruction": "",
        "id": "q3268",
        "input": "how to have a function check for integers python",
        "output": "",
        "rule": [
            "d3268"
        ]
    },
    {
        "instruction": "",
        "id": "q3269",
        "input": "python reading in data ints as objects",
        "output": "",
        "rule": [
            "d3269"
        ]
    },
    {
        "instruction": "",
        "id": "q3270",
        "input": "how to identify the encoding of a line in python",
        "output": "",
        "rule": [
            "d3270"
        ]
    },
    {
        "instruction": "",
        "id": "q3271",
        "input": "python recursive dictionary change value",
        "output": "",
        "rule": [
            "d3271"
        ]
    },
    {
        "instruction": "",
        "id": "q3272",
        "input": "how to identify type of inpupt python",
        "output": "",
        "rule": [
            "d3272"
        ]
    },
    {
        "instruction": "",
        "id": "q3273",
        "input": "python redirect stdout and stdin subprocess",
        "output": "",
        "rule": [
            "d3273"
        ]
    },
    {
        "instruction": "",
        "id": "q3274",
        "input": "how to implement help in python",
        "output": "",
        "rule": [
            "d3274"
        ]
    },
    {
        "instruction": "",
        "id": "q3275",
        "input": "python redis batch set",
        "output": "",
        "rule": [
            "d3275"
        ]
    },
    {
        "instruction": "",
        "id": "q3276",
        "input": "how to implement websocket in python",
        "output": "",
        "rule": [
            "d3276"
        ]
    },
    {
        "instruction": "",
        "id": "q3277",
        "input": "python redis connection pooling",
        "output": "",
        "rule": [
            "d3277"
        ]
    },
    {
        "instruction": "",
        "id": "q3278",
        "input": "how to increase the number of ticks timeseries python",
        "output": "",
        "rule": [
            "d3278"
        ]
    },
    {
        "instruction": "",
        "id": "q3279",
        "input": "python redis connectionpool close",
        "output": "",
        "rule": [
            "d3279"
        ]
    },
    {
        "instruction": "",
        "id": "q3280",
        "input": "how to invoke post method from another method in python",
        "output": "",
        "rule": [
            "d3280"
        ]
    },
    {
        "instruction": "",
        "id": "q3281",
        "input": "python regex how to specify a list of patterns",
        "output": "",
        "rule": [
            "d3281"
        ]
    },
    {
        "instruction": "",
        "id": "q3282",
        "input": "how to join two data frame by a common column in python",
        "output": "",
        "rule": [
            "d3282"
        ]
    },
    {
        "instruction": "",
        "id": "q3283",
        "input": "python regex match any kind of paranthesis",
        "output": "",
        "rule": [
            "d3283"
        ]
    },
    {
        "instruction": "",
        "id": "q3284",
        "input": "how to keep the legend outside the python graph",
        "output": "",
        "rule": [
            "d3284"
        ]
    },
    {
        "instruction": "",
        "id": "q3285",
        "input": "python regex return beggining of match",
        "output": "",
        "rule": [
            "d3285"
        ]
    },
    {
        "instruction": "",
        "id": "q3286",
        "input": "how to keep track of occurrences in python",
        "output": "",
        "rule": [
            "d3286"
        ]
    },
    {
        "instruction": "",
        "id": "q3287",
        "input": "python regex to check given email is valid or not",
        "output": "",
        "rule": [
            "d3287"
        ]
    },
    {
        "instruction": "",
        "id": "q3288",
        "input": "how to kik member in group in python",
        "output": "",
        "rule": [
            "d3288"
        ]
    },
    {
        "instruction": "",
        "id": "q3289",
        "input": "python regular expression tuple",
        "output": "",
        "rule": [
            "d3289"
        ]
    },
    {
        "instruction": "",
        "id": "q3290",
        "input": "how to kill a running python script",
        "output": "",
        "rule": [
            "d3290"
        ]
    },
    {
        "instruction": "",
        "id": "q3291",
        "input": "python relative data path",
        "output": "",
        "rule": [
            "d3291"
        ]
    },
    {
        "instruction": "",
        "id": "q3292",
        "input": "how to kill python process in linux",
        "output": "",
        "rule": [
            "d3292"
        ]
    },
    {
        "instruction": "",
        "id": "q3293",
        "input": "python relu gradient function",
        "output": "",
        "rule": [
            "d3293"
        ]
    },
    {
        "instruction": "",
        "id": "q3294",
        "input": "how to kill the process using python by accessing the variable",
        "output": "",
        "rule": [
            "d3294"
        ]
    },
    {
        "instruction": "",
        "id": "q3295",
        "input": "python remove all compiled files",
        "output": "",
        "rule": [
            "d3295"
        ]
    },
    {
        "instruction": "",
        "id": "q3296",
        "input": "how to know if a python code is running",
        "output": "",
        "rule": [
            "d3296"
        ]
    },
    {
        "instruction": "",
        "id": "q3297",
        "input": "python remove all dictionary entires with specified value",
        "output": "",
        "rule": [
            "d3297"
        ]
    },
    {
        "instruction": "",
        "id": "q3298",
        "input": "how to know if python environment is correct",
        "output": "",
        "rule": [
            "d3298"
        ]
    },
    {
        "instruction": "",
        "id": "q3299",
        "input": "python remove all none items from a list",
        "output": "",
        "rule": [
            "d3299"
        ]
    },
    {
        "instruction": "",
        "id": "q3300",
        "input": "how to limit the range of x axis python",
        "output": "",
        "rule": [
            "d3300"
        ]
    },
    {
        "instruction": "",
        "id": "q3301",
        "input": "python remove c comment",
        "output": "",
        "rule": [
            "d3301"
        ]
    },
    {
        "instruction": "",
        "id": "q3302",
        "input": "how to link rooms in python",
        "output": "",
        "rule": [
            "d3302"
        ]
    },
    {
        "instruction": "",
        "id": "q3303",
        "input": "python remove duplicate elemnts in list",
        "output": "",
        "rule": [
            "d3303"
        ]
    },
    {
        "instruction": "",
        "id": "q3304",
        "input": "how to list columns and data types in data frames python",
        "output": "",
        "rule": [
            "d3304"
        ]
    },
    {
        "instruction": "",
        "id": "q3305",
        "input": "python remove duplicated from files",
        "output": "",
        "rule": [
            "d3305"
        ]
    },
    {
        "instruction": "",
        "id": "q3306",
        "input": "how to log all my python errors in a log file",
        "output": "",
        "rule": [
            "d3306"
        ]
    },
    {
        "instruction": "",
        "id": "q3307",
        "input": "python remove file if it exists",
        "output": "",
        "rule": [
            "d3307"
        ]
    },
    {
        "instruction": "",
        "id": "q3308",
        "input": "how to make a copy of a python object",
        "output": "",
        "rule": [
            "d3308"
        ]
    },
    {
        "instruction": "",
        "id": "q3309",
        "input": "python remove item from heapq",
        "output": "",
        "rule": [
            "d3309"
        ]
    },
    {
        "instruction": "",
        "id": "q3310",
        "input": "how to make a curved path on python",
        "output": "",
        "rule": [
            "d3310"
        ]
    },
    {
        "instruction": "",
        "id": "q3311",
        "input": "python remove non alphanumeric except whitespace",
        "output": "",
        "rule": [
            "d3311"
        ]
    },
    {
        "instruction": "",
        "id": "q3312",
        "input": "how to make a function run once in python",
        "output": "",
        "rule": [
            "d3312"
        ]
    },
    {
        "instruction": "",
        "id": "q3313",
        "input": "python remove none values from list",
        "output": "",
        "rule": [
            "d3313"
        ]
    },
    {
        "instruction": "",
        "id": "q3314",
        "input": "how to make a list hashable in python",
        "output": "",
        "rule": [
            "d3314"
        ]
    },
    {
        "instruction": "",
        "id": "q3315",
        "input": "python remove overlap items betweem two lists",
        "output": "",
        "rule": [
            "d3315"
        ]
    },
    {
        "instruction": "",
        "id": "q3316",
        "input": "how to make a list of words into corpus python",
        "output": "",
        "rule": [
            "d3316"
        ]
    },
    {
        "instruction": "",
        "id": "q3317",
        "input": "python remove paranthesis from string",
        "output": "",
        "rule": [
            "d3317"
        ]
    },
    {
        "instruction": "",
        "id": "q3318",
        "input": "how to make a number indicate the number of spaces in python",
        "output": "",
        "rule": [
            "d3318"
        ]
    },
    {
        "instruction": "",
        "id": "q3319",
        "input": "python remove prefix columns",
        "output": "",
        "rule": [
            "d3319"
        ]
    },
    {
        "instruction": "",
        "id": "q3320",
        "input": "python remove redunant in array",
        "output": "",
        "rule": [
            "d3320"
        ]
    },
    {
        "instruction": "",
        "id": "q3321",
        "input": "how to make a string as datetime date in python",
        "output": "",
        "rule": [
            "d3321"
        ]
    },
    {
        "instruction": "",
        "id": "q3322",
        "input": "python remove spaces between specific chars",
        "output": "",
        "rule": [
            "d3322"
        ]
    },
    {
        "instruction": "",
        "id": "q3323",
        "input": "how to make a string into a path python",
        "output": "",
        "rule": [
            "d3323"
        ]
    },
    {
        "instruction": "",
        "id": "q3324",
        "input": "python remove trailing zeros decimal format",
        "output": "",
        "rule": [
            "d3324"
        ]
    },
    {
        "instruction": "",
        "id": "q3325",
        "input": "how to make a symlink in python",
        "output": "",
        "rule": [
            "d3325"
        ]
    },
    {
        "instruction": "",
        "id": "q3326",
        "input": "python render jinja2 without flask",
        "output": "",
        "rule": [
            "d3326"
        ]
    },
    {
        "instruction": "",
        "id": "q3327",
        "input": "how to make an array of zeros in python",
        "output": "",
        "rule": [
            "d3327"
        ]
    },
    {
        "instruction": "",
        "id": "q3328",
        "input": "python render jinjia yaml template",
        "output": "",
        "rule": [
            "d3328"
        ]
    },
    {
        "instruction": "",
        "id": "q3329",
        "input": "how to make caps lowercase in python",
        "output": "",
        "rule": [
            "d3329"
        ]
    },
    {
        "instruction": "",
        "id": "q3330",
        "input": "python rendering json, and html",
        "output": "",
        "rule": [
            "d3330"
        ]
    },
    {
        "instruction": "",
        "id": "q3331",
        "input": "how to make charachters in python",
        "output": "",
        "rule": [
            "d3331"
        ]
    },
    {
        "instruction": "",
        "id": "q3332",
        "input": "python replace between two words",
        "output": "",
        "rule": [
            "d3332"
        ]
    },
    {
        "instruction": "",
        "id": "q3333",
        "input": "how to make columns python using strings",
        "output": "",
        "rule": [
            "d3333"
        ]
    },
    {
        "instruction": "",
        "id": "q3334",
        "input": "python replace case insensitive",
        "output": "",
        "rule": [
            "d3334"
        ]
    },
    {
        "instruction": "",
        "id": "q3335",
        "input": "how to make flask standalone python",
        "output": "",
        "rule": [
            "d3335"
        ]
    },
    {
        "instruction": "",
        "id": "q3336",
        "input": "python replace specific text in string",
        "output": "",
        "rule": [
            "d3336"
        ]
    },
    {
        "instruction": "",
        "id": "q3337",
        "input": "how to make multiple lines python into comments",
        "output": "",
        "rule": [
            "d3337"
        ]
    },
    {
        "instruction": "",
        "id": "q3338",
        "input": "python replace string range",
        "output": "",
        "rule": [
            "d3338"
        ]
    },
    {
        "instruction": "",
        "id": "q3339",
        "input": "how to make my timezone offset aware python",
        "output": "",
        "rule": [
            "d3339"
        ]
    },
    {
        "instruction": "",
        "id": "q3340",
        "input": "python replacing multiple substrings",
        "output": "",
        "rule": [
            "d3340"
        ]
    },
    {
        "instruction": "",
        "id": "q3341",
        "input": "how to make numbers rounded in python",
        "output": "",
        "rule": [
            "d3341"
        ]
    },
    {
        "instruction": "",
        "id": "q3342",
        "input": "python request mock cookie session",
        "output": "",
        "rule": [
            "d3342"
        ]
    },
    {
        "instruction": "",
        "id": "q3343",
        "input": "how to make string name unique value python",
        "output": "",
        "rule": [
            "d3343"
        ]
    },
    {
        "instruction": "",
        "id": "q3344",
        "input": "python requests auth token post",
        "output": "",
        "rule": [
            "d3344"
        ]
    },
    {
        "instruction": "",
        "id": "q3345",
        "input": "how to make sure a list has a certain amount of elements python",
        "output": "",
        "rule": [
            "d3345"
        ]
    },
    {
        "instruction": "",
        "id": "q3346",
        "input": "python requests check if 404",
        "output": "",
        "rule": [
            "d3346"
        ]
    },
    {
        "instruction": "",
        "id": "q3347",
        "input": "how to make sure a matrix is float in python",
        "output": "",
        "rule": [
            "d3347"
        ]
    },
    {
        "instruction": "",
        "id": "q3348",
        "input": "python requests dictionary to query string",
        "output": "",
        "rule": [
            "d3348"
        ]
    },
    {
        "instruction": "",
        "id": "q3349",
        "input": "how to make the root default loggingtimedrotatingfilehandler python",
        "output": "",
        "rule": [
            "d3349"
        ]
    },
    {
        "instruction": "",
        "id": "q3350",
        "input": "python requests do not log all connections",
        "output": "",
        "rule": [
            "d3350"
        ]
    },
    {
        "instruction": "",
        "id": "q3351",
        "input": "how to measur length of strings in python",
        "output": "",
        "rule": [
            "d3351"
        ]
    },
    {
        "instruction": "",
        "id": "q3352",
        "input": "python requests how to download a zip file",
        "output": "",
        "rule": [
            "d3352"
        ]
    },
    {
        "instruction": "",
        "id": "q3353",
        "input": "how to merge to dictionaries together in python",
        "output": "",
        "rule": [
            "d3353"
        ]
    },
    {
        "instruction": "",
        "id": "q3354",
        "input": "python requests params value hyphen underscore",
        "output": "",
        "rule": [
            "d3354"
        ]
    },
    {
        "instruction": "",
        "id": "q3355",
        "input": "how to move a file into a certain folder by matching the names of the file and folder in python",
        "output": "",
        "rule": [
            "d3355"
        ]
    },
    {
        "instruction": "",
        "id": "q3356",
        "input": "python requests thread safe gevent",
        "output": "",
        "rule": [
            "d3356"
        ]
    },
    {
        "instruction": "",
        "id": "q3357",
        "input": "how to move cursor in a circle python",
        "output": "",
        "rule": [
            "d3357"
        ]
    },
    {
        "instruction": "",
        "id": "q3358",
        "input": "python requests url safe characters",
        "output": "",
        "rule": [
            "d3358"
        ]
    },
    {
        "instruction": "",
        "id": "q3359",
        "input": "python requests verify false insecurerequestwarnig",
        "output": "",
        "rule": [
            "d3359"
        ]
    },
    {
        "instruction": "",
        "id": "q3360",
        "input": "how to normalize matrix data python",
        "output": "",
        "rule": [
            "d3360"
        ]
    },
    {
        "instruction": "",
        "id": "q3361",
        "input": "python resize image and maintain aspect ration",
        "output": "",
        "rule": [
            "d3361"
        ]
    },
    {
        "instruction": "",
        "id": "q3362",
        "input": "how to obtin decimals in python",
        "output": "",
        "rule": [
            "d3362"
        ]
    },
    {
        "instruction": "",
        "id": "q3363",
        "input": "python resize image keep aspect ratio",
        "output": "",
        "rule": [
            "d3363"
        ]
    },
    {
        "instruction": "",
        "id": "q3364",
        "input": "how to order features alphabetically in python",
        "output": "",
        "rule": [
            "d3364"
        ]
    },
    {
        "instruction": "",
        "id": "q3365",
        "input": "python response json load",
        "output": "",
        "rule": [
            "d3365"
        ]
    },
    {
        "instruction": "",
        "id": "q3366",
        "input": "how to pad in python",
        "output": "",
        "rule": [
            "d3366"
        ]
    },
    {
        "instruction": "",
        "id": "q3367",
        "input": "python rest 403 forbidden",
        "output": "",
        "rule": [
            "d3367"
        ]
    },
    {
        "instruction": "",
        "id": "q3368",
        "input": "how to pass a pythonfile to every testcase in pytest",
        "output": "",
        "rule": [
            "d3368"
        ]
    },
    {
        "instruction": "",
        "id": "q3369",
        "input": "python restart an iterator",
        "output": "",
        "rule": [
            "d3369"
        ]
    },
    {
        "instruction": "",
        "id": "q3370",
        "input": "how to pass the corpus files to tfidfvectorizer to vectorize in python",
        "output": "",
        "rule": [
            "d3370"
        ]
    },
    {
        "instruction": "",
        "id": "q3371",
        "input": "python restrict methods to certain objects",
        "output": "",
        "rule": [
            "d3371"
        ]
    },
    {
        "instruction": "",
        "id": "q3372",
        "input": "how to perform element wise multiplication of a matrix in python",
        "output": "",
        "rule": [
            "d3372"
        ]
    },
    {
        "instruction": "",
        "id": "q3373",
        "input": "python retrieve own ip",
        "output": "",
        "rule": [
            "d3373"
        ]
    },
    {
        "instruction": "",
        "id": "q3374",
        "input": "how to perform if function once python",
        "output": "",
        "rule": [
            "d3374"
        ]
    },
    {
        "instruction": "",
        "id": "q3375",
        "input": "python retunr index of all items that matach a pattern in a list",
        "output": "",
        "rule": [
            "d3375"
        ]
    },
    {
        "instruction": "",
        "id": "q3376",
        "input": "how to plot a distribution plot python",
        "output": "",
        "rule": [
            "d3376"
        ]
    },
    {
        "instruction": "",
        "id": "q3377",
        "input": "python return all info in a dict",
        "output": "",
        "rule": [
            "d3377"
        ]
    },
    {
        "instruction": "",
        "id": "q3378",
        "input": "how to plot a standard deviation of a list python",
        "output": "",
        "rule": [
            "d3378"
        ]
    },
    {
        "instruction": "",
        "id": "q3379",
        "input": "python return ancestors of node",
        "output": "",
        "rule": [
            "d3379"
        ]
    },
    {
        "instruction": "",
        "id": "q3380",
        "input": "how to plot distribution python",
        "output": "",
        "rule": [
            "d3380"
        ]
    },
    {
        "instruction": "",
        "id": "q3381",
        "input": "python return index of closest value",
        "output": "",
        "rule": [
            "d3381"
        ]
    },
    {
        "instruction": "",
        "id": "q3382",
        "input": "how to plot line from array in python",
        "output": "",
        "rule": [
            "d3382"
        ]
    },
    {
        "instruction": "",
        "id": "q3383",
        "input": "python return index of series",
        "output": "",
        "rule": [
            "d3383"
        ]
    },
    {
        "instruction": "",
        "id": "q3384",
        "input": "how to post something in python to a api",
        "output": "",
        "rule": [
            "d3384"
        ]
    },
    {
        "instruction": "",
        "id": "q3385",
        "input": "python return middle index a list",
        "output": "",
        "rule": [
            "d3385"
        ]
    },
    {
        "instruction": "",
        "id": "q3386",
        "input": "how to print a json in a formatted manner with python",
        "output": "",
        "rule": [
            "d3386"
        ]
    },
    {
        "instruction": "",
        "id": "q3387",
        "input": "python return tuple from function show nothing",
        "output": "",
        "rule": [
            "d3387"
        ]
    },
    {
        "instruction": "",
        "id": "q3388",
        "input": "how to print clear the screen in python",
        "output": "",
        "rule": [
            "d3388"
        ]
    },
    {
        "instruction": "",
        "id": "q3389",
        "input": "python returns number of days for month/year pair",
        "output": "",
        "rule": [
            "d3389"
        ]
    },
    {
        "instruction": "",
        "id": "q3390",
        "input": "how to print hours minutes seconds python",
        "output": "",
        "rule": [
            "d3390"
        ]
    },
    {
        "instruction": "",
        "id": "q3391",
        "input": "python reverse iterator index",
        "output": "",
        "rule": [
            "d3391"
        ]
    },
    {
        "instruction": "",
        "id": "q3392",
        "input": "how to print message error in python tkinter",
        "output": "",
        "rule": [
            "d3392"
        ]
    },
    {
        "instruction": "",
        "id": "q3393",
        "input": "python roc auc sklearn",
        "output": "",
        "rule": [
            "d3393"
        ]
    },
    {
        "instruction": "",
        "id": "q3394",
        "input": "how to print stack trace error in python",
        "output": "",
        "rule": [
            "d3394"
        ]
    },
    {
        "instruction": "",
        "id": "q3395",
        "input": "python rotate 2d array 90 degrees",
        "output": "",
        "rule": [
            "d3395"
        ]
    },
    {
        "instruction": "",
        "id": "q3396",
        "input": "how to print text in color for python",
        "output": "",
        "rule": [
            "d3396"
        ]
    },
    {
        "instruction": "",
        "id": "q3397",
        "input": "python round adding digit",
        "output": "",
        "rule": [
            "d3397"
        ]
    },
    {
        "instruction": "",
        "id": "q3398",
        "input": "how to print the error returned by python",
        "output": "",
        "rule": [
            "d3398"
        ]
    },
    {
        "instruction": "",
        "id": "q3399",
        "input": "python rpc not response",
        "output": "",
        "rule": [
            "d3399"
        ]
    },
    {
        "instruction": "",
        "id": "q3400",
        "input": "how to pull up reference id in python",
        "output": "",
        "rule": [
            "d3400"
        ]
    },
    {
        "instruction": "",
        "id": "q3401",
        "input": "python rpy2 robjects not found",
        "output": "",
        "rule": [
            "d3401"
        ]
    },
    {
        "instruction": "",
        "id": "q3402",
        "input": "how to put a image as a background python",
        "output": "",
        "rule": [
            "d3402"
        ]
    },
    {
        "instruction": "",
        "id": "q3403",
        "input": "python s3client to s3resources",
        "output": "",
        "rule": [
            "d3403"
        ]
    },
    {
        "instruction": "",
        "id": "q3404",
        "input": "how to put all sql columns in a list python",
        "output": "",
        "rule": [
            "d3404"
        ]
    },
    {
        "instruction": "",
        "id": "q3405",
        "input": "python sanic child process not kill",
        "output": "",
        "rule": [
            "d3405"
        ]
    },
    {
        "instruction": "",
        "id": "q3406",
        "input": "how to put tokens into sentence python",
        "output": "",
        "rule": [
            "d3406"
        ]
    },
    {
        "instruction": "",
        "id": "q3407",
        "input": "python save file portability",
        "output": "",
        "rule": [
            "d3407"
        ]
    },
    {
        "instruction": "",
        "id": "q3408",
        "input": "how to randomize the objects in a list python",
        "output": "",
        "rule": [
            "d3408"
        ]
    },
    {
        "instruction": "",
        "id": "q3409",
        "input": "python save image array as jpeg",
        "output": "",
        "rule": [
            "d3409"
        ]
    },
    {
        "instruction": "",
        "id": "q3410",
        "input": "how to randomly choose one element from array python",
        "output": "",
        "rule": [
            "d3410"
        ]
    },
    {
        "instruction": "",
        "id": "q3411",
        "input": "python savefig do no show figure",
        "output": "",
        "rule": [
            "d3411"
        ]
    },
    {
        "instruction": "",
        "id": "q3412",
        "input": "how to read data using url in python",
        "output": "",
        "rule": [
            "d3412"
        ]
    },
    {
        "instruction": "",
        "id": "q3413",
        "input": "python saving dictonary to file json",
        "output": "",
        "rule": [
            "d3413"
        ]
    },
    {
        "instruction": "",
        "id": "q3414",
        "input": "how to read file in chunks and write in chunks in python",
        "output": "",
        "rule": [
            "d3414"
        ]
    },
    {
        "instruction": "",
        "id": "q3415",
        "input": "python saving figure as svg",
        "output": "",
        "rule": [
            "d3415"
        ]
    },
    {
        "instruction": "",
        "id": "q3416",
        "input": "how to read python error",
        "output": "",
        "rule": [
            "d3416"
        ]
    },
    {
        "instruction": "",
        "id": "q3417",
        "input": "python says list is string",
        "output": "",
        "rule": [
            "d3417"
        ]
    },
    {
        "instruction": "",
        "id": "q3418",
        "input": "how to reindex using python",
        "output": "",
        "rule": [
            "d3418"
        ]
    },
    {
        "instruction": "",
        "id": "q3419",
        "input": "python script that checks and validates folder name",
        "output": "",
        "rule": [
            "d3419"
        ]
    },
    {
        "instruction": "",
        "id": "q3420",
        "input": "how to remove a paranthesis in a string python",
        "output": "",
        "rule": [
            "d3420"
        ]
    },
    {
        "instruction": "",
        "id": "q3421",
        "input": "python sdate to string",
        "output": "",
        "rule": [
            "d3421"
        ]
    },
    {
        "instruction": "",
        "id": "q3422",
        "input": "how to remove full nan columns in python",
        "output": "",
        "rule": [
            "d3422"
        ]
    },
    {
        "instruction": "",
        "id": "q3423",
        "input": "python select every other item in a numpy",
        "output": "",
        "rule": [
            "d3423"
        ]
    },
    {
        "instruction": "",
        "id": "q3424",
        "input": "how to remove key from dictionalry python",
        "output": "",
        "rule": [
            "d3424"
        ]
    },
    {
        "instruction": "",
        "id": "q3425",
        "input": "python select files by pattern",
        "output": "",
        "rule": [
            "d3425"
        ]
    },
    {
        "instruction": "",
        "id": "q3426",
        "input": "how to remove masked items in python array",
        "output": "",
        "rule": [
            "d3426"
        ]
    },
    {
        "instruction": "",
        "id": "q3427",
        "input": "python select index from tkinter listbox",
        "output": "",
        "rule": [
            "d3427"
        ]
    },
    {
        "instruction": "",
        "id": "q3428",
        "input": "how to remove punctuation from a text python",
        "output": "",
        "rule": [
            "d3428"
        ]
    },
    {
        "instruction": "",
        "id": "q3429",
        "input": "python select the index of value metting the criteria in an array",
        "output": "",
        "rule": [
            "d3429"
        ]
    },
    {
        "instruction": "",
        "id": "q3430",
        "input": "how to remove punctuation in python string",
        "output": "",
        "rule": [
            "d3430"
        ]
    },
    {
        "instruction": "",
        "id": "q3431",
        "input": "python select unique elements in list",
        "output": "",
        "rule": [
            "d3431"
        ]
    },
    {
        "instruction": "",
        "id": "q3432",
        "input": "how to remove space in strings in python",
        "output": "",
        "rule": [
            "d3432"
        ]
    },
    {
        "instruction": "",
        "id": "q3433",
        "input": "python send email attach multiple files",
        "output": "",
        "rule": [
            "d3433"
        ]
    },
    {
        "instruction": "",
        "id": "q3434",
        "input": "python send rtsp stream",
        "output": "",
        "rule": [
            "d3434"
        ]
    },
    {
        "instruction": "",
        "id": "q3435",
        "input": "how to render html with data in python django",
        "output": "",
        "rule": [
            "d3435"
        ]
    },
    {
        "instruction": "",
        "id": "q3436",
        "input": "python separate filename and extension",
        "output": "",
        "rule": [
            "d3436"
        ]
    },
    {
        "instruction": "",
        "id": "q3437",
        "input": "how to replace boolean by 1 and 0 in python with if",
        "output": "",
        "rule": [
            "d3437"
        ]
    },
    {
        "instruction": "",
        "id": "q3438",
        "input": "python serial device not configured",
        "output": "",
        "rule": [
            "d3438"
        ]
    },
    {
        "instruction": "",
        "id": "q3439",
        "input": "how to replace decimal points in a float with space in python",
        "output": "",
        "rule": [
            "d3439"
        ]
    },
    {
        "instruction": "",
        "id": "q3440",
        "input": "python series remove if not null",
        "output": "",
        "rule": [
            "d3440"
        ]
    },
    {
        "instruction": "",
        "id": "q3441",
        "input": "how to replace na values in python",
        "output": "",
        "rule": [
            "d3441"
        ]
    },
    {
        "instruction": "",
        "id": "q3442",
        "input": "how to reset the input in python",
        "output": "",
        "rule": [
            "d3442"
        ]
    },
    {
        "instruction": "",
        "id": "q3443",
        "input": "python set (round function to 4 significant numbers",
        "output": "",
        "rule": [
            "d3443"
        ]
    },
    {
        "instruction": "",
        "id": "q3444",
        "input": "how to retrive data in nameobject in python",
        "output": "",
        "rule": [
            "d3444"
        ]
    },
    {
        "instruction": "",
        "id": "q3445",
        "input": "python set a service to a variable",
        "output": "",
        "rule": [
            "d3445"
        ]
    },
    {
        "instruction": "",
        "id": "q3446",
        "input": "how to return bool values in definitons python",
        "output": "",
        "rule": [
            "d3446"
        ]
    },
    {
        "instruction": "",
        "id": "q3447",
        "input": "python set a thread safe flag",
        "output": "",
        "rule": [
            "d3447"
        ]
    },
    {
        "instruction": "",
        "id": "q3448",
        "input": "how to return dots in python",
        "output": "",
        "rule": [
            "d3448"
        ]
    },
    {
        "instruction": "",
        "id": "q3449",
        "input": "python set check if element exist",
        "output": "",
        "rule": [
            "d3449"
        ]
    },
    {
        "instruction": "",
        "id": "q3450",
        "input": "how to return only rows that aren't zero python data frame",
        "output": "",
        "rule": [
            "d3450"
        ]
    },
    {
        "instruction": "",
        "id": "q3451",
        "input": "python set default encoding ansi",
        "output": "",
        "rule": [
            "d3451"
        ]
    },
    {
        "instruction": "",
        "id": "q3452",
        "input": "how to round down float values python array",
        "output": "",
        "rule": [
            "d3452"
        ]
    },
    {
        "instruction": "",
        "id": "q3453",
        "input": "python set default logging opptions",
        "output": "",
        "rule": [
            "d3453"
        ]
    },
    {
        "instruction": "",
        "id": "q3454",
        "input": "how to run multiple processes in python",
        "output": "",
        "rule": [
            "d3454"
        ]
    },
    {
        "instruction": "",
        "id": "q3455",
        "input": "python set delete element",
        "output": "",
        "rule": [
            "d3455"
        ]
    },
    {
        "instruction": "",
        "id": "q3456",
        "input": "how to run python in conjection with java",
        "output": "",
        "rule": [
            "d3456"
        ]
    },
    {
        "instruction": "",
        "id": "q3457",
        "input": "python set domain name",
        "output": "",
        "rule": [
            "d3457"
        ]
    },
    {
        "instruction": "",
        "id": "q3458",
        "input": "how to save a figure as a pdf python",
        "output": "",
        "rule": [
            "d3458"
        ]
    },
    {
        "instruction": "",
        "id": "q3459",
        "input": "python set effective uid",
        "output": "",
        "rule": [
            "d3459"
        ]
    },
    {
        "instruction": "",
        "id": "q3460",
        "input": "how to save html string as html file python",
        "output": "",
        "rule": [
            "d3460"
        ]
    },
    {
        "instruction": "",
        "id": "q3461",
        "input": "python set element exist",
        "output": "",
        "rule": [
            "d3461"
        ]
    },
    {
        "instruction": "",
        "id": "q3462",
        "input": "how to see all methods attributes python",
        "output": "",
        "rule": [
            "d3462"
        ]
    },
    {
        "instruction": "",
        "id": "q3463",
        "input": "python set of lists mutable",
        "output": "",
        "rule": [
            "d3463"
        ]
    },
    {
        "instruction": "",
        "id": "q3464",
        "input": "how to see column names in python of a datframes",
        "output": "",
        "rule": [
            "d3464"
        ]
    },
    {
        "instruction": "",
        "id": "q3465",
        "input": "python set property by introspection",
        "output": "",
        "rule": [
            "d3465"
        ]
    },
    {
        "instruction": "",
        "id": "q3466",
        "input": "how to see if a variable is valid in python",
        "output": "",
        "rule": [
            "d3466"
        ]
    },
    {
        "instruction": "",
        "id": "q3467",
        "input": "python set range of axis",
        "output": "",
        "rule": [
            "d3467"
        ]
    },
    {
        "instruction": "",
        "id": "q3468",
        "input": "how to see the unique value in a list in python",
        "output": "",
        "rule": [
            "d3468"
        ]
    },
    {
        "instruction": "",
        "id": "q3469",
        "input": "python set rate limit",
        "output": "",
        "rule": [
            "d3469"
        ]
    },
    {
        "instruction": "",
        "id": "q3470",
        "input": "how to select last row in python",
        "output": "",
        "rule": [
            "d3470"
        ]
    },
    {
        "instruction": "",
        "id": "q3471",
        "input": "python set remove element",
        "output": "",
        "rule": [
            "d3471"
        ]
    },
    {
        "instruction": "",
        "id": "q3472",
        "input": "how to send a file over ftp python",
        "output": "",
        "rule": [
            "d3472"
        ]
    },
    {
        "instruction": "",
        "id": "q3473",
        "input": "python set request header flask",
        "output": "",
        "rule": [
            "d3473"
        ]
    },
    {
        "instruction": "",
        "id": "q3474",
        "input": "how to send a photo by python telegram bot",
        "output": "",
        "rule": [
            "d3474"
        ]
    },
    {
        "instruction": "",
        "id": "q3475",
        "input": "python set sys stdout encoding",
        "output": "",
        "rule": [
            "d3475"
        ]
    },
    {
        "instruction": "",
        "id": "q3476",
        "input": "how to set an xml parser to ignor errors python",
        "output": "",
        "rule": [
            "d3476"
        ]
    },
    {
        "instruction": "",
        "id": "q3477",
        "input": "python set weekend as workday",
        "output": "",
        "rule": [
            "d3477"
        ]
    },
    {
        "instruction": "",
        "id": "q3478",
        "input": "how to set author in python",
        "output": "",
        "rule": [
            "d3478"
        ]
    },
    {
        "instruction": "",
        "id": "q3479",
        "input": "python set window position",
        "output": "",
        "rule": [
            "d3479"
        ]
    },
    {
        "instruction": "",
        "id": "q3480",
        "input": "how to set constraint in python for input",
        "output": "",
        "rule": [
            "d3480"
        ]
    },
    {
        "instruction": "",
        "id": "q3481",
        "input": "python set y axis to log",
        "output": "",
        "rule": [
            "d3481"
        ]
    },
    {
        "instruction": "",
        "id": "q3482",
        "input": "how to set precision of a number to 2 decimal places in python",
        "output": "",
        "rule": [
            "d3482"
        ]
    },
    {
        "instruction": "",
        "id": "q3483",
        "input": "python set yaxis log",
        "output": "",
        "rule": [
            "d3483"
        ]
    },
    {
        "instruction": "",
        "id": "q3484",
        "input": "how to set text for a subplot of figure in python",
        "output": "",
        "rule": [
            "d3484"
        ]
    },
    {
        "instruction": "",
        "id": "q3485",
        "input": "python setdefault short circuit",
        "output": "",
        "rule": [
            "d3485"
        ]
    },
    {
        "instruction": "",
        "id": "q3486",
        "input": "how to shape a 300 to a 500 array in python",
        "output": "",
        "rule": [
            "d3486"
        ]
    },
    {
        "instruction": "",
        "id": "q3487",
        "input": "python shell code color",
        "output": "",
        "rule": [
            "d3487"
        ]
    },
    {
        "instruction": "",
        "id": "q3488",
        "input": "how to show pixel coordinates of image in python",
        "output": "",
        "rule": [
            "d3488"
        ]
    },
    {
        "instruction": "",
        "id": "q3489",
        "input": "python shortcut for comments",
        "output": "",
        "rule": [
            "d3489"
        ]
    },
    {
        "instruction": "",
        "id": "q3490",
        "input": "how to slice iterables in python",
        "output": "",
        "rule": [
            "d3490"
        ]
    },
    {
        "instruction": "",
        "id": "q3491",
        "input": "python show all variables memory",
        "output": "",
        "rule": [
            "d3491"
        ]
    },
    {
        "instruction": "",
        "id": "q3492",
        "input": "how to slice without slice function python",
        "output": "",
        "rule": [
            "d3492"
        ]
    },
    {
        "instruction": "",
        "id": "q3493",
        "input": "python similarity between two word list counter",
        "output": "",
        "rule": [
            "d3493"
        ]
    },
    {
        "instruction": "",
        "id": "q3494",
        "input": "how to sort a list by last name in python",
        "output": "",
        "rule": [
            "d3494"
        ]
    },
    {
        "instruction": "",
        "id": "q3495",
        "input": "python simple timed cache",
        "output": "",
        "rule": [
            "d3495"
        ]
    },
    {
        "instruction": "",
        "id": "q3496",
        "input": "how to sort a list of filenames in python",
        "output": "",
        "rule": [
            "d3496"
        ]
    },
    {
        "instruction": "",
        "id": "q3497",
        "input": "python sinc interpolate with extrapolate",
        "output": "",
        "rule": [
            "d3497"
        ]
    },
    {
        "instruction": "",
        "id": "q3498",
        "input": "how to sort a list of objects in python",
        "output": "",
        "rule": [
            "d3498"
        ]
    },
    {
        "instruction": "",
        "id": "q3499",
        "input": "python slice not continus",
        "output": "",
        "rule": [
            "d3499"
        ]
    },
    {
        "instruction": "",
        "id": "q3500",
        "input": "how to sort files by name python",
        "output": "",
        "rule": [
            "d3500"
        ]
    },
    {
        "instruction": "",
        "id": "q3501",
        "input": "python slice start end step",
        "output": "",
        "rule": [
            "d3501"
        ]
    },
    {
        "instruction": "",
        "id": "q3502",
        "input": "python slice string get last",
        "output": "",
        "rule": [
            "d3502"
        ]
    },
    {
        "instruction": "",
        "id": "q3503",
        "input": "how to specify stringfield validators errors in python",
        "output": "",
        "rule": [
            "d3503"
        ]
    },
    {
        "instruction": "",
        "id": "q3504",
        "input": "python smooth array window",
        "output": "",
        "rule": [
            "d3504"
        ]
    },
    {
        "instruction": "",
        "id": "q3505",
        "input": "how to specify the legend to be outside of a figure in python",
        "output": "",
        "rule": [
            "d3505"
        ]
    },
    {
        "instruction": "",
        "id": "q3506",
        "input": "python smooth the array",
        "output": "",
        "rule": [
            "d3506"
        ]
    },
    {
        "instruction": "",
        "id": "q3507",
        "input": "how to splice a string dynamically in python",
        "output": "",
        "rule": [
            "d3507"
        ]
    },
    {
        "instruction": "",
        "id": "q3508",
        "input": "python socket address still in use after restarting server",
        "output": "",
        "rule": [
            "d3508"
        ]
    },
    {
        "instruction": "",
        "id": "q3509",
        "input": "how to split a string and recognize spaces python",
        "output": "",
        "rule": [
            "d3509"
        ]
    },
    {
        "instruction": "",
        "id": "q3510",
        "input": "python socket io flask",
        "output": "",
        "rule": [
            "d3510"
        ]
    },
    {
        "instruction": "",
        "id": "q3511",
        "input": "how to split string by number of characters in python",
        "output": "",
        "rule": [
            "d3511"
        ]
    },
    {
        "instruction": "",
        "id": "q3512",
        "input": "python socketio sid room userid",
        "output": "",
        "rule": [
            "d3512"
        ]
    },
    {
        "instruction": "",
        "id": "q3513",
        "input": "how to stop the consol window from closing in python",
        "output": "",
        "rule": [
            "d3513"
        ]
    },
    {
        "instruction": "",
        "id": "q3514",
        "input": "python sort array return indices",
        "output": "",
        "rule": [
            "d3514"
        ]
    },
    {
        "instruction": "",
        "id": "q3515",
        "input": "how to strip caracter from srings in list in python",
        "output": "",
        "rule": [
            "d3515"
        ]
    },
    {
        "instruction": "",
        "id": "q3516",
        "input": "python sort custom key",
        "output": "",
        "rule": [
            "d3516"
        ]
    },
    {
        "instruction": "",
        "id": "q3517",
        "input": "how to substitute variables into sympy python",
        "output": "",
        "rule": [
            "d3517"
        ]
    },
    {
        "instruction": "",
        "id": "q3518",
        "input": "python sort dict iterator",
        "output": "",
        "rule": [
            "d3518"
        ]
    },
    {
        "instruction": "",
        "id": "q3519",
        "input": "how to sum specific column in python",
        "output": "",
        "rule": [
            "d3519"
        ]
    },
    {
        "instruction": "",
        "id": "q3520",
        "input": "python sort filenames numerically",
        "output": "",
        "rule": [
            "d3520"
        ]
    },
    {
        "instruction": "",
        "id": "q3521",
        "input": "how to supress the output of executing shell script in python",
        "output": "",
        "rule": [
            "d3521"
        ]
    },
    {
        "instruction": "",
        "id": "q3522",
        "input": "python sort for files but not folders",
        "output": "",
        "rule": [
            "d3522"
        ]
    },
    {
        "instruction": "",
        "id": "q3523",
        "input": "how to swap lower case with uppercase in python",
        "output": "",
        "rule": [
            "d3523"
        ]
    },
    {
        "instruction": "",
        "id": "q3524",
        "input": "python sort list of names by last name",
        "output": "",
        "rule": [
            "d3524"
        ]
    },
    {
        "instruction": "",
        "id": "q3525",
        "input": "how to take the inverse of a matrix in python",
        "output": "",
        "rule": [
            "d3525"
        ]
    },
    {
        "instruction": "",
        "id": "q3526",
        "input": "python source is not defined",
        "output": "",
        "rule": [
            "d3526"
        ]
    },
    {
        "instruction": "",
        "id": "q3527",
        "input": "how to take the squareroot without squareroot function in python",
        "output": "",
        "rule": [
            "d3527"
        ]
    },
    {
        "instruction": "",
        "id": "q3528",
        "input": "python source, target replace",
        "output": "",
        "rule": [
            "d3528"
        ]
    },
    {
        "instruction": "",
        "id": "q3529",
        "input": "how to tale a 2 d matrix as input in python",
        "output": "",
        "rule": [
            "d3529"
        ]
    },
    {
        "instruction": "",
        "id": "q3530",
        "input": "python sparse array numpy dask",
        "output": "",
        "rule": [
            "d3530"
        ]
    },
    {
        "instruction": "",
        "id": "q3531",
        "input": "how to tell a character is not ascii in python",
        "output": "",
        "rule": [
            "d3531"
        ]
    },
    {
        "instruction": "",
        "id": "q3532",
        "input": "python specify next line",
        "output": "",
        "rule": [
            "d3532"
        ]
    },
    {
        "instruction": "",
        "id": "q3533",
        "input": "how to tell data type string python",
        "output": "",
        "rule": [
            "d3533"
        ]
    },
    {
        "instruction": "",
        "id": "q3534",
        "input": "python sphinx not in path",
        "output": "",
        "rule": [
            "d3534"
        ]
    },
    {
        "instruction": "",
        "id": "q3535",
        "input": "how to tell if file is image python",
        "output": "",
        "rule": [
            "d3535"
        ]
    },
    {
        "instruction": "",
        "id": "q3536",
        "input": "python split array into chunks by two variables",
        "output": "",
        "rule": [
            "d3536"
        ]
    },
    {
        "instruction": "",
        "id": "q3537",
        "input": "how to tell python to move down a line",
        "output": "",
        "rule": [
            "d3537"
        ]
    },
    {
        "instruction": "",
        "id": "q3538",
        "input": "python split sentences into list",
        "output": "",
        "rule": [
            "d3538"
        ]
    },
    {
        "instruction": "",
        "id": "q3539",
        "input": "how to test a image is valid in python",
        "output": "",
        "rule": [
            "d3539"
        ]
    },
    {
        "instruction": "",
        "id": "q3540",
        "input": "python split string based on comma into list and remove new line",
        "output": "",
        "rule": [
            "d3540"
        ]
    },
    {
        "instruction": "",
        "id": "q3541",
        "input": "how to test if a dictionary has a key ? in python",
        "output": "",
        "rule": [
            "d3541"
        ]
    },
    {
        "instruction": "",
        "id": "q3542",
        "input": "python splitlines filter empty line",
        "output": "",
        "rule": [
            "d3542"
        ]
    },
    {
        "instruction": "",
        "id": "q3543",
        "input": "how to tokenize in python without split",
        "output": "",
        "rule": [
            "d3543"
        ]
    },
    {
        "instruction": "",
        "id": "q3544",
        "input": "python spreadstring on multiple lines",
        "output": "",
        "rule": [
            "d3544"
        ]
    },
    {
        "instruction": "",
        "id": "q3545",
        "input": "how to track the number of times a function is called python",
        "output": "",
        "rule": [
            "d3545"
        ]
    },
    {
        "instruction": "",
        "id": "q3546",
        "input": "python spyder how to restart the kernel",
        "output": "",
        "rule": [
            "d3546"
        ]
    },
    {
        "instruction": "",
        "id": "q3547",
        "input": "how to transfer a list to string inpython",
        "output": "",
        "rule": [
            "d3547"
        ]
    },
    {
        "instruction": "",
        "id": "q3548",
        "input": "python spyder kenerl died restarting",
        "output": "",
        "rule": [
            "d3548"
        ]
    },
    {
        "instruction": "",
        "id": "q3549",
        "input": "how to traverse all elements of a 1d numpy array in python",
        "output": "",
        "rule": [
            "d3549"
        ]
    },
    {
        "instruction": "",
        "id": "q3550",
        "input": "python sql results to dict",
        "output": "",
        "rule": [
            "d3550"
        ]
    },
    {
        "instruction": "",
        "id": "q3551",
        "input": "how to turn concantate tuples in python",
        "output": "",
        "rule": [
            "d3551"
        ]
    },
    {
        "instruction": "",
        "id": "q3552",
        "input": "python sqlalchemy how to insert multiple records",
        "output": "",
        "rule": [
            "d3552"
        ]
    },
    {
        "instruction": "",
        "id": "q3553",
        "input": "how to type in a string in python",
        "output": "",
        "rule": [
            "d3553"
        ]
    },
    {
        "instruction": "",
        "id": "q3554",
        "input": "python sqlalchemy ow to get size of resultset",
        "output": "",
        "rule": [
            "d3554"
        ]
    },
    {
        "instruction": "",
        "id": "q3555",
        "input": "how to undo a migration\\ in python",
        "output": "",
        "rule": [
            "d3555"
        ]
    },
    {
        "instruction": "",
        "id": "q3556",
        "input": "python sqlalchemy session drop table",
        "output": "",
        "rule": [
            "d3556"
        ]
    },
    {
        "instruction": "",
        "id": "q3557",
        "input": "how to use compiles c++ libraries in python",
        "output": "",
        "rule": [
            "d3557"
        ]
    },
    {
        "instruction": "",
        "id": "q3558",
        "input": "python sqlite check columnexists",
        "output": "",
        "rule": [
            "d3558"
        ]
    },
    {
        "instruction": "",
        "id": "q3559",
        "input": "how to use conda env in python code",
        "output": "",
        "rule": [
            "d3559"
        ]
    },
    {
        "instruction": "",
        "id": "q3560",
        "input": "python sqlite select into dictionary",
        "output": "",
        "rule": [
            "d3560"
        ]
    },
    {
        "instruction": "",
        "id": "q3561",
        "input": "how to use custom hash function python dictionary",
        "output": "",
        "rule": [
            "d3561"
        ]
    },
    {
        "instruction": "",
        "id": "q3562",
        "input": "python sqlite3 cursor description column type",
        "output": "",
        "rule": [
            "d3562"
        ]
    },
    {
        "instruction": "",
        "id": "q3563",
        "input": "how to use fileinput to replace lines in a file python",
        "output": "",
        "rule": [
            "d3563"
        ]
    },
    {
        "instruction": "",
        "id": "q3564",
        "input": "python sqlite3 list all table name in database",
        "output": "",
        "rule": [
            "d3564"
        ]
    },
    {
        "instruction": "",
        "id": "q3565",
        "input": "how to use how to put elements of a list into a string on python",
        "output": "",
        "rule": [
            "d3565"
        ]
    },
    {
        "instruction": "",
        "id": "q3566",
        "input": "python sshclient to check if directory exists on server",
        "output": "",
        "rule": [
            "d3566"
        ]
    },
    {
        "instruction": "",
        "id": "q3567",
        "input": "how to use isinstance python 3 for tuple",
        "output": "",
        "rule": [
            "d3567"
        ]
    },
    {
        "instruction": "",
        "id": "q3568",
        "input": "python stack a list of figurea",
        "output": "",
        "rule": [
            "d3568"
        ]
    },
    {
        "instruction": "",
        "id": "q3569",
        "input": "how to use list comprehension to return booleans in python",
        "output": "",
        "rule": [
            "d3569"
        ]
    },
    {
        "instruction": "",
        "id": "q3570",
        "input": "python standard deviation not accept float number",
        "output": "",
        "rule": [
            "d3570"
        ]
    },
    {
        "instruction": "",
        "id": "q3571",
        "input": "how to use min and max functions in python",
        "output": "",
        "rule": [
            "d3571"
        ]
    },
    {
        "instruction": "",
        "id": "q3572",
        "input": "python static funciton in c",
        "output": "",
        "rule": [
            "d3572"
        ]
    },
    {
        "instruction": "",
        "id": "q3573",
        "input": "how to use nodes in for loop networkx python",
        "output": "",
        "rule": [
            "d3573"
        ]
    },
    {
        "instruction": "",
        "id": "q3574",
        "input": "python static function calls",
        "output": "",
        "rule": [
            "d3574"
        ]
    },
    {
        "instruction": "",
        "id": "q3575",
        "input": "how to use python 3 interactive mode",
        "output": "",
        "rule": [
            "d3575"
        ]
    },
    {
        "instruction": "",
        "id": "q3576",
        "input": "python static text full path name",
        "output": "",
        "rule": [
            "d3576"
        ]
    },
    {
        "instruction": "",
        "id": "q3577",
        "input": "how to use python to connect redis",
        "output": "",
        "rule": [
            "d3577"
        ]
    },
    {
        "instruction": "",
        "id": "q3578",
        "input": "python staticmethod good or bad",
        "output": "",
        "rule": [
            "d3578"
        ]
    },
    {
        "instruction": "",
        "id": "q3579",
        "input": "how to validate an impput python",
        "output": "",
        "rule": [
            "d3579"
        ]
    },
    {
        "instruction": "",
        "id": "q3580",
        "input": "python staticmethod magic methods",
        "output": "",
        "rule": [
            "d3580"
        ]
    },
    {
        "instruction": "",
        "id": "q3581",
        "input": "how to vectorize a function in python",
        "output": "",
        "rule": [
            "d3581"
        ]
    },
    {
        "instruction": "",
        "id": "q3582",
        "input": "python std deviation of list",
        "output": "",
        "rule": [
            "d3582"
        ]
    },
    {
        "instruction": "",
        "id": "q3583",
        "input": "how to vectorize python",
        "output": "",
        "rule": [
            "d3583"
        ]
    },
    {
        "instruction": "",
        "id": "q3584",
        "input": "python stop restarting kernel",
        "output": "",
        "rule": [
            "d3584"
        ]
    },
    {
        "instruction": "",
        "id": "q3585",
        "input": "how to view columns of a python array",
        "output": "",
        "rule": [
            "d3585"
        ]
    },
    {
        "instruction": "",
        "id": "q3586",
        "input": "python store datetime in json",
        "output": "",
        "rule": [
            "d3586"
        ]
    },
    {
        "instruction": "",
        "id": "q3587",
        "input": "how to view response headers python request",
        "output": "",
        "rule": [
            "d3587"
        ]
    },
    {
        "instruction": "",
        "id": "q3588",
        "input": "python strftime returning string format not datetime",
        "output": "",
        "rule": [
            "d3588"
        ]
    },
    {
        "instruction": "",
        "id": "q3589",
        "input": "how to write a callback function python",
        "output": "",
        "rule": [
            "d3589"
        ]
    },
    {
        "instruction": "",
        "id": "q3590",
        "input": "python string contains one of a list of strings",
        "output": "",
        "rule": [
            "d3590"
        ]
    },
    {
        "instruction": "",
        "id": "q3591",
        "input": "how to write a code in python to load a json file into snowflake",
        "output": "",
        "rule": [
            "d3591"
        ]
    },
    {
        "instruction": "",
        "id": "q3592",
        "input": "python string format *args",
        "output": "",
        "rule": [
            "d3592"
        ]
    },
    {
        "instruction": "",
        "id": "q3593",
        "input": "how to write all output into a file python",
        "output": "",
        "rule": [
            "d3593"
        ]
    },
    {
        "instruction": "",
        "id": "q3594",
        "input": "python string format line wrap",
        "output": "",
        "rule": [
            "d3594"
        ]
    },
    {
        "instruction": "",
        "id": "q3595",
        "input": "how to write config files in python",
        "output": "",
        "rule": [
            "d3595"
        ]
    },
    {
        "instruction": "",
        "id": "q3596",
        "input": "python string format variable precision",
        "output": "",
        "rule": [
            "d3596"
        ]
    },
    {
        "instruction": "",
        "id": "q3597",
        "input": "how to write entropy syntax in python",
        "output": "",
        "rule": [
            "d3597"
        ]
    },
    {
        "instruction": "",
        "id": "q3598",
        "input": "python string match multiple strings",
        "output": "",
        "rule": [
            "d3598"
        ]
    },
    {
        "instruction": "",
        "id": "q3599",
        "input": "how to write print stetements into a file in python",
        "output": "",
        "rule": [
            "d3599"
        ]
    },
    {
        "instruction": "",
        "id": "q3600",
        "input": "python string of list of string",
        "output": "",
        "rule": [
            "d3600"
        ]
    },
    {
        "instruction": "",
        "id": "q3601",
        "input": "how to write single line in two lines in python",
        "output": "",
        "rule": [
            "d3601"
        ]
    },
    {
        "instruction": "",
        "id": "q3602",
        "input": "python string slice overwrite",
        "output": "",
        "rule": [
            "d3602"
        ]
    },
    {
        "instruction": "",
        "id": "q3603",
        "input": "how we get data at the runtime of django api in python",
        "output": "",
        "rule": [
            "d3603"
        ]
    },
    {
        "instruction": "",
        "id": "q3604",
        "input": "python string to list with commas, but strings habve commas",
        "output": "",
        "rule": [
            "d3604"
        ]
    },
    {
        "instruction": "",
        "id": "q3605",
        "input": "howt to make character jump up in python",
        "output": "",
        "rule": [
            "d3605"
        ]
    },
    {
        "instruction": "",
        "id": "q3606",
        "input": "html table python coler nth line",
        "output": "",
        "rule": [
            "d3606"
        ]
    },
    {
        "instruction": "",
        "id": "q3607",
        "input": "python string with no quotes",
        "output": "",
        "rule": [
            "d3607"
        ]
    },
    {
        "instruction": "",
        "id": "q3608",
        "input": "html to text converter python",
        "output": "",
        "rule": [
            "d3608"
        ]
    },
    {
        "instruction": "",
        "id": "q3609",
        "input": "python strip all lines of whitespace",
        "output": "",
        "rule": [
            "d3609"
        ]
    },
    {
        "instruction": "",
        "id": "q3610",
        "input": "human readable string of object python",
        "output": "",
        "rule": [
            "d3610"
        ]
    },
    {
        "instruction": "",
        "id": "q3611",
        "input": "python strip blank space from list",
        "output": "",
        "rule": [
            "d3611"
        ]
    },
    {
        "instruction": "",
        "id": "q3612",
        "input": "icacls python change file permissions",
        "output": "",
        "rule": [
            "d3612"
        ]
    },
    {
        "instruction": "",
        "id": "q3613",
        "input": "python strip trailing new lines from file",
        "output": "",
        "rule": [
            "d3613"
        ]
    },
    {
        "instruction": "",
        "id": "q3614",
        "input": "identifying shapes in an image python",
        "output": "",
        "rule": [
            "d3614"
        ]
    },
    {
        "instruction": "",
        "id": "q3615",
        "input": "if all elements is true python",
        "output": "",
        "rule": [
            "d3615"
        ]
    },
    {
        "instruction": "",
        "id": "q3616",
        "input": "python subplot set the whole title",
        "output": "",
        "rule": [
            "d3616"
        ]
    },
    {
        "instruction": "",
        "id": "q3617",
        "input": "if all letters are in a string how to return in python",
        "output": "",
        "rule": [
            "d3617"
        ]
    },
    {
        "instruction": "",
        "id": "q3618",
        "input": "python subplot y axis label",
        "output": "",
        "rule": [
            "d3618"
        ]
    },
    {
        "instruction": "",
        "id": "q3619",
        "input": "if file exists then replace python",
        "output": "",
        "rule": [
            "d3619"
        ]
    },
    {
        "instruction": "",
        "id": "q3620",
        "input": "python subprocess send input directly to",
        "output": "",
        "rule": [
            "d3620"
        ]
    },
    {
        "instruction": "",
        "id": "q3621",
        "input": "if number is float boolean python",
        "output": "",
        "rule": [
            "d3621"
        ]
    },
    {
        "instruction": "",
        "id": "q3622",
        "input": "python subprocess suppress output to dev null",
        "output": "",
        "rule": [
            "d3622"
        ]
    },
    {
        "instruction": "",
        "id": "q3623",
        "input": "if type is float in python",
        "output": "",
        "rule": [
            "d3623"
        ]
    },
    {
        "instruction": "",
        "id": "q3624",
        "input": "python sum a field in an object",
        "output": "",
        "rule": [
            "d3624"
        ]
    },
    {
        "instruction": "",
        "id": "q3625",
        "input": "illegal target for variable annotation python",
        "output": "",
        "rule": [
            "d3625"
        ]
    },
    {
        "instruction": "",
        "id": "q3626",
        "input": "python swap rows in a matrix",
        "output": "",
        "rule": [
            "d3626"
        ]
    },
    {
        "instruction": "",
        "id": "q3627",
        "input": "image data preprocessing in python",
        "output": "",
        "rule": [
            "d3627"
        ]
    },
    {
        "instruction": "",
        "id": "q3628",
        "input": "python switching places in list with duplicates",
        "output": "",
        "rule": [
            "d3628"
        ]
    },
    {
        "instruction": "",
        "id": "q3629",
        "input": "image scale function in python",
        "output": "",
        "rule": [
            "d3629"
        ]
    },
    {
        "instruction": "",
        "id": "q3630",
        "input": "python sys args nammed",
        "output": "",
        "rule": [
            "d3630"
        ]
    },
    {
        "instruction": "",
        "id": "q3631",
        "input": "implement hash function in python",
        "output": "",
        "rule": [
            "d3631"
        ]
    },
    {
        "instruction": "",
        "id": "q3632",
        "input": "python sysarg pass variables",
        "output": "",
        "rule": [
            "d3632"
        ]
    },
    {
        "instruction": "",
        "id": "q3633",
        "input": "in python how to check if 3 sets are equal",
        "output": "",
        "rule": [
            "d3633"
        ]
    },
    {
        "instruction": "",
        "id": "q3634",
        "input": "python table printer answer",
        "output": "",
        "rule": [
            "d3634"
        ]
    },
    {
        "instruction": "",
        "id": "q3635",
        "input": "in python how to check the number is int or char",
        "output": "",
        "rule": [
            "d3635"
        ]
    },
    {
        "instruction": "",
        "id": "q3636",
        "input": "python take seconds from a timedelta",
        "output": "",
        "rule": [
            "d3636"
        ]
    },
    {
        "instruction": "",
        "id": "q3637",
        "input": "in python is a a string or a number",
        "output": "",
        "rule": [
            "d3637"
        ]
    },
    {
        "instruction": "",
        "id": "q3638",
        "input": "python taking a strind of sentences into seperate lists",
        "output": "",
        "rule": [
            "d3638"
        ]
    },
    {
        "instruction": "",
        "id": "q3639",
        "input": "in python not returing the collection list in mongo db",
        "output": "",
        "rule": [
            "d3639"
        ]
    },
    {
        "instruction": "",
        "id": "q3640",
        "input": "python tell if a line intersects a surface",
        "output": "",
        "rule": [
            "d3640"
        ]
    },
    {
        "instruction": "",
        "id": "q3641",
        "input": "in python pad with zero",
        "output": "",
        "rule": [
            "d3641"
        ]
    },
    {
        "instruction": "",
        "id": "q3642",
        "input": "python temporarily diable logging",
        "output": "",
        "rule": [
            "d3642"
        ]
    },
    {
        "instruction": "",
        "id": "q3643",
        "input": "in python shell command how to go to next",
        "output": "",
        "rule": [
            "d3643"
        ]
    },
    {
        "instruction": "",
        "id": "q3644",
        "input": "python tensorflow dataset length",
        "output": "",
        "rule": [
            "d3644"
        ]
    },
    {
        "instruction": "",
        "id": "q3645",
        "input": "in python write a program that averages length of the words in a sentence",
        "output": "",
        "rule": [
            "d3645"
        ]
    },
    {
        "instruction": "",
        "id": "q3646",
        "input": "python tensors of dimensions 2x3",
        "output": "",
        "rule": [
            "d3646"
        ]
    },
    {
        "instruction": "",
        "id": "q3647",
        "input": "increment the given date if it is saturday or sunday python",
        "output": "",
        "rule": [
            "d3647"
        ]
    },
    {
        "instruction": "",
        "id": "q3648",
        "input": "python test array for complex type",
        "output": "",
        "rule": [
            "d3648"
        ]
    },
    {
        "instruction": "",
        "id": "q3649",
        "input": "indententition in python is spaces",
        "output": "",
        "rule": [
            "d3649"
        ]
    },
    {
        "instruction": "",
        "id": "q3650",
        "input": "python test assert type",
        "output": "",
        "rule": [
            "d3650"
        ]
    },
    {
        "instruction": "",
        "id": "q3651",
        "input": "index matching tuple, python",
        "output": "",
        "rule": [
            "d3651"
        ]
    },
    {
        "instruction": "",
        "id": "q3652",
        "input": "python test if an object is iterable",
        "output": "",
        "rule": [
            "d3652"
        ]
    },
    {
        "instruction": "",
        "id": "q3653",
        "input": "index of a elemtn in a list in python",
        "output": "",
        "rule": [
            "d3653"
        ]
    },
    {
        "instruction": "",
        "id": "q3654",
        "input": "python test if file is read only",
        "output": "",
        "rule": [
            "d3654"
        ]
    },
    {
        "instruction": "",
        "id": "q3655",
        "input": "index of minimum element in array in python",
        "output": "",
        "rule": [
            "d3655"
        ]
    },
    {
        "instruction": "",
        "id": "q3656",
        "input": "python test if string prefix",
        "output": "",
        "rule": [
            "d3656"
        ]
    },
    {
        "instruction": "",
        "id": "q3657",
        "input": "indices of a matrix python",
        "output": "",
        "rule": [
            "d3657"
        ]
    },
    {
        "instruction": "",
        "id": "q3658",
        "input": "python testing requests mock",
        "output": "",
        "rule": [
            "d3658"
        ]
    },
    {
        "instruction": "",
        "id": "q3659",
        "input": "inner join equivalent python",
        "output": "",
        "rule": [
            "d3659"
        ]
    },
    {
        "instruction": "",
        "id": "q3660",
        "input": "python texture rendering using pyopengl",
        "output": "",
        "rule": [
            "d3660"
        ]
    },
    {
        "instruction": "",
        "id": "q3661",
        "input": "inserting an image as a background in python",
        "output": "",
        "rule": [
            "d3661"
        ]
    },
    {
        "instruction": "",
        "id": "q3662",
        "input": "python that finds 25th, 50th and 75th percentiles",
        "output": "",
        "rule": [
            "d3662"
        ]
    },
    {
        "instruction": "",
        "id": "q3663",
        "input": "int to string function python",
        "output": "",
        "rule": [
            "d3663"
        ]
    },
    {
        "instruction": "",
        "id": "q3664",
        "input": "python the event loop is already running",
        "output": "",
        "rule": [
            "d3664"
        ]
    },
    {
        "instruction": "",
        "id": "q3665",
        "input": "integer into date, python",
        "output": "",
        "rule": [
            "d3665"
        ]
    },
    {
        "instruction": "",
        "id": "q3666",
        "input": "python the last day of the quarter",
        "output": "",
        "rule": [
            "d3666"
        ]
    },
    {
        "instruction": "",
        "id": "q3667",
        "input": "interpolate 2d matrix python",
        "output": "",
        "rule": [
            "d3667"
        ]
    },
    {
        "instruction": "",
        "id": "q3668",
        "input": "python thread running before start called",
        "output": "",
        "rule": [
            "d3668"
        ]
    },
    {
        "instruction": "",
        "id": "q3669",
        "input": "invalid character in identifier except python",
        "output": "",
        "rule": [
            "d3669"
        ]
    },
    {
        "instruction": "",
        "id": "q3670",
        "input": "python thread safe lock",
        "output": "",
        "rule": [
            "d3670"
        ]
    },
    {
        "instruction": "",
        "id": "q3671",
        "input": "invalid shape (3, 454, 1810) for image data python",
        "output": "",
        "rule": [
            "d3671"
        ]
    },
    {
        "instruction": "",
        "id": "q3672",
        "input": "python threading hangs on join",
        "output": "",
        "rule": [
            "d3672"
        ]
    },
    {
        "instruction": "",
        "id": "q3673",
        "input": "invalid syntax for a while loop in python 3 idle",
        "output": "",
        "rule": [
            "d3673"
        ]
    },
    {
        "instruction": "",
        "id": "q3674",
        "input": "python time format to minutes",
        "output": "",
        "rule": [
            "d3674"
        ]
    },
    {
        "instruction": "",
        "id": "q3675",
        "input": "invert key value in dictionary python",
        "output": "",
        "rule": [
            "d3675"
        ]
    },
    {
        "instruction": "",
        "id": "q3676",
        "input": "python timestamp string for filename",
        "output": "",
        "rule": [
            "d3676"
        ]
    },
    {
        "instruction": "",
        "id": "q3677",
        "input": "ironpython engine set std output",
        "output": "",
        "rule": [
            "d3677"
        ]
    },
    {
        "instruction": "",
        "id": "q3678",
        "input": "python timezone localize astimezone",
        "output": "",
        "rule": [
            "d3678"
        ]
    },
    {
        "instruction": "",
        "id": "q3679",
        "input": "is an array the same as a list in python",
        "output": "",
        "rule": [
            "d3679"
        ]
    },
    {
        "instruction": "",
        "id": "q3680",
        "input": "python timezone offset uct",
        "output": "",
        "rule": [
            "d3680"
        ]
    },
    {
        "instruction": "",
        "id": "q3681",
        "input": "is an object in python hashable",
        "output": "",
        "rule": [
            "d3681"
        ]
    },
    {
        "instruction": "",
        "id": "q3682",
        "input": "python tk text widget current cursor",
        "output": "",
        "rule": [
            "d3682"
        ]
    },
    {
        "instruction": "",
        "id": "q3683",
        "input": "is ther a way to lowercase a string in a list in python",
        "output": "",
        "rule": [
            "d3683"
        ]
    },
    {
        "instruction": "",
        "id": "q3684",
        "input": "python tkinter canvas scroll",
        "output": "",
        "rule": [
            "d3684"
        ]
    },
    {
        "instruction": "",
        "id": "q3685",
        "input": "is there a python function to plot a gaussian",
        "output": "",
        "rule": [
            "d3685"
        ]
    },
    {
        "instruction": "",
        "id": "q3686",
        "input": "python tkinter draw and clear",
        "output": "",
        "rule": [
            "d3686"
        ]
    },
    {
        "instruction": "",
        "id": "q3687",
        "input": "is there any predefined function to delete the duplicates in a list in python",
        "output": "",
        "rule": [
            "d3687"
        ]
    },
    {
        "instruction": "",
        "id": "q3688",
        "input": "python tkinter how to make a scrollbar update",
        "output": "",
        "rule": [
            "d3688"
        ]
    },
    {
        "instruction": "",
        "id": "q3689",
        "input": "iso timestamp format python",
        "output": "",
        "rule": [
            "d3689"
        ]
    },
    {
        "instruction": "",
        "id": "q3690",
        "input": "python to check if file is empty or not",
        "output": "",
        "rule": [
            "d3690"
        ]
    },
    {
        "instruction": "",
        "id": "q3691",
        "input": "issues running interact function in python",
        "output": "",
        "rule": [
            "d3691"
        ]
    },
    {
        "instruction": "",
        "id": "q3692",
        "input": "python to scala convertor",
        "output": "",
        "rule": [
            "d3692"
        ]
    },
    {
        "instruction": "",
        "id": "q3693",
        "input": "iterate folder in current folder python",
        "output": "",
        "rule": [
            "d3693"
        ]
    },
    {
        "instruction": "",
        "id": "q3694",
        "input": "python to see if file is not empty",
        "output": "",
        "rule": [
            "d3694"
        ]
    },
    {
        "instruction": "",
        "id": "q3695",
        "input": "jinja set template value based on python variable",
        "output": "",
        "rule": [
            "d3695"
        ]
    },
    {
        "instruction": "",
        "id": "q3696",
        "input": "python tokenize an input file",
        "output": "",
        "rule": [
            "d3696"
        ]
    },
    {
        "instruction": "",
        "id": "q3697",
        "input": "jinja2 insert page break python",
        "output": "",
        "rule": [
            "d3697"
        ]
    },
    {
        "instruction": "",
        "id": "q3698",
        "input": "python tokenize string by spaces",
        "output": "",
        "rule": [
            "d3698"
        ]
    },
    {
        "instruction": "",
        "id": "q3699",
        "input": "jow to write contents of a variable into a file python",
        "output": "",
        "rule": [
            "d3699"
        ]
    },
    {
        "instruction": "",
        "id": "q3700",
        "input": "python train 3d convnet diffent shape",
        "output": "",
        "rule": [
            "d3700"
        ]
    },
    {
        "instruction": "",
        "id": "q3701",
        "input": "json string of dictionaty to dictionary type in python",
        "output": "",
        "rule": [
            "d3701"
        ]
    },
    {
        "instruction": "",
        "id": "q3702",
        "input": "python transfer character to lowercase",
        "output": "",
        "rule": [
            "d3702"
        ]
    },
    {
        "instruction": "",
        "id": "q3703",
        "input": "json to protobuf in python",
        "output": "",
        "rule": [
            "d3703"
        ]
    },
    {
        "instruction": "",
        "id": "q3704",
        "input": "python transform time using timezone",
        "output": "",
        "rule": [
            "d3704"
        ]
    },
    {
        "instruction": "",
        "id": "q3705",
        "input": "judge two vector anticlockwise python",
        "output": "",
        "rule": [
            "d3705"
        ]
    },
    {
        "instruction": "",
        "id": "q3706",
        "input": "python try cast int list",
        "output": "",
        "rule": [
            "d3706"
        ]
    },
    {
        "instruction": "",
        "id": "q3707",
        "input": "jump to next one loop python",
        "output": "",
        "rule": [
            "d3707"
        ]
    },
    {
        "instruction": "",
        "id": "q3708",
        "input": "python try catch reverse dns lookup socket",
        "output": "",
        "rule": [
            "d3708"
        ]
    },
    {
        "instruction": "",
        "id": "q3709",
        "input": "kill python program linux so finally block called",
        "output": "",
        "rule": [
            "d3709"
        ]
    },
    {
        "instruction": "",
        "id": "q3710",
        "input": "python ttk treeview with scrollbar",
        "output": "",
        "rule": [
            "d3710"
        ]
    },
    {
        "instruction": "",
        "id": "q3711",
        "input": "killing python multiprocessing process",
        "output": "",
        "rule": [
            "d3711"
        ]
    },
    {
        "instruction": "",
        "id": "q3712",
        "input": "python turn dict into yaml",
        "output": "",
        "rule": [
            "d3712"
        ]
    },
    {
        "instruction": "",
        "id": "q3713",
        "input": "know all methods in an object in python",
        "output": "",
        "rule": [
            "d3713"
        ]
    },
    {
        "instruction": "",
        "id": "q3714",
        "input": "python turtle how to change position",
        "output": "",
        "rule": [
            "d3714"
        ]
    },
    {
        "instruction": "",
        "id": "q3715",
        "input": "l2 norm of matrix python",
        "output": "",
        "rule": [
            "d3715"
        ]
    },
    {
        "instruction": "",
        "id": "q3716",
        "input": "python typehint with default",
        "output": "",
        "rule": [
            "d3716"
        ]
    },
    {
        "instruction": "",
        "id": "q3717",
        "input": "lambda python global variable scope",
        "output": "",
        "rule": [
            "d3717"
        ]
    },
    {
        "instruction": "",
        "id": "q3718",
        "input": "python uid not found 996",
        "output": "",
        "rule": [
            "d3718"
        ]
    },
    {
        "instruction": "",
        "id": "q3719",
        "input": "last page redirects on first page python scrapping",
        "output": "",
        "rule": [
            "d3719"
        ]
    },
    {
        "instruction": "",
        "id": "q3720",
        "input": "python underline transform to camel",
        "output": "",
        "rule": [
            "d3720"
        ]
    },
    {
        "instruction": "",
        "id": "q3721",
        "input": "left mouse click code in python",
        "output": "",
        "rule": [
            "d3721"
        ]
    },
    {
        "instruction": "",
        "id": "q3722",
        "input": "python unhashable type define hash",
        "output": "",
        "rule": [
            "d3722"
        ]
    },
    {
        "instruction": "",
        "id": "q3723",
        "input": "lenght of a vector in python",
        "output": "",
        "rule": [
            "d3723"
        ]
    },
    {
        "instruction": "",
        "id": "q3724",
        "input": "python unit test current environment",
        "output": "",
        "rule": [
            "d3724"
        ]
    },
    {
        "instruction": "",
        "id": "q3725",
        "input": "line feed in python text files",
        "output": "",
        "rule": [
            "d3725"
        ]
    },
    {
        "instruction": "",
        "id": "q3726",
        "input": "python unittest code coverage report",
        "output": "",
        "rule": [
            "d3726"
        ]
    },
    {
        "instruction": "",
        "id": "q3727",
        "input": "line match return the line python",
        "output": "",
        "rule": [
            "d3727"
        ]
    },
    {
        "instruction": "",
        "id": "q3728",
        "input": "python unittest destroy object",
        "output": "",
        "rule": [
            "d3728"
        ]
    },
    {
        "instruction": "",
        "id": "q3729",
        "input": "linear regression logarithmic scale python",
        "output": "",
        "rule": [
            "d3729"
        ]
    },
    {
        "instruction": "",
        "id": "q3730",
        "input": "python unsupported operand types for",
        "output": "",
        "rule": [
            "d3730"
        ]
    },
    {
        "instruction": "",
        "id": "q3731",
        "input": "linux python ioctl sioart",
        "output": "",
        "rule": [
            "d3731"
        ]
    },
    {
        "instruction": "",
        "id": "q3732",
        "input": "python update dict only if the key not exists",
        "output": "",
        "rule": [
            "d3732"
        ]
    },
    {
        "instruction": "",
        "id": "q3733",
        "input": "list sqlite table in python",
        "output": "",
        "rule": [
            "d3733"
        ]
    },
    {
        "instruction": "",
        "id": "q3734",
        "input": "python update docstring while inheretance",
        "output": "",
        "rule": [
            "d3734"
        ]
    },
    {
        "instruction": "",
        "id": "q3735",
        "input": "list string python remove commas",
        "output": "",
        "rule": [
            "d3735"
        ]
    },
    {
        "instruction": "",
        "id": "q3736",
        "input": "python update index after removing an item dictionary",
        "output": "",
        "rule": [
            "d3736"
        ]
    },
    {
        "instruction": "",
        "id": "q3737",
        "input": "lmdb python get all keys",
        "output": "",
        "rule": [
            "d3737"
        ]
    },
    {
        "instruction": "",
        "id": "q3738",
        "input": "python upper and lower bound",
        "output": "",
        "rule": [
            "d3738"
        ]
    },
    {
        "instruction": "",
        "id": "q3739",
        "input": "load image using python",
        "output": "",
        "rule": [
            "d3739"
        ]
    },
    {
        "instruction": "",
        "id": "q3740",
        "input": "python url decode dict",
        "output": "",
        "rule": [
            "d3740"
        ]
    },
    {
        "instruction": "",
        "id": "q3741",
        "input": "load in pickled python file",
        "output": "",
        "rule": [
            "d3741"
        ]
    },
    {
        "instruction": "",
        "id": "q3742",
        "input": "python urllib2 unable to get boundary for multipart",
        "output": "",
        "rule": [
            "d3742"
        ]
    },
    {
        "instruction": "",
        "id": "q3743",
        "input": "load rds data into python",
        "output": "",
        "rule": [
            "d3743"
        ]
    },
    {
        "instruction": "",
        "id": "q3744",
        "input": "python usb device object",
        "output": "",
        "rule": [
            "d3744"
        ]
    },
    {
        "instruction": "",
        "id": "q3745",
        "input": "loading a json url in python",
        "output": "",
        "rule": [
            "d3745"
        ]
    },
    {
        "instruction": "",
        "id": "q3746",
        "input": "python use function return as if condition",
        "output": "",
        "rule": [
            "d3746"
        ]
    },
    {
        "instruction": "",
        "id": "q3747",
        "input": "locate the index of a substring in a string python",
        "output": "",
        "rule": [
            "d3747"
        ]
    },
    {
        "instruction": "",
        "id": "q3748",
        "input": "python ustr to normal string",
        "output": "",
        "rule": [
            "d3748"
        ]
    },
    {
        "instruction": "",
        "id": "q3749",
        "input": "log gamma function python",
        "output": "",
        "rule": [
            "d3749"
        ]
    },
    {
        "instruction": "",
        "id": "q3750",
        "input": "python uuid no dashes",
        "output": "",
        "rule": [
            "d3750"
        ]
    },
    {
        "instruction": "",
        "id": "q3751",
        "input": "log normal random distribution in python",
        "output": "",
        "rule": [
            "d3751"
        ]
    },
    {
        "instruction": "",
        "id": "q3752",
        "input": "python value else default",
        "output": "",
        "rule": [
            "d3752"
        ]
    },
    {
        "instruction": "",
        "id": "q3753",
        "input": "log normalize distribution python",
        "output": "",
        "rule": [
            "d3753"
        ]
    },
    {
        "instruction": "",
        "id": "q3754",
        "input": "python value on gaussian function",
        "output": "",
        "rule": [
            "d3754"
        ]
    },
    {
        "instruction": "",
        "id": "q3755",
        "input": "log server rfc python",
        "output": "",
        "rule": [
            "d3755"
        ]
    },
    {
        "instruction": "",
        "id": "q3756",
        "input": "python values to bins",
        "output": "",
        "rule": [
            "d3756"
        ]
    },
    {
        "instruction": "",
        "id": "q3757",
        "input": "logarithm neperien with python",
        "output": "",
        "rule": [
            "d3757"
        ]
    },
    {
        "instruction": "",
        "id": "q3758",
        "input": "python vector inner product",
        "output": "",
        "rule": [
            "d3758"
        ]
    },
    {
        "instruction": "",
        "id": "q3759",
        "input": "logging python close log file",
        "output": "",
        "rule": [
            "d3759"
        ]
    },
    {
        "instruction": "",
        "id": "q3760",
        "input": "python vector normalize stackoverflow",
        "output": "",
        "rule": [
            "d3760"
        ]
    },
    {
        "instruction": "",
        "id": "q3761",
        "input": "mac file permission denied python",
        "output": "",
        "rule": [
            "d3761"
        ]
    },
    {
        "instruction": "",
        "id": "q3762",
        "input": "python vector normalize vectors",
        "output": "",
        "rule": [
            "d3762"
        ]
    },
    {
        "instruction": "",
        "id": "q3763",
        "input": "make map function for iteration through python",
        "output": "",
        "rule": [
            "d3763"
        ]
    },
    {
        "instruction": "",
        "id": "q3764",
        "input": "python vlc media player detect finished playing",
        "output": "",
        "rule": [
            "d3764"
        ]
    },
    {
        "instruction": "",
        "id": "q3765",
        "input": "make nan values zero in python",
        "output": "",
        "rule": [
            "d3765"
        ]
    },
    {
        "instruction": "",
        "id": "q3766",
        "input": "python weighted average of moving window",
        "output": "",
        "rule": [
            "d3766"
        ]
    },
    {
        "instruction": "",
        "id": "q3767",
        "input": "make python dictionary from list of strings",
        "output": "",
        "rule": [
            "d3767"
        ]
    },
    {
        "instruction": "",
        "id": "q3768",
        "input": "python win32api get handle to process",
        "output": "",
        "rule": [
            "d3768"
        ]
    },
    {
        "instruction": "",
        "id": "q3769",
        "input": "make regex for a string in python",
        "output": "",
        "rule": [
            "d3769"
        ]
    },
    {
        "instruction": "",
        "id": "q3770",
        "input": "python win32api get mouse position",
        "output": "",
        "rule": [
            "d3770"
        ]
    },
    {
        "instruction": "",
        "id": "q3771",
        "input": "make text comment in python",
        "output": "",
        "rule": [
            "d3771"
        ]
    },
    {
        "instruction": "",
        "id": "q3772",
        "input": "python windows kill process by pid",
        "output": "",
        "rule": [
            "d3772"
        ]
    },
    {
        "instruction": "",
        "id": "q3773",
        "input": "python windows programming closing parent process without closing child",
        "output": "",
        "rule": [
            "d3773"
        ]
    },
    {
        "instruction": "",
        "id": "q3774",
        "input": "managing file caching python",
        "output": "",
        "rule": [
            "d3774"
        ]
    },
    {
        "instruction": "",
        "id": "q3775",
        "input": "python words with highest tfidf",
        "output": "",
        "rule": [
            "d3775"
        ]
    },
    {
        "instruction": "",
        "id": "q3776",
        "input": "manually close request connection python",
        "output": "",
        "rule": [
            "d3776"
        ]
    },
    {
        "instruction": "",
        "id": "q3777",
        "input": "python wrap function with try catch dynamically",
        "output": "",
        "rule": [
            "d3777"
        ]
    },
    {
        "instruction": "",
        "id": "q3778",
        "input": "map accept multiple integer in the same line python",
        "output": "",
        "rule": [
            "d3778"
        ]
    },
    {
        "instruction": "",
        "id": "q3779",
        "input": "python wrapper function cast",
        "output": "",
        "rule": [
            "d3779"
        ]
    },
    {
        "instruction": "",
        "id": "q3780",
        "input": "map pool python chunksize",
        "output": "",
        "rule": [
            "d3780"
        ]
    },
    {
        "instruction": "",
        "id": "q3781",
        "input": "python write a string to a file",
        "output": "",
        "rule": [
            "d3781"
        ]
    },
    {
        "instruction": "",
        "id": "q3782",
        "input": "matching diconary value with key python",
        "output": "",
        "rule": [
            "d3782"
        ]
    },
    {
        "instruction": "",
        "id": "q3783",
        "input": "python write csv to matrix",
        "output": "",
        "rule": [
            "d3783"
        ]
    },
    {
        "instruction": "",
        "id": "q3784",
        "input": "matrix inverse in python symbolic",
        "output": "",
        "rule": [
            "d3784"
        ]
    },
    {
        "instruction": "",
        "id": "q3785",
        "input": "python write file ansi",
        "output": "",
        "rule": [
            "d3785"
        ]
    },
    {
        "instruction": "",
        "id": "q3786",
        "input": "max length of a line of code in python",
        "output": "",
        "rule": [
            "d3786"
        ]
    },
    {
        "instruction": "",
        "id": "q3787",
        "input": "python write one line last line",
        "output": "",
        "rule": [
            "d3787"
        ]
    },
    {
        "instruction": "",
        "id": "q3788",
        "input": "micropython howto print traceback message",
        "output": "",
        "rule": [
            "d3788"
        ]
    },
    {
        "instruction": "",
        "id": "q3789",
        "input": "python write pid file",
        "output": "",
        "rule": [
            "d3789"
        ]
    },
    {
        "instruction": "",
        "id": "q3790",
        "input": "min max of random integers python",
        "output": "",
        "rule": [
            "d3790"
        ]
    },
    {
        "instruction": "",
        "id": "q3791",
        "input": "python write to subprocess stdin",
        "output": "",
        "rule": [
            "d3791"
        ]
    },
    {
        "instruction": "",
        "id": "q3792",
        "input": "min of array function in python",
        "output": "",
        "rule": [
            "d3792"
        ]
    },
    {
        "instruction": "",
        "id": "q3793",
        "input": "python writing a chart to another file",
        "output": "",
        "rule": [
            "d3793"
        ]
    },
    {
        "instruction": "",
        "id": "q3794",
        "input": "mitmproxy add upstream proxy in python",
        "output": "",
        "rule": [
            "d3794"
        ]
    },
    {
        "instruction": "",
        "id": "q3795",
        "input": "python xml delete all elements containing",
        "output": "",
        "rule": [
            "d3795"
        ]
    },
    {
        "instruction": "",
        "id": "q3796",
        "input": "mock a function wrapper python",
        "output": "",
        "rule": [
            "d3796"
        ]
    },
    {
        "instruction": "",
        "id": "q3797",
        "input": "python xml get each child text",
        "output": "",
        "rule": [
            "d3797"
        ]
    },
    {
        "instruction": "",
        "id": "q3798",
        "input": "model accuracy calculation python",
        "output": "",
        "rule": [
            "d3798"
        ]
    },
    {
        "instruction": "",
        "id": "q3799",
        "input": "python xrange start at 1",
        "output": "",
        "rule": [
            "d3799"
        ]
    },
    {
        "instruction": "",
        "id": "q3800",
        "input": "mogrify in python and bulk update in python",
        "output": "",
        "rule": [
            "d3800"
        ]
    },
    {
        "instruction": "",
        "id": "q3801",
        "input": "python yaml read data from file",
        "output": "",
        "rule": [
            "d3801"
        ]
    },
    {
        "instruction": "",
        "id": "q3802",
        "input": "month from a datetime in python",
        "output": "",
        "rule": [
            "d3802"
        ]
    },
    {
        "instruction": "",
        "id": "q3803",
        "input": "python yield certain amount",
        "output": "",
        "rule": [
            "d3803"
        ]
    },
    {
        "instruction": "",
        "id": "q3804",
        "input": "most common value for a key of a dictionary of lists python",
        "output": "",
        "rule": [
            "d3804"
        ]
    },
    {
        "instruction": "",
        "id": "q3805",
        "input": "python zmq non blocking",
        "output": "",
        "rule": [
            "d3805"
        ]
    },
    {
        "instruction": "",
        "id": "q3806",
        "input": "most common values in all the keys of the dictionary python",
        "output": "",
        "rule": [
            "d3806"
        ]
    },
    {
        "instruction": "",
        "id": "q3807",
        "input": "python, check iterable type",
        "output": "",
        "rule": [
            "d3807"
        ]
    },
    {
        "instruction": "",
        "id": "q3808",
        "input": "mouse cursor marker and python and x, y coordinates",
        "output": "",
        "rule": [
            "d3808"
        ]
    },
    {
        "instruction": "",
        "id": "q3809",
        "input": "python, extract date only from datetime data frame",
        "output": "",
        "rule": [
            "d3809"
        ]
    },
    {
        "instruction": "",
        "id": "q3810",
        "input": "multiline string wrapping python",
        "output": "",
        "rule": [
            "d3810"
        ]
    },
    {
        "instruction": "",
        "id": "q3811",
        "input": "python, get current thread id",
        "output": "",
        "rule": [
            "d3811"
        ]
    },
    {
        "instruction": "",
        "id": "q3812",
        "input": "multiple variables in except python",
        "output": "",
        "rule": [
            "d3812"
        ]
    },
    {
        "instruction": "",
        "id": "q3813",
        "input": "python2 can i delete test dir",
        "output": "",
        "rule": [
            "d3813"
        ]
    },
    {
        "instruction": "",
        "id": "q3814",
        "input": "multiply a tesnor by rotation matrix python",
        "output": "",
        "rule": [
            "d3814"
        ]
    },
    {
        "instruction": "",
        "id": "q3815",
        "input": "python3 checking for list or tuple",
        "output": "",
        "rule": [
            "d3815"
        ]
    },
    {
        "instruction": "",
        "id": "q3816",
        "input": "multivariate normal distribution in python",
        "output": "",
        "rule": [
            "d3816"
        ]
    },
    {
        "instruction": "",
        "id": "q3817",
        "input": "python3 create vtk array with 3d array",
        "output": "",
        "rule": [
            "d3817"
        ]
    },
    {
        "instruction": "",
        "id": "q3818",
        "input": "mutiple conditionals in lambda python",
        "output": "",
        "rule": [
            "d3818"
        ]
    },
    {
        "instruction": "",
        "id": "q3819",
        "input": "python3 determine content type by file extention name",
        "output": "",
        "rule": [
            "d3819"
        ]
    },
    {
        "instruction": "",
        "id": "q3820",
        "input": "name 'cuda' is not defined python",
        "output": "",
        "rule": [
            "d3820"
        ]
    },
    {
        "instruction": "",
        "id": "q3821",
        "input": "python3 dict object has no attribute iteritems",
        "output": "",
        "rule": [
            "d3821"
        ]
    },
    {
        "instruction": "",
        "id": "q3822",
        "input": "ndarray python to string",
        "output": "",
        "rule": [
            "d3822"
        ]
    },
    {
        "instruction": "",
        "id": "q3823",
        "input": "python3 flask static js",
        "output": "",
        "rule": [
            "d3823"
        ]
    },
    {
        "instruction": "",
        "id": "q3824",
        "input": "no attribute 'capitalize' python",
        "output": "",
        "rule": [
            "d3824"
        ]
    },
    {
        "instruction": "",
        "id": "q3825",
        "input": "python3 genrator random int with specific length",
        "output": "",
        "rule": [
            "d3825"
        ]
    },
    {
        "instruction": "",
        "id": "q3826",
        "input": "normal distribution 0,1 in python",
        "output": "",
        "rule": [
            "d3826"
        ]
    },
    {
        "instruction": "",
        "id": "q3827",
        "input": "python3 get current thread id",
        "output": "",
        "rule": [
            "d3827"
        ]
    },
    {
        "instruction": "",
        "id": "q3828",
        "input": "normal distribution between 0 and 1 python",
        "output": "",
        "rule": [
            "d3828"
        ]
    },
    {
        "instruction": "",
        "id": "q3829",
        "input": "python3 has no attribute 'setdefaultencoding'",
        "output": "",
        "rule": [
            "d3829"
        ]
    },
    {
        "instruction": "",
        "id": "q3830",
        "input": "normalise each row of matrix in python",
        "output": "",
        "rule": [
            "d3830"
        ]
    },
    {
        "instruction": "",
        "id": "q3831",
        "input": "python3 how to check root permission",
        "output": "",
        "rule": [
            "d3831"
        ]
    },
    {
        "instruction": "",
        "id": "q3832",
        "input": "normalize data frame python",
        "output": "",
        "rule": [
            "d3832"
        ]
    },
    {
        "instruction": "",
        "id": "q3833",
        "input": "python3 measure memory of an object",
        "output": "",
        "rule": [
            "d3833"
        ]
    },
    {
        "instruction": "",
        "id": "q3834",
        "input": "normalize data from datafram python",
        "output": "",
        "rule": [
            "d3834"
        ]
    },
    {
        "instruction": "",
        "id": "q3835",
        "input": "python3 must construct a qapplication before a qwidget",
        "output": "",
        "rule": [
            "d3835"
        ]
    },
    {
        "instruction": "",
        "id": "q3836",
        "input": "normalize the array columnwise python",
        "output": "",
        "rule": [
            "d3836"
        ]
    },
    {
        "instruction": "",
        "id": "q3837",
        "input": "python3 pymysql column name",
        "output": "",
        "rule": [
            "d3837"
        ]
    },
    {
        "instruction": "",
        "id": "q3838",
        "input": "normalized one dimentional array in python",
        "output": "",
        "rule": [
            "d3838"
        ]
    },
    {
        "instruction": "",
        "id": "q3839",
        "input": "python3 stdin read bytes line by line",
        "output": "",
        "rule": [
            "d3839"
        ]
    },
    {
        "instruction": "",
        "id": "q3840",
        "input": "number of non white space characters python",
        "output": "",
        "rule": [
            "d3840"
        ]
    },
    {
        "instruction": "",
        "id": "q3841",
        "input": "python3 str object not callable",
        "output": "",
        "rule": [
            "d3841"
        ]
    },
    {
        "instruction": "",
        "id": "q3842",
        "input": "number of objects in python",
        "output": "",
        "rule": [
            "d3842"
        ]
    },
    {
        "instruction": "",
        "id": "q3843",
        "input": "python3 string default encoding",
        "output": "",
        "rule": [
            "d3843"
        ]
    },
    {
        "instruction": "",
        "id": "q3844",
        "input": "number of rows in python data frame",
        "output": "",
        "rule": [
            "d3844"
        ]
    },
    {
        "instruction": "",
        "id": "q3845",
        "input": "python3 string to bytes encode decode",
        "output": "",
        "rule": [
            "d3845"
        ]
    },
    {
        "instruction": "",
        "id": "q3846",
        "input": "number of unique in list python",
        "output": "",
        "rule": [
            "d3846"
        ]
    },
    {
        "instruction": "",
        "id": "q3847",
        "input": "pythonic way to create a multiline string",
        "output": "",
        "rule": [
            "d3847"
        ]
    },
    {
        "instruction": "",
        "id": "q3848",
        "input": "oauth2 to access twitter python",
        "output": "",
        "rule": [
            "d3848"
        ]
    },
    {
        "instruction": "",
        "id": "q3849",
        "input": "query string contents python",
        "output": "",
        "rule": [
            "d3849"
        ]
    },
    {
        "instruction": "",
        "id": "q3850",
        "input": "online python to html5 convuter",
        "output": "",
        "rule": [
            "d3850"
        ]
    },
    {
        "instruction": "",
        "id": "q3851",
        "input": "quit interactive mode python",
        "output": "",
        "rule": [
            "d3851"
        ]
    },
    {
        "instruction": "",
        "id": "q3852",
        "input": "only accept certain input python 3",
        "output": "",
        "rule": [
            "d3852"
        ]
    },
    {
        "instruction": "",
        "id": "q3853",
        "input": "quitting the existing python session",
        "output": "",
        "rule": [
            "d3853"
        ]
    },
    {
        "instruction": "",
        "id": "q3854",
        "input": "only get hours minutes and seconds datetime python",
        "output": "",
        "rule": [
            "d3854"
        ]
    },
    {
        "instruction": "",
        "id": "q3855",
        "input": "r prexfix in python strings",
        "output": "",
        "rule": [
            "d3855"
        ]
    },
    {
        "instruction": "",
        "id": "q3856",
        "input": "open a file with specified character encoding python",
        "output": "",
        "rule": [
            "d3856"
        ]
    },
    {
        "instruction": "",
        "id": "q3857",
        "input": "random lower case letter python",
        "output": "",
        "rule": [
            "d3857"
        ]
    },
    {
        "instruction": "",
        "id": "q3858",
        "input": "open image from image path in python",
        "output": "",
        "rule": [
            "d3858"
        ]
    },
    {
        "instruction": "",
        "id": "q3859",
        "input": "random pick in set python",
        "output": "",
        "rule": [
            "d3859"
        ]
    },
    {
        "instruction": "",
        "id": "q3860",
        "input": "open serial port windows python",
        "output": "",
        "rule": [
            "d3860"
        ]
    },
    {
        "instruction": "",
        "id": "q3861",
        "input": "range of array python last index",
        "output": "",
        "rule": [
            "d3861"
        ]
    },
    {
        "instruction": "",
        "id": "q3862",
        "input": "opencv python normalize intensity of 2d image",
        "output": "",
        "rule": [
            "d3862"
        ]
    },
    {
        "instruction": "",
        "id": "q3863",
        "input": "rdd custom reducebykey function python",
        "output": "",
        "rule": [
            "d3863"
        ]
    },
    {
        "instruction": "",
        "id": "q3864",
        "input": "opencv python normalize intensity of imageon",
        "output": "",
        "rule": [
            "d3864"
        ]
    },
    {
        "instruction": "",
        "id": "q3865",
        "input": "read a file and encode to base64 python",
        "output": "",
        "rule": [
            "d3865"
        ]
    },
    {
        "instruction": "",
        "id": "q3866",
        "input": "opencv python read image from url",
        "output": "",
        "rule": [
            "d3866"
        ]
    },
    {
        "instruction": "",
        "id": "q3867",
        "input": "read area of screen in python",
        "output": "",
        "rule": [
            "d3867"
        ]
    },
    {
        "instruction": "",
        "id": "q3868",
        "input": "opencv rotate image python 90 degree",
        "output": "",
        "rule": [
            "d3868"
        ]
    },
    {
        "instruction": "",
        "id": "q3869",
        "input": "read from a file using numpy in python 3",
        "output": "",
        "rule": [
            "d3869"
        ]
    },
    {
        "instruction": "",
        "id": "q3870",
        "input": "opening a serial port in python",
        "output": "",
        "rule": [
            "d3870"
        ]
    },
    {
        "instruction": "",
        "id": "q3871",
        "input": "read from text file python username and password",
        "output": "",
        "rule": [
            "d3871"
        ]
    },
    {
        "instruction": "",
        "id": "q3872",
        "input": "optimize gaussian from curve fit python",
        "output": "",
        "rule": [
            "d3872"
        ]
    },
    {
        "instruction": "",
        "id": "q3873",
        "input": "read last line of the file in python",
        "output": "",
        "rule": [
            "d3873"
        ]
    },
    {
        "instruction": "",
        "id": "q3874",
        "input": "padding image into a fix size python",
        "output": "",
        "rule": [
            "d3874"
        ]
    },
    {
        "instruction": "",
        "id": "q3875",
        "input": "read multiple json objects from a json file python",
        "output": "",
        "rule": [
            "d3875"
        ]
    },
    {
        "instruction": "",
        "id": "q3876",
        "input": "padding image on all sides python",
        "output": "",
        "rule": [
            "d3876"
        ]
    },
    {
        "instruction": "",
        "id": "q3877",
        "input": "read not advancing to next character python",
        "output": "",
        "rule": [
            "d3877"
        ]
    },
    {
        "instruction": "",
        "id": "q3878",
        "input": "parsing sql queries with python",
        "output": "",
        "rule": [
            "d3878"
        ]
    },
    {
        "instruction": "",
        "id": "q3879",
        "input": "read text file using lambda python",
        "output": "",
        "rule": [
            "d3879"
        ]
    },
    {
        "instruction": "",
        "id": "q3880",
        "input": "pass a list to format python",
        "output": "",
        "rule": [
            "d3880"
        ]
    },
    {
        "instruction": "",
        "id": "q3881",
        "input": "read until end of file in python",
        "output": "",
        "rule": [
            "d3881"
        ]
    },
    {
        "instruction": "",
        "id": "q3882",
        "input": "pass python instance method to a function",
        "output": "",
        "rule": [
            "d3882"
        ]
    },
    {
        "instruction": "",
        "id": "q3883",
        "input": "read very small numbers in 16bit python",
        "output": "",
        "rule": [
            "d3883"
        ]
    },
    {
        "instruction": "",
        "id": "q3884",
        "input": "passing a default in python",
        "output": "",
        "rule": [
            "d3884"
        ]
    },
    {
        "instruction": "",
        "id": "q3885",
        "input": "read wave files python",
        "output": "",
        "rule": [
            "d3885"
        ]
    },
    {
        "instruction": "",
        "id": "q3886",
        "input": "passing post data from a form template in python flask",
        "output": "",
        "rule": [
            "d3886"
        ]
    },
    {
        "instruction": "",
        "id": "q3887",
        "input": "reading a specified amount of bytes from a file python",
        "output": "",
        "rule": [
            "d3887"
        ]
    },
    {
        "instruction": "",
        "id": "q3888",
        "input": "password checking in python using regular expression",
        "output": "",
        "rule": [
            "d3888"
        ]
    },
    {
        "instruction": "",
        "id": "q3889",
        "input": "reading a text from stdin in python",
        "output": "",
        "rule": [
            "d3889"
        ]
    },
    {
        "instruction": "",
        "id": "q3890",
        "input": "password validation using regex python",
        "output": "",
        "rule": [
            "d3890"
        ]
    },
    {
        "instruction": "",
        "id": "q3891",
        "input": "reading text from a url in python",
        "output": "",
        "rule": [
            "d3891"
        ]
    },
    {
        "instruction": "",
        "id": "q3892",
        "input": "pdfminer python slice page",
        "output": "",
        "rule": [
            "d3892"
        ]
    },
    {
        "instruction": "",
        "id": "q3893",
        "input": "record mouse position with python",
        "output": "",
        "rule": [
            "d3893"
        ]
    },
    {
        "instruction": "",
        "id": "q3894",
        "input": "pearson correlation python numpy",
        "output": "",
        "rule": [
            "d3894"
        ]
    },
    {
        "instruction": "",
        "id": "q3895",
        "input": "recursively flattening nested lists python",
        "output": "",
        "rule": [
            "d3895"
        ]
    },
    {
        "instruction": "",
        "id": "q3896",
        "input": "plot the magnitude of the fft including frequnecy in python",
        "output": "",
        "rule": [
            "d3896"
        ]
    },
    {
        "instruction": "",
        "id": "q3897",
        "input": "redis get keys python",
        "output": "",
        "rule": [
            "d3897"
        ]
    },
    {
        "instruction": "",
        "id": "q3898",
        "input": "pop a dict out of the list python",
        "output": "",
        "rule": [
            "d3898"
        ]
    },
    {
        "instruction": "",
        "id": "q3899",
        "input": "redis python how to release a connection back to pool",
        "output": "",
        "rule": [
            "d3899"
        ]
    },
    {
        "instruction": "",
        "id": "q3900",
        "input": "pop several key from dictionnary python",
        "output": "",
        "rule": [
            "d3900"
        ]
    },
    {
        "instruction": "",
        "id": "q3901",
        "input": "redis python uri example",
        "output": "",
        "rule": [
            "d3901"
        ]
    },
    {
        "instruction": "",
        "id": "q3902",
        "input": "posixpath to str python",
        "output": "",
        "rule": [
            "d3902"
        ]
    },
    {
        "instruction": "",
        "id": "q3903",
        "input": "redisclient set not working python",
        "output": "",
        "rule": [
            "d3903"
        ]
    },
    {
        "instruction": "",
        "id": "q3904",
        "input": "prefix notation parsing in python",
        "output": "",
        "rule": [
            "d3904"
        ]
    },
    {
        "instruction": "",
        "id": "q3905",
        "input": "reduce image sizes using python",
        "output": "",
        "rule": [
            "d3905"
        ]
    },
    {
        "instruction": "",
        "id": "q3906",
        "input": "preserve ordering yaml load python",
        "output": "",
        "rule": [
            "d3906"
        ]
    },
    {
        "instruction": "",
        "id": "q3907",
        "input": "regex in python remove comments",
        "output": "",
        "rule": [
            "d3907"
        ]
    },
    {
        "instruction": "",
        "id": "q3908",
        "input": "pretty format python dictionary",
        "output": "",
        "rule": [
            "d3908"
        ]
    },
    {
        "instruction": "",
        "id": "q3909",
        "input": "relational table to python dict",
        "output": "",
        "rule": [
            "d3909"
        ]
    },
    {
        "instruction": "",
        "id": "q3910",
        "input": "print a file to a printer command in python",
        "output": "",
        "rule": [
            "d3910"
        ]
    },
    {
        "instruction": "",
        "id": "q3911",
        "input": "print alll variables in object python",
        "output": "",
        "rule": [
            "d3911"
        ]
    },
    {
        "instruction": "",
        "id": "q3912",
        "input": "remove after last underscore python",
        "output": "",
        "rule": [
            "d3912"
        ]
    },
    {
        "instruction": "",
        "id": "q3913",
        "input": "print first value of a series python",
        "output": "",
        "rule": [
            "d3913"
        ]
    },
    {
        "instruction": "",
        "id": "q3914",
        "input": "remove all letters in string python",
        "output": "",
        "rule": [
            "d3914"
        ]
    },
    {
        "instruction": "",
        "id": "q3915",
        "input": "print in python foreground coloyr",
        "output": "",
        "rule": [
            "d3915"
        ]
    },
    {
        "instruction": "",
        "id": "q3916",
        "input": "remove all punctuations in python string",
        "output": "",
        "rule": [
            "d3916"
        ]
    },
    {
        "instruction": "",
        "id": "q3917",
        "input": "print text with color python",
        "output": "",
        "rule": [
            "d3917"
        ]
    },
    {
        "instruction": "",
        "id": "q3918",
        "input": "remove comma from list python",
        "output": "",
        "rule": [
            "d3918"
        ]
    },
    {
        "instruction": "",
        "id": "q3919",
        "input": "print value inside tensor python",
        "output": "",
        "rule": [
            "d3919"
        ]
    },
    {
        "instruction": "",
        "id": "q3920",
        "input": "remove duplicates in python list (using sets)",
        "output": "",
        "rule": [
            "d3920"
        ]
    },
    {
        "instruction": "",
        "id": "q3921",
        "input": "printing table in python from csv file",
        "output": "",
        "rule": [
            "d3921"
        ]
    },
    {
        "instruction": "",
        "id": "q3922",
        "input": "remove files in current directory with filename containing specific letters python",
        "output": "",
        "rule": [
            "d3922"
        ]
    },
    {
        "instruction": "",
        "id": "q3923",
        "input": "protobuf deserialize bytes python",
        "output": "",
        "rule": [
            "d3923"
        ]
    },
    {
        "instruction": "",
        "id": "q3924",
        "input": "remove forward whitespace python",
        "output": "",
        "rule": [
            "d3924"
        ]
    },
    {
        "instruction": "",
        "id": "q3925",
        "input": "protobuf msg to python object",
        "output": "",
        "rule": [
            "d3925"
        ]
    },
    {
        "instruction": "",
        "id": "q3926",
        "input": "remove item from list python pop",
        "output": "",
        "rule": [
            "d3926"
        ]
    },
    {
        "instruction": "",
        "id": "q3927",
        "input": "protobuf python struct to json",
        "output": "",
        "rule": [
            "d3927"
        ]
    },
    {
        "instruction": "",
        "id": "q3928",
        "input": "remove keys from a python dictionary that have a certain value",
        "output": "",
        "rule": [
            "d3928"
        ]
    },
    {
        "instruction": "",
        "id": "q3929",
        "input": "python 'datetime' has no attribute 'today'",
        "output": "",
        "rule": [
            "d3929"
        ]
    },
    {
        "instruction": "",
        "id": "q3930",
        "input": "remove letters from word in python",
        "output": "",
        "rule": [
            "d3930"
        ]
    },
    {
        "instruction": "",
        "id": "q3931",
        "input": "python 2 rounding up",
        "output": "",
        "rule": [
            "d3931"
        ]
    },
    {
        "instruction": "",
        "id": "q3932",
        "input": "remove list function python iteratively",
        "output": "",
        "rule": [
            "d3932"
        ]
    },
    {
        "instruction": "",
        "id": "q3933",
        "input": "python 3 check if object is an string",
        "output": "",
        "rule": [
            "d3933"
        ]
    },
    {
        "instruction": "",
        "id": "q3934",
        "input": "remove namespace from xml in python",
        "output": "",
        "rule": [
            "d3934"
        ]
    },
    {
        "instruction": "",
        "id": "q3935",
        "input": "python 3 filter object",
        "output": "",
        "rule": [
            "d3935"
        ]
    },
    {
        "instruction": "",
        "id": "q3936",
        "input": "remove new line whitespace in python",
        "output": "",
        "rule": [
            "d3936"
        ]
    },
    {
        "instruction": "",
        "id": "q3937",
        "input": "python 3 get the sunday of that day",
        "output": "",
        "rule": [
            "d3937"
        ]
    },
    {
        "instruction": "",
        "id": "q3938",
        "input": "remove none value from dictonary python\\",
        "output": "",
        "rule": [
            "d3938"
        ]
    },
    {
        "instruction": "",
        "id": "q3939",
        "input": "python 3 hex to signed int",
        "output": "",
        "rule": [
            "d3939"
        ]
    },
    {
        "instruction": "",
        "id": "q3940",
        "input": "remove repeated objects python",
        "output": "",
        "rule": [
            "d3940"
        ]
    },
    {
        "instruction": "",
        "id": "q3941",
        "input": "python 3 how to calculate execution time of function",
        "output": "",
        "rule": [
            "d3941"
        ]
    },
    {
        "instruction": "",
        "id": "q3942",
        "input": "remove rows with duplicated index names python data frame",
        "output": "",
        "rule": [
            "d3942"
        ]
    },
    {
        "instruction": "",
        "id": "q3943",
        "input": "python 3 how to load dynamically loaded extension",
        "output": "",
        "rule": [
            "d3943"
        ]
    },
    {
        "instruction": "",
        "id": "q3944",
        "input": "remove space after word python",
        "output": "",
        "rule": [
            "d3944"
        ]
    },
    {
        "instruction": "",
        "id": "q3945",
        "input": "python 3 if type is str",
        "output": "",
        "rule": [
            "d3945"
        ]
    },
    {
        "instruction": "",
        "id": "q3946",
        "input": "remove variable from globals python",
        "output": "",
        "rule": [
            "d3946"
        ]
    },
    {
        "instruction": "",
        "id": "q3947",
        "input": "python 3 input function",
        "output": "",
        "rule": [
            "d3947"
        ]
    },
    {
        "instruction": "",
        "id": "q3948",
        "input": "removing image in pdf with python",
        "output": "",
        "rule": [
            "d3948"
        ]
    },
    {
        "instruction": "",
        "id": "q3949",
        "input": "python 3 join or fstring",
        "output": "",
        "rule": [
            "d3949"
        ]
    },
    {
        "instruction": "",
        "id": "q3950",
        "input": "removing punctuation from a text python",
        "output": "",
        "rule": [
            "d3950"
        ]
    },
    {
        "instruction": "",
        "id": "q3951",
        "input": "python 3 listbox scrollbar scroll set",
        "output": "",
        "rule": [
            "d3951"
        ]
    },
    {
        "instruction": "",
        "id": "q3952",
        "input": "render a grayscale image python",
        "output": "",
        "rule": [
            "d3952"
        ]
    },
    {
        "instruction": "",
        "id": "q3953",
        "input": "python 3 localize timezone",
        "output": "",
        "rule": [
            "d3953"
        ]
    },
    {
        "instruction": "",
        "id": "q3954",
        "input": "replace empty cells in datframe as nans in python",
        "output": "",
        "rule": [
            "d3954"
        ]
    },
    {
        "instruction": "",
        "id": "q3955",
        "input": "python 3 queue see all elements of a queue",
        "output": "",
        "rule": [
            "d3955"
        ]
    },
    {
        "instruction": "",
        "id": "q3956",
        "input": "replace none value with blank string in python 3",
        "output": "",
        "rule": [
            "d3956"
        ]
    },
    {
        "instruction": "",
        "id": "q3957",
        "input": "python 3 recursivity how to clear the memory",
        "output": "",
        "rule": [
            "d3957"
        ]
    },
    {
        "instruction": "",
        "id": "q3958",
        "input": "replace paragraphs docx python",
        "output": "",
        "rule": [
            "d3958"
        ]
    },
    {
        "instruction": "",
        "id": "q3959",
        "input": "python 3 remove all letters from start of a string that are not",
        "output": "",
        "rule": [
            "d3959"
        ]
    },
    {
        "instruction": "",
        "id": "q3960",
        "input": "replace raise function with keyword python",
        "output": "",
        "rule": [
            "d3960"
        ]
    },
    {
        "instruction": "",
        "id": "q3961",
        "input": "python 3 send text message",
        "output": "",
        "rule": [
            "d3961"
        ]
    },
    {
        "instruction": "",
        "id": "q3962",
        "input": "replace vowels in python with an underscore",
        "output": "",
        "rule": [
            "d3962"
        ]
    },
    {
        "instruction": "",
        "id": "q3963",
        "input": "python 3 traceback object tb",
        "output": "",
        "rule": [
            "d3963"
        ]
    },
    {
        "instruction": "",
        "id": "q3964",
        "input": "replacing letters with underscores python",
        "output": "",
        "rule": [
            "d3964"
        ]
    },
    {
        "instruction": "",
        "id": "q3965",
        "input": "python 35 multiprocessing pool object",
        "output": "",
        "rule": [
            "d3965"
        ]
    },
    {
        "instruction": "",
        "id": "q3966",
        "input": "requests python mime type",
        "output": "",
        "rule": [
            "d3966"
        ]
    },
    {
        "instruction": "",
        "id": "q3967",
        "input": "python 3d coordinate data structure",
        "output": "",
        "rule": [
            "d3967"
        ]
    },
    {
        "instruction": "",
        "id": "q3968",
        "input": "resize 3 dimensional image zoom out numpy python",
        "output": "",
        "rule": [
            "d3968"
        ]
    },
    {
        "instruction": "",
        "id": "q3969",
        "input": "python access a dict by key with default",
        "output": "",
        "rule": [
            "d3969"
        ]
    },
    {
        "instruction": "",
        "id": "q3970",
        "input": "retreieve column name for minimum value in row python",
        "output": "",
        "rule": [
            "d3970"
        ]
    },
    {
        "instruction": "",
        "id": "q3971",
        "input": "python add 2 weeks onto date",
        "output": "",
        "rule": [
            "d3971"
        ]
    },
    {
        "instruction": "",
        "id": "q3972",
        "input": "retrieving data from apis with python",
        "output": "",
        "rule": [
            "d3972"
        ]
    },
    {
        "instruction": "",
        "id": "q3973",
        "input": "python add a default to dictionary",
        "output": "",
        "rule": [
            "d3973"
        ]
    },
    {
        "instruction": "",
        "id": "q3974",
        "input": "return float from string python",
        "output": "",
        "rule": [
            "d3974"
        ]
    },
    {
        "instruction": "",
        "id": "q3975",
        "input": "python add a variable to self",
        "output": "",
        "rule": [
            "d3975"
        ]
    },
    {
        "instruction": "",
        "id": "q3976",
        "input": "return hash key as a list python",
        "output": "",
        "rule": [
            "d3976"
        ]
    },
    {
        "instruction": "",
        "id": "q3977",
        "input": "python add attributes mock",
        "output": "",
        "rule": [
            "d3977"
        ]
    },
    {
        "instruction": "",
        "id": "q3978",
        "input": "return just key of counter object python",
        "output": "",
        "rule": [
            "d3978"
        ]
    },
    {
        "instruction": "",
        "id": "q3979",
        "input": "python add attributes to existing dict object",
        "output": "",
        "rule": [
            "d3979"
        ]
    },
    {
        "instruction": "",
        "id": "q3980",
        "input": "return number of non whitespace characters in string python",
        "output": "",
        "rule": [
            "d3980"
        ]
    },
    {
        "instruction": "",
        "id": "q3981",
        "input": "python add behavier to call method on an object",
        "output": "",
        "rule": [
            "d3981"
        ]
    },
    {
        "instruction": "",
        "id": "q3982",
        "input": "return rows with one field not null in python",
        "output": "",
        "rule": [
            "d3982"
        ]
    },
    {
        "instruction": "",
        "id": "q3983",
        "input": "python add blank column to dataframae",
        "output": "",
        "rule": [
            "d3983"
        ]
    },
    {
        "instruction": "",
        "id": "q3984",
        "input": "return the identifier of a variable python",
        "output": "",
        "rule": [
            "d3984"
        ]
    },
    {
        "instruction": "",
        "id": "q3985",
        "input": "python add dynamic property to object",
        "output": "",
        "rule": [
            "d3985"
        ]
    },
    {
        "instruction": "",
        "id": "q3986",
        "input": "reverse dimension of a matrix in python",
        "output": "",
        "rule": [
            "d3986"
        ]
    },
    {
        "instruction": "",
        "id": "q3987",
        "input": "python add json to request",
        "output": "",
        "rule": [
            "d3987"
        ]
    },
    {
        "instruction": "",
        "id": "q3988",
        "input": "rewriting array pointer in c language with python ctypes",
        "output": "",
        "rule": [
            "d3988"
        ]
    },
    {
        "instruction": "",
        "id": "q3989",
        "input": "python add parser as subparser",
        "output": "",
        "rule": [
            "d3989"
        ]
    },
    {
        "instruction": "",
        "id": "q3990",
        "input": "rgba to gray python cv2",
        "output": "",
        "rule": [
            "d3990"
        ]
    },
    {
        "instruction": "",
        "id": "q3991",
        "input": "python add text to an image and save",
        "output": "",
        "rule": [
            "d3991"
        ]
    },
    {
        "instruction": "",
        "id": "q3992",
        "input": "roc auc curve in python",
        "output": "",
        "rule": [
            "d3992"
        ]
    },
    {
        "instruction": "",
        "id": "q3993",
        "input": "python and how to create a datetime from a date",
        "output": "",
        "rule": [
            "d3993"
        ]
    },
    {
        "instruction": "",
        "id": "q3994",
        "input": "rotate an array to its left in python",
        "output": "",
        "rule": [
            "d3994"
        ]
    },
    {
        "instruction": "",
        "id": "q3995",
        "input": "python angle between two vectors",
        "output": "",
        "rule": [
            "d3995"
        ]
    },
    {
        "instruction": "",
        "id": "q3996",
        "input": "rotate matrix in place python",
        "output": "",
        "rule": [
            "d3996"
        ]
    },
    {
        "instruction": "",
        "id": "q3997",
        "input": "python api paged responses",
        "output": "",
        "rule": [
            "d3997"
        ]
    },
    {
        "instruction": "",
        "id": "q3998",
        "input": "round to significant figures in python",
        "output": "",
        "rule": [
            "d3998"
        ]
    },
    {
        "instruction": "",
        "id": "q3999",
        "input": "python api requestion bearer token",
        "output": "",
        "rule": [
            "d3999"
        ]
    },
    {
        "instruction": "",
        "id": "q4000",
        "input": "run flake8 python powershell",
        "output": "",
        "rule": [
            "d4000"
        ]
    },
    {
        "instruction": "",
        "id": "q4001",
        "input": "python api to get definitions for words",
        "output": "",
        "rule": [
            "d4001"
        ]
    },
    {
        "instruction": "",
        "id": "q4002",
        "input": "run python file supervisorctl",
        "output": "",
        "rule": [
            "d4002"
        ]
    },
    {
        "instruction": "",
        "id": "q4003",
        "input": "python apply function on colulmn",
        "output": "",
        "rule": [
            "d4003"
        ]
    },
    {
        "instruction": "",
        "id": "q4004",
        "input": "run the command at background and return the result python",
        "output": "",
        "rule": [
            "d4004"
        ]
    },
    {
        "instruction": "",
        "id": "q4005",
        "input": "python apply function to an array parallel",
        "output": "",
        "rule": [
            "d4005"
        ]
    },
    {
        "instruction": "",
        "id": "q4006",
        "input": "running a bash script in python",
        "output": "",
        "rule": [
            "d4006"
        ]
    },
    {
        "instruction": "",
        "id": "q4007",
        "input": "python apply lisp function",
        "output": "",
        "rule": [
            "d4007"
        ]
    },
    {
        "instruction": "",
        "id": "q4008",
        "input": "running average of 2d array python",
        "output": "",
        "rule": [
            "d4008"
        ]
    },
    {
        "instruction": "",
        "id": "q4009",
        "input": "python apply rotation matrix to image",
        "output": "",
        "rule": [
            "d4009"
        ]
    },
    {
        "instruction": "",
        "id": "q4010",
        "input": "running jar dependancy in python",
        "output": "",
        "rule": [
            "d4010"
        ]
    },
    {
        "instruction": "",
        "id": "q4011",
        "input": "python applying functions to tables",
        "output": "",
        "rule": [
            "d4011"
        ]
    },
    {
        "instruction": "",
        "id": "q4012",
        "input": "running python unit tests command line",
        "output": "",
        "rule": [
            "d4012"
        ]
    },
    {
        "instruction": "",
        "id": "q4013",
        "input": "python appmetrics print for every query",
        "output": "",
        "rule": [
            "d4013"
        ]
    },
    {
        "instruction": "",
        "id": "q4014",
        "input": "running python unit tests from command line",
        "output": "",
        "rule": [
            "d4014"
        ]
    },
    {
        "instruction": "",
        "id": "q4015",
        "input": "python arg parse valid values",
        "output": "",
        "rule": [
            "d4015"
        ]
    },
    {
        "instruction": "",
        "id": "q4016",
        "input": "sagemaker put files to s3 python",
        "output": "",
        "rule": [
            "d4016"
        ]
    },
    {
        "instruction": "",
        "id": "q4017",
        "input": "python argparse add subparser",
        "output": "",
        "rule": [
            "d4017"
        ]
    },
    {
        "instruction": "",
        "id": "q4018",
        "input": "save and load keras model python",
        "output": "",
        "rule": [
            "d4018"
        ]
    },
    {
        "instruction": "",
        "id": "q4019",
        "input": "python argparse change usage",
        "output": "",
        "rule": [
            "d4019"
        ]
    },
    {
        "instruction": "",
        "id": "q4020",
        "input": "save array as column in python",
        "output": "",
        "rule": [
            "d4020"
        ]
    },
    {
        "instruction": "",
        "id": "q4021",
        "input": "python argparse json file",
        "output": "",
        "rule": [
            "d4021"
        ]
    },
    {
        "instruction": "",
        "id": "q4022",
        "input": "save as json file in python",
        "output": "",
        "rule": [
            "d4022"
        ]
    },
    {
        "instruction": "",
        "id": "q4023",
        "input": "python argparse make subparser repeatable",
        "output": "",
        "rule": [
            "d4023"
        ]
    },
    {
        "instruction": "",
        "id": "q4024",
        "input": "save json dict to file in python",
        "output": "",
        "rule": [
            "d4024"
        ]
    },
    {
        "instruction": "",
        "id": "q4025",
        "input": "python array \\ list what kind of variaable",
        "output": "",
        "rule": [
            "d4025"
        ]
    },
    {
        "instruction": "",
        "id": "q4026",
        "input": "save rds file in python rpy2",
        "output": "",
        "rule": [
            "d4026"
        ]
    },
    {
        "instruction": "",
        "id": "q4027",
        "input": "python array get last n element",
        "output": "",
        "rule": [
            "d4027"
        ]
    },
    {
        "instruction": "",
        "id": "q4028",
        "input": "saving file on ftp using python",
        "output": "",
        "rule": [
            "d4028"
        ]
    },
    {
        "instruction": "",
        "id": "q4029",
        "input": "python array to nparray",
        "output": "",
        "rule": [
            "d4029"
        ]
    },
    {
        "instruction": "",
        "id": "q4030",
        "input": "second most recent file python",
        "output": "",
        "rule": [
            "d4030"
        ]
    },
    {
        "instruction": "",
        "id": "q4031",
        "input": "python arrow now minus four days",
        "output": "",
        "rule": [
            "d4031"
        ]
    },
    {
        "instruction": "",
        "id": "q4032",
        "input": "select a dimension of tensor python",
        "output": "",
        "rule": [
            "d4032"
        ]
    },
    {
        "instruction": "",
        "id": "q4033",
        "input": "python assert all equal",
        "output": "",
        "rule": [
            "d4033"
        ]
    },
    {
        "instruction": "",
        "id": "q4034",
        "input": "send termination call for python",
        "output": "",
        "rule": [
            "d4034"
        ]
    },
    {
        "instruction": "",
        "id": "q4035",
        "input": "python assert list any",
        "output": "",
        "rule": [
            "d4035"
        ]
    },
    {
        "instruction": "",
        "id": "q4036",
        "input": "send value in html back to python jinja2",
        "output": "",
        "rule": [
            "d4036"
        ]
    },
    {
        "instruction": "",
        "id": "q4037",
        "input": "python assert not raised",
        "output": "",
        "rule": [
            "d4037"
        ]
    },
    {
        "instruction": "",
        "id": "q4038",
        "input": "sending muultiple emails in python",
        "output": "",
        "rule": [
            "d4038"
        ]
    },
    {
        "instruction": "",
        "id": "q4039",
        "input": "python assert two lists have same size",
        "output": "",
        "rule": [
            "d4039"
        ]
    },
    {
        "instruction": "",
        "id": "q4040",
        "input": "sentinel loops python max and min numbers",
        "output": "",
        "rule": [
            "d4040"
        ]
    },
    {
        "instruction": "",
        "id": "q4041",
        "input": "python async call back on loop close",
        "output": "",
        "rule": [
            "d4041"
        ]
    },
    {
        "instruction": "",
        "id": "q4042",
        "input": "separate a tsv in python",
        "output": "",
        "rule": [
            "d4042"
        ]
    },
    {
        "instruction": "",
        "id": "q4043",
        "input": "python async there is no current event loop in thread",
        "output": "",
        "rule": [
            "d4043"
        ]
    },
    {
        "instruction": "",
        "id": "q4044",
        "input": "set copy clipboard to variable python",
        "output": "",
        "rule": [
            "d4044"
        ]
    },
    {
        "instruction": "",
        "id": "q4045",
        "input": "python asyncio wrap function",
        "output": "",
        "rule": [
            "d4045"
        ]
    },
    {
        "instruction": "",
        "id": "q4046",
        "input": "set form field width bootstrap flask python",
        "output": "",
        "rule": [
            "d4046"
        ]
    },
    {
        "instruction": "",
        "id": "q4047",
        "input": "python atexit register unload",
        "output": "",
        "rule": [
            "d4047"
        ]
    },
    {
        "instruction": "",
        "id": "q4048",
        "input": "set is immutable in python so how are we able to add new elemt",
        "output": "",
        "rule": [
            "d4048"
        ]
    },
    {
        "instruction": "",
        "id": "q4049",
        "input": "python auto code reload",
        "output": "",
        "rule": [
            "d4049"
        ]
    },
    {
        "instruction": "",
        "id": "q4050",
        "input": "set logarithmic scale python",
        "output": "",
        "rule": [
            "d4050"
        ]
    },
    {
        "instruction": "",
        "id": "q4051",
        "input": "python auto form fill",
        "output": "",
        "rule": [
            "d4051"
        ]
    },
    {
        "instruction": "",
        "id": "q4052",
        "input": "set range in the constructor python",
        "output": "",
        "rule": [
            "d4052"
        ]
    },
    {
        "instruction": "",
        "id": "q4053",
        "input": "python automatically open excel file after running",
        "output": "",
        "rule": [
            "d4053"
        ]
    },
    {
        "instruction": "",
        "id": "q4054",
        "input": "setting a breakpoint with pdb, python",
        "output": "",
        "rule": [
            "d4054"
        ]
    },
    {
        "instruction": "",
        "id": "q4055",
        "input": "python average if not 0",
        "output": "",
        "rule": [
            "d4055"
        ]
    },
    {
        "instruction": "",
        "id": "q4056",
        "input": "setting window height in python",
        "output": "",
        "rule": [
            "d4056"
        ]
    },
    {
        "instruction": "",
        "id": "q4057",
        "input": "python aws delete object",
        "output": "",
        "rule": [
            "d4057"
        ]
    },
    {
        "instruction": "",
        "id": "q4058",
        "input": "should yaml be used for config files for python",
        "output": "",
        "rule": [
            "d4058"
        ]
    },
    {
        "instruction": "",
        "id": "q4059",
        "input": "python aws lambda third party",
        "output": "",
        "rule": [
            "d4059"
        ]
    },
    {
        "instruction": "",
        "id": "q4060",
        "input": "show confusion matrix python scikitlearn",
        "output": "",
        "rule": [
            "d4060"
        ]
    },
    {
        "instruction": "",
        "id": "q4061",
        "input": "python b' covert string",
        "output": "",
        "rule": [
            "d4061"
        ]
    },
    {
        "instruction": "",
        "id": "q4062",
        "input": "show the percentage format in python graph",
        "output": "",
        "rule": [
            "d4062"
        ]
    },
    {
        "instruction": "",
        "id": "q4063",
        "input": "python bar plot changing width",
        "output": "",
        "rule": [
            "d4063"
        ]
    },
    {
        "instruction": "",
        "id": "q4064",
        "input": "single element to array in python",
        "output": "",
        "rule": [
            "d4064"
        ]
    },
    {
        "instruction": "",
        "id": "q4065",
        "input": "python beautifulsoup get text without inner tag",
        "output": "",
        "rule": [
            "d4065"
        ]
    },
    {
        "instruction": "",
        "id": "q4066",
        "input": "single underscore and double underscroll in python",
        "output": "",
        "rule": [
            "d4066"
        ]
    },
    {
        "instruction": "",
        "id": "q4067",
        "input": "python boto3 hiding credentials",
        "output": "",
        "rule": [
            "d4067"
        ]
    },
    {
        "instruction": "",
        "id": "q4068",
        "input": "singleton and null in python",
        "output": "",
        "rule": [
            "d4068"
        ]
    },
    {
        "instruction": "",
        "id": "q4069",
        "input": "python bottle use https not http",
        "output": "",
        "rule": [
            "d4069"
        ]
    },
    {
        "instruction": "",
        "id": "q4070",
        "input": "skip c comments regex python",
        "output": "",
        "rule": [
            "d4070"
        ]
    },
    {
        "instruction": "",
        "id": "q4071",
        "input": "python bufferedreader return to beginning",
        "output": "",
        "rule": [
            "d4071"
        ]
    },
    {
        "instruction": "",
        "id": "q4072",
        "input": "slice with step is not supported python",
        "output": "",
        "rule": [
            "d4072"
        ]
    },
    {
        "instruction": "",
        "id": "q4073",
        "input": "python build string from list items",
        "output": "",
        "rule": [
            "d4073"
        ]
    },
    {
        "instruction": "",
        "id": "q4074",
        "input": "sliding batches python iterator",
        "output": "",
        "rule": [
            "d4074"
        ]
    },
    {
        "instruction": "",
        "id": "q4075",
        "input": "python butterworth bandpass filter float numbers",
        "output": "",
        "rule": [
            "d4075"
        ]
    },
    {
        "instruction": "",
        "id": "q4076",
        "input": "sort list by long name python",
        "output": "",
        "rule": [
            "d4076"
        ]
    },
    {
        "instruction": "",
        "id": "q4077",
        "input": "python bypass ssl certificate verification",
        "output": "",
        "rule": [
            "d4077"
        ]
    },
    {
        "instruction": "",
        "id": "q4078",
        "input": "sort values python multiple columns in data frame",
        "output": "",
        "rule": [
            "d4078"
        ]
    },
    {
        "instruction": "",
        "id": "q4079",
        "input": "python cache method response",
        "output": "",
        "rule": [
            "d4079"
        ]
    },
    {
        "instruction": "",
        "id": "q4080",
        "input": "sorting an array with index python",
        "output": "",
        "rule": [
            "d4080"
        ]
    },
    {
        "instruction": "",
        "id": "q4081",
        "input": "python calculate distance between two coordinates",
        "output": "",
        "rule": [
            "d4081"
        ]
    },
    {
        "instruction": "",
        "id": "q4082",
        "input": "spacy load mat file python",
        "output": "",
        "rule": [
            "d4082"
        ]
    },
    {
        "instruction": "",
        "id": "q4083",
        "input": "python call aync def as sync",
        "output": "",
        "rule": [
            "d4083"
        ]
    },
    {
        "instruction": "",
        "id": "q4084",
        "input": "specify accept mime type python bottle",
        "output": "",
        "rule": [
            "d4084"
        ]
    },
    {
        "instruction": "",
        "id": "q4085",
        "input": "python call pytest in file",
        "output": "",
        "rule": [
            "d4085"
        ]
    },
    {
        "instruction": "",
        "id": "q4086",
        "input": "specify how a priorityqueue compares its elements python",
        "output": "",
        "rule": [
            "d4086"
        ]
    },
    {
        "instruction": "",
        "id": "q4087",
        "input": "python call recursive on subdirectory get all files",
        "output": "",
        "rule": [
            "d4087"
        ]
    },
    {
        "instruction": "",
        "id": "q4088",
        "input": "sphinx python sub headings",
        "output": "",
        "rule": [
            "d4088"
        ]
    },
    {
        "instruction": "",
        "id": "q4089",
        "input": "python call to deprecated function",
        "output": "",
        "rule": [
            "d4089"
        ]
    },
    {
        "instruction": "",
        "id": "q4090",
        "input": "split array into chunks python",
        "output": "",
        "rule": [
            "d4090"
        ]
    },
    {
        "instruction": "",
        "id": "q4091",
        "input": "python callafter only once",
        "output": "",
        "rule": [
            "d4091"
        ]
    },
    {
        "instruction": "",
        "id": "q4092",
        "input": "python camelcase to dash",
        "output": "",
        "rule": [
            "d4092"
        ]
    },
    {
        "instruction": "",
        "id": "q4093",
        "input": "sqlalchemy sqlite datetime type only accepts python",
        "output": "",
        "rule": [
            "d4093"
        ]
    },
    {
        "instruction": "",
        "id": "q4094",
        "input": "python can you use strings in a conditional",
        "output": "",
        "rule": [
            "d4094"
        ]
    },
    {
        "instruction": "",
        "id": "q4095",
        "input": "sqlite datetime type only accepts python datetime",
        "output": "",
        "rule": [
            "d4095"
        ]
    },
    {
        "instruction": "",
        "id": "q4096",
        "input": "python canvas scroll width",
        "output": "",
        "rule": [
            "d4096"
        ]
    },
    {
        "instruction": "",
        "id": "q4097",
        "input": "squish python how to check if services is running",
        "output": "",
        "rule": [
            "d4097"
        ]
    },
    {
        "instruction": "",
        "id": "q4098",
        "input": "python capital to lowercase",
        "output": "",
        "rule": [
            "d4098"
        ]
    },
    {
        "instruction": "",
        "id": "q4099",
        "input": "stack overflow python isinstance method",
        "output": "",
        "rule": [
            "d4099"
        ]
    },
    {
        "instruction": "",
        "id": "q4100",
        "input": "python cast derived to base",
        "output": "",
        "rule": [
            "d4100"
        ]
    },
    {
        "instruction": "",
        "id": "q4101",
        "input": "stack overflow python port scanner",
        "output": "",
        "rule": [
            "d4101"
        ]
    },
    {
        "instruction": "",
        "id": "q4102",
        "input": "python cast list to csv",
        "output": "",
        "rule": [
            "d4102"
        ]
    },
    {
        "instruction": "",
        "id": "q4103",
        "input": "stackoverflow python change shared array",
        "output": "",
        "rule": [
            "d4103"
        ]
    },
    {
        "instruction": "",
        "id": "q4104",
        "input": "python casting a variable into a datetime",
        "output": "",
        "rule": [
            "d4104"
        ]
    },
    {
        "instruction": "",
        "id": "q4105",
        "input": "stamping a pdf programmatically python",
        "output": "",
        "rule": [
            "d4105"
        ]
    },
    {
        "instruction": "",
        "id": "q4106",
        "input": "python cdll load dll",
        "output": "",
        "rule": [
            "d4106"
        ]
    },
    {
        "instruction": "",
        "id": "q4107",
        "input": "standard deviation in groub by python",
        "output": "",
        "rule": [
            "d4107"
        ]
    },
    {
        "instruction": "",
        "id": "q4108",
        "input": "python change array to categorical",
        "output": "",
        "rule": [
            "d4108"
        ]
    },
    {
        "instruction": "",
        "id": "q4109",
        "input": "standard deviation of column python 3",
        "output": "",
        "rule": [
            "d4109"
        ]
    },
    {
        "instruction": "",
        "id": "q4110",
        "input": "python change combobox value",
        "output": "",
        "rule": [
            "d4110"
        ]
    },
    {
        "instruction": "",
        "id": "q4111",
        "input": "store cookies python back end",
        "output": "",
        "rule": [
            "d4111"
        ]
    },
    {
        "instruction": "",
        "id": "q4112",
        "input": "python change label with set method",
        "output": "",
        "rule": [
            "d4112"
        ]
    },
    {
        "instruction": "",
        "id": "q4113",
        "input": "str to timestamp data type python",
        "output": "",
        "rule": [
            "d4113"
        ]
    },
    {
        "instruction": "",
        "id": "q4114",
        "input": "python change the file permission",
        "output": "",
        "rule": [
            "d4114"
        ]
    },
    {
        "instruction": "",
        "id": "q4115",
        "input": "stream opened in read mode in python",
        "output": "",
        "rule": [
            "d4115"
        ]
    },
    {
        "instruction": "",
        "id": "q4116",
        "input": "python change type to numeric",
        "output": "",
        "rule": [
            "d4116"
        ]
    },
    {
        "instruction": "",
        "id": "q4117",
        "input": "strftime python millisecond precision",
        "output": "",
        "rule": [
            "d4117"
        ]
    },
    {
        "instruction": "",
        "id": "q4118",
        "input": "python chech if a string is a sub string of another string",
        "output": "",
        "rule": [
            "d4118"
        ]
    },
    {
        "instruction": "",
        "id": "q4119",
        "input": "strftime to epoch and back python",
        "output": "",
        "rule": [
            "d4119"
        ]
    },
    {
        "instruction": "",
        "id": "q4120",
        "input": "python check 2 file content same",
        "output": "",
        "rule": [
            "d4120"
        ]
    },
    {
        "instruction": "",
        "id": "q4121",
        "input": "string to dateframe in python",
        "output": "",
        "rule": [
            "d4121"
        ]
    },
    {
        "instruction": "",
        "id": "q4122",
        "input": "python check a field exist",
        "output": "",
        "rule": [
            "d4122"
        ]
    },
    {
        "instruction": "",
        "id": "q4123",
        "input": "strip object in loop python",
        "output": "",
        "rule": [
            "d4123"
        ]
    },
    {
        "instruction": "",
        "id": "q4124",
        "input": "python check api url data change",
        "output": "",
        "rule": [
            "d4124"
        ]
    },
    {
        "instruction": "",
        "id": "q4125",
        "input": "styling long lines in python",
        "output": "",
        "rule": [
            "d4125"
        ]
    },
    {
        "instruction": "",
        "id": "q4126",
        "input": "python check cuda complibility",
        "output": "",
        "rule": [
            "d4126"
        ]
    },
    {
        "instruction": "",
        "id": "q4127",
        "input": "subprocess python get the output of the command and save it to a variable",
        "output": "",
        "rule": [
            "d4127"
        ]
    },
    {
        "instruction": "",
        "id": "q4128",
        "input": "python check enum has value",
        "output": "",
        "rule": [
            "d4128"
        ]
    },
    {
        "instruction": "",
        "id": "q4129",
        "input": "substract datetime strings python",
        "output": "",
        "rule": [
            "d4129"
        ]
    },
    {
        "instruction": "",
        "id": "q4130",
        "input": "python check enum with value exists",
        "output": "",
        "rule": [
            "d4130"
        ]
    },
    {
        "instruction": "",
        "id": "q4131",
        "input": "sum along an axis python",
        "output": "",
        "rule": [
            "d4131"
        ]
    },
    {
        "instruction": "",
        "id": "q4132",
        "input": "python check for deprecated usage",
        "output": "",
        "rule": [
            "d4132"
        ]
    },
    {
        "instruction": "",
        "id": "q4133",
        "input": "sum iterator of map in python exicise",
        "output": "",
        "rule": [
            "d4133"
        ]
    },
    {
        "instruction": "",
        "id": "q4134",
        "input": "python check for git",
        "output": "",
        "rule": [
            "d4134"
        ]
    },
    {
        "instruction": "",
        "id": "q4135",
        "input": "sum over all axis but one python",
        "output": "",
        "rule": [
            "d4135"
        ]
    },
    {
        "instruction": "",
        "id": "q4136",
        "input": "python check for linux",
        "output": "",
        "rule": [
            "d4136"
        ]
    },
    {
        "instruction": "",
        "id": "q4137",
        "input": "swap case string function python",
        "output": "",
        "rule": [
            "d4137"
        ]
    },
    {
        "instruction": "",
        "id": "q4138",
        "input": "python check if a match group exists",
        "output": "",
        "rule": [
            "d4138"
        ]
    },
    {
        "instruction": "",
        "id": "q4139",
        "input": "swap columns in a matrix python",
        "output": "",
        "rule": [
            "d4139"
        ]
    },
    {
        "instruction": "",
        "id": "q4140",
        "input": "python check if all items in list are equal",
        "output": "",
        "rule": [
            "d4140"
        ]
    },
    {
        "instruction": "",
        "id": "q4141",
        "input": "swap function in python lists",
        "output": "",
        "rule": [
            "d4141"
        ]
    },
    {
        "instruction": "",
        "id": "q4142",
        "input": "python check if column is in list of strings",
        "output": "",
        "rule": [
            "d4142"
        ]
    },
    {
        "instruction": "",
        "id": "q4143",
        "input": "symbols is not defined python",
        "output": "",
        "rule": [
            "d4143"
        ]
    },
    {
        "instruction": "",
        "id": "q4144",
        "input": "python check if connecg to html port",
        "output": "",
        "rule": [
            "d4144"
        ]
    },
    {
        "instruction": "",
        "id": "q4145",
        "input": "table widget width of column in python",
        "output": "",
        "rule": [
            "d4145"
        ]
    },
    {
        "instruction": "",
        "id": "q4146",
        "input": "python check if dictionary key is equal to a specific string",
        "output": "",
        "rule": [
            "d4146"
        ]
    },
    {
        "instruction": "",
        "id": "q4147",
        "input": "take a screenshot python webdriver",
        "output": "",
        "rule": [
            "d4147"
        ]
    },
    {
        "instruction": "",
        "id": "q4148",
        "input": "python check if field value is null",
        "output": "",
        "rule": [
            "d4148"
        ]
    },
    {
        "instruction": "",
        "id": "q4149",
        "input": "take log to array in python",
        "output": "",
        "rule": [
            "d4149"
        ]
    },
    {
        "instruction": "",
        "id": "q4150",
        "input": "python check if file is json",
        "output": "",
        "rule": [
            "d4150"
        ]
    },
    {
        "instruction": "",
        "id": "q4151",
        "input": "taking the log of an array in python",
        "output": "",
        "rule": [
            "d4151"
        ]
    },
    {
        "instruction": "",
        "id": "q4152",
        "input": "python check if instance of list",
        "output": "",
        "rule": [
            "d4152"
        ]
    },
    {
        "instruction": "",
        "id": "q4153",
        "input": "tensorflow python activation function attributes",
        "output": "",
        "rule": [
            "d4153"
        ]
    },
    {
        "instruction": "",
        "id": "q4154",
        "input": "python check if int timestamp",
        "output": "",
        "rule": [
            "d4154"
        ]
    },
    {
        "instruction": "",
        "id": "q4155",
        "input": "test array dimension python",
        "output": "",
        "rule": [
            "d4155"
        ]
    },
    {
        "instruction": "",
        "id": "q4156",
        "input": "python check if is date",
        "output": "",
        "rule": [
            "d4156"
        ]
    },
    {
        "instruction": "",
        "id": "q4157",
        "input": "test for equality in python",
        "output": "",
        "rule": [
            "d4157"
        ]
    },
    {
        "instruction": "",
        "id": "q4158",
        "input": "python check if line starts with comment",
        "output": "",
        "rule": [
            "d4158"
        ]
    },
    {
        "instruction": "",
        "id": "q4159",
        "input": "test if exist before using getattr python",
        "output": "",
        "rule": [
            "d4159"
        ]
    },
    {
        "instruction": "",
        "id": "q4160",
        "input": "python check if list is all integers",
        "output": "",
        "rule": [
            "d4160"
        ]
    },
    {
        "instruction": "",
        "id": "q4161",
        "input": "test if python object is iterable",
        "output": "",
        "rule": [
            "d4161"
        ]
    },
    {
        "instruction": "",
        "id": "q4162",
        "input": "python check if log handler enabled",
        "output": "",
        "rule": [
            "d4162"
        ]
    },
    {
        "instruction": "",
        "id": "q4163",
        "input": "test whether an object is an iterable type python",
        "output": "",
        "rule": [
            "d4163"
        ]
    },
    {
        "instruction": "",
        "id": "q4164",
        "input": "python check if object is numpy array",
        "output": "",
        "rule": [
            "d4164"
        ]
    },
    {
        "instruction": "",
        "id": "q4165",
        "input": "the method is not allowed for the requested url python flask",
        "output": "",
        "rule": [
            "d4165"
        ]
    },
    {
        "instruction": "",
        "id": "q4166",
        "input": "python check if process exists by name",
        "output": "",
        "rule": [
            "d4166"
        ]
    },
    {
        "instruction": "",
        "id": "q4167",
        "input": "the most counted python",
        "output": "",
        "rule": [
            "d4167"
        ]
    },
    {
        "instruction": "",
        "id": "q4168",
        "input": "python check if the file type is is image",
        "output": "",
        "rule": [
            "d4168"
        ]
    },
    {
        "instruction": "",
        "id": "q4169",
        "input": "time hour minute format python",
        "output": "",
        "rule": [
            "d4169"
        ]
    },
    {
        "instruction": "",
        "id": "q4170",
        "input": "python check if usb device is located behind a hub",
        "output": "",
        "rule": [
            "d4170"
        ]
    },
    {
        "instruction": "",
        "id": "q4171",
        "input": "timedelta get millisecond python",
        "output": "",
        "rule": [
            "d4171"
        ]
    },
    {
        "instruction": "",
        "id": "q4172",
        "input": "python check if val is float",
        "output": "",
        "rule": [
            "d4172"
        ]
    },
    {
        "instruction": "",
        "id": "q4173",
        "input": "timestamp in python data type casting",
        "output": "",
        "rule": [
            "d4173"
        ]
    },
    {
        "instruction": "",
        "id": "q4174",
        "input": "python check if value defined",
        "output": "",
        "rule": [
            "d4174"
        ]
    },
    {
        "instruction": "",
        "id": "q4175",
        "input": "timing how long a function takes to complete in python",
        "output": "",
        "rule": [
            "d4175"
        ]
    },
    {
        "instruction": "",
        "id": "q4176",
        "input": "python check if variable is a numpy type",
        "output": "",
        "rule": [
            "d4176"
        ]
    },
    {
        "instruction": "",
        "id": "q4177",
        "input": "tkinter python flexible column width",
        "output": "",
        "rule": [
            "d4177"
        ]
    },
    {
        "instruction": "",
        "id": "q4178",
        "input": "python check if windows is activated",
        "output": "",
        "rule": [
            "d4178"
        ]
    },
    {
        "instruction": "",
        "id": "q4179",
        "input": "to check with datatype in python",
        "output": "",
        "rule": [
            "d4179"
        ]
    },
    {
        "instruction": "",
        "id": "q4180",
        "input": "python check is buildin type",
        "output": "",
        "rule": [
            "d4180"
        ]
    },
    {
        "instruction": "",
        "id": "q4181",
        "input": "to get distinct elements in the list python",
        "output": "",
        "rule": [
            "d4181"
        ]
    },
    {
        "instruction": "",
        "id": "q4182",
        "input": "python check is datetime object",
        "output": "",
        "rule": [
            "d4182"
        ]
    },
    {
        "instruction": "",
        "id": "q4183",
        "input": "transform a table into python data frame",
        "output": "",
        "rule": [
            "d4183"
        ]
    },
    {
        "instruction": "",
        "id": "q4184",
        "input": "python check len of value",
        "output": "",
        "rule": [
            "d4184"
        ]
    },
    {
        "instruction": "",
        "id": "q4185",
        "input": "transpose 3d matrix python",
        "output": "",
        "rule": [
            "d4185"
        ]
    },
    {
        "instruction": "",
        "id": "q4186",
        "input": "python check lowercase key in a dict",
        "output": "",
        "rule": [
            "d4186"
        ]
    },
    {
        "instruction": "",
        "id": "q4187",
        "input": "truncate multiple tables at once python",
        "output": "",
        "rule": [
            "d4187"
        ]
    },
    {
        "instruction": "",
        "id": "q4188",
        "input": "python check rsa private key and public key match",
        "output": "",
        "rule": [
            "d4188"
        ]
    },
    {
        "instruction": "",
        "id": "q4189",
        "input": "trunkcate string at token python",
        "output": "",
        "rule": [
            "d4189"
        ]
    },
    {
        "instruction": "",
        "id": "q4190",
        "input": "python check status code belong to 200",
        "output": "",
        "rule": [
            "d4190"
        ]
    },
    {
        "instruction": "",
        "id": "q4191",
        "input": "tunnel request through a proxy requests python",
        "output": "",
        "rule": [
            "d4191"
        ]
    },
    {
        "instruction": "",
        "id": "q4192",
        "input": "python check to see if all list items are unique",
        "output": "",
        "rule": [
            "d4192"
        ]
    },
    {
        "instruction": "",
        "id": "q4193",
        "input": "turn all keys in dictionary to lowercase python",
        "output": "",
        "rule": [
            "d4193"
        ]
    },
    {
        "instruction": "",
        "id": "q4194",
        "input": "python check to see if it is running as administrator",
        "output": "",
        "rule": [
            "d4194"
        ]
    },
    {
        "instruction": "",
        "id": "q4195",
        "input": "turn boolean array into 1,0 python",
        "output": "",
        "rule": [
            "d4195"
        ]
    },
    {
        "instruction": "",
        "id": "q4196",
        "input": "python check varible type",
        "output": "",
        "rule": [
            "d4196"
        ]
    },
    {
        "instruction": "",
        "id": "q4197",
        "input": "turn list of string into dictionary python function",
        "output": "",
        "rule": [
            "d4197"
        ]
    },
    {
        "instruction": "",
        "id": "q4198",
        "input": "python checking for string or number",
        "output": "",
        "rule": [
            "d4198"
        ]
    },
    {
        "instruction": "",
        "id": "q4199",
        "input": "turn matrix into a list python",
        "output": "",
        "rule": [
            "d4199"
        ]
    },
    {
        "instruction": "",
        "id": "q4200",
        "input": "python checking if a number is complex",
        "output": "",
        "rule": [
            "d4200"
        ]
    },
    {
        "instruction": "",
        "id": "q4201",
        "input": "turnoff python post mortem",
        "output": "",
        "rule": [
            "d4201"
        ]
    },
    {
        "instruction": "",
        "id": "q4202",
        "input": "python checking if a sql table record exist",
        "output": "",
        "rule": [
            "d4202"
        ]
    },
    {
        "instruction": "",
        "id": "q4203",
        "input": "twitter api get users statuses python",
        "output": "",
        "rule": [
            "d4203"
        ]
    },
    {
        "instruction": "",
        "id": "q4204",
        "input": "python checking if file is an image",
        "output": "",
        "rule": [
            "d4204"
        ]
    },
    {
        "instruction": "",
        "id": "q4205",
        "input": "typecast elemts in a list python",
        "output": "",
        "rule": [
            "d4205"
        ]
    },
    {
        "instruction": "",
        "id": "q4206",
        "input": "python chmod not working in windows",
        "output": "",
        "rule": [
            "d4206"
        ]
    },
    {
        "instruction": "",
        "id": "q4207",
        "input": "ubuntu font list python",
        "output": "",
        "rule": [
            "d4207"
        ]
    },
    {
        "instruction": "",
        "id": "q4208",
        "input": "python choose folder tkinter",
        "output": "",
        "rule": [
            "d4208"
        ]
    },
    {
        "instruction": "",
        "id": "q4209",
        "input": "unabe to post data on api json using python",
        "output": "",
        "rule": [
            "d4209"
        ]
    },
    {
        "instruction": "",
        "id": "q4210",
        "input": "python chunk iterator itertools",
        "output": "",
        "rule": [
            "d4210"
        ]
    },
    {
        "instruction": "",
        "id": "q4211",
        "input": "python clear memory cache for loop",
        "output": "",
        "rule": [
            "d4211"
        ]
    },
    {
        "instruction": "",
        "id": "q4212",
        "input": "unique permutations algorithm of string in python",
        "output": "",
        "rule": [
            "d4212"
        ]
    },
    {
        "instruction": "",
        "id": "q4213",
        "input": "python clear to show progress",
        "output": "",
        "rule": [
            "d4213"
        ]
    },
    {
        "instruction": "",
        "id": "q4214",
        "input": "unique values of columns with frequencies python andas",
        "output": "",
        "rule": [
            "d4214"
        ]
    },
    {
        "instruction": "",
        "id": "q4215",
        "input": "python clear variables at start of code",
        "output": "",
        "rule": [
            "d4215"
        ]
    },
    {
        "instruction": "",
        "id": "q4216",
        "input": "uniquify 2d list python",
        "output": "",
        "rule": [
            "d4216"
        ]
    },
    {
        "instruction": "",
        "id": "q4217",
        "input": "python close shutdown socket",
        "output": "",
        "rule": [
            "d4217"
        ]
    },
    {
        "instruction": "",
        "id": "q4218",
        "input": "unpack all tuples python",
        "output": "",
        "rule": [
            "d4218"
        ]
    },
    {
        "instruction": "",
        "id": "q4219",
        "input": "python close task manager",
        "output": "",
        "rule": [
            "d4219"
        ]
    },
    {
        "instruction": "",
        "id": "q4220",
        "input": "unstring a python array",
        "output": "",
        "rule": [
            "d4220"
        ]
    },
    {
        "instruction": "",
        "id": "q4221",
        "input": "python cmp overload for objects",
        "output": "",
        "rule": [
            "d4221"
        ]
    },
    {
        "instruction": "",
        "id": "q4222",
        "input": "python code for checking extension of file uploaded by user",
        "output": "",
        "rule": [
            "d4222"
        ]
    },
    {
        "instruction": "",
        "id": "q4223",
        "input": "unzip file using url python",
        "output": "",
        "rule": [
            "d4223"
        ]
    },
    {
        "instruction": "",
        "id": "q4224",
        "input": "python code the distance between two points points of lat and lon",
        "output": "",
        "rule": [
            "d4224"
        ]
    },
    {
        "instruction": "",
        "id": "q4225",
        "input": "update cancekked halfway and spyder python not loading",
        "output": "",
        "rule": [
            "d4225"
        ]
    },
    {
        "instruction": "",
        "id": "q4226",
        "input": "python code to connect to cloudant db",
        "output": "",
        "rule": [
            "d4226"
        ]
    },
    {
        "instruction": "",
        "id": "q4227",
        "input": "update element on the heap heapq python",
        "output": "",
        "rule": [
            "d4227"
        ]
    },
    {
        "instruction": "",
        "id": "q4228",
        "input": "python code to replace particular string in the existing file each line",
        "output": "",
        "rule": [
            "d4228"
        ]
    },
    {
        "instruction": "",
        "id": "q4229",
        "input": "update progress bar python tkinter",
        "output": "",
        "rule": [
            "d4229"
        ]
    },
    {
        "instruction": "",
        "id": "q4230",
        "input": "python code to validate mac address",
        "output": "",
        "rule": [
            "d4230"
        ]
    },
    {
        "instruction": "",
        "id": "q4231",
        "input": "use input and string tohether in python",
        "output": "",
        "rule": [
            "d4231"
        ]
    },
    {
        "instruction": "",
        "id": "q4232",
        "input": "python column top 5",
        "output": "",
        "rule": [
            "d4232"
        ]
    },
    {
        "instruction": "",
        "id": "q4233",
        "input": "use latex in python squared",
        "output": "",
        "rule": [
            "d4233"
        ]
    },
    {
        "instruction": "",
        "id": "q4234",
        "input": "python comma delineated string to list",
        "output": "",
        "rule": [
            "d4234"
        ]
    },
    {
        "instruction": "",
        "id": "q4235",
        "input": "use python to calculate distance between two points in 2d",
        "output": "",
        "rule": [
            "d4235"
        ]
    },
    {
        "instruction": "",
        "id": "q4236",
        "input": "python comments function indented",
        "output": "",
        "rule": [
            "d4236"
        ]
    },
    {
        "instruction": "",
        "id": "q4237",
        "input": "use python to word count and remove punctuation",
        "output": "",
        "rule": [
            "d4237"
        ]
    },
    {
        "instruction": "",
        "id": "q4238",
        "input": "python compare two strings if length is known speed",
        "output": "",
        "rule": [
            "d4238"
        ]
    },
    {
        "instruction": "",
        "id": "q4239",
        "input": "usinf multiindex for a data frame python",
        "output": "",
        "rule": [
            "d4239"
        ]
    },
    {
        "instruction": "",
        "id": "q4240",
        "input": "python compile string function",
        "output": "",
        "rule": [
            "d4240"
        ]
    },
    {
        "instruction": "",
        "id": "q4241",
        "input": "using a function with lambda expressions with sorted python",
        "output": "",
        "rule": [
            "d4241"
        ]
    },
    {
        "instruction": "",
        "id": "q4242",
        "input": "python comprehension to sum",
        "output": "",
        "rule": [
            "d4242"
        ]
    },
    {
        "instruction": "",
        "id": "q4243",
        "input": "using an iterator in python to go from 1 to 100",
        "output": "",
        "rule": [
            "d4243"
        ]
    },
    {
        "instruction": "",
        "id": "q4244",
        "input": "python configparser how to set defaults",
        "output": "",
        "rule": [
            "d4244"
        ]
    },
    {
        "instruction": "",
        "id": "q4245",
        "input": "using cnn layers in keras python conv2d",
        "output": "",
        "rule": [
            "d4245"
        ]
    },
    {
        "instruction": "",
        "id": "q4246",
        "input": "python configparser to get the whole sections",
        "output": "",
        "rule": [
            "d4246"
        ]
    },
    {
        "instruction": "",
        "id": "q4247",
        "input": "using min with lists python",
        "output": "",
        "rule": [
            "d4247"
        ]
    },
    {
        "instruction": "",
        "id": "q4248",
        "input": "python connect to local redis",
        "output": "",
        "rule": [
            "d4248"
        ]
    },
    {
        "instruction": "",
        "id": "q4249",
        "input": "using percent function in python",
        "output": "",
        "rule": [
            "d4249"
        ]
    },
    {
        "instruction": "",
        "id": "q4250",
        "input": "python connects points on a line graphic",
        "output": "",
        "rule": [
            "d4250"
        ]
    },
    {
        "instruction": "",
        "id": "q4251",
        "input": "using python regexp finditer",
        "output": "",
        "rule": [
            "d4251"
        ]
    },
    {
        "instruction": "",
        "id": "q4252",
        "input": "python contour points spline interpolation opencv",
        "output": "",
        "rule": [
            "d4252"
        ]
    },
    {
        "instruction": "",
        "id": "q4253",
        "input": "using python to format and display json",
        "output": "",
        "rule": [
            "d4253"
        ]
    },
    {
        "instruction": "",
        "id": "q4254",
        "input": "python convention to make a method private",
        "output": "",
        "rule": [
            "d4254"
        ]
    },
    {
        "instruction": "",
        "id": "q4255",
        "input": "using spotify api in python",
        "output": "",
        "rule": [
            "d4255"
        ]
    },
    {
        "instruction": "",
        "id": "q4256",
        "input": "python conver epoch to datetime",
        "output": "",
        "rule": [
            "d4256"
        ]
    },
    {
        "instruction": "",
        "id": "q4257",
        "input": "using the product of a function in an equation python",
        "output": "",
        "rule": [
            "d4257"
        ]
    },
    {
        "instruction": "",
        "id": "q4258",
        "input": "python coordinates offset vurve",
        "output": "",
        "rule": [
            "d4258"
        ]
    },
    {
        "instruction": "",
        "id": "q4259",
        "input": "vs code python output viewer",
        "output": "",
        "rule": [
            "d4259"
        ]
    },
    {
        "instruction": "",
        "id": "q4260",
        "input": "python copy map iterator for next loop",
        "output": "",
        "rule": [
            "d4260"
        ]
    },
    {
        "instruction": "",
        "id": "q4261",
        "input": "vs code python tensorflow",
        "output": "",
        "rule": [
            "d4261"
        ]
    },
    {
        "instruction": "",
        "id": "q4262",
        "input": "python correlation analysis for multiple columns",
        "output": "",
        "rule": [
            "d4262"
        ]
    },
    {
        "instruction": "",
        "id": "q4263",
        "input": "webdriver python assert element present",
        "output": "",
        "rule": [
            "d4263"
        ]
    },
    {
        "instruction": "",
        "id": "q4264",
        "input": "python count all factors of a number",
        "output": "",
        "rule": [
            "d4264"
        ]
    },
    {
        "instruction": "",
        "id": "q4265",
        "input": "what color tuple is equal to black in python",
        "output": "",
        "rule": [
            "d4265"
        ]
    },
    {
        "instruction": "",
        "id": "q4266",
        "input": "retrieve json file python",
        "output": "",
        "rule": [
            "d4266"
        ]
    },
    {
        "instruction": "",
        "id": "q4267",
        "input": "what do you use to delete the first occurrence of an item from the list? python",
        "output": "",
        "rule": [
            "d4267"
        ]
    },
    {
        "instruction": "",
        "id": "q4268",
        "input": "python count number of nan in an array",
        "output": "",
        "rule": [
            "d4268"
        ]
    },
    {
        "instruction": "",
        "id": "q4269",
        "input": "what does the gradient function in python do",
        "output": "",
        "rule": [
            "d4269"
        ]
    },
    {
        "instruction": "",
        "id": "q4270",
        "input": "python count number of tabs in line",
        "output": "",
        "rule": [
            "d4270"
        ]
    },
    {
        "instruction": "",
        "id": "q4271",
        "input": "what to imput to close window python",
        "output": "",
        "rule": [
            "d4271"
        ]
    },
    {
        "instruction": "",
        "id": "q4272",
        "input": "python count white space",
        "output": "",
        "rule": [
            "d4272"
        ]
    },
    {
        "instruction": "",
        "id": "q4273",
        "input": "what {} represents in python",
        "output": "",
        "rule": [
            "d4273"
        ]
    },
    {
        "instruction": "",
        "id": "q4274",
        "input": "python count words in a sentance",
        "output": "",
        "rule": [
            "d4274"
        ]
    },
    {
        "instruction": "",
        "id": "q4275",
        "input": "what's a indent block in python",
        "output": "",
        "rule": [
            "d4275"
        ]
    },
    {
        "instruction": "",
        "id": "q4276",
        "input": "python counter get nlargest",
        "output": "",
        "rule": [
            "d4276"
        ]
    },
    {
        "instruction": "",
        "id": "q4277",
        "input": "while copying it shold create a new file if the file already exist in python",
        "output": "",
        "rule": [
            "d4277"
        ]
    },
    {
        "instruction": "",
        "id": "q4278",
        "input": "python coverage coverage file location",
        "output": "",
        "rule": [
            "d4278"
        ]
    },
    {
        "instruction": "",
        "id": "q4279",
        "input": "will python join add a delimiter for none",
        "output": "",
        "rule": [
            "d4279"
        ]
    },
    {
        "instruction": "",
        "id": "q4280",
        "input": "python create a directory from a path",
        "output": "",
        "rule": [
            "d4280"
        ]
    },
    {
        "instruction": "",
        "id": "q4281",
        "input": "windows python set fd as nonblock",
        "output": "",
        "rule": [
            "d4281"
        ]
    },
    {
        "instruction": "",
        "id": "q4282",
        "input": "python create a randomly sized rectangle",
        "output": "",
        "rule": [
            "d4282"
        ]
    },
    {
        "instruction": "",
        "id": "q4283",
        "input": "working with clipboard in python",
        "output": "",
        "rule": [
            "d4283"
        ]
    },
    {
        "instruction": "",
        "id": "q4284",
        "input": "python create kill process",
        "output": "",
        "rule": [
            "d4284"
        ]
    },
    {
        "instruction": "",
        "id": "q4285",
        "input": "working with git in python without gitpython",
        "output": "",
        "rule": [
            "d4285"
        ]
    },
    {
        "instruction": "",
        "id": "q4286",
        "input": "python create objects with dictionary",
        "output": "",
        "rule": [
            "d4286"
        ]
    },
    {
        "instruction": "",
        "id": "q4287",
        "input": "write a python program to read last n line of a file",
        "output": "",
        "rule": [
            "d4287"
        ]
    },
    {
        "instruction": "",
        "id": "q4288",
        "input": "python create sentance from string array",
        "output": "",
        "rule": [
            "d4288"
        ]
    },
    {
        "instruction": "",
        "id": "q4289",
        "input": "write csv from matrix python",
        "output": "",
        "rule": [
            "d4289"
        ]
    },
    {
        "instruction": "",
        "id": "q4290",
        "input": "python create single element tuple",
        "output": "",
        "rule": [
            "d4290"
        ]
    },
    {
        "instruction": "",
        "id": "q4291",
        "input": "write non ascii charachters python",
        "output": "",
        "rule": [
            "d4291"
        ]
    },
    {
        "instruction": "",
        "id": "q4292",
        "input": "python create string out of list of values",
        "output": "",
        "rule": [
            "d4292"
        ]
    },
    {
        "instruction": "",
        "id": "q4293",
        "input": "wxpython 'bitmap' object has no attribute 'ok'",
        "output": "",
        "rule": [
            "d4293"
        ]
    },
    {
        "instruction": "",
        "id": "q4294",
        "input": "python create symlink in windows",
        "output": "",
        "rule": [
            "d4294"
        ]
    },
    {
        "instruction": "",
        "id": "q4295",
        "input": "wxpython default background color",
        "output": "",
        "rule": [
            "d4295"
        ]
    },
    {
        "instruction": "",
        "id": "q4296",
        "input": "python create varaiable from string",
        "output": "",
        "rule": [
            "d4296"
        ]
    },
    {
        "instruction": "",
        "id": "q4297",
        "input": "wxpython frame disable close button",
        "output": "",
        "rule": [
            "d4297"
        ]
    },
    {
        "instruction": "",
        "id": "q4298",
        "input": "python creating cursor connection to stored procedure as opposed to tables",
        "output": "",
        "rule": [
            "d4298"
        ]
    },
    {
        "instruction": "",
        "id": "q4299",
        "input": "wxpython get the maximum resolution of the screen",
        "output": "",
        "rule": [
            "d4299"
        ]
    },
    {
        "instruction": "",
        "id": "q4300",
        "input": "python creatte range tuple",
        "output": "",
        "rule": [
            "d4300"
        ]
    },
    {
        "instruction": "",
        "id": "q4301",
        "input": "python crop image out of boundary",
        "output": "",
        "rule": [
            "d4301"
        ]
    },
    {
        "instruction": "",
        "id": "q4302",
        "input": "python ctypes array of ints",
        "output": "",
        "rule": [
            "d4302"
        ]
    },
    {
        "instruction": "",
        "id": "q4303",
        "input": "python coroutine call coroutine",
        "output": "",
        "rule": [
            "d4303"
        ]
    },
    {
        "instruction": "",
        "id": "q4304",
        "input": "\"load javascript file from python\"",
        "output": "",
        "rule": [
            "d4304"
        ]
    },
    {
        "instruction": "",
        "id": "q4305",
        "input": "python correlation matrix with objects",
        "output": "",
        "rule": [
            "d4305"
        ]
    },
    {
        "instruction": "",
        "id": "q4306",
        "input": "how to \"copy a folder\" in python",
        "output": "",
        "rule": [
            "d4306"
        ]
    },
    {
        "instruction": "",
        "id": "q4307",
        "input": "python count unique elements in list of list",
        "output": "",
        "rule": [
            "d4307"
        ]
    },
    {
        "instruction": "",
        "id": "q4308",
        "input": "max heap with \"double link\" list python",
        "output": "",
        "rule": [
            "d4308"
        ]
    },
    {
        "instruction": "",
        "id": "q4309",
        "input": "python coverage report multiple files",
        "output": "",
        "rule": [
            "d4309"
        ]
    },
    {
        "instruction": "",
        "id": "q4310",
        "input": "python pass method to function \"must be called with instance\"",
        "output": "",
        "rule": [
            "d4310"
        ]
    },
    {
        "instruction": "",
        "id": "q4311",
        "input": "python covert bytes to integer",
        "output": "",
        "rule": [
            "d4311"
        ]
    },
    {
        "instruction": "",
        "id": "q4312",
        "input": "python turn string into one hot vector \"alphabet\"",
        "output": "",
        "rule": [
            "d4312"
        ]
    },
    {
        "instruction": "",
        "id": "q4313",
        "input": "python create a drop down from list",
        "output": "",
        "rule": [
            "d4313"
        ]
    },
    {
        "instruction": "",
        "id": "q4314",
        "input": "read csv into list without \" and , python",
        "output": "",
        "rule": [
            "d4314"
        ]
    },
    {
        "instruction": "",
        "id": "q4315",
        "input": "python create a naive datetime",
        "output": "",
        "rule": [
            "d4315"
        ]
    },
    {
        "instruction": "",
        "id": "q4316",
        "input": "sqlalchemy my sql \"python keyword\" for column name",
        "output": "",
        "rule": [
            "d4316"
        ]
    },
    {
        "instruction": "",
        "id": "q4317",
        "input": "python create a variable header",
        "output": "",
        "rule": [
            "d4317"
        ]
    },
    {
        "instruction": "",
        "id": "q4318",
        "input": "% in python accepts float",
        "output": "",
        "rule": [
            "d4318"
        ]
    },
    {
        "instruction": "",
        "id": "q4319",
        "input": "python create adjacency matrix",
        "output": "",
        "rule": [
            "d4319"
        ]
    },
    {
        "instruction": "",
        "id": "q4320",
        "input": "+python django data translator unit",
        "output": "",
        "rule": [
            "d4320"
        ]
    },
    {
        "instruction": "",
        "id": "q4321",
        "input": "python create folder including parents",
        "output": "",
        "rule": [
            "d4321"
        ]
    },
    {
        "instruction": "",
        "id": "q4322",
        "input": "0x hex value to hsv python code",
        "output": "",
        "rule": [
            "d4322"
        ]
    },
    {
        "instruction": "",
        "id": "q4323",
        "input": "python create new schema postgresql",
        "output": "",
        "rule": [
            "d4323"
        ]
    },
    {
        "instruction": "",
        "id": "q4324",
        "input": "24hr format to time in python",
        "output": "",
        "rule": [
            "d4324"
        ]
    },
    {
        "instruction": "",
        "id": "q4325",
        "input": "python create object with dict",
        "output": "",
        "rule": [
            "d4325"
        ]
    },
    {
        "instruction": "",
        "id": "q4326",
        "input": "2d rotation matrix given angle python",
        "output": "",
        "rule": [
            "d4326"
        ]
    },
    {
        "instruction": "",
        "id": "q4327",
        "input": "python create one hot numpy",
        "output": "",
        "rule": [
            "d4327"
        ]
    },
    {
        "instruction": "",
        "id": "q4328",
        "input": "3d lists coordinates in python",
        "output": "",
        "rule": [
            "d4328"
        ]
    },
    {
        "instruction": "",
        "id": "q4329",
        "input": "python create random sparse matrix invertable",
        "output": "",
        "rule": [
            "d4329"
        ]
    },
    {
        "instruction": "",
        "id": "q4330",
        "input": "90 degree rotation of array in python",
        "output": "",
        "rule": [
            "d4330"
        ]
    },
    {
        "instruction": "",
        "id": "q4331",
        "input": "python create table dynamically",
        "output": "",
        "rule": [
            "d4331"
        ]
    },
    {
        "instruction": "",
        "id": "q4332",
        "input": "a canvas is not a widget used in python to create a graphic design",
        "output": "",
        "rule": [
            "d4332"
        ]
    },
    {
        "instruction": "",
        "id": "q4333",
        "input": "python create timespan from seconds",
        "output": "",
        "rule": [
            "d4333"
        ]
    },
    {
        "instruction": "",
        "id": "q4334",
        "input": "a pythonobject is not attached to a node",
        "output": "",
        "rule": [
            "d4334"
        ]
    },
    {
        "instruction": "",
        "id": "q4335",
        "input": "python createa a 2d gaussian",
        "output": "",
        "rule": [
            "d4335"
        ]
    },
    {
        "instruction": "",
        "id": "q4336",
        "input": "access metadata python pdf",
        "output": "",
        "rule": [
            "d4336"
        ]
    },
    {
        "instruction": "",
        "id": "q4337",
        "input": "python creating an object based on clas name",
        "output": "",
        "rule": [
            "d4337"
        ]
    },
    {
        "instruction": "",
        "id": "q4338",
        "input": "accessing a column in a matrix python",
        "output": "",
        "rule": [
            "d4338"
        ]
    },
    {
        "instruction": "",
        "id": "q4339",
        "input": "python csv reader next method",
        "output": "",
        "rule": [
            "d4339"
        ]
    },
    {
        "instruction": "",
        "id": "q4340",
        "input": "add a year to a datetime python",
        "output": "",
        "rule": [
            "d4340"
        ]
    },
    {
        "instruction": "",
        "id": "q4341",
        "input": "python ctypes allocate buffer",
        "output": "",
        "rule": [
            "d4341"
        ]
    },
    {
        "instruction": "",
        "id": "q4342",
        "input": "add color to print python",
        "output": "",
        "rule": [
            "d4342"
        ]
    },
    {
        "instruction": "",
        "id": "q4343",
        "input": "python ctypes cast void * to structure pointer",
        "output": "",
        "rule": [
            "d4343"
        ]
    },
    {
        "instruction": "",
        "id": "q4344",
        "input": "add indentations to output with code in python",
        "output": "",
        "rule": [
            "d4344"
        ]
    },
    {
        "instruction": "",
        "id": "q4345",
        "input": "python ctypes float array",
        "output": "",
        "rule": [
            "d4345"
        ]
    },
    {
        "instruction": "",
        "id": "q4346",
        "input": "add jar path to python",
        "output": "",
        "rule": [
            "d4346"
        ]
    },
    {
        "instruction": "",
        "id": "q4347",
        "input": "python ctypes string to c string",
        "output": "",
        "rule": [
            "d4347"
        ]
    },
    {
        "instruction": "",
        "id": "q4348",
        "input": "add new line after every write in python",
        "output": "",
        "rule": [
            "d4348"
        ]
    },
    {
        "instruction": "",
        "id": "q4349",
        "input": "python ctypes to int",
        "output": "",
        "rule": [
            "d4349"
        ]
    },
    {
        "instruction": "",
        "id": "q4350",
        "input": "add noise to the images python",
        "output": "",
        "rule": [
            "d4350"
        ]
    },
    {
        "instruction": "",
        "id": "q4351",
        "input": "python custom context manager",
        "output": "",
        "rule": [
            "d4351"
        ]
    },
    {
        "instruction": "",
        "id": "q4352",
        "input": "add python libraries to aws lambda",
        "output": "",
        "rule": [
            "d4352"
        ]
    },
    {
        "instruction": "",
        "id": "q4353",
        "input": "python cut data into a few intervals",
        "output": "",
        "rule": [
            "d4353"
        ]
    },
    {
        "instruction": "",
        "id": "q4354",
        "input": "adjacency matrix in python dictioanry",
        "output": "",
        "rule": [
            "d4354"
        ]
    },
    {
        "instruction": "",
        "id": "q4355",
        "input": "python cv2 open raw image file",
        "output": "",
        "rule": [
            "d4355"
        ]
    },
    {
        "instruction": "",
        "id": "q4356",
        "input": "adjust width of columns in xlsx python",
        "output": "",
        "rule": [
            "d4356"
        ]
    },
    {
        "instruction": "",
        "id": "q4357",
        "input": "python data frame how to drop a column",
        "output": "",
        "rule": [
            "d4357"
        ]
    },
    {
        "instruction": "",
        "id": "q4358",
        "input": "all bigquery fields returning as objects python",
        "output": "",
        "rule": [
            "d4358"
        ]
    },
    {
        "instruction": "",
        "id": "q4359",
        "input": "python date replace month",
        "output": "",
        "rule": [
            "d4359"
        ]
    },
    {
        "instruction": "",
        "id": "q4360",
        "input": "allow permission to overwrite file python",
        "output": "",
        "rule": [
            "d4360"
        ]
    },
    {
        "instruction": "",
        "id": "q4361",
        "input": "python datetime drop microsecond",
        "output": "",
        "rule": [
            "d4361"
        ]
    },
    {
        "instruction": "",
        "id": "q4362",
        "input": "amax python for3d numpy aray",
        "output": "",
        "rule": [
            "d4362"
        ]
    },
    {
        "instruction": "",
        "id": "q4363",
        "input": "python datetime from string with timezone",
        "output": "",
        "rule": [
            "d4363"
        ]
    },
    {
        "instruction": "",
        "id": "q4364",
        "input": "angle between two vectors using python",
        "output": "",
        "rule": [
            "d4364"
        ]
    },
    {
        "instruction": "",
        "id": "q4365",
        "input": "python datetime into posix timestamp",
        "output": "",
        "rule": [
            "d4365"
        ]
    },
    {
        "instruction": "",
        "id": "q4366",
        "input": "ansi color sequence for python",
        "output": "",
        "rule": [
            "d4366"
        ]
    },
    {
        "instruction": "",
        "id": "q4367",
        "input": "python datetime is valid date",
        "output": "",
        "rule": [
            "d4367"
        ]
    },
    {
        "instruction": "",
        "id": "q4368",
        "input": "append to a map in python",
        "output": "",
        "rule": [
            "d4368"
        ]
    },
    {
        "instruction": "",
        "id": "q4369",
        "input": "python datetime milliseconds to utc",
        "output": "",
        "rule": [
            "d4369"
        ]
    },
    {
        "instruction": "",
        "id": "q4370",
        "input": "apply dictionary to replace letter in string python",
        "output": "",
        "rule": [
            "d4370"
        ]
    },
    {
        "instruction": "",
        "id": "q4371",
        "input": "python datetime subtract timezone",
        "output": "",
        "rule": [
            "d4371"
        ]
    },
    {
        "instruction": "",
        "id": "q4372",
        "input": "apply function in python to normalize data containing strings",
        "output": "",
        "rule": [
            "d4372"
        ]
    },
    {
        "instruction": "",
        "id": "q4373",
        "input": "python datetime to milliseconds since epoch",
        "output": "",
        "rule": [
            "d4373"
        ]
    },
    {
        "instruction": "",
        "id": "q4374",
        "input": "apply logging filter to all loggers python",
        "output": "",
        "rule": [
            "d4374"
        ]
    },
    {
        "instruction": "",
        "id": "q4375",
        "input": "python datetime to utc time",
        "output": "",
        "rule": [
            "d4375"
        ]
    },
    {
        "instruction": "",
        "id": "q4376",
        "input": "area of triangle cross product in numpy python",
        "output": "",
        "rule": [
            "d4376"
        ]
    },
    {
        "instruction": "",
        "id": "q4377",
        "input": "python datetime with nano second and timezone",
        "output": "",
        "rule": [
            "d4377"
        ]
    },
    {
        "instruction": "",
        "id": "q4378",
        "input": "argparse how to make a arguement the default python",
        "output": "",
        "rule": [
            "d4378"
        ]
    },
    {
        "instruction": "",
        "id": "q4379",
        "input": "python datetimes get quarter",
        "output": "",
        "rule": [
            "d4379"
        ]
    },
    {
        "instruction": "",
        "id": "q4380",
        "input": "array length in python django",
        "output": "",
        "rule": [
            "d4380"
        ]
    },
    {
        "instruction": "",
        "id": "q4381",
        "input": "python decoding a single byte to an int",
        "output": "",
        "rule": [
            "d4381"
        ]
    },
    {
        "instruction": "",
        "id": "q4382",
        "input": "array minus last n elements python",
        "output": "",
        "rule": [
            "d4382"
        ]
    },
    {
        "instruction": "",
        "id": "q4383",
        "input": "python decompress image file",
        "output": "",
        "rule": [
            "d4383"
        ]
    },
    {
        "instruction": "",
        "id": "q4384",
        "input": "array to scalar comparison python",
        "output": "",
        "rule": [
            "d4384"
        ]
    },
    {
        "instruction": "",
        "id": "q4385",
        "input": "python dedupe list with order",
        "output": "",
        "rule": [
            "d4385"
        ]
    },
    {
        "instruction": "",
        "id": "q4386",
        "input": "ask if a method can see a variable python",
        "output": "",
        "rule": [
            "d4386"
        ]
    },
    {
        "instruction": "",
        "id": "q4387",
        "input": "python default to nothing",
        "output": "",
        "rule": [
            "d4387"
        ]
    },
    {
        "instruction": "",
        "id": "q4388",
        "input": "aspect ratio python figures",
        "output": "",
        "rule": [
            "d4388"
        ]
    },
    {
        "instruction": "",
        "id": "q4389",
        "input": "python define function within a functino",
        "output": "",
        "rule": [
            "d4389"
        ]
    },
    {
        "instruction": "",
        "id": "q4390",
        "input": "assert function with a list and an int python",
        "output": "",
        "rule": [
            "d4390"
        ]
    },
    {
        "instruction": "",
        "id": "q4391",
        "input": "python delet a cell",
        "output": "",
        "rule": [
            "d4391"
        ]
    },
    {
        "instruction": "",
        "id": "q4392",
        "input": "python delete a singleton",
        "output": "",
        "rule": [
            "d4392"
        ]
    },
    {
        "instruction": "",
        "id": "q4393",
        "input": "asyncio python synchronous access",
        "output": "",
        "rule": [
            "d4393"
        ]
    },
    {
        "instruction": "",
        "id": "q4394",
        "input": "python delete directory not empty",
        "output": "",
        "rule": [
            "d4394"
        ]
    },
    {
        "instruction": "",
        "id": "q4395",
        "input": "att tzinfo to datetime python",
        "output": "",
        "rule": [
            "d4395"
        ]
    },
    {
        "instruction": "",
        "id": "q4396",
        "input": "python delete item from deque",
        "output": "",
        "rule": [
            "d4396"
        ]
    },
    {
        "instruction": "",
        "id": "q4397",
        "input": "average length of a words in a set python",
        "output": "",
        "rule": [
            "d4397"
        ]
    },
    {
        "instruction": "",
        "id": "q4398",
        "input": "python deleting rows with empty variables",
        "output": "",
        "rule": [
            "d4398"
        ]
    },
    {
        "instruction": "",
        "id": "q4399",
        "input": "aws compiled python to lambda",
        "output": "",
        "rule": [
            "d4399"
        ]
    },
    {
        "instruction": "",
        "id": "q4400",
        "input": "python desiredcapabilities chrome useragent",
        "output": "",
        "rule": [
            "d4400"
        ]
    },
    {
        "instruction": "",
        "id": "q4401",
        "input": "axesgrid every subplot has its x and y axis python",
        "output": "",
        "rule": [
            "d4401"
        ]
    },
    {
        "instruction": "",
        "id": "q4402",
        "input": "python detect file is locked by other process",
        "output": "",
        "rule": [
            "d4402"
        ]
    },
    {
        "instruction": "",
        "id": "q4403",
        "input": "axisobject set xlim python",
        "output": "",
        "rule": [
            "d4403"
        ]
    },
    {
        "instruction": "",
        "id": "q4404",
        "input": "python detect if self networking is alive",
        "output": "",
        "rule": [
            "d4404"
        ]
    },
    {
        "instruction": "",
        "id": "q4405",
        "input": "bearing calculation python using lat and long",
        "output": "",
        "rule": [
            "d4405"
        ]
    },
    {
        "instruction": "",
        "id": "q4406",
        "input": "python detect interactive mode",
        "output": "",
        "rule": [
            "d4406"
        ]
    },
    {
        "instruction": "",
        "id": "q4407",
        "input": "python detect object from image and segment",
        "output": "",
        "rule": [
            "d4407"
        ]
    },
    {
        "instruction": "",
        "id": "q4408",
        "input": "best way to swap rows in a matrix in python for partial pivoting",
        "output": "",
        "rule": [
            "d4408"
        ]
    },
    {
        "instruction": "",
        "id": "q4409",
        "input": "python detect pid exist",
        "output": "",
        "rule": [
            "d4409"
        ]
    },
    {
        "instruction": "",
        "id": "q4410",
        "input": "bigquery python create table from query",
        "output": "",
        "rule": [
            "d4410"
        ]
    },
    {
        "instruction": "",
        "id": "q4411",
        "input": "python determine file extensions",
        "output": "",
        "rule": [
            "d4411"
        ]
    },
    {
        "instruction": "",
        "id": "q4412",
        "input": "blender python dot notation to bracket string",
        "output": "",
        "rule": [
            "d4412"
        ]
    },
    {
        "instruction": "",
        "id": "q4413",
        "input": "python determine how matrix is singuar",
        "output": "",
        "rule": [
            "d4413"
        ]
    },
    {
        "instruction": "",
        "id": "q4414",
        "input": "boost python compiled python code",
        "output": "",
        "rule": [
            "d4414"
        ]
    },
    {
        "instruction": "",
        "id": "q4415",
        "input": "python determine if enum has key/value pair",
        "output": "",
        "rule": [
            "d4415"
        ]
    },
    {
        "instruction": "",
        "id": "q4416",
        "input": "bootstrap sampling with variable subsets in python",
        "output": "",
        "rule": [
            "d4416"
        ]
    },
    {
        "instruction": "",
        "id": "q4417",
        "input": "python determine if inside functions",
        "output": "",
        "rule": [
            "d4417"
        ]
    },
    {
        "instruction": "",
        "id": "q4418",
        "input": "boto3 python list ec2 instances in multiple accounts",
        "output": "",
        "rule": [
            "d4418"
        ]
    },
    {
        "instruction": "",
        "id": "q4419",
        "input": "python determine if string is file with file extension",
        "output": "",
        "rule": [
            "d4419"
        ]
    },
    {
        "instruction": "",
        "id": "q4420",
        "input": "bottle python static files",
        "output": "",
        "rule": [
            "d4420"
        ]
    },
    {
        "instruction": "",
        "id": "q4421",
        "input": "python determine the width of a character",
        "output": "",
        "rule": [
            "d4421"
        ]
    },
    {
        "instruction": "",
        "id": "q4422",
        "input": "boxplot for multiple columns python",
        "output": "",
        "rule": [
            "d4422"
        ]
    },
    {
        "instruction": "",
        "id": "q4423",
        "input": "python determning if file is text",
        "output": "",
        "rule": [
            "d4423"
        ]
    },
    {
        "instruction": "",
        "id": "q4424",
        "input": "bring an item to the front of a list python",
        "output": "",
        "rule": [
            "d4424"
        ]
    },
    {
        "instruction": "",
        "id": "q4425",
        "input": "python dict all values identical",
        "output": "",
        "rule": [
            "d4425"
        ]
    },
    {
        "instruction": "",
        "id": "q4426",
        "input": "bs get element by id python",
        "output": "",
        "rule": [
            "d4426"
        ]
    },
    {
        "instruction": "",
        "id": "q4427",
        "input": "python dict delete empty",
        "output": "",
        "rule": [
            "d4427"
        ]
    },
    {
        "instruction": "",
        "id": "q4428",
        "input": "build rpm with python",
        "output": "",
        "rule": [
            "d4428"
        ]
    },
    {
        "instruction": "",
        "id": "q4429",
        "input": "python dict iterate update",
        "output": "",
        "rule": [
            "d4429"
        ]
    },
    {
        "instruction": "",
        "id": "q4430",
        "input": "built in function to check a datatype is list or not in python",
        "output": "",
        "rule": [
            "d4430"
        ]
    },
    {
        "instruction": "",
        "id": "q4431",
        "input": "python dict to matrix numpy",
        "output": "",
        "rule": [
            "d4431"
        ]
    },
    {
        "instruction": "",
        "id": "q4432",
        "input": "bypass ssl python requests",
        "output": "",
        "rule": [
            "d4432"
        ]
    },
    {
        "instruction": "",
        "id": "q4433",
        "input": "python dict to urlstring",
        "output": "",
        "rule": [
            "d4433"
        ]
    },
    {
        "instruction": "",
        "id": "q4434",
        "input": "c++ timespec to python",
        "output": "",
        "rule": [
            "d4434"
        ]
    },
    {
        "instruction": "",
        "id": "q4435",
        "input": "python dictionary clone idempotent",
        "output": "",
        "rule": [
            "d4435"
        ]
    },
    {
        "instruction": "",
        "id": "q4436",
        "input": "calculate annual growth python",
        "output": "",
        "rule": [
            "d4436"
        ]
    },
    {
        "instruction": "",
        "id": "q4437",
        "input": "python dictionary keys values consistent",
        "output": "",
        "rule": [
            "d4437"
        ]
    },
    {
        "instruction": "",
        "id": "q4438",
        "input": "calculate expoential wieghted moving average in python",
        "output": "",
        "rule": [
            "d4438"
        ]
    },
    {
        "instruction": "",
        "id": "q4439",
        "input": "python dictionary pop multiple keys",
        "output": "",
        "rule": [
            "d4439"
        ]
    },
    {
        "instruction": "",
        "id": "q4440",
        "input": "calculate inverse of matrix in python",
        "output": "",
        "rule": [
            "d4440"
        ]
    },
    {
        "instruction": "",
        "id": "q4441",
        "input": "python dictionary update missing keys",
        "output": "",
        "rule": [
            "d4441"
        ]
    },
    {
        "instruction": "",
        "id": "q4442",
        "input": "calculate normalized vector python",
        "output": "",
        "rule": [
            "d4442"
        ]
    },
    {
        "instruction": "",
        "id": "q4443",
        "input": "python dictionary update recursively",
        "output": "",
        "rule": [
            "d4443"
        ]
    },
    {
        "instruction": "",
        "id": "q4444",
        "input": "calculate number of days from months python datetime",
        "output": "",
        "rule": [
            "d4444"
        ]
    },
    {
        "instruction": "",
        "id": "q4445",
        "input": "python dictionary update without replacement",
        "output": "",
        "rule": [
            "d4445"
        ]
    },
    {
        "instruction": "",
        "id": "q4446",
        "input": "calculate number of non nan in array python",
        "output": "",
        "rule": [
            "d4446"
        ]
    },
    {
        "instruction": "",
        "id": "q4447",
        "input": "python different c types for array",
        "output": "",
        "rule": [
            "d4447"
        ]
    },
    {
        "instruction": "",
        "id": "q4448",
        "input": "calculate std deviation python",
        "output": "",
        "rule": [
            "d4448"
        ]
    },
    {
        "instruction": "",
        "id": "q4449",
        "input": "python directory permission check",
        "output": "",
        "rule": [
            "d4449"
        ]
    },
    {
        "instruction": "",
        "id": "q4450",
        "input": "call a python function from javascript",
        "output": "",
        "rule": [
            "d4450"
        ]
    },
    {
        "instruction": "",
        "id": "q4451",
        "input": "python disable certificate validation globally",
        "output": "",
        "rule": [
            "d4451"
        ]
    },
    {
        "instruction": "",
        "id": "q4452",
        "input": "can functions have multiple returns python",
        "output": "",
        "rule": [
            "d4452"
        ]
    },
    {
        "instruction": "",
        "id": "q4453",
        "input": "python disable ssl certificate verify",
        "output": "",
        "rule": [
            "d4453"
        ]
    },
    {
        "instruction": "",
        "id": "q4454",
        "input": "can i clear the window in python after creating something",
        "output": "",
        "rule": [
            "d4454"
        ]
    },
    {
        "instruction": "",
        "id": "q4455",
        "input": "python disable type conversions to numeric",
        "output": "",
        "rule": [
            "d4455"
        ]
    },
    {
        "instruction": "",
        "id": "q4456",
        "input": "can python send function send a maximum number of bytes",
        "output": "",
        "rule": [
            "d4456"
        ]
    },
    {
        "instruction": "",
        "id": "q4457",
        "input": "python discard imaginary complex int",
        "output": "",
        "rule": [
            "d4457"
        ]
    },
    {
        "instruction": "",
        "id": "q4458",
        "input": "can python use uniccode characters",
        "output": "",
        "rule": [
            "d4458"
        ]
    },
    {
        "instruction": "",
        "id": "q4459",
        "input": "python display a graphviz graph object",
        "output": "",
        "rule": [
            "d4459"
        ]
    },
    {
        "instruction": "",
        "id": "q4460",
        "input": "capital letter function python",
        "output": "",
        "rule": [
            "d4460"
        ]
    },
    {
        "instruction": "",
        "id": "q4461",
        "input": "python display shape without window",
        "output": "",
        "rule": [
            "d4461"
        ]
    },
    {
        "instruction": "",
        "id": "q4462",
        "input": "capitalize elements in a list python",
        "output": "",
        "rule": [
            "d4462"
        ]
    },
    {
        "instruction": "",
        "id": "q4463",
        "input": "python distance between points in graphs",
        "output": "",
        "rule": [
            "d4463"
        ]
    },
    {
        "instruction": "",
        "id": "q4464",
        "input": "capitalize function in python for lists",
        "output": "",
        "rule": [
            "d4464"
        ]
    },
    {
        "instruction": "",
        "id": "q4465",
        "input": "python django delete killed",
        "output": "",
        "rule": [
            "d4465"
        ]
    },
    {
        "instruction": "",
        "id": "q4466",
        "input": "capitolize first letter python",
        "output": "",
        "rule": [
            "d4466"
        ]
    },
    {
        "instruction": "",
        "id": "q4467",
        "input": "python django how to show images",
        "output": "",
        "rule": [
            "d4467"
        ]
    },
    {
        "instruction": "",
        "id": "q4468",
        "input": "capture output from python call subprocess",
        "output": "",
        "rule": [
            "d4468"
        ]
    },
    {
        "instruction": "",
        "id": "q4469",
        "input": "python django js assert",
        "output": "",
        "rule": [
            "d4469"
        ]
    },
    {
        "instruction": "",
        "id": "q4470",
        "input": "capture python back traces in logs",
        "output": "",
        "rule": [
            "d4470"
        ]
    },
    {
        "instruction": "",
        "id": "q4471",
        "input": "python django makemigrations from model changes",
        "output": "",
        "rule": [
            "d4471"
        ]
    },
    {
        "instruction": "",
        "id": "q4472",
        "input": "case insensitve matching python",
        "output": "",
        "rule": [
            "d4472"
        ]
    },
    {
        "instruction": "",
        "id": "q4473",
        "input": "python django mock httprequest",
        "output": "",
        "rule": [
            "d4473"
        ]
    },
    {
        "instruction": "",
        "id": "q4474",
        "input": "cast a variable to tz in python",
        "output": "",
        "rule": [
            "d4474"
        ]
    },
    {
        "instruction": "",
        "id": "q4475",
        "input": "python django register database routers",
        "output": "",
        "rule": [
            "d4475"
        ]
    },
    {
        "instruction": "",
        "id": "q4476",
        "input": "cast input string to boolean python",
        "output": "",
        "rule": [
            "d4476"
        ]
    },
    {
        "instruction": "",
        "id": "q4477",
        "input": "python docstring dictionary param",
        "output": "",
        "rule": [
            "d4477"
        ]
    },
    {
        "instruction": "",
        "id": "q4478",
        "input": "cast string as datetime object python",
        "output": "",
        "rule": [
            "d4478"
        ]
    },
    {
        "instruction": "",
        "id": "q4479",
        "input": "python docstring varible representation",
        "output": "",
        "rule": [
            "d4479"
        ]
    },
    {
        "instruction": "",
        "id": "q4480",
        "input": "cast string to enum python",
        "output": "",
        "rule": [
            "d4480"
        ]
    },
    {
        "instruction": "",
        "id": "q4481",
        "input": "python docx section header",
        "output": "",
        "rule": [
            "d4481"
        ]
    },
    {
        "instruction": "",
        "id": "q4482",
        "input": "python dot notation for dict",
        "output": "",
        "rule": [
            "d4482"
        ]
    },
    {
        "instruction": "",
        "id": "q4483",
        "input": "cautoonverter from java to python",
        "output": "",
        "rule": [
            "d4483"
        ]
    },
    {
        "instruction": "",
        "id": "q4484",
        "input": "python double underscore attributes",
        "output": "",
        "rule": [
            "d4484"
        ]
    },
    {
        "instruction": "",
        "id": "q4485",
        "input": "change a bytes object to str python",
        "output": "",
        "rule": [
            "d4485"
        ]
    },
    {
        "instruction": "",
        "id": "q4486",
        "input": "python double underscore function name",
        "output": "",
        "rule": [
            "d4486"
        ]
    },
    {
        "instruction": "",
        "id": "q4487",
        "input": "change aspect ratio of graph python",
        "output": "",
        "rule": [
            "d4487"
        ]
    },
    {
        "instruction": "",
        "id": "q4488",
        "input": "change data type to date not time python",
        "output": "",
        "rule": [
            "d4488"
        ]
    },
    {
        "instruction": "",
        "id": "q4489",
        "input": "python draw bounding box on a image",
        "output": "",
        "rule": [
            "d4489"
        ]
    },
    {
        "instruction": "",
        "id": "q4490",
        "input": "change delimiters in a list in python",
        "output": "",
        "rule": [
            "d4490"
        ]
    },
    {
        "instruction": "",
        "id": "q4491",
        "input": "python drawing lines between coordinates",
        "output": "",
        "rule": [
            "d4491"
        ]
    },
    {
        "instruction": "",
        "id": "q4492",
        "input": "change directory cd function in python",
        "output": "",
        "rule": [
            "d4492"
        ]
    },
    {
        "instruction": "",
        "id": "q4493",
        "input": "python drop columns that may or may not exist",
        "output": "",
        "rule": [
            "d4493"
        ]
    },
    {
        "instruction": "",
        "id": "q4494",
        "input": "change gui window title python",
        "output": "",
        "rule": [
            "d4494"
        ]
    },
    {
        "instruction": "",
        "id": "q4495",
        "input": "python dynamic text input tkinter",
        "output": "",
        "rule": [
            "d4495"
        ]
    },
    {
        "instruction": "",
        "id": "q4496",
        "input": "change numpy type to integer in python",
        "output": "",
        "rule": [
            "d4496"
        ]
    },
    {
        "instruction": "",
        "id": "q4497",
        "input": "python dynamically set function name",
        "output": "",
        "rule": [
            "d4497"
        ]
    },
    {
        "instruction": "",
        "id": "q4498",
        "input": "change shape of an array in python",
        "output": "",
        "rule": [
            "d4498"
        ]
    },
    {
        "instruction": "",
        "id": "q4499",
        "input": "python efficiently check if a image is valid jpeg",
        "output": "",
        "rule": [
            "d4499"
        ]
    },
    {
        "instruction": "",
        "id": "q4500",
        "input": "change the data type of datarframe column python",
        "output": "",
        "rule": [
            "d4500"
        ]
    },
    {
        "instruction": "",
        "id": "q4501",
        "input": "python elasticsearch accurate matching",
        "output": "",
        "rule": [
            "d4501"
        ]
    },
    {
        "instruction": "",
        "id": "q4502",
        "input": "change timestamp column to datetime format column in python",
        "output": "",
        "rule": [
            "d4502"
        ]
    },
    {
        "instruction": "",
        "id": "q4503",
        "input": "python elasticsearch delete by query example",
        "output": "",
        "rule": [
            "d4503"
        ]
    },
    {
        "instruction": "",
        "id": "q4504",
        "input": "change user agent for my crawler python",
        "output": "",
        "rule": [
            "d4504"
        ]
    },
    {
        "instruction": "",
        "id": "q4505",
        "input": "python elasticsearch get all indices",
        "output": "",
        "rule": [
            "d4505"
        ]
    },
    {
        "instruction": "",
        "id": "q4506",
        "input": "change year of datetime python",
        "output": "",
        "rule": [
            "d4506"
        ]
    },
    {
        "instruction": "",
        "id": "q4507",
        "input": "python elasticsearch get all results",
        "output": "",
        "rule": [
            "d4507"
        ]
    },
    {
        "instruction": "",
        "id": "q4508",
        "input": "changing an array to a list python",
        "output": "",
        "rule": [
            "d4508"
        ]
    },
    {
        "instruction": "",
        "id": "q4509",
        "input": "python element tree get an element by name",
        "output": "",
        "rule": [
            "d4509"
        ]
    },
    {
        "instruction": "",
        "id": "q4510",
        "input": "changing the size of text for graph labels and titles in python",
        "output": "",
        "rule": [
            "d4510"
        ]
    },
    {
        "instruction": "",
        "id": "q4511",
        "input": "python element wise sign",
        "output": "",
        "rule": [
            "d4511"
        ]
    },
    {
        "instruction": "",
        "id": "q4512",
        "input": "changing window title in python",
        "output": "",
        "rule": [
            "d4512"
        ]
    },
    {
        "instruction": "",
        "id": "q4513",
        "input": "python elements that do not match between two sets",
        "output": "",
        "rule": [
            "d4513"
        ]
    },
    {
        "instruction": "",
        "id": "q4514",
        "input": "cheat engine python value type",
        "output": "",
        "rule": [
            "d4514"
        ]
    },
    {
        "instruction": "",
        "id": "q4515",
        "input": "python elementtree get attribute",
        "output": "",
        "rule": [
            "d4515"
        ]
    },
    {
        "instruction": "",
        "id": "q4516",
        "input": "check base64 encoding in python",
        "output": "",
        "rule": [
            "d4516"
        ]
    },
    {
        "instruction": "",
        "id": "q4517",
        "input": "python elementtree get parent node",
        "output": "",
        "rule": [
            "d4517"
        ]
    },
    {
        "instruction": "",
        "id": "q4518",
        "input": "check contents of a tuple in a list python",
        "output": "",
        "rule": [
            "d4518"
        ]
    },
    {
        "instruction": "",
        "id": "q4519",
        "input": "python elementtree replace value",
        "output": "",
        "rule": [
            "d4519"
        ]
    },
    {
        "instruction": "",
        "id": "q4520",
        "input": "check for element in array except for one python",
        "output": "",
        "rule": [
            "d4520"
        ]
    },
    {
        "instruction": "",
        "id": "q4521",
        "input": "python encoding is invalude for open",
        "output": "",
        "rule": [
            "d4521"
        ]
    },
    {
        "instruction": "",
        "id": "q4522",
        "input": "check for not nonetype python",
        "output": "",
        "rule": [
            "d4522"
        ]
    },
    {
        "instruction": "",
        "id": "q4523",
        "input": "python english word spelling corrector text with no space",
        "output": "",
        "rule": [
            "d4523"
        ]
    },
    {
        "instruction": "",
        "id": "q4524",
        "input": "check for values in an array python",
        "output": "",
        "rule": [
            "d4524"
        ]
    },
    {
        "instruction": "",
        "id": "q4525",
        "input": "python enum index name",
        "output": "",
        "rule": [
            "d4525"
        ]
    },
    {
        "instruction": "",
        "id": "q4526",
        "input": "check if a connection is made to a port python",
        "output": "",
        "rule": [
            "d4526"
        ]
    },
    {
        "instruction": "",
        "id": "q4527",
        "input": "python excetion text on several lines",
        "output": "",
        "rule": [
            "d4527"
        ]
    },
    {
        "instruction": "",
        "id": "q4528",
        "input": "check if a is df or not python",
        "output": "",
        "rule": [
            "d4528"
        ]
    },
    {
        "instruction": "",
        "id": "q4529",
        "input": "python exec globals locals",
        "output": "",
        "rule": [
            "d4529"
        ]
    },
    {
        "instruction": "",
        "id": "q4530",
        "input": "check if a key exist json python",
        "output": "",
        "rule": [
            "d4530"
        ]
    },
    {
        "instruction": "",
        "id": "q4531",
        "input": "python exit too quick",
        "output": "",
        "rule": [
            "d4531"
        ]
    },
    {
        "instruction": "",
        "id": "q4532",
        "input": "check if a number is in type of float python",
        "output": "",
        "rule": [
            "d4532"
        ]
    },
    {
        "instruction": "",
        "id": "q4533",
        "input": "python expand array into **kwargs",
        "output": "",
        "rule": [
            "d4533"
        ]
    },
    {
        "instruction": "",
        "id": "q4534",
        "input": "check if a variable is iterable python",
        "output": "",
        "rule": [
            "d4534"
        ]
    },
    {
        "instruction": "",
        "id": "q4535",
        "input": "python expand environment variables in string",
        "output": "",
        "rule": [
            "d4535"
        ]
    },
    {
        "instruction": "",
        "id": "q4536",
        "input": "check if an object is nested arbitrarily deep within a tuple python",
        "output": "",
        "rule": [
            "d4536"
        ]
    },
    {
        "instruction": "",
        "id": "q4537",
        "input": "python extract text with indentation in txt file",
        "output": "",
        "rule": [
            "d4537"
        ]
    },
    {
        "instruction": "",
        "id": "q4538",
        "input": "check if datetime obj none in python",
        "output": "",
        "rule": [
            "d4538"
        ]
    },
    {
        "instruction": "",
        "id": "q4539",
        "input": "check if dtype is string python",
        "output": "",
        "rule": [
            "d4539"
        ]
    },
    {
        "instruction": "",
        "id": "q4540",
        "input": "python fastest way to test if object is callable",
        "output": "",
        "rule": [
            "d4540"
        ]
    },
    {
        "instruction": "",
        "id": "q4541",
        "input": "check if env exists python",
        "output": "",
        "rule": [
            "d4541"
        ]
    },
    {
        "instruction": "",
        "id": "q4542",
        "input": "python ffmpeg was not found",
        "output": "",
        "rule": [
            "d4542"
        ]
    },
    {
        "instruction": "",
        "id": "q4543",
        "input": "check if file is json python",
        "output": "",
        "rule": [
            "d4543"
        ]
    },
    {
        "instruction": "",
        "id": "q4544",
        "input": "python fft high frequency resolution",
        "output": "",
        "rule": [
            "d4544"
        ]
    },
    {
        "instruction": "",
        "id": "q4545",
        "input": "check if files are same python",
        "output": "",
        "rule": [
            "d4545"
        ]
    },
    {
        "instruction": "",
        "id": "q4546",
        "input": "python fft returrn frequencies",
        "output": "",
        "rule": [
            "d4546"
        ]
    },
    {
        "instruction": "",
        "id": "q4547",
        "input": "check if input is integer or list python",
        "output": "",
        "rule": [
            "d4547"
        ]
    },
    {
        "instruction": "",
        "id": "q4548",
        "input": "python file opens then closes",
        "output": "",
        "rule": [
            "d4548"
        ]
    },
    {
        "instruction": "",
        "id": "q4549",
        "input": "check if linux python",
        "output": "",
        "rule": [
            "d4549"
        ]
    },
    {
        "instruction": "",
        "id": "q4550",
        "input": "python fillna with value for specific columns",
        "output": "",
        "rule": [
            "d4550"
        ]
    },
    {
        "instruction": "",
        "id": "q4551",
        "input": "check if object is sequence python",
        "output": "",
        "rule": [
            "d4551"
        ]
    },
    {
        "instruction": "",
        "id": "q4552",
        "input": "python filter columns in a defintion",
        "output": "",
        "rule": [
            "d4552"
        ]
    },
    {
        "instruction": "",
        "id": "q4553",
        "input": "check if sentence is palindrome python",
        "output": "",
        "rule": [
            "d4553"
        ]
    },
    {
        "instruction": "",
        "id": "q4554",
        "input": "python filter entries in dictionary",
        "output": "",
        "rule": [
            "d4554"
        ]
    },
    {
        "instruction": "",
        "id": "q4555",
        "input": "check if two strings are the same python",
        "output": "",
        "rule": [
            "d4555"
        ]
    },
    {
        "instruction": "",
        "id": "q4556",
        "input": "python filter nulls numpy",
        "output": "",
        "rule": [
            "d4556"
        ]
    },
    {
        "instruction": "",
        "id": "q4557",
        "input": "check if value is float in python",
        "output": "",
        "rule": [
            "d4557"
        ]
    },
    {
        "instruction": "",
        "id": "q4558",
        "input": "python finding a a value in list of tuples",
        "output": "",
        "rule": [
            "d4558"
        ]
    },
    {
        "instruction": "",
        "id": "q4559",
        "input": "check if variable is a string in python 3",
        "output": "",
        "rule": [
            "d4559"
        ]
    },
    {
        "instruction": "",
        "id": "q4560",
        "input": "python finding factors of a number",
        "output": "",
        "rule": [
            "d4560"
        ]
    },
    {
        "instruction": "",
        "id": "q4561",
        "input": "check if variable is string or int or double using python",
        "output": "",
        "rule": [
            "d4561"
        ]
    },
    {
        "instruction": "",
        "id": "q4562",
        "input": "python finding the first element or blank in array",
        "output": "",
        "rule": [
            "d4562"
        ]
    },
    {
        "instruction": "",
        "id": "q4563",
        "input": "check matrix empty python",
        "output": "",
        "rule": [
            "d4563"
        ]
    },
    {
        "instruction": "",
        "id": "q4564",
        "input": "python fit random points to a gaussian distribution",
        "output": "",
        "rule": [
            "d4564"
        ]
    },
    {
        "instruction": "",
        "id": "q4565",
        "input": "check python var valid",
        "output": "",
        "rule": [
            "d4565"
        ]
    },
    {
        "instruction": "",
        "id": "q4566",
        "input": "python fix encoding def",
        "output": "",
        "rule": [
            "d4566"
        ]
    },
    {
        "instruction": "",
        "id": "q4567",
        "input": "check that object is iterable in python",
        "output": "",
        "rule": [
            "d4567"
        ]
    },
    {
        "instruction": "",
        "id": "q4568",
        "input": "python flask blueprint has no attribute 'name'",
        "output": "",
        "rule": [
            "d4568"
        ]
    },
    {
        "instruction": "",
        "id": "q4569",
        "input": "check to see if lower case key is in python dictionary",
        "output": "",
        "rule": [
            "d4569"
        ]
    },
    {
        "instruction": "",
        "id": "q4570",
        "input": "python flask config object",
        "output": "",
        "rule": [
            "d4570"
        ]
    },
    {
        "instruction": "",
        "id": "q4571",
        "input": "check two matrixs equal python",
        "output": "",
        "rule": [
            "d4571"
        ]
    },
    {
        "instruction": "",
        "id": "q4572",
        "input": "python script chmod +x",
        "output": "",
        "rule": [
            "d4572"
        ]
    },
    {
        "instruction": "",
        "id": "q4573",
        "input": "check valid regex string python",
        "output": "",
        "rule": [
            "d4573"
        ]
    },
    {
        "instruction": "",
        "id": "q4574",
        "input": "python flask rendor template css",
        "output": "",
        "rule": [
            "d4574"
        ]
    },
    {
        "instruction": "",
        "id": "q4575",
        "input": "checking data type in python dtype",
        "output": "",
        "rule": [
            "d4575"
        ]
    },
    {
        "instruction": "",
        "id": "q4576",
        "input": "python flask response word",
        "output": "",
        "rule": [
            "d4576"
        ]
    },
    {
        "instruction": "",
        "id": "q4577",
        "input": "checking for equality between two objects python",
        "output": "",
        "rule": [
            "d4577"
        ]
    },
    {
        "instruction": "",
        "id": "q4578",
        "input": "python flask return content type",
        "output": "",
        "rule": [
            "d4578"
        ]
    },
    {
        "instruction": "",
        "id": "q4579",
        "input": "choose random from set python",
        "output": "",
        "rule": [
            "d4579"
        ]
    },
    {
        "instruction": "",
        "id": "q4580",
        "input": "python flatten a list",
        "output": "",
        "rule": [
            "d4580"
        ]
    },
    {
        "instruction": "",
        "id": "q4581",
        "input": "closest element in an array integer python",
        "output": "",
        "rule": [
            "d4581"
        ]
    },
    {
        "instruction": "",
        "id": "q4582",
        "input": "python flatten numpy array reshape",
        "output": "",
        "rule": [
            "d4582"
        ]
    },
    {
        "instruction": "",
        "id": "q4583",
        "input": "code to avoid scrapping duplicate links using beautifulsoup in python",
        "output": "",
        "rule": [
            "d4583"
        ]
    },
    {
        "instruction": "",
        "id": "q4584",
        "input": "python float to string constant size",
        "output": "",
        "rule": [
            "d4584"
        ]
    },
    {
        "instruction": "",
        "id": "q4585",
        "input": "codec python read utf8 file",
        "output": "",
        "rule": [
            "d4585"
        ]
    },
    {
        "instruction": "",
        "id": "q4586",
        "input": "python for loop with a skip",
        "output": "",
        "rule": [
            "d4586"
        ]
    },
    {
        "instruction": "",
        "id": "q4587",
        "input": "codecs open( read utf 8 python",
        "output": "",
        "rule": [
            "d4587"
        ]
    },
    {
        "instruction": "",
        "id": "q4588",
        "input": "python for none values replace",
        "output": "",
        "rule": [
            "d4588"
        ]
    },
    {
        "instruction": "",
        "id": "q4589",
        "input": "codecs python byte encoding",
        "output": "",
        "rule": [
            "d4589"
        ]
    },
    {
        "instruction": "",
        "id": "q4590",
        "input": "python format string varaible",
        "output": "",
        "rule": [
            "d4590"
        ]
    },
    {
        "instruction": "",
        "id": "q4591",
        "input": "collecting the column names in python",
        "output": "",
        "rule": [
            "d4591"
        ]
    },
    {
        "instruction": "",
        "id": "q4592",
        "input": "python format width pad",
        "output": "",
        "rule": [
            "d4592"
        ]
    },
    {
        "instruction": "",
        "id": "q4593",
        "input": "color string changer python",
        "output": "",
        "rule": [
            "d4593"
        ]
    },
    {
        "instruction": "",
        "id": "q4594",
        "input": "python ftp directory list to know if it is a folder or file",
        "output": "",
        "rule": [
            "d4594"
        ]
    },
    {
        "instruction": "",
        "id": "q4595",
        "input": "column names for array python",
        "output": "",
        "rule": [
            "d4595"
        ]
    },
    {
        "instruction": "",
        "id": "q4596",
        "input": "python ftp server for windows",
        "output": "",
        "rule": [
            "d4596"
        ]
    },
    {
        "instruction": "",
        "id": "q4597",
        "input": "combine 2 maps python",
        "output": "",
        "rule": [
            "d4597"
        ]
    },
    {
        "instruction": "",
        "id": "q4598",
        "input": "python ftp write file filedata",
        "output": "",
        "rule": [
            "d4598"
        ]
    },
    {
        "instruction": "",
        "id": "q4599",
        "input": "combine multiple lists into dictionary in python",
        "output": "",
        "rule": [
            "d4599"
        ]
    },
    {
        "instruction": "",
        "id": "q4600",
        "input": "python func to print multiple doc",
        "output": "",
        "rule": [
            "d4600"
        ]
    },
    {
        "instruction": "",
        "id": "q4601",
        "input": "compare 2 arrays in python and calculate same results",
        "output": "",
        "rule": [
            "d4601"
        ]
    },
    {
        "instruction": "",
        "id": "q4602",
        "input": "python function acceps scalar and array",
        "output": "",
        "rule": [
            "d4602"
        ]
    },
    {
        "instruction": "",
        "id": "q4603",
        "input": "compare python flask and iis",
        "output": "",
        "rule": [
            "d4603"
        ]
    },
    {
        "instruction": "",
        "id": "q4604",
        "input": "python function args as dict",
        "output": "",
        "rule": [
            "d4604"
        ]
    },
    {
        "instruction": "",
        "id": "q4605",
        "input": "compare str and int in python",
        "output": "",
        "rule": [
            "d4605"
        ]
    },
    {
        "instruction": "",
        "id": "q4606",
        "input": "python function argurments kwargs setattr",
        "output": "",
        "rule": [
            "d4606"
        ]
    },
    {
        "instruction": "",
        "id": "q4607",
        "input": "compare two file data in python",
        "output": "",
        "rule": [
            "d4607"
        ]
    },
    {
        "instruction": "",
        "id": "q4608",
        "input": "python function calculate hamming distance function",
        "output": "",
        "rule": [
            "d4608"
        ]
    },
    {
        "instruction": "",
        "id": "q4609",
        "input": "comparing float and int in python",
        "output": "",
        "rule": [
            "d4609"
        ]
    },
    {
        "instruction": "",
        "id": "q4610",
        "input": "python function get free disk space linux",
        "output": "",
        "rule": [
            "d4610"
        ]
    },
    {
        "instruction": "",
        "id": "q4611",
        "input": "comparing float to int python",
        "output": "",
        "rule": [
            "d4611"
        ]
    },
    {
        "instruction": "",
        "id": "q4612",
        "input": "python function maybe static",
        "output": "",
        "rule": [
            "d4612"
        ]
    },
    {
        "instruction": "",
        "id": "q4613",
        "input": "comparing lengths of two strings python",
        "output": "",
        "rule": [
            "d4613"
        ]
    },
    {
        "instruction": "",
        "id": "q4614",
        "input": "python function providing default as null value",
        "output": "",
        "rule": [
            "d4614"
        ]
    },
    {
        "instruction": "",
        "id": "q4615",
        "input": "compile a python file",
        "output": "",
        "rule": [
            "d4615"
        ]
    },
    {
        "instruction": "",
        "id": "q4616",
        "input": "compute amount of memory used by object python",
        "output": "",
        "rule": [
            "d4616"
        ]
    },
    {
        "instruction": "",
        "id": "q4617",
        "input": "python function to generate numbers in a sin wave",
        "output": "",
        "rule": [
            "d4617"
        ]
    },
    {
        "instruction": "",
        "id": "q4618",
        "input": "compute cdf python given array and weights",
        "output": "",
        "rule": [
            "d4618"
        ]
    },
    {
        "instruction": "",
        "id": "q4619",
        "input": "python function to remove all non english letters",
        "output": "",
        "rule": [
            "d4619"
        ]
    },
    {
        "instruction": "",
        "id": "q4620",
        "input": "compute manhattan heuristic in python",
        "output": "",
        "rule": [
            "d4620"
        ]
    },
    {
        "instruction": "",
        "id": "q4621",
        "input": "python function to return values from a website",
        "output": "",
        "rule": [
            "d4621"
        ]
    },
    {
        "instruction": "",
        "id": "q4622",
        "input": "compute skew python numpy",
        "output": "",
        "rule": [
            "d4622"
        ]
    },
    {
        "instruction": "",
        "id": "q4623",
        "input": "python function to strip whitespace",
        "output": "",
        "rule": [
            "d4623"
        ]
    },
    {
        "instruction": "",
        "id": "q4624",
        "input": "compute the gradient using a kernel and an image python",
        "output": "",
        "rule": [
            "d4624"
        ]
    },
    {
        "instruction": "",
        "id": "q4625",
        "input": "python function to uncompress the zipfiles and put them in a directory",
        "output": "",
        "rule": [
            "d4625"
        ]
    },
    {
        "instruction": "",
        "id": "q4626",
        "input": "computing distance matrix in python",
        "output": "",
        "rule": [
            "d4626"
        ]
    },
    {
        "instruction": "",
        "id": "q4627",
        "input": "python functions equivalent to average deviation",
        "output": "",
        "rule": [
            "d4627"
        ]
    },
    {
        "instruction": "",
        "id": "q4628",
        "input": "computing fft on rows in a matrix in python",
        "output": "",
        "rule": [
            "d4628"
        ]
    },
    {
        "instruction": "",
        "id": "q4629",
        "input": "python generalised extreme value",
        "output": "",
        "rule": [
            "d4629"
        ]
    },
    {
        "instruction": "",
        "id": "q4630",
        "input": "concatenate filename with datetime python",
        "output": "",
        "rule": [
            "d4630"
        ]
    },
    {
        "instruction": "",
        "id": "q4631",
        "input": "python generate a guid",
        "output": "",
        "rule": [
            "d4631"
        ]
    },
    {
        "instruction": "",
        "id": "q4632",
        "input": "configure python to trust ssl",
        "output": "",
        "rule": [
            "d4632"
        ]
    },
    {
        "instruction": "",
        "id": "q4633",
        "input": "python generate a numpy array of zeros",
        "output": "",
        "rule": [
            "d4633"
        ]
    },
    {
        "instruction": "",
        "id": "q4634",
        "input": "connect to rest server with bearer token requests python",
        "output": "",
        "rule": [
            "d4634"
        ]
    },
    {
        "instruction": "",
        "id": "q4635",
        "input": "python generate a temporary file with random file name",
        "output": "",
        "rule": [
            "d4635"
        ]
    },
    {
        "instruction": "",
        "id": "q4636",
        "input": "construct adjacency matrix python",
        "output": "",
        "rule": [
            "d4636"
        ]
    },
    {
        "instruction": "",
        "id": "q4637",
        "input": "python generate guid string",
        "output": "",
        "rule": [
            "d4637"
        ]
    },
    {
        "instruction": "",
        "id": "q4638",
        "input": "construct tensorflow tensor from python list",
        "output": "",
        "rule": [
            "d4638"
        ]
    },
    {
        "instruction": "",
        "id": "q4639",
        "input": "python generate json based on jsonschema definition",
        "output": "",
        "rule": [
            "d4639"
        ]
    },
    {
        "instruction": "",
        "id": "q4640",
        "input": "consume paged responses python api",
        "output": "",
        "rule": [
            "d4640"
        ]
    },
    {
        "instruction": "",
        "id": "q4641",
        "input": "python generate single period of sine wave",
        "output": "",
        "rule": [
            "d4641"
        ]
    },
    {
        "instruction": "",
        "id": "q4642",
        "input": "content type flask python",
        "output": "",
        "rule": [
            "d4642"
        ]
    },
    {
        "instruction": "",
        "id": "q4643",
        "input": "python generic name for a string",
        "output": "",
        "rule": [
            "d4643"
        ]
    },
    {
        "instruction": "",
        "id": "q4644",
        "input": "context menu click event python",
        "output": "",
        "rule": [
            "d4644"
        ]
    },
    {
        "instruction": "",
        "id": "q4645",
        "input": "python get a list of all files in a directory using pathlib",
        "output": "",
        "rule": [
            "d4645"
        ]
    },
    {
        "instruction": "",
        "id": "q4646",
        "input": "control window position python",
        "output": "",
        "rule": [
            "d4646"
        ]
    },
    {
        "instruction": "",
        "id": "q4647",
        "input": "python get a list of the files in a directory",
        "output": "",
        "rule": [
            "d4647"
        ]
    },
    {
        "instruction": "",
        "id": "q4648",
        "input": "converty query to string python",
        "output": "",
        "rule": [
            "d4648"
        ]
    },
    {
        "instruction": "",
        "id": "q4649",
        "input": "python get a list of unique items",
        "output": "",
        "rule": [
            "d4649"
        ]
    },
    {
        "instruction": "",
        "id": "q4650",
        "input": "coolwarm python color palette",
        "output": "",
        "rule": [
            "d4650"
        ]
    },
    {
        "instruction": "",
        "id": "q4651",
        "input": "python get a median datetime",
        "output": "",
        "rule": [
            "d4651"
        ]
    },
    {
        "instruction": "",
        "id": "q4652",
        "input": "coordinates on a grid in python",
        "output": "",
        "rule": [
            "d4652"
        ]
    },
    {
        "instruction": "",
        "id": "q4653",
        "input": "python get abspath from relative path",
        "output": "",
        "rule": [
            "d4653"
        ]
    },
    {
        "instruction": "",
        "id": "q4654",
        "input": "corrcoef python returns nan",
        "output": "",
        "rule": [
            "d4654"
        ]
    },
    {
        "instruction": "",
        "id": "q4655",
        "input": "python get active browser url",
        "output": "",
        "rule": [
            "d4655"
        ]
    },
    {
        "instruction": "",
        "id": "q4656",
        "input": "count number of spaces in python string text",
        "output": "",
        "rule": [
            "d4656"
        ]
    },
    {
        "instruction": "",
        "id": "q4657",
        "input": "python get all child objects",
        "output": "",
        "rule": [
            "d4657"
        ]
    },
    {
        "instruction": "",
        "id": "q4658",
        "input": "count the number of open brackets in a string using python",
        "output": "",
        "rule": [
            "d4658"
        ]
    },
    {
        "instruction": "",
        "id": "q4659",
        "input": "python get all days in a month",
        "output": "",
        "rule": [
            "d4659"
        ]
    },
    {
        "instruction": "",
        "id": "q4660",
        "input": "count the number of total nan values in a column python",
        "output": "",
        "rule": [
            "d4660"
        ]
    },
    {
        "instruction": "",
        "id": "q4661",
        "input": "python get all permutation list",
        "output": "",
        "rule": [
            "d4661"
        ]
    },
    {
        "instruction": "",
        "id": "q4662",
        "input": "create a comma seperated string into a list python",
        "output": "",
        "rule": [
            "d4662"
        ]
    },
    {
        "instruction": "",
        "id": "q4663",
        "input": "python get appdata folder",
        "output": "",
        "rule": [
            "d4663"
        ]
    },
    {
        "instruction": "",
        "id": "q4664",
        "input": "create a new line in python without enter",
        "output": "",
        "rule": [
            "d4664"
        ]
    },
    {
        "instruction": "",
        "id": "q4665",
        "input": "python get audio volume",
        "output": "",
        "rule": [
            "d4665"
        ]
    },
    {
        "instruction": "",
        "id": "q4666",
        "input": "create a set of all letters in a string python",
        "output": "",
        "rule": [
            "d4666"
        ]
    },
    {
        "instruction": "",
        "id": "q4667",
        "input": "python get byte length of stream",
        "output": "",
        "rule": [
            "d4667"
        ]
    },
    {
        "instruction": "",
        "id": "q4668",
        "input": "create conda env with specific python",
        "output": "",
        "rule": [
            "d4668"
        ]
    },
    {
        "instruction": "",
        "id": "q4669",
        "input": "python get calling function frame info",
        "output": "",
        "rule": [
            "d4669"
        ]
    },
    {
        "instruction": "",
        "id": "q4670",
        "input": "create dense matrix from sparse matrix in python",
        "output": "",
        "rule": [
            "d4670"
        ]
    },
    {
        "instruction": "",
        "id": "q4671",
        "input": "python get command window width",
        "output": "",
        "rule": [
            "d4671"
        ]
    },
    {
        "instruction": "",
        "id": "q4672",
        "input": "create folder if not exists with pathlib python",
        "output": "",
        "rule": [
            "d4672"
        ]
    },
    {
        "instruction": "",
        "id": "q4673",
        "input": "python get coordinates of mouse",
        "output": "",
        "rule": [
            "d4673"
        ]
    },
    {
        "instruction": "",
        "id": "q4674",
        "input": "create list from unique values python",
        "output": "",
        "rule": [
            "d4674"
        ]
    },
    {
        "instruction": "",
        "id": "q4675",
        "input": "python get cpu specifications",
        "output": "",
        "rule": [
            "d4675"
        ]
    },
    {
        "instruction": "",
        "id": "q4676",
        "input": "create property file python",
        "output": "",
        "rule": [
            "d4676"
        ]
    },
    {
        "instruction": "",
        "id": "q4677",
        "input": "python get current git branch of file",
        "output": "",
        "rule": [
            "d4677"
        ]
    },
    {
        "instruction": "",
        "id": "q4678",
        "input": "create python object from dictionary vars",
        "output": "",
        "rule": [
            "d4678"
        ]
    },
    {
        "instruction": "",
        "id": "q4679",
        "input": "python get current memory usage never decrease",
        "output": "",
        "rule": [
            "d4679"
        ]
    },
    {
        "instruction": "",
        "id": "q4680",
        "input": "creating a colorbar without a scalar mappable python",
        "output": "",
        "rule": [
            "d4680"
        ]
    },
    {
        "instruction": "",
        "id": "q4681",
        "input": "python get date from string as date",
        "output": "",
        "rule": [
            "d4681"
        ]
    },
    {
        "instruction": "",
        "id": "q4682",
        "input": "creating a range of list to the value n python",
        "output": "",
        "rule": [
            "d4682"
        ]
    },
    {
        "instruction": "",
        "id": "q4683",
        "input": "python get default ini value",
        "output": "",
        "rule": [
            "d4683"
        ]
    },
    {
        "instruction": "",
        "id": "q4684",
        "input": "cstring to byte array python",
        "output": "",
        "rule": [
            "d4684"
        ]
    },
    {
        "instruction": "",
        "id": "q4685",
        "input": "python get default stdout handler",
        "output": "",
        "rule": [
            "d4685"
        ]
    },
    {
        "instruction": "",
        "id": "q4686",
        "input": "ctypes pointer to python buffer",
        "output": "",
        "rule": [
            "d4686"
        ]
    },
    {
        "instruction": "",
        "id": "q4687",
        "input": "python get dimension of 2d list",
        "output": "",
        "rule": [
            "d4687"
        ]
    },
    {
        "instruction": "",
        "id": "q4688",
        "input": "ctypes python load windows dll in linux",
        "output": "",
        "rule": [
            "d4688"
        ]
    },
    {
        "instruction": "",
        "id": "q4689",
        "input": "python get dpi from image",
        "output": "",
        "rule": [
            "d4689"
        ]
    },
    {
        "instruction": "",
        "id": "q4690",
        "input": "custom distance matrix python",
        "output": "",
        "rule": [
            "d4690"
        ]
    },
    {
        "instruction": "",
        "id": "q4691",
        "input": "python get earliest from list",
        "output": "",
        "rule": [
            "d4691"
        ]
    },
    {
        "instruction": "",
        "id": "q4692",
        "input": "customing the color in a scatter plot in python",
        "output": "",
        "rule": [
            "d4692"
        ]
    },
    {
        "instruction": "",
        "id": "q4693",
        "input": "python get ext of filename",
        "output": "",
        "rule": [
            "d4693"
        ]
    },
    {
        "instruction": "",
        "id": "q4694",
        "input": "cut down size of list python",
        "output": "",
        "rule": [
            "d4694"
        ]
    },
    {
        "instruction": "",
        "id": "q4695",
        "input": "python get first day of month fro month year",
        "output": "",
        "rule": [
            "d4695"
        ]
    },
    {
        "instruction": "",
        "id": "q4696",
        "input": "cv2 python scale image",
        "output": "",
        "rule": [
            "d4696"
        ]
    },
    {
        "instruction": "",
        "id": "q4697",
        "input": "python get fully qualified name",
        "output": "",
        "rule": [
            "d4697"
        ]
    },
    {
        "instruction": "",
        "id": "q4698",
        "input": "python get global var with name",
        "output": "",
        "rule": [
            "d4698"
        ]
    },
    {
        "instruction": "",
        "id": "q4699",
        "input": "de duplicate list in python",
        "output": "",
        "rule": [
            "d4699"
        ]
    },
    {
        "instruction": "",
        "id": "q4700",
        "input": "python get http file size",
        "output": "",
        "rule": [
            "d4700"
        ]
    },
    {
        "instruction": "",
        "id": "q4701",
        "input": "decision tree categorical python",
        "output": "",
        "rule": [
            "d4701"
        ]
    },
    {
        "instruction": "",
        "id": "q4702",
        "input": "python get index in iterator",
        "output": "",
        "rule": [
            "d4702"
        ]
    },
    {
        "instruction": "",
        "id": "q4703",
        "input": "decompile the python code",
        "output": "",
        "rule": [
            "d4703"
        ]
    },
    {
        "instruction": "",
        "id": "q4704",
        "input": "python get instance by string",
        "output": "",
        "rule": [
            "d4704"
        ]
    },
    {
        "instruction": "",
        "id": "q4705",
        "input": "defining object equality in python",
        "output": "",
        "rule": [
            "d4705"
        ]
    },
    {
        "instruction": "",
        "id": "q4706",
        "input": "python get item at index",
        "output": "",
        "rule": [
            "d4706"
        ]
    },
    {
        "instruction": "",
        "id": "q4707",
        "input": "deleating all references in python",
        "output": "",
        "rule": [
            "d4707"
        ]
    },
    {
        "instruction": "",
        "id": "q4708",
        "input": "python get iterator to values in dict",
        "output": "",
        "rule": [
            "d4708"
        ]
    },
    {
        "instruction": "",
        "id": "q4709",
        "input": "delete a directory in python",
        "output": "",
        "rule": [
            "d4709"
        ]
    },
    {
        "instruction": "",
        "id": "q4710",
        "input": "delete a label in python",
        "output": "",
        "rule": [
            "d4710"
        ]
    },
    {
        "instruction": "",
        "id": "q4711",
        "input": "python get list of properties on instance",
        "output": "",
        "rule": [
            "d4711"
        ]
    },
    {
        "instruction": "",
        "id": "q4712",
        "input": "delete all files except one in python",
        "output": "",
        "rule": [
            "d4712"
        ]
    },
    {
        "instruction": "",
        "id": "q4713",
        "input": "python get longitude and latitude by name",
        "output": "",
        "rule": [
            "d4713"
        ]
    },
    {
        "instruction": "",
        "id": "q4714",
        "input": "delete element in deque python",
        "output": "",
        "rule": [
            "d4714"
        ]
    },
    {
        "instruction": "",
        "id": "q4715",
        "input": "python get median between 2 values",
        "output": "",
        "rule": [
            "d4715"
        ]
    },
    {
        "instruction": "",
        "id": "q4716",
        "input": "delete empty elements from a list in python",
        "output": "",
        "rule": [
            "d4716"
        ]
    },
    {
        "instruction": "",
        "id": "q4717",
        "input": "python get model name from model",
        "output": "",
        "rule": [
            "d4717"
        ]
    },
    {
        "instruction": "",
        "id": "q4718",
        "input": "delete zero components in a matrix python",
        "output": "",
        "rule": [
            "d4718"
        ]
    },
    {
        "instruction": "",
        "id": "q4719",
        "input": "python get music pause",
        "output": "",
        "rule": [
            "d4719"
        ]
    },
    {
        "instruction": "",
        "id": "q4720",
        "input": "deleting files in a directory in python",
        "output": "",
        "rule": [
            "d4720"
        ]
    },
    {
        "instruction": "",
        "id": "q4721",
        "input": "python get n last values in array",
        "output": "",
        "rule": [
            "d4721"
        ]
    },
    {
        "instruction": "",
        "id": "q4722",
        "input": "detect mounted image python windows",
        "output": "",
        "rule": [
            "d4722"
        ]
    },
    {
        "instruction": "",
        "id": "q4723",
        "input": "python get name of type from type object",
        "output": "",
        "rule": [
            "d4723"
        ]
    },
    {
        "instruction": "",
        "id": "q4724",
        "input": "determine data type from value python",
        "output": "",
        "rule": [
            "d4724"
        ]
    },
    {
        "instruction": "",
        "id": "q4725",
        "input": "python get next month datetime",
        "output": "",
        "rule": [
            "d4725"
        ]
    },
    {
        "instruction": "",
        "id": "q4726",
        "input": "determine data type in python datafram",
        "output": "",
        "rule": [
            "d4726"
        ]
    },
    {
        "instruction": "",
        "id": "q4727",
        "input": "python get parent directory name",
        "output": "",
        "rule": [
            "d4727"
        ]
    },
    {
        "instruction": "",
        "id": "q4728",
        "input": "determine distance between two lat long python",
        "output": "",
        "rule": [
            "d4728"
        ]
    },
    {
        "instruction": "",
        "id": "q4729",
        "input": "python get property by name string",
        "output": "",
        "rule": [
            "d4729"
        ]
    },
    {
        "instruction": "",
        "id": "q4730",
        "input": "determine the size of a 2d list python",
        "output": "",
        "rule": [
            "d4730"
        ]
    },
    {
        "instruction": "",
        "id": "q4731",
        "input": "python get property by string",
        "output": "",
        "rule": [
            "d4731"
        ]
    },
    {
        "instruction": "",
        "id": "q4732",
        "input": "dictionary to html python",
        "output": "",
        "rule": [
            "d4732"
        ]
    },
    {
        "instruction": "",
        "id": "q4733",
        "input": "python get redis values",
        "output": "",
        "rule": [
            "d4733"
        ]
    },
    {
        "instruction": "",
        "id": "q4734",
        "input": "dictionary update method python with string variable",
        "output": "",
        "rule": [
            "d4734"
        ]
    },
    {
        "instruction": "",
        "id": "q4735",
        "input": "python get size of buffer",
        "output": "",
        "rule": [
            "d4735"
        ]
    },
    {
        "instruction": "",
        "id": "q4736",
        "input": "difflib to compare two dictionaries python",
        "output": "",
        "rule": [
            "d4736"
        ]
    },
    {
        "instruction": "",
        "id": "q4737",
        "input": "python get the latest modified folder in directory",
        "output": "",
        "rule": [
            "d4737"
        ]
    },
    {
        "instruction": "",
        "id": "q4738",
        "input": "disable max path limit lenght in python",
        "output": "",
        "rule": [
            "d4738"
        ]
    },
    {
        "instruction": "",
        "id": "q4739",
        "input": "python get the number of fields in a table",
        "output": "",
        "rule": [
            "d4739"
        ]
    },
    {
        "instruction": "",
        "id": "q4740",
        "input": "discord python api get user from id",
        "output": "",
        "rule": [
            "d4740"
        ]
    },
    {
        "instruction": "",
        "id": "q4741",
        "input": "python get the numbr of microseconds in a timedelta",
        "output": "",
        "rule": [
            "d4741"
        ]
    },
    {
        "instruction": "",
        "id": "q4742",
        "input": "display an image from an url in python",
        "output": "",
        "rule": [
            "d4742"
        ]
    },
    {
        "instruction": "",
        "id": "q4743",
        "input": "python get total seconds gtom datetime64",
        "output": "",
        "rule": [
            "d4743"
        ]
    },
    {
        "instruction": "",
        "id": "q4744",
        "input": "display dictionary in order in python",
        "output": "",
        "rule": [
            "d4744"
        ]
    },
    {
        "instruction": "",
        "id": "q4745",
        "input": "python get tuple from string",
        "output": "",
        "rule": [
            "d4745"
        ]
    },
    {
        "instruction": "",
        "id": "q4746",
        "input": "displaying an image in a widget using python",
        "output": "",
        "rule": [
            "d4746"
        ]
    },
    {
        "instruction": "",
        "id": "q4747",
        "input": "python get unique pid",
        "output": "",
        "rule": [
            "d4747"
        ]
    },
    {
        "instruction": "",
        "id": "q4748",
        "input": "distance between two vectors python",
        "output": "",
        "rule": [
            "d4748"
        ]
    },
    {
        "instruction": "",
        "id": "q4749",
        "input": "python get user by pid",
        "output": "",
        "rule": [
            "d4749"
        ]
    },
    {
        "instruction": "",
        "id": "q4750",
        "input": "docker python script doesn't see env variables",
        "output": "",
        "rule": [
            "d4750"
        ]
    },
    {
        "instruction": "",
        "id": "q4751",
        "input": "python get user from email address",
        "output": "",
        "rule": [
            "d4751"
        ]
    },
    {
        "instruction": "",
        "id": "q4752",
        "input": "does python auto create files if they don't exist",
        "output": "",
        "rule": [
            "d4752"
        ]
    },
    {
        "instruction": "",
        "id": "q4753",
        "input": "python get windows userid ans password",
        "output": "",
        "rule": [
            "d4753"
        ]
    },
    {
        "instruction": "",
        "id": "q4754",
        "input": "does python file read comments",
        "output": "",
        "rule": [
            "d4754"
        ]
    },
    {
        "instruction": "",
        "id": "q4755",
        "input": "python get x,y indexes of certain elements in a matrix",
        "output": "",
        "rule": [
            "d4755"
        ]
    },
    {
        "instruction": "",
        "id": "q4756",
        "input": "does python print include linefeed",
        "output": "",
        "rule": [
            "d4756"
        ]
    },
    {
        "instruction": "",
        "id": "q4757",
        "input": "python getargs bool wrong behavior",
        "output": "",
        "rule": [
            "d4757"
        ]
    },
    {
        "instruction": "",
        "id": "q4758",
        "input": "dot file python parser",
        "output": "",
        "rule": [
            "d4758"
        ]
    },
    {
        "instruction": "",
        "id": "q4759",
        "input": "python getattribute data member",
        "output": "",
        "rule": [
            "d4759"
        ]
    },
    {
        "instruction": "",
        "id": "q4760",
        "input": "dot product between two 1d arrays python and put result in 2d array",
        "output": "",
        "rule": [
            "d4760"
        ]
    },
    {
        "instruction": "",
        "id": "q4761",
        "input": "python getlogger not working",
        "output": "",
        "rule": [
            "d4761"
        ]
    },
    {
        "instruction": "",
        "id": "q4762",
        "input": "dot source eqivalent in python",
        "output": "",
        "rule": [
            "d4762"
        ]
    },
    {
        "instruction": "",
        "id": "q4763",
        "input": "python git commit hook",
        "output": "",
        "rule": [
            "d4763"
        ]
    },
    {
        "instruction": "",
        "id": "q4764",
        "input": "draw a histogram of the probability distribution in python",
        "output": "",
        "rule": [
            "d4764"
        ]
    },
    {
        "instruction": "",
        "id": "q4765",
        "input": "python give file excute premission",
        "output": "",
        "rule": [
            "d4765"
        ]
    },
    {
        "instruction": "",
        "id": "q4766",
        "input": "draw a horizontal line python graphics",
        "output": "",
        "rule": [
            "d4766"
        ]
    },
    {
        "instruction": "",
        "id": "q4767",
        "input": "python give image buffer",
        "output": "",
        "rule": [
            "d4767"
        ]
    },
    {
        "instruction": "",
        "id": "q4768",
        "input": "drop column in a python data frame",
        "output": "",
        "rule": [
            "d4768"
        ]
    },
    {
        "instruction": "",
        "id": "q4769",
        "input": "python given number turn into date",
        "output": "",
        "rule": [
            "d4769"
        ]
    },
    {
        "instruction": "",
        "id": "q4770",
        "input": "dynamic 2d array without using builtin functions in python",
        "output": "",
        "rule": [
            "d4770"
        ]
    },
    {
        "instruction": "",
        "id": "q4771",
        "input": "python global variables in def",
        "output": "",
        "rule": [
            "d4771"
        ]
    },
    {
        "instruction": "",
        "id": "q4772",
        "input": "dynamic left aligning the text and specifying a width in python",
        "output": "",
        "rule": [
            "d4772"
        ]
    },
    {
        "instruction": "",
        "id": "q4773",
        "input": "efficient way of removing nan from a python array",
        "output": "",
        "rule": [
            "d4773"
        ]
    },
    {
        "instruction": "",
        "id": "q4774",
        "input": "python groupby multiple keys iterate",
        "output": "",
        "rule": [
            "d4774"
        ]
    },
    {
        "instruction": "",
        "id": "q4775",
        "input": "python handle string with forward slash in it",
        "output": "",
        "rule": [
            "d4775"
        ]
    },
    {
        "instruction": "",
        "id": "q4776",
        "input": "elasticsearch python api scroll",
        "output": "",
        "rule": [
            "d4776"
        ]
    },
    {
        "instruction": "",
        "id": "q4777",
        "input": "python hangs in git bash",
        "output": "",
        "rule": [
            "d4777"
        ]
    },
    {
        "instruction": "",
        "id": "q4778",
        "input": "eliminate duplicates in a list in python",
        "output": "",
        "rule": [
            "d4778"
        ]
    },
    {
        "instruction": "",
        "id": "q4779",
        "input": "python hashlib built in",
        "output": "",
        "rule": [
            "d4779"
        ]
    },
    {
        "instruction": "",
        "id": "q4780",
        "input": "encode a none type python",
        "output": "",
        "rule": [
            "d4780"
        ]
    },
    {
        "instruction": "",
        "id": "q4781",
        "input": "python hdf5 how to see groups",
        "output": "",
        "rule": [
            "d4781"
        ]
    },
    {
        "instruction": "",
        "id": "q4782",
        "input": "enum python name value",
        "output": "",
        "rule": [
            "d4782"
        ]
    },
    {
        "instruction": "",
        "id": "q4783",
        "input": "eric6 automatic syntax check chang to python2",
        "output": "",
        "rule": [
            "d4783"
        ]
    },
    {
        "instruction": "",
        "id": "q4784",
        "input": "python hhow to see the btye size of a btye arry",
        "output": "",
        "rule": [
            "d4784"
        ]
    },
    {
        "instruction": "",
        "id": "q4785",
        "input": "example overload str methods python",
        "output": "",
        "rule": [
            "d4785"
        ]
    },
    {
        "instruction": "",
        "id": "q4786",
        "input": "python histogram of oriented gradients overlay on image",
        "output": "",
        "rule": [
            "d4786"
        ]
    },
    {
        "instruction": "",
        "id": "q4787",
        "input": "examples of inner join in python",
        "output": "",
        "rule": [
            "d4787"
        ]
    },
    {
        "instruction": "",
        "id": "q4788",
        "input": "python histogram with custom bin edges",
        "output": "",
        "rule": [
            "d4788"
        ]
    },
    {
        "instruction": "",
        "id": "q4789",
        "input": "exclude some tests in coverage python",
        "output": "",
        "rule": [
            "d4789"
        ]
    },
    {
        "instruction": "",
        "id": "q4790",
        "input": "python how do you remove a directory if it is not empty",
        "output": "",
        "rule": [
            "d4790"
        ]
    },
    {
        "instruction": "",
        "id": "q4791",
        "input": "exit is not defined python",
        "output": "",
        "rule": [
            "d4791"
        ]
    },
    {
        "instruction": "",
        "id": "q4792",
        "input": "python how to access a file",
        "output": "",
        "rule": [
            "d4792"
        ]
    },
    {
        "instruction": "",
        "id": "q4793",
        "input": "extrect dict from list od dict python",
        "output": "",
        "rule": [
            "d4793"
        ]
    },
    {
        "instruction": "",
        "id": "q4794",
        "input": "python how to access context global",
        "output": "",
        "rule": [
            "d4794"
        ]
    },
    {
        "instruction": "",
        "id": "q4795",
        "input": "file name and number of pages for pdf file using python",
        "output": "",
        "rule": [
            "d4795"
        ]
    },
    {
        "instruction": "",
        "id": "q4796",
        "input": "python how to access environment variable definitions",
        "output": "",
        "rule": [
            "d4796"
        ]
    },
    {
        "instruction": "",
        "id": "q4797",
        "input": "file parsing in python definition",
        "output": "",
        "rule": [
            "d4797"
        ]
    },
    {
        "instruction": "",
        "id": "q4798",
        "input": "python how to account for a timeout",
        "output": "",
        "rule": [
            "d4798"
        ]
    },
    {
        "instruction": "",
        "id": "q4799",
        "input": "file transfer python paramiko ssh",
        "output": "",
        "rule": [
            "d4799"
        ]
    },
    {
        "instruction": "",
        "id": "q4800",
        "input": "python how to add a line to the middle of a file",
        "output": "",
        "rule": [
            "d4800"
        ]
    },
    {
        "instruction": "",
        "id": "q4801",
        "input": "fill a 2 dimensional list with inputs python",
        "output": "",
        "rule": [
            "d4801"
        ]
    },
    {
        "instruction": "",
        "id": "q4802",
        "input": "python how to add attributes to objects",
        "output": "",
        "rule": [
            "d4802"
        ]
    },
    {
        "instruction": "",
        "id": "q4803",
        "input": "filter function in python with none",
        "output": "",
        "rule": [
            "d4803"
        ]
    },
    {
        "instruction": "",
        "id": "q4804",
        "input": "python how to cast string to timestamp with timezone",
        "output": "",
        "rule": [
            "d4804"
        ]
    },
    {
        "instruction": "",
        "id": "q4805",
        "input": "filter list based on indice number python",
        "output": "",
        "rule": [
            "d4805"
        ]
    },
    {
        "instruction": "",
        "id": "q4806",
        "input": "python how to change an object's attributes",
        "output": "",
        "rule": [
            "d4806"
        ]
    },
    {
        "instruction": "",
        "id": "q4807",
        "input": "filter none in a list python",
        "output": "",
        "rule": [
            "d4807"
        ]
    },
    {
        "instruction": "",
        "id": "q4808",
        "input": "python how to change an objects properties",
        "output": "",
        "rule": [
            "d4808"
        ]
    },
    {
        "instruction": "",
        "id": "q4809",
        "input": "filter null values from a data frame python",
        "output": "",
        "rule": [
            "d4809"
        ]
    },
    {
        "instruction": "",
        "id": "q4810",
        "input": "python how to change color of text output",
        "output": "",
        "rule": [
            "d4810"
        ]
    },
    {
        "instruction": "",
        "id": "q4811",
        "input": "filter |safe jinja python",
        "output": "",
        "rule": [
            "d4811"
        ]
    },
    {
        "instruction": "",
        "id": "q4812",
        "input": "python how to change indentation",
        "output": "",
        "rule": [
            "d4812"
        ]
    },
    {
        "instruction": "",
        "id": "q4813",
        "input": "finding average color value in python",
        "output": "",
        "rule": [
            "d4813"
        ]
    },
    {
        "instruction": "",
        "id": "q4814",
        "input": "python how to check if a file does not exist",
        "output": "",
        "rule": [
            "d4814"
        ]
    },
    {
        "instruction": "",
        "id": "q4815",
        "input": "finding first 10 nearest values using shapely in python",
        "output": "",
        "rule": [
            "d4815"
        ]
    },
    {
        "instruction": "",
        "id": "q4816",
        "input": "python how to check if an account exists",
        "output": "",
        "rule": [
            "d4816"
        ]
    },
    {
        "instruction": "",
        "id": "q4817",
        "input": "finding index of an element in a matrix using python",
        "output": "",
        "rule": [
            "d4817"
        ]
    },
    {
        "instruction": "",
        "id": "q4818",
        "input": "python how to check if date is not datetime",
        "output": "",
        "rule": [
            "d4818"
        ]
    },
    {
        "instruction": "",
        "id": "q4819",
        "input": "finding max value in an array python",
        "output": "",
        "rule": [
            "d4819"
        ]
    },
    {
        "instruction": "",
        "id": "q4820",
        "input": "python how to check if path is a file",
        "output": "",
        "rule": [
            "d4820"
        ]
    },
    {
        "instruction": "",
        "id": "q4821",
        "input": "finding the attribute of an object in python",
        "output": "",
        "rule": [
            "d4821"
        ]
    },
    {
        "instruction": "",
        "id": "q4822",
        "input": "python how to check internet connection",
        "output": "",
        "rule": [
            "d4822"
        ]
    },
    {
        "instruction": "",
        "id": "q4823",
        "input": "finding the minimum value in a part of a list python",
        "output": "",
        "rule": [
            "d4823"
        ]
    },
    {
        "instruction": "",
        "id": "q4824",
        "input": "python how to clear all variables",
        "output": "",
        "rule": [
            "d4824"
        ]
    },
    {
        "instruction": "",
        "id": "q4825",
        "input": "finding the number of common characters in 2 string python",
        "output": "",
        "rule": [
            "d4825"
        ]
    },
    {
        "instruction": "",
        "id": "q4826",
        "input": "python how to compare 2 list to identify id's not in one list",
        "output": "",
        "rule": [
            "d4826"
        ]
    },
    {
        "instruction": "",
        "id": "q4827",
        "input": "finding the number of weeks between two datas in python",
        "output": "",
        "rule": [
            "d4827"
        ]
    },
    {
        "instruction": "",
        "id": "q4828",
        "input": "python how to compute the range of an array",
        "output": "",
        "rule": [
            "d4828"
        ]
    },
    {
        "instruction": "",
        "id": "q4829",
        "input": "finding the type in python",
        "output": "",
        "rule": [
            "d4829"
        ]
    },
    {
        "instruction": "",
        "id": "q4830",
        "input": "python how to create a bmp from byte data",
        "output": "",
        "rule": [
            "d4830"
        ]
    },
    {
        "instruction": "",
        "id": "q4831",
        "input": "fish shell python encoding",
        "output": "",
        "rule": [
            "d4831"
        ]
    },
    {
        "instruction": "",
        "id": "q4832",
        "input": "python how to cut a float off to two decimal places",
        "output": "",
        "rule": [
            "d4832"
        ]
    },
    {
        "instruction": "",
        "id": "q4833",
        "input": "fit a gaussian to a peak in python",
        "output": "",
        "rule": [
            "d4833"
        ]
    },
    {
        "instruction": "",
        "id": "q4834",
        "input": "python how to define static path",
        "output": "",
        "rule": [
            "d4834"
        ]
    },
    {
        "instruction": "",
        "id": "q4835",
        "input": "fixed value in slider widget python",
        "output": "",
        "rule": [
            "d4835"
        ]
    },
    {
        "instruction": "",
        "id": "q4836",
        "input": "python how to delete canvas",
        "output": "",
        "rule": [
            "d4836"
        ]
    },
    {
        "instruction": "",
        "id": "q4837",
        "input": "flask python jinja2 default variables",
        "output": "",
        "rule": [
            "d4837"
        ]
    },
    {
        "instruction": "",
        "id": "q4838",
        "input": "python how to detect change in slope",
        "output": "",
        "rule": [
            "d4838"
        ]
    },
    {
        "instruction": "",
        "id": "q4839",
        "input": "flatten 3d array python",
        "output": "",
        "rule": [
            "d4839"
        ]
    },
    {
        "instruction": "",
        "id": "q4840",
        "input": "flatten a python list",
        "output": "",
        "rule": [
            "d4840"
        ]
    },
    {
        "instruction": "",
        "id": "q4841",
        "input": "python how to determineif path is executable",
        "output": "",
        "rule": [
            "d4841"
        ]
    },
    {
        "instruction": "",
        "id": "q4842",
        "input": "flip an array left to right python",
        "output": "",
        "rule": [
            "d4842"
        ]
    },
    {
        "instruction": "",
        "id": "q4843",
        "input": "python how to enter things into a dictionary",
        "output": "",
        "rule": [
            "d4843"
        ]
    },
    {
        "instruction": "",
        "id": "q4844",
        "input": "flip an image horizontally python 3",
        "output": "",
        "rule": [
            "d4844"
        ]
    },
    {
        "instruction": "",
        "id": "q4845",
        "input": "python how to except a keyboard interrupt",
        "output": "",
        "rule": [
            "d4845"
        ]
    },
    {
        "instruction": "",
        "id": "q4846",
        "input": "flip an image python",
        "output": "",
        "rule": [
            "d4846"
        ]
    },
    {
        "instruction": "",
        "id": "q4847",
        "input": "python how to execute ansible playbook by ansible api",
        "output": "",
        "rule": [
            "d4847"
        ]
    },
    {
        "instruction": "",
        "id": "q4848",
        "input": "flush stdin python child",
        "output": "",
        "rule": [
            "d4848"
        ]
    },
    {
        "instruction": "",
        "id": "q4849",
        "input": "python how to exit all threads",
        "output": "",
        "rule": [
            "d4849"
        ]
    },
    {
        "instruction": "",
        "id": "q4850",
        "input": "flushing a file in python",
        "output": "",
        "rule": [
            "d4850"
        ]
    },
    {
        "instruction": "",
        "id": "q4851",
        "input": "python how to ftp a file to another server",
        "output": "",
        "rule": [
            "d4851"
        ]
    },
    {
        "instruction": "",
        "id": "q4852",
        "input": "forcing python garbage collector",
        "output": "",
        "rule": [
            "d4852"
        ]
    },
    {
        "instruction": "",
        "id": "q4853",
        "input": "python how to get a csrf token from a response object",
        "output": "",
        "rule": [
            "d4853"
        ]
    },
    {
        "instruction": "",
        "id": "q4854",
        "input": "format function in python stackoverflow",
        "output": "",
        "rule": [
            "d4854"
        ]
    },
    {
        "instruction": "",
        "id": "q4855",
        "input": "python how to get the ttl",
        "output": "",
        "rule": [
            "d4855"
        ]
    },
    {
        "instruction": "",
        "id": "q4856",
        "input": "found int expecting tuple python",
        "output": "",
        "rule": [
            "d4856"
        ]
    },
    {
        "instruction": "",
        "id": "q4857",
        "input": "python how to get the turtles to move at the same time",
        "output": "",
        "rule": [
            "d4857"
        ]
    },
    {
        "instruction": "",
        "id": "q4858",
        "input": "frequency of words count in a sentence python",
        "output": "",
        "rule": [
            "d4858"
        ]
    },
    {
        "instruction": "",
        "id": "q4859",
        "input": "python how to handle an empty numpyarray",
        "output": "",
        "rule": [
            "d4859"
        ]
    },
    {
        "instruction": "",
        "id": "q4860",
        "input": "function for random sixed rectangles in python",
        "output": "",
        "rule": [
            "d4860"
        ]
    },
    {
        "instruction": "",
        "id": "q4861",
        "input": "python how to key in kwargs and key not in kwargs",
        "output": "",
        "rule": [
            "d4861"
        ]
    },
    {
        "instruction": "",
        "id": "q4862",
        "input": "function that returns key given a value in dictionary python",
        "output": "",
        "rule": [
            "d4862"
        ]
    },
    {
        "instruction": "",
        "id": "q4863",
        "input": "python how to load h5ad",
        "output": "",
        "rule": [
            "d4863"
        ]
    },
    {
        "instruction": "",
        "id": "q4864",
        "input": "function to repeat string in python",
        "output": "",
        "rule": [
            "d4864"
        ]
    },
    {
        "instruction": "",
        "id": "q4865",
        "input": "python how to make a conditional to check for string",
        "output": "",
        "rule": [
            "d4865"
        ]
    },
    {
        "instruction": "",
        "id": "q4866",
        "input": "gaussian distribution with python",
        "output": "",
        "rule": [
            "d4866"
        ]
    },
    {
        "instruction": "",
        "id": "q4867",
        "input": "python how to make copy of object",
        "output": "",
        "rule": [
            "d4867"
        ]
    },
    {
        "instruction": "",
        "id": "q4868",
        "input": "generate circle image in python",
        "output": "",
        "rule": [
            "d4868"
        ]
    },
    {
        "instruction": "",
        "id": "q4869",
        "input": "generate combinations of elements in a list python",
        "output": "",
        "rule": [
            "d4869"
        ]
    },
    {
        "instruction": "",
        "id": "q4870",
        "input": "python how to memorize last input",
        "output": "",
        "rule": [
            "d4870"
        ]
    },
    {
        "instruction": "",
        "id": "q4871",
        "input": "generate random 17 character id python",
        "output": "",
        "rule": [
            "d4871"
        ]
    },
    {
        "instruction": "",
        "id": "q4872",
        "input": "python how to normalize image",
        "output": "",
        "rule": [
            "d4872"
        ]
    },
    {
        "instruction": "",
        "id": "q4873",
        "input": "generate standard normal random variablles python",
        "output": "",
        "rule": [
            "d4873"
        ]
    },
    {
        "instruction": "",
        "id": "q4874",
        "input": "python how to pass kerberos user credentials",
        "output": "",
        "rule": [
            "d4874"
        ]
    },
    {
        "instruction": "",
        "id": "q4875",
        "input": "get 3d rotation matrix python",
        "output": "",
        "rule": [
            "d4875"
        ]
    },
    {
        "instruction": "",
        "id": "q4876",
        "input": "python how to populate a column with null",
        "output": "",
        "rule": [
            "d4876"
        ]
    },
    {
        "instruction": "",
        "id": "q4877",
        "input": "get 99% percentile of a list python",
        "output": "",
        "rule": [
            "d4877"
        ]
    },
    {
        "instruction": "",
        "id": "q4878",
        "input": "python how to put in absolute path",
        "output": "",
        "rule": [
            "d4878"
        ]
    },
    {
        "instruction": "",
        "id": "q4879",
        "input": "get 99th percentile of a list python",
        "output": "",
        "rule": [
            "d4879"
        ]
    },
    {
        "instruction": "",
        "id": "q4880",
        "input": "python how to read a text file to dict",
        "output": "",
        "rule": [
            "d4880"
        ]
    },
    {
        "instruction": "",
        "id": "q4881",
        "input": "get all methods in object in python",
        "output": "",
        "rule": [
            "d4881"
        ]
    },
    {
        "instruction": "",
        "id": "q4882",
        "input": "python how to read from bufferedreader",
        "output": "",
        "rule": [
            "d4882"
        ]
    },
    {
        "instruction": "",
        "id": "q4883",
        "input": "get attributes o object in python",
        "output": "",
        "rule": [
            "d4883"
        ]
    },
    {
        "instruction": "",
        "id": "q4884",
        "input": "python how to read xml file",
        "output": "",
        "rule": [
            "d4884"
        ]
    },
    {
        "instruction": "",
        "id": "q4885",
        "input": "get average of numbers in list python",
        "output": "",
        "rule": [
            "d4885"
        ]
    },
    {
        "instruction": "",
        "id": "q4886",
        "input": "python how to redirect stdout to a file",
        "output": "",
        "rule": [
            "d4886"
        ]
    },
    {
        "instruction": "",
        "id": "q4887",
        "input": "get chinese character from pinyin python",
        "output": "",
        "rule": [
            "d4887"
        ]
    },
    {
        "instruction": "",
        "id": "q4888",
        "input": "python how to remove file extension",
        "output": "",
        "rule": [
            "d4888"
        ]
    },
    {
        "instruction": "",
        "id": "q4889",
        "input": "get complexity of function python",
        "output": "",
        "rule": [
            "d4889"
        ]
    },
    {
        "instruction": "",
        "id": "q4890",
        "input": "python how to restart back to a line",
        "output": "",
        "rule": [
            "d4890"
        ]
    },
    {
        "instruction": "",
        "id": "q4891",
        "input": "get continent based on country geopy python",
        "output": "",
        "rule": [
            "d4891"
        ]
    },
    {
        "instruction": "",
        "id": "q4892",
        "input": "python how to see if a file exists",
        "output": "",
        "rule": [
            "d4892"
        ]
    },
    {
        "instruction": "",
        "id": "q4893",
        "input": "get coordinates with python",
        "output": "",
        "rule": [
            "d4893"
        ]
    },
    {
        "instruction": "",
        "id": "q4894",
        "input": "python how to see if a word is a palindrone",
        "output": "",
        "rule": [
            "d4894"
        ]
    },
    {
        "instruction": "",
        "id": "q4895",
        "input": "get cosine of two numbers, python",
        "output": "",
        "rule": [
            "d4895"
        ]
    },
    {
        "instruction": "",
        "id": "q4896",
        "input": "python how to select the most relevant words of a sparse document term matrix",
        "output": "",
        "rule": [
            "d4896"
        ]
    },
    {
        "instruction": "",
        "id": "q4897",
        "input": "get current threads python",
        "output": "",
        "rule": [
            "d4897"
        ]
    },
    {
        "instruction": "",
        "id": "q4898",
        "input": "python how to set the value is empty of a dictionary",
        "output": "",
        "rule": [
            "d4898"
        ]
    },
    {
        "instruction": "",
        "id": "q4899",
        "input": "get datetime with utc timezone python",
        "output": "",
        "rule": [
            "d4899"
        ]
    },
    {
        "instruction": "",
        "id": "q4900",
        "input": "python how to strip space in list",
        "output": "",
        "rule": [
            "d4900"
        ]
    },
    {
        "instruction": "",
        "id": "q4901",
        "input": "get distinct list python",
        "output": "",
        "rule": [
            "d4901"
        ]
    },
    {
        "instruction": "",
        "id": "q4902",
        "input": "python how to swap rows of numpy mattrix",
        "output": "",
        "rule": [
            "d4902"
        ]
    },
    {
        "instruction": "",
        "id": "q4903",
        "input": "get distinct values in python",
        "output": "",
        "rule": [
            "d4903"
        ]
    },
    {
        "instruction": "",
        "id": "q4904",
        "input": "python how to tell if a folder is a symbolic link",
        "output": "",
        "rule": [
            "d4904"
        ]
    },
    {
        "instruction": "",
        "id": "q4905",
        "input": "get euclidean distance between two arrays python",
        "output": "",
        "rule": [
            "d4905"
        ]
    },
    {
        "instruction": "",
        "id": "q4906",
        "input": "get globals from function python",
        "output": "",
        "rule": [
            "d4906"
        ]
    },
    {
        "instruction": "",
        "id": "q4907",
        "input": "python how to work with binary files",
        "output": "",
        "rule": [
            "d4907"
        ]
    },
    {
        "instruction": "",
        "id": "q4908",
        "input": "get image format type python",
        "output": "",
        "rule": [
            "d4908"
        ]
    },
    {
        "instruction": "",
        "id": "q4909",
        "input": "python how to write one character to stdout",
        "output": "",
        "rule": [
            "d4909"
        ]
    },
    {
        "instruction": "",
        "id": "q4910",
        "input": "get index from item python",
        "output": "",
        "rule": [
            "d4910"
        ]
    },
    {
        "instruction": "",
        "id": "q4911",
        "input": "python how to write warn",
        "output": "",
        "rule": [
            "d4911"
        ]
    },
    {
        "instruction": "",
        "id": "q4912",
        "input": "get index keys mongodb python",
        "output": "",
        "rule": [
            "d4912"
        ]
    },
    {
        "instruction": "",
        "id": "q4913",
        "input": "python how tro create a copy of a series",
        "output": "",
        "rule": [
            "d4913"
        ]
    },
    {
        "instruction": "",
        "id": "q4914",
        "input": "get json file with python",
        "output": "",
        "rule": [
            "d4914"
        ]
    },
    {
        "instruction": "",
        "id": "q4915",
        "input": "python html markdown to text",
        "output": "",
        "rule": [
            "d4915"
        ]
    },
    {
        "instruction": "",
        "id": "q4916",
        "input": "get last modified date python",
        "output": "",
        "rule": [
            "d4916"
        ]
    },
    {
        "instruction": "",
        "id": "q4917",
        "input": "python http status cde 401",
        "output": "",
        "rule": [
            "d4917"
        ]
    },
    {
        "instruction": "",
        "id": "q4918",
        "input": "get list of indexes from row python",
        "output": "",
        "rule": [
            "d4918"
        ]
    },
    {
        "instruction": "",
        "id": "q4919",
        "input": "python identify column type",
        "output": "",
        "rule": [
            "d4919"
        ]
    },
    {
        "instruction": "",
        "id": "q4920",
        "input": "get memory address of python object",
        "output": "",
        "rule": [
            "d4920"
        ]
    },
    {
        "instruction": "",
        "id": "q4921",
        "input": "python ie download how to know the file size",
        "output": "",
        "rule": [
            "d4921"
        ]
    },
    {
        "instruction": "",
        "id": "q4922",
        "input": "get mouse coords in python 3",
        "output": "",
        "rule": [
            "d4922"
        ]
    },
    {
        "instruction": "",
        "id": "q4923",
        "input": "python if a json attribute exists do",
        "output": "",
        "rule": [
            "d4923"
        ]
    },
    {
        "instruction": "",
        "id": "q4924",
        "input": "get names of all disk drive python",
        "output": "",
        "rule": [
            "d4924"
        ]
    },
    {
        "instruction": "",
        "id": "q4925",
        "input": "python if file has size",
        "output": "",
        "rule": [
            "d4925"
        ]
    },
    {
        "instruction": "",
        "id": "q4926",
        "input": "get number of cores python os",
        "output": "",
        "rule": [
            "d4926"
        ]
    },
    {
        "instruction": "",
        "id": "q4927",
        "input": "python if folder exist and creat",
        "output": "",
        "rule": [
            "d4927"
        ]
    },
    {
        "instruction": "",
        "id": "q4928",
        "input": "get object value with name string python",
        "output": "",
        "rule": [
            "d4928"
        ]
    },
    {
        "instruction": "",
        "id": "q4929",
        "input": "python if set is subset of other set",
        "output": "",
        "rule": [
            "d4929"
        ]
    },
    {
        "instruction": "",
        "id": "q4930",
        "input": "get output from call in python",
        "output": "",
        "rule": [
            "d4930"
        ]
    },
    {
        "instruction": "",
        "id": "q4931",
        "input": "python if socket is readable",
        "output": "",
        "rule": [
            "d4931"
        ]
    },
    {
        "instruction": "",
        "id": "q4932",
        "input": "get owner of doc in python",
        "output": "",
        "rule": [
            "d4932"
        ]
    },
    {
        "instruction": "",
        "id": "q4933",
        "input": "python if type array",
        "output": "",
        "rule": [
            "d4933"
        ]
    },
    {
        "instruction": "",
        "id": "q4934",
        "input": "get properties of an object python",
        "output": "",
        "rule": [
            "d4934"
        ]
    },
    {
        "instruction": "",
        "id": "q4935",
        "input": "python igraph get subgraph without other vertice",
        "output": "",
        "rule": [
            "d4935"
        ]
    },
    {
        "instruction": "",
        "id": "q4936",
        "input": "get rid of duplicate items in list python",
        "output": "",
        "rule": [
            "d4936"
        ]
    },
    {
        "instruction": "",
        "id": "q4937",
        "input": "python image test for bad transparency mask",
        "output": "",
        "rule": [
            "d4937"
        ]
    },
    {
        "instruction": "",
        "id": "q4938",
        "input": "get rid of y axis python",
        "output": "",
        "rule": [
            "d4938"
        ]
    },
    {
        "instruction": "",
        "id": "q4939",
        "input": "python improved peak finding",
        "output": "",
        "rule": [
            "d4939"
        ]
    },
    {
        "instruction": "",
        "id": "q4940",
        "input": "python include files in other directories",
        "output": "",
        "rule": [
            "d4940"
        ]
    },
    {
        "instruction": "",
        "id": "q4941",
        "input": "get the date of last monday in python",
        "output": "",
        "rule": [
            "d4941"
        ]
    },
    {
        "instruction": "",
        "id": "q4942",
        "input": "python inner join result larger than originals",
        "output": "",
        "rule": [
            "d4942"
        ]
    },
    {
        "instruction": "",
        "id": "q4943",
        "input": "get the last item in an object iterator python",
        "output": "",
        "rule": [
            "d4943"
        ]
    },
    {
        "instruction": "",
        "id": "q4944",
        "input": "python input command blocking",
        "output": "",
        "rule": [
            "d4944"
        ]
    },
    {
        "instruction": "",
        "id": "q4945",
        "input": "get the name of a property python",
        "output": "",
        "rule": [
            "d4945"
        ]
    },
    {
        "instruction": "",
        "id": "q4946",
        "input": "python input copy and move files",
        "output": "",
        "rule": [
            "d4946"
        ]
    },
    {
        "instruction": "",
        "id": "q4947",
        "input": "get the ordinal value for letters in a string python",
        "output": "",
        "rule": [
            "d4947"
        ]
    },
    {
        "instruction": "",
        "id": "q4948",
        "input": "python insert \\n after a certain number of white spaces",
        "output": "",
        "rule": [
            "d4948"
        ]
    },
    {
        "instruction": "",
        "id": "q4949",
        "input": "get the present date week number in python after setting week start date to saturday",
        "output": "",
        "rule": [
            "d4949"
        ]
    },
    {
        "instruction": "",
        "id": "q4950",
        "input": "python int array to c pointer",
        "output": "",
        "rule": [
            "d4950"
        ]
    },
    {
        "instruction": "",
        "id": "q4951",
        "input": "get the user name in python",
        "output": "",
        "rule": [
            "d4951"
        ]
    },
    {
        "instruction": "",
        "id": "q4952",
        "input": "python int typecasting removing whitespace",
        "output": "",
        "rule": [
            "d4952"
        ]
    },
    {
        "instruction": "",
        "id": "q4953",
        "input": "get the value of dom element xml python",
        "output": "",
        "rule": [
            "d4953"
        ]
    },
    {
        "instruction": "",
        "id": "q4954",
        "input": "python interpolate array too big",
        "output": "",
        "rule": [
            "d4954"
        ]
    },
    {
        "instruction": "",
        "id": "q4955",
        "input": "get viewing screen resolution in python",
        "output": "",
        "rule": [
            "d4955"
        ]
    },
    {
        "instruction": "",
        "id": "q4956",
        "input": "python interpolate atmos grid data to station",
        "output": "",
        "rule": [
            "d4956"
        ]
    },
    {
        "instruction": "",
        "id": "q4957",
        "input": "get window title in python",
        "output": "",
        "rule": [
            "d4957"
        ]
    },
    {
        "instruction": "",
        "id": "q4958",
        "input": "python invalid charater in identifer",
        "output": "",
        "rule": [
            "d4958"
        ]
    },
    {
        "instruction": "",
        "id": "q4959",
        "input": "gettting enum name python",
        "output": "",
        "rule": [
            "d4959"
        ]
    },
    {
        "instruction": "",
        "id": "q4960",
        "input": "python ip to geolocation",
        "output": "",
        "rule": [
            "d4960"
        ]
    },
    {
        "instruction": "",
        "id": "q4961",
        "input": "git bash python hangs",
        "output": "",
        "rule": [
            "d4961"
        ]
    },
    {
        "instruction": "",
        "id": "q4962",
        "input": "python is a valid word",
        "output": "",
        "rule": [
            "d4962"
        ]
    },
    {
        "instruction": "",
        "id": "q4963",
        "input": "given word is palindrom or not in python",
        "output": "",
        "rule": [
            "d4963"
        ]
    },
    {
        "instruction": "",
        "id": "q4964",
        "input": "python is not string",
        "output": "",
        "rule": [
            "d4964"
        ]
    },
    {
        "instruction": "",
        "id": "q4965",
        "input": "grabbing certain box pixels in image python",
        "output": "",
        "rule": [
            "d4965"
        ]
    },
    {
        "instruction": "",
        "id": "q4966",
        "input": "python itarate array in chunks",
        "output": "",
        "rule": [
            "d4966"
        ]
    },
    {
        "instruction": "",
        "id": "q4967",
        "input": "handling python stored procedure result set",
        "output": "",
        "rule": [
            "d4967"
        ]
    },
    {
        "instruction": "",
        "id": "q4968",
        "input": "python item for item in iterable",
        "output": "",
        "rule": [
            "d4968"
        ]
    },
    {
        "instruction": "",
        "id": "q4969",
        "input": "haversine python with multiple",
        "output": "",
        "rule": [
            "d4969"
        ]
    },
    {
        "instruction": "",
        "id": "q4970",
        "input": "python iter not next",
        "output": "",
        "rule": [
            "d4970"
        ]
    },
    {
        "instruction": "",
        "id": "q4971",
        "input": "heap and stack in python",
        "output": "",
        "rule": [
            "d4971"
        ]
    },
    {
        "instruction": "",
        "id": "q4972",
        "input": "python iterable numpy tolist",
        "output": "",
        "rule": [
            "d4972"
        ]
    },
    {
        "instruction": "",
        "id": "q4973",
        "input": "height of tree recursive python",
        "output": "",
        "rule": [
            "d4973"
        ]
    },
    {
        "instruction": "",
        "id": "q4974",
        "input": "python iterate files in folder",
        "output": "",
        "rule": [
            "d4974"
        ]
    },
    {
        "instruction": "",
        "id": "q4975",
        "input": "hex to charachter python",
        "output": "",
        "rule": [
            "d4975"
        ]
    },
    {
        "instruction": "",
        "id": "q4976",
        "input": "python iterate folders and get paths",
        "output": "",
        "rule": [
            "d4976"
        ]
    },
    {
        "instruction": "",
        "id": "q4977",
        "input": "highlight text output python",
        "output": "",
        "rule": [
            "d4977"
        ]
    },
    {
        "instruction": "",
        "id": "q4978",
        "input": "python iterate keys in dict sorted",
        "output": "",
        "rule": [
            "d4978"
        ]
    },
    {
        "instruction": "",
        "id": "q4979",
        "input": "ho to read a file and pass all comment lines python",
        "output": "",
        "rule": [
            "d4979"
        ]
    },
    {
        "instruction": "",
        "id": "q4980",
        "input": "python iterating over everything except last item",
        "output": "",
        "rule": [
            "d4980"
        ]
    },
    {
        "instruction": "",
        "id": "q4981",
        "input": "hoe to check data type in python",
        "output": "",
        "rule": [
            "d4981"
        ]
    },
    {
        "instruction": "",
        "id": "q4982",
        "input": "python iterating over queryset values",
        "output": "",
        "rule": [
            "d4982"
        ]
    },
    {
        "instruction": "",
        "id": "q4983",
        "input": "hot to format string into xml in python",
        "output": "",
        "rule": [
            "d4983"
        ]
    },
    {
        "instruction": "",
        "id": "q4984",
        "input": "python iterator get chunk",
        "output": "",
        "rule": [
            "d4984"
        ]
    },
    {
        "instruction": "",
        "id": "q4985",
        "input": "how 'save as' in python",
        "output": "",
        "rule": [
            "d4985"
        ]
    },
    {
        "instruction": "",
        "id": "q4986",
        "input": "python iterator get index",
        "output": "",
        "rule": [
            "d4986"
        ]
    },
    {
        "instruction": "",
        "id": "q4987",
        "input": "how can i change path of python",
        "output": "",
        "rule": [
            "d4987"
        ]
    },
    {
        "instruction": "",
        "id": "q4988",
        "input": "python iterrows get next row",
        "output": "",
        "rule": [
            "d4988"
        ]
    },
    {
        "instruction": "",
        "id": "q4989",
        "input": "how can i get all sunday in a month python",
        "output": "",
        "rule": [
            "d4989"
        ]
    },
    {
        "instruction": "",
        "id": "q4990",
        "input": "python itertools groupby usage",
        "output": "",
        "rule": [
            "d4990"
        ]
    },
    {
        "instruction": "",
        "id": "q4991",
        "input": "how can i read the last line of a file in python",
        "output": "",
        "rule": [
            "d4991"
        ]
    },
    {
        "instruction": "",
        "id": "q4992",
        "input": "python jinja render table",
        "output": "",
        "rule": [
            "d4992"
        ]
    },
    {
        "instruction": "",
        "id": "q4993",
        "input": "how can we invoke ws authentication in soap ws using python",
        "output": "",
        "rule": [
            "d4993"
        ]
    },
    {
        "instruction": "",
        "id": "q4994",
        "input": "python jinja2 add express",
        "output": "",
        "rule": [
            "d4994"
        ]
    },
    {
        "instruction": "",
        "id": "q4995",
        "input": "how cast from string to float in python",
        "output": "",
        "rule": [
            "d4995"
        ]
    },
    {
        "instruction": "",
        "id": "q4996",
        "input": "python jinja2 same directionary",
        "output": "",
        "rule": [
            "d4996"
        ]
    },
    {
        "instruction": "",
        "id": "q4997",
        "input": "how do i disable the security certificate check in python requests",
        "output": "",
        "rule": [
            "d4997"
        ]
    },
    {
        "instruction": "",
        "id": "q4998",
        "input": "python join expected string",
        "output": "",
        "rule": [
            "d4998"
        ]
    },
    {
        "instruction": "",
        "id": "q4999",
        "input": "how do i make my object iterable python",
        "output": "",
        "rule": [
            "d4999"
        ]
    },
    {
        "instruction": "",
        "id": "q5000",
        "input": "python join path to everyname in list",
        "output": "",
        "rule": [
            "d5000"
        ]
    },
    {
        "instruction": "",
        "id": "q5001",
        "input": "how do i show a legend on a python plot",
        "output": "",
        "rule": [
            "d5001"
        ]
    },
    {
        "instruction": "",
        "id": "q5002",
        "input": "python json check dumps",
        "output": "",
        "rule": [
            "d5002"
        ]
    },
    {
        "instruction": "",
        "id": "q5003",
        "input": "how do i stop git from running python",
        "output": "",
        "rule": [
            "d5003"
        ]
    },
    {
        "instruction": "",
        "id": "q5004",
        "input": "python json deserialize datetime",
        "output": "",
        "rule": [
            "d5004"
        ]
    },
    {
        "instruction": "",
        "id": "q5005",
        "input": "how do i test for null values in float variables in python",
        "output": "",
        "rule": [
            "d5005"
        ]
    },
    {
        "instruction": "",
        "id": "q5006",
        "input": "python json list to object",
        "output": "",
        "rule": [
            "d5006"
        ]
    },
    {
        "instruction": "",
        "id": "q5007",
        "input": "how do i use telnet with python",
        "output": "",
        "rule": [
            "d5007"
        ]
    },
    {
        "instruction": "",
        "id": "q5008",
        "input": "python json return datetime as string",
        "output": "",
        "rule": [
            "d5008"
        ]
    },
    {
        "instruction": "",
        "id": "q5009",
        "input": "how do we exit in python",
        "output": "",
        "rule": [
            "d5009"
        ]
    },
    {
        "instruction": "",
        "id": "q5010",
        "input": "python json stringify an object",
        "output": "",
        "rule": [
            "d5010"
        ]
    },
    {
        "instruction": "",
        "id": "q5011",
        "input": "how do you add headers to a request python",
        "output": "",
        "rule": [
            "d5011"
        ]
    },
    {
        "instruction": "",
        "id": "q5012",
        "input": "python json view as a tree",
        "output": "",
        "rule": [
            "d5012"
        ]
    },
    {
        "instruction": "",
        "id": "q5013",
        "input": "how do you calculate a matrix to the 100th in python",
        "output": "",
        "rule": [
            "d5013"
        ]
    },
    {
        "instruction": "",
        "id": "q5014",
        "input": "python jsonify result set sql server",
        "output": "",
        "rule": [
            "d5014"
        ]
    },
    {
        "instruction": "",
        "id": "q5015",
        "input": "how do you compare a string to a number in python",
        "output": "",
        "rule": [
            "d5015"
        ]
    },
    {
        "instruction": "",
        "id": "q5016",
        "input": "python just change modified time not contents of file",
        "output": "",
        "rule": [
            "d5016"
        ]
    },
    {
        "instruction": "",
        "id": "q5017",
        "input": "how do you create percentage in python",
        "output": "",
        "rule": [
            "d5017"
        ]
    },
    {
        "instruction": "",
        "id": "q5018",
        "input": "python keras keep models in memory",
        "output": "",
        "rule": [
            "d5018"
        ]
    },
    {
        "instruction": "",
        "id": "q5019",
        "input": "how do you expose all the function in a standard python namesace",
        "output": "",
        "rule": [
            "d5019"
        ]
    },
    {
        "instruction": "",
        "id": "q5020",
        "input": "python kill a process tree",
        "output": "",
        "rule": [
            "d5020"
        ]
    },
    {
        "instruction": "",
        "id": "q5021",
        "input": "how do you extend a list in python",
        "output": "",
        "rule": [
            "d5021"
        ]
    },
    {
        "instruction": "",
        "id": "q5022",
        "input": "python kill process with keyword",
        "output": "",
        "rule": [
            "d5022"
        ]
    },
    {
        "instruction": "",
        "id": "q5023",
        "input": "how do you format sql in python",
        "output": "",
        "rule": [
            "d5023"
        ]
    },
    {
        "instruction": "",
        "id": "q5024",
        "input": "how do you make a equals in python",
        "output": "",
        "rule": [
            "d5024"
        ]
    },
    {
        "instruction": "",
        "id": "q5025",
        "input": "python lambda function as default arg",
        "output": "",
        "rule": [
            "d5025"
        ]
    },
    {
        "instruction": "",
        "id": "q5026",
        "input": "how do you print the date as a date data type in python",
        "output": "",
        "rule": [
            "d5026"
        ]
    },
    {
        "instruction": "",
        "id": "q5027",
        "input": "python leaving a try block early",
        "output": "",
        "rule": [
            "d5027"
        ]
    },
    {
        "instruction": "",
        "id": "q5028",
        "input": "how do you strip punctuation of string in python",
        "output": "",
        "rule": [
            "d5028"
        ]
    },
    {
        "instruction": "",
        "id": "q5029",
        "input": "python left padd with space",
        "output": "",
        "rule": [
            "d5029"
        ]
    },
    {
        "instruction": "",
        "id": "q5030",
        "input": "how do you wrap text in python",
        "output": "",
        "rule": [
            "d5030"
        ]
    },
    {
        "instruction": "",
        "id": "q5031",
        "input": "python legend with many lines",
        "output": "",
        "rule": [
            "d5031"
        ]
    },
    {
        "instruction": "",
        "id": "q5032",
        "input": "how o mak a list object a string python",
        "output": "",
        "rule": [
            "d5032"
        ]
    },
    {
        "instruction": "",
        "id": "q5033",
        "input": "python len multi dimenssion list",
        "output": "",
        "rule": [
            "d5033"
        ]
    },
    {
        "instruction": "",
        "id": "q5034",
        "input": "how python calculates inverse of matrix",
        "output": "",
        "rule": [
            "d5034"
        ]
    },
    {
        "instruction": "",
        "id": "q5035",
        "input": "python list all loggers",
        "output": "",
        "rule": [
            "d5035"
        ]
    },
    {
        "instruction": "",
        "id": "q5036",
        "input": "how quickly check whether a string is in the list python",
        "output": "",
        "rule": [
            "d5036"
        ]
    },
    {
        "instruction": "",
        "id": "q5037",
        "input": "python list all methods in obj",
        "output": "",
        "rule": [
            "d5037"
        ]
    },
    {
        "instruction": "",
        "id": "q5038",
        "input": "how read file content python using os",
        "output": "",
        "rule": [
            "d5038"
        ]
    },
    {
        "instruction": "",
        "id": "q5039",
        "input": "python list dimension check",
        "output": "",
        "rule": [
            "d5039"
        ]
    },
    {
        "instruction": "",
        "id": "q5040",
        "input": "how t o change seconds(input) to days (string) in python",
        "output": "",
        "rule": [
            "d5040"
        ]
    },
    {
        "instruction": "",
        "id": "q5041",
        "input": "python list duplicates set",
        "output": "",
        "rule": [
            "d5041"
        ]
    },
    {
        "instruction": "",
        "id": "q5042",
        "input": "how to access a defined 2d array in python",
        "output": "",
        "rule": [
            "d5042"
        ]
    },
    {
        "instruction": "",
        "id": "q5043",
        "input": "python list get index value default",
        "output": "",
        "rule": [
            "d5043"
        ]
    },
    {
        "instruction": "",
        "id": "q5044",
        "input": "how to access a specific element of a sparse matrix python3",
        "output": "",
        "rule": [
            "d5044"
        ]
    },
    {
        "instruction": "",
        "id": "q5045",
        "input": "python list to c double array",
        "output": "",
        "rule": [
            "d5045"
        ]
    },
    {
        "instruction": "",
        "id": "q5046",
        "input": "how to access each element in a array python",
        "output": "",
        "rule": [
            "d5046"
        ]
    },
    {
        "instruction": "",
        "id": "q5047",
        "input": "how to access the last row in python in a dataset",
        "output": "",
        "rule": [
            "d5047"
        ]
    },
    {
        "instruction": "",
        "id": "q5048",
        "input": "python lmdb get all keys",
        "output": "",
        "rule": [
            "d5048"
        ]
    },
    {
        "instruction": "",
        "id": "q5049",
        "input": "how to add a column with the median in python",
        "output": "",
        "rule": [
            "d5049"
        ]
    },
    {
        "instruction": "",
        "id": "q5050",
        "input": "python load a dictionary from a file",
        "output": "",
        "rule": [
            "d5050"
        ]
    },
    {
        "instruction": "",
        "id": "q5051",
        "input": "how to add header to correlation matrix in python",
        "output": "",
        "rule": [
            "d5051"
        ]
    },
    {
        "instruction": "",
        "id": "q5052",
        "input": "python load a dll",
        "output": "",
        "rule": [
            "d5052"
        ]
    },
    {
        "instruction": "",
        "id": "q5053",
        "input": "how to add python to patch",
        "output": "",
        "rule": [
            "d5053"
        ]
    },
    {
        "instruction": "",
        "id": "q5054",
        "input": "python load a properties file",
        "output": "",
        "rule": [
            "d5054"
        ]
    },
    {
        "instruction": "",
        "id": "q5055",
        "input": "how to add the width of line in python",
        "output": "",
        "rule": [
            "d5055"
        ]
    },
    {
        "instruction": "",
        "id": "q5056",
        "input": "python load an empty pickle",
        "output": "",
        "rule": [
            "d5056"
        ]
    },
    {
        "instruction": "",
        "id": "q5057",
        "input": "how to add without using built in functions in python",
        "output": "",
        "rule": [
            "d5057"
        ]
    },
    {
        "instruction": "",
        "id": "q5058",
        "input": "python load dot file",
        "output": "",
        "rule": [
            "d5058"
        ]
    },
    {
        "instruction": "",
        "id": "q5059",
        "input": "how to add word wrap to python",
        "output": "",
        "rule": [
            "d5059"
        ]
    },
    {
        "instruction": "",
        "id": "q5060",
        "input": "python load file with utf8",
        "output": "",
        "rule": [
            "d5060"
        ]
    },
    {
        "instruction": "",
        "id": "q5061",
        "input": "how to append data to a json file in python",
        "output": "",
        "rule": [
            "d5061"
        ]
    },
    {
        "instruction": "",
        "id": "q5062",
        "input": "python load numpy array",
        "output": "",
        "rule": [
            "d5062"
        ]
    },
    {
        "instruction": "",
        "id": "q5063",
        "input": "how to apply function to every column python",
        "output": "",
        "rule": [
            "d5063"
        ]
    },
    {
        "instruction": "",
        "id": "q5064",
        "input": "python load pickle model",
        "output": "",
        "rule": [
            "d5064"
        ]
    },
    {
        "instruction": "",
        "id": "q5065",
        "input": "how to ask if item is directory in python",
        "output": "",
        "rule": [
            "d5065"
        ]
    },
    {
        "instruction": "",
        "id": "q5066",
        "input": "python load text from a file",
        "output": "",
        "rule": [
            "d5066"
        ]
    },
    {
        "instruction": "",
        "id": "q5067",
        "input": "how to average colors in python grayscale",
        "output": "",
        "rule": [
            "d5067"
        ]
    },
    {
        "instruction": "",
        "id": "q5068",
        "input": "python locate index for certain value",
        "output": "",
        "rule": [
            "d5068"
        ]
    },
    {
        "instruction": "",
        "id": "q5069",
        "input": "how to bold titlein python pie char",
        "output": "",
        "rule": [
            "d5069"
        ]
    },
    {
        "instruction": "",
        "id": "q5070",
        "input": "python lock access to the same variable",
        "output": "",
        "rule": [
            "d5070"
        ]
    },
    {
        "instruction": "",
        "id": "q5071",
        "input": "how to cache multiple functions python",
        "output": "",
        "rule": [
            "d5071"
        ]
    },
    {
        "instruction": "",
        "id": "q5072",
        "input": "python lock mouse and keyboard",
        "output": "",
        "rule": [
            "d5072"
        ]
    },
    {
        "instruction": "",
        "id": "q5073",
        "input": "how to calculate moving average python",
        "output": "",
        "rule": [
            "d5073"
        ]
    },
    {
        "instruction": "",
        "id": "q5074",
        "input": "python lock object for use",
        "output": "",
        "rule": [
            "d5074"
        ]
    },
    {
        "instruction": "",
        "id": "q5075",
        "input": "python log and fft of complex number numpy",
        "output": "",
        "rule": [
            "d5075"
        ]
    },
    {
        "instruction": "",
        "id": "q5076",
        "input": "how to change a byte object to str type in python",
        "output": "",
        "rule": [
            "d5076"
        ]
    },
    {
        "instruction": "",
        "id": "q5077",
        "input": "python log loss function",
        "output": "",
        "rule": [
            "d5077"
        ]
    },
    {
        "instruction": "",
        "id": "q5078",
        "input": "how to change a datetime to the beginnig of a month python",
        "output": "",
        "rule": [
            "d5078"
        ]
    },
    {
        "instruction": "",
        "id": "q5079",
        "input": "python logging config file dict args",
        "output": "",
        "rule": [
            "d5079"
        ]
    },
    {
        "instruction": "",
        "id": "q5080",
        "input": "how to change a graph to have log in python",
        "output": "",
        "rule": [
            "d5080"
        ]
    },
    {
        "instruction": "",
        "id": "q5081",
        "input": "python logging define new logging name",
        "output": "",
        "rule": [
            "d5081"
        ]
    },
    {
        "instruction": "",
        "id": "q5082",
        "input": "how to change a list to string inpython",
        "output": "",
        "rule": [
            "d5082"
        ]
    },
    {
        "instruction": "",
        "id": "q5083",
        "input": "python logging get file name of calling function",
        "output": "",
        "rule": [
            "d5083"
        ]
    },
    {
        "instruction": "",
        "id": "q5084",
        "input": "how to change a number to binary python without b",
        "output": "",
        "rule": [
            "d5084"
        ]
    },
    {
        "instruction": "",
        "id": "q5085",
        "input": "python logging message format strings",
        "output": "",
        "rule": [
            "d5085"
        ]
    },
    {
        "instruction": "",
        "id": "q5086",
        "input": "how to change accented characters into non accent ones in python",
        "output": "",
        "rule": [
            "d5086"
        ]
    },
    {
        "instruction": "",
        "id": "q5087",
        "input": "python logging not flush to file",
        "output": "",
        "rule": [
            "d5087"
        ]
    },
    {
        "instruction": "",
        "id": "q5088",
        "input": "how to change an object to a date in python",
        "output": "",
        "rule": [
            "d5088"
        ]
    },
    {
        "instruction": "",
        "id": "q5089",
        "input": "python logging rotatingfilehandler add to basic",
        "output": "",
        "rule": [
            "d5089"
        ]
    },
    {
        "instruction": "",
        "id": "q5090",
        "input": "how to change axis limits python",
        "output": "",
        "rule": [
            "d5090"
        ]
    },
    {
        "instruction": "",
        "id": "q5091",
        "input": "python longest consecutive number in array",
        "output": "",
        "rule": [
            "d5091"
        ]
    },
    {
        "instruction": "",
        "id": "q5092",
        "input": "how to change color of print in python",
        "output": "",
        "rule": [
            "d5092"
        ]
    },
    {
        "instruction": "",
        "id": "q5093",
        "input": "python looking for function comments in python file",
        "output": "",
        "rule": [
            "d5093"
        ]
    },
    {
        "instruction": "",
        "id": "q5094",
        "input": "python loop next skip",
        "output": "",
        "rule": [
            "d5094"
        ]
    },
    {
        "instruction": "",
        "id": "q5095",
        "input": "how to change python codec",
        "output": "",
        "rule": [
            "d5095"
        ]
    },
    {
        "instruction": "",
        "id": "q5096",
        "input": "python mac get contents of clipboard",
        "output": "",
        "rule": [
            "d5096"
        ]
    },
    {
        "instruction": "",
        "id": "q5097",
        "input": "how to change python print precision",
        "output": "",
        "rule": [
            "d5097"
        ]
    },
    {
        "instruction": "",
        "id": "q5098",
        "input": "python magickmock how to set valye to property",
        "output": "",
        "rule": [
            "d5098"
        ]
    },
    {
        "instruction": "",
        "id": "q5099",
        "input": "how to change text color in python",
        "output": "",
        "rule": [
            "d5099"
        ]
    },
    {
        "instruction": "",
        "id": "q5100",
        "input": "python make a dictionary from string",
        "output": "",
        "rule": [
            "d5100"
        ]
    },
    {
        "instruction": "",
        "id": "q5101",
        "input": "how to change the background to a image in python",
        "output": "",
        "rule": [
            "d5101"
        ]
    },
    {
        "instruction": "",
        "id": "q5102",
        "input": "python make a file read only",
        "output": "",
        "rule": [
            "d5102"
        ]
    },
    {
        "instruction": "",
        "id": "q5103",
        "input": "how to change the color of strings in python",
        "output": "",
        "rule": [
            "d5103"
        ]
    },
    {
        "instruction": "",
        "id": "q5104",
        "input": "python make an object picklable",
        "output": "",
        "rule": [
            "d5104"
        ]
    },
    {
        "instruction": "",
        "id": "q5105",
        "input": "how to change the mod of a python file in windows",
        "output": "",
        "rule": [
            "d5105"
        ]
    },
    {
        "instruction": "",
        "id": "q5106",
        "input": "python make multiple string replacements at once",
        "output": "",
        "rule": [
            "d5106"
        ]
    },
    {
        "instruction": "",
        "id": "q5107",
        "input": "how to change the name of a column in data frame python",
        "output": "",
        "rule": [
            "d5107"
        ]
    },
    {
        "instruction": "",
        "id": "q5108",
        "input": "python make strin array a column",
        "output": "",
        "rule": [
            "d5108"
        ]
    },
    {
        "instruction": "",
        "id": "q5109",
        "input": "how to change the title of a window python",
        "output": "",
        "rule": [
            "d5109"
        ]
    },
    {
        "instruction": "",
        "id": "q5110",
        "input": "python make url query string",
        "output": "",
        "rule": [
            "d5110"
        ]
    },
    {
        "instruction": "",
        "id": "q5111",
        "input": "how to change user agent in python",
        "output": "",
        "rule": [
            "d5111"
        ]
    },
    {
        "instruction": "",
        "id": "q5112",
        "input": "python makedirs if not exist",
        "output": "",
        "rule": [
            "d5112"
        ]
    },
    {
        "instruction": "",
        "id": "q5113",
        "input": "how to check a for an int in a string in python",
        "output": "",
        "rule": [
            "d5113"
        ]
    },
    {
        "instruction": "",
        "id": "q5114",
        "input": "python makes not iterable to iterable",
        "output": "",
        "rule": [
            "d5114"
        ]
    },
    {
        "instruction": "",
        "id": "q5115",
        "input": "how to check data type of elements of array python",
        "output": "",
        "rule": [
            "d5115"
        ]
    },
    {
        "instruction": "",
        "id": "q5116",
        "input": "python making list into dictionary",
        "output": "",
        "rule": [
            "d5116"
        ]
    },
    {
        "instruction": "",
        "id": "q5117",
        "input": "how to check datatype of columns of a data frame in python",
        "output": "",
        "rule": [
            "d5117"
        ]
    },
    {
        "instruction": "",
        "id": "q5118",
        "input": "python manage runserver not bind",
        "output": "",
        "rule": [
            "d5118"
        ]
    },
    {
        "instruction": "",
        "id": "q5119",
        "input": "how to check dependencies in python",
        "output": "",
        "rule": [
            "d5119"
        ]
    },
    {
        "instruction": "",
        "id": "q5120",
        "input": "python manage server django",
        "output": "",
        "rule": [
            "d5120"
        ]
    },
    {
        "instruction": "",
        "id": "q5121",
        "input": "how to check dependencies in python wheel",
        "output": "",
        "rule": [
            "d5121"
        ]
    },
    {
        "instruction": "",
        "id": "q5122",
        "input": "python map 'dict' object is not callable",
        "output": "",
        "rule": [
            "d5122"
        ]
    },
    {
        "instruction": "",
        "id": "q5123",
        "input": "how to check failed file in s3 using python",
        "output": "",
        "rule": [
            "d5123"
        ]
    },
    {
        "instruction": "",
        "id": "q5124",
        "input": "python match list of strings",
        "output": "",
        "rule": [
            "d5124"
        ]
    },
    {
        "instruction": "",
        "id": "q5125",
        "input": "how to check for integers in a string in python",
        "output": "",
        "rule": [
            "d5125"
        ]
    },
    {
        "instruction": "",
        "id": "q5126",
        "input": "python matplotlib colorbar colarmap",
        "output": "",
        "rule": [
            "d5126"
        ]
    },
    {
        "instruction": "",
        "id": "q5127",
        "input": "how to check for values in a array python",
        "output": "",
        "rule": [
            "d5127"
        ]
    },
    {
        "instruction": "",
        "id": "q5128",
        "input": "python matplotlib legend within in the grid",
        "output": "",
        "rule": [
            "d5128"
        ]
    },
    {
        "instruction": "",
        "id": "q5129",
        "input": "how to check functions in python",
        "output": "",
        "rule": [
            "d5129"
        ]
    },
    {
        "instruction": "",
        "id": "q5130",
        "input": "python matplotlib save to svg",
        "output": "",
        "rule": [
            "d5130"
        ]
    },
    {
        "instruction": "",
        "id": "q5131",
        "input": "how to check git connection in python",
        "output": "",
        "rule": [
            "d5131"
        ]
    },
    {
        "instruction": "",
        "id": "q5132",
        "input": "python matplotlib savefig empty",
        "output": "",
        "rule": [
            "d5132"
        ]
    },
    {
        "instruction": "",
        "id": "q5133",
        "input": "how to check if a file exist in a folder in python",
        "output": "",
        "rule": [
            "d5133"
        ]
    },
    {
        "instruction": "",
        "id": "q5134",
        "input": "python matplotlib set axis title for axes",
        "output": "",
        "rule": [
            "d5134"
        ]
    },
    {
        "instruction": "",
        "id": "q5135",
        "input": "how to check if a file exists or not in python",
        "output": "",
        "rule": [
            "d5135"
        ]
    },
    {
        "instruction": "",
        "id": "q5136",
        "input": "python max nesting depth for lists",
        "output": "",
        "rule": [
            "d5136"
        ]
    },
    {
        "instruction": "",
        "id": "q5137",
        "input": "how to check if a list is equal python",
        "output": "",
        "rule": [
            "d5137"
        ]
    },
    {
        "instruction": "",
        "id": "q5138",
        "input": "python maximum memory usage",
        "output": "",
        "rule": [
            "d5138"
        ]
    },
    {
        "instruction": "",
        "id": "q5139",
        "input": "how to check if a previous button had been pressed python",
        "output": "",
        "rule": [
            "d5139"
        ]
    },
    {
        "instruction": "",
        "id": "q5140",
        "input": "python merge a list of lists into a single list",
        "output": "",
        "rule": [
            "d5140"
        ]
    },
    {
        "instruction": "",
        "id": "q5141",
        "input": "how to check if a string is a url or a local address python",
        "output": "",
        "rule": [
            "d5141"
        ]
    },
    {
        "instruction": "",
        "id": "q5142",
        "input": "python merge two objects",
        "output": "",
        "rule": [
            "d5142"
        ]
    },
    {
        "instruction": "",
        "id": "q5143",
        "input": "how to check if duplicate names exist python",
        "output": "",
        "rule": [
            "d5143"
        ]
    },
    {
        "instruction": "",
        "id": "q5144",
        "input": "python merge two set to dict",
        "output": "",
        "rule": [
            "d5144"
        ]
    },
    {
        "instruction": "",
        "id": "q5145",
        "input": "how to check if function is defined in python",
        "output": "",
        "rule": [
            "d5145"
        ]
    },
    {
        "instruction": "",
        "id": "q5146",
        "input": "python minidom get attribute value",
        "output": "",
        "rule": [
            "d5146"
        ]
    },
    {
        "instruction": "",
        "id": "q5147",
        "input": "how to check if it is a symlink in python",
        "output": "",
        "rule": [
            "d5147"
        ]
    },
    {
        "instruction": "",
        "id": "q5148",
        "input": "python mkdirs silent if exists",
        "output": "",
        "rule": [
            "d5148"
        ]
    },
    {
        "instruction": "",
        "id": "q5149",
        "input": "how to check if json file is valid python",
        "output": "",
        "rule": [
            "d5149"
        ]
    },
    {
        "instruction": "",
        "id": "q5150",
        "input": "python modify asyncio code",
        "output": "",
        "rule": [
            "d5150"
        ]
    },
    {
        "instruction": "",
        "id": "q5151",
        "input": "how to check if key is in dict in python",
        "output": "",
        "rule": [
            "d5151"
        ]
    },
    {
        "instruction": "",
        "id": "q5152",
        "input": "python modify data of a column",
        "output": "",
        "rule": [
            "d5152"
        ]
    },
    {
        "instruction": "",
        "id": "q5153",
        "input": "how to check if regex pattern matches the string in python",
        "output": "",
        "rule": [
            "d5153"
        ]
    },
    {
        "instruction": "",
        "id": "q5154",
        "input": "python mongodb add field to another field",
        "output": "",
        "rule": [
            "d5154"
        ]
    },
    {
        "instruction": "",
        "id": "q5155",
        "input": "how to check image is loded in python",
        "output": "",
        "rule": [
            "d5155"
        ]
    },
    {
        "instruction": "",
        "id": "q5156",
        "input": "python mongodb string to objectid",
        "output": "",
        "rule": [
            "d5156"
        ]
    },
    {
        "instruction": "",
        "id": "q5157",
        "input": "how to check the value of the column exist in that column python",
        "output": "",
        "rule": [
            "d5157"
        ]
    },
    {
        "instruction": "",
        "id": "q5158",
        "input": "python most common element of array",
        "output": "",
        "rule": [
            "d5158"
        ]
    },
    {
        "instruction": "",
        "id": "q5159",
        "input": "how to check users folder authorirty check python",
        "output": "",
        "rule": [
            "d5159"
        ]
    },
    {
        "instruction": "",
        "id": "q5160",
        "input": "python move cursor to beginning of line",
        "output": "",
        "rule": [
            "d5160"
        ]
    },
    {
        "instruction": "",
        "id": "q5161",
        "input": "how to check whether a code is running in python",
        "output": "",
        "rule": [
            "d5161"
        ]
    },
    {
        "instruction": "",
        "id": "q5162",
        "input": "python move cursor up",
        "output": "",
        "rule": [
            "d5162"
        ]
    },
    {
        "instruction": "",
        "id": "q5163",
        "input": "how to clear previously printed lines in python",
        "output": "",
        "rule": [
            "d5163"
        ]
    },
    {
        "instruction": "",
        "id": "q5164",
        "input": "python move mouse cursor and click",
        "output": "",
        "rule": [
            "d5164"
        ]
    },
    {
        "instruction": "",
        "id": "q5165",
        "input": "how to clear python buffer in macs",
        "output": "",
        "rule": [
            "d5165"
        ]
    },
    {
        "instruction": "",
        "id": "q5166",
        "input": "python moving average vector",
        "output": "",
        "rule": [
            "d5166"
        ]
    },
    {
        "instruction": "",
        "id": "q5167",
        "input": "how to clear serial buffer python",
        "output": "",
        "rule": [
            "d5167"
        ]
    },
    {
        "instruction": "",
        "id": "q5168",
        "input": "python mplot3d coordinate frame",
        "output": "",
        "rule": [
            "d5168"
        ]
    },
    {
        "instruction": "",
        "id": "q5169",
        "input": "how to clear the canvas in python",
        "output": "",
        "rule": [
            "d5169"
        ]
    },
    {
        "instruction": "",
        "id": "q5170",
        "input": "python multiply an iterable",
        "output": "",
        "rule": [
            "d5170"
        ]
    },
    {
        "instruction": "",
        "id": "q5171",
        "input": "how to close an open tiff image file in python",
        "output": "",
        "rule": [
            "d5171"
        ]
    },
    {
        "instruction": "",
        "id": "q5172",
        "input": "python multiprocessing apply async result",
        "output": "",
        "rule": [
            "d5172"
        ]
    },
    {
        "instruction": "",
        "id": "q5173",
        "input": "how to close database session sqlite3 python",
        "output": "",
        "rule": [
            "d5173"
        ]
    },
    {
        "instruction": "",
        "id": "q5174",
        "input": "python multiprocessing cant pickle objects",
        "output": "",
        "rule": [
            "d5174"
        ]
    },
    {
        "instruction": "",
        "id": "q5175",
        "input": "how to collect all the pdf links from a web page using python",
        "output": "",
        "rule": [
            "d5175"
        ]
    },
    {
        "instruction": "",
        "id": "q5176",
        "input": "python multiprocessing how to decide the number of processors",
        "output": "",
        "rule": [
            "d5176"
        ]
    },
    {
        "instruction": "",
        "id": "q5177",
        "input": "how to combine two models in python",
        "output": "",
        "rule": [
            "d5177"
        ]
    },
    {
        "instruction": "",
        "id": "q5178",
        "input": "python multiprocessing pool not start",
        "output": "",
        "rule": [
            "d5178"
        ]
    },
    {
        "instruction": "",
        "id": "q5179",
        "input": "how to compare 2 arrays and give accurecy python",
        "output": "",
        "rule": [
            "d5179"
        ]
    },
    {
        "instruction": "",
        "id": "q5180",
        "input": "python multiprocessing show cpu count",
        "output": "",
        "rule": [
            "d5180"
        ]
    },
    {
        "instruction": "",
        "id": "q5181",
        "input": "how to compare the variable to its data type python",
        "output": "",
        "rule": [
            "d5181"
        ]
    },
    {
        "instruction": "",
        "id": "q5182",
        "input": "python multiprocessing unable to pickle object",
        "output": "",
        "rule": [
            "d5182"
        ]
    },
    {
        "instruction": "",
        "id": "q5183",
        "input": "how to compare two object equality python",
        "output": "",
        "rule": [
            "d5183"
        ]
    },
    {
        "instruction": "",
        "id": "q5184",
        "input": "python mya save root node as self varibale",
        "output": "",
        "rule": [
            "d5184"
        ]
    },
    {
        "instruction": "",
        "id": "q5185",
        "input": "how to concatenate an input number and string in a function in python 3",
        "output": "",
        "rule": [
            "d5185"
        ]
    },
    {
        "instruction": "",
        "id": "q5186",
        "input": "python mysql drop and recreate table",
        "output": "",
        "rule": [
            "d5186"
        ]
    },
    {
        "instruction": "",
        "id": "q5187",
        "input": "how to continously return to try if error in python",
        "output": "",
        "rule": [
            "d5187"
        ]
    },
    {
        "instruction": "",
        "id": "q5188",
        "input": "python namedtuple as dict",
        "output": "",
        "rule": [
            "d5188"
        ]
    },
    {
        "instruction": "",
        "id": "q5189",
        "input": "how to conver dict str to dictionary in python",
        "output": "",
        "rule": [
            "d5189"
        ]
    },
    {
        "instruction": "",
        "id": "q5190",
        "input": "python naming convention for functions",
        "output": "",
        "rule": [
            "d5190"
        ]
    },
    {
        "instruction": "",
        "id": "q5191",
        "input": "how to copy a string to clipboard python",
        "output": "",
        "rule": [
            "d5191"
        ]
    },
    {
        "instruction": "",
        "id": "q5192",
        "input": "python nan in covariance matrix",
        "output": "",
        "rule": [
            "d5192"
        ]
    },
    {
        "instruction": "",
        "id": "q5193",
        "input": "how to copy and replace a file in python",
        "output": "",
        "rule": [
            "d5193"
        ]
    },
    {
        "instruction": "",
        "id": "q5194",
        "input": "python nested function variable scope and how to handle global scope",
        "output": "",
        "rule": [
            "d5194"
        ]
    },
    {
        "instruction": "",
        "id": "q5195",
        "input": "how to coreelate a multidimensional array python",
        "output": "",
        "rule": [
            "d5195"
        ]
    },
    {
        "instruction": "",
        "id": "q5196",
        "input": "python nonetype' object has no attribute 'picklable'",
        "output": "",
        "rule": [
            "d5196"
        ]
    },
    {
        "instruction": "",
        "id": "q5197",
        "input": "how to count number of lines in a file in python\\",
        "output": "",
        "rule": [
            "d5197"
        ]
    },
    {
        "instruction": "",
        "id": "q5198",
        "input": "python nonlinear fit result of function call is not a proper array",
        "output": "",
        "rule": [
            "d5198"
        ]
    },
    {
        "instruction": "",
        "id": "q5199",
        "input": "how to count the heigh of a tree python",
        "output": "",
        "rule": [
            "d5199"
        ]
    },
    {
        "instruction": "",
        "id": "q5200",
        "input": "python norm of array sympy",
        "output": "",
        "rule": [
            "d5200"
        ]
    },
    {
        "instruction": "",
        "id": "q5201",
        "input": "how to count the num of values of a key in python",
        "output": "",
        "rule": [
            "d5201"
        ]
    },
    {
        "instruction": "",
        "id": "q5202",
        "input": "python normal distribution p value",
        "output": "",
        "rule": [
            "d5202"
        ]
    },
    {
        "instruction": "",
        "id": "q5203",
        "input": "how to count the number of lines in a file python",
        "output": "",
        "rule": [
            "d5203"
        ]
    },
    {
        "instruction": "",
        "id": "q5204",
        "input": "python normal distribution with sigma values",
        "output": "",
        "rule": [
            "d5204"
        ]
    },
    {
        "instruction": "",
        "id": "q5205",
        "input": "how to count unique values in a list in python",
        "output": "",
        "rule": [
            "d5205"
        ]
    },
    {
        "instruction": "",
        "id": "q5206",
        "input": "python normalize image 0 to 1",
        "output": "",
        "rule": [
            "d5206"
        ]
    },
    {
        "instruction": "",
        "id": "q5207",
        "input": "how to create a pyramid in python without a def variable",
        "output": "",
        "rule": [
            "d5207"
        ]
    },
    {
        "instruction": "",
        "id": "q5208",
        "input": "python nose tests directory",
        "output": "",
        "rule": [
            "d5208"
        ]
    },
    {
        "instruction": "",
        "id": "q5209",
        "input": "how to create a symlink in python",
        "output": "",
        "rule": [
            "d5209"
        ]
    },
    {
        "instruction": "",
        "id": "q5210",
        "input": "python nose2 coverage example",
        "output": "",
        "rule": [
            "d5210"
        ]
    },
    {
        "instruction": "",
        "id": "q5211",
        "input": "how to create acronyms and removed stopwords without nltk using python",
        "output": "",
        "rule": [
            "d5211"
        ]
    },
    {
        "instruction": "",
        "id": "q5212",
        "input": "python not computing logarithms",
        "output": "",
        "rule": [
            "d5212"
        ]
    },
    {
        "instruction": "",
        "id": "q5213",
        "input": "how to create an ordered dictionary in python",
        "output": "",
        "rule": [
            "d5213"
        ]
    },
    {
        "instruction": "",
        "id": "q5214",
        "input": "python number of days in year",
        "output": "",
        "rule": [
            "d5214"
        ]
    },
    {
        "instruction": "",
        "id": "q5215",
        "input": "how to create bins for numerical values automatically in python",
        "output": "",
        "rule": [
            "d5215"
        ]
    },
    {
        "instruction": "",
        "id": "q5216",
        "input": "python number of days in year datetime",
        "output": "",
        "rule": [
            "d5216"
        ]
    },
    {
        "instruction": "",
        "id": "q5217",
        "input": "how to create new data frame from a query in python",
        "output": "",
        "rule": [
            "d5217"
        ]
    },
    {
        "instruction": "",
        "id": "q5218",
        "input": "python number of nan in a column",
        "output": "",
        "rule": [
            "d5218"
        ]
    },
    {
        "instruction": "",
        "id": "q5219",
        "input": "how to create objects from a dictionary in python",
        "output": "",
        "rule": [
            "d5219"
        ]
    },
    {
        "instruction": "",
        "id": "q5220",
        "input": "python number of nan in array",
        "output": "",
        "rule": [
            "d5220"
        ]
    },
    {
        "instruction": "",
        "id": "q5221",
        "input": "how to decode requests python",
        "output": "",
        "rule": [
            "d5221"
        ]
    },
    {
        "instruction": "",
        "id": "q5222",
        "input": "python numpy apply function to vector",
        "output": "",
        "rule": [
            "d5222"
        ]
    },
    {
        "instruction": "",
        "id": "q5223",
        "input": "how to decompile python pyc file",
        "output": "",
        "rule": [
            "d5223"
        ]
    },
    {
        "instruction": "",
        "id": "q5224",
        "input": "python numpy array image base64 encode for html img",
        "output": "",
        "rule": [
            "d5224"
        ]
    },
    {
        "instruction": "",
        "id": "q5225",
        "input": "how to define a type in python",
        "output": "",
        "rule": [
            "d5225"
        ]
    },
    {
        "instruction": "",
        "id": "q5226",
        "input": "python numpy array of tuples",
        "output": "",
        "rule": [
            "d5226"
        ]
    },
    {
        "instruction": "",
        "id": "q5227",
        "input": "how to delay print aprearing using print in python",
        "output": "",
        "rule": [
            "d5227"
        ]
    },
    {
        "instruction": "",
        "id": "q5228",
        "input": "python numpy array to char",
        "output": "",
        "rule": [
            "d5228"
        ]
    },
    {
        "instruction": "",
        "id": "q5229",
        "input": "how to delete a key in dictionary python",
        "output": "",
        "rule": [
            "d5229"
        ]
    },
    {
        "instruction": "",
        "id": "q5230",
        "input": "python numpy array to one hot",
        "output": "",
        "rule": [
            "d5230"
        ]
    },
    {
        "instruction": "",
        "id": "q5231",
        "input": "how to delete image in python cmd",
        "output": "",
        "rule": [
            "d5231"
        ]
    },
    {
        "instruction": "",
        "id": "q5232",
        "input": "python numpy assert a variable is a scaler",
        "output": "",
        "rule": [
            "d5232"
        ]
    },
    {
        "instruction": "",
        "id": "q5233",
        "input": "how to delete some letters in a string in python",
        "output": "",
        "rule": [
            "d5233"
        ]
    },
    {
        "instruction": "",
        "id": "q5234",
        "input": "python numpy average rolling window",
        "output": "",
        "rule": [
            "d5234"
        ]
    },
    {
        "instruction": "",
        "id": "q5235",
        "input": "how to deprecate function in python",
        "output": "",
        "rule": [
            "d5235"
        ]
    },
    {
        "instruction": "",
        "id": "q5236",
        "input": "python numpy check if is inf",
        "output": "",
        "rule": [
            "d5236"
        ]
    },
    {
        "instruction": "",
        "id": "q5237",
        "input": "how to determine a dtype is numeric or not python",
        "output": "",
        "rule": [
            "d5237"
        ]
    },
    {
        "instruction": "",
        "id": "q5238",
        "input": "python numpy datetime64 remove miscroseconds",
        "output": "",
        "rule": [
            "d5238"
        ]
    },
    {
        "instruction": "",
        "id": "q5239",
        "input": "how to detremine if a number if a float in python",
        "output": "",
        "rule": [
            "d5239"
        ]
    },
    {
        "instruction": "",
        "id": "q5240",
        "input": "python numpy l2 normalization",
        "output": "",
        "rule": [
            "d5240"
        ]
    },
    {
        "instruction": "",
        "id": "q5241",
        "input": "how to differentiate between an empty indice and a zero python",
        "output": "",
        "rule": [
            "d5241"
        ]
    },
    {
        "instruction": "",
        "id": "q5242",
        "input": "python numpy loadtxt header",
        "output": "",
        "rule": [
            "d5242"
        ]
    },
    {
        "instruction": "",
        "id": "q5243",
        "input": "how to display folium map python3",
        "output": "",
        "rule": [
            "d5243"
        ]
    },
    {
        "instruction": "",
        "id": "q5244",
        "input": "python numpy maximum along an axis",
        "output": "",
        "rule": [
            "d5244"
        ]
    },
    {
        "instruction": "",
        "id": "q5245",
        "input": "how to distinguish between text and binary file in python",
        "output": "",
        "rule": [
            "d5245"
        ]
    },
    {
        "instruction": "",
        "id": "q5246",
        "input": "python numpy read from file",
        "output": "",
        "rule": [
            "d5246"
        ]
    },
    {
        "instruction": "",
        "id": "q5247",
        "input": "how to do adjacency matrix in python and compute matrix",
        "output": "",
        "rule": [
            "d5247"
        ]
    },
    {
        "instruction": "",
        "id": "q5248",
        "input": "python numpy return minimum",
        "output": "",
        "rule": [
            "d5248"
        ]
    },
    {
        "instruction": "",
        "id": "q5249",
        "input": "how to do float if in python",
        "output": "",
        "rule": [
            "d5249"
        ]
    },
    {
        "instruction": "",
        "id": "q5250",
        "input": "python numpy shuffle data",
        "output": "",
        "rule": [
            "d5250"
        ]
    },
    {
        "instruction": "",
        "id": "q5251",
        "input": "how to do logarithm in python numpy",
        "output": "",
        "rule": [
            "d5251"
        ]
    },
    {
        "instruction": "",
        "id": "q5252",
        "input": "python numpy top k indeces",
        "output": "",
        "rule": [
            "d5252"
        ]
    },
    {
        "instruction": "",
        "id": "q5253",
        "input": "how to do tokenization in python",
        "output": "",
        "rule": [
            "d5253"
        ]
    },
    {
        "instruction": "",
        "id": "q5254",
        "input": "python object attribute 'lower'",
        "output": "",
        "rule": [
            "d5254"
        ]
    },
    {
        "instruction": "",
        "id": "q5255",
        "input": "how to downlond python tokenzier",
        "output": "",
        "rule": [
            "d5255"
        ]
    },
    {
        "instruction": "",
        "id": "q5256",
        "input": "python object instance is copy",
        "output": "",
        "rule": [
            "d5256"
        ]
    },
    {
        "instruction": "",
        "id": "q5257",
        "input": "how to drop single capital alphabets from a text in python",
        "output": "",
        "rule": [
            "d5257"
        ]
    },
    {
        "instruction": "",
        "id": "q5258",
        "input": "python object of type method is not json serializable",
        "output": "",
        "rule": [
            "d5258"
        ]
    },
    {
        "instruction": "",
        "id": "q5259",
        "input": "how to eliminate periodic noise in sound python",
        "output": "",
        "rule": [
            "d5259"
        ]
    },
    {
        "instruction": "",
        "id": "q5260",
        "input": "python oif dat equals type",
        "output": "",
        "rule": [
            "d5260"
        ]
    },
    {
        "instruction": "",
        "id": "q5261",
        "input": "how to enter new line python",
        "output": "",
        "rule": [
            "d5261"
        ]
    },
    {
        "instruction": "",
        "id": "q5262",
        "input": "python only return real solution complex number",
        "output": "",
        "rule": [
            "d5262"
        ]
    },
    {
        "instruction": "",
        "id": "q5263",
        "input": "how to exclude certain records matching a pattern using regex in python",
        "output": "",
        "rule": [
            "d5263"
        ]
    },
    {
        "instruction": "",
        "id": "q5264",
        "input": "python open a file writing that doesn't exist",
        "output": "",
        "rule": [
            "d5264"
        ]
    },
    {
        "instruction": "",
        "id": "q5265",
        "input": "how to execute multiple functions serially python",
        "output": "",
        "rule": [
            "d5265"
        ]
    },
    {
        "instruction": "",
        "id": "q5266",
        "input": "python open dot file",
        "output": "",
        "rule": [
            "d5266"
        ]
    },
    {
        "instruction": "",
        "id": "q5267",
        "input": "how to exepct error in python",
        "output": "",
        "rule": [
            "d5267"
        ]
    },
    {
        "instruction": "",
        "id": "q5268",
        "input": "python open file encoding default setting",
        "output": "",
        "rule": [
            "d5268"
        ]
    },
    {
        "instruction": "",
        "id": "q5269",
        "input": "how to export python graph to excel",
        "output": "",
        "rule": [
            "d5269"
        ]
    },
    {
        "instruction": "",
        "id": "q5270",
        "input": "python open file without permissions",
        "output": "",
        "rule": [
            "d5270"
        ]
    },
    {
        "instruction": "",
        "id": "q5271",
        "input": "how to exschange list to string python",
        "output": "",
        "rule": [
            "d5271"
        ]
    },
    {
        "instruction": "",
        "id": "q5272",
        "input": "python open image file to object",
        "output": "",
        "rule": [
            "d5272"
        ]
    },
    {
        "instruction": "",
        "id": "q5273",
        "input": "how to filter out the punctuation from a string in python",
        "output": "",
        "rule": [
            "d5273"
        ]
    },
    {
        "instruction": "",
        "id": "q5274",
        "input": "python open slice buffer",
        "output": "",
        "rule": [
            "d5274"
        ]
    },
    {
        "instruction": "",
        "id": "q5275",
        "input": "how to fit gaussian in python",
        "output": "",
        "rule": [
            "d5275"
        ]
    },
    {
        "instruction": "",
        "id": "q5276",
        "input": "python opencv gaussian blur",
        "output": "",
        "rule": [
            "d5276"
        ]
    },
    {
        "instruction": "",
        "id": "q5277",
        "input": "how to flatten a python list",
        "output": "",
        "rule": [
            "d5277"
        ]
    },
    {
        "instruction": "",
        "id": "q5278",
        "input": "python opencv rotate along z axis",
        "output": "",
        "rule": [
            "d5278"
        ]
    },
    {
        "instruction": "",
        "id": "q5279",
        "input": "python opencv2 warpaffine center",
        "output": "",
        "rule": [
            "d5279"
        ]
    },
    {
        "instruction": "",
        "id": "q5280",
        "input": "python opens file and immdiately closes",
        "output": "",
        "rule": [
            "d5280"
        ]
    },
    {
        "instruction": "",
        "id": "q5281",
        "input": "how to force kill without prompt in python",
        "output": "",
        "rule": [
            "d5281"
        ]
    },
    {
        "instruction": "",
        "id": "q5282",
        "input": "python optional multiple return",
        "output": "",
        "rule": [
            "d5282"
        ]
    },
    {
        "instruction": "",
        "id": "q5283",
        "input": "how to format text to capitalize in python",
        "output": "",
        "rule": [
            "d5283"
        ]
    },
    {
        "instruction": "",
        "id": "q5284",
        "input": "python optionparser show help in the same line",
        "output": "",
        "rule": [
            "d5284"
        ]
    },
    {
        "instruction": "",
        "id": "q5285",
        "input": "how to generate a key from the given string in python",
        "output": "",
        "rule": [
            "d5285"
        ]
    },
    {
        "instruction": "",
        "id": "q5286",
        "input": "python oracle accessing database column names",
        "output": "",
        "rule": [
            "d5286"
        ]
    },
    {
        "instruction": "",
        "id": "q5287",
        "input": "how to generate an 'aware' datetime object in python 3",
        "output": "",
        "rule": [
            "d5287"
        ]
    },
    {
        "instruction": "",
        "id": "q5288",
        "input": "python oracle table metadata",
        "output": "",
        "rule": [
            "d5288"
        ]
    },
    {
        "instruction": "",
        "id": "q5289",
        "input": "how to generate random floats in python with precision",
        "output": "",
        "rule": [
            "d5289"
        ]
    },
    {
        "instruction": "",
        "id": "q5290",
        "input": "python oracle truncate a table;",
        "output": "",
        "rule": [
            "d5290"
        ]
    },
    {
        "instruction": "",
        "id": "q5291",
        "input": "how to get a file from a website using python",
        "output": "",
        "rule": [
            "d5291"
        ]
    },
    {
        "instruction": "",
        "id": "q5292",
        "input": "python output image shape",
        "output": "",
        "rule": [
            "d5292"
        ]
    },
    {
        "instruction": "",
        "id": "q5293",
        "input": "how to get a scanner in python",
        "output": "",
        "rule": [
            "d5293"
        ]
    },
    {
        "instruction": "",
        "id": "q5294",
        "input": "python output redirect to file windows",
        "output": "",
        "rule": [
            "d5294"
        ]
    },
    {
        "instruction": "",
        "id": "q5295",
        "input": "how to get average of an array in python",
        "output": "",
        "rule": [
            "d5295"
        ]
    },
    {
        "instruction": "",
        "id": "q5296",
        "input": "python overload requests session",
        "output": "",
        "rule": [
            "d5296"
        ]
    },
    {
        "instruction": "",
        "id": "q5297",
        "input": "how to get column names from oracle table using select query in python code",
        "output": "",
        "rule": [
            "d5297"
        ]
    },
    {
        "instruction": "",
        "id": "q5298",
        "input": "python pager for stdout",
        "output": "",
        "rule": [
            "d5298"
        ]
    },
    {
        "instruction": "",
        "id": "q5299",
        "input": "how to get correlation matrix in python",
        "output": "",
        "rule": [
            "d5299"
        ]
    },
    {
        "instruction": "",
        "id": "q5300",
        "input": "python parse dynamic log file",
        "output": "",
        "rule": [
            "d5300"
        ]
    },
    {
        "instruction": "",
        "id": "q5301",
        "input": "how to get definition of function in python using command",
        "output": "",
        "rule": [
            "d5301"
        ]
    },
    {
        "instruction": "",
        "id": "q5302",
        "input": "python parse json stringify",
        "output": "",
        "rule": [
            "d5302"
        ]
    },
    {
        "instruction": "",
        "id": "q5303",
        "input": "how to get distinct values in python",
        "output": "",
        "rule": [
            "d5303"
        ]
    },
    {
        "instruction": "",
        "id": "q5304",
        "input": "python parse string as bool",
        "output": "",
        "rule": [
            "d5304"
        ]
    },
    {
        "instruction": "",
        "id": "q5305",
        "input": "how to get file location to use in python",
        "output": "",
        "rule": [
            "d5305"
        ]
    },
    {
        "instruction": "",
        "id": "q5306",
        "input": "python parser must be a string or character stream, not timestamp",
        "output": "",
        "rule": [
            "d5306"
        ]
    },
    {
        "instruction": "",
        "id": "q5307",
        "input": "how to get full path of the file in python",
        "output": "",
        "rule": [
            "d5307"
        ]
    },
    {
        "instruction": "",
        "id": "q5308",
        "input": "python parsing a string into datetime",
        "output": "",
        "rule": [
            "d5308"
        ]
    },
    {
        "instruction": "",
        "id": "q5309",
        "input": "how to get identity of a word python",
        "output": "",
        "rule": [
            "d5309"
        ]
    },
    {
        "instruction": "",
        "id": "q5310",
        "input": "python pass along kwargs",
        "output": "",
        "rule": [
            "d5310"
        ]
    },
    {
        "instruction": "",
        "id": "q5311",
        "input": "how to get indivisual string elements to each seprate list in python",
        "output": "",
        "rule": [
            "d5311"
        ]
    },
    {
        "instruction": "",
        "id": "q5312",
        "input": "python passing argv to a function",
        "output": "",
        "rule": [
            "d5312"
        ]
    },
    {
        "instruction": "",
        "id": "q5313",
        "input": "how to get local timezone python",
        "output": "",
        "rule": [
            "d5313"
        ]
    },
    {
        "instruction": "",
        "id": "q5314",
        "input": "python pasting to windows clipboard",
        "output": "",
        "rule": [
            "d5314"
        ]
    },
    {
        "instruction": "",
        "id": "q5315",
        "input": "how to get method name in python",
        "output": "",
        "rule": [
            "d5315"
        ]
    },
    {
        "instruction": "",
        "id": "q5316",
        "input": "python path parent for a file",
        "output": "",
        "rule": [
            "d5316"
        ]
    },
    {
        "instruction": "",
        "id": "q5317",
        "input": "how to get millisecond in python",
        "output": "",
        "rule": [
            "d5317"
        ]
    },
    {
        "instruction": "",
        "id": "q5318",
        "input": "python pausing music selectively",
        "output": "",
        "rule": [
            "d5318"
        ]
    },
    {
        "instruction": "",
        "id": "q5319",
        "input": "how to get moving window data in python",
        "output": "",
        "rule": [
            "d5319"
        ]
    },
    {
        "instruction": "",
        "id": "q5320",
        "input": "python pdb exit set trace",
        "output": "",
        "rule": [
            "d5320"
        ]
    },
    {
        "instruction": "",
        "id": "q5321",
        "input": "how to get number of columns and rows column and row of 2d array in python",
        "output": "",
        "rule": [
            "d5321"
        ]
    },
    {
        "instruction": "",
        "id": "q5322",
        "input": "python pdf text from area on page",
        "output": "",
        "rule": [
            "d5322"
        ]
    },
    {
        "instruction": "",
        "id": "q5323",
        "input": "how to get number of core on python",
        "output": "",
        "rule": [
            "d5323"
        ]
    },
    {
        "instruction": "",
        "id": "q5324",
        "input": "python peewee remove by key",
        "output": "",
        "rule": [
            "d5324"
        ]
    },
    {
        "instruction": "",
        "id": "q5325",
        "input": "how to get number of rows in data frame python",
        "output": "",
        "rule": [
            "d5325"
        ]
    },
    {
        "instruction": "",
        "id": "q5326",
        "input": "python permutations order doesn't matter",
        "output": "",
        "rule": [
            "d5326"
        ]
    },
    {
        "instruction": "",
        "id": "q5327",
        "input": "how to get program to exit on exit 0 python",
        "output": "",
        "rule": [
            "d5327"
        ]
    },
    {
        "instruction": "",
        "id": "q5328",
        "input": "python pexpect cmd stdout",
        "output": "",
        "rule": [
            "d5328"
        ]
    },
    {
        "instruction": "",
        "id": "q5329",
        "input": "how to get rid of space of a line from a file python",
        "output": "",
        "rule": [
            "d5329"
        ]
    },
    {
        "instruction": "",
        "id": "q5330",
        "input": "python pexpect get result",
        "output": "",
        "rule": [
            "d5330"
        ]
    },
    {
        "instruction": "",
        "id": "q5331",
        "input": "how to get string column names in python",
        "output": "",
        "rule": [
            "d5331"
        ]
    },
    {
        "instruction": "",
        "id": "q5332",
        "input": "python pickle load an empty file",
        "output": "",
        "rule": [
            "d5332"
        ]
    },
    {
        "instruction": "",
        "id": "q5333",
        "input": "how to get the angle between two points python",
        "output": "",
        "rule": [
            "d5333"
        ]
    },
    {
        "instruction": "",
        "id": "q5334",
        "input": "python pickle load from filename",
        "output": "",
        "rule": [
            "d5334"
        ]
    },
    {
        "instruction": "",
        "id": "q5335",
        "input": "how to get the computer info of a remote computer on python",
        "output": "",
        "rule": [
            "d5335"
        ]
    },
    {
        "instruction": "",
        "id": "q5336",
        "input": "python plot beginning and end color",
        "output": "",
        "rule": [
            "d5336"
        ]
    },
    {
        "instruction": "",
        "id": "q5337",
        "input": "how to get the count in json file using python",
        "output": "",
        "rule": [
            "d5337"
        ]
    },
    {
        "instruction": "",
        "id": "q5338",
        "input": "python plot dictionary bar chart horizontal sort values",
        "output": "",
        "rule": [
            "d5338"
        ]
    },
    {
        "instruction": "",
        "id": "q5339",
        "input": "how to get the data type in python as a string",
        "output": "",
        "rule": [
            "d5339"
        ]
    },
    {
        "instruction": "",
        "id": "q5340",
        "input": "python plot same color as scatter",
        "output": "",
        "rule": [
            "d5340"
        ]
    },
    {
        "instruction": "",
        "id": "q5341",
        "input": "how to get the first digit in a list of number in python",
        "output": "",
        "rule": [
            "d5341"
        ]
    },
    {
        "instruction": "",
        "id": "q5342",
        "input": "python pool apply async",
        "output": "",
        "rule": [
            "d5342"
        ]
    },
    {
        "instruction": "",
        "id": "q5343",
        "input": "how to get the longest string in a list python",
        "output": "",
        "rule": [
            "d5343"
        ]
    },
    {
        "instruction": "",
        "id": "q5344",
        "input": "python popen hide and store output",
        "output": "",
        "rule": [
            "d5344"
        ]
    },
    {
        "instruction": "",
        "id": "q5345",
        "input": "how to get the next token in python",
        "output": "",
        "rule": [
            "d5345"
        ]
    },
    {
        "instruction": "",
        "id": "q5346",
        "input": "python popen subprocess block stdout devnull",
        "output": "",
        "rule": [
            "d5346"
        ]
    },
    {
        "instruction": "",
        "id": "q5347",
        "input": "how to get the number of rows in data frame in python",
        "output": "",
        "rule": [
            "d5347"
        ]
    },
    {
        "instruction": "",
        "id": "q5348",
        "input": "python postgresql sqlalchemy update schema",
        "output": "",
        "rule": [
            "d5348"
        ]
    },
    {
        "instruction": "",
        "id": "q5349",
        "input": "how to get the tweets of one user with twitter api and python+2018",
        "output": "",
        "rule": [
            "d5349"
        ]
    },
    {
        "instruction": "",
        "id": "q5350",
        "input": "python print a filter object",
        "output": "",
        "rule": [
            "d5350"
        ]
    },
    {
        "instruction": "",
        "id": "q5351",
        "input": "how to get the value of a tag in xml in python",
        "output": "",
        "rule": [
            "d5351"
        ]
    },
    {
        "instruction": "",
        "id": "q5352",
        "input": "python print all instance attributes",
        "output": "",
        "rule": [
            "d5352"
        ]
    },
    {
        "instruction": "",
        "id": "q5353",
        "input": "how to get the window title in python",
        "output": "",
        "rule": [
            "d5353"
        ]
    },
    {
        "instruction": "",
        "id": "q5354",
        "input": "python print all lines of code executed in function call",
        "output": "",
        "rule": [
            "d5354"
        ]
    },
    {
        "instruction": "",
        "id": "q5355",
        "input": "how to get today date no time python",
        "output": "",
        "rule": [
            "d5355"
        ]
    },
    {
        "instruction": "",
        "id": "q5356",
        "input": "python print current iteration",
        "output": "",
        "rule": [
            "d5356"
        ]
    },
    {
        "instruction": "",
        "id": "q5357",
        "input": "how to get uid of a user using python",
        "output": "",
        "rule": [
            "d5357"
        ]
    },
    {
        "instruction": "",
        "id": "q5358",
        "input": "python print dictionary values in order",
        "output": "",
        "rule": [
            "d5358"
        ]
    },
    {
        "instruction": "",
        "id": "q5359",
        "input": "how to get underscores after each letter in python",
        "output": "",
        "rule": [
            "d5359"
        ]
    },
    {
        "instruction": "",
        "id": "q5360",
        "input": "python print doesn't output immediately",
        "output": "",
        "rule": [
            "d5360"
        ]
    },
    {
        "instruction": "",
        "id": "q5361",
        "input": "how to get width in python",
        "output": "",
        "rule": [
            "d5361"
        ]
    },
    {
        "instruction": "",
        "id": "q5362",
        "input": "python print fixed width spaces",
        "output": "",
        "rule": [
            "d5362"
        ]
    },
    {
        "instruction": "",
        "id": "q5363",
        "input": "how to give an object a new member variable python",
        "output": "",
        "rule": [
            "d5363"
        ]
    },
    {
        "instruction": "",
        "id": "q5364",
        "input": "python print pretty binary tree",
        "output": "",
        "rule": [
            "d5364"
        ]
    },
    {
        "instruction": "",
        "id": "q5365",
        "input": "how to give color in scatterplot python",
        "output": "",
        "rule": [
            "d5365"
        ]
    },
    {
        "instruction": "",
        "id": "q5366",
        "input": "python printing chart to another file",
        "output": "",
        "rule": [
            "d5366"
        ]
    },
    {
        "instruction": "",
        "id": "q5367",
        "input": "how to give comments in python",
        "output": "",
        "rule": [
            "d5367"
        ]
    },
    {
        "instruction": "",
        "id": "q5368",
        "input": "python printing text in design",
        "output": "",
        "rule": [
            "d5368"
        ]
    },
    {
        "instruction": "",
        "id": "q5369",
        "input": "how to give cookiejar cookies in get request using python",
        "output": "",
        "rule": [
            "d5369"
        ]
    },
    {
        "instruction": "",
        "id": "q5370",
        "input": "python process multiple argumnent",
        "output": "",
        "rule": [
            "d5370"
        ]
    },
    {
        "instruction": "",
        "id": "q5371",
        "input": "how to give is equals in python",
        "output": "",
        "rule": [
            "d5371"
        ]
    },
    {
        "instruction": "",
        "id": "q5372",
        "input": "python process pool in func",
        "output": "",
        "rule": [
            "d5372"
        ]
    },
    {
        "instruction": "",
        "id": "q5373",
        "input": "how to give multiple comments in python",
        "output": "",
        "rule": [
            "d5373"
        ]
    },
    {
        "instruction": "",
        "id": "q5374",
        "input": "python program to get all free memory address",
        "output": "",
        "rule": [
            "d5374"
        ]
    },
    {
        "instruction": "",
        "id": "q5375",
        "input": "how to grab focus python",
        "output": "",
        "rule": [
            "d5375"
        ]
    },
    {
        "instruction": "",
        "id": "q5376",
        "input": "python progressbar uneven iterations",
        "output": "",
        "rule": [
            "d5376"
        ]
    },
    {
        "instruction": "",
        "id": "q5377",
        "input": "how to handel deal with the int32 in python",
        "output": "",
        "rule": [
            "d5377"
        ]
    },
    {
        "instruction": "",
        "id": "q5378",
        "input": "python property object at dynamic",
        "output": "",
        "rule": [
            "d5378"
        ]
    },
    {
        "instruction": "",
        "id": "q5379",
        "input": "how to handle float values in a string in python",
        "output": "",
        "rule": [
            "d5379"
        ]
    },
    {
        "instruction": "",
        "id": "q5380",
        "input": "python protobuf timestamp get datetime",
        "output": "",
        "rule": [
            "d5380"
        ]
    },
    {
        "instruction": "",
        "id": "q5381",
        "input": "how to have an ordered dictionary python",
        "output": "",
        "rule": [
            "d5381"
        ]
    },
    {
        "instruction": "",
        "id": "q5382",
        "input": "python proxy connection setup",
        "output": "",
        "rule": [
            "d5382"
        ]
    },
    {
        "instruction": "",
        "id": "q5383",
        "input": "how to have theme in python program",
        "output": "",
        "rule": [
            "d5383"
        ]
    },
    {
        "instruction": "",
        "id": "q5384",
        "input": "python pull first letter of full name",
        "output": "",
        "rule": [
            "d5384"
        ]
    },
    {
        "instruction": "",
        "id": "q5385",
        "input": "how to hide a python input as though password",
        "output": "",
        "rule": [
            "d5385"
        ]
    },
    {
        "instruction": "",
        "id": "q5386",
        "input": "python pyodbc cursor executemany",
        "output": "",
        "rule": [
            "d5386"
        ]
    },
    {
        "instruction": "",
        "id": "q5387",
        "input": "how to hide output of a command in python",
        "output": "",
        "rule": [
            "d5387"
        ]
    },
    {
        "instruction": "",
        "id": "q5388",
        "input": "python pypdf2 added pages are blank",
        "output": "",
        "rule": [
            "d5388"
        ]
    },
    {
        "instruction": "",
        "id": "q5389",
        "input": "how to hide particular frame in python gui",
        "output": "",
        "rule": [
            "d5389"
        ]
    },
    {
        "instruction": "",
        "id": "q5390",
        "input": "python pyplot set y axis limit",
        "output": "",
        "rule": [
            "d5390"
        ]
    },
    {
        "instruction": "",
        "id": "q5391",
        "input": "how to highlight a line in python and turn it into a comment",
        "output": "",
        "rule": [
            "d5391"
        ]
    },
    {
        "instruction": "",
        "id": "q5392",
        "input": "python qbytearray to str",
        "output": "",
        "rule": [
            "d5392"
        ]
    },
    {
        "instruction": "",
        "id": "q5393",
        "input": "how to identify comment python",
        "output": "",
        "rule": [
            "d5393"
        ]
    },
    {
        "instruction": "",
        "id": "q5394",
        "input": "python query mongodb to object",
        "output": "",
        "rule": [
            "d5394"
        ]
    },
    {
        "instruction": "",
        "id": "q5395",
        "input": "how to implement myown python context manager",
        "output": "",
        "rule": [
            "d5395"
        ]
    },
    {
        "instruction": "",
        "id": "q5396",
        "input": "python query string from dict",
        "output": "",
        "rule": [
            "d5396"
        ]
    },
    {
        "instruction": "",
        "id": "q5397",
        "input": "how to incorporate progress tracker in for loops in python",
        "output": "",
        "rule": [
            "d5397"
        ]
    },
    {
        "instruction": "",
        "id": "q5398",
        "input": "python quick test for list with null",
        "output": "",
        "rule": [
            "d5398"
        ]
    },
    {
        "instruction": "",
        "id": "q5399",
        "input": "how to increase text size in python",
        "output": "",
        "rule": [
            "d5399"
        ]
    },
    {
        "instruction": "",
        "id": "q5400",
        "input": "python quit exit all threads",
        "output": "",
        "rule": [
            "d5400"
        ]
    },
    {
        "instruction": "",
        "id": "q5401",
        "input": "how to intersect two dictionaries python",
        "output": "",
        "rule": [
            "d5401"
        ]
    },
    {
        "instruction": "",
        "id": "q5402",
        "input": "python range for time",
        "output": "",
        "rule": [
            "d5402"
        ]
    },
    {
        "instruction": "",
        "id": "q5403",
        "input": "how to iterate to a folder to get filenames in it in python",
        "output": "",
        "rule": [
            "d5403"
        ]
    },
    {
        "instruction": "",
        "id": "q5404",
        "input": "python range function including endpoints",
        "output": "",
        "rule": [
            "d5404"
        ]
    },
    {
        "instruction": "",
        "id": "q5405",
        "input": "how to keep python output window close",
        "output": "",
        "rule": [
            "d5405"
        ]
    },
    {
        "instruction": "",
        "id": "q5406",
        "input": "python range zero fill",
        "output": "",
        "rule": [
            "d5406"
        ]
    },
    {
        "instruction": "",
        "id": "q5407",
        "input": "how to keep the cursor from being at the bottom of the screen in python spyder",
        "output": "",
        "rule": [
            "d5407"
        ]
    },
    {
        "instruction": "",
        "id": "q5408",
        "input": "python rate limit requests external",
        "output": "",
        "rule": [
            "d5408"
        ]
    },
    {
        "instruction": "",
        "id": "q5409",
        "input": "how to kill just child process in python",
        "output": "",
        "rule": [
            "d5409"
        ]
    },
    {
        "instruction": "",
        "id": "q5410",
        "input": "python re remove python block comments",
        "output": "",
        "rule": [
            "d5410"
        ]
    },
    {
        "instruction": "",
        "id": "q5411",
        "input": "how to load mnist data in python3",
        "output": "",
        "rule": [
            "d5411"
        ]
    },
    {
        "instruction": "",
        "id": "q5412",
        "input": "python read ascii and removing lines",
        "output": "",
        "rule": [
            "d5412"
        ]
    },
    {
        "instruction": "",
        "id": "q5413",
        "input": "how to load python using javascript",
        "output": "",
        "rule": [
            "d5413"
        ]
    },
    {
        "instruction": "",
        "id": "q5414",
        "input": "python read binary large",
        "output": "",
        "rule": [
            "d5414"
        ]
    },
    {
        "instruction": "",
        "id": "q5415",
        "input": "how to lower the size of an image in python",
        "output": "",
        "rule": [
            "d5415"
        ]
    },
    {
        "instruction": "",
        "id": "q5416",
        "input": "python read doc and rtf",
        "output": "",
        "rule": [
            "d5416"
        ]
    },
    {
        "instruction": "",
        "id": "q5417",
        "input": "how to maintain space padding in python",
        "output": "",
        "rule": [
            "d5417"
        ]
    },
    {
        "instruction": "",
        "id": "q5418",
        "input": "python read file of short integers",
        "output": "",
        "rule": [
            "d5418"
        ]
    },
    {
        "instruction": "",
        "id": "q5419",
        "input": "how to make 50 spaces in print statemnet python",
        "output": "",
        "rule": [
            "d5419"
        ]
    },
    {
        "instruction": "",
        "id": "q5420",
        "input": "python read file with multiple json objects",
        "output": "",
        "rule": [
            "d5420"
        ]
    },
    {
        "instruction": "",
        "id": "q5421",
        "input": "how to make a field python",
        "output": "",
        "rule": [
            "d5421"
        ]
    },
    {
        "instruction": "",
        "id": "q5422",
        "input": "python read in list from file",
        "output": "",
        "rule": [
            "d5422"
        ]
    },
    {
        "instruction": "",
        "id": "q5423",
        "input": "how to make a kick command with python discord",
        "output": "",
        "rule": [
            "d5423"
        ]
    },
    {
        "instruction": "",
        "id": "q5424",
        "input": "python read lines from stdin",
        "output": "",
        "rule": [
            "d5424"
        ]
    },
    {
        "instruction": "",
        "id": "q5425",
        "input": "how to make a list in python that is a certain length",
        "output": "",
        "rule": [
            "d5425"
        ]
    },
    {
        "instruction": "",
        "id": "q5426",
        "input": "python read text from url",
        "output": "",
        "rule": [
            "d5426"
        ]
    },
    {
        "instruction": "",
        "id": "q5427",
        "input": "how to make a list initialized from iterable's items python",
        "output": "",
        "rule": [
            "d5427"
        ]
    },
    {
        "instruction": "",
        "id": "q5428",
        "input": "python read until end of file binary",
        "output": "",
        "rule": [
            "d5428"
        ]
    },
    {
        "instruction": "",
        "id": "q5429",
        "input": "how to make a normal distribution on python",
        "output": "",
        "rule": [
            "d5429"
        ]
    },
    {
        "instruction": "",
        "id": "q5430",
        "input": "python reading bigendian data",
        "output": "",
        "rule": [
            "d5430"
        ]
    },
    {
        "instruction": "",
        "id": "q5431",
        "input": "how to make a python code for a word count with removing punctuations",
        "output": "",
        "rule": [
            "d5431"
        ]
    },
    {
        "instruction": "",
        "id": "q5432",
        "input": "python reading file remove spaces/newlines",
        "output": "",
        "rule": [
            "d5432"
        ]
    },
    {
        "instruction": "",
        "id": "q5433",
        "input": "how to make a python file exit",
        "output": "",
        "rule": [
            "d5433"
        ]
    },
    {
        "instruction": "",
        "id": "q5434",
        "input": "python recommended line length",
        "output": "",
        "rule": [
            "d5434"
        ]
    },
    {
        "instruction": "",
        "id": "q5435",
        "input": "how to make a restart button in python",
        "output": "",
        "rule": [
            "d5435"
        ]
    },
    {
        "instruction": "",
        "id": "q5436",
        "input": "python redis hashes set list value",
        "output": "",
        "rule": [
            "d5436"
        ]
    },
    {
        "instruction": "",
        "id": "q5437",
        "input": "how to make all words a user types lowercase in python",
        "output": "",
        "rule": [
            "d5437"
        ]
    },
    {
        "instruction": "",
        "id": "q5438",
        "input": "python redis hset multiple",
        "output": "",
        "rule": [
            "d5438"
        ]
    },
    {
        "instruction": "",
        "id": "q5439",
        "input": "how to make an exponential in python",
        "output": "",
        "rule": [
            "d5439"
        ]
    },
    {
        "instruction": "",
        "id": "q5440",
        "input": "python redis key value size",
        "output": "",
        "rule": [
            "d5440"
        ]
    },
    {
        "instruction": "",
        "id": "q5441",
        "input": "how to make an owl in python",
        "output": "",
        "rule": [
            "d5441"
        ]
    },
    {
        "instruction": "",
        "id": "q5442",
        "input": "python redis pool disconnect",
        "output": "",
        "rule": [
            "d5442"
        ]
    },
    {
        "instruction": "",
        "id": "q5443",
        "input": "how to make changed in a dictionary without changing the original python",
        "output": "",
        "rule": [
            "d5443"
        ]
    },
    {
        "instruction": "",
        "id": "q5444",
        "input": "python redisclient' object has no attribute 'exists'",
        "output": "",
        "rule": [
            "d5444"
        ]
    },
    {
        "instruction": "",
        "id": "q5445",
        "input": "how to make combinations of a list python",
        "output": "",
        "rule": [
            "d5445"
        ]
    },
    {
        "instruction": "",
        "id": "q5446",
        "input": "python reduce pdf file size",
        "output": "",
        "rule": [
            "d5446"
        ]
    },
    {
        "instruction": "",
        "id": "q5447",
        "input": "how to make idx count from left to right python",
        "output": "",
        "rule": [
            "d5447"
        ]
    },
    {
        "instruction": "",
        "id": "q5448",
        "input": "python regular expression extract tables in sql",
        "output": "",
        "rule": [
            "d5448"
        ]
    },
    {
        "instruction": "",
        "id": "q5449",
        "input": "how to make numpy array iterable python",
        "output": "",
        "rule": [
            "d5449"
        ]
    },
    {
        "instruction": "",
        "id": "q5450",
        "input": "python rel to abs path",
        "output": "",
        "rule": [
            "d5450"
        ]
    },
    {
        "instruction": "",
        "id": "q5451",
        "input": "how to make print bold in python",
        "output": "",
        "rule": [
            "d5451"
        ]
    },
    {
        "instruction": "",
        "id": "q5452",
        "input": "python reload page withdelay",
        "output": "",
        "rule": [
            "d5452"
        ]
    },
    {
        "instruction": "",
        "id": "q5453",
        "input": "how to make python run a linear equation",
        "output": "",
        "rule": [
            "d5453"
        ]
    },
    {
        "instruction": "",
        "id": "q5454",
        "input": "python remap image to uint8",
        "output": "",
        "rule": [
            "d5454"
        ]
    },
    {
        "instruction": "",
        "id": "q5455",
        "input": "how to make sure the date attribute has a date type in python",
        "output": "",
        "rule": [
            "d5455"
        ]
    },
    {
        "instruction": "",
        "id": "q5456",
        "input": "python remove all chinese punctuation",
        "output": "",
        "rule": [
            "d5456"
        ]
    },
    {
        "instruction": "",
        "id": "q5457",
        "input": "how to make the range function go from minimum to maximum in python",
        "output": "",
        "rule": [
            "d5457"
        ]
    },
    {
        "instruction": "",
        "id": "q5458",
        "input": "python remove all white space in string",
        "output": "",
        "rule": [
            "d5458"
        ]
    },
    {
        "instruction": "",
        "id": "q5459",
        "input": "how to make the the cursor visimble in the canvas widget in python",
        "output": "",
        "rule": [
            "d5459"
        ]
    },
    {
        "instruction": "",
        "id": "q5460",
        "input": "python remove axison legend",
        "output": "",
        "rule": [
            "d5460"
        ]
    },
    {
        "instruction": "",
        "id": "q5461",
        "input": "how to make time limit in python",
        "output": "",
        "rule": [
            "d5461"
        ]
    },
    {
        "instruction": "",
        "id": "q5462",
        "input": "python remove brackets and commas from list",
        "output": "",
        "rule": [
            "d5462"
        ]
    },
    {
        "instruction": "",
        "id": "q5463",
        "input": "how to make word without punction or capitalization python",
        "output": "",
        "rule": [
            "d5463"
        ]
    },
    {
        "instruction": "",
        "id": "q5464",
        "input": "python remove commas from a list",
        "output": "",
        "rule": [
            "d5464"
        ]
    },
    {
        "instruction": "",
        "id": "q5465",
        "input": "how to multiply a list by a factor in python",
        "output": "",
        "rule": [
            "d5465"
        ]
    },
    {
        "instruction": "",
        "id": "q5466",
        "input": "python remove comments in string from /* */",
        "output": "",
        "rule": [
            "d5466"
        ]
    },
    {
        "instruction": "",
        "id": "q5467",
        "input": "how to name a cube in python",
        "output": "",
        "rule": [
            "d5467"
        ]
    },
    {
        "instruction": "",
        "id": "q5468",
        "input": "python remove duplicate elements in sequence from list",
        "output": "",
        "rule": [
            "d5468"
        ]
    },
    {
        "instruction": "",
        "id": "q5469",
        "input": "how to number python source lines",
        "output": "",
        "rule": [
            "d5469"
        ]
    },
    {
        "instruction": "",
        "id": "q5470",
        "input": "python remove duplicates fasta",
        "output": "",
        "rule": [
            "d5470"
        ]
    },
    {
        "instruction": "",
        "id": "q5471",
        "input": "how to only get value without dtype python array",
        "output": "",
        "rule": [
            "d5471"
        ]
    },
    {
        "instruction": "",
        "id": "q5472",
        "input": "python remove element in dict",
        "output": "",
        "rule": [
            "d5472"
        ]
    },
    {
        "instruction": "",
        "id": "q5473",
        "input": "how to open an image in python'",
        "output": "",
        "rule": [
            "d5473"
        ]
    },
    {
        "instruction": "",
        "id": "q5474",
        "input": "how to open and close file python",
        "output": "",
        "rule": [
            "d5474"
        ]
    },
    {
        "instruction": "",
        "id": "q5475",
        "input": "python remove file in s3",
        "output": "",
        "rule": [
            "d5475"
        ]
    },
    {
        "instruction": "",
        "id": "q5476",
        "input": "how to order by in enum in python",
        "output": "",
        "rule": [
            "d5476"
        ]
    },
    {
        "instruction": "",
        "id": "q5477",
        "input": "python remove file or folder",
        "output": "",
        "rule": [
            "d5477"
        ]
    },
    {
        "instruction": "",
        "id": "q5478",
        "input": "how to output json in python with indent",
        "output": "",
        "rule": [
            "d5478"
        ]
    },
    {
        "instruction": "",
        "id": "q5479",
        "input": "python remove focus after click outside of widget",
        "output": "",
        "rule": [
            "d5479"
        ]
    },
    {
        "instruction": "",
        "id": "q5480",
        "input": "how to output symbols in python like theta",
        "output": "",
        "rule": [
            "d5480"
        ]
    },
    {
        "instruction": "",
        "id": "q5481",
        "input": "python remove from a dictonary",
        "output": "",
        "rule": [
            "d5481"
        ]
    },
    {
        "instruction": "",
        "id": "q5482",
        "input": "how to paginate through a pdf in python",
        "output": "",
        "rule": [
            "d5482"
        ]
    },
    {
        "instruction": "",
        "id": "q5483",
        "input": "python remove legend once plotted",
        "output": "",
        "rule": [
            "d5483"
        ]
    },
    {
        "instruction": "",
        "id": "q5484",
        "input": "how to parse a mongodb document in python",
        "output": "",
        "rule": [
            "d5484"
        ]
    },
    {
        "instruction": "",
        "id": "q5485",
        "input": "python remove non letters from string",
        "output": "",
        "rule": [
            "d5485"
        ]
    },
    {
        "instruction": "",
        "id": "q5486",
        "input": "how to parse blank value as float python",
        "output": "",
        "rule": [
            "d5486"
        ]
    },
    {
        "instruction": "",
        "id": "q5487",
        "input": "python remove return new line in line",
        "output": "",
        "rule": [
            "d5487"
        ]
    },
    {
        "instruction": "",
        "id": "q5488",
        "input": "how to pass user defined objects into json file with python",
        "output": "",
        "rule": [
            "d5488"
        ]
    },
    {
        "instruction": "",
        "id": "q5489",
        "input": "python remove small objects",
        "output": "",
        "rule": [
            "d5489"
        ]
    },
    {
        "instruction": "",
        "id": "q5490",
        "input": "how to pick a random element from set python",
        "output": "",
        "rule": [
            "d5490"
        ]
    },
    {
        "instruction": "",
        "id": "q5491",
        "input": "python remove substring at the begining",
        "output": "",
        "rule": [
            "d5491"
        ]
    },
    {
        "instruction": "",
        "id": "q5492",
        "input": "how to play limit time music in python",
        "output": "",
        "rule": [
            "d5492"
        ]
    },
    {
        "instruction": "",
        "id": "q5493",
        "input": "python remove the parathenses in print",
        "output": "",
        "rule": [
            "d5493"
        ]
    },
    {
        "instruction": "",
        "id": "q5494",
        "input": "how to pop stack in python",
        "output": "",
        "rule": [
            "d5494"
        ]
    },
    {
        "instruction": "",
        "id": "q5495",
        "input": "python remove timezone awareness",
        "output": "",
        "rule": [
            "d5495"
        ]
    },
    {
        "instruction": "",
        "id": "q5496",
        "input": "how to predict the accuracy score in python code",
        "output": "",
        "rule": [
            "d5496"
        ]
    },
    {
        "instruction": "",
        "id": "q5497",
        "input": "python remove while iterating the queue",
        "output": "",
        "rule": [
            "d5497"
        ]
    },
    {
        "instruction": "",
        "id": "q5498",
        "input": "how to prevent python from closing",
        "output": "",
        "rule": [
            "d5498"
        ]
    },
    {
        "instruction": "",
        "id": "q5499",
        "input": "python removing html markup from string",
        "output": "",
        "rule": [
            "d5499"
        ]
    },
    {
        "instruction": "",
        "id": "q5500",
        "input": "how to print a variable in logging error in python",
        "output": "",
        "rule": [
            "d5500"
        ]
    },
    {
        "instruction": "",
        "id": "q5501",
        "input": "python removing property from dictionary",
        "output": "",
        "rule": [
            "d5501"
        ]
    },
    {
        "instruction": "",
        "id": "q5502",
        "input": "how to print errror messages python",
        "output": "",
        "rule": [
            "d5502"
        ]
    },
    {
        "instruction": "",
        "id": "q5503",
        "input": "how to print in an overloaded function python like add",
        "output": "",
        "rule": [
            "d5503"
        ]
    },
    {
        "instruction": "",
        "id": "q5504",
        "input": "python replace n occurrences of characters",
        "output": "",
        "rule": [
            "d5504"
        ]
    },
    {
        "instruction": "",
        "id": "q5505",
        "input": "how to print python output in csv file",
        "output": "",
        "rule": [
            "d5505"
        ]
    },
    {
        "instruction": "",
        "id": "q5506",
        "input": "python replace non letters",
        "output": "",
        "rule": [
            "d5506"
        ]
    },
    {
        "instruction": "",
        "id": "q5507",
        "input": "how to print the contents of a python url request",
        "output": "",
        "rule": [
            "d5507"
        ]
    },
    {
        "instruction": "",
        "id": "q5508",
        "input": "python replace space with underscore in string",
        "output": "",
        "rule": [
            "d5508"
        ]
    },
    {
        "instruction": "",
        "id": "q5509",
        "input": "how to print the object type in python",
        "output": "",
        "rule": [
            "d5509"
        ]
    },
    {
        "instruction": "",
        "id": "q5510",
        "input": "python request get querystring",
        "output": "",
        "rule": [
            "d5510"
        ]
    },
    {
        "instruction": "",
        "id": "q5511",
        "input": "how to print things out in a table python",
        "output": "",
        "rule": [
            "d5511"
        ]
    },
    {
        "instruction": "",
        "id": "q5512",
        "input": "python request header autorization",
        "output": "",
        "rule": [
            "d5512"
        ]
    },
    {
        "instruction": "",
        "id": "q5513",
        "input": "how to print type of string in python",
        "output": "",
        "rule": [
            "d5513"
        ]
    },
    {
        "instruction": "",
        "id": "q5514",
        "input": "python requests head request",
        "output": "",
        "rule": [
            "d5514"
        ]
    },
    {
        "instruction": "",
        "id": "q5515",
        "input": "how to pull the max value from a column on python",
        "output": "",
        "rule": [
            "d5515"
        ]
    },
    {
        "instruction": "",
        "id": "q5516",
        "input": "python requests session pool",
        "output": "",
        "rule": [
            "d5516"
        ]
    },
    {
        "instruction": "",
        "id": "q5517",
        "input": "how to put an exponential function in alegion in python",
        "output": "",
        "rule": [
            "d5517"
        ]
    },
    {
        "instruction": "",
        "id": "q5518",
        "input": "python requests set header for post",
        "output": "",
        "rule": [
            "d5518"
        ]
    },
    {
        "instruction": "",
        "id": "q5519",
        "input": "how to put in bins for histogram on python",
        "output": "",
        "rule": [
            "d5519"
        ]
    },
    {
        "instruction": "",
        "id": "q5520",
        "input": "python requests set no proxies",
        "output": "",
        "rule": [
            "d5520"
        ]
    },
    {
        "instruction": "",
        "id": "q5521",
        "input": "how to put multiple strings in one print command python",
        "output": "",
        "rule": [
            "d5521"
        ]
    },
    {
        "instruction": "",
        "id": "q5522",
        "input": "python requestscookiejar retrieve cookie",
        "output": "",
        "rule": [
            "d5522"
        ]
    },
    {
        "instruction": "",
        "id": "q5523",
        "input": "how to query with session in sqlalchemy python",
        "output": "",
        "rule": [
            "d5523"
        ]
    },
    {
        "instruction": "",
        "id": "q5524",
        "input": "python resize image and maintain aspect ratio",
        "output": "",
        "rule": [
            "d5524"
        ]
    },
    {
        "instruction": "",
        "id": "q5525",
        "input": "how to randomize a datetime python",
        "output": "",
        "rule": [
            "d5525"
        ]
    },
    {
        "instruction": "",
        "id": "q5526",
        "input": "python resize image exif keep",
        "output": "",
        "rule": [
            "d5526"
        ]
    },
    {
        "instruction": "",
        "id": "q5527",
        "input": "how to randomize data in a list python",
        "output": "",
        "rule": [
            "d5527"
        ]
    },
    {
        "instruction": "",
        "id": "q5528",
        "input": "python resolve dynamic attribute at runtime",
        "output": "",
        "rule": [
            "d5528"
        ]
    },
    {
        "instruction": "",
        "id": "q5529",
        "input": "how to read file in python and collect words from lines of words",
        "output": "",
        "rule": [
            "d5529"
        ]
    },
    {
        "instruction": "",
        "id": "q5530",
        "input": "python rest api performance",
        "output": "",
        "rule": [
            "d5530"
        ]
    },
    {
        "instruction": "",
        "id": "q5531",
        "input": "how to read into a buffered reader python",
        "output": "",
        "rule": [
            "d5531"
        ]
    },
    {
        "instruction": "",
        "id": "q5532",
        "input": "python restoring default settings",
        "output": "",
        "rule": [
            "d5532"
        ]
    },
    {
        "instruction": "",
        "id": "q5533",
        "input": "how to read json from url python",
        "output": "",
        "rule": [
            "d5533"
        ]
    },
    {
        "instruction": "",
        "id": "q5534",
        "input": "python restrict memory usage cpu",
        "output": "",
        "rule": [
            "d5534"
        ]
    },
    {
        "instruction": "",
        "id": "q5535",
        "input": "how to redirect to '/' python flask",
        "output": "",
        "rule": [
            "d5535"
        ]
    },
    {
        "instruction": "",
        "id": "q5536",
        "input": "python restrict values in a dict",
        "output": "",
        "rule": [
            "d5536"
        ]
    },
    {
        "instruction": "",
        "id": "q5537",
        "input": "how to reduce to lower matrix in python",
        "output": "",
        "rule": [
            "d5537"
        ]
    },
    {
        "instruction": "",
        "id": "q5538",
        "input": "python retry on element would receive the click",
        "output": "",
        "rule": [
            "d5538"
        ]
    },
    {
        "instruction": "",
        "id": "q5539",
        "input": "how to reformat column name in python",
        "output": "",
        "rule": [
            "d5539"
        ]
    },
    {
        "instruction": "",
        "id": "q5540",
        "input": "python return all indexes of a value",
        "output": "",
        "rule": [
            "d5540"
        ]
    },
    {
        "instruction": "",
        "id": "q5541",
        "input": "how to remove a dom element from an xml python",
        "output": "",
        "rule": [
            "d5541"
        ]
    },
    {
        "instruction": "",
        "id": "q5542",
        "input": "python return dictionary with index and values",
        "output": "",
        "rule": [
            "d5542"
        ]
    },
    {
        "instruction": "",
        "id": "q5543",
        "input": "how to remove a list in a list in python",
        "output": "",
        "rule": [
            "d5543"
        ]
    },
    {
        "instruction": "",
        "id": "q5544",
        "input": "python return dynamic number of objects",
        "output": "",
        "rule": [
            "d5544"
        ]
    },
    {
        "instruction": "",
        "id": "q5545",
        "input": "how to remove all keys in dictionary python",
        "output": "",
        "rule": [
            "d5545"
        ]
    },
    {
        "instruction": "",
        "id": "q5546",
        "input": "python return index of list within list",
        "output": "",
        "rule": [
            "d5546"
        ]
    },
    {
        "instruction": "",
        "id": "q5547",
        "input": "how to remove object from a list python",
        "output": "",
        "rule": [
            "d5547"
        ]
    },
    {
        "instruction": "",
        "id": "q5548",
        "input": "python return response ajax",
        "output": "",
        "rule": [
            "d5548"
        ]
    },
    {
        "instruction": "",
        "id": "q5549",
        "input": "how to remove punctuation in a text using python",
        "output": "",
        "rule": [
            "d5549"
        ]
    },
    {
        "instruction": "",
        "id": "q5550",
        "input": "python return the two closest items in an array",
        "output": "",
        "rule": [
            "d5550"
        ]
    },
    {
        "instruction": "",
        "id": "q5551",
        "input": "how to remove punctuation in python nltk",
        "output": "",
        "rule": [
            "d5551"
        ]
    },
    {
        "instruction": "",
        "id": "q5552",
        "input": "python returning a tempfile without closing it",
        "output": "",
        "rule": [
            "d5552"
        ]
    },
    {
        "instruction": "",
        "id": "q5553",
        "input": "how to remove the spaces from a string python",
        "output": "",
        "rule": [
            "d5553"
        ]
    },
    {
        "instruction": "",
        "id": "q5554",
        "input": "python returns the url in the response issue",
        "output": "",
        "rule": [
            "d5554"
        ]
    },
    {
        "instruction": "",
        "id": "q5555",
        "input": "how to remove values from objects python",
        "output": "",
        "rule": [
            "d5555"
        ]
    },
    {
        "instruction": "",
        "id": "q5556",
        "input": "python reverse call django url from ajax sample",
        "output": "",
        "rule": [
            "d5556"
        ]
    },
    {
        "instruction": "",
        "id": "q5557",
        "input": "how to remove whitespace in python string",
        "output": "",
        "rule": [
            "d5557"
        ]
    },
    {
        "instruction": "",
        "id": "q5558",
        "input": "python rotate image angle",
        "output": "",
        "rule": [
            "d5558"
        ]
    },
    {
        "instruction": "",
        "id": "q5559",
        "input": "how to replace given string in python",
        "output": "",
        "rule": [
            "d5559"
        ]
    },
    {
        "instruction": "",
        "id": "q5560",
        "input": "python rotation matrix 3d",
        "output": "",
        "rule": [
            "d5560"
        ]
    },
    {
        "instruction": "",
        "id": "q5561",
        "input": "how to replace multiple strings in one input python",
        "output": "",
        "rule": [
            "d5561"
        ]
    },
    {
        "instruction": "",
        "id": "q5562",
        "input": "python round 4 significant figures",
        "output": "",
        "rule": [
            "d5562"
        ]
    },
    {
        "instruction": "",
        "id": "q5563",
        "input": "how to replace space with underscore for all the columnname in python",
        "output": "",
        "rule": [
            "d5563"
        ]
    },
    {
        "instruction": "",
        "id": "q5564",
        "input": "how to represent a nonetype object python",
        "output": "",
        "rule": [
            "d5564"
        ]
    },
    {
        "instruction": "",
        "id": "q5565",
        "input": "python rounding to the nearest tenth",
        "output": "",
        "rule": [
            "d5565"
        ]
    },
    {
        "instruction": "",
        "id": "q5566",
        "input": "how to represent comments in python",
        "output": "",
        "rule": [
            "d5566"
        ]
    },
    {
        "instruction": "",
        "id": "q5567",
        "input": "python run django custom command",
        "output": "",
        "rule": [
            "d5567"
        ]
    },
    {
        "instruction": "",
        "id": "q5568",
        "input": "how to retreve python object via id",
        "output": "",
        "rule": [
            "d5568"
        ]
    },
    {
        "instruction": "",
        "id": "q5569",
        "input": "how to retriev the first number on python",
        "output": "",
        "rule": [
            "d5569"
        ]
    },
    {
        "instruction": "",
        "id": "q5570",
        "input": "python run http server in background",
        "output": "",
        "rule": [
            "d5570"
        ]
    },
    {
        "instruction": "",
        "id": "q5571",
        "input": "how to return contents of a file in python",
        "output": "",
        "rule": [
            "d5571"
        ]
    },
    {
        "instruction": "",
        "id": "q5572",
        "input": "python run shell command on the background",
        "output": "",
        "rule": [
            "d5572"
        ]
    },
    {
        "instruction": "",
        "id": "q5573",
        "input": "how to return only unique items in python 3",
        "output": "",
        "rule": [
            "d5573"
        ]
    },
    {
        "instruction": "",
        "id": "q5574",
        "input": "python run until complete server force stop close",
        "output": "",
        "rule": [
            "d5574"
        ]
    },
    {
        "instruction": "",
        "id": "q5575",
        "input": "how to reverse sort a list alphanetically in python",
        "output": "",
        "rule": [
            "d5575"
        ]
    },
    {
        "instruction": "",
        "id": "q5576",
        "input": "python sanic static forlder permission",
        "output": "",
        "rule": [
            "d5576"
        ]
    },
    {
        "instruction": "",
        "id": "q5577",
        "input": "how to round sig figs in python",
        "output": "",
        "rule": [
            "d5577"
        ]
    },
    {
        "instruction": "",
        "id": "q5578",
        "input": "python save a dictionary to csv file",
        "output": "",
        "rule": [
            "d5578"
        ]
    },
    {
        "instruction": "",
        "id": "q5579",
        "input": "how to say if float then do something in python",
        "output": "",
        "rule": [
            "d5579"
        ]
    },
    {
        "instruction": "",
        "id": "q5580",
        "input": "python save self to disk",
        "output": "",
        "rule": [
            "d5580"
        ]
    },
    {
        "instruction": "",
        "id": "q5581",
        "input": "how to see call signature of a funciton in python",
        "output": "",
        "rule": [
            "d5581"
        ]
    },
    {
        "instruction": "",
        "id": "q5582",
        "input": "python scipy stats norm ppf",
        "output": "",
        "rule": [
            "d5582"
        ]
    },
    {
        "instruction": "",
        "id": "q5583",
        "input": "how to see the model summary in python",
        "output": "",
        "rule": [
            "d5583"
        ]
    },
    {
        "instruction": "",
        "id": "q5584",
        "input": "python script to generate unique id 10 caracters",
        "output": "",
        "rule": [
            "d5584"
        ]
    },
    {
        "instruction": "",
        "id": "q5585",
        "input": "how to see the type of items in list python",
        "output": "",
        "rule": [
            "d5585"
        ]
    },
    {
        "instruction": "",
        "id": "q5586",
        "input": "python script to test gcm push",
        "output": "",
        "rule": [
            "d5586"
        ]
    },
    {
        "instruction": "",
        "id": "q5587",
        "input": "how to select model argparse on python shell",
        "output": "",
        "rule": [
            "d5587"
        ]
    },
    {
        "instruction": "",
        "id": "q5588",
        "input": "python script totell if a service is running",
        "output": "",
        "rule": [
            "d5588"
        ]
    },
    {
        "instruction": "",
        "id": "q5589",
        "input": "how to set cursonrposition in python",
        "output": "",
        "rule": [
            "d5589"
        ]
    },
    {
        "instruction": "",
        "id": "q5590",
        "input": "python scripts for stess testing ram",
        "output": "",
        "rule": [
            "d5590"
        ]
    },
    {
        "instruction": "",
        "id": "q5591",
        "input": "how to set different attributes for a number of objects python",
        "output": "",
        "rule": [
            "d5591"
        ]
    },
    {
        "instruction": "",
        "id": "q5592",
        "input": "python scroll into view",
        "output": "",
        "rule": [
            "d5592"
        ]
    },
    {
        "instruction": "",
        "id": "q5593",
        "input": "how to set text size in python",
        "output": "",
        "rule": [
            "d5593"
        ]
    },
    {
        "instruction": "",
        "id": "q5594",
        "input": "python select distinct of column",
        "output": "",
        "rule": [
            "d5594"
        ]
    },
    {
        "instruction": "",
        "id": "q5595",
        "input": "how to set x axis limit in python",
        "output": "",
        "rule": [
            "d5595"
        ]
    },
    {
        "instruction": "",
        "id": "q5596",
        "input": "python send response but don't close",
        "output": "",
        "rule": [
            "d5596"
        ]
    },
    {
        "instruction": "",
        "id": "q5597",
        "input": "how to show a pixel coordinate at the cursor location in python",
        "output": "",
        "rule": [
            "d5597"
        ]
    },
    {
        "instruction": "",
        "id": "q5598",
        "input": "python seperating a sentence into a list",
        "output": "",
        "rule": [
            "d5598"
        ]
    },
    {
        "instruction": "",
        "id": "q5599",
        "input": "how to show a progress on ui,wxpython",
        "output": "",
        "rule": [
            "d5599"
        ]
    },
    {
        "instruction": "",
        "id": "q5600",
        "input": "python serialize datetime json",
        "output": "",
        "rule": [
            "d5600"
        ]
    },
    {
        "instruction": "",
        "id": "q5601",
        "input": "how to show help in python",
        "output": "",
        "rule": [
            "d5601"
        ]
    },
    {
        "instruction": "",
        "id": "q5602",
        "input": "python series only keep if value isnull",
        "output": "",
        "rule": [
            "d5602"
        ]
    },
    {
        "instruction": "",
        "id": "q5603",
        "input": "how to shuffle rows in python array",
        "output": "",
        "rule": [
            "d5603"
        ]
    },
    {
        "instruction": "",
        "id": "q5604",
        "input": "python server configure mime type",
        "output": "",
        "rule": [
            "d5604"
        ]
    },
    {
        "instruction": "",
        "id": "q5605",
        "input": "how to skip an element in a for loop python",
        "output": "",
        "rule": [
            "d5605"
        ]
    },
    {
        "instruction": "",
        "id": "q5606",
        "input": "python session save object",
        "output": "",
        "rule": [
            "d5606"
        ]
    },
    {
        "instruction": "",
        "id": "q5607",
        "input": "how to slice a 2d table in python",
        "output": "",
        "rule": [
            "d5607"
        ]
    },
    {
        "instruction": "",
        "id": "q5608",
        "input": "python set axes range",
        "output": "",
        "rule": [
            "d5608"
        ]
    },
    {
        "instruction": "",
        "id": "q5609",
        "input": "how to slice a list backwards in python",
        "output": "",
        "rule": [
            "d5609"
        ]
    },
    {
        "instruction": "",
        "id": "q5610",
        "input": "python set clear to empty stackoverflow",
        "output": "",
        "rule": [
            "d5610"
        ]
    },
    {
        "instruction": "",
        "id": "q5611",
        "input": "how to sort a array in python",
        "output": "",
        "rule": [
            "d5611"
        ]
    },
    {
        "instruction": "",
        "id": "q5612",
        "input": "python set command as variabls",
        "output": "",
        "rule": [
            "d5612"
        ]
    },
    {
        "instruction": "",
        "id": "q5613",
        "input": "how to sort a list of string in alphabetical order in python",
        "output": "",
        "rule": [
            "d5613"
        ]
    },
    {
        "instruction": "",
        "id": "q5614",
        "input": "python set development testing flags",
        "output": "",
        "rule": [
            "d5614"
        ]
    },
    {
        "instruction": "",
        "id": "q5615",
        "input": "how to sort the data in python",
        "output": "",
        "rule": [
            "d5615"
        ]
    },
    {
        "instruction": "",
        "id": "q5616",
        "input": "python set existing matrix entries to zero",
        "output": "",
        "rule": [
            "d5616"
        ]
    },
    {
        "instruction": "",
        "id": "q5617",
        "input": "how to sort using python the column multiple data values",
        "output": "",
        "rule": [
            "d5617"
        ]
    },
    {
        "instruction": "",
        "id": "q5618",
        "input": "python set global variable in function definition",
        "output": "",
        "rule": [
            "d5618"
        ]
    },
    {
        "instruction": "",
        "id": "q5619",
        "input": "how to specify range in histogram python",
        "output": "",
        "rule": [
            "d5619"
        ]
    },
    {
        "instruction": "",
        "id": "q5620",
        "input": "python set local variable using frame and trace",
        "output": "",
        "rule": [
            "d5620"
        ]
    },
    {
        "instruction": "",
        "id": "q5621",
        "input": "how to split a table into a matrix in python",
        "output": "",
        "rule": [
            "d5621"
        ]
    },
    {
        "instruction": "",
        "id": "q5622",
        "input": "python set log y axis ticks",
        "output": "",
        "rule": [
            "d5622"
        ]
    },
    {
        "instruction": "",
        "id": "q5623",
        "input": "how to split an array in 2 by index python",
        "output": "",
        "rule": [
            "d5623"
        ]
    },
    {
        "instruction": "",
        "id": "q5624",
        "input": "python set number of x ticks",
        "output": "",
        "rule": [
            "d5624"
        ]
    },
    {
        "instruction": "",
        "id": "q5625",
        "input": "how to standardize matrix in python",
        "output": "",
        "rule": [
            "d5625"
        ]
    },
    {
        "instruction": "",
        "id": "q5626",
        "input": "python set range equal to a variable",
        "output": "",
        "rule": [
            "d5626"
        ]
    },
    {
        "instruction": "",
        "id": "q5627",
        "input": "how to stop a process linux python",
        "output": "",
        "rule": [
            "d5627"
        ]
    },
    {
        "instruction": "",
        "id": "q5628",
        "input": "python set standard output to line buffered",
        "output": "",
        "rule": [
            "d5628"
        ]
    },
    {
        "instruction": "",
        "id": "q5629",
        "input": "how to store sessions using a python server",
        "output": "",
        "rule": [
            "d5629"
        ]
    },
    {
        "instruction": "",
        "id": "q5630",
        "input": "python set unhashable type list",
        "output": "",
        "rule": [
            "d5630"
        ]
    },
    {
        "instruction": "",
        "id": "q5631",
        "input": "how to store true boolean as a variable in python",
        "output": "",
        "rule": [
            "d5631"
        ]
    },
    {
        "instruction": "",
        "id": "q5632",
        "input": "python set with not unique",
        "output": "",
        "rule": [
            "d5632"
        ]
    },
    {
        "instruction": "",
        "id": "q5633",
        "input": "how to string two numbers in python",
        "output": "",
        "rule": [
            "d5633"
        ]
    },
    {
        "instruction": "",
        "id": "q5634",
        "input": "python setdefault nested dict",
        "output": "",
        "rule": [
            "d5634"
        ]
    },
    {
        "instruction": "",
        "id": "q5635",
        "input": "how to stringify json object in python",
        "output": "",
        "rule": [
            "d5635"
        ]
    },
    {
        "instruction": "",
        "id": "q5636",
        "input": "python setuptools entry points",
        "output": "",
        "rule": [
            "d5636"
        ]
    },
    {
        "instruction": "",
        "id": "q5637",
        "input": "how to strip comma within parenthesis python",
        "output": "",
        "rule": [
            "d5637"
        ]
    },
    {
        "instruction": "",
        "id": "q5638",
        "input": "how to swap rows matrix in python",
        "output": "",
        "rule": [
            "d5638"
        ]
    },
    {
        "instruction": "",
        "id": "q5639",
        "input": "python sha1 hash of a file",
        "output": "",
        "rule": [
            "d5639"
        ]
    },
    {
        "instruction": "",
        "id": "q5640",
        "input": "how to switch capital letters and lower on python",
        "output": "",
        "rule": [
            "d5640"
        ]
    },
    {
        "instruction": "",
        "id": "q5641",
        "input": "python sha1 hashed string",
        "output": "",
        "rule": [
            "d5641"
        ]
    },
    {
        "instruction": "",
        "id": "q5642",
        "input": "how to take date range as input in python 3",
        "output": "",
        "rule": [
            "d5642"
        ]
    },
    {
        "instruction": "",
        "id": "q5643",
        "input": "python shell check virtual env",
        "output": "",
        "rule": [
            "d5643"
        ]
    },
    {
        "instruction": "",
        "id": "q5644",
        "input": "how to take natural logarithm ln in python",
        "output": "",
        "rule": [
            "d5644"
        ]
    },
    {
        "instruction": "",
        "id": "q5645",
        "input": "python short time fft",
        "output": "",
        "rule": [
            "d5645"
        ]
    },
    {
        "instruction": "",
        "id": "q5646",
        "input": "how to tell if a python script has admin privileges",
        "output": "",
        "rule": [
            "d5646"
        ]
    },
    {
        "instruction": "",
        "id": "q5647",
        "input": "python show attributes of object",
        "output": "",
        "rule": [
            "d5647"
        ]
    },
    {
        "instruction": "",
        "id": "q5648",
        "input": "how to time a function call in python",
        "output": "",
        "rule": [
            "d5648"
        ]
    },
    {
        "instruction": "",
        "id": "q5649",
        "input": "python show image object",
        "output": "",
        "rule": [
            "d5649"
        ]
    },
    {
        "instruction": "",
        "id": "q5650",
        "input": "how to turn of traceback in python",
        "output": "",
        "rule": [
            "d5650"
        ]
    },
    {
        "instruction": "",
        "id": "q5651",
        "input": "python sigint handler exits windows",
        "output": "",
        "rule": [
            "d5651"
        ]
    },
    {
        "instruction": "",
        "id": "q5652",
        "input": "how to type infinity in code python",
        "output": "",
        "rule": [
            "d5652"
        ]
    },
    {
        "instruction": "",
        "id": "q5653",
        "input": "python signal handler how to die",
        "output": "",
        "rule": [
            "d5653"
        ]
    },
    {
        "instruction": "",
        "id": "q5654",
        "input": "how to update multiple mongodb python",
        "output": "",
        "rule": [
            "d5654"
        ]
    },
    {
        "instruction": "",
        "id": "q5655",
        "input": "python simple html entity replacer",
        "output": "",
        "rule": [
            "d5655"
        ]
    },
    {
        "instruction": "",
        "id": "q5656",
        "input": "how to update value in json python",
        "output": "",
        "rule": [
            "d5656"
        ]
    },
    {
        "instruction": "",
        "id": "q5657",
        "input": "python simplehttpserver log requests",
        "output": "",
        "rule": [
            "d5657"
        ]
    },
    {
        "instruction": "",
        "id": "q5658",
        "input": "how to update value in python dictionary",
        "output": "",
        "rule": [
            "d5658"
        ]
    },
    {
        "instruction": "",
        "id": "q5659",
        "input": "python size of a variable command'",
        "output": "",
        "rule": [
            "d5659"
        ]
    },
    {
        "instruction": "",
        "id": "q5660",
        "input": "how to url ssl to wrap a python socket for an https request",
        "output": "",
        "rule": [
            "d5660"
        ]
    },
    {
        "instruction": "",
        "id": "q5661",
        "input": "python skip file pointer to a specific line",
        "output": "",
        "rule": [
            "d5661"
        ]
    },
    {
        "instruction": "",
        "id": "q5662",
        "input": "how to use a for loop to make a table python",
        "output": "",
        "rule": [
            "d5662"
        ]
    },
    {
        "instruction": "",
        "id": "q5663",
        "input": "python skip to end of parentheses",
        "output": "",
        "rule": [
            "d5663"
        ]
    },
    {
        "instruction": "",
        "id": "q5664",
        "input": "how to use a python filter object",
        "output": "",
        "rule": [
            "d5664"
        ]
    },
    {
        "instruction": "",
        "id": "q5665",
        "input": "python skip to next line",
        "output": "",
        "rule": [
            "d5665"
        ]
    },
    {
        "instruction": "",
        "id": "q5666",
        "input": "how to use a variable for spacing in python",
        "output": "",
        "rule": [
            "d5666"
        ]
    },
    {
        "instruction": "",
        "id": "q5667",
        "input": "python sklearn roc auc",
        "output": "",
        "rule": [
            "d5667"
        ]
    },
    {
        "instruction": "",
        "id": "q5668",
        "input": "how to use differemt colour un write command in python",
        "output": "",
        "rule": [
            "d5668"
        ]
    },
    {
        "instruction": "",
        "id": "q5669",
        "input": "python sklearn should be equal the number of features at training time",
        "output": "",
        "rule": [
            "d5669"
        ]
    },
    {
        "instruction": "",
        "id": "q5670",
        "input": "how to use exponential constant in [python",
        "output": "",
        "rule": [
            "d5670"
        ]
    },
    {
        "instruction": "",
        "id": "q5671",
        "input": "python sleep in a while loop",
        "output": "",
        "rule": [
            "d5671"
        ]
    },
    {
        "instruction": "",
        "id": "q5672",
        "input": "how to use most left index in python",
        "output": "",
        "rule": [
            "d5672"
        ]
    },
    {
        "instruction": "",
        "id": "q5673",
        "input": "python sleep in for loop",
        "output": "",
        "rule": [
            "d5673"
        ]
    },
    {
        "instruction": "",
        "id": "q5674",
        "input": "how to use python to turn an html page into a plaintext file",
        "output": "",
        "rule": [
            "d5674"
        ]
    },
    {
        "instruction": "",
        "id": "q5675",
        "input": "python slice half way",
        "output": "",
        "rule": [
            "d5675"
        ]
    },
    {
        "instruction": "",
        "id": "q5676",
        "input": "how to use raise without the extra in python",
        "output": "",
        "rule": [
            "d5676"
        ]
    },
    {
        "instruction": "",
        "id": "q5677",
        "input": "python slice list into equal items",
        "output": "",
        "rule": [
            "d5677"
        ]
    },
    {
        "instruction": "",
        "id": "q5678",
        "input": "how to use tkinter messagebox in python 2",
        "output": "",
        "rule": [
            "d5678"
        ]
    },
    {
        "instruction": "",
        "id": "q5679",
        "input": "python softmax result to label",
        "output": "",
        "rule": [
            "d5679"
        ]
    },
    {
        "instruction": "",
        "id": "q5680",
        "input": "how to validate date python",
        "output": "",
        "rule": [
            "d5680"
        ]
    },
    {
        "instruction": "",
        "id": "q5681",
        "input": "python sort a list by last name",
        "output": "",
        "rule": [
            "d5681"
        ]
    },
    {
        "instruction": "",
        "id": "q5682",
        "input": "how to wrap an infinite iterator python",
        "output": "",
        "rule": [
            "d5682"
        ]
    },
    {
        "instruction": "",
        "id": "q5683",
        "input": "python sort dictionary by key iteritems",
        "output": "",
        "rule": [
            "d5683"
        ]
    },
    {
        "instruction": "",
        "id": "q5684",
        "input": "how to wrap around text in python",
        "output": "",
        "rule": [
            "d5684"
        ]
    },
    {
        "instruction": "",
        "id": "q5685",
        "input": "python sort list endswith",
        "output": "",
        "rule": [
            "d5685"
        ]
    },
    {
        "instruction": "",
        "id": "q5686",
        "input": "how to write a code that rounds a number to the input of digits python",
        "output": "",
        "rule": [
            "d5686"
        ]
    },
    {
        "instruction": "",
        "id": "q5687",
        "input": "python sort list of dictionaries by multiple keys",
        "output": "",
        "rule": [
            "d5687"
        ]
    },
    {
        "instruction": "",
        "id": "q5688",
        "input": "how to write a comment header in python",
        "output": "",
        "rule": [
            "d5688"
        ]
    },
    {
        "instruction": "",
        "id": "q5689",
        "input": "how to write a function in python in descending order",
        "output": "",
        "rule": [
            "d5689"
        ]
    },
    {
        "instruction": "",
        "id": "q5690",
        "input": "python split list into sublists based on size",
        "output": "",
        "rule": [
            "d5690"
        ]
    },
    {
        "instruction": "",
        "id": "q5691",
        "input": "how to write a left join function in python for sql query",
        "output": "",
        "rule": [
            "d5691"
        ]
    },
    {
        "instruction": "",
        "id": "q5692",
        "input": "python split string delimter word",
        "output": "",
        "rule": [
            "d5692"
        ]
    },
    {
        "instruction": "",
        "id": "q5693",
        "input": "how to write a list as tab delimit into a file, line by line, python",
        "output": "",
        "rule": [
            "d5693"
        ]
    },
    {
        "instruction": "",
        "id": "q5694",
        "input": "python split string to integer tuple",
        "output": "",
        "rule": [
            "d5694"
        ]
    },
    {
        "instruction": "",
        "id": "q5695",
        "input": "how to write a nested dictionary to a string in python",
        "output": "",
        "rule": [
            "d5695"
        ]
    },
    {
        "instruction": "",
        "id": "q5696",
        "input": "python split string to subatring f differernt lenght",
        "output": "",
        "rule": [
            "d5696"
        ]
    },
    {
        "instruction": "",
        "id": "q5697",
        "input": "how to write a python expression that evaluates and stores a function",
        "output": "",
        "rule": [
            "d5697"
        ]
    },
    {
        "instruction": "",
        "id": "q5698",
        "input": "python spyder apply lowercase transformation to code",
        "output": "",
        "rule": [
            "d5698"
        ]
    },
    {
        "instruction": "",
        "id": "q5699",
        "input": "how to write python exclusive or",
        "output": "",
        "rule": [
            "d5699"
        ]
    },
    {
        "instruction": "",
        "id": "q5700",
        "input": "python sql server paramerterized query",
        "output": "",
        "rule": [
            "d5700"
        ]
    },
    {
        "instruction": "",
        "id": "q5701",
        "input": "howto generate same rand sequence in python",
        "output": "",
        "rule": [
            "d5701"
        ]
    },
    {
        "instruction": "",
        "id": "q5702",
        "input": "html entity (named) in python",
        "output": "",
        "rule": [
            "d5702"
        ]
    },
    {
        "instruction": "",
        "id": "q5703",
        "input": "python sqlalchemy model table update method",
        "output": "",
        "rule": [
            "d5703"
        ]
    },
    {
        "instruction": "",
        "id": "q5704",
        "input": "html render text as markdown python",
        "output": "",
        "rule": [
            "d5704"
        ]
    },
    {
        "instruction": "",
        "id": "q5705",
        "input": "python sqlalchemy not create table",
        "output": "",
        "rule": [
            "d5705"
        ]
    },
    {
        "instruction": "",
        "id": "q5706",
        "input": "hwo to put a function in loop with sleep time python",
        "output": "",
        "rule": [
            "d5706"
        ]
    },
    {
        "instruction": "",
        "id": "q5707",
        "input": "python sqlite table name in a variable",
        "output": "",
        "rule": [
            "d5707"
        ]
    },
    {
        "instruction": "",
        "id": "q5708",
        "input": "identify datatype and print the name in python",
        "output": "",
        "rule": [
            "d5708"
        ]
    },
    {
        "instruction": "",
        "id": "q5709",
        "input": "python sqlite3 last row",
        "output": "",
        "rule": [
            "d5709"
        ]
    },
    {
        "instruction": "",
        "id": "q5710",
        "input": "identifying string types in python",
        "output": "",
        "rule": [
            "d5710"
        ]
    },
    {
        "instruction": "",
        "id": "q5711",
        "input": "python stacked plot from series",
        "output": "",
        "rule": [
            "d5711"
        ]
    },
    {
        "instruction": "",
        "id": "q5712",
        "input": "if there are no inputs, print the result in python code",
        "output": "",
        "rule": [
            "d5712"
        ]
    },
    {
        "instruction": "",
        "id": "q5713",
        "input": "python stdout clear line",
        "output": "",
        "rule": [
            "d5713"
        ]
    },
    {
        "instruction": "",
        "id": "q5714",
        "input": "if value key in python not provided, defaulted to none python",
        "output": "",
        "rule": [
            "d5714"
        ]
    },
    {
        "instruction": "",
        "id": "q5715",
        "input": "python stop a window service",
        "output": "",
        "rule": [
            "d5715"
        ]
    },
    {
        "instruction": "",
        "id": "q5716",
        "input": "image jaccard similarity in python",
        "output": "",
        "rule": [
            "d5716"
        ]
    },
    {
        "instruction": "",
        "id": "q5717",
        "input": "python store the index of the max 3 values in an array",
        "output": "",
        "rule": [
            "d5717"
        ]
    },
    {
        "instruction": "",
        "id": "q5718",
        "input": "images to animated gif python",
        "output": "",
        "rule": [
            "d5718"
        ]
    },
    {
        "instruction": "",
        "id": "q5719",
        "input": "python store userid in session",
        "output": "",
        "rule": [
            "d5719"
        ]
    },
    {
        "instruction": "",
        "id": "q5720",
        "input": "immediately retrieve the last key in the mysql table using python 3",
        "output": "",
        "rule": [
            "d5720"
        ]
    },
    {
        "instruction": "",
        "id": "q5721",
        "input": "python str to bytes python2",
        "output": "",
        "rule": [
            "d5721"
        ]
    },
    {
        "instruction": "",
        "id": "q5722",
        "input": "implement clustered edges in python networkx",
        "output": "",
        "rule": [
            "d5722"
        ]
    },
    {
        "instruction": "",
        "id": "q5723",
        "input": "python string ithout spaces",
        "output": "",
        "rule": [
            "d5723"
        ]
    },
    {
        "instruction": "",
        "id": "q5724",
        "input": "in a dictionary in python 3 is pop and del the same thing",
        "output": "",
        "rule": [
            "d5724"
        ]
    },
    {
        "instruction": "",
        "id": "q5725",
        "input": "python string remove non alphabet",
        "output": "",
        "rule": [
            "d5725"
        ]
    },
    {
        "instruction": "",
        "id": "q5726",
        "input": "in python ctype for pointer",
        "output": "",
        "rule": [
            "d5726"
        ]
    },
    {
        "instruction": "",
        "id": "q5727",
        "input": "python string replace multiple",
        "output": "",
        "rule": [
            "d5727"
        ]
    },
    {
        "instruction": "",
        "id": "q5728",
        "input": "in python takes in a picture and scales it by doubling the width and cutting the height in half",
        "output": "",
        "rule": [
            "d5728"
        ]
    },
    {
        "instruction": "",
        "id": "q5729",
        "input": "python string replace multiple things",
        "output": "",
        "rule": [
            "d5729"
        ]
    },
    {
        "instruction": "",
        "id": "q5730",
        "input": "in python, can we open a file for both write and read",
        "output": "",
        "rule": [
            "d5730"
        ]
    },
    {
        "instruction": "",
        "id": "q5731",
        "input": "python string replace space with underscore",
        "output": "",
        "rule": [
            "d5731"
        ]
    },
    {
        "instruction": "",
        "id": "q5732",
        "input": "python string to dictonary",
        "output": "",
        "rule": [
            "d5732"
        ]
    },
    {
        "instruction": "",
        "id": "q5733",
        "input": "increase the pyxl column width using python",
        "output": "",
        "rule": [
            "d5733"
        ]
    },
    {
        "instruction": "",
        "id": "q5734",
        "input": "python string to enum name",
        "output": "",
        "rule": [
            "d5734"
        ]
    },
    {
        "instruction": "",
        "id": "q5735",
        "input": "indenting multiline docstrings python",
        "output": "",
        "rule": [
            "d5735"
        ]
    },
    {
        "instruction": "",
        "id": "q5736",
        "input": "python string to microseconds",
        "output": "",
        "rule": [
            "d5736"
        ]
    },
    {
        "instruction": "",
        "id": "q5737",
        "input": "index of a number in a list python",
        "output": "",
        "rule": [
            "d5737"
        ]
    },
    {
        "instruction": "",
        "id": "q5738",
        "input": "python stringio faster than file",
        "output": "",
        "rule": [
            "d5738"
        ]
    },
    {
        "instruction": "",
        "id": "q5739",
        "input": "index of last match regex python",
        "output": "",
        "rule": [
            "d5739"
        ]
    },
    {
        "instruction": "",
        "id": "q5740",
        "input": "python stringio to file path",
        "output": "",
        "rule": [
            "d5740"
        ]
    },
    {
        "instruction": "",
        "id": "q5741",
        "input": "index of the maximum number in the array python",
        "output": "",
        "rule": [
            "d5741"
        ]
    },
    {
        "instruction": "",
        "id": "q5742",
        "input": "python strip invisible characters from string",
        "output": "",
        "rule": [
            "d5742"
        ]
    },
    {
        "instruction": "",
        "id": "q5743",
        "input": "indexing a line after reading file python",
        "output": "",
        "rule": [
            "d5743"
        ]
    },
    {
        "instruction": "",
        "id": "q5744",
        "input": "python strip off time million seconds",
        "output": "",
        "rule": [
            "d5744"
        ]
    },
    {
        "instruction": "",
        "id": "q5745",
        "input": "initializing a list to an unknown number of elements in python",
        "output": "",
        "rule": [
            "d5745"
        ]
    },
    {
        "instruction": "",
        "id": "q5746",
        "input": "python strip spaces from strings",
        "output": "",
        "rule": [
            "d5746"
        ]
    },
    {
        "instruction": "",
        "id": "q5747",
        "input": "initiate with an empty set in python",
        "output": "",
        "rule": [
            "d5747"
        ]
    },
    {
        "instruction": "",
        "id": "q5748",
        "input": "python strip string of prefix",
        "output": "",
        "rule": [
            "d5748"
        ]
    },
    {
        "instruction": "",
        "id": "q5749",
        "input": "inner join python means",
        "output": "",
        "rule": [
            "d5749"
        ]
    },
    {
        "instruction": "",
        "id": "q5750",
        "input": "python strip string prefix",
        "output": "",
        "rule": [
            "d5750"
        ]
    },
    {
        "instruction": "",
        "id": "q5751",
        "input": "input a non string into function python",
        "output": "",
        "rule": [
            "d5751"
        ]
    },
    {
        "instruction": "",
        "id": "q5752",
        "input": "python subtract 2 weeks from a date",
        "output": "",
        "rule": [
            "d5752"
        ]
    },
    {
        "instruction": "",
        "id": "q5753",
        "input": "input capital letters into number in alphabet in python",
        "output": "",
        "rule": [
            "d5753"
        ]
    },
    {
        "instruction": "",
        "id": "q5754",
        "input": "python symbolic sin inverse",
        "output": "",
        "rule": [
            "d5754"
        ]
    },
    {
        "instruction": "",
        "id": "q5755",
        "input": "insert and before the last item in list in python",
        "output": "",
        "rule": [
            "d5755"
        ]
    },
    {
        "instruction": "",
        "id": "q5756",
        "input": "python synchronized objects should only be",
        "output": "",
        "rule": [
            "d5756"
        ]
    },
    {
        "instruction": "",
        "id": "q5757",
        "input": "insert image into pdf python",
        "output": "",
        "rule": [
            "d5757"
        ]
    },
    {
        "instruction": "",
        "id": "q5758",
        "input": "python synchronous function call an async coroutine",
        "output": "",
        "rule": [
            "d5758"
        ]
    },
    {
        "instruction": "",
        "id": "q5759",
        "input": "python sys setdefaultencoding utf",
        "output": "",
        "rule": [
            "d5759"
        ]
    },
    {
        "instruction": "",
        "id": "q5760",
        "input": "interpolate x in list using python",
        "output": "",
        "rule": [
            "d5760"
        ]
    },
    {
        "instruction": "",
        "id": "q5761",
        "input": "python sys stdin remove new line",
        "output": "",
        "rule": [
            "d5761"
        ]
    },
    {
        "instruction": "",
        "id": "q5762",
        "input": "interpolation in python using two column values at the same time",
        "output": "",
        "rule": [
            "d5762"
        ]
    },
    {
        "instruction": "",
        "id": "q5763",
        "input": "python systemd crash core dump gunicorn",
        "output": "",
        "rule": [
            "d5763"
        ]
    },
    {
        "instruction": "",
        "id": "q5764",
        "input": "is a set iterable python",
        "output": "",
        "rule": [
            "d5764"
        ]
    },
    {
        "instruction": "",
        "id": "q5765",
        "input": "python take max across arrays",
        "output": "",
        "rule": [
            "d5765"
        ]
    },
    {
        "instruction": "",
        "id": "q5766",
        "input": "is python able use a printer",
        "output": "",
        "rule": [
            "d5766"
        ]
    },
    {
        "instruction": "",
        "id": "q5767",
        "input": "python tell if a file is not there",
        "output": "",
        "rule": [
            "d5767"
        ]
    },
    {
        "instruction": "",
        "id": "q5768",
        "input": "is there a python function that rounds off integers",
        "output": "",
        "rule": [
            "d5768"
        ]
    },
    {
        "instruction": "",
        "id": "q5769",
        "input": "python tell if request has timed out",
        "output": "",
        "rule": [
            "d5769"
        ]
    },
    {
        "instruction": "",
        "id": "q5770",
        "input": "is there a way to run a bash script in python",
        "output": "",
        "rule": [
            "d5770"
        ]
    },
    {
        "instruction": "",
        "id": "q5771",
        "input": "python tell if windows or linux",
        "output": "",
        "rule": [
            "d5771"
        ]
    },
    {
        "instruction": "",
        "id": "q5772",
        "input": "is there any function in python to count the most common value in a list",
        "output": "",
        "rule": [
            "d5772"
        ]
    },
    {
        "instruction": "",
        "id": "q5773",
        "input": "python tensorflow node names",
        "output": "",
        "rule": [
            "d5773"
        ]
    },
    {
        "instruction": "",
        "id": "q5774",
        "input": "isnull values removal in python",
        "output": "",
        "rule": [
            "d5774"
        ]
    },
    {
        "instruction": "",
        "id": "q5775",
        "input": "python tensorflow tf global variables initializer",
        "output": "",
        "rule": [
            "d5775"
        ]
    },
    {
        "instruction": "",
        "id": "q5776",
        "input": "iso format to datetime python",
        "output": "",
        "rule": [
            "d5776"
        ]
    },
    {
        "instruction": "",
        "id": "q5777",
        "input": "python terminate function after time",
        "output": "",
        "rule": [
            "d5777"
        ]
    },
    {
        "instruction": "",
        "id": "q5778",
        "input": "iterate over chunksize in range python",
        "output": "",
        "rule": [
            "d5778"
        ]
    },
    {
        "instruction": "",
        "id": "q5779",
        "input": "python test if array or list",
        "output": "",
        "rule": [
            "d5779"
        ]
    },
    {
        "instruction": "",
        "id": "q5780",
        "input": "iterator from dict keys python",
        "output": "",
        "rule": [
            "d5780"
        ]
    },
    {
        "instruction": "",
        "id": "q5781",
        "input": "python test if binary file",
        "output": "",
        "rule": [
            "d5781"
        ]
    },
    {
        "instruction": "",
        "id": "q5782",
        "input": "itertools python group by multiple keys",
        "output": "",
        "rule": [
            "d5782"
        ]
    },
    {
        "instruction": "",
        "id": "q5783",
        "input": "python test matrix singualrity",
        "output": "",
        "rule": [
            "d5783"
        ]
    },
    {
        "instruction": "",
        "id": "q5784",
        "input": "java 2 dimensional array return python",
        "output": "",
        "rule": [
            "d5784"
        ]
    },
    {
        "instruction": "",
        "id": "q5785",
        "input": "python test whether variable is a collection of atomic type",
        "output": "",
        "rule": [
            "d5785"
        ]
    },
    {
        "instruction": "",
        "id": "q5786",
        "input": "java con't run python with runtime in windows",
        "output": "",
        "rule": [
            "d5786"
        ]
    },
    {
        "instruction": "",
        "id": "q5787",
        "input": "python test, how to make sure data format is correct",
        "output": "",
        "rule": [
            "d5787"
        ]
    },
    {
        "instruction": "",
        "id": "q5788",
        "input": "js object to python json without quota",
        "output": "",
        "rule": [
            "d5788"
        ]
    },
    {
        "instruction": "",
        "id": "q5789",
        "input": "python textwrap without cutting up words",
        "output": "",
        "rule": [
            "d5789"
        ]
    },
    {
        "instruction": "",
        "id": "q5790",
        "input": "json boolean to python",
        "output": "",
        "rule": [
            "d5790"
        ]
    },
    {
        "instruction": "",
        "id": "q5791",
        "input": "python the best way to detect adege of image",
        "output": "",
        "rule": [
            "d5791"
        ]
    },
    {
        "instruction": "",
        "id": "q5792",
        "input": "json dump is not serializable python 2 to python 3",
        "output": "",
        "rule": [
            "d5792"
        ]
    },
    {
        "instruction": "",
        "id": "q5793",
        "input": "python threading condition lock",
        "output": "",
        "rule": [
            "d5793"
        ]
    },
    {
        "instruction": "",
        "id": "q5794",
        "input": "json encoder python custom object",
        "output": "",
        "rule": [
            "d5794"
        ]
    },
    {
        "instruction": "",
        "id": "q5795",
        "input": "python time complexity measure",
        "output": "",
        "rule": [
            "d5795"
        ]
    },
    {
        "instruction": "",
        "id": "q5796",
        "input": "json load get u strings python",
        "output": "",
        "rule": [
            "d5796"
        ]
    },
    {
        "instruction": "",
        "id": "q5797",
        "input": "python time diff ms",
        "output": "",
        "rule": [
            "d5797"
        ]
    },
    {
        "instruction": "",
        "id": "q5798",
        "input": "kali linux python webdriver chrome",
        "output": "",
        "rule": [
            "d5798"
        ]
    },
    {
        "instruction": "",
        "id": "q5799",
        "input": "python time from string to minute",
        "output": "",
        "rule": [
            "d5799"
        ]
    },
    {
        "instruction": "",
        "id": "q5800",
        "input": "key function to sort by filter in sorted python3",
        "output": "",
        "rule": [
            "d5800"
        ]
    },
    {
        "instruction": "",
        "id": "q5801",
        "input": "python timezone pytz fromutc",
        "output": "",
        "rule": [
            "d5801"
        ]
    },
    {
        "instruction": "",
        "id": "q5802",
        "input": "python tkinter bind unchecking checkbutton",
        "output": "",
        "rule": [
            "d5802"
        ]
    },
    {
        "instruction": "",
        "id": "q5803",
        "input": "keyboard shortcut to stop python code",
        "output": "",
        "rule": [
            "d5803"
        ]
    },
    {
        "instruction": "",
        "id": "q5804",
        "input": "python tkinter calling an event to close gui window",
        "output": "",
        "rule": [
            "d5804"
        ]
    },
    {
        "instruction": "",
        "id": "q5805",
        "input": "keypress event python in a window",
        "output": "",
        "rule": [
            "d5805"
        ]
    },
    {
        "instruction": "",
        "id": "q5806",
        "input": "python tkinter delete text last line",
        "output": "",
        "rule": [
            "d5806"
        ]
    },
    {
        "instruction": "",
        "id": "q5807",
        "input": "killing server python sigint",
        "output": "",
        "rule": [
            "d5807"
        ]
    },
    {
        "instruction": "",
        "id": "q5808",
        "input": "python tkinter get the position of a widget",
        "output": "",
        "rule": [
            "d5808"
        ]
    },
    {
        "instruction": "",
        "id": "q5809",
        "input": "last accessed time file python",
        "output": "",
        "rule": [
            "d5809"
        ]
    },
    {
        "instruction": "",
        "id": "q5810",
        "input": "python tkinter hide window",
        "output": "",
        "rule": [
            "d5810"
        ]
    },
    {
        "instruction": "",
        "id": "q5811",
        "input": "last n lines of a command in python",
        "output": "",
        "rule": [
            "d5811"
        ]
    },
    {
        "instruction": "",
        "id": "q5812",
        "input": "python tkinter scale if value changed",
        "output": "",
        "rule": [
            "d5812"
        ]
    },
    {
        "instruction": "",
        "id": "q5813",
        "input": "latex notation python spyder",
        "output": "",
        "rule": [
            "d5813"
        ]
    },
    {
        "instruction": "",
        "id": "q5814",
        "input": "python to capitalize letter",
        "output": "",
        "rule": [
            "d5814"
        ]
    },
    {
        "instruction": "",
        "id": "q5815",
        "input": "latitude and longitude map python",
        "output": "",
        "rule": [
            "d5815"
        ]
    },
    {
        "instruction": "",
        "id": "q5816",
        "input": "python to concatinate multiple pdf files",
        "output": "",
        "rule": [
            "d5816"
        ]
    },
    {
        "instruction": "",
        "id": "q5817",
        "input": "lazy with file write yield python",
        "output": "",
        "rule": [
            "d5817"
        ]
    },
    {
        "instruction": "",
        "id": "q5818",
        "input": "python to get all ec2 instances with tags",
        "output": "",
        "rule": [
            "d5818"
        ]
    },
    {
        "instruction": "",
        "id": "q5819",
        "input": "lemmitiser in python for list of words",
        "output": "",
        "rule": [
            "d5819"
        ]
    },
    {
        "instruction": "",
        "id": "q5820",
        "input": "python top k largest elements",
        "output": "",
        "rule": [
            "d5820"
        ]
    },
    {
        "instruction": "",
        "id": "q5821",
        "input": "lenght of a vector python",
        "output": "",
        "rule": [
            "d5821"
        ]
    },
    {
        "instruction": "",
        "id": "q5822",
        "input": "python tornado flow control",
        "output": "",
        "rule": [
            "d5822"
        ]
    },
    {
        "instruction": "",
        "id": "q5823",
        "input": "length of array python for loop",
        "output": "",
        "rule": [
            "d5823"
        ]
    },
    {
        "instruction": "",
        "id": "q5824",
        "input": "python tornado return chunk json",
        "output": "",
        "rule": [
            "d5824"
        ]
    },
    {
        "instruction": "",
        "id": "q5825",
        "input": "limit precision while print python",
        "output": "",
        "rule": [
            "d5825"
        ]
    },
    {
        "instruction": "",
        "id": "q5826",
        "input": "python traceback remove raise code",
        "output": "",
        "rule": [
            "d5826"
        ]
    },
    {
        "instruction": "",
        "id": "q5827",
        "input": "linear regression on logrithmic data, python",
        "output": "",
        "rule": [
            "d5827"
        ]
    },
    {
        "instruction": "",
        "id": "q5828",
        "input": "python tree preorder traversal",
        "output": "",
        "rule": [
            "d5828"
        ]
    },
    {
        "instruction": "",
        "id": "q5829",
        "input": "linear regression plot the graph in python",
        "output": "",
        "rule": [
            "d5829"
        ]
    },
    {
        "instruction": "",
        "id": "q5830",
        "input": "python trim remove whitespace",
        "output": "",
        "rule": [
            "d5830"
        ]
    },
    {
        "instruction": "",
        "id": "q5831",
        "input": "list in python are dynamic arrays",
        "output": "",
        "rule": [
            "d5831"
        ]
    },
    {
        "instruction": "",
        "id": "q5832",
        "input": "python trim trailing char",
        "output": "",
        "rule": [
            "d5832"
        ]
    },
    {
        "instruction": "",
        "id": "q5833",
        "input": "list of list matrix form in python",
        "output": "",
        "rule": [
            "d5833"
        ]
    },
    {
        "instruction": "",
        "id": "q5834",
        "input": "python true false to 0 1 image",
        "output": "",
        "rule": [
            "d5834"
        ]
    },
    {
        "instruction": "",
        "id": "q5835",
        "input": "list of ordered dictionariess python",
        "output": "",
        "rule": [
            "d5835"
        ]
    },
    {
        "instruction": "",
        "id": "q5836",
        "input": "python try catch for unzip",
        "output": "",
        "rule": [
            "d5836"
        ]
    },
    {
        "instruction": "",
        "id": "q5837",
        "input": "list of python booleans syntax",
        "output": "",
        "rule": [
            "d5837"
        ]
    },
    {
        "instruction": "",
        "id": "q5838",
        "input": "python turn a string to a list",
        "output": "",
        "rule": [
            "d5838"
        ]
    },
    {
        "instruction": "",
        "id": "q5839",
        "input": "list of tables in database sql in python",
        "output": "",
        "rule": [
            "d5839"
        ]
    },
    {
        "instruction": "",
        "id": "q5840",
        "input": "python turn every element in list into tuple",
        "output": "",
        "rule": [
            "d5840"
        ]
    },
    {
        "instruction": "",
        "id": "q5841",
        "input": "list pages in pdf python not using pypdf",
        "output": "",
        "rule": [
            "d5841"
        ]
    },
    {
        "instruction": "",
        "id": "q5842",
        "input": "python turn first char to lowercase",
        "output": "",
        "rule": [
            "d5842"
        ]
    },
    {
        "instruction": "",
        "id": "q5843",
        "input": "list remove all item function python",
        "output": "",
        "rule": [
            "d5843"
        ]
    },
    {
        "instruction": "",
        "id": "q5844",
        "input": "python turn json into a dictionary",
        "output": "",
        "rule": [
            "d5844"
        ]
    },
    {
        "instruction": "",
        "id": "q5845",
        "input": "list remove brackets in python",
        "output": "",
        "rule": [
            "d5845"
        ]
    },
    {
        "instruction": "",
        "id": "q5846",
        "input": "python turning an array into 2d array",
        "output": "",
        "rule": [
            "d5846"
        ]
    },
    {
        "instruction": "",
        "id": "q5847",
        "input": "list to rdf triple python",
        "output": "",
        "rule": [
            "d5847"
        ]
    },
    {
        "instruction": "",
        "id": "q5848",
        "input": "python turtle how to set new position",
        "output": "",
        "rule": [
            "d5848"
        ]
    },
    {
        "instruction": "",
        "id": "q5849",
        "input": "load npy files into features python",
        "output": "",
        "rule": [
            "d5849"
        ]
    },
    {
        "instruction": "",
        "id": "q5850",
        "input": "python typing on instance methods",
        "output": "",
        "rule": [
            "d5850"
        ]
    },
    {
        "instruction": "",
        "id": "q5851",
        "input": "load uint8 file in python",
        "output": "",
        "rule": [
            "d5851"
        ]
    },
    {
        "instruction": "",
        "id": "q5852",
        "input": "python unable to create argparse in function",
        "output": "",
        "rule": [
            "d5852"
        ]
    },
    {
        "instruction": "",
        "id": "q5853",
        "input": "loading a fucntion in python",
        "output": "",
        "rule": [
            "d5853"
        ]
    },
    {
        "instruction": "",
        "id": "q5854",
        "input": "python undefined variable assertfalse",
        "output": "",
        "rule": [
            "d5854"
        ]
    },
    {
        "instruction": "",
        "id": "q5855",
        "input": "locating items in tuple in python",
        "output": "",
        "rule": [
            "d5855"
        ]
    },
    {
        "instruction": "",
        "id": "q5856",
        "input": "python unittest assert text equal",
        "output": "",
        "rule": [
            "d5856"
        ]
    },
    {
        "instruction": "",
        "id": "q5857",
        "input": "logger python print function name",
        "output": "",
        "rule": [
            "d5857"
        ]
    },
    {
        "instruction": "",
        "id": "q5858",
        "input": "python unpack dictionary to function args",
        "output": "",
        "rule": [
            "d5858"
        ]
    },
    {
        "instruction": "",
        "id": "q5859",
        "input": "longest sequence of adjacent values in python",
        "output": "",
        "rule": [
            "d5859"
        ]
    },
    {
        "instruction": "",
        "id": "q5860",
        "input": "python unpack various lenght struct",
        "output": "",
        "rule": [
            "d5860"
        ]
    },
    {
        "instruction": "",
        "id": "q5861",
        "input": "looking for some specific key value in python tuples",
        "output": "",
        "rule": [
            "d5861"
        ]
    },
    {
        "instruction": "",
        "id": "q5862",
        "input": "python unstacked area chart",
        "output": "",
        "rule": [
            "d5862"
        ]
    },
    {
        "instruction": "",
        "id": "q5863",
        "input": "lookup a value of a key dictionary python",
        "output": "",
        "rule": [
            "d5863"
        ]
    },
    {
        "instruction": "",
        "id": "q5864",
        "input": "python update file mtime without modification",
        "output": "",
        "rule": [
            "d5864"
        ]
    },
    {
        "instruction": "",
        "id": "q5865",
        "input": "mac get python details",
        "output": "",
        "rule": [
            "d5865"
        ]
    },
    {
        "instruction": "",
        "id": "q5866",
        "input": "python url for static files",
        "output": "",
        "rule": [
            "d5866"
        ]
    },
    {
        "instruction": "",
        "id": "q5867",
        "input": "macro for discord to change presence python",
        "output": "",
        "rule": [
            "d5867"
        ]
    },
    {
        "instruction": "",
        "id": "q5868",
        "input": "python url get the file name",
        "output": "",
        "rule": [
            "d5868"
        ]
    },
    {
        "instruction": "",
        "id": "q5869",
        "input": "make a listy copy without pointer to original python",
        "output": "",
        "rule": [
            "d5869"
        ]
    },
    {
        "instruction": "",
        "id": "q5870",
        "input": "python user libraries path",
        "output": "",
        "rule": [
            "d5870"
        ]
    },
    {
        "instruction": "",
        "id": "q5871",
        "input": "make dictionary elements as array python",
        "output": "",
        "rule": [
            "d5871"
        ]
    },
    {
        "instruction": "",
        "id": "q5872",
        "input": "python uuid database no hydashhen",
        "output": "",
        "rule": [
            "d5872"
        ]
    },
    {
        "instruction": "",
        "id": "q5873",
        "input": "make irc bot to join channel python",
        "output": "",
        "rule": [
            "d5873"
        ]
    },
    {
        "instruction": "",
        "id": "q5874",
        "input": "python validate enum value is from enum",
        "output": "",
        "rule": [
            "d5874"
        ]
    },
    {
        "instruction": "",
        "id": "q5875",
        "input": "make nested dict a str python",
        "output": "",
        "rule": [
            "d5875"
        ]
    },
    {
        "instruction": "",
        "id": "q5876",
        "input": "python venv without active",
        "output": "",
        "rule": [
            "d5876"
        ]
    },
    {
        "instruction": "",
        "id": "q5877",
        "input": "make string url safe python",
        "output": "",
        "rule": [
            "d5877"
        ]
    },
    {
        "instruction": "",
        "id": "q5878",
        "input": "python verify if column exists",
        "output": "",
        "rule": [
            "d5878"
        ]
    },
    {
        "instruction": "",
        "id": "q5879",
        "input": "make string utf8 python",
        "output": "",
        "rule": [
            "d5879"
        ]
    },
    {
        "instruction": "",
        "id": "q5880",
        "input": "make tabel in python left justify",
        "output": "",
        "rule": [
            "d5880"
        ]
    },
    {
        "instruction": "",
        "id": "q5881",
        "input": "making a bezier curve around points python",
        "output": "",
        "rule": [
            "d5881"
        ]
    },
    {
        "instruction": "",
        "id": "q5882",
        "input": "python volume of grid surface",
        "output": "",
        "rule": [
            "d5882"
        ]
    },
    {
        "instruction": "",
        "id": "q5883",
        "input": "making a call to a server python script in javascript",
        "output": "",
        "rule": [
            "d5883"
        ]
    },
    {
        "instruction": "",
        "id": "q5884",
        "input": "python vribles strt with underscore",
        "output": "",
        "rule": [
            "d5884"
        ]
    },
    {
        "instruction": "",
        "id": "q5885",
        "input": "making a sine wave on python",
        "output": "",
        "rule": [
            "d5885"
        ]
    },
    {
        "instruction": "",
        "id": "q5886",
        "input": "python wav spectrogram to wav",
        "output": "",
        "rule": [
            "d5886"
        ]
    },
    {
        "instruction": "",
        "id": "q5887",
        "input": "making a username and password on python",
        "output": "",
        "rule": [
            "d5887"
        ]
    },
    {
        "instruction": "",
        "id": "q5888",
        "input": "python web scraping cookies and referrer",
        "output": "",
        "rule": [
            "d5888"
        ]
    },
    {
        "instruction": "",
        "id": "q5889",
        "input": "manhattan distance python numpy",
        "output": "",
        "rule": [
            "d5889"
        ]
    },
    {
        "instruction": "",
        "id": "q5890",
        "input": "python webdriver check box",
        "output": "",
        "rule": [
            "d5890"
        ]
    },
    {
        "instruction": "",
        "id": "q5891",
        "input": "manually calling unit test setup python",
        "output": "",
        "rule": [
            "d5891"
        ]
    },
    {
        "instruction": "",
        "id": "q5892",
        "input": "python webdriver get content by id",
        "output": "",
        "rule": [
            "d5892"
        ]
    },
    {
        "instruction": "",
        "id": "q5893",
        "input": "matching keys and values for 2 python dictionary",
        "output": "",
        "rule": [
            "d5893"
        ]
    },
    {
        "instruction": "",
        "id": "q5894",
        "input": "python what index is the item at",
        "output": "",
        "rule": [
            "d5894"
        ]
    },
    {
        "instruction": "",
        "id": "q5895",
        "input": "matlibplot python draw arrow",
        "output": "",
        "rule": [
            "d5895"
        ]
    },
    {
        "instruction": "",
        "id": "q5896",
        "input": "python wrap function starmap",
        "output": "",
        "rule": [
            "d5896"
        ]
    },
    {
        "instruction": "",
        "id": "q5897",
        "input": "matrix to get identity matrix python",
        "output": "",
        "rule": [
            "d5897"
        ]
    },
    {
        "instruction": "",
        "id": "q5898",
        "input": "python write a program that calculates the average word length in a sentence entered by the user",
        "output": "",
        "rule": [
            "d5898"
        ]
    },
    {
        "instruction": "",
        "id": "q5899",
        "input": "max heap priority queue python",
        "output": "",
        "rule": [
            "d5899"
        ]
    },
    {
        "instruction": "",
        "id": "q5900",
        "input": "python write all items",
        "output": "",
        "rule": [
            "d5900"
        ]
    },
    {
        "instruction": "",
        "id": "q5901",
        "input": "maximum line length in python",
        "output": "",
        "rule": [
            "d5901"
        ]
    },
    {
        "instruction": "",
        "id": "q5902",
        "input": "python write base64 string to image file",
        "output": "",
        "rule": [
            "d5902"
        ]
    },
    {
        "instruction": "",
        "id": "q5903",
        "input": "maximum precision of floar in python",
        "output": "",
        "rule": [
            "d5903"
        ]
    },
    {
        "instruction": "",
        "id": "q5904",
        "input": "python write json to file wrap",
        "output": "",
        "rule": [
            "d5904"
        ]
    },
    {
        "instruction": "",
        "id": "q5905",
        "input": "measure string drawing size python",
        "output": "",
        "rule": [
            "d5905"
        ]
    },
    {
        "instruction": "",
        "id": "q5906",
        "input": "python write out json file from yelp",
        "output": "",
        "rule": [
            "d5906"
        ]
    },
    {
        "instruction": "",
        "id": "q5907",
        "input": "median for collection of numbers python",
        "output": "",
        "rule": [
            "d5907"
        ]
    },
    {
        "instruction": "",
        "id": "q5908",
        "input": "python write string to file\\",
        "output": "",
        "rule": [
            "d5908"
        ]
    },
    {
        "instruction": "",
        "id": "q5909",
        "input": "memory address of python object",
        "output": "",
        "rule": [
            "d5909"
        ]
    },
    {
        "instruction": "",
        "id": "q5910",
        "input": "python write to yaml file for ansible",
        "output": "",
        "rule": [
            "d5910"
        ]
    },
    {
        "instruction": "",
        "id": "q5911",
        "input": "mention relative path in python",
        "output": "",
        "rule": [
            "d5911"
        ]
    },
    {
        "instruction": "",
        "id": "q5912",
        "input": "python wrong continued indentation before block",
        "output": "",
        "rule": [
            "d5912"
        ]
    },
    {
        "instruction": "",
        "id": "q5913",
        "input": "merge 2 ranges python",
        "output": "",
        "rule": [
            "d5913"
        ]
    },
    {
        "instruction": "",
        "id": "q5914",
        "input": "python wx change the panel color",
        "output": "",
        "rule": [
            "d5914"
        ]
    },
    {
        "instruction": "",
        "id": "q5915",
        "input": "merge two range python",
        "output": "",
        "rule": [
            "d5915"
        ]
    },
    {
        "instruction": "",
        "id": "q5916",
        "input": "python xlib get mouse coordinates",
        "output": "",
        "rule": [
            "d5916"
        ]
    },
    {
        "instruction": "",
        "id": "q5917",
        "input": "merging multiple list in a single list in python",
        "output": "",
        "rule": [
            "d5917"
        ]
    },
    {
        "instruction": "",
        "id": "q5918",
        "input": "python xml sax parser into dictionary",
        "output": "",
        "rule": [
            "d5918"
        ]
    },
    {
        "instruction": "",
        "id": "q5919",
        "input": "message channel python bot",
        "output": "",
        "rule": [
            "d5919"
        ]
    },
    {
        "instruction": "",
        "id": "q5920",
        "input": "python xml schema validation using",
        "output": "",
        "rule": [
            "d5920"
        ]
    },
    {
        "instruction": "",
        "id": "q5921",
        "input": "method used for deleting last element in python list",
        "output": "",
        "rule": [
            "d5921"
        ]
    },
    {
        "instruction": "",
        "id": "q5922",
        "input": "python xml test for empty tag",
        "output": "",
        "rule": [
            "d5922"
        ]
    },
    {
        "instruction": "",
        "id": "q5923",
        "input": "modified geographic coordinates on spherical coordinates python",
        "output": "",
        "rule": [
            "d5923"
        ]
    },
    {
        "instruction": "",
        "id": "q5924",
        "input": "python xpath get node all content",
        "output": "",
        "rule": [
            "d5924"
        ]
    },
    {
        "instruction": "",
        "id": "q5925",
        "input": "python yaml dump compact format",
        "output": "",
        "rule": [
            "d5925"
        ]
    },
    {
        "instruction": "",
        "id": "q5926",
        "input": "mongodb python create index every time",
        "output": "",
        "rule": [
            "d5926"
        ]
    },
    {
        "instruction": "",
        "id": "q5927",
        "input": "python zipfile for folder",
        "output": "",
        "rule": [
            "d5927"
        ]
    },
    {
        "instruction": "",
        "id": "q5928",
        "input": "mongodb python sort multiple field",
        "output": "",
        "rule": [
            "d5928"
        ]
    },
    {
        "instruction": "",
        "id": "q5929",
        "input": "python zlib java gzip",
        "output": "",
        "rule": [
            "d5929"
        ]
    },
    {
        "instruction": "",
        "id": "q5930",
        "input": "most common element in array python",
        "output": "",
        "rule": [
            "d5930"
        ]
    },
    {
        "instruction": "",
        "id": "q5931",
        "input": "python, iterating through a string in chunks",
        "output": "",
        "rule": [
            "d5931"
        ]
    },
    {
        "instruction": "",
        "id": "q5932",
        "input": "multiple hash comments out python",
        "output": "",
        "rule": [
            "d5932"
        ]
    },
    {
        "instruction": "",
        "id": "q5933",
        "input": "python, locate the minimum value in a list",
        "output": "",
        "rule": [
            "d5933"
        ]
    },
    {
        "instruction": "",
        "id": "q5934",
        "input": "multiple static methods python",
        "output": "",
        "rule": [
            "d5934"
        ]
    },
    {
        "instruction": "",
        "id": "q5935",
        "input": "ndarray to series with index python",
        "output": "",
        "rule": [
            "d5935"
        ]
    },
    {
        "instruction": "",
        "id": "q5936",
        "input": "python3 async only allow one at a time",
        "output": "",
        "rule": [
            "d5936"
        ]
    },
    {
        "instruction": "",
        "id": "q5937",
        "input": "nearest neighbor interpolation code in python",
        "output": "",
        "rule": [
            "d5937"
        ]
    },
    {
        "instruction": "",
        "id": "q5938",
        "input": "python3 byte to string]",
        "output": "",
        "rule": [
            "d5938"
        ]
    },
    {
        "instruction": "",
        "id": "q5939",
        "input": "nonlocal and nested function scopes and python",
        "output": "",
        "rule": [
            "d5939"
        ]
    },
    {
        "instruction": "",
        "id": "q5940",
        "input": "python3 can not connect to http ssl",
        "output": "",
        "rule": [
            "d5940"
        ]
    },
    {
        "instruction": "",
        "id": "q5941",
        "input": "norm of an array python",
        "output": "",
        "rule": [
            "d5941"
        ]
    },
    {
        "instruction": "",
        "id": "q5942",
        "input": "python3 check empty file",
        "output": "",
        "rule": [
            "d5942"
        ]
    },
    {
        "instruction": "",
        "id": "q5943",
        "input": "normal distribution with excess kurtosis in python",
        "output": "",
        "rule": [
            "d5943"
        ]
    },
    {
        "instruction": "",
        "id": "q5944",
        "input": "python3 check type is byte",
        "output": "",
        "rule": [
            "d5944"
        ]
    },
    {
        "instruction": "",
        "id": "q5945",
        "input": "normal gzip file python not a gzipped file",
        "output": "",
        "rule": [
            "d5945"
        ]
    },
    {
        "instruction": "",
        "id": "q5946",
        "input": "python3 check value in enum",
        "output": "",
        "rule": [
            "d5946"
        ]
    },
    {
        "instruction": "",
        "id": "q5947",
        "input": "normal probability distribution function python",
        "output": "",
        "rule": [
            "d5947"
        ]
    },
    {
        "instruction": "",
        "id": "q5948",
        "input": "python3 determining if program is still running",
        "output": "",
        "rule": [
            "d5948"
        ]
    },
    {
        "instruction": "",
        "id": "q5949",
        "input": "normalize column vector python",
        "output": "",
        "rule": [
            "d5949"
        ]
    },
    {
        "instruction": "",
        "id": "q5950",
        "input": "python3 hashlib md5 to string",
        "output": "",
        "rule": [
            "d5950"
        ]
    },
    {
        "instruction": "",
        "id": "q5951",
        "input": "normalize image in python 0 to 1",
        "output": "",
        "rule": [
            "d5951"
        ]
    },
    {
        "instruction": "",
        "id": "q5952",
        "input": "python3 how to check if something is iterable",
        "output": "",
        "rule": [
            "d5952"
        ]
    },
    {
        "instruction": "",
        "id": "q5953",
        "input": "normalizing an rgb image python",
        "output": "",
        "rule": [
            "d5953"
        ]
    },
    {
        "instruction": "",
        "id": "q5954",
        "input": "python3 how to know a sring is bytes",
        "output": "",
        "rule": [
            "d5954"
        ]
    },
    {
        "instruction": "",
        "id": "q5955",
        "input": "not a gzipped file python gunzip",
        "output": "",
        "rule": [
            "d5955"
        ]
    },
    {
        "instruction": "",
        "id": "q5956",
        "input": "python3 how to test if a directory is valid",
        "output": "",
        "rule": [
            "d5956"
        ]
    },
    {
        "instruction": "",
        "id": "q5957",
        "input": "number of common characters in python strings",
        "output": "",
        "rule": [
            "d5957"
        ]
    },
    {
        "instruction": "",
        "id": "q5958",
        "input": "python3 how to upper case a string",
        "output": "",
        "rule": [
            "d5958"
        ]
    },
    {
        "instruction": "",
        "id": "q5959",
        "input": "numpy array and python list",
        "output": "",
        "rule": [
            "d5959"
        ]
    },
    {
        "instruction": "",
        "id": "q5960",
        "input": "python3 jinja object render",
        "output": "",
        "rule": [
            "d5960"
        ]
    },
    {
        "instruction": "",
        "id": "q5961",
        "input": "numpy array with different size of arrays python",
        "output": "",
        "rule": [
            "d5961"
        ]
    },
    {
        "instruction": "",
        "id": "q5962",
        "input": "python3 make image height equal width",
        "output": "",
        "rule": [
            "d5962"
        ]
    },
    {
        "instruction": "",
        "id": "q5963",
        "input": "numpy datetime64 to python datetime",
        "output": "",
        "rule": [
            "d5963"
        ]
    },
    {
        "instruction": "",
        "id": "q5964",
        "input": "python3 separate requests in same session",
        "output": "",
        "rule": [
            "d5964"
        ]
    },
    {
        "instruction": "",
        "id": "q5965",
        "input": "numpy python normal cdf",
        "output": "",
        "rule": [
            "d5965"
        ]
    },
    {
        "instruction": "",
        "id": "q5966",
        "input": "python3 xml string to dict",
        "output": "",
        "rule": [
            "d5966"
        ]
    },
    {
        "instruction": "",
        "id": "q5967",
        "input": "object oriented to stack push method python",
        "output": "",
        "rule": [
            "d5967"
        ]
    },
    {
        "instruction": "",
        "id": "q5968",
        "input": "off sparse array in python",
        "output": "",
        "rule": [
            "d5968"
        ]
    },
    {
        "instruction": "",
        "id": "q5969",
        "input": "rabbitmq python not ack",
        "output": "",
        "rule": [
            "d5969"
        ]
    },
    {
        "instruction": "",
        "id": "q5970",
        "input": "on duplicate key python",
        "output": "",
        "rule": [
            "d5970"
        ]
    },
    {
        "instruction": "",
        "id": "q5971",
        "input": "random state in python definition",
        "output": "",
        "rule": [
            "d5971"
        ]
    },
    {
        "instruction": "",
        "id": "q5972",
        "input": "one to many relationship python",
        "output": "",
        "rule": [
            "d5972"
        ]
    },
    {
        "instruction": "",
        "id": "q5973",
        "input": "read csv file as dictionary python stack overflow",
        "output": "",
        "rule": [
            "d5973"
        ]
    },
    {
        "instruction": "",
        "id": "q5974",
        "input": "open yaml file python",
        "output": "",
        "rule": [
            "d5974"
        ]
    },
    {
        "instruction": "",
        "id": "q5975",
        "input": "read entire pdf into a list python",
        "output": "",
        "rule": [
            "d5975"
        ]
    },
    {
        "instruction": "",
        "id": "q5976",
        "input": "opening images from a file in python",
        "output": "",
        "rule": [
            "d5976"
        ]
    },
    {
        "instruction": "",
        "id": "q5977",
        "input": "read group from hdf4 file python",
        "output": "",
        "rule": [
            "d5977"
        ]
    },
    {
        "instruction": "",
        "id": "q5978",
        "input": "outer product of two vectors python",
        "output": "",
        "rule": [
            "d5978"
        ]
    },
    {
        "instruction": "",
        "id": "q5979",
        "input": "read lines from stdin python",
        "output": "",
        "rule": [
            "d5979"
        ]
    },
    {
        "instruction": "",
        "id": "q5980",
        "input": "overlay density plot on histogram in python",
        "output": "",
        "rule": [
            "d5980"
        ]
    },
    {
        "instruction": "",
        "id": "q5981",
        "input": "read python not showing file content",
        "output": "",
        "rule": [
            "d5981"
        ]
    },
    {
        "instruction": "",
        "id": "q5982",
        "input": "ow to hash a file python",
        "output": "",
        "rule": [
            "d5982"
        ]
    },
    {
        "instruction": "",
        "id": "q5983",
        "input": "read rest api response json in python",
        "output": "",
        "rule": [
            "d5983"
        ]
    },
    {
        "instruction": "",
        "id": "q5984",
        "input": "parse a string into a dictionary in python",
        "output": "",
        "rule": [
            "d5984"
        ]
    },
    {
        "instruction": "",
        "id": "q5985",
        "input": "read text from a url python",
        "output": "",
        "rule": [
            "d5985"
        ]
    },
    {
        "instruction": "",
        "id": "q5986",
        "input": "parse an http response python",
        "output": "",
        "rule": [
            "d5986"
        ]
    },
    {
        "instruction": "",
        "id": "q5987",
        "input": "reading json from file in order python",
        "output": "",
        "rule": [
            "d5987"
        ]
    },
    {
        "instruction": "",
        "id": "q5988",
        "input": "parse json from string python",
        "output": "",
        "rule": [
            "d5988"
        ]
    },
    {
        "instruction": "",
        "id": "q5989",
        "input": "realtime copy of python print window",
        "output": "",
        "rule": [
            "d5989"
        ]
    },
    {
        "instruction": "",
        "id": "q5990",
        "input": "parse string to bool python",
        "output": "",
        "rule": [
            "d5990"
        ]
    },
    {
        "instruction": "",
        "id": "q5991",
        "input": "reaplace strings with dictionary values python",
        "output": "",
        "rule": [
            "d5991"
        ]
    },
    {
        "instruction": "",
        "id": "q5992",
        "input": "pass function into jinja2 python",
        "output": "",
        "rule": [
            "d5992"
        ]
    },
    {
        "instruction": "",
        "id": "q5993",
        "input": "recursively read all files from folder in python",
        "output": "",
        "rule": [
            "d5993"
        ]
    },
    {
        "instruction": "",
        "id": "q5994",
        "input": "passing **params to a function python",
        "output": "",
        "rule": [
            "d5994"
        ]
    },
    {
        "instruction": "",
        "id": "q5995",
        "input": "recursivly list files in directory python",
        "output": "",
        "rule": [
            "d5995"
        ]
    },
    {
        "instruction": "",
        "id": "q5996",
        "input": "passing a 3d python array to c++",
        "output": "",
        "rule": [
            "d5996"
        ]
    },
    {
        "instruction": "",
        "id": "q5997",
        "input": "redis get all keys python",
        "output": "",
        "rule": [
            "d5997"
        ]
    },
    {
        "instruction": "",
        "id": "q5998",
        "input": "regex in python for domain url",
        "output": "",
        "rule": [
            "d5998"
        ]
    },
    {
        "instruction": "",
        "id": "q5999",
        "input": "passing python variables to html",
        "output": "",
        "rule": [
            "d5999"
        ]
    },
    {
        "instruction": "",
        "id": "q6000",
        "input": "regex to get all numbers from a string python",
        "output": "",
        "rule": [
            "d6000"
        ]
    },
    {
        "instruction": "",
        "id": "q6001",
        "input": "pearson correlation nan python",
        "output": "",
        "rule": [
            "d6001"
        ]
    },
    {
        "instruction": "",
        "id": "q6002",
        "input": "regex upper to lower python",
        "output": "",
        "rule": [
            "d6002"
        ]
    },
    {
        "instruction": "",
        "id": "q6003",
        "input": "performing a ttest with python",
        "output": "",
        "rule": [
            "d6003"
        ]
    },
    {
        "instruction": "",
        "id": "q6004",
        "input": "regular expression for valid email address in python",
        "output": "",
        "rule": [
            "d6004"
        ]
    },
    {
        "instruction": "",
        "id": "q6005",
        "input": "piecewise linear interpolation in python",
        "output": "",
        "rule": [
            "d6005"
        ]
    },
    {
        "instruction": "",
        "id": "q6006",
        "input": "regular expression remove python comments",
        "output": "",
        "rule": [
            "d6006"
        ]
    },
    {
        "instruction": "",
        "id": "q6007",
        "input": "plot a confusion matrix in python",
        "output": "",
        "rule": [
            "d6007"
        ]
    },
    {
        "instruction": "",
        "id": "q6008",
        "input": "remkove duplicats from python list",
        "output": "",
        "rule": [
            "d6008"
        ]
    },
    {
        "instruction": "",
        "id": "q6009",
        "input": "plot confusion matrix as heatmap python",
        "output": "",
        "rule": [
            "d6009"
        ]
    },
    {
        "instruction": "",
        "id": "q6010",
        "input": "remove [ from a variable in python",
        "output": "",
        "rule": [
            "d6010"
        ]
    },
    {
        "instruction": "",
        "id": "q6011",
        "input": "plot sinusoidal wave python",
        "output": "",
        "rule": [
            "d6011"
        ]
    },
    {
        "instruction": "",
        "id": "q6012",
        "input": "remove a comma from a string in python",
        "output": "",
        "rule": [
            "d6012"
        ]
    },
    {
        "instruction": "",
        "id": "q6013",
        "input": "plotting a noise in python",
        "output": "",
        "rule": [
            "d6013"
        ]
    },
    {
        "instruction": "",
        "id": "q6014",
        "input": "remove a duplicate in a list python",
        "output": "",
        "rule": [
            "d6014"
        ]
    },
    {
        "instruction": "",
        "id": "q6015",
        "input": "plotting with colormap python",
        "output": "",
        "rule": [
            "d6015"
        ]
    },
    {
        "instruction": "",
        "id": "q6016",
        "input": "remove a list of indices python",
        "output": "",
        "rule": [
            "d6016"
        ]
    },
    {
        "instruction": "",
        "id": "q6017",
        "input": "post method, what data is encoded in the request python",
        "output": "",
        "rule": [
            "d6017"
        ]
    },
    {
        "instruction": "",
        "id": "q6018",
        "input": "remove all letters and numbers in python",
        "output": "",
        "rule": [
            "d6018"
        ]
    },
    {
        "instruction": "",
        "id": "q6019",
        "input": "predefined function for checking equality in python",
        "output": "",
        "rule": [
            "d6019"
        ]
    },
    {
        "instruction": "",
        "id": "q6020",
        "input": "remove all non matches python set",
        "output": "",
        "rule": [
            "d6020"
        ]
    },
    {
        "instruction": "",
        "id": "q6021",
        "input": "prettty print json dict python",
        "output": "",
        "rule": [
            "d6021"
        ]
    },
    {
        "instruction": "",
        "id": "q6022",
        "input": "remove all space after and before a character python",
        "output": "",
        "rule": [
            "d6022"
        ]
    },
    {
        "instruction": "",
        "id": "q6023",
        "input": "pretty print matrix python",
        "output": "",
        "rule": [
            "d6023"
        ]
    },
    {
        "instruction": "",
        "id": "q6024",
        "input": "remove all spaces in string python",
        "output": "",
        "rule": [
            "d6024"
        ]
    },
    {
        "instruction": "",
        "id": "q6025",
        "input": "pretty print python dictionary",
        "output": "",
        "rule": [
            "d6025"
        ]
    },
    {
        "instruction": "",
        "id": "q6026",
        "input": "remove alpha characters in str python",
        "output": "",
        "rule": [
            "d6026"
        ]
    },
    {
        "instruction": "",
        "id": "q6027",
        "input": "pretty print xml element python",
        "output": "",
        "rule": [
            "d6027"
        ]
    },
    {
        "instruction": "",
        "id": "q6028",
        "input": "remove duplicates from an array python",
        "output": "",
        "rule": [
            "d6028"
        ]
    },
    {
        "instruction": "",
        "id": "q6029",
        "input": "prevent a list from being sorted python",
        "output": "",
        "rule": [
            "d6029"
        ]
    },
    {
        "instruction": "",
        "id": "q6030",
        "input": "remove duplicates list python without changing order",
        "output": "",
        "rule": [
            "d6030"
        ]
    },
    {
        "instruction": "",
        "id": "q6031",
        "input": "prevent color of white or black during python colorsys",
        "output": "",
        "rule": [
            "d6031"
        ]
    },
    {
        "instruction": "",
        "id": "q6032",
        "input": "remove extraneous whitespace in python",
        "output": "",
        "rule": [
            "d6032"
        ]
    },
    {
        "instruction": "",
        "id": "q6033",
        "input": "prevent text wrapping in python",
        "output": "",
        "rule": [
            "d6033"
        ]
    },
    {
        "instruction": "",
        "id": "q6034",
        "input": "remove head of a list python",
        "output": "",
        "rule": [
            "d6034"
        ]
    },
    {
        "instruction": "",
        "id": "q6035",
        "input": "print all nodes of binary tree in python",
        "output": "",
        "rule": [
            "d6035"
        ]
    },
    {
        "instruction": "",
        "id": "q6036",
        "input": "remove item from python series",
        "output": "",
        "rule": [
            "d6036"
        ]
    },
    {
        "instruction": "",
        "id": "q6037",
        "input": "print time it takes to complete python step",
        "output": "",
        "rule": [
            "d6037"
        ]
    },
    {
        "instruction": "",
        "id": "q6038",
        "input": "remove last element from the list python",
        "output": "",
        "rule": [
            "d6038"
        ]
    },
    {
        "instruction": "",
        "id": "q6039",
        "input": "print with consistent spacing python",
        "output": "",
        "rule": [
            "d6039"
        ]
    },
    {
        "instruction": "",
        "id": "q6040",
        "input": "remove multiple variables using del in python",
        "output": "",
        "rule": [
            "d6040"
        ]
    },
    {
        "instruction": "",
        "id": "q6041",
        "input": "printing objects as strings python",
        "output": "",
        "rule": [
            "d6041"
        ]
    },
    {
        "instruction": "",
        "id": "q6042",
        "input": "remove na values from df in python",
        "output": "",
        "rule": [
            "d6042"
        ]
    },
    {
        "instruction": "",
        "id": "q6043",
        "input": "proper way to quit python",
        "output": "",
        "rule": [
            "d6043"
        ]
    },
    {
        "instruction": "",
        "id": "q6044",
        "input": "remove none values from a list in python",
        "output": "",
        "rule": [
            "d6044"
        ]
    },
    {
        "instruction": "",
        "id": "q6045",
        "input": "pulling data out of hdf5 matlab files python",
        "output": "",
        "rule": [
            "d6045"
        ]
    },
    {
        "instruction": "",
        "id": "q6046",
        "input": "remove observations with 0 value in python",
        "output": "",
        "rule": [
            "d6046"
        ]
    },
    {
        "instruction": "",
        "id": "q6047",
        "input": "put all quantifiable variables in a list in python",
        "output": "",
        "rule": [
            "d6047"
        ]
    },
    {
        "instruction": "",
        "id": "q6048",
        "input": "remove prefix from object name in python",
        "output": "",
        "rule": [
            "d6048"
        ]
    },
    {
        "instruction": "",
        "id": "q6049",
        "input": "pytest included in python 3",
        "output": "",
        "rule": [
            "d6049"
        ]
    },
    {
        "instruction": "",
        "id": "q6050",
        "input": "python 'connection' object has no attribute 'delete'",
        "output": "",
        "rule": [
            "d6050"
        ]
    },
    {
        "instruction": "",
        "id": "q6051",
        "input": "remove spaces in a file python code",
        "output": "",
        "rule": [
            "d6051"
        ]
    },
    {
        "instruction": "",
        "id": "q6052",
        "input": "python 2 join path",
        "output": "",
        "rule": [
            "d6052"
        ]
    },
    {
        "instruction": "",
        "id": "q6053",
        "input": "remove the last object from list in python",
        "output": "",
        "rule": [
            "d6053"
        ]
    },
    {
        "instruction": "",
        "id": "q6054",
        "input": "python 2 os makedirs exits",
        "output": "",
        "rule": [
            "d6054"
        ]
    },
    {
        "instruction": "",
        "id": "q6055",
        "input": "remove white space from strings in python",
        "output": "",
        "rule": [
            "d6055"
        ]
    },
    {
        "instruction": "",
        "id": "q6056",
        "input": "python 2 parse query string",
        "output": "",
        "rule": [
            "d6056"
        ]
    },
    {
        "instruction": "",
        "id": "q6057",
        "input": "remove white space in string python",
        "output": "",
        "rule": [
            "d6057"
        ]
    },
    {
        "instruction": "",
        "id": "q6058",
        "input": "python 2 using if and user input",
        "output": "",
        "rule": [
            "d6058"
        ]
    },
    {
        "instruction": "",
        "id": "q6059",
        "input": "python 3 check if object is number",
        "output": "",
        "rule": [
            "d6059"
        ]
    },
    {
        "instruction": "",
        "id": "q6060",
        "input": "remove xaxis ticks labels python",
        "output": "",
        "rule": [
            "d6060"
        ]
    },
    {
        "instruction": "",
        "id": "q6061",
        "input": "python 3 check if string is not empty",
        "output": "",
        "rule": [
            "d6061"
        ]
    },
    {
        "instruction": "",
        "id": "q6062",
        "input": "remove xml nodes with python",
        "output": "",
        "rule": [
            "d6062"
        ]
    },
    {
        "instruction": "",
        "id": "q6063",
        "input": "python 3 clear all variables",
        "output": "",
        "rule": [
            "d6063"
        ]
    },
    {
        "instruction": "",
        "id": "q6064",
        "input": "removing elements from set python",
        "output": "",
        "rule": [
            "d6064"
        ]
    },
    {
        "instruction": "",
        "id": "q6065",
        "input": "python 3 combobox update values",
        "output": "",
        "rule": [
            "d6065"
        ]
    },
    {
        "instruction": "",
        "id": "q6066",
        "input": "removing items seperated by comma from a list python",
        "output": "",
        "rule": [
            "d6066"
        ]
    },
    {
        "instruction": "",
        "id": "q6067",
        "input": "python 3 create a dictionary from a list of tuples",
        "output": "",
        "rule": [
            "d6067"
        ]
    },
    {
        "instruction": "",
        "id": "q6068",
        "input": "replace any singular letters in python",
        "output": "",
        "rule": [
            "d6068"
        ]
    },
    {
        "instruction": "",
        "id": "q6069",
        "input": "replace boolean values with 1s and 0s python",
        "output": "",
        "rule": [
            "d6069"
        ]
    },
    {
        "instruction": "",
        "id": "q6070",
        "input": "python 3 unpack tuple lambda",
        "output": "",
        "rule": [
            "d6070"
        ]
    },
    {
        "instruction": "",
        "id": "q6071",
        "input": "replace dash in string python",
        "output": "",
        "rule": [
            "d6071"
        ]
    },
    {
        "instruction": "",
        "id": "q6072",
        "input": "python 3 user input if else",
        "output": "",
        "rule": [
            "d6072"
        ]
    },
    {
        "instruction": "",
        "id": "q6073",
        "input": "replace items of a list with another python",
        "output": "",
        "rule": [
            "d6073"
        ]
    },
    {
        "instruction": "",
        "id": "q6074",
        "input": "python 3, generate numpy array with zeros",
        "output": "",
        "rule": [
            "d6074"
        ]
    },
    {
        "instruction": "",
        "id": "q6075",
        "input": "replace month number values with name python",
        "output": "",
        "rule": [
            "d6075"
        ]
    },
    {
        "instruction": "",
        "id": "q6076",
        "input": "python 3, round number",
        "output": "",
        "rule": [
            "d6076"
        ]
    },
    {
        "instruction": "",
        "id": "q6077",
        "input": "replace nan values in numpy array with zero numpy python",
        "output": "",
        "rule": [
            "d6077"
        ]
    },
    {
        "instruction": "",
        "id": "q6078",
        "input": "python 95% percentile values of a list",
        "output": "",
        "rule": [
            "d6078"
        ]
    },
    {
        "instruction": "",
        "id": "q6079",
        "input": "replace text in dictionary python",
        "output": "",
        "rule": [
            "d6079"
        ]
    },
    {
        "instruction": "",
        "id": "q6080",
        "input": "python add 0x to string",
        "output": "",
        "rule": [
            "d6080"
        ]
    },
    {
        "instruction": "",
        "id": "q6081",
        "input": "replace unary character with ascii in python",
        "output": "",
        "rule": [
            "d6081"
        ]
    },
    {
        "instruction": "",
        "id": "q6082",
        "input": "python add coroutine to async function",
        "output": "",
        "rule": [
            "d6082"
        ]
    },
    {
        "instruction": "",
        "id": "q6083",
        "input": "replacing na with missing in python",
        "output": "",
        "rule": [
            "d6083"
        ]
    },
    {
        "instruction": "",
        "id": "q6084",
        "input": "python add geolocation information",
        "output": "",
        "rule": [
            "d6084"
        ]
    },
    {
        "instruction": "",
        "id": "q6085",
        "input": "request user agent header python",
        "output": "",
        "rule": [
            "d6085"
        ]
    },
    {
        "instruction": "",
        "id": "q6086",
        "input": "python add noise into sound",
        "output": "",
        "rule": [
            "d6086"
        ]
    },
    {
        "instruction": "",
        "id": "q6087",
        "input": "reshape a series in python",
        "output": "",
        "rule": [
            "d6087"
        ]
    },
    {
        "instruction": "",
        "id": "q6088",
        "input": "python add noise to audio",
        "output": "",
        "rule": [
            "d6088"
        ]
    },
    {
        "instruction": "",
        "id": "q6089",
        "input": "resolve pickling error parallel processing python copyreg stack overflow",
        "output": "",
        "rule": [
            "d6089"
        ]
    },
    {
        "instruction": "",
        "id": "q6090",
        "input": "python adding a keyword to the callback",
        "output": "",
        "rule": [
            "d6090"
        ]
    },
    {
        "instruction": "",
        "id": "q6091",
        "input": "rest api get works on browser not in python",
        "output": "",
        "rule": [
            "d6091"
        ]
    },
    {
        "instruction": "",
        "id": "q6092",
        "input": "python agraph edge property",
        "output": "",
        "rule": [
            "d6092"
        ]
    },
    {
        "instruction": "",
        "id": "q6093",
        "input": "retrieve object type python",
        "output": "",
        "rule": [
            "d6093"
        ]
    },
    {
        "instruction": "",
        "id": "q6094",
        "input": "python aiohttp send emaijl",
        "output": "",
        "rule": [
            "d6094"
        ]
    },
    {
        "instruction": "",
        "id": "q6095",
        "input": "retrieving file property with python",
        "output": "",
        "rule": [
            "d6095"
        ]
    },
    {
        "instruction": "",
        "id": "q6096",
        "input": "python all partitions of list",
        "output": "",
        "rule": [
            "d6096"
        ]
    },
    {
        "instruction": "",
        "id": "q6097",
        "input": "return a column from a datatable python",
        "output": "",
        "rule": [
            "d6097"
        ]
    },
    {
        "instruction": "",
        "id": "q6098",
        "input": "python analyze bounding box of image",
        "output": "",
        "rule": [
            "d6098"
        ]
    },
    {
        "instruction": "",
        "id": "q6099",
        "input": "return columns of type python",
        "output": "",
        "rule": [
            "d6099"
        ]
    },
    {
        "instruction": "",
        "id": "q6100",
        "input": "python and geneteate hash random number",
        "output": "",
        "rule": [
            "d6100"
        ]
    },
    {
        "instruction": "",
        "id": "q6101",
        "input": "return keys of most common in python counter object",
        "output": "",
        "rule": [
            "d6101"
        ]
    },
    {
        "instruction": "",
        "id": "q6102",
        "input": "python and get os user name",
        "output": "",
        "rule": [
            "d6102"
        ]
    },
    {
        "instruction": "",
        "id": "q6103",
        "input": "return min value in a list python",
        "output": "",
        "rule": [
            "d6103"
        ]
    },
    {
        "instruction": "",
        "id": "q6104",
        "input": "python animation to gif",
        "output": "",
        "rule": [
            "d6104"
        ]
    },
    {
        "instruction": "",
        "id": "q6105",
        "input": "return python jumps to next line",
        "output": "",
        "rule": [
            "d6105"
        ]
    },
    {
        "instruction": "",
        "id": "q6106",
        "input": "python any element of a set logic",
        "output": "",
        "rule": [
            "d6106"
        ]
    },
    {
        "instruction": "",
        "id": "q6107",
        "input": "return the size of an image stored as a numpy array in python",
        "output": "",
        "rule": [
            "d6107"
        ]
    },
    {
        "instruction": "",
        "id": "q6108",
        "input": "python append kwargs to existing dictionary",
        "output": "",
        "rule": [
            "d6108"
        ]
    },
    {
        "instruction": "",
        "id": "q6109",
        "input": "return union between two sets in python",
        "output": "",
        "rule": [
            "d6109"
        ]
    },
    {
        "instruction": "",
        "id": "q6110",
        "input": "python apply a function to a vector",
        "output": "",
        "rule": [
            "d6110"
        ]
    },
    {
        "instruction": "",
        "id": "q6111",
        "input": "revealing the type in python",
        "output": "",
        "rule": [
            "d6111"
        ]
    },
    {
        "instruction": "",
        "id": "q6112",
        "input": "python apply function dict",
        "output": "",
        "rule": [
            "d6112"
        ]
    },
    {
        "instruction": "",
        "id": "q6113",
        "input": "rgb value for the color green python green",
        "output": "",
        "rule": [
            "d6113"
        ]
    },
    {
        "instruction": "",
        "id": "q6114",
        "input": "python apply function to all columns in df",
        "output": "",
        "rule": [
            "d6114"
        ]
    },
    {
        "instruction": "",
        "id": "q6115",
        "input": "rmarkdown 'python' is not recognized as an internal or external command",
        "output": "",
        "rule": [
            "d6115"
        ]
    },
    {
        "instruction": "",
        "id": "q6116",
        "input": "python apply mask on image",
        "output": "",
        "rule": [
            "d6116"
        ]
    },
    {
        "instruction": "",
        "id": "q6117",
        "input": "rotating a matrix in python",
        "output": "",
        "rule": [
            "d6117"
        ]
    },
    {
        "instruction": "",
        "id": "q6118",
        "input": "python argparse bool without value",
        "output": "",
        "rule": [
            "d6118"
        ]
    },
    {
        "instruction": "",
        "id": "q6119",
        "input": "rotation matrix given angle python",
        "output": "",
        "rule": [
            "d6119"
        ]
    },
    {
        "instruction": "",
        "id": "q6120",
        "input": "python argparse check value",
        "output": "",
        "rule": [
            "d6120"
        ]
    },
    {
        "instruction": "",
        "id": "q6121",
        "input": "round python int object is not callable",
        "output": "",
        "rule": [
            "d6121"
        ]
    },
    {
        "instruction": "",
        "id": "q6122",
        "input": "python argparse set usage",
        "output": "",
        "rule": [
            "d6122"
        ]
    },
    {
        "instruction": "",
        "id": "q6123",
        "input": "round significant figures python",
        "output": "",
        "rule": [
            "d6123"
        ]
    },
    {
        "instruction": "",
        "id": "q6124",
        "input": "python argparse subparser handler",
        "output": "",
        "rule": [
            "d6124"
        ]
    },
    {
        "instruction": "",
        "id": "q6125",
        "input": "round to two significant figures python",
        "output": "",
        "rule": [
            "d6125"
        ]
    },
    {
        "instruction": "",
        "id": "q6126",
        "input": "python array of all zeros",
        "output": "",
        "rule": [
            "d6126"
        ]
    },
    {
        "instruction": "",
        "id": "q6127",
        "input": "run and stop asynchronous function in python",
        "output": "",
        "rule": [
            "d6127"
        ]
    },
    {
        "instruction": "",
        "id": "q6128",
        "input": "python array save and load",
        "output": "",
        "rule": [
            "d6128"
        ]
    },
    {
        "instruction": "",
        "id": "q6129",
        "input": "run code line by line in python",
        "output": "",
        "rule": [
            "d6129"
        ]
    },
    {
        "instruction": "",
        "id": "q6130",
        "input": "python array to c pointer",
        "output": "",
        "rule": [
            "d6130"
        ]
    },
    {
        "instruction": "",
        "id": "q6131",
        "input": "run pylint for python3",
        "output": "",
        "rule": [
            "d6131"
        ]
    },
    {
        "instruction": "",
        "id": "q6132",
        "input": "python array to ctype buffer",
        "output": "",
        "rule": [
            "d6132"
        ]
    },
    {
        "instruction": "",
        "id": "q6133",
        "input": "run pylint on cmd python 3",
        "output": "",
        "rule": [
            "d6133"
        ]
    },
    {
        "instruction": "",
        "id": "q6134",
        "input": "python array triple from to",
        "output": "",
        "rule": [
            "d6134"
        ]
    },
    {
        "instruction": "",
        "id": "q6135",
        "input": "saving cookies with python",
        "output": "",
        "rule": [
            "d6135"
        ]
    },
    {
        "instruction": "",
        "id": "q6136",
        "input": "python array with column names",
        "output": "",
        "rule": [
            "d6136"
        ]
    },
    {
        "instruction": "",
        "id": "q6137",
        "input": "seconds to minute hours python",
        "output": "",
        "rule": [
            "d6137"
        ]
    },
    {
        "instruction": "",
        "id": "q6138",
        "input": "python assert content of list all identical",
        "output": "",
        "rule": [
            "d6138"
        ]
    },
    {
        "instruction": "",
        "id": "q6139",
        "input": "see point3d obj in python",
        "output": "",
        "rule": [
            "d6139"
        ]
    },
    {
        "instruction": "",
        "id": "q6140",
        "input": "python ast parse if else",
        "output": "",
        "rule": [
            "d6140"
        ]
    },
    {
        "instruction": "",
        "id": "q6141",
        "input": "select nearest value in list python",
        "output": "",
        "rule": [
            "d6141"
        ]
    },
    {
        "instruction": "",
        "id": "q6142",
        "input": "python astropy table adding values",
        "output": "",
        "rule": [
            "d6142"
        ]
    },
    {
        "instruction": "",
        "id": "q6143",
        "input": "select rows of data frame with null values python",
        "output": "",
        "rule": [
            "d6143"
        ]
    },
    {
        "instruction": "",
        "id": "q6144",
        "input": "python async object method call",
        "output": "",
        "rule": [
            "d6144"
        ]
    },
    {
        "instruction": "",
        "id": "q6145",
        "input": "selecting specific columns from a fits file in python",
        "output": "",
        "rule": [
            "d6145"
        ]
    },
    {
        "instruction": "",
        "id": "q6146",
        "input": "selenim python assert element exists",
        "output": "",
        "rule": [
            "d6146"
        ]
    },
    {
        "instruction": "",
        "id": "q6147",
        "input": "python asyncio async processpool async map",
        "output": "",
        "rule": [
            "d6147"
        ]
    },
    {
        "instruction": "",
        "id": "q6148",
        "input": "sending url in post for api in python",
        "output": "",
        "rule": [
            "d6148"
        ]
    },
    {
        "instruction": "",
        "id": "q6149",
        "input": "python asyncio dynamically add tasks to event loop",
        "output": "",
        "rule": [
            "d6149"
        ]
    },
    {
        "instruction": "",
        "id": "q6150",
        "input": "python asyncio signal exit",
        "output": "",
        "rule": [
            "d6150"
        ]
    },
    {
        "instruction": "",
        "id": "q6151",
        "input": "set attribute on an object python",
        "output": "",
        "rule": [
            "d6151"
        ]
    },
    {
        "instruction": "",
        "id": "q6152",
        "input": "python auto exit thread on exit",
        "output": "",
        "rule": [
            "d6152"
        ]
    },
    {
        "instruction": "",
        "id": "q6153",
        "input": "set color message wxpython",
        "output": "",
        "rule": [
            "d6153"
        ]
    },
    {
        "instruction": "",
        "id": "q6154",
        "input": "python auto populating a pdf",
        "output": "",
        "rule": [
            "d6154"
        ]
    },
    {
        "instruction": "",
        "id": "q6155",
        "input": "set every cell in matrix to 0 if that row or column contains a 0 python",
        "output": "",
        "rule": [
            "d6155"
        ]
    },
    {
        "instruction": "",
        "id": "q6156",
        "input": "python autoformat axis labels",
        "output": "",
        "rule": [
            "d6156"
        ]
    },
    {
        "instruction": "",
        "id": "q6157",
        "input": "set pixel color python",
        "output": "",
        "rule": [
            "d6157"
        ]
    },
    {
        "instruction": "",
        "id": "q6158",
        "input": "python automatic figure out encoding",
        "output": "",
        "rule": [
            "d6158"
        ]
    },
    {
        "instruction": "",
        "id": "q6159",
        "input": "set python colorbar length to half",
        "output": "",
        "rule": [
            "d6159"
        ]
    },
    {
        "instruction": "",
        "id": "q6160",
        "input": "python avoid file permission denied",
        "output": "",
        "rule": [
            "d6160"
        ]
    },
    {
        "instruction": "",
        "id": "q6161",
        "input": "set window position in python",
        "output": "",
        "rule": [
            "d6161"
        ]
    },
    {
        "instruction": "",
        "id": "q6162",
        "input": "python bad pixel replacement",
        "output": "",
        "rule": [
            "d6162"
        ]
    },
    {
        "instruction": "",
        "id": "q6163",
        "input": "setting a pointer at end of file in python",
        "output": "",
        "rule": [
            "d6163"
        ]
    },
    {
        "instruction": "",
        "id": "q6164",
        "input": "python base64 image string to image write to file",
        "output": "",
        "rule": [
            "d6164"
        ]
    },
    {
        "instruction": "",
        "id": "q6165",
        "input": "setting proxy code in python",
        "output": "",
        "rule": [
            "d6165"
        ]
    },
    {
        "instruction": "",
        "id": "q6166",
        "input": "python base64 to image file",
        "output": "",
        "rule": [
            "d6166"
        ]
    },
    {
        "instruction": "",
        "id": "q6167",
        "input": "setting up sympy in python",
        "output": "",
        "rule": [
            "d6167"
        ]
    },
    {
        "instruction": "",
        "id": "q6168",
        "input": "python base64 without special symbol",
        "output": "",
        "rule": [
            "d6168"
        ]
    },
    {
        "instruction": "",
        "id": "q6169",
        "input": "setting variable in jinja python flask",
        "output": "",
        "rule": [
            "d6169"
        ]
    },
    {
        "instruction": "",
        "id": "q6170",
        "input": "python best way to scroll a canvas in tkinter",
        "output": "",
        "rule": [
            "d6170"
        ]
    },
    {
        "instruction": "",
        "id": "q6171",
        "input": "setting x axis to time python imshow",
        "output": "",
        "rule": [
            "d6171"
        ]
    },
    {
        "instruction": "",
        "id": "q6172",
        "input": "python bianry tree get parent node",
        "output": "",
        "rule": [
            "d6172"
        ]
    },
    {
        "instruction": "",
        "id": "q6173",
        "input": "shortcut for multiple comments in python",
        "output": "",
        "rule": [
            "d6173"
        ]
    },
    {
        "instruction": "",
        "id": "q6174",
        "input": "python binary true false as image",
        "output": "",
        "rule": [
            "d6174"
        ]
    },
    {
        "instruction": "",
        "id": "q6175",
        "input": "shortcuts to check for attribute eroor python",
        "output": "",
        "rule": [
            "d6175"
        ]
    },
    {
        "instruction": "",
        "id": "q6176",
        "input": "python bind to processor",
        "output": "",
        "rule": [
            "d6176"
        ]
    },
    {
        "instruction": "",
        "id": "q6177",
        "input": "show head of table python",
        "output": "",
        "rule": [
            "d6177"
        ]
    },
    {
        "instruction": "",
        "id": "q6178",
        "input": "python bool parse from string",
        "output": "",
        "rule": [
            "d6178"
        ]
    },
    {
        "instruction": "",
        "id": "q6179",
        "input": "signed angle between two vectors python",
        "output": "",
        "rule": [
            "d6179"
        ]
    },
    {
        "instruction": "",
        "id": "q6180",
        "input": "python boolean condition for numpy matrix",
        "output": "",
        "rule": [
            "d6180"
        ]
    },
    {
        "instruction": "",
        "id": "q6181",
        "input": "simple dialog box to reshow after incorrect value python",
        "output": "",
        "rule": [
            "d6181"
        ]
    },
    {
        "instruction": "",
        "id": "q6182",
        "input": "python boolean function definition",
        "output": "",
        "rule": [
            "d6182"
        ]
    },
    {
        "instruction": "",
        "id": "q6183",
        "input": "simplehttpserver python log raw request",
        "output": "",
        "rule": [
            "d6183"
        ]
    },
    {
        "instruction": "",
        "id": "q6184",
        "input": "python boto3 ec2 security groups filter",
        "output": "",
        "rule": [
            "d6184"
        ]
    },
    {
        "instruction": "",
        "id": "q6185",
        "input": "simulating log normal distribution python",
        "output": "",
        "rule": [
            "d6185"
        ]
    },
    {
        "instruction": "",
        "id": "q6186",
        "input": "python boto3 read s3 object as json",
        "output": "",
        "rule": [
            "d6186"
        ]
    },
    {
        "instruction": "",
        "id": "q6187",
        "input": "size of axis numpy python",
        "output": "",
        "rule": [
            "d6187"
        ]
    },
    {
        "instruction": "",
        "id": "q6188",
        "input": "python break a list into smaller batches",
        "output": "",
        "rule": [
            "d6188"
        ]
    },
    {
        "instruction": "",
        "id": "q6189",
        "input": "size of list object in python",
        "output": "",
        "rule": [
            "d6189"
        ]
    },
    {
        "instruction": "",
        "id": "q6190",
        "input": "python break up a string into dictionaries",
        "output": "",
        "rule": [
            "d6190"
        ]
    },
    {
        "instruction": "",
        "id": "q6191",
        "input": "size of the list in python",
        "output": "",
        "rule": [
            "d6191"
        ]
    },
    {
        "instruction": "",
        "id": "q6192",
        "input": "python btypes to string",
        "output": "",
        "rule": [
            "d6192"
        ]
    },
    {
        "instruction": "",
        "id": "q6193",
        "input": "slice every 5 items python",
        "output": "",
        "rule": [
            "d6193"
        ]
    },
    {
        "instruction": "",
        "id": "q6194",
        "input": "python byte array memory size",
        "output": "",
        "rule": [
            "d6194"
        ]
    },
    {
        "instruction": "",
        "id": "q6195",
        "input": "smallest number repeating k times in python",
        "output": "",
        "rule": [
            "d6195"
        ]
    },
    {
        "instruction": "",
        "id": "q6196",
        "input": "python byte to string b",
        "output": "",
        "rule": [
            "d6196"
        ]
    },
    {
        "instruction": "",
        "id": "q6197",
        "input": "smart way to do percentage python",
        "output": "",
        "rule": [
            "d6197"
        ]
    },
    {
        "instruction": "",
        "id": "q6198",
        "input": "python c extern char array",
        "output": "",
        "rule": [
            "d6198"
        ]
    },
    {
        "instruction": "",
        "id": "q6199",
        "input": "solve a matrix python",
        "output": "",
        "rule": [
            "d6199"
        ]
    },
    {
        "instruction": "",
        "id": "q6200",
        "input": "python c++ dependency visualization",
        "output": "",
        "rule": [
            "d6200"
        ]
    },
    {
        "instruction": "",
        "id": "q6201",
        "input": "solving matrix equations python",
        "output": "",
        "rule": [
            "d6201"
        ]
    },
    {
        "instruction": "",
        "id": "q6202",
        "input": "python calculate average contrast of an image",
        "output": "",
        "rule": [
            "d6202"
        ]
    },
    {
        "instruction": "",
        "id": "q6203",
        "input": "sort an array in descending order in python",
        "output": "",
        "rule": [
            "d6203"
        ]
    },
    {
        "instruction": "",
        "id": "q6204",
        "input": "python calculate distance between 2 coordinates",
        "output": "",
        "rule": [
            "d6204"
        ]
    },
    {
        "instruction": "",
        "id": "q6205",
        "input": "sort and uniq a list in python",
        "output": "",
        "rule": [
            "d6205"
        ]
    },
    {
        "instruction": "",
        "id": "q6206",
        "input": "python calculate jaccard similarity between two vectors",
        "output": "",
        "rule": [
            "d6206"
        ]
    },
    {
        "instruction": "",
        "id": "q6207",
        "input": "sort and uniq list python",
        "output": "",
        "rule": [
            "d6207"
        ]
    },
    {
        "instruction": "",
        "id": "q6208",
        "input": "python calculate offset coordinates star",
        "output": "",
        "rule": [
            "d6208"
        ]
    },
    {
        "instruction": "",
        "id": "q6209",
        "input": "sort data to column in python",
        "output": "",
        "rule": [
            "d6209"
        ]
    },
    {
        "instruction": "",
        "id": "q6210",
        "input": "python calculate sigmoid function",
        "output": "",
        "rule": [
            "d6210"
        ]
    },
    {
        "instruction": "",
        "id": "q6211",
        "input": "sorting a list of python objects by an element of the object",
        "output": "",
        "rule": [
            "d6211"
        ]
    },
    {
        "instruction": "",
        "id": "q6212",
        "input": "python calculate struct offset",
        "output": "",
        "rule": [
            "d6212"
        ]
    },
    {
        "instruction": "",
        "id": "q6213",
        "input": "sorting values key should also change in python",
        "output": "",
        "rule": [
            "d6213"
        ]
    },
    {
        "instruction": "",
        "id": "q6214",
        "input": "python can use cascade inequality",
        "output": "",
        "rule": [
            "d6214"
        ]
    },
    {
        "instruction": "",
        "id": "q6215",
        "input": "sphinx skip python files",
        "output": "",
        "rule": [
            "d6215"
        ]
    },
    {
        "instruction": "",
        "id": "q6216",
        "input": "python canvas auto scrolling text",
        "output": "",
        "rule": [
            "d6216"
        ]
    },
    {
        "instruction": "",
        "id": "q6217",
        "input": "split tsv file python",
        "output": "",
        "rule": [
            "d6217"
        ]
    },
    {
        "instruction": "",
        "id": "q6218",
        "input": "python capitalize all leter",
        "output": "",
        "rule": [
            "d6218"
        ]
    },
    {
        "instruction": "",
        "id": "q6219",
        "input": "splitting up a string into a dictionary python",
        "output": "",
        "rule": [
            "d6219"
        ]
    },
    {
        "instruction": "",
        "id": "q6220",
        "input": "python capitalize all letters",
        "output": "",
        "rule": [
            "d6220"
        ]
    },
    {
        "instruction": "",
        "id": "q6221",
        "input": "sqlite in python create a dictionary",
        "output": "",
        "rule": [
            "d6221"
        ]
    },
    {
        "instruction": "",
        "id": "q6222",
        "input": "python case insesitive endswith comparison",
        "output": "",
        "rule": [
            "d6222"
        ]
    },
    {
        "instruction": "",
        "id": "q6223",
        "input": "stack python memory map",
        "output": "",
        "rule": [
            "d6223"
        ]
    },
    {
        "instruction": "",
        "id": "q6224",
        "input": "python cast as timestamp",
        "output": "",
        "rule": [
            "d6224"
        ]
    },
    {
        "instruction": "",
        "id": "q6225",
        "input": "stacked plot python time seriesmatplotlib",
        "output": "",
        "rule": [
            "d6225"
        ]
    },
    {
        "instruction": "",
        "id": "q6226",
        "input": "python cast comma seperated string as list",
        "output": "",
        "rule": [
            "d6226"
        ]
    },
    {
        "instruction": "",
        "id": "q6227",
        "input": "stackovrflow python send text message",
        "output": "",
        "rule": [
            "d6227"
        ]
    },
    {
        "instruction": "",
        "id": "q6228",
        "input": "python cast nontype to string",
        "output": "",
        "rule": [
            "d6228"
        ]
    },
    {
        "instruction": "",
        "id": "q6229",
        "input": "standard deviation across columns python",
        "output": "",
        "rule": [
            "d6229"
        ]
    },
    {
        "instruction": "",
        "id": "q6230",
        "input": "python cast return type",
        "output": "",
        "rule": [
            "d6230"
        ]
    },
    {
        "instruction": "",
        "id": "q6231",
        "input": "standard deviation and average in python",
        "output": "",
        "rule": [
            "d6231"
        ]
    },
    {
        "instruction": "",
        "id": "q6232",
        "input": "python cast to precision",
        "output": "",
        "rule": [
            "d6232"
        ]
    },
    {
        "instruction": "",
        "id": "q6233",
        "input": "standard deviation using average code python without list",
        "output": "",
        "rule": [
            "d6233"
        ]
    },
    {
        "instruction": "",
        "id": "q6234",
        "input": "python casting string to bool",
        "output": "",
        "rule": [
            "d6234"
        ]
    },
    {
        "instruction": "",
        "id": "q6235",
        "input": "start and stop must be an interger in range function in python fix",
        "output": "",
        "rule": [
            "d6235"
        ]
    },
    {
        "instruction": "",
        "id": "q6236",
        "input": "python cdll create object from dll",
        "output": "",
        "rule": [
            "d6236"
        ]
    },
    {
        "instruction": "",
        "id": "q6237",
        "input": "stat python linux file permsissions",
        "output": "",
        "rule": [
            "d6237"
        ]
    },
    {
        "instruction": "",
        "id": "q6238",
        "input": "python celery async result",
        "output": "",
        "rule": [
            "d6238"
        ]
    },
    {
        "instruction": "",
        "id": "q6239",
        "input": "static method in python csdn",
        "output": "",
        "rule": [
            "d6239"
        ]
    },
    {
        "instruction": "",
        "id": "q6240",
        "input": "python celery get task by id",
        "output": "",
        "rule": [
            "d6240"
        ]
    },
    {
        "instruction": "",
        "id": "q6241",
        "input": "std deviation in list python",
        "output": "",
        "rule": [
            "d6241"
        ]
    },
    {
        "instruction": "",
        "id": "q6242",
        "input": "python celery type is not json serializable",
        "output": "",
        "rule": [
            "d6242"
        ]
    },
    {
        "instruction": "",
        "id": "q6243",
        "input": "stdout flush terminate python",
        "output": "",
        "rule": [
            "d6243"
        ]
    },
    {
        "instruction": "",
        "id": "q6244",
        "input": "python change camelcase to normal",
        "output": "",
        "rule": [
            "d6244"
        ]
    },
    {
        "instruction": "",
        "id": "q6245",
        "input": "stop a running task in python",
        "output": "",
        "rule": [
            "d6245"
        ]
    },
    {
        "instruction": "",
        "id": "q6246",
        "input": "python change date to custom format",
        "output": "",
        "rule": [
            "d6246"
        ]
    },
    {
        "instruction": "",
        "id": "q6247",
        "input": "stop execution by sending ctrl c in python",
        "output": "",
        "rule": [
            "d6247"
        ]
    },
    {
        "instruction": "",
        "id": "q6248",
        "input": "python change default traceback",
        "output": "",
        "rule": [
            "d6248"
        ]
    },
    {
        "instruction": "",
        "id": "q6249",
        "input": "stopwords containing punctionation python",
        "output": "",
        "rule": [
            "d6249"
        ]
    },
    {
        "instruction": "",
        "id": "q6250",
        "input": "python change dict element of one key, other key remain same",
        "output": "",
        "rule": [
            "d6250"
        ]
    },
    {
        "instruction": "",
        "id": "q6251",
        "input": "store type of a variable in a list python",
        "output": "",
        "rule": [
            "d6251"
        ]
    },
    {
        "instruction": "",
        "id": "q6252",
        "input": "python change dict to request body",
        "output": "",
        "rule": [
            "d6252"
        ]
    },
    {
        "instruction": "",
        "id": "q6253",
        "input": "str cast to bytes python",
        "output": "",
        "rule": [
            "d6253"
        ]
    },
    {
        "instruction": "",
        "id": "q6254",
        "input": "python change index in cellwidget combobox not valid index",
        "output": "",
        "rule": [
            "d6254"
        ]
    },
    {
        "instruction": "",
        "id": "q6255",
        "input": "str not callable python xpath",
        "output": "",
        "rule": [
            "d6255"
        ]
    },
    {
        "instruction": "",
        "id": "q6256",
        "input": "python change key names",
        "output": "",
        "rule": [
            "d6256"
        ]
    },
    {
        "instruction": "",
        "id": "q6257",
        "input": "string as file object python",
        "output": "",
        "rule": [
            "d6257"
        ]
    },
    {
        "instruction": "",
        "id": "q6258",
        "input": "python change number to percent format",
        "output": "",
        "rule": [
            "d6258"
        ]
    },
    {
        "instruction": "",
        "id": "q6259",
        "input": "string dot ascii in python",
        "output": "",
        "rule": [
            "d6259"
        ]
    },
    {
        "instruction": "",
        "id": "q6260",
        "input": "python change type from object to int",
        "output": "",
        "rule": [
            "d6260"
        ]
    },
    {
        "instruction": "",
        "id": "q6261",
        "input": "string is empty query python",
        "output": "",
        "rule": [
            "d6261"
        ]
    },
    {
        "instruction": "",
        "id": "q6262",
        "input": "python change type np array into dictionary",
        "output": "",
        "rule": [
            "d6262"
        ]
    },
    {
        "instruction": "",
        "id": "q6263",
        "input": "string to objectid python",
        "output": "",
        "rule": [
            "d6263"
        ]
    },
    {
        "instruction": "",
        "id": "q6264",
        "input": "python change value of a global variable",
        "output": "",
        "rule": [
            "d6264"
        ]
    },
    {
        "instruction": "",
        "id": "q6265",
        "input": "strings to bytes python 3",
        "output": "",
        "rule": [
            "d6265"
        ]
    },
    {
        "instruction": "",
        "id": "q6266",
        "input": "python chech if a string is in the list",
        "output": "",
        "rule": [
            "d6266"
        ]
    },
    {
        "instruction": "",
        "id": "q6267",
        "input": "strip a character every line and return a list in python",
        "output": "",
        "rule": [
            "d6267"
        ]
    },
    {
        "instruction": "",
        "id": "q6268",
        "input": "python check all elements in list equal",
        "output": "",
        "rule": [
            "d6268"
        ]
    },
    {
        "instruction": "",
        "id": "q6269",
        "input": "strip spaces from a list python",
        "output": "",
        "rule": [
            "d6269"
        ]
    },
    {
        "instruction": "",
        "id": "q6270",
        "input": "python check all elements of nested list",
        "output": "",
        "rule": [
            "d6270"
        ]
    },
    {
        "instruction": "",
        "id": "q6271",
        "input": "python check element exist",
        "output": "",
        "rule": [
            "d6271"
        ]
    },
    {
        "instruction": "",
        "id": "q6272",
        "input": "strip underscore from strin python",
        "output": "",
        "rule": [
            "d6272"
        ]
    },
    {
        "instruction": "",
        "id": "q6273",
        "input": "python check executione time",
        "output": "",
        "rule": [
            "d6273"
        ]
    },
    {
        "instruction": "",
        "id": "q6274",
        "input": "subsetting a python dictionary by keys that have certain values",
        "output": "",
        "rule": [
            "d6274"
        ]
    },
    {
        "instruction": "",
        "id": "q6275",
        "input": "python check for valid regex match",
        "output": "",
        "rule": [
            "d6275"
        ]
    },
    {
        "instruction": "",
        "id": "q6276",
        "input": "substitute an empty string for a pattern in python",
        "output": "",
        "rule": [
            "d6276"
        ]
    },
    {
        "instruction": "",
        "id": "q6277",
        "input": "python check http 200",
        "output": "",
        "rule": [
            "d6277"
        ]
    },
    {
        "instruction": "",
        "id": "q6278",
        "input": "sum of square components in python",
        "output": "",
        "rule": [
            "d6278"
        ]
    },
    {
        "instruction": "",
        "id": "q6279",
        "input": "python check if an object is numpy array",
        "output": "",
        "rule": [
            "d6279"
        ]
    },
    {
        "instruction": "",
        "id": "q6280",
        "input": "syntax for making a list into a string in python",
        "output": "",
        "rule": [
            "d6280"
        ]
    },
    {
        "instruction": "",
        "id": "q6281",
        "input": "python check if any asyncio jobs are complete",
        "output": "",
        "rule": [
            "d6281"
        ]
    },
    {
        "instruction": "",
        "id": "q6282",
        "input": "sys stdout python buffer apache slow",
        "output": "",
        "rule": [
            "d6282"
        ]
    },
    {
        "instruction": "",
        "id": "q6283",
        "input": "python check if connected to lan",
        "output": "",
        "rule": [
            "d6283"
        ]
    },
    {
        "instruction": "",
        "id": "q6284",
        "input": "table cell location center python",
        "output": "",
        "rule": [
            "d6284"
        ]
    },
    {
        "instruction": "",
        "id": "q6285",
        "input": "python check if empty array",
        "output": "",
        "rule": [
            "d6285"
        ]
    },
    {
        "instruction": "",
        "id": "q6286",
        "input": "tensorflow python 2 ubuntu",
        "output": "",
        "rule": [
            "d6286"
        ]
    },
    {
        "instruction": "",
        "id": "q6287",
        "input": "python check if field name exists",
        "output": "",
        "rule": [
            "d6287"
        ]
    },
    {
        "instruction": "",
        "id": "q6288",
        "input": "tensorflow set pythonpath is a directory",
        "output": "",
        "rule": [
            "d6288"
        ]
    },
    {
        "instruction": "",
        "id": "q6289",
        "input": "python check if file exists bytes",
        "output": "",
        "rule": [
            "d6289"
        ]
    },
    {
        "instruction": "",
        "id": "q6290",
        "input": "terminate windows services with python",
        "output": "",
        "rule": [
            "d6290"
        ]
    },
    {
        "instruction": "",
        "id": "q6291",
        "input": "python check if file is binary file",
        "output": "",
        "rule": [
            "d6291"
        ]
    },
    {
        "instruction": "",
        "id": "q6292",
        "input": "test assert type in python",
        "output": "",
        "rule": [
            "d6292"
        ]
    },
    {
        "instruction": "",
        "id": "q6293",
        "input": "python check if http port is listening",
        "output": "",
        "rule": [
            "d6293"
        ]
    },
    {
        "instruction": "",
        "id": "q6294",
        "input": "test for membership in an enum python",
        "output": "",
        "rule": [
            "d6294"
        ]
    },
    {
        "instruction": "",
        "id": "q6295",
        "input": "python check if image file is corrupt",
        "output": "",
        "rule": [
            "d6295"
        ]
    },
    {
        "instruction": "",
        "id": "q6296",
        "input": "testing whether python is in your path",
        "output": "",
        "rule": [
            "d6296"
        ]
    },
    {
        "instruction": "",
        "id": "q6297",
        "input": "python check if it is a datetime object",
        "output": "",
        "rule": [
            "d6297"
        ]
    },
    {
        "instruction": "",
        "id": "q6298",
        "input": "the days to the end of the quarter python",
        "output": "",
        "rule": [
            "d6298"
        ]
    },
    {
        "instruction": "",
        "id": "q6299",
        "input": "python check if iter last",
        "output": "",
        "rule": [
            "d6299"
        ]
    },
    {
        "instruction": "",
        "id": "q6300",
        "input": "thread safe singleton python",
        "output": "",
        "rule": [
            "d6300"
        ]
    },
    {
        "instruction": "",
        "id": "q6301",
        "input": "python check if json element exists",
        "output": "",
        "rule": [
            "d6301"
        ]
    },
    {
        "instruction": "",
        "id": "q6302",
        "input": "time the execution of python query",
        "output": "",
        "rule": [
            "d6302"
        ]
    },
    {
        "instruction": "",
        "id": "q6303",
        "input": "python check if list contains nested list",
        "output": "",
        "rule": [
            "d6303"
        ]
    },
    {
        "instruction": "",
        "id": "q6304",
        "input": "to print tht top element in queue in python",
        "output": "",
        "rule": [
            "d6304"
        ]
    },
    {
        "instruction": "",
        "id": "q6305",
        "input": "python check if list object has attribute",
        "output": "",
        "rule": [
            "d6305"
        ]
    },
    {
        "instruction": "",
        "id": "q6306",
        "input": "to remove duplicate elements in list in python",
        "output": "",
        "rule": [
            "d6306"
        ]
    },
    {
        "instruction": "",
        "id": "q6307",
        "input": "python check if numerical type",
        "output": "",
        "rule": [
            "d6307"
        ]
    },
    {
        "instruction": "",
        "id": "q6308",
        "input": "to timestamp from milliseconds python",
        "output": "",
        "rule": [
            "d6308"
        ]
    },
    {
        "instruction": "",
        "id": "q6309",
        "input": "python check if provess os listening",
        "output": "",
        "rule": [
            "d6309"
        ]
    },
    {
        "instruction": "",
        "id": "q6310",
        "input": "token for token in tokenize(lines) in python",
        "output": "",
        "rule": [
            "d6310"
        ]
    },
    {
        "instruction": "",
        "id": "q6311",
        "input": "python check if stdout is a file",
        "output": "",
        "rule": [
            "d6311"
        ]
    },
    {
        "instruction": "",
        "id": "q6312",
        "input": "tokenize items in list to list of lists python",
        "output": "",
        "rule": [
            "d6312"
        ]
    },
    {
        "instruction": "",
        "id": "q6313",
        "input": "python check if string is bytes type",
        "output": "",
        "rule": [
            "d6313"
        ]
    },
    {
        "instruction": "",
        "id": "q6314",
        "input": "total milliseconds datetime python",
        "output": "",
        "rule": [
            "d6314"
        ]
    },
    {
        "instruction": "",
        "id": "q6315",
        "input": "python check if string is hex",
        "output": "",
        "rule": [
            "d6315"
        ]
    },
    {
        "instruction": "",
        "id": "q6316",
        "input": "treeview not selectable python tkinter",
        "output": "",
        "rule": [
            "d6316"
        ]
    },
    {
        "instruction": "",
        "id": "q6317",
        "input": "python check if two strings match case sensitivity",
        "output": "",
        "rule": [
            "d6317"
        ]
    },
    {
        "instruction": "",
        "id": "q6318",
        "input": "trim spaces string python",
        "output": "",
        "rule": [
            "d6318"
        ]
    },
    {
        "instruction": "",
        "id": "q6319",
        "input": "python check if value is integer or string json",
        "output": "",
        "rule": [
            "d6319"
        ]
    },
    {
        "instruction": "",
        "id": "q6320",
        "input": "try multiple encodings pythons while opening a file",
        "output": "",
        "rule": [
            "d6320"
        ]
    },
    {
        "instruction": "",
        "id": "q6321",
        "input": "python check if window is active win32",
        "output": "",
        "rule": [
            "d6321"
        ]
    },
    {
        "instruction": "",
        "id": "q6322",
        "input": "turn a string to a datetime object python",
        "output": "",
        "rule": [
            "d6322"
        ]
    },
    {
        "instruction": "",
        "id": "q6323",
        "input": "python check in value in tuple or list",
        "output": "",
        "rule": [
            "d6323"
        ]
    },
    {
        "instruction": "",
        "id": "q6324",
        "input": "turn array into a table python",
        "output": "",
        "rule": [
            "d6324"
        ]
    },
    {
        "instruction": "",
        "id": "q6325",
        "input": "python check instance is number",
        "output": "",
        "rule": [
            "d6325"
        ]
    },
    {
        "instruction": "",
        "id": "q6326",
        "input": "turn comma separated string to list python",
        "output": "",
        "rule": [
            "d6326"
        ]
    },
    {
        "instruction": "",
        "id": "q6327",
        "input": "python check is file executable",
        "output": "",
        "rule": [
            "d6327"
        ]
    },
    {
        "instruction": "",
        "id": "q6328",
        "input": "turn csv into a list of strings python 3",
        "output": "",
        "rule": [
            "d6328"
        ]
    },
    {
        "instruction": "",
        "id": "q6329",
        "input": "python check is numpy array or list",
        "output": "",
        "rule": [
            "d6329"
        ]
    },
    {
        "instruction": "",
        "id": "q6330",
        "input": "turn object into list in python",
        "output": "",
        "rule": [
            "d6330"
        ]
    },
    {
        "instruction": "",
        "id": "q6331",
        "input": "python check kernel memory",
        "output": "",
        "rule": [
            "d6331"
        ]
    },
    {
        "instruction": "",
        "id": "q6332",
        "input": "turning a read file into string in python",
        "output": "",
        "rule": [
            "d6332"
        ]
    },
    {
        "instruction": "",
        "id": "q6333",
        "input": "python check match regardless uppercase",
        "output": "",
        "rule": [
            "d6333"
        ]
    },
    {
        "instruction": "",
        "id": "q6334",
        "input": "turning string to float and detection python",
        "output": "",
        "rule": [
            "d6334"
        ]
    },
    {
        "instruction": "",
        "id": "q6335",
        "input": "python check matrix invertible",
        "output": "",
        "rule": [
            "d6335"
        ]
    },
    {
        "instruction": "",
        "id": "q6336",
        "input": "type casting in python to string",
        "output": "",
        "rule": [
            "d6336"
        ]
    },
    {
        "instruction": "",
        "id": "q6337",
        "input": "python check type in list comprehension",
        "output": "",
        "rule": [
            "d6337"
        ]
    },
    {
        "instruction": "",
        "id": "q6338",
        "input": "typecast to string python",
        "output": "",
        "rule": [
            "d6338"
        ]
    },
    {
        "instruction": "",
        "id": "q6339",
        "input": "python check url working",
        "output": "",
        "rule": [
            "d6339"
        ]
    },
    {
        "instruction": "",
        "id": "q6340",
        "input": "undefiened counter in python veribwl",
        "output": "",
        "rule": [
            "d6340"
        ]
    },
    {
        "instruction": "",
        "id": "q6341",
        "input": "python check whether a datatype is numerical",
        "output": "",
        "rule": [
            "d6341"
        ]
    },
    {
        "instruction": "",
        "id": "q6342",
        "input": "unresolved reference 'self' in python",
        "output": "",
        "rule": [
            "d6342"
        ]
    },
    {
        "instruction": "",
        "id": "q6343",
        "input": "python checking if something is a directory",
        "output": "",
        "rule": [
            "d6343"
        ]
    },
    {
        "instruction": "",
        "id": "q6344",
        "input": "unzipping multiple zip files in python",
        "output": "",
        "rule": [
            "d6344"
        ]
    },
    {
        "instruction": "",
        "id": "q6345",
        "input": "python checking object for attributes",
        "output": "",
        "rule": [
            "d6345"
        ]
    },
    {
        "instruction": "",
        "id": "q6346",
        "input": "updatating plot object inline python juypter",
        "output": "",
        "rule": [
            "d6346"
        ]
    },
    {
        "instruction": "",
        "id": "q6347",
        "input": "python chmod read and write",
        "output": "",
        "rule": [
            "d6347"
        ]
    },
    {
        "instruction": "",
        "id": "q6348",
        "input": "update parent from child python",
        "output": "",
        "rule": [
            "d6348"
        ]
    },
    {
        "instruction": "",
        "id": "q6349",
        "input": "python choose best object with attribute closest",
        "output": "",
        "rule": [
            "d6349"
        ]
    },
    {
        "instruction": "",
        "id": "q6350",
        "input": "updating mongo field with large dictionary from python",
        "output": "",
        "rule": [
            "d6350"
        ]
    },
    {
        "instruction": "",
        "id": "q6351",
        "input": "python chunked md5 sum save memory",
        "output": "",
        "rule": [
            "d6351"
        ]
    },
    {
        "instruction": "",
        "id": "q6352",
        "input": "upper case in a list python",
        "output": "",
        "rule": [
            "d6352"
        ]
    },
    {
        "instruction": "",
        "id": "q6353",
        "input": "python clear a certain y axis plot",
        "output": "",
        "rule": [
            "d6353"
        ]
    },
    {
        "instruction": "",
        "id": "q6354",
        "input": "use a button from breezypythongui to close gui python",
        "output": "",
        "rule": [
            "d6354"
        ]
    },
    {
        "instruction": "",
        "id": "q6355",
        "input": "python clear a dir and remove it",
        "output": "",
        "rule": [
            "d6355"
        ]
    },
    {
        "instruction": "",
        "id": "q6356",
        "input": "use javascript variable in python",
        "output": "",
        "rule": [
            "d6356"
        ]
    },
    {
        "instruction": "",
        "id": "q6357",
        "input": "python clear contents of a folder",
        "output": "",
        "rule": [
            "d6357"
        ]
    },
    {
        "instruction": "",
        "id": "q6358",
        "input": "use kwargs with a dict in python",
        "output": "",
        "rule": [
            "d6358"
        ]
    },
    {
        "instruction": "",
        "id": "q6359",
        "input": "python clear specific objects",
        "output": "",
        "rule": [
            "d6359"
        ]
    },
    {
        "instruction": "",
        "id": "q6360",
        "input": "use numpy array as list indices in python",
        "output": "",
        "rule": [
            "d6360"
        ]
    },
    {
        "instruction": "",
        "id": "q6361",
        "input": "python clone a mask",
        "output": "",
        "rule": [
            "d6361"
        ]
    },
    {
        "instruction": "",
        "id": "q6362",
        "input": "use python to test java",
        "output": "",
        "rule": [
            "d6362"
        ]
    },
    {
        "instruction": "",
        "id": "q6363",
        "input": "python clone query set",
        "output": "",
        "rule": [
            "d6363"
        ]
    },
    {
        "instruction": "",
        "id": "q6364",
        "input": "use single quotes in python string",
        "output": "",
        "rule": [
            "d6364"
        ]
    },
    {
        "instruction": "",
        "id": "q6365",
        "input": "python close browser after 5 mins",
        "output": "",
        "rule": [
            "d6365"
        ]
    },
    {
        "instruction": "",
        "id": "q6366",
        "input": "using a dict in reverse python",
        "output": "",
        "rule": [
            "d6366"
        ]
    },
    {
        "instruction": "",
        "id": "q6367",
        "input": "python close logging file",
        "output": "",
        "rule": [
            "d6367"
        ]
    },
    {
        "instruction": "",
        "id": "q6368",
        "input": "using colorama in windows python",
        "output": "",
        "rule": [
            "d6368"
        ]
    },
    {
        "instruction": "",
        "id": "q6369",
        "input": "python closing database before terminating",
        "output": "",
        "rule": [
            "d6369"
        ]
    },
    {
        "instruction": "",
        "id": "q6370",
        "input": "using functions to make a table aligned python",
        "output": "",
        "rule": [
            "d6370"
        ]
    },
    {
        "instruction": "",
        "id": "q6371",
        "input": "python code for euclidean distance between those two points",
        "output": "",
        "rule": [
            "d6371"
        ]
    },
    {
        "instruction": "",
        "id": "q6372",
        "input": "using python to check to see if the url is active with an http call",
        "output": "",
        "rule": [
            "d6372"
        ]
    },
    {
        "instruction": "",
        "id": "q6373",
        "input": "python code in extension pause every interval",
        "output": "",
        "rule": [
            "d6373"
        ]
    },
    {
        "instruction": "",
        "id": "q6374",
        "input": "using python user defined function to execute a java jar",
        "output": "",
        "rule": [
            "d6374"
        ]
    },
    {
        "instruction": "",
        "id": "q6375",
        "input": "python code object detection tensorflow with custom dataset",
        "output": "",
        "rule": [
            "d6375"
        ]
    },
    {
        "instruction": "",
        "id": "q6376",
        "input": "using session to pull data from a http url python",
        "output": "",
        "rule": [
            "d6376"
        ]
    },
    {
        "instruction": "",
        "id": "q6377",
        "input": "python code tell what type of data",
        "output": "",
        "rule": [
            "d6377"
        ]
    },
    {
        "instruction": "",
        "id": "q6378",
        "input": "using slice for list python",
        "output": "",
        "rule": [
            "d6378"
        ]
    },
    {
        "instruction": "",
        "id": "q6379",
        "input": "python code to list all the prime number",
        "output": "",
        "rule": [
            "d6379"
        ]
    },
    {
        "instruction": "",
        "id": "q6380",
        "input": "using yield next file python",
        "output": "",
        "rule": [
            "d6380"
        ]
    },
    {
        "instruction": "",
        "id": "q6381",
        "input": "python color text content contained within brackets",
        "output": "",
        "rule": [
            "d6381"
        ]
    },
    {
        "instruction": "",
        "id": "q6382",
        "input": "valid file path check in python",
        "output": "",
        "rule": [
            "d6382"
        ]
    },
    {
        "instruction": "",
        "id": "q6383",
        "input": "python column names to a dictionary",
        "output": "",
        "rule": [
            "d6383"
        ]
    },
    {
        "instruction": "",
        "id": "q6384",
        "input": "validate a url in python",
        "output": "",
        "rule": [
            "d6384"
        ]
    },
    {
        "instruction": "",
        "id": "q6385",
        "input": "python combine several images into one",
        "output": "",
        "rule": [
            "d6385"
        ]
    },
    {
        "instruction": "",
        "id": "q6386",
        "input": "validate the type of all elements in a list python",
        "output": "",
        "rule": [
            "d6386"
        ]
    },
    {
        "instruction": "",
        "id": "q6387",
        "input": "python combine to dictionaries",
        "output": "",
        "rule": [
            "d6387"
        ]
    },
    {
        "instruction": "",
        "id": "q6388",
        "input": "value of all the keys in dictionary is same python",
        "output": "",
        "rule": [
            "d6388"
        ]
    },
    {
        "instruction": "",
        "id": "q6389",
        "input": "python combobox set value",
        "output": "",
        "rule": [
            "d6389"
        ]
    },
    {
        "instruction": "",
        "id": "q6390",
        "input": "variance from svr prediction python",
        "output": "",
        "rule": [
            "d6390"
        ]
    },
    {
        "instruction": "",
        "id": "q6391",
        "input": "python combobox update values",
        "output": "",
        "rule": [
            "d6391"
        ]
    },
    {
        "instruction": "",
        "id": "q6392",
        "input": "vectorize a function python",
        "output": "",
        "rule": [
            "d6392"
        ]
    },
    {
        "instruction": "",
        "id": "q6393",
        "input": "python compare length of 2 strings",
        "output": "",
        "rule": [
            "d6393"
        ]
    },
    {
        "instruction": "",
        "id": "q6394",
        "input": "vs unittest python coverage",
        "output": "",
        "rule": [
            "d6394"
        ]
    },
    {
        "instruction": "",
        "id": "q6395",
        "input": "python compare string diff len",
        "output": "",
        "rule": [
            "d6395"
        ]
    },
    {
        "instruction": "",
        "id": "q6396",
        "input": "what axis is column in numpy python",
        "output": "",
        "rule": [
            "d6396"
        ]
    },
    {
        "instruction": "",
        "id": "q6397",
        "input": "python compress leading whitespace",
        "output": "",
        "rule": [
            "d6397"
        ]
    },
    {
        "instruction": "",
        "id": "q6398",
        "input": "python compute euclidean distance of two vectors",
        "output": "",
        "rule": [
            "d6398"
        ]
    },
    {
        "instruction": "",
        "id": "q6399",
        "input": "what colors can i use in python",
        "output": "",
        "rule": [
            "d6399"
        ]
    },
    {
        "instruction": "",
        "id": "q6400",
        "input": "python concat str bool",
        "output": "",
        "rule": [
            "d6400"
        ]
    },
    {
        "instruction": "",
        "id": "q6401",
        "input": "what does next(file) return in python",
        "output": "",
        "rule": [
            "d6401"
        ]
    },
    {
        "instruction": "",
        "id": "q6402",
        "input": "python concatenate all items in tuple",
        "output": "",
        "rule": [
            "d6402"
        ]
    },
    {
        "instruction": "",
        "id": "q6403",
        "input": "what to return a max in python without the max function",
        "output": "",
        "rule": [
            "d6403"
        ]
    },
    {
        "instruction": "",
        "id": "q6404",
        "input": "python concert numpy array to list",
        "output": "",
        "rule": [
            "d6404"
        ]
    },
    {
        "instruction": "",
        "id": "q6405",
        "input": "word leter count to dictionary python",
        "output": "",
        "rule": [
            "d6405"
        ]
    },
    {
        "instruction": "",
        "id": "q6406",
        "input": "python conditional with none",
        "output": "",
        "rule": [
            "d6406"
        ]
    },
    {
        "instruction": "",
        "id": "q6407",
        "input": "write a configure file python format",
        "output": "",
        "rule": [
            "d6407"
        ]
    },
    {
        "instruction": "",
        "id": "q6408",
        "input": "python confidence interval for t distribution",
        "output": "",
        "rule": [
            "d6408"
        ]
    },
    {
        "instruction": "",
        "id": "q6409",
        "input": "write a function that finds the median of a list of numbers python",
        "output": "",
        "rule": [
            "d6409"
        ]
    },
    {
        "instruction": "",
        "id": "q6410",
        "input": "python configparser get all values in a section",
        "output": "",
        "rule": [
            "d6410"
        ]
    },
    {
        "instruction": "",
        "id": "q6411",
        "input": "write dict to json file in python",
        "output": "",
        "rule": [
            "d6411"
        ]
    },
    {
        "instruction": "",
        "id": "q6412",
        "input": "python conn is not defined",
        "output": "",
        "rule": [
            "d6412"
        ]
    },
    {
        "instruction": "",
        "id": "q6413",
        "input": "writing a list as tsv file in python",
        "output": "",
        "rule": [
            "d6413"
        ]
    },
    {
        "instruction": "",
        "id": "q6414",
        "input": "python connect to postgresql database",
        "output": "",
        "rule": [
            "d6414"
        ]
    },
    {
        "instruction": "",
        "id": "q6415",
        "input": "wxpython add horizontal line",
        "output": "",
        "rule": [
            "d6415"
        ]
    },
    {
        "instruction": "",
        "id": "q6416",
        "input": "python construct parallel line segments",
        "output": "",
        "rule": [
            "d6416"
        ]
    },
    {
        "instruction": "",
        "id": "q6417",
        "input": "wxpython bitmap change image",
        "output": "",
        "rule": [
            "d6417"
        ]
    },
    {
        "instruction": "",
        "id": "q6418",
        "input": "python construct variable as dictionary",
        "output": "",
        "rule": [
            "d6418"
        ]
    },
    {
        "instruction": "",
        "id": "q6419",
        "input": "wxpython set background color of text",
        "output": "",
        "rule": [
            "d6419"
        ]
    },
    {
        "instruction": "",
        "id": "q6420",
        "input": "python contour spline interpolation",
        "output": "",
        "rule": [
            "d6420"
        ]
    },
    {
        "instruction": "",
        "id": "q6421",
        "input": "wxpython sizer add align",
        "output": "",
        "rule": [
            "d6421"
        ]
    },
    {
        "instruction": "",
        "id": "q6422",
        "input": "python convention underscore or capitalize",
        "output": "",
        "rule": [
            "d6422"
        ]
    },
    {
        "instruction": "",
        "id": "q6423",
        "input": "x , y coordinates with python grid",
        "output": "",
        "rule": [
            "d6423"
        ]
    },
    {
        "instruction": "",
        "id": "q6424",
        "input": "python conver int to date",
        "output": "",
        "rule": [
            "d6424"
        ]
    },
    {
        "instruction": "",
        "id": "q6425",
        "input": "x lim for subplots on python",
        "output": "",
        "rule": [
            "d6425"
        ]
    },
    {
        "instruction": "",
        "id": "q6426",
        "input": "python conver list str to float",
        "output": "",
        "rule": [
            "d6426"
        ]
    },
    {
        "instruction": "",
        "id": "q6427",
        "input": "x^2 fourier transform python mathematica",
        "output": "",
        "rule": [
            "d6427"
        ]
    },
    {
        "instruction": "",
        "id": "q6428",
        "input": "python conver to camelcase",
        "output": "",
        "rule": [
            "d6428"
        ]
    },
    {
        "instruction": "",
        "id": "q6429",
        "input": "xsd schema parsing in python",
        "output": "",
        "rule": [
            "d6429"
        ]
    },
    {
        "instruction": "",
        "id": "q6430",
        "input": "python convolution kernel to fuse boundary",
        "output": "",
        "rule": [
            "d6430"
        ]
    },
    {
        "instruction": "",
        "id": "q6431",
        "input": "yaml array values parsing in python",
        "output": "",
        "rule": [
            "d6431"
        ]
    },
    {
        "instruction": "",
        "id": "q6432",
        "input": "python convolution with gaussian",
        "output": "",
        "rule": [
            "d6432"
        ]
    },
    {
        "instruction": "",
        "id": "q6433",
        "input": "python convolve array and kernel",
        "output": "",
        "rule": [
            "d6433"
        ]
    },
    {
        "instruction": "",
        "id": "q6434",
        "input": "python copy cell to cell and limit length",
        "output": "",
        "rule": [
            "d6434"
        ]
    },
    {
        "instruction": "",
        "id": "q6435",
        "input": "python compile file to pyc",
        "output": "",
        "rule": [
            "d6435"
        ]
    },
    {
        "instruction": "",
        "id": "q6436",
        "input": "\"bytes to str\" python3",
        "output": "",
        "rule": [
            "d6436"
        ]
    },
    {
        "instruction": "",
        "id": "q6437",
        "input": "python compression string to gzip",
        "output": "",
        "rule": [
            "d6437"
        ]
    },
    {
        "instruction": "",
        "id": "q6438",
        "input": "\"python 3\" ssl has no attribute sslcontext",
        "output": "",
        "rule": [
            "d6438"
        ]
    },
    {
        "instruction": "",
        "id": "q6439",
        "input": "python compute greatest common divisor",
        "output": "",
        "rule": [
            "d6439"
        ]
    },
    {
        "instruction": "",
        "id": "q6440",
        "input": "python \"not in\" array",
        "output": "",
        "rule": [
            "d6440"
        ]
    },
    {
        "instruction": "",
        "id": "q6441",
        "input": "python compute hash of numpy array",
        "output": "",
        "rule": [
            "d6441"
        ]
    },
    {
        "instruction": "",
        "id": "q6442",
        "input": "python code on how to remove \"\" yaml dumper adds while writting into yaml file",
        "output": "",
        "rule": [
            "d6442"
        ]
    },
    {
        "instruction": "",
        "id": "q6443",
        "input": "python concat on different column names",
        "output": "",
        "rule": [
            "d6443"
        ]
    },
    {
        "instruction": "",
        "id": "q6444",
        "input": "python encode(\"base64\") carriage returns",
        "output": "",
        "rule": [
            "d6444"
        ]
    },
    {
        "instruction": "",
        "id": "q6445",
        "input": "python concat to datetime",
        "output": "",
        "rule": [
            "d6445"
        ]
    },
    {
        "instruction": "",
        "id": "q6446",
        "input": "12 bit image stored as uint16 map to uint8 python",
        "output": "",
        "rule": [
            "d6446"
        ]
    },
    {
        "instruction": "",
        "id": "q6447",
        "input": "2 grams python tokenize",
        "output": "",
        "rule": [
            "d6447"
        ]
    },
    {
        "instruction": "",
        "id": "q6448",
        "input": "python constant conform upper case",
        "output": "",
        "rule": [
            "d6448"
        ]
    },
    {
        "instruction": "",
        "id": "q6449",
        "input": "2d array of list in python",
        "output": "",
        "rule": [
            "d6449"
        ]
    },
    {
        "instruction": "",
        "id": "q6450",
        "input": "python constructor merge dict",
        "output": "",
        "rule": [
            "d6450"
        ]
    },
    {
        "instruction": "",
        "id": "q6451",
        "input": "2d arrays python access elements",
        "output": "",
        "rule": [
            "d6451"
        ]
    },
    {
        "instruction": "",
        "id": "q6452",
        "input": "python contains logicl test",
        "output": "",
        "rule": [
            "d6452"
        ]
    },
    {
        "instruction": "",
        "id": "q6453",
        "input": "2d convolution python numpy",
        "output": "",
        "rule": [
            "d6453"
        ]
    },
    {
        "instruction": "",
        "id": "q6454",
        "input": "python contour plot interpolation",
        "output": "",
        "rule": [
            "d6454"
        ]
    },
    {
        "instruction": "",
        "id": "q6455",
        "input": "3d line intersection python",
        "output": "",
        "rule": [
            "d6455"
        ]
    },
    {
        "instruction": "",
        "id": "q6456",
        "input": "python conver string date to date object",
        "output": "",
        "rule": [
            "d6456"
        ]
    },
    {
        "instruction": "",
        "id": "q6457",
        "input": "a comment in python is indicated by a",
        "output": "",
        "rule": [
            "d6457"
        ]
    },
    {
        "instruction": "",
        "id": "q6458",
        "input": "python converta series to percentage",
        "output": "",
        "rule": [
            "d6458"
        ]
    },
    {
        "instruction": "",
        "id": "q6459",
        "input": "python convolve gives bright spot in center of image",
        "output": "",
        "rule": [
            "d6459"
        ]
    },
    {
        "instruction": "",
        "id": "q6460",
        "input": "access column in python row cursor",
        "output": "",
        "rule": [
            "d6460"
        ]
    },
    {
        "instruction": "",
        "id": "q6461",
        "input": "python copy and replace file without asking",
        "output": "",
        "rule": [
            "d6461"
        ]
    },
    {
        "instruction": "",
        "id": "q6462",
        "input": "access first element of queue python",
        "output": "",
        "rule": [
            "d6462"
        ]
    },
    {
        "instruction": "",
        "id": "q6463",
        "input": "python copy array to ctypes array",
        "output": "",
        "rule": [
            "d6463"
        ]
    },
    {
        "instruction": "",
        "id": "q6464",
        "input": "access parent pointer python",
        "output": "",
        "rule": [
            "d6464"
        ]
    },
    {
        "instruction": "",
        "id": "q6465",
        "input": "python setuptools extra requirment",
        "output": "",
        "rule": [
            "d6465"
        ]
    },
    {
        "instruction": "",
        "id": "q6466",
        "input": "accessing input field in a form python flask",
        "output": "",
        "rule": [
            "d6466"
        ]
    },
    {
        "instruction": "",
        "id": "q6467",
        "input": "python count the frequency of a particular word in a text file",
        "output": "",
        "rule": [
            "d6467"
        ]
    },
    {
        "instruction": "",
        "id": "q6468",
        "input": "add 1 to a letter to increment it python",
        "output": "",
        "rule": [
            "d6468"
        ]
    },
    {
        "instruction": "",
        "id": "q6469",
        "input": "python count words in sentences",
        "output": "",
        "rule": [
            "d6469"
        ]
    },
    {
        "instruction": "",
        "id": "q6470",
        "input": "add a comma in python to a string",
        "output": "",
        "rule": [
            "d6470"
        ]
    },
    {
        "instruction": "",
        "id": "q6471",
        "input": "python covert datetime to timestamp",
        "output": "",
        "rule": [
            "d6471"
        ]
    },
    {
        "instruction": "",
        "id": "q6472",
        "input": "add conda python to environment variables",
        "output": "",
        "rule": [
            "d6472"
        ]
    },
    {
        "instruction": "",
        "id": "q6473",
        "input": "python covert namedtuple to unnamed",
        "output": "",
        "rule": [
            "d6473"
        ]
    },
    {
        "instruction": "",
        "id": "q6474",
        "input": "python create a hash value from a numpy array",
        "output": "",
        "rule": [
            "d6474"
        ]
    },
    {
        "instruction": "",
        "id": "q6475",
        "input": "add method to enum python",
        "output": "",
        "rule": [
            "d6475"
        ]
    },
    {
        "instruction": "",
        "id": "q6476",
        "input": "python create a logfile with date",
        "output": "",
        "rule": [
            "d6476"
        ]
    },
    {
        "instruction": "",
        "id": "q6477",
        "input": "add noise on image using python",
        "output": "",
        "rule": [
            "d6477"
        ]
    },
    {
        "instruction": "",
        "id": "q6478",
        "input": "python create a type from a type name",
        "output": "",
        "rule": [
            "d6478"
        ]
    },
    {
        "instruction": "",
        "id": "q6479",
        "input": "add standard deviations to graph python",
        "output": "",
        "rule": [
            "d6479"
        ]
    },
    {
        "instruction": "",
        "id": "q6480",
        "input": "python create array from bytes",
        "output": "",
        "rule": [
            "d6480"
        ]
    },
    {
        "instruction": "",
        "id": "q6481",
        "input": "python create blank column in df",
        "output": "",
        "rule": [
            "d6481"
        ]
    },
    {
        "instruction": "",
        "id": "q6482",
        "input": "add text im image in python",
        "output": "",
        "rule": [
            "d6482"
        ]
    },
    {
        "instruction": "",
        "id": "q6483",
        "input": "python create column as dictionary",
        "output": "",
        "rule": [
            "d6483"
        ]
    },
    {
        "instruction": "",
        "id": "q6484",
        "input": "add update merge comncatentate two dictionaries python",
        "output": "",
        "rule": [
            "d6484"
        ]
    },
    {
        "instruction": "",
        "id": "q6485",
        "input": "python create directory and any missing parent directories",
        "output": "",
        "rule": [
            "d6485"
        ]
    },
    {
        "instruction": "",
        "id": "q6486",
        "input": "adding multiple spaces between characters in a string python",
        "output": "",
        "rule": [
            "d6486"
        ]
    },
    {
        "instruction": "",
        "id": "q6487",
        "input": "python create directory parent",
        "output": "",
        "rule": [
            "d6487"
        ]
    },
    {
        "instruction": "",
        "id": "q6488",
        "input": "adding python code in html",
        "output": "",
        "rule": [
            "d6488"
        ]
    },
    {
        "instruction": "",
        "id": "q6489",
        "input": "python create enum type at runtime",
        "output": "",
        "rule": [
            "d6489"
        ]
    },
    {
        "instruction": "",
        "id": "q6490",
        "input": "adding vertices to a digraph in python",
        "output": "",
        "rule": [
            "d6490"
        ]
    },
    {
        "instruction": "",
        "id": "q6491",
        "input": "python create hash of a file",
        "output": "",
        "rule": [
            "d6491"
        ]
    },
    {
        "instruction": "",
        "id": "q6492",
        "input": "adjust column width table python",
        "output": "",
        "rule": [
            "d6492"
        ]
    },
    {
        "instruction": "",
        "id": "q6493",
        "input": "python create key name from variable",
        "output": "",
        "rule": [
            "d6493"
        ]
    },
    {
        "instruction": "",
        "id": "q6494",
        "input": "adjust time zone python",
        "output": "",
        "rule": [
            "d6494"
        ]
    },
    {
        "instruction": "",
        "id": "q6495",
        "input": "python create list from comma delimeted string",
        "output": "",
        "rule": [
            "d6495"
        ]
    },
    {
        "instruction": "",
        "id": "q6496",
        "input": "anaconda python 3 tensorflow",
        "output": "",
        "rule": [
            "d6496"
        ]
    },
    {
        "instruction": "",
        "id": "q6497",
        "input": "angle between two vectors python",
        "output": "",
        "rule": [
            "d6497"
        ]
    },
    {
        "instruction": "",
        "id": "q6498",
        "input": "python create random sparse matrix",
        "output": "",
        "rule": [
            "d6498"
        ]
    },
    {
        "instruction": "",
        "id": "q6499",
        "input": "append to end of line in file python",
        "output": "",
        "rule": [
            "d6499"
        ]
    },
    {
        "instruction": "",
        "id": "q6500",
        "input": "appending and saving images in one pdf python",
        "output": "",
        "rule": [
            "d6500"
        ]
    },
    {
        "instruction": "",
        "id": "q6501",
        "input": "python creating a directory path",
        "output": "",
        "rule": [
            "d6501"
        ]
    },
    {
        "instruction": "",
        "id": "q6502",
        "input": "apply function to a column in a table python",
        "output": "",
        "rule": [
            "d6502"
        ]
    },
    {
        "instruction": "",
        "id": "q6503",
        "input": "python csv print raw",
        "output": "",
        "rule": [
            "d6503"
        ]
    },
    {
        "instruction": "",
        "id": "q6504",
        "input": "are arange and linspace equivalent in python",
        "output": "",
        "rule": [
            "d6504"
        ]
    },
    {
        "instruction": "",
        "id": "q6505",
        "input": "python ctype pointer to offset",
        "output": "",
        "rule": [
            "d6505"
        ]
    },
    {
        "instruction": "",
        "id": "q6506",
        "input": "python ctype return array with unknown length",
        "output": "",
        "rule": [
            "d6506"
        ]
    },
    {
        "instruction": "",
        "id": "q6507",
        "input": "ascii to hex converter in python",
        "output": "",
        "rule": [
            "d6507"
        ]
    },
    {
        "instruction": "",
        "id": "q6508",
        "input": "python ctypes byte buffer",
        "output": "",
        "rule": [
            "d6508"
        ]
    },
    {
        "instruction": "",
        "id": "q6509",
        "input": "assert match any value in python",
        "output": "",
        "rule": [
            "d6509"
        ]
    },
    {
        "instruction": "",
        "id": "q6510",
        "input": "python ctypes callback function",
        "output": "",
        "rule": [
            "d6510"
        ]
    },
    {
        "instruction": "",
        "id": "q6511",
        "input": "asyncio python open file",
        "output": "",
        "rule": [
            "d6511"
        ]
    },
    {
        "instruction": "",
        "id": "q6512",
        "input": "python ctypes copy string into buffer",
        "output": "",
        "rule": [
            "d6512"
        ]
    },
    {
        "instruction": "",
        "id": "q6513",
        "input": "automatic logout from a script in php or python",
        "output": "",
        "rule": [
            "d6513"
        ]
    },
    {
        "instruction": "",
        "id": "q6514",
        "input": "python ctypes pointer to pointer and initialize",
        "output": "",
        "rule": [
            "d6514"
        ]
    },
    {
        "instruction": "",
        "id": "q6515",
        "input": "automaticly back to the previous page in python",
        "output": "",
        "rule": [
            "d6515"
        ]
    },
    {
        "instruction": "",
        "id": "q6516",
        "input": "python ctypes type without pointer",
        "output": "",
        "rule": [
            "d6516"
        ]
    },
    {
        "instruction": "",
        "id": "q6517",
        "input": "average intensity of image python stacke overflow",
        "output": "",
        "rule": [
            "d6517"
        ]
    },
    {
        "instruction": "",
        "id": "q6518",
        "input": "python ctypes, pointer to array",
        "output": "",
        "rule": [
            "d6518"
        ]
    },
    {
        "instruction": "",
        "id": "q6519",
        "input": "aws python save files to s3 bucket",
        "output": "",
        "rule": [
            "d6519"
        ]
    },
    {
        "instruction": "",
        "id": "q6520",
        "input": "python current utc date time",
        "output": "",
        "rule": [
            "d6520"
        ]
    },
    {
        "instruction": "",
        "id": "q6521",
        "input": "aws s3 list all objects in a bucket python",
        "output": "",
        "rule": [
            "d6521"
        ]
    },
    {
        "instruction": "",
        "id": "q6522",
        "input": "python cv2 get frame size",
        "output": "",
        "rule": [
            "d6522"
        ]
    },
    {
        "instruction": "",
        "id": "q6523",
        "input": "azure blob storage check if blob exists python",
        "output": "",
        "rule": [
            "d6523"
        ]
    },
    {
        "instruction": "",
        "id": "q6524",
        "input": "python data frame setvalue",
        "output": "",
        "rule": [
            "d6524"
        ]
    },
    {
        "instruction": "",
        "id": "q6525",
        "input": "b' b python to string",
        "output": "",
        "rule": [
            "d6525"
        ]
    },
    {
        "instruction": "",
        "id": "q6526",
        "input": "python date minus weeks",
        "output": "",
        "rule": [
            "d6526"
        ]
    },
    {
        "instruction": "",
        "id": "q6527",
        "input": "best python approach to check for finding similarity of sentences",
        "output": "",
        "rule": [
            "d6527"
        ]
    },
    {
        "instruction": "",
        "id": "q6528",
        "input": "python date object year only",
        "output": "",
        "rule": [
            "d6528"
        ]
    },
    {
        "instruction": "",
        "id": "q6529",
        "input": "best way to traverse a directory in python",
        "output": "",
        "rule": [
            "d6529"
        ]
    },
    {
        "instruction": "",
        "id": "q6530",
        "input": "python date to begin of month",
        "output": "",
        "rule": [
            "d6530"
        ]
    },
    {
        "instruction": "",
        "id": "q6531",
        "input": "best xml parser in python for huge files",
        "output": "",
        "rule": [
            "d6531"
        ]
    },
    {
        "instruction": "",
        "id": "q6532",
        "input": "python datetime add weeks to date",
        "output": "",
        "rule": [
            "d6532"
        ]
    },
    {
        "instruction": "",
        "id": "q6533",
        "input": "boolean of a string python",
        "output": "",
        "rule": [
            "d6533"
        ]
    },
    {
        "instruction": "",
        "id": "q6534",
        "input": "python datetime as integer json decoder",
        "output": "",
        "rule": [
            "d6534"
        ]
    },
    {
        "instruction": "",
        "id": "q6535",
        "input": "boto3 athena python pagination",
        "output": "",
        "rule": [
            "d6535"
        ]
    },
    {
        "instruction": "",
        "id": "q6536",
        "input": "python datetime aware or naive",
        "output": "",
        "rule": [
            "d6536"
        ]
    },
    {
        "instruction": "",
        "id": "q6537",
        "input": "c call python dependencies",
        "output": "",
        "rule": [
            "d6537"
        ]
    },
    {
        "instruction": "",
        "id": "q6538",
        "input": "python datetime make date from string",
        "output": "",
        "rule": [
            "d6538"
        ]
    },
    {
        "instruction": "",
        "id": "q6539",
        "input": "calculat the angle between two points in python",
        "output": "",
        "rule": [
            "d6539"
        ]
    },
    {
        "instruction": "",
        "id": "q6540",
        "input": "python datetime timestamp microseconds",
        "output": "",
        "rule": [
            "d6540"
        ]
    },
    {
        "instruction": "",
        "id": "q6541",
        "input": "calculate 25 50 75 percentile in python",
        "output": "",
        "rule": [
            "d6541"
        ]
    },
    {
        "instruction": "",
        "id": "q6542",
        "input": "python dds to numpyarray",
        "output": "",
        "rule": [
            "d6542"
        ]
    },
    {
        "instruction": "",
        "id": "q6543",
        "input": "calculate accuracy rate python between labels",
        "output": "",
        "rule": [
            "d6543"
        ]
    },
    {
        "instruction": "",
        "id": "q6544",
        "input": "python decimal strip trailing zeros",
        "output": "",
        "rule": [
            "d6544"
        ]
    },
    {
        "instruction": "",
        "id": "q6545",
        "input": "calculate the average price of an order using python",
        "output": "",
        "rule": [
            "d6545"
        ]
    },
    {
        "instruction": "",
        "id": "q6546",
        "input": "python decision tree scikit learn",
        "output": "",
        "rule": [
            "d6546"
        ]
    },
    {
        "instruction": "",
        "id": "q6547",
        "input": "calculate time delta python",
        "output": "",
        "rule": [
            "d6547"
        ]
    },
    {
        "instruction": "",
        "id": "q6548",
        "input": "python decode byte string var",
        "output": "",
        "rule": [
            "d6548"
        ]
    },
    {
        "instruction": "",
        "id": "q6549",
        "input": "call a function every few seconds python",
        "output": "",
        "rule": [
            "d6549"
        ]
    },
    {
        "instruction": "",
        "id": "q6550",
        "input": "python deep copy instance",
        "output": "",
        "rule": [
            "d6550"
        ]
    },
    {
        "instruction": "",
        "id": "q6551",
        "input": "call javascript variable from python",
        "output": "",
        "rule": [
            "d6551"
        ]
    },
    {
        "instruction": "",
        "id": "q6552",
        "input": "python def list of list of string",
        "output": "",
        "rule": [
            "d6552"
        ]
    },
    {
        "instruction": "",
        "id": "q6553",
        "input": "call python compiled file",
        "output": "",
        "rule": [
            "d6553"
        ]
    },
    {
        "instruction": "",
        "id": "q6554",
        "input": "camelcase to underscore python",
        "output": "",
        "rule": [
            "d6554"
        ]
    },
    {
        "instruction": "",
        "id": "q6555",
        "input": "python default param not recognized as string",
        "output": "",
        "rule": [
            "d6555"
        ]
    },
    {
        "instruction": "",
        "id": "q6556",
        "input": "can array in python is strings",
        "output": "",
        "rule": [
            "d6556"
        ]
    },
    {
        "instruction": "",
        "id": "q6557",
        "input": "python default value is mutable set",
        "output": "",
        "rule": [
            "d6557"
        ]
    },
    {
        "instruction": "",
        "id": "q6558",
        "input": "can ints have decimals in python",
        "output": "",
        "rule": [
            "d6558"
        ]
    },
    {
        "instruction": "",
        "id": "q6559",
        "input": "python defining a varible as global from a function",
        "output": "",
        "rule": [
            "d6559"
        ]
    },
    {
        "instruction": "",
        "id": "q6560",
        "input": "can javascript call python serverside",
        "output": "",
        "rule": [
            "d6560"
        ]
    },
    {
        "instruction": "",
        "id": "q6561",
        "input": "python del whole namespace",
        "output": "",
        "rule": [
            "d6561"
        ]
    },
    {
        "instruction": "",
        "id": "q6562",
        "input": "can python pickle read a manually created file",
        "output": "",
        "rule": [
            "d6562"
        ]
    },
    {
        "instruction": "",
        "id": "q6563",
        "input": "python delete duplicate in string list",
        "output": "",
        "rule": [
            "d6563"
        ]
    },
    {
        "instruction": "",
        "id": "q6564",
        "input": "can you index into a dictionary python",
        "output": "",
        "rule": [
            "d6564"
        ]
    },
    {
        "instruction": "",
        "id": "q6565",
        "input": "python delete files and folders",
        "output": "",
        "rule": [
            "d6565"
        ]
    },
    {
        "instruction": "",
        "id": "q6566",
        "input": "can you return a tuple in python",
        "output": "",
        "rule": [
            "d6566"
        ]
    },
    {
        "instruction": "",
        "id": "q6567",
        "input": "python delete if it exists",
        "output": "",
        "rule": [
            "d6567"
        ]
    },
    {
        "instruction": "",
        "id": "q6568",
        "input": "can you split in python based on specific characters",
        "output": "",
        "rule": [
            "d6568"
        ]
    },
    {
        "instruction": "",
        "id": "q6569",
        "input": "python delete instance in a list",
        "output": "",
        "rule": [
            "d6569"
        ]
    },
    {
        "instruction": "",
        "id": "q6570",
        "input": "can you split parts of a string in python",
        "output": "",
        "rule": [
            "d6570"
        ]
    },
    {
        "instruction": "",
        "id": "q6571",
        "input": "python delete keys from dictionary is value none",
        "output": "",
        "rule": [
            "d6571"
        ]
    },
    {
        "instruction": "",
        "id": "q6572",
        "input": "cant change permissions of a file from python",
        "output": "",
        "rule": [
            "d6572"
        ]
    },
    {
        "instruction": "",
        "id": "q6573",
        "input": "python detect if file is symbolic link",
        "output": "",
        "rule": [
            "d6573"
        ]
    },
    {
        "instruction": "",
        "id": "q6574",
        "input": "cant make file with python makedir",
        "output": "",
        "rule": [
            "d6574"
        ]
    },
    {
        "instruction": "",
        "id": "q6575",
        "input": "python detect if linux or windows",
        "output": "",
        "rule": [
            "d6575"
        ]
    },
    {
        "instruction": "",
        "id": "q6576",
        "input": "capitalize list items + python",
        "output": "",
        "rule": [
            "d6576"
        ]
    },
    {
        "instruction": "",
        "id": "q6577",
        "input": "python detect windows or mac",
        "output": "",
        "rule": [
            "d6577"
        ]
    },
    {
        "instruction": "",
        "id": "q6578",
        "input": "capture changes datatable bokeh python",
        "output": "",
        "rule": [
            "d6578"
        ]
    },
    {
        "instruction": "",
        "id": "q6579",
        "input": "python determine if a string contains unique characters",
        "output": "",
        "rule": [
            "d6579"
        ]
    },
    {
        "instruction": "",
        "id": "q6580",
        "input": "capturing return values from a python subprocess call",
        "output": "",
        "rule": [
            "d6580"
        ]
    },
    {
        "instruction": "",
        "id": "q6581",
        "input": "python determine if interactive or not",
        "output": "",
        "rule": [
            "d6581"
        ]
    },
    {
        "instruction": "",
        "id": "q6582",
        "input": "cast a string to bool python",
        "output": "",
        "rule": [
            "d6582"
        ]
    },
    {
        "instruction": "",
        "id": "q6583",
        "input": "cast boolean to 1 or 0 python",
        "output": "",
        "rule": [
            "d6583"
        ]
    },
    {
        "instruction": "",
        "id": "q6584",
        "input": "python dict beautify string",
        "output": "",
        "rule": [
            "d6584"
        ]
    },
    {
        "instruction": "",
        "id": "q6585",
        "input": "cast list as csv python",
        "output": "",
        "rule": [
            "d6585"
        ]
    },
    {
        "instruction": "",
        "id": "q6586",
        "input": "python dict get value default key not exist none",
        "output": "",
        "rule": [
            "d6586"
        ]
    },
    {
        "instruction": "",
        "id": "q6587",
        "input": "cast to byte in python",
        "output": "",
        "rule": [
            "d6587"
        ]
    },
    {
        "instruction": "",
        "id": "q6588",
        "input": "python dict remove empty values",
        "output": "",
        "rule": [
            "d6588"
        ]
    },
    {
        "instruction": "",
        "id": "q6589",
        "input": "cehcking if string is custom date python",
        "output": "",
        "rule": [
            "d6589"
        ]
    },
    {
        "instruction": "",
        "id": "q6590",
        "input": "python dictionary get first element of a dictionary",
        "output": "",
        "rule": [
            "d6590"
        ]
    },
    {
        "instruction": "",
        "id": "q6591",
        "input": "change an object to a datetime python",
        "output": "",
        "rule": [
            "d6591"
        ]
    },
    {
        "instruction": "",
        "id": "q6592",
        "input": "python dictionary to eliminate words",
        "output": "",
        "rule": [
            "d6592"
        ]
    },
    {
        "instruction": "",
        "id": "q6593",
        "input": "change array into string python",
        "output": "",
        "rule": [
            "d6593"
        ]
    },
    {
        "instruction": "",
        "id": "q6594",
        "input": "python dictionary value change copy",
        "output": "",
        "rule": [
            "d6594"
        ]
    },
    {
        "instruction": "",
        "id": "q6595",
        "input": "change filenames to lowercase python",
        "output": "",
        "rule": [
            "d6595"
        ]
    },
    {
        "instruction": "",
        "id": "q6596",
        "input": "python disable keyboardinterrupt during procedure",
        "output": "",
        "rule": [
            "d6596"
        ]
    },
    {
        "instruction": "",
        "id": "q6597",
        "input": "change from timestamp to datetime python",
        "output": "",
        "rule": [
            "d6597"
        ]
    },
    {
        "instruction": "",
        "id": "q6598",
        "input": "python disable stdout line buffering",
        "output": "",
        "rule": [
            "d6598"
        ]
    },
    {
        "instruction": "",
        "id": "q6599",
        "input": "change height and width of an image in python",
        "output": "",
        "rule": [
            "d6599"
        ]
    },
    {
        "instruction": "",
        "id": "q6600",
        "input": "change label of treemap from code to names using squarify in python",
        "output": "",
        "rule": [
            "d6600"
        ]
    },
    {
        "instruction": "",
        "id": "q6601",
        "input": "python display local timezone",
        "output": "",
        "rule": [
            "d6601"
        ]
    },
    {
        "instruction": "",
        "id": "q6602",
        "input": "change permissions on file python",
        "output": "",
        "rule": [
            "d6602"
        ]
    },
    {
        "instruction": "",
        "id": "q6603",
        "input": "python distance matrix fucntion",
        "output": "",
        "rule": [
            "d6603"
        ]
    },
    {
        "instruction": "",
        "id": "q6604",
        "input": "change python dict string to values",
        "output": "",
        "rule": [
            "d6604"
        ]
    },
    {
        "instruction": "",
        "id": "q6605",
        "input": "change rgb to graysclae with 3 value in python",
        "output": "",
        "rule": [
            "d6605"
        ]
    },
    {
        "instruction": "",
        "id": "q6606",
        "input": "python django static pictures in settings",
        "output": "",
        "rule": [
            "d6606"
        ]
    },
    {
        "instruction": "",
        "id": "q6607",
        "input": "change shape of list in python",
        "output": "",
        "rule": [
            "d6607"
        ]
    },
    {
        "instruction": "",
        "id": "q6608",
        "input": "python django test 1090 you cant delete all columns",
        "output": "",
        "rule": [
            "d6608"
        ]
    },
    {
        "instruction": "",
        "id": "q6609",
        "input": "change sparse matrix datatype to python",
        "output": "",
        "rule": [
            "d6609"
        ]
    },
    {
        "instruction": "",
        "id": "q6610",
        "input": "python django using ftp connection",
        "output": "",
        "rule": [
            "d6610"
        ]
    },
    {
        "instruction": "",
        "id": "q6611",
        "input": "change string column to date python",
        "output": "",
        "rule": [
            "d6611"
        ]
    },
    {
        "instruction": "",
        "id": "q6612",
        "input": "python do something if not interactive",
        "output": "",
        "rule": [
            "d6612"
        ]
    },
    {
        "instruction": "",
        "id": "q6613",
        "input": "python docker postgresql connect",
        "output": "",
        "rule": [
            "d6613"
        ]
    },
    {
        "instruction": "",
        "id": "q6614",
        "input": "change to factor in python",
        "output": "",
        "rule": [
            "d6614"
        ]
    },
    {
        "instruction": "",
        "id": "q6615",
        "input": "python docstring for abstractmethod",
        "output": "",
        "rule": [
            "d6615"
        ]
    },
    {
        "instruction": "",
        "id": "q6616",
        "input": "change to int64 data type python",
        "output": "",
        "rule": [
            "d6616"
        ]
    },
    {
        "instruction": "",
        "id": "q6617",
        "input": "python docstring restructured text example",
        "output": "",
        "rule": [
            "d6617"
        ]
    },
    {
        "instruction": "",
        "id": "q6618",
        "input": "changing precision in decimal function in python",
        "output": "",
        "rule": [
            "d6618"
        ]
    },
    {
        "instruction": "",
        "id": "q6619",
        "input": "python docx add sections",
        "output": "",
        "rule": [
            "d6619"
        ]
    },
    {
        "instruction": "",
        "id": "q6620",
        "input": "changing python locale settings",
        "output": "",
        "rule": [
            "d6620"
        ]
    },
    {
        "instruction": "",
        "id": "q6621",
        "input": "python docx template filled but still editable",
        "output": "",
        "rule": [
            "d6621"
        ]
    },
    {
        "instruction": "",
        "id": "q6622",
        "input": "changing width and height of tk in python",
        "output": "",
        "rule": [
            "d6622"
        ]
    },
    {
        "instruction": "",
        "id": "q6623",
        "input": "python downsample 3d array",
        "output": "",
        "rule": [
            "d6623"
        ]
    },
    {
        "instruction": "",
        "id": "q6624",
        "input": "character encoding detector python",
        "output": "",
        "rule": [
            "d6624"
        ]
    },
    {
        "instruction": "",
        "id": "q6625",
        "input": "python drop mongo collections if exist",
        "output": "",
        "rule": [
            "d6625"
        ]
    },
    {
        "instruction": "",
        "id": "q6626",
        "input": "check if 2 values are approximetly equal python",
        "output": "",
        "rule": [
            "d6626"
        ]
    },
    {
        "instruction": "",
        "id": "q6627",
        "input": "python dump string pretty",
        "output": "",
        "rule": [
            "d6627"
        ]
    },
    {
        "instruction": "",
        "id": "q6628",
        "input": "check if a keyword is in a list of strings in python",
        "output": "",
        "rule": [
            "d6628"
        ]
    },
    {
        "instruction": "",
        "id": "q6629",
        "input": "python dynamic code loading",
        "output": "",
        "rule": [
            "d6629"
        ]
    },
    {
        "instruction": "",
        "id": "q6630",
        "input": "check if a number is complex in python",
        "output": "",
        "rule": [
            "d6630"
        ]
    },
    {
        "instruction": "",
        "id": "q6631",
        "input": "python dynamically set a method name",
        "output": "",
        "rule": [
            "d6631"
        ]
    },
    {
        "instruction": "",
        "id": "q6632",
        "input": "check if a number is complex python",
        "output": "",
        "rule": [
            "d6632"
        ]
    },
    {
        "instruction": "",
        "id": "q6633",
        "input": "python easygui window freeze on closing",
        "output": "",
        "rule": [
            "d6633"
        ]
    },
    {
        "instruction": "",
        "id": "q6634",
        "input": "check if a property is null python",
        "output": "",
        "rule": [
            "d6634"
        ]
    },
    {
        "instruction": "",
        "id": "q6635",
        "input": "python elasticsearch api scroll",
        "output": "",
        "rule": [
            "d6635"
        ]
    },
    {
        "instruction": "",
        "id": "q6636",
        "input": "check if a word contains punctuation python",
        "output": "",
        "rule": [
            "d6636"
        ]
    },
    {
        "instruction": "",
        "id": "q6637",
        "input": "python elasticsearch delete field",
        "output": "",
        "rule": [
            "d6637"
        ]
    },
    {
        "instruction": "",
        "id": "q6638",
        "input": "check if all variables in array are integers python",
        "output": "",
        "rule": [
            "d6638"
        ]
    },
    {
        "instruction": "",
        "id": "q6639",
        "input": "check if an item is not none python",
        "output": "",
        "rule": [
            "d6639"
        ]
    },
    {
        "instruction": "",
        "id": "q6640",
        "input": "python element wises addition",
        "output": "",
        "rule": [
            "d6640"
        ]
    },
    {
        "instruction": "",
        "id": "q6641",
        "input": "check if authentication failed with requests in python",
        "output": "",
        "rule": [
            "d6641"
        ]
    },
    {
        "instruction": "",
        "id": "q6642",
        "input": "python elementtree get value by id",
        "output": "",
        "rule": [
            "d6642"
        ]
    },
    {
        "instruction": "",
        "id": "q6643",
        "input": "check if boolean in python",
        "output": "",
        "rule": [
            "d6643"
        ]
    },
    {
        "instruction": "",
        "id": "q6644",
        "input": "python embed parent into child",
        "output": "",
        "rule": [
            "d6644"
        ]
    },
    {
        "instruction": "",
        "id": "q6645",
        "input": "check if column exists python",
        "output": "",
        "rule": [
            "d6645"
        ]
    },
    {
        "instruction": "",
        "id": "q6646",
        "input": "python empty string check nothing",
        "output": "",
        "rule": [
            "d6646"
        ]
    },
    {
        "instruction": "",
        "id": "q6647",
        "input": "check if domain is valid python",
        "output": "",
        "rule": [
            "d6647"
        ]
    },
    {
        "instruction": "",
        "id": "q6648",
        "input": "python enum for type checking",
        "output": "",
        "rule": [
            "d6648"
        ]
    },
    {
        "instruction": "",
        "id": "q6649",
        "input": "check if element of a list is null python list",
        "output": "",
        "rule": [
            "d6649"
        ]
    },
    {
        "instruction": "",
        "id": "q6650",
        "input": "python enum value name",
        "output": "",
        "rule": [
            "d6650"
        ]
    },
    {
        "instruction": "",
        "id": "q6651",
        "input": "check if get request is 200 python",
        "output": "",
        "rule": [
            "d6651"
        ]
    },
    {
        "instruction": "",
        "id": "q6652",
        "input": "python enumerate enum values",
        "output": "",
        "rule": [
            "d6652"
        ]
    },
    {
        "instruction": "",
        "id": "q6653",
        "input": "check if it is a string or not python",
        "output": "",
        "rule": [
            "d6653"
        ]
    },
    {
        "instruction": "",
        "id": "q6654",
        "input": "python escape string in query postgres",
        "output": "",
        "rule": [
            "d6654"
        ]
    },
    {
        "instruction": "",
        "id": "q6655",
        "input": "check if matrix is float python",
        "output": "",
        "rule": [
            "d6655"
        ]
    },
    {
        "instruction": "",
        "id": "q6656",
        "input": "python exchange get user email by id",
        "output": "",
        "rule": [
            "d6656"
        ]
    },
    {
        "instruction": "",
        "id": "q6657",
        "input": "check if object is callable in python",
        "output": "",
        "rule": [
            "d6657"
        ]
    },
    {
        "instruction": "",
        "id": "q6658",
        "input": "python exclude key from dictionary",
        "output": "",
        "rule": [
            "d6658"
        ]
    },
    {
        "instruction": "",
        "id": "q6659",
        "input": "check if python var is int",
        "output": "",
        "rule": [
            "d6659"
        ]
    },
    {
        "instruction": "",
        "id": "q6660",
        "input": "python expand to absulate path",
        "output": "",
        "rule": [
            "d6660"
        ]
    },
    {
        "instruction": "",
        "id": "q6661",
        "input": "check if singular matrix python",
        "output": "",
        "rule": [
            "d6661"
        ]
    },
    {
        "instruction": "",
        "id": "q6662",
        "input": "python expandvars replace non defined with empty string",
        "output": "",
        "rule": [
            "d6662"
        ]
    },
    {
        "instruction": "",
        "id": "q6663",
        "input": "check if two files are the same python",
        "output": "",
        "rule": [
            "d6663"
        ]
    },
    {
        "instruction": "",
        "id": "q6664",
        "input": "python expected type 'str', got 'bytes' instead",
        "output": "",
        "rule": [
            "d6664"
        ]
    },
    {
        "instruction": "",
        "id": "q6665",
        "input": "check if two string is same python",
        "output": "",
        "rule": [
            "d6665"
        ]
    },
    {
        "instruction": "",
        "id": "q6666",
        "input": "python express the normal distribution pdf",
        "output": "",
        "rule": [
            "d6666"
        ]
    },
    {
        "instruction": "",
        "id": "q6667",
        "input": "check is end of file reached python",
        "output": "",
        "rule": [
            "d6667"
        ]
    },
    {
        "instruction": "",
        "id": "q6668",
        "input": "python extract 5 pages from pdf",
        "output": "",
        "rule": [
            "d6668"
        ]
    },
    {
        "instruction": "",
        "id": "q6669",
        "input": "check the number of cores in a computer python",
        "output": "",
        "rule": [
            "d6669"
        ]
    },
    {
        "instruction": "",
        "id": "q6670",
        "input": "python extract url domain",
        "output": "",
        "rule": [
            "d6670"
        ]
    },
    {
        "instruction": "",
        "id": "q6671",
        "input": "check the type of a str python",
        "output": "",
        "rule": [
            "d6671"
        ]
    },
    {
        "instruction": "",
        "id": "q6672",
        "input": "python extract zip path too long",
        "output": "",
        "rule": [
            "d6672"
        ]
    },
    {
        "instruction": "",
        "id": "q6673",
        "input": "check variable type in python as double",
        "output": "",
        "rule": [
            "d6673"
        ]
    },
    {
        "instruction": "",
        "id": "q6674",
        "input": "python fabric verbose logging",
        "output": "",
        "rule": [
            "d6674"
        ]
    },
    {
        "instruction": "",
        "id": "q6675",
        "input": "check vert in 2d list python",
        "output": "",
        "rule": [
            "d6675"
        ]
    },
    {
        "instruction": "",
        "id": "q6676",
        "input": "python factorials using n!",
        "output": "",
        "rule": [
            "d6676"
        ]
    },
    {
        "instruction": "",
        "id": "q6677",
        "input": "check whether a string match a regex in python",
        "output": "",
        "rule": [
            "d6677"
        ]
    },
    {
        "instruction": "",
        "id": "q6678",
        "input": "python faled to get appdata path",
        "output": "",
        "rule": [
            "d6678"
        ]
    },
    {
        "instruction": "",
        "id": "q6679",
        "input": "check whether input is integer or not python",
        "output": "",
        "rule": [
            "d6679"
        ]
    },
    {
        "instruction": "",
        "id": "q6680",
        "input": "python fast way to get random sample from list",
        "output": "",
        "rule": [
            "d6680"
        ]
    },
    {
        "instruction": "",
        "id": "q6681",
        "input": "check whether two images is same or not python",
        "output": "",
        "rule": [
            "d6681"
        ]
    },
    {
        "instruction": "",
        "id": "q6682",
        "input": "python fastest way to filter images",
        "output": "",
        "rule": [
            "d6682"
        ]
    },
    {
        "instruction": "",
        "id": "q6683",
        "input": "checking a url code in python",
        "output": "",
        "rule": [
            "d6683"
        ]
    },
    {
        "instruction": "",
        "id": "q6684",
        "input": "python fetch file from remote server",
        "output": "",
        "rule": [
            "d6684"
        ]
    },
    {
        "instruction": "",
        "id": "q6685",
        "input": "checking if variable is a number type in python",
        "output": "",
        "rule": [
            "d6685"
        ]
    },
    {
        "instruction": "",
        "id": "q6686",
        "input": "python fft is giving me fraction frequencies and i want integer frequencies",
        "output": "",
        "rule": [
            "d6686"
        ]
    },
    {
        "instruction": "",
        "id": "q6687",
        "input": "checking objects for equality python",
        "output": "",
        "rule": [
            "d6687"
        ]
    },
    {
        "instruction": "",
        "id": "q6688",
        "input": "python fft takes long time",
        "output": "",
        "rule": [
            "d6688"
        ]
    },
    {
        "instruction": "",
        "id": "q6689",
        "input": "checking the memory occupied by an object in python",
        "output": "",
        "rule": [
            "d6689"
        ]
    },
    {
        "instruction": "",
        "id": "q6690",
        "input": "python fft with non constant sampling time",
        "output": "",
        "rule": [
            "d6690"
        ]
    },
    {
        "instruction": "",
        "id": "q6691",
        "input": "chek if type list python",
        "output": "",
        "rule": [
            "d6691"
        ]
    },
    {
        "instruction": "",
        "id": "q6692",
        "input": "python fftt low pass filter",
        "output": "",
        "rule": [
            "d6692"
        ]
    },
    {
        "instruction": "",
        "id": "q6693",
        "input": "choose 75 percentile of a list python",
        "output": "",
        "rule": [
            "d6693"
        ]
    },
    {
        "instruction": "",
        "id": "q6694",
        "input": "python file auto flush",
        "output": "",
        "rule": [
            "d6694"
        ]
    },
    {
        "instruction": "",
        "id": "q6695",
        "input": "clean illegal characters in text python code",
        "output": "",
        "rule": [
            "d6695"
        ]
    },
    {
        "instruction": "",
        "id": "q6696",
        "input": "python file check if writable",
        "output": "",
        "rule": [
            "d6696"
        ]
    },
    {
        "instruction": "",
        "id": "q6697",
        "input": "clear a canvas python",
        "output": "",
        "rule": [
            "d6697"
        ]
    },
    {
        "instruction": "",
        "id": "q6698",
        "input": "python file line iter",
        "output": "",
        "rule": [
            "d6698"
        ]
    },
    {
        "instruction": "",
        "id": "q6699",
        "input": "clear all stored variable in python",
        "output": "",
        "rule": [
            "d6699"
        ]
    },
    {
        "instruction": "",
        "id": "q6700",
        "input": "python file open flag",
        "output": "",
        "rule": [
            "d6700"
        ]
    },
    {
        "instruction": "",
        "id": "q6701",
        "input": "clear all variable python",
        "output": "",
        "rule": [
            "d6701"
        ]
    },
    {
        "instruction": "",
        "id": "q6702",
        "input": "python file pointer reset back to begining of file",
        "output": "",
        "rule": [
            "d6702"
        ]
    },
    {
        "instruction": "",
        "id": "q6703",
        "input": "clearing python memory during a for loop",
        "output": "",
        "rule": [
            "d6703"
        ]
    },
    {
        "instruction": "",
        "id": "q6704",
        "input": "python filename fromm url",
        "output": "",
        "rule": [
            "d6704"
        ]
    },
    {
        "instruction": "",
        "id": "q6705",
        "input": "close all figures python",
        "output": "",
        "rule": [
            "d6705"
        ]
    },
    {
        "instruction": "",
        "id": "q6706",
        "input": "python fill an array with a list",
        "output": "",
        "rule": [
            "d6706"
        ]
    },
    {
        "instruction": "",
        "id": "q6707",
        "input": "python fillna with other columns values",
        "output": "",
        "rule": [
            "d6707"
        ]
    },
    {
        "instruction": "",
        "id": "q6708",
        "input": "column stack every item in a list of lists python",
        "output": "",
        "rule": [
            "d6708"
        ]
    },
    {
        "instruction": "",
        "id": "q6709",
        "input": "python filter data in a data frame",
        "output": "",
        "rule": [
            "d6709"
        ]
    },
    {
        "instruction": "",
        "id": "q6710",
        "input": "combine list elements python as one item",
        "output": "",
        "rule": [
            "d6710"
        ]
    },
    {
        "instruction": "",
        "id": "q6711",
        "input": "python filter lambda return none if empty",
        "output": "",
        "rule": [
            "d6711"
        ]
    },
    {
        "instruction": "",
        "id": "q6712",
        "input": "compare filename in python regex",
        "output": "",
        "rule": [
            "d6712"
        ]
    },
    {
        "instruction": "",
        "id": "q6713",
        "input": "compare image similarity python",
        "output": "",
        "rule": [
            "d6713"
        ]
    },
    {
        "instruction": "",
        "id": "q6714",
        "input": "python fitting 2d function",
        "output": "",
        "rule": [
            "d6714"
        ]
    },
    {
        "instruction": "",
        "id": "q6715",
        "input": "compare python string using wildcard *",
        "output": "",
        "rule": [
            "d6715"
        ]
    },
    {
        "instruction": "",
        "id": "q6716",
        "input": "python flake8 windows crushed",
        "output": "",
        "rule": [
            "d6716"
        ]
    },
    {
        "instruction": "",
        "id": "q6717",
        "input": "compare similarity between 2 images python",
        "output": "",
        "rule": [
            "d6717"
        ]
    },
    {
        "instruction": "",
        "id": "q6718",
        "input": "python flask annotated function",
        "output": "",
        "rule": [
            "d6718"
        ]
    },
    {
        "instruction": "",
        "id": "q6719",
        "input": "compare with every element in set python3",
        "output": "",
        "rule": [
            "d6719"
        ]
    },
    {
        "instruction": "",
        "id": "q6720",
        "input": "python flask api in multi direcotry",
        "output": "",
        "rule": [
            "d6720"
        ]
    },
    {
        "instruction": "",
        "id": "q6721",
        "input": "comparing matrices in python 3",
        "output": "",
        "rule": [
            "d6721"
        ]
    },
    {
        "instruction": "",
        "id": "q6722",
        "input": "python flask auto refresh",
        "output": "",
        "rule": [
            "d6722"
        ]
    },
    {
        "instruction": "",
        "id": "q6723",
        "input": "python flask boolean to html",
        "output": "",
        "rule": [
            "d6723"
        ]
    },
    {
        "instruction": "",
        "id": "q6724",
        "input": "compile python code as a dll",
        "output": "",
        "rule": [
            "d6724"
        ]
    },
    {
        "instruction": "",
        "id": "q6725",
        "input": "python flask change static folder",
        "output": "",
        "rule": [
            "d6725"
        ]
    },
    {
        "instruction": "",
        "id": "q6726",
        "input": "concatenate 2d arrays in python",
        "output": "",
        "rule": [
            "d6726"
        ]
    },
    {
        "instruction": "",
        "id": "q6727",
        "input": "python flask config from file",
        "output": "",
        "rule": [
            "d6727"
        ]
    },
    {
        "instruction": "",
        "id": "q6728",
        "input": "concatenate multidiminsional arrays python",
        "output": "",
        "rule": [
            "d6728"
        ]
    },
    {
        "instruction": "",
        "id": "q6729",
        "input": "python flask don't display images outside of static",
        "output": "",
        "rule": [
            "d6729"
        ]
    },
    {
        "instruction": "",
        "id": "q6730",
        "input": "concatinate 2 functions in python",
        "output": "",
        "rule": [
            "d6730"
        ]
    },
    {
        "instruction": "",
        "id": "q6731",
        "input": "python flask form get",
        "output": "",
        "rule": [
            "d6731"
        ]
    },
    {
        "instruction": "",
        "id": "q6732",
        "input": "configure python random state",
        "output": "",
        "rule": [
            "d6732"
        ]
    },
    {
        "instruction": "",
        "id": "q6733",
        "input": "python flask render a table",
        "output": "",
        "rule": [
            "d6733"
        ]
    },
    {
        "instruction": "",
        "id": "q6734",
        "input": "configuring python to use a proxy",
        "output": "",
        "rule": [
            "d6734"
        ]
    },
    {
        "instruction": "",
        "id": "q6735",
        "input": "connect the points with a line python",
        "output": "",
        "rule": [
            "d6735"
        ]
    },
    {
        "instruction": "",
        "id": "q6736",
        "input": "connect to ftp server from python",
        "output": "",
        "rule": [
            "d6736"
        ]
    },
    {
        "instruction": "",
        "id": "q6737",
        "input": "python flask start a thread outside web context",
        "output": "",
        "rule": [
            "d6737"
        ]
    },
    {
        "instruction": "",
        "id": "q6738",
        "input": "python float fortran opnfl",
        "output": "",
        "rule": [
            "d6738"
        ]
    },
    {
        "instruction": "",
        "id": "q6739",
        "input": "converst datetime to string python",
        "output": "",
        "rule": [
            "d6739"
        ]
    },
    {
        "instruction": "",
        "id": "q6740",
        "input": "python for loop+horizontat stack each column of an array",
        "output": "",
        "rule": [
            "d6740"
        ]
    },
    {
        "instruction": "",
        "id": "q6741",
        "input": "correlation matrix of all columns in python",
        "output": "",
        "rule": [
            "d6741"
        ]
    },
    {
        "instruction": "",
        "id": "q6742",
        "input": "python force plot window to close",
        "output": "",
        "rule": [
            "d6742"
        ]
    },
    {
        "instruction": "",
        "id": "q6743",
        "input": "count all element in index elasticsearch python",
        "output": "",
        "rule": [
            "d6743"
        ]
    },
    {
        "instruction": "",
        "id": "q6744",
        "input": "python format datetime as iso string",
        "output": "",
        "rule": [
            "d6744"
        ]
    },
    {
        "instruction": "",
        "id": "q6745",
        "input": "count non empty lines python",
        "output": "",
        "rule": [
            "d6745"
        ]
    },
    {
        "instruction": "",
        "id": "q6746",
        "input": "python format f rounding",
        "output": "",
        "rule": [
            "d6746"
        ]
    },
    {
        "instruction": "",
        "id": "q6747",
        "input": "count number of pixels in python string",
        "output": "",
        "rule": [
            "d6747"
        ]
    },
    {
        "instruction": "",
        "id": "q6748",
        "input": "python format string comflict curly brace",
        "output": "",
        "rule": [
            "d6748"
        ]
    },
    {
        "instruction": "",
        "id": "q6749",
        "input": "count sentence frequencies in documents python",
        "output": "",
        "rule": [
            "d6749"
        ]
    },
    {
        "instruction": "",
        "id": "q6750",
        "input": "python ftps ssl/tls passive",
        "output": "",
        "rule": [
            "d6750"
        ]
    },
    {
        "instruction": "",
        "id": "q6751",
        "input": "counting depth on a binary tree python",
        "output": "",
        "rule": [
            "d6751"
        ]
    },
    {
        "instruction": "",
        "id": "q6752",
        "input": "python function dot name",
        "output": "",
        "rule": [
            "d6752"
        ]
    },
    {
        "instruction": "",
        "id": "q6753",
        "input": "create a 3d matrix out of 3 vectors python",
        "output": "",
        "rule": [
            "d6753"
        ]
    },
    {
        "instruction": "",
        "id": "q6754",
        "input": "python function name case",
        "output": "",
        "rule": [
            "d6754"
        ]
    },
    {
        "instruction": "",
        "id": "q6755",
        "input": "create a datetime objecr python",
        "output": "",
        "rule": [
            "d6755"
        ]
    },
    {
        "instruction": "",
        "id": "q6756",
        "input": "python function not defined input",
        "output": "",
        "rule": [
            "d6756"
        ]
    },
    {
        "instruction": "",
        "id": "q6757",
        "input": "create a distinct copy of array python",
        "output": "",
        "rule": [
            "d6757"
        ]
    },
    {
        "instruction": "",
        "id": "q6758",
        "input": "python function round to nearest 1/10th",
        "output": "",
        "rule": [
            "d6758"
        ]
    },
    {
        "instruction": "",
        "id": "q6759",
        "input": "create a latex table in python",
        "output": "",
        "rule": [
            "d6759"
        ]
    },
    {
        "instruction": "",
        "id": "q6760",
        "input": "python function that gives closest whole number",
        "output": "",
        "rule": [
            "d6760"
        ]
    },
    {
        "instruction": "",
        "id": "q6761",
        "input": "create bold output in python",
        "output": "",
        "rule": [
            "d6761"
        ]
    },
    {
        "instruction": "",
        "id": "q6762",
        "input": "python function to get item from queue",
        "output": "",
        "rule": [
            "d6762"
        ]
    },
    {
        "instruction": "",
        "id": "q6763",
        "input": "create file open dialog box in python",
        "output": "",
        "rule": [
            "d6763"
        ]
    },
    {
        "instruction": "",
        "id": "q6764",
        "input": "create modelas in sqlalchemy python",
        "output": "",
        "rule": [
            "d6764"
        ]
    },
    {
        "instruction": "",
        "id": "q6765",
        "input": "python function to remove whitespace",
        "output": "",
        "rule": [
            "d6765"
        ]
    },
    {
        "instruction": "",
        "id": "q6766",
        "input": "create new data frame that is a subset of another python",
        "output": "",
        "rule": [
            "d6766"
        ]
    },
    {
        "instruction": "",
        "id": "q6767",
        "input": "python function to show time to execute",
        "output": "",
        "rule": [
            "d6767"
        ]
    },
    {
        "instruction": "",
        "id": "q6768",
        "input": "create parquet file from rdd using python",
        "output": "",
        "rule": [
            "d6768"
        ]
    },
    {
        "instruction": "",
        "id": "q6769",
        "input": "python garbage collect force",
        "output": "",
        "rule": [
            "d6769"
        ]
    },
    {
        "instruction": "",
        "id": "q6770",
        "input": "create python dictionary based on data frame value and index",
        "output": "",
        "rule": [
            "d6770"
        ]
    },
    {
        "instruction": "",
        "id": "q6771",
        "input": "python generate a random string of length 5",
        "output": "",
        "rule": [
            "d6771"
        ]
    },
    {
        "instruction": "",
        "id": "q6772",
        "input": "create valiable by concatinate strings in python",
        "output": "",
        "rule": [
            "d6772"
        ]
    },
    {
        "instruction": "",
        "id": "q6773",
        "input": "python get a function from name",
        "output": "",
        "rule": [
            "d6773"
        ]
    },
    {
        "instruction": "",
        "id": "q6774",
        "input": "creating a accesible menu in python",
        "output": "",
        "rule": [
            "d6774"
        ]
    },
    {
        "instruction": "",
        "id": "q6775",
        "input": "python get a list of dates between two dates",
        "output": "",
        "rule": [
            "d6775"
        ]
    },
    {
        "instruction": "",
        "id": "q6776",
        "input": "creating a range of values with step size python",
        "output": "",
        "rule": [
            "d6776"
        ]
    },
    {
        "instruction": "",
        "id": "q6777",
        "input": "python get all logging handlers",
        "output": "",
        "rule": [
            "d6777"
        ]
    },
    {
        "instruction": "",
        "id": "q6778",
        "input": "creating custom loggers python",
        "output": "",
        "rule": [
            "d6778"
        ]
    },
    {
        "instruction": "",
        "id": "q6779",
        "input": "python get all the factors of a number",
        "output": "",
        "rule": [
            "d6779"
        ]
    },
    {
        "instruction": "",
        "id": "q6780",
        "input": "cumulative sum of a list in python",
        "output": "",
        "rule": [
            "d6780"
        ]
    },
    {
        "instruction": "",
        "id": "q6781",
        "input": "python get all the variable names of a table",
        "output": "",
        "rule": [
            "d6781"
        ]
    },
    {
        "instruction": "",
        "id": "q6782",
        "input": "current time hours minutes seconds miliseconds if python",
        "output": "",
        "rule": [
            "d6782"
        ]
    },
    {
        "instruction": "",
        "id": "q6783",
        "input": "customizing raise function in python",
        "output": "",
        "rule": [
            "d6783"
        ]
    },
    {
        "instruction": "",
        "id": "q6784",
        "input": "python get borders of 2d regions",
        "output": "",
        "rule": [
            "d6784"
        ]
    },
    {
        "instruction": "",
        "id": "q6785",
        "input": "date to string inpython",
        "output": "",
        "rule": [
            "d6785"
        ]
    },
    {
        "instruction": "",
        "id": "q6786",
        "input": "python get comma separated data in list",
        "output": "",
        "rule": [
            "d6786"
        ]
    },
    {
        "instruction": "",
        "id": "q6787",
        "input": "datetime list array python",
        "output": "",
        "rule": [
            "d6787"
        ]
    },
    {
        "instruction": "",
        "id": "q6788",
        "input": "python get corners of array",
        "output": "",
        "rule": [
            "d6788"
        ]
    },
    {
        "instruction": "",
        "id": "q6789",
        "input": "datetime serialize to json python",
        "output": "",
        "rule": [
            "d6789"
        ]
    },
    {
        "instruction": "",
        "id": "q6790",
        "input": "python get days in a month",
        "output": "",
        "rule": [
            "d6790"
        ]
    },
    {
        "instruction": "",
        "id": "q6791",
        "input": "dcm to numpy array python 3",
        "output": "",
        "rule": [
            "d6791"
        ]
    },
    {
        "instruction": "",
        "id": "q6792",
        "input": "python get device storage size linux",
        "output": "",
        "rule": [
            "d6792"
        ]
    },
    {
        "instruction": "",
        "id": "q6793",
        "input": "decision tree python matplotlib",
        "output": "",
        "rule": [
            "d6793"
        ]
    },
    {
        "instruction": "",
        "id": "q6794",
        "input": "python get dictionary value by key with default",
        "output": "",
        "rule": [
            "d6794"
        ]
    },
    {
        "instruction": "",
        "id": "q6795",
        "input": "declaring a variable as a dictionary python",
        "output": "",
        "rule": [
            "d6795"
        ]
    },
    {
        "instruction": "",
        "id": "q6796",
        "input": "python get elelemnts by name",
        "output": "",
        "rule": [
            "d6796"
        ]
    },
    {
        "instruction": "",
        "id": "q6797",
        "input": "declaring multiple empty strings in python",
        "output": "",
        "rule": [
            "d6797"
        ]
    },
    {
        "instruction": "",
        "id": "q6798",
        "input": "python get fields of pdf",
        "output": "",
        "rule": [
            "d6798"
        ]
    },
    {
        "instruction": "",
        "id": "q6799",
        "input": "default value passed to a function in python",
        "output": "",
        "rule": [
            "d6799"
        ]
    },
    {
        "instruction": "",
        "id": "q6800",
        "input": "python get file absolute self path",
        "output": "",
        "rule": [
            "d6800"
        ]
    },
    {
        "instruction": "",
        "id": "q6801",
        "input": "define dtype of ndarray in python",
        "output": "",
        "rule": [
            "d6801"
        ]
    },
    {
        "instruction": "",
        "id": "q6802",
        "input": "python get file basename without extension",
        "output": "",
        "rule": [
            "d6802"
        ]
    },
    {
        "instruction": "",
        "id": "q6803",
        "input": "defining global variables in python to use in def",
        "output": "",
        "rule": [
            "d6803"
        ]
    },
    {
        "instruction": "",
        "id": "q6804",
        "input": "python get file that are not duplicated",
        "output": "",
        "rule": [
            "d6804"
        ]
    },
    {
        "instruction": "",
        "id": "q6805",
        "input": "delete a virtual env in python",
        "output": "",
        "rule": [
            "d6805"
        ]
    },
    {
        "instruction": "",
        "id": "q6806",
        "input": "python get first date in a month",
        "output": "",
        "rule": [
            "d6806"
        ]
    },
    {
        "instruction": "",
        "id": "q6807",
        "input": "delete contents of a text file in python open file",
        "output": "",
        "rule": [
            "d6807"
        ]
    },
    {
        "instruction": "",
        "id": "q6808",
        "input": "python get first element condition",
        "output": "",
        "rule": [
            "d6808"
        ]
    },
    {
        "instruction": "",
        "id": "q6809",
        "input": "delete items from index python",
        "output": "",
        "rule": [
            "d6809"
        ]
    },
    {
        "instruction": "",
        "id": "q6810",
        "input": "deleting a folder if it is empty python",
        "output": "",
        "rule": [
            "d6810"
        ]
    },
    {
        "instruction": "",
        "id": "q6811",
        "input": "design hit counter python",
        "output": "",
        "rule": [
            "d6811"
        ]
    },
    {
        "instruction": "",
        "id": "q6812",
        "input": "python get index of element equal to",
        "output": "",
        "rule": [
            "d6812"
        ]
    },
    {
        "instruction": "",
        "id": "q6813",
        "input": "destination host unreachable ping python",
        "output": "",
        "rule": [
            "d6813"
        ]
    },
    {
        "instruction": "",
        "id": "q6814",
        "input": "python get java absolute path",
        "output": "",
        "rule": [
            "d6814"
        ]
    },
    {
        "instruction": "",
        "id": "q6815",
        "input": "detect angle and rotate image in python",
        "output": "",
        "rule": [
            "d6815"
        ]
    },
    {
        "instruction": "",
        "id": "q6816",
        "input": "python get last line of git log file",
        "output": "",
        "rule": [
            "d6816"
        ]
    },
    {
        "instruction": "",
        "id": "q6817",
        "input": "detemine intensity black and white image python",
        "output": "",
        "rule": [
            "d6817"
        ]
    },
    {
        "instruction": "",
        "id": "q6818",
        "input": "python get last modified time",
        "output": "",
        "rule": [
            "d6818"
        ]
    },
    {
        "instruction": "",
        "id": "q6819",
        "input": "determine if datetime type python",
        "output": "",
        "rule": [
            "d6819"
        ]
    },
    {
        "instruction": "",
        "id": "q6820",
        "input": "python get last monday",
        "output": "",
        "rule": [
            "d6820"
        ]
    },
    {
        "instruction": "",
        "id": "q6821",
        "input": "determine string only lower case python",
        "output": "",
        "rule": [
            "d6821"
        ]
    },
    {
        "instruction": "",
        "id": "q6822",
        "input": "python get length of string of every words",
        "output": "",
        "rule": [
            "d6822"
        ]
    },
    {
        "instruction": "",
        "id": "q6823",
        "input": "python get linux memory utilization",
        "output": "",
        "rule": [
            "d6823"
        ]
    },
    {
        "instruction": "",
        "id": "q6824",
        "input": "determine the quarter in python based on a start date",
        "output": "",
        "rule": [
            "d6824"
        ]
    },
    {
        "instruction": "",
        "id": "q6825",
        "input": "determining number of bins for histogram python",
        "output": "",
        "rule": [
            "d6825"
        ]
    },
    {
        "instruction": "",
        "id": "q6826",
        "input": "python get modified date",
        "output": "",
        "rule": [
            "d6826"
        ]
    },
    {
        "instruction": "",
        "id": "q6827",
        "input": "dictionary with multilist in python",
        "output": "",
        "rule": [
            "d6827"
        ]
    },
    {
        "instruction": "",
        "id": "q6828",
        "input": "python get numeric group id for group name",
        "output": "",
        "rule": [
            "d6828"
        ]
    },
    {
        "instruction": "",
        "id": "q6829",
        "input": "direct python output to screen",
        "output": "",
        "rule": [
            "d6829"
        ]
    },
    {
        "instruction": "",
        "id": "q6830",
        "input": "python get object through id",
        "output": "",
        "rule": [
            "d6830"
        ]
    },
    {
        "instruction": "",
        "id": "q6831",
        "input": "discord bot delete message python",
        "output": "",
        "rule": [
            "d6831"
        ]
    },
    {
        "instruction": "",
        "id": "q6832",
        "input": "python get part region of image",
        "output": "",
        "rule": [
            "d6832"
        ]
    },
    {
        "instruction": "",
        "id": "q6833",
        "input": "display column names in sql python",
        "output": "",
        "rule": [
            "d6833"
        ]
    },
    {
        "instruction": "",
        "id": "q6834",
        "input": "display python output in real time php",
        "output": "",
        "rule": [
            "d6834"
        ]
    },
    {
        "instruction": "",
        "id": "q6835",
        "input": "python get rid of new line character after a string",
        "output": "",
        "rule": [
            "d6835"
        ]
    },
    {
        "instruction": "",
        "id": "q6836",
        "input": "display the value of tensor in tensorflow python",
        "output": "",
        "rule": [
            "d6836"
        ]
    },
    {
        "instruction": "",
        "id": "q6837",
        "input": "python get screen resolution",
        "output": "",
        "rule": [
            "d6837"
        ]
    },
    {
        "instruction": "",
        "id": "q6838",
        "input": "display time taken in minutes and seconds python",
        "output": "",
        "rule": [
            "d6838"
        ]
    },
    {
        "instruction": "",
        "id": "q6839",
        "input": "python get shelve keys",
        "output": "",
        "rule": [
            "d6839"
        ]
    },
    {
        "instruction": "",
        "id": "q6840",
        "input": "display top 2 sum in column python",
        "output": "",
        "rule": [
            "d6840"
        ]
    },
    {
        "instruction": "",
        "id": "q6841",
        "input": "python get size from file object",
        "output": "",
        "rule": [
            "d6841"
        ]
    },
    {
        "instruction": "",
        "id": "q6842",
        "input": "displaying different pages in python",
        "output": "",
        "rule": [
            "d6842"
        ]
    },
    {
        "instruction": "",
        "id": "q6843",
        "input": "python get size of queue",
        "output": "",
        "rule": [
            "d6843"
        ]
    },
    {
        "instruction": "",
        "id": "q6844",
        "input": "distance between 2 strings python",
        "output": "",
        "rule": [
            "d6844"
        ]
    },
    {
        "instruction": "",
        "id": "q6845",
        "input": "python get skimage coordinate of max value",
        "output": "",
        "rule": [
            "d6845"
        ]
    },
    {
        "instruction": "",
        "id": "q6846",
        "input": "divide a string into 5 letter blocks python",
        "output": "",
        "rule": [
            "d6846"
        ]
    },
    {
        "instruction": "",
        "id": "q6847",
        "input": "python get str from type",
        "output": "",
        "rule": [
            "d6847"
        ]
    },
    {
        "instruction": "",
        "id": "q6848",
        "input": "divide string into n parts python",
        "output": "",
        "rule": [
            "d6848"
        ]
    },
    {
        "instruction": "",
        "id": "q6849",
        "input": "python get string representation of int in base",
        "output": "",
        "rule": [
            "d6849"
        ]
    },
    {
        "instruction": "",
        "id": "q6850",
        "input": "dividing a string into multiple sentences python",
        "output": "",
        "rule": [
            "d6850"
        ]
    },
    {
        "instruction": "",
        "id": "q6851",
        "input": "python get structure of pdf",
        "output": "",
        "rule": [
            "d6851"
        ]
    },
    {
        "instruction": "",
        "id": "q6852",
        "input": "django python rollback makemigration",
        "output": "",
        "rule": [
            "d6852"
        ]
    },
    {
        "instruction": "",
        "id": "q6853",
        "input": "python get text from page",
        "output": "",
        "rule": [
            "d6853"
        ]
    },
    {
        "instruction": "",
        "id": "q6854",
        "input": "do i have to activate my python virtual environment every time",
        "output": "",
        "rule": [
            "d6854"
        ]
    },
    {
        "instruction": "",
        "id": "q6855",
        "input": "python get the closest monday",
        "output": "",
        "rule": [
            "d6855"
        ]
    },
    {
        "instruction": "",
        "id": "q6856",
        "input": "do you use onehotencoder on categorical variables in python",
        "output": "",
        "rule": [
            "d6856"
        ]
    },
    {
        "instruction": "",
        "id": "q6857",
        "input": "does django python run sql server",
        "output": "",
        "rule": [
            "d6857"
        ]
    },
    {
        "instruction": "",
        "id": "q6858",
        "input": "python get the dimenstions of a variable",
        "output": "",
        "rule": [
            "d6858"
        ]
    },
    {
        "instruction": "",
        "id": "q6859",
        "input": "does python automatically return a float",
        "output": "",
        "rule": [
            "d6859"
        ]
    },
    {
        "instruction": "",
        "id": "q6860",
        "input": "python get the index of an element in a list",
        "output": "",
        "rule": [
            "d6860"
        ]
    },
    {
        "instruction": "",
        "id": "q6861",
        "input": "does python max works with none",
        "output": "",
        "rule": [
            "d6861"
        ]
    },
    {
        "instruction": "",
        "id": "q6862",
        "input": "python get the last item in a queryset",
        "output": "",
        "rule": [
            "d6862"
        ]
    },
    {
        "instruction": "",
        "id": "q6863",
        "input": "dos python history up arrow",
        "output": "",
        "rule": [
            "d6863"
        ]
    },
    {
        "instruction": "",
        "id": "q6864",
        "input": "python get the object address",
        "output": "",
        "rule": [
            "d6864"
        ]
    },
    {
        "instruction": "",
        "id": "q6865",
        "input": "dot function from string python",
        "output": "",
        "rule": [
            "d6865"
        ]
    },
    {
        "instruction": "",
        "id": "q6866",
        "input": "python get the size of a type",
        "output": "",
        "rule": [
            "d6866"
        ]
    },
    {
        "instruction": "",
        "id": "q6867",
        "input": "dot product of 2 vector sin python",
        "output": "",
        "rule": [
            "d6867"
        ]
    },
    {
        "instruction": "",
        "id": "q6868",
        "input": "python get the size of raw disk",
        "output": "",
        "rule": [
            "d6868"
        ]
    },
    {
        "instruction": "",
        "id": "q6869",
        "input": "dot product of vectors in python",
        "output": "",
        "rule": [
            "d6869"
        ]
    },
    {
        "instruction": "",
        "id": "q6870",
        "input": "python get the text on the page",
        "output": "",
        "rule": [
            "d6870"
        ]
    },
    {
        "instruction": "",
        "id": "q6871",
        "input": "drop all databases python",
        "output": "",
        "rule": [
            "d6871"
        ]
    },
    {
        "instruction": "",
        "id": "q6872",
        "input": "python get timestamp of a file",
        "output": "",
        "rule": [
            "d6872"
        ]
    },
    {
        "instruction": "",
        "id": "q6873",
        "input": "python get type in str",
        "output": "",
        "rule": [
            "d6873"
        ]
    },
    {
        "instruction": "",
        "id": "q6874",
        "input": "drop columns with na in python",
        "output": "",
        "rule": [
            "d6874"
        ]
    },
    {
        "instruction": "",
        "id": "q6875",
        "input": "python get width and height of pdf",
        "output": "",
        "rule": [
            "d6875"
        ]
    },
    {
        "instruction": "",
        "id": "q6876",
        "input": "dynamically create unique lists in a for loop python",
        "output": "",
        "rule": [
            "d6876"
        ]
    },
    {
        "instruction": "",
        "id": "q6877",
        "input": "python get windows user id",
        "output": "",
        "rule": [
            "d6877"
        ]
    },
    {
        "instruction": "",
        "id": "q6878",
        "input": "dynamodb get item python examples",
        "output": "",
        "rule": [
            "d6878"
        ]
    },
    {
        "instruction": "",
        "id": "q6879",
        "input": "python gevent pool repeat",
        "output": "",
        "rule": [
            "d6879"
        ]
    },
    {
        "instruction": "",
        "id": "q6880",
        "input": "easy was to format a table in python",
        "output": "",
        "rule": [
            "d6880"
        ]
    },
    {
        "instruction": "",
        "id": "q6881",
        "input": "python gevent several group task",
        "output": "",
        "rule": [
            "d6881"
        ]
    },
    {
        "instruction": "",
        "id": "q6882",
        "input": "email validation pattern in python",
        "output": "",
        "rule": [
            "d6882"
        ]
    },
    {
        "instruction": "",
        "id": "q6883",
        "input": "python gevent urllib2 urlopen list not callable",
        "output": "",
        "rule": [
            "d6883"
        ]
    },
    {
        "instruction": "",
        "id": "q6884",
        "input": "encoding bytes to json python",
        "output": "",
        "rule": [
            "d6884"
        ]
    },
    {
        "instruction": "",
        "id": "q6885",
        "input": "python give all column headers",
        "output": "",
        "rule": [
            "d6885"
        ]
    },
    {
        "instruction": "",
        "id": "q6886",
        "input": "epoch to gmt datetime python 3",
        "output": "",
        "rule": [
            "d6886"
        ]
    },
    {
        "instruction": "",
        "id": "q6887",
        "input": "python go to parent directory",
        "output": "",
        "rule": [
            "d6887"
        ]
    },
    {
        "instruction": "",
        "id": "q6888",
        "input": "epython name is notdefined",
        "output": "",
        "rule": [
            "d6888"
        ]
    },
    {
        "instruction": "",
        "id": "q6889",
        "input": "python gradient grayscale image",
        "output": "",
        "rule": [
            "d6889"
        ]
    },
    {
        "instruction": "",
        "id": "q6890",
        "input": "equivalent of throw in python",
        "output": "",
        "rule": [
            "d6890"
        ]
    },
    {
        "instruction": "",
        "id": "q6891",
        "input": "python graphviz executables not found",
        "output": "",
        "rule": [
            "d6891"
        ]
    },
    {
        "instruction": "",
        "id": "q6892",
        "input": "escape characters in python sql query",
        "output": "",
        "rule": [
            "d6892"
        ]
    },
    {
        "instruction": "",
        "id": "q6893",
        "input": "python guid to uuid",
        "output": "",
        "rule": [
            "d6893"
        ]
    },
    {
        "instruction": "",
        "id": "q6894",
        "input": "escape string for sql python",
        "output": "",
        "rule": [
            "d6894"
        ]
    },
    {
        "instruction": "",
        "id": "q6895",
        "input": "python gzip bytes str",
        "output": "",
        "rule": [
            "d6895"
        ]
    },
    {
        "instruction": "",
        "id": "q6896",
        "input": "euclidean distance python 2d",
        "output": "",
        "rule": [
            "d6896"
        ]
    },
    {
        "instruction": "",
        "id": "q6897",
        "input": "eval source code in python",
        "output": "",
        "rule": [
            "d6897"
        ]
    },
    {
        "instruction": "",
        "id": "q6898",
        "input": "python hierarchical clustering for both rows and columns",
        "output": "",
        "rule": [
            "d6898"
        ]
    },
    {
        "instruction": "",
        "id": "q6899",
        "input": "exclude stop words python",
        "output": "",
        "rule": [
            "d6899"
        ]
    },
    {
        "instruction": "",
        "id": "q6900",
        "input": "python how change input to bytes",
        "output": "",
        "rule": [
            "d6900"
        ]
    },
    {
        "instruction": "",
        "id": "q6901",
        "input": "execute python test with unittest from command line",
        "output": "",
        "rule": [
            "d6901"
        ]
    },
    {
        "instruction": "",
        "id": "q6902",
        "input": "python how do i inspect code of builtin",
        "output": "",
        "rule": [
            "d6902"
        ]
    },
    {
        "instruction": "",
        "id": "q6903",
        "input": "exit a for loop python before it finishes",
        "output": "",
        "rule": [
            "d6903"
        ]
    },
    {
        "instruction": "",
        "id": "q6904",
        "input": "python how do i save cookies between each requests",
        "output": "",
        "rule": [
            "d6904"
        ]
    },
    {
        "instruction": "",
        "id": "q6905",
        "input": "exit python running in cmd",
        "output": "",
        "rule": [
            "d6905"
        ]
    },
    {
        "instruction": "",
        "id": "q6906",
        "input": "python how long does it take to check if two sets are equal",
        "output": "",
        "rule": [
            "d6906"
        ]
    },
    {
        "instruction": "",
        "id": "q6907",
        "input": "expanding addresses with python",
        "output": "",
        "rule": [
            "d6907"
        ]
    },
    {
        "instruction": "",
        "id": "q6908",
        "input": "python how to break line between and flake8",
        "output": "",
        "rule": [
            "d6908"
        ]
    },
    {
        "instruction": "",
        "id": "q6909",
        "input": "python how to calculate length between two points",
        "output": "",
        "rule": [
            "d6909"
        ]
    },
    {
        "instruction": "",
        "id": "q6910",
        "input": "extract make a list with integers from a string python",
        "output": "",
        "rule": [
            "d6910"
        ]
    },
    {
        "instruction": "",
        "id": "q6911",
        "input": "python how to call stored procedures in multithread",
        "output": "",
        "rule": [
            "d6911"
        ]
    },
    {
        "instruction": "",
        "id": "q6912",
        "input": "extract tweets from twitter api python",
        "output": "",
        "rule": [
            "d6912"
        ]
    },
    {
        "instruction": "",
        "id": "q6913",
        "input": "python how to chain replace on a string",
        "output": "",
        "rule": [
            "d6913"
        ]
    },
    {
        "instruction": "",
        "id": "q6914",
        "input": "f strings number rounding formatting python",
        "output": "",
        "rule": [
            "d6914"
        ]
    },
    {
        "instruction": "",
        "id": "q6915",
        "input": "python how to check for empty list",
        "output": "",
        "rule": [
            "d6915"
        ]
    },
    {
        "instruction": "",
        "id": "q6916",
        "input": "fastest way to create dictionary python",
        "output": "",
        "rule": [
            "d6916"
        ]
    },
    {
        "instruction": "",
        "id": "q6917",
        "input": "fasting way to loop over a large list in python",
        "output": "",
        "rule": [
            "d6917"
        ]
    },
    {
        "instruction": "",
        "id": "q6918",
        "input": "python how to check if process is running",
        "output": "",
        "rule": [
            "d6918"
        ]
    },
    {
        "instruction": "",
        "id": "q6919",
        "input": "python how to check if something is punctuation",
        "output": "",
        "rule": [
            "d6919"
        ]
    },
    {
        "instruction": "",
        "id": "q6920",
        "input": "field value empty check in python",
        "output": "",
        "rule": [
            "d6920"
        ]
    },
    {
        "instruction": "",
        "id": "q6921",
        "input": "python how to check the time taken for a function",
        "output": "",
        "rule": [
            "d6921"
        ]
    },
    {
        "instruction": "",
        "id": "q6922",
        "input": "fields of a struct python",
        "output": "",
        "rule": [
            "d6922"
        ]
    },
    {
        "instruction": "",
        "id": "q6923",
        "input": "python how to connect all list to a string",
        "output": "",
        "rule": [
            "d6923"
        ]
    },
    {
        "instruction": "",
        "id": "q6924",
        "input": "python how to declaare an array of unknown length",
        "output": "",
        "rule": [
            "d6924"
        ]
    },
    {
        "instruction": "",
        "id": "q6925",
        "input": "filter a dataset in python on multiple fields",
        "output": "",
        "rule": [
            "d6925"
        ]
    },
    {
        "instruction": "",
        "id": "q6926",
        "input": "python how to delete unnamed columns",
        "output": "",
        "rule": [
            "d6926"
        ]
    },
    {
        "instruction": "",
        "id": "q6927",
        "input": "filter a list based on index python",
        "output": "",
        "rule": [
            "d6927"
        ]
    },
    {
        "instruction": "",
        "id": "q6928",
        "input": "python how to determine type of function paramters",
        "output": "",
        "rule": [
            "d6928"
        ]
    },
    {
        "instruction": "",
        "id": "q6929",
        "input": "filter list using an index logic python",
        "output": "",
        "rule": [
            "d6929"
        ]
    },
    {
        "instruction": "",
        "id": "q6930",
        "input": "python how to document properties",
        "output": "",
        "rule": [
            "d6930"
        ]
    },
    {
        "instruction": "",
        "id": "q6931",
        "input": "finc uniqe values in list of list python",
        "output": "",
        "rule": [
            "d6931"
        ]
    },
    {
        "instruction": "",
        "id": "q6932",
        "input": "python how to get index of a tree item",
        "output": "",
        "rule": [
            "d6932"
        ]
    },
    {
        "instruction": "",
        "id": "q6933",
        "input": "finding a command in python",
        "output": "",
        "rule": [
            "d6933"
        ]
    },
    {
        "instruction": "",
        "id": "q6934",
        "input": "python how to get object id",
        "output": "",
        "rule": [
            "d6934"
        ]
    },
    {
        "instruction": "",
        "id": "q6935",
        "input": "finding an element in a 2d list in python",
        "output": "",
        "rule": [
            "d6935"
        ]
    },
    {
        "instruction": "",
        "id": "q6936",
        "input": "python how to get pdf values",
        "output": "",
        "rule": [
            "d6936"
        ]
    },
    {
        "instruction": "",
        "id": "q6937",
        "input": "finding average of numbers in a list python",
        "output": "",
        "rule": [
            "d6937"
        ]
    },
    {
        "instruction": "",
        "id": "q6938",
        "input": "python how to get year over year growth rate",
        "output": "",
        "rule": [
            "d6938"
        ]
    },
    {
        "instruction": "",
        "id": "q6939",
        "input": "finding centroid of a 2d array python",
        "output": "",
        "rule": [
            "d6939"
        ]
    },
    {
        "instruction": "",
        "id": "q6940",
        "input": "python how to json serialize datetime",
        "output": "",
        "rule": [
            "d6940"
        ]
    },
    {
        "instruction": "",
        "id": "q6941",
        "input": "finding index of number in a list python",
        "output": "",
        "rule": [
            "d6941"
        ]
    },
    {
        "instruction": "",
        "id": "q6942",
        "input": "finding longest element of a list python",
        "output": "",
        "rule": [
            "d6942"
        ]
    },
    {
        "instruction": "",
        "id": "q6943",
        "input": "python how to make a copy instead of a reference",
        "output": "",
        "rule": [
            "d6943"
        ]
    },
    {
        "instruction": "",
        "id": "q6944",
        "input": "finding median of a list python",
        "output": "",
        "rule": [
            "d6944"
        ]
    },
    {
        "instruction": "",
        "id": "q6945",
        "input": "python how to make a input defined",
        "output": "",
        "rule": [
            "d6945"
        ]
    },
    {
        "instruction": "",
        "id": "q6946",
        "input": "finding the longest string in a list using lambda expressions and streams python",
        "output": "",
        "rule": [
            "d6946"
        ]
    },
    {
        "instruction": "",
        "id": "q6947",
        "input": "python how to make a toolbar",
        "output": "",
        "rule": [
            "d6947"
        ]
    },
    {
        "instruction": "",
        "id": "q6948",
        "input": "finding the minimum distance between two points from a lsit of points in python",
        "output": "",
        "rule": [
            "d6948"
        ]
    },
    {
        "instruction": "",
        "id": "q6949",
        "input": "python how to make a trace back error",
        "output": "",
        "rule": [
            "d6949"
        ]
    },
    {
        "instruction": "",
        "id": "q6950",
        "input": "finding the xml path to a specific value in python",
        "output": "",
        "rule": [
            "d6950"
        ]
    },
    {
        "instruction": "",
        "id": "q6951",
        "input": "python how to mark function as deprecated",
        "output": "",
        "rule": [
            "d6951"
        ]
    },
    {
        "instruction": "",
        "id": "q6952",
        "input": "finding types of values in a column in python",
        "output": "",
        "rule": [
            "d6952"
        ]
    },
    {
        "instruction": "",
        "id": "q6953",
        "input": "python how to modify all field names",
        "output": "",
        "rule": [
            "d6953"
        ]
    },
    {
        "instruction": "",
        "id": "q6954",
        "input": "first duplicate element in list in python",
        "output": "",
        "rule": [
            "d6954"
        ]
    },
    {
        "instruction": "",
        "id": "q6955",
        "input": "python how to modify mappingproxy",
        "output": "",
        "rule": [
            "d6955"
        ]
    },
    {
        "instruction": "",
        "id": "q6956",
        "input": "first index greater than a number in python",
        "output": "",
        "rule": [
            "d6956"
        ]
    },
    {
        "instruction": "",
        "id": "q6957",
        "input": "python how to obtain methods and members of a object",
        "output": "",
        "rule": [
            "d6957"
        ]
    },
    {
        "instruction": "",
        "id": "q6958",
        "input": "fitting to an exponential function with python",
        "output": "",
        "rule": [
            "d6958"
        ]
    },
    {
        "instruction": "",
        "id": "q6959",
        "input": "python how to output pprint with a file",
        "output": "",
        "rule": [
            "d6959"
        ]
    },
    {
        "instruction": "",
        "id": "q6960",
        "input": "fix ssl handshake failure python",
        "output": "",
        "rule": [
            "d6960"
        ]
    },
    {
        "instruction": "",
        "id": "q6961",
        "input": "python how to remove dublicate letters from a string",
        "output": "",
        "rule": [
            "d6961"
        ]
    },
    {
        "instruction": "",
        "id": "q6962",
        "input": "flask python retrieve response header",
        "output": "",
        "rule": [
            "d6962"
        ]
    },
    {
        "instruction": "",
        "id": "q6963",
        "input": "python how to remove empty element in list",
        "output": "",
        "rule": [
            "d6963"
        ]
    },
    {
        "instruction": "",
        "id": "q6964",
        "input": "float image to uint8 python",
        "output": "",
        "rule": [
            "d6964"
        ]
    },
    {
        "instruction": "",
        "id": "q6965",
        "input": "python how to return a copy of a buffer instead of pointer",
        "output": "",
        "rule": [
            "d6965"
        ]
    },
    {
        "instruction": "",
        "id": "q6966",
        "input": "force window position in python",
        "output": "",
        "rule": [
            "d6966"
        ]
    },
    {
        "instruction": "",
        "id": "q6967",
        "input": "python how to save std out",
        "output": "",
        "rule": [
            "d6967"
        ]
    },
    {
        "instruction": "",
        "id": "q6968",
        "input": "format output two decimals python",
        "output": "",
        "rule": [
            "d6968"
        ]
    },
    {
        "instruction": "",
        "id": "q6969",
        "input": "python how to see all libraries",
        "output": "",
        "rule": [
            "d6969"
        ]
    },
    {
        "instruction": "",
        "id": "q6970",
        "input": "fourier series with python",
        "output": "",
        "rule": [
            "d6970"
        ]
    },
    {
        "instruction": "",
        "id": "q6971",
        "input": "python how to see all the attributes an object contains",
        "output": "",
        "rule": [
            "d6971"
        ]
    },
    {
        "instruction": "",
        "id": "q6972",
        "input": "from meter to degree python longitude",
        "output": "",
        "rule": [
            "d6972"
        ]
    },
    {
        "instruction": "",
        "id": "q6973",
        "input": "python how to set default jvm path",
        "output": "",
        "rule": [
            "d6973"
        ]
    },
    {
        "instruction": "",
        "id": "q6974",
        "input": "from string to bit vector python",
        "output": "",
        "rule": [
            "d6974"
        ]
    },
    {
        "instruction": "",
        "id": "q6975",
        "input": "python how to set the x ticks for loglog plot",
        "output": "",
        "rule": [
            "d6975"
        ]
    },
    {
        "instruction": "",
        "id": "q6976",
        "input": "frop row if column value matches in data frame in python",
        "output": "",
        "rule": [
            "d6976"
        ]
    },
    {
        "instruction": "",
        "id": "q6977",
        "input": "python how to specify type",
        "output": "",
        "rule": [
            "d6977"
        ]
    },
    {
        "instruction": "",
        "id": "q6978",
        "input": "funcions in python to show bottom five rows in python",
        "output": "",
        "rule": [
            "d6978"
        ]
    },
    {
        "instruction": "",
        "id": "q6979",
        "input": "python how to tell if all the items in a list are the same",
        "output": "",
        "rule": [
            "d6979"
        ]
    },
    {
        "instruction": "",
        "id": "q6980",
        "input": "function for euclidean distances in python",
        "output": "",
        "rule": [
            "d6980"
        ]
    },
    {
        "instruction": "",
        "id": "q6981",
        "input": "python how to tell methods and properties of an object",
        "output": "",
        "rule": [
            "d6981"
        ]
    },
    {
        "instruction": "",
        "id": "q6982",
        "input": "function to inverse matrix python",
        "output": "",
        "rule": [
            "d6982"
        ]
    },
    {
        "instruction": "",
        "id": "q6983",
        "input": "python how to turn a string into a list",
        "output": "",
        "rule": [
            "d6983"
        ]
    },
    {
        "instruction": "",
        "id": "q6984",
        "input": "function you can use after dot python",
        "output": "",
        "rule": [
            "d6984"
        ]
    },
    {
        "instruction": "",
        "id": "q6985",
        "input": "python how to unpack scroll bar in grid",
        "output": "",
        "rule": [
            "d6985"
        ]
    },
    {
        "instruction": "",
        "id": "q6986",
        "input": "generate 100 unique 15 numbers in python",
        "output": "",
        "rule": [
            "d6986"
        ]
    },
    {
        "instruction": "",
        "id": "q6987",
        "input": "python how to use matplot histogram and not show plot",
        "output": "",
        "rule": [
            "d6987"
        ]
    },
    {
        "instruction": "",
        "id": "q6988",
        "input": "generate a dotfile in python d tree",
        "output": "",
        "rule": [
            "d6988"
        ]
    },
    {
        "instruction": "",
        "id": "q6989",
        "input": "python how to write an empty line in write",
        "output": "",
        "rule": [
            "d6989"
        ]
    },
    {
        "instruction": "",
        "id": "q6990",
        "input": "generate a list with gap python",
        "output": "",
        "rule": [
            "d6990"
        ]
    },
    {
        "instruction": "",
        "id": "q6991",
        "input": "python how to write dict to json file",
        "output": "",
        "rule": [
            "d6991"
        ]
    },
    {
        "instruction": "",
        "id": "q6992",
        "input": "generate latex table python",
        "output": "",
        "rule": [
            "d6992"
        ]
    },
    {
        "instruction": "",
        "id": "q6993",
        "input": "python how to write string to file",
        "output": "",
        "rule": [
            "d6993"
        ]
    },
    {
        "instruction": "",
        "id": "q6994",
        "input": "generate log normal distribution in python",
        "output": "",
        "rule": [
            "d6994"
        ]
    },
    {
        "instruction": "",
        "id": "q6995",
        "input": "python html table template",
        "output": "",
        "rule": [
            "d6995"
        ]
    },
    {
        "instruction": "",
        "id": "q6996",
        "input": "generate string of random variables in python",
        "output": "",
        "rule": [
            "d6996"
        ]
    },
    {
        "instruction": "",
        "id": "q6997",
        "input": "python http header identfication",
        "output": "",
        "rule": [
            "d6997"
        ]
    },
    {
        "instruction": "",
        "id": "q6998",
        "input": "generate uniform random variables in python",
        "output": "",
        "rule": [
            "d6998"
        ]
    },
    {
        "instruction": "",
        "id": "q6999",
        "input": "python identify a url and filename",
        "output": "",
        "rule": [
            "d6999"
        ]
    },
    {
        "instruction": "",
        "id": "q7000",
        "input": "generate white noise python",
        "output": "",
        "rule": [
            "d7000"
        ]
    },
    {
        "instruction": "",
        "id": "q7001",
        "input": "python identify dns server lookup",
        "output": "",
        "rule": [
            "d7001"
        ]
    },
    {
        "instruction": "",
        "id": "q7002",
        "input": "generates a random decimal number between 1 and 10 , python",
        "output": "",
        "rule": [
            "d7002"
        ]
    },
    {
        "instruction": "",
        "id": "q7003",
        "input": "python identify the lowest value",
        "output": "",
        "rule": [
            "d7003"
        ]
    },
    {
        "instruction": "",
        "id": "q7004",
        "input": "generating random alphanumeric values in python",
        "output": "",
        "rule": [
            "d7004"
        ]
    },
    {
        "instruction": "",
        "id": "q7005",
        "input": "python if a series is nan",
        "output": "",
        "rule": [
            "d7005"
        ]
    },
    {
        "instruction": "",
        "id": "q7006",
        "input": "get a list of all availible bluetooth devices python",
        "output": "",
        "rule": [
            "d7006"
        ]
    },
    {
        "instruction": "",
        "id": "q7007",
        "input": "python if a web element is present",
        "output": "",
        "rule": [
            "d7007"
        ]
    },
    {
        "instruction": "",
        "id": "q7008",
        "input": "get all permutations python",
        "output": "",
        "rule": [
            "d7008"
        ]
    },
    {
        "instruction": "",
        "id": "q7009",
        "input": "python if variarble exists",
        "output": "",
        "rule": [
            "d7009"
        ]
    },
    {
        "instruction": "",
        "id": "q7010",
        "input": "get ancestors of a node networkx python",
        "output": "",
        "rule": [
            "d7010"
        ]
    },
    {
        "instruction": "",
        "id": "q7011",
        "input": "python image background crop",
        "output": "",
        "rule": [
            "d7011"
        ]
    },
    {
        "instruction": "",
        "id": "q7012",
        "input": "get array tif image python",
        "output": "",
        "rule": [
            "d7012"
        ]
    },
    {
        "instruction": "",
        "id": "q7013",
        "input": "python image convolve with mask",
        "output": "",
        "rule": [
            "d7013"
        ]
    },
    {
        "instruction": "",
        "id": "q7014",
        "input": "get attr function python",
        "output": "",
        "rule": [
            "d7014"
        ]
    },
    {
        "instruction": "",
        "id": "q7015",
        "input": "python image getcolors red blue green",
        "output": "",
        "rule": [
            "d7015"
        ]
    },
    {
        "instruction": "",
        "id": "q7016",
        "input": "get content from macos clipboard python",
        "output": "",
        "rule": [
            "d7016"
        ]
    },
    {
        "instruction": "",
        "id": "q7017",
        "input": "python image linear stretch",
        "output": "",
        "rule": [
            "d7017"
        ]
    },
    {
        "instruction": "",
        "id": "q7018",
        "input": "get current position of iterator python",
        "output": "",
        "rule": [
            "d7018"
        ]
    },
    {
        "instruction": "",
        "id": "q7019",
        "input": "python image read get width height size",
        "output": "",
        "rule": [
            "d7019"
        ]
    },
    {
        "instruction": "",
        "id": "q7020",
        "input": "get data from ajax request python",
        "output": "",
        "rule": [
            "d7020"
        ]
    },
    {
        "instruction": "",
        "id": "q7021",
        "input": "python image simplify contour",
        "output": "",
        "rule": [
            "d7021"
        ]
    },
    {
        "instruction": "",
        "id": "q7022",
        "input": "get date modified from path python",
        "output": "",
        "rule": [
            "d7022"
        ]
    },
    {
        "instruction": "",
        "id": "q7023",
        "input": "python implement hashable object",
        "output": "",
        "rule": [
            "d7023"
        ]
    },
    {
        "instruction": "",
        "id": "q7024",
        "input": "get file parent location python",
        "output": "",
        "rule": [
            "d7024"
        ]
    },
    {
        "instruction": "",
        "id": "q7025",
        "input": "python ind integer for normalized vector",
        "output": "",
        "rule": [
            "d7025"
        ]
    },
    {
        "instruction": "",
        "id": "q7026",
        "input": "get geolocation from iphone python",
        "output": "",
        "rule": [
            "d7026"
        ]
    },
    {
        "instruction": "",
        "id": "q7027",
        "input": "python index last number of values in array",
        "output": "",
        "rule": [
            "d7027"
        ]
    },
    {
        "instruction": "",
        "id": "q7028",
        "input": "get image shape python",
        "output": "",
        "rule": [
            "d7028"
        ]
    },
    {
        "instruction": "",
        "id": "q7029",
        "input": "python index object remove",
        "output": "",
        "rule": [
            "d7029"
        ]
    },
    {
        "instruction": "",
        "id": "q7030",
        "input": "get index of an item in list python",
        "output": "",
        "rule": [
            "d7030"
        ]
    },
    {
        "instruction": "",
        "id": "q7031",
        "input": "python index of match in list",
        "output": "",
        "rule": [
            "d7031"
        ]
    },
    {
        "instruction": "",
        "id": "q7032",
        "input": "get index of row with na value python",
        "output": "",
        "rule": [
            "d7032"
        ]
    },
    {
        "instruction": "",
        "id": "q7033",
        "input": "python inhibit new line at end of print",
        "output": "",
        "rule": [
            "d7033"
        ]
    },
    {
        "instruction": "",
        "id": "q7034",
        "input": "get indices of matrix for a given value python",
        "output": "",
        "rule": [
            "d7034"
        ]
    },
    {
        "instruction": "",
        "id": "q7035",
        "input": "python input text prompt default",
        "output": "",
        "rule": [
            "d7035"
        ]
    },
    {
        "instruction": "",
        "id": "q7036",
        "input": "get last month python",
        "output": "",
        "rule": [
            "d7036"
        ]
    },
    {
        "instruction": "",
        "id": "q7037",
        "input": "python int float comparison",
        "output": "",
        "rule": [
            "d7037"
        ]
    },
    {
        "instruction": "",
        "id": "q7038",
        "input": "get last number i array python",
        "output": "",
        "rule": [
            "d7038"
        ]
    },
    {
        "instruction": "",
        "id": "q7039",
        "input": "python interpolate now working",
        "output": "",
        "rule": [
            "d7039"
        ]
    },
    {
        "instruction": "",
        "id": "q7040",
        "input": "get last record sql python",
        "output": "",
        "rule": [
            "d7040"
        ]
    },
    {
        "instruction": "",
        "id": "q7041",
        "input": "python invalidate all other connections to db mysql",
        "output": "",
        "rule": [
            "d7041"
        ]
    },
    {
        "instruction": "",
        "id": "q7042",
        "input": "get last row python",
        "output": "",
        "rule": [
            "d7042"
        ]
    },
    {
        "instruction": "",
        "id": "q7043",
        "input": "python invert dictionary of lists",
        "output": "",
        "rule": [
            "d7043"
        ]
    },
    {
        "instruction": "",
        "id": "q7044",
        "input": "get length of 'list' object in python",
        "output": "",
        "rule": [
            "d7044"
        ]
    },
    {
        "instruction": "",
        "id": "q7045",
        "input": "python io buffered reader",
        "output": "",
        "rule": [
            "d7045"
        ]
    },
    {
        "instruction": "",
        "id": "q7046",
        "input": "get number of different elements of two array python",
        "output": "",
        "rule": [
            "d7046"
        ]
    },
    {
        "instruction": "",
        "id": "q7047",
        "input": "python ioctl access linux",
        "output": "",
        "rule": [
            "d7047"
        ]
    },
    {
        "instruction": "",
        "id": "q7048",
        "input": "get orders indexes in a list python",
        "output": "",
        "rule": [
            "d7048"
        ]
    },
    {
        "instruction": "",
        "id": "q7049",
        "input": "python ip to integer converter",
        "output": "",
        "rule": [
            "d7049"
        ]
    },
    {
        "instruction": "",
        "id": "q7050",
        "input": "get parent object python",
        "output": "",
        "rule": [
            "d7050"
        ]
    },
    {
        "instruction": "",
        "id": "q7051",
        "input": "python iterable to array",
        "output": "",
        "rule": [
            "d7051"
        ]
    },
    {
        "instruction": "",
        "id": "q7052",
        "input": "get previous week end and month end python",
        "output": "",
        "rule": [
            "d7052"
        ]
    },
    {
        "instruction": "",
        "id": "q7053",
        "input": "python iterate directory for filenames with filter",
        "output": "",
        "rule": [
            "d7053"
        ]
    },
    {
        "instruction": "",
        "id": "q7054",
        "input": "get process memory usage in python",
        "output": "",
        "rule": [
            "d7054"
        ]
    },
    {
        "instruction": "",
        "id": "q7055",
        "input": "python iterate through words in line of text file",
        "output": "",
        "rule": [
            "d7055"
        ]
    },
    {
        "instruction": "",
        "id": "q7056",
        "input": "get size of image at url python",
        "output": "",
        "rule": [
            "d7056"
        ]
    },
    {
        "instruction": "",
        "id": "q7057",
        "input": "python iterator with delete",
        "output": "",
        "rule": [
            "d7057"
        ]
    },
    {
        "instruction": "",
        "id": "q7058",
        "input": "get start date and end date of week python",
        "output": "",
        "rule": [
            "d7058"
        ]
    },
    {
        "instruction": "",
        "id": "q7059",
        "input": "python jinja2 super not work",
        "output": "",
        "rule": [
            "d7059"
        ]
    },
    {
        "instruction": "",
        "id": "q7060",
        "input": "get the first and only row, usingfindchild('tr') python",
        "output": "",
        "rule": [
            "d7060"
        ]
    },
    {
        "instruction": "",
        "id": "q7061",
        "input": "python join a date and a time to a datetime",
        "output": "",
        "rule": [
            "d7061"
        ]
    },
    {
        "instruction": "",
        "id": "q7062",
        "input": "get the index of a null value in series in python",
        "output": "",
        "rule": [
            "d7062"
        ]
    },
    {
        "instruction": "",
        "id": "q7063",
        "input": "get the nth element from array python",
        "output": "",
        "rule": [
            "d7063"
        ]
    },
    {
        "instruction": "",
        "id": "q7064",
        "input": "python json apply diff",
        "output": "",
        "rule": [
            "d7064"
        ]
    },
    {
        "instruction": "",
        "id": "q7065",
        "input": "get the tenth percentile of a list python",
        "output": "",
        "rule": [
            "d7065"
        ]
    },
    {
        "instruction": "",
        "id": "q7066",
        "input": "python json deserialize to object",
        "output": "",
        "rule": [
            "d7066"
        ]
    },
    {
        "instruction": "",
        "id": "q7067",
        "input": "get variance of vector python",
        "output": "",
        "rule": [
            "d7067"
        ]
    },
    {
        "instruction": "",
        "id": "q7068",
        "input": "python json dumps return type",
        "output": "",
        "rule": [
            "d7068"
        ]
    },
    {
        "instruction": "",
        "id": "q7069",
        "input": "get windows and ram in python",
        "output": "",
        "rule": [
            "d7069"
        ]
    },
    {
        "instruction": "",
        "id": "q7070",
        "input": "python json load u",
        "output": "",
        "rule": [
            "d7070"
        ]
    },
    {
        "instruction": "",
        "id": "q7071",
        "input": "get word frequency from file python",
        "output": "",
        "rule": [
            "d7071"
        ]
    },
    {
        "instruction": "",
        "id": "q7072",
        "input": "git rid of box around legend python",
        "output": "",
        "rule": [
            "d7072"
        ]
    },
    {
        "instruction": "",
        "id": "q7073",
        "input": "python json loads is string not dict",
        "output": "",
        "rule": [
            "d7073"
        ]
    },
    {
        "instruction": "",
        "id": "q7074",
        "input": "giving widget the focus in python",
        "output": "",
        "rule": [
            "d7074"
        ]
    },
    {
        "instruction": "",
        "id": "q7075",
        "input": "global fitting exponential python",
        "output": "",
        "rule": [
            "d7075"
        ]
    },
    {
        "instruction": "",
        "id": "q7076",
        "input": "python json null instead of none",
        "output": "",
        "rule": [
            "d7076"
        ]
    },
    {
        "instruction": "",
        "id": "q7077",
        "input": "global font type python",
        "output": "",
        "rule": [
            "d7077"
        ]
    },
    {
        "instruction": "",
        "id": "q7078",
        "input": "python json parse to attributes",
        "output": "",
        "rule": [
            "d7078"
        ]
    },
    {
        "instruction": "",
        "id": "q7079",
        "input": "go back to parent directory in python",
        "output": "",
        "rule": [
            "d7079"
        ]
    },
    {
        "instruction": "",
        "id": "q7080",
        "input": "python judge if is numeric",
        "output": "",
        "rule": [
            "d7080"
        ]
    },
    {
        "instruction": "",
        "id": "q7081",
        "input": "good naming convention for functions in python",
        "output": "",
        "rule": [
            "d7081"
        ]
    },
    {
        "instruction": "",
        "id": "q7082",
        "input": "python judge matrix is identity matrix",
        "output": "",
        "rule": [
            "d7082"
        ]
    },
    {
        "instruction": "",
        "id": "q7083",
        "input": "grabbing certain box pixels in array python",
        "output": "",
        "rule": [
            "d7083"
        ]
    },
    {
        "instruction": "",
        "id": "q7084",
        "input": "python judge whether a file is used",
        "output": "",
        "rule": [
            "d7084"
        ]
    },
    {
        "instruction": "",
        "id": "q7085",
        "input": "graph with adjacency matrix and python",
        "output": "",
        "rule": [
            "d7085"
        ]
    },
    {
        "instruction": "",
        "id": "q7086",
        "input": "python kill signal without break",
        "output": "",
        "rule": [
            "d7086"
        ]
    },
    {
        "instruction": "",
        "id": "q7087",
        "input": "greatest common divisor of three numbers python",
        "output": "",
        "rule": [
            "d7087"
        ]
    },
    {
        "instruction": "",
        "id": "q7088",
        "input": "python kivy change background color",
        "output": "",
        "rule": [
            "d7088"
        ]
    },
    {
        "instruction": "",
        "id": "q7089",
        "input": "hash of a dictionary python",
        "output": "",
        "rule": [
            "d7089"
        ]
    },
    {
        "instruction": "",
        "id": "q7090",
        "input": "python labelencoder with onehotencoder",
        "output": "",
        "rule": [
            "d7090"
        ]
    },
    {
        "instruction": "",
        "id": "q7091",
        "input": "hash out multiple lines python",
        "output": "",
        "rule": [
            "d7091"
        ]
    },
    {
        "instruction": "",
        "id": "q7092",
        "input": "have a datetime field, get the first day of the month in python",
        "output": "",
        "rule": [
            "d7092"
        ]
    },
    {
        "instruction": "",
        "id": "q7093",
        "input": "python ldap compare two objects",
        "output": "",
        "rule": [
            "d7093"
        ]
    },
    {
        "instruction": "",
        "id": "q7094",
        "input": "have not empty check python",
        "output": "",
        "rule": [
            "d7094"
        ]
    },
    {
        "instruction": "",
        "id": "q7095",
        "input": "python leading zero series",
        "output": "",
        "rule": [
            "d7095"
        ]
    },
    {
        "instruction": "",
        "id": "q7096",
        "input": "heap max value python",
        "output": "",
        "rule": [
            "d7096"
        ]
    },
    {
        "instruction": "",
        "id": "q7097",
        "input": "python leapyear return number of days for given month/year",
        "output": "",
        "rule": [
            "d7097"
        ]
    },
    {
        "instruction": "",
        "id": "q7098",
        "input": "heapify not working python",
        "output": "",
        "rule": [
            "d7098"
        ]
    },
    {
        "instruction": "",
        "id": "q7099",
        "input": "python left to right or right to left evaluation",
        "output": "",
        "rule": [
            "d7099"
        ]
    },
    {
        "instruction": "",
        "id": "q7100",
        "input": "hide a window in wx python",
        "output": "",
        "rule": [
            "d7100"
        ]
    },
    {
        "instruction": "",
        "id": "q7101",
        "input": "python length of each item in data frame column",
        "output": "",
        "rule": [
            "d7101"
        ]
    },
    {
        "instruction": "",
        "id": "q7102",
        "input": "hierarchical print children python",
        "output": "",
        "rule": [
            "d7102"
        ]
    },
    {
        "instruction": "",
        "id": "q7103",
        "input": "python limit time for function",
        "output": "",
        "rule": [
            "d7103"
        ]
    },
    {
        "instruction": "",
        "id": "q7104",
        "input": "how can i automatically create a string of a particular length python",
        "output": "",
        "rule": [
            "d7104"
        ]
    },
    {
        "instruction": "",
        "id": "q7105",
        "input": "python limiting decimal places rounding",
        "output": "",
        "rule": [
            "d7105"
        ]
    },
    {
        "instruction": "",
        "id": "q7106",
        "input": "how can i scale numbers to a number between 0 and 1 in python",
        "output": "",
        "rule": [
            "d7106"
        ]
    },
    {
        "instruction": "",
        "id": "q7107",
        "input": "python linalg norm for 3d",
        "output": "",
        "rule": [
            "d7107"
        ]
    },
    {
        "instruction": "",
        "id": "q7108",
        "input": "how can we implement stack in python with including libray file",
        "output": "",
        "rule": [
            "d7108"
        ]
    },
    {
        "instruction": "",
        "id": "q7109",
        "input": "python list check for not null",
        "output": "",
        "rule": [
            "d7109"
        ]
    },
    {
        "instruction": "",
        "id": "q7110",
        "input": "how can we know encoding of a file in python",
        "output": "",
        "rule": [
            "d7110"
        ]
    },
    {
        "instruction": "",
        "id": "q7111",
        "input": "python list filter nont none",
        "output": "",
        "rule": [
            "d7111"
        ]
    },
    {
        "instruction": "",
        "id": "q7112",
        "input": "how develop network proxy in python",
        "output": "",
        "rule": [
            "d7112"
        ]
    },
    {
        "instruction": "",
        "id": "q7113",
        "input": "python list get with default",
        "output": "",
        "rule": [
            "d7113"
        ]
    },
    {
        "instruction": "",
        "id": "q7114",
        "input": "how do i check for a value in a column for executing tasks in python",
        "output": "",
        "rule": [
            "d7114"
        ]
    },
    {
        "instruction": "",
        "id": "q7115",
        "input": "python list has no attribute reshape",
        "output": "",
        "rule": [
            "d7115"
        ]
    },
    {
        "instruction": "",
        "id": "q7116",
        "input": "how do i count the number of records in a python table",
        "output": "",
        "rule": [
            "d7116"
        ]
    },
    {
        "instruction": "",
        "id": "q7117",
        "input": "python list of objects to dictionary",
        "output": "",
        "rule": [
            "d7117"
        ]
    },
    {
        "instruction": "",
        "id": "q7118",
        "input": "how do i encode a string to a url python",
        "output": "",
        "rule": [
            "d7118"
        ]
    },
    {
        "instruction": "",
        "id": "q7119",
        "input": "how do i recognize python as an internal or external command",
        "output": "",
        "rule": [
            "d7119"
        ]
    },
    {
        "instruction": "",
        "id": "q7120",
        "input": "python list sort and unique",
        "output": "",
        "rule": [
            "d7120"
        ]
    },
    {
        "instruction": "",
        "id": "q7121",
        "input": "how do i store as a list in python",
        "output": "",
        "rule": [
            "d7121"
        ]
    },
    {
        "instruction": "",
        "id": "q7122",
        "input": "python list tostring to list",
        "output": "",
        "rule": [
            "d7122"
        ]
    },
    {
        "instruction": "",
        "id": "q7123",
        "input": "how do i write a python dictionary to a csv file",
        "output": "",
        "rule": [
            "d7123"
        ]
    },
    {
        "instruction": "",
        "id": "q7124",
        "input": "python list with no repeated",
        "output": "",
        "rule": [
            "d7124"
        ]
    },
    {
        "instruction": "",
        "id": "q7125",
        "input": "how do i write natural logarithm in python",
        "output": "",
        "rule": [
            "d7125"
        ]
    },
    {
        "instruction": "",
        "id": "q7126",
        "input": "python load hdf5 to dict",
        "output": "",
        "rule": [
            "d7126"
        ]
    },
    {
        "instruction": "",
        "id": "q7127",
        "input": "how do you create an hash of value in python",
        "output": "",
        "rule": [
            "d7127"
        ]
    },
    {
        "instruction": "",
        "id": "q7128",
        "input": "python load in a text file",
        "output": "",
        "rule": [
            "d7128"
        ]
    },
    {
        "instruction": "",
        "id": "q7129",
        "input": "how do you do deepcopy in python",
        "output": "",
        "rule": [
            "d7129"
        ]
    },
    {
        "instruction": "",
        "id": "q7130",
        "input": "python load json arry from file",
        "output": "",
        "rule": [
            "d7130"
        ]
    },
    {
        "instruction": "",
        "id": "q7131",
        "input": "how do you save something as a python file",
        "output": "",
        "rule": [
            "d7131"
        ]
    },
    {
        "instruction": "",
        "id": "q7132",
        "input": "python load json from a json formatted string",
        "output": "",
        "rule": [
            "d7132"
        ]
    },
    {
        "instruction": "",
        "id": "q7133",
        "input": "how hard to port python to android",
        "output": "",
        "rule": [
            "d7133"
        ]
    },
    {
        "instruction": "",
        "id": "q7134",
        "input": "python load text of file",
        "output": "",
        "rule": [
            "d7134"
        ]
    },
    {
        "instruction": "",
        "id": "q7135",
        "input": "how in python change text to title case",
        "output": "",
        "rule": [
            "d7135"
        ]
    },
    {
        "instruction": "",
        "id": "q7136",
        "input": "python locals from stack frame",
        "output": "",
        "rule": [
            "d7136"
        ]
    },
    {
        "instruction": "",
        "id": "q7137",
        "input": "how is the memory efficiency of python mmap",
        "output": "",
        "rule": [
            "d7137"
        ]
    },
    {
        "instruction": "",
        "id": "q7138",
        "input": "python localtime with timezone from unix timestamp",
        "output": "",
        "rule": [
            "d7138"
        ]
    },
    {
        "instruction": "",
        "id": "q7139",
        "input": "how randomly select element on 2d array in python",
        "output": "",
        "rule": [
            "d7139"
        ]
    },
    {
        "instruction": "",
        "id": "q7140",
        "input": "python lock non blocking",
        "output": "",
        "rule": [
            "d7140"
        ]
    },
    {
        "instruction": "",
        "id": "q7141",
        "input": "how ro replace a letter in a user input with a underscore in python",
        "output": "",
        "rule": [
            "d7141"
        ]
    },
    {
        "instruction": "",
        "id": "q7142",
        "input": "python lock with blocking",
        "output": "",
        "rule": [
            "d7142"
        ]
    },
    {
        "instruction": "",
        "id": "q7143",
        "input": "how to access 2d array python diagonally",
        "output": "",
        "rule": [
            "d7143"
        ]
    },
    {
        "instruction": "",
        "id": "q7144",
        "input": "python log exact request",
        "output": "",
        "rule": [
            "d7144"
        ]
    },
    {
        "instruction": "",
        "id": "q7145",
        "input": "how to access files on server python",
        "output": "",
        "rule": [
            "d7145"
        ]
    },
    {
        "instruction": "",
        "id": "q7146",
        "input": "python log file don't wrap lines",
        "output": "",
        "rule": [
            "d7146"
        ]
    },
    {
        "instruction": "",
        "id": "q7147",
        "input": "how to access multip dimensional arrays in python",
        "output": "",
        "rule": [
            "d7147"
        ]
    },
    {
        "instruction": "",
        "id": "q7148",
        "input": "python logger close remove handler",
        "output": "",
        "rule": [
            "d7148"
        ]
    },
    {
        "instruction": "",
        "id": "q7149",
        "input": "python logger info not printing",
        "output": "",
        "rule": [
            "d7149"
        ]
    },
    {
        "instruction": "",
        "id": "q7150",
        "input": "how to activate conda environment in command for python",
        "output": "",
        "rule": [
            "d7150"
        ]
    },
    {
        "instruction": "",
        "id": "q7151",
        "input": "python logger not writing to file after first messages",
        "output": "",
        "rule": [
            "d7151"
        ]
    },
    {
        "instruction": "",
        "id": "q7152",
        "input": "how to activate conda environment in python script",
        "output": "",
        "rule": [
            "d7152"
        ]
    },
    {
        "instruction": "",
        "id": "q7153",
        "input": "python logger setup and tear down in unit tests",
        "output": "",
        "rule": [
            "d7153"
        ]
    },
    {
        "instruction": "",
        "id": "q7154",
        "input": "how to add a validation for input strings in python",
        "output": "",
        "rule": [
            "d7154"
        ]
    },
    {
        "instruction": "",
        "id": "q7155",
        "input": "python loggin env variable",
        "output": "",
        "rule": [
            "d7155"
        ]
    },
    {
        "instruction": "",
        "id": "q7156",
        "input": "how to add an indented block python",
        "output": "",
        "rule": [
            "d7156"
        ]
    },
    {
        "instruction": "",
        "id": "q7157",
        "input": "python logging can not create file",
        "output": "",
        "rule": [
            "d7157"
        ]
    },
    {
        "instruction": "",
        "id": "q7158",
        "input": "how to add arrows to plot in python",
        "output": "",
        "rule": [
            "d7158"
        ]
    },
    {
        "instruction": "",
        "id": "q7159",
        "input": "python logging clear handlers",
        "output": "",
        "rule": [
            "d7159"
        ]
    },
    {
        "instruction": "",
        "id": "q7160",
        "input": "how to add authentication token to a post request python",
        "output": "",
        "rule": [
            "d7160"
        ]
    },
    {
        "instruction": "",
        "id": "q7161",
        "input": "python logging doesn't write to file unless it already exists",
        "output": "",
        "rule": [
            "d7161"
        ]
    },
    {
        "instruction": "",
        "id": "q7162",
        "input": "how to add axes title to subplot python",
        "output": "",
        "rule": [
            "d7162"
        ]
    },
    {
        "instruction": "",
        "id": "q7163",
        "input": "python logging iterate all loggers",
        "output": "",
        "rule": [
            "d7163"
        ]
    },
    {
        "instruction": "",
        "id": "q7164",
        "input": "how to add bounding box to image python",
        "output": "",
        "rule": [
            "d7164"
        ]
    },
    {
        "instruction": "",
        "id": "q7165",
        "input": "python logging log to file without print",
        "output": "",
        "rule": [
            "d7165"
        ]
    },
    {
        "instruction": "",
        "id": "q7166",
        "input": "how to add keyboardinterrupt signal handler in python",
        "output": "",
        "rule": [
            "d7166"
        ]
    },
    {
        "instruction": "",
        "id": "q7167",
        "input": "python logging not saving",
        "output": "",
        "rule": [
            "d7167"
        ]
    },
    {
        "instruction": "",
        "id": "q7168",
        "input": "how to add lines to 2d arrays python",
        "output": "",
        "rule": [
            "d7168"
        ]
    },
    {
        "instruction": "",
        "id": "q7169",
        "input": "python logging print and save",
        "output": "",
        "rule": [
            "d7169"
        ]
    },
    {
        "instruction": "",
        "id": "q7170",
        "input": "python logging queue handler",
        "output": "",
        "rule": [
            "d7170"
        ]
    },
    {
        "instruction": "",
        "id": "q7171",
        "input": "how to add percentage success bar in python",
        "output": "",
        "rule": [
            "d7171"
        ]
    },
    {
        "instruction": "",
        "id": "q7172",
        "input": "python long list of #define constants",
        "output": "",
        "rule": [
            "d7172"
        ]
    },
    {
        "instruction": "",
        "id": "q7173",
        "input": "how to add two polynomials in python",
        "output": "",
        "rule": [
            "d7173"
        ]
    },
    {
        "instruction": "",
        "id": "q7174",
        "input": "how to add white gaussian noise to an array with python",
        "output": "",
        "rule": [
            "d7174"
        ]
    },
    {
        "instruction": "",
        "id": "q7175",
        "input": "python lookup file size",
        "output": "",
        "rule": [
            "d7175"
        ]
    },
    {
        "instruction": "",
        "id": "q7176",
        "input": "how to allow connections to ssl sites without certs python request",
        "output": "",
        "rule": [
            "d7176"
        ]
    },
    {
        "instruction": "",
        "id": "q7177",
        "input": "python main thread how to kill daemon thread",
        "output": "",
        "rule": [
            "d7177"
        ]
    },
    {
        "instruction": "",
        "id": "q7178",
        "input": "how to ask for an input on python3",
        "output": "",
        "rule": [
            "d7178"
        ]
    },
    {
        "instruction": "",
        "id": "q7179",
        "input": "python make a string mysql safe",
        "output": "",
        "rule": [
            "d7179"
        ]
    },
    {
        "instruction": "",
        "id": "q7180",
        "input": "how to bin intervals for a histagram in python",
        "output": "",
        "rule": [
            "d7180"
        ]
    },
    {
        "instruction": "",
        "id": "q7181",
        "input": "python make dict keys a set",
        "output": "",
        "rule": [
            "d7181"
        ]
    },
    {
        "instruction": "",
        "id": "q7182",
        "input": "how to bold somethign in python",
        "output": "",
        "rule": [
            "d7182"
        ]
    },
    {
        "instruction": "",
        "id": "q7183",
        "input": "how to break a string up into a tuple in python",
        "output": "",
        "rule": [
            "d7183"
        ]
    },
    {
        "instruction": "",
        "id": "q7184",
        "input": "python make nan values 0",
        "output": "",
        "rule": [
            "d7184"
        ]
    },
    {
        "instruction": "",
        "id": "q7185",
        "input": "how to calculate accuracy of a model with train and test data python",
        "output": "",
        "rule": [
            "d7185"
        ]
    },
    {
        "instruction": "",
        "id": "q7186",
        "input": "python making url string safe",
        "output": "",
        "rule": [
            "d7186"
        ]
    },
    {
        "instruction": "",
        "id": "q7187",
        "input": "how to calculate center of a bounding box python",
        "output": "",
        "rule": [
            "d7187"
        ]
    },
    {
        "instruction": "",
        "id": "q7188",
        "input": "python manually delete object",
        "output": "",
        "rule": [
            "d7188"
        ]
    },
    {
        "instruction": "",
        "id": "q7189",
        "input": "how to calculate eigen values python",
        "output": "",
        "rule": [
            "d7189"
        ]
    },
    {
        "instruction": "",
        "id": "q7190",
        "input": "python many to many fied",
        "output": "",
        "rule": [
            "d7190"
        ]
    },
    {
        "instruction": "",
        "id": "q7191",
        "input": "how to calculate logprior in python",
        "output": "",
        "rule": [
            "d7191"
        ]
    },
    {
        "instruction": "",
        "id": "q7192",
        "input": "python match a series of datetimes",
        "output": "",
        "rule": [
            "d7192"
        ]
    },
    {
        "instruction": "",
        "id": "q7193",
        "input": "how to call an index from a python df",
        "output": "",
        "rule": [
            "d7193"
        ]
    },
    {
        "instruction": "",
        "id": "q7194",
        "input": "python matplot set ylim",
        "output": "",
        "rule": [
            "d7194"
        ]
    },
    {
        "instruction": "",
        "id": "q7195",
        "input": "how to call get and print out its output from a rest api in python",
        "output": "",
        "rule": [
            "d7195"
        ]
    },
    {
        "instruction": "",
        "id": "q7196",
        "input": "python matplotlib img uint8 to uint16",
        "output": "",
        "rule": [
            "d7196"
        ]
    },
    {
        "instruction": "",
        "id": "q7197",
        "input": "how to cancel code python",
        "output": "",
        "rule": [
            "d7197"
        ]
    },
    {
        "instruction": "",
        "id": "q7198",
        "input": "python matplotlib interactive leave figure open",
        "output": "",
        "rule": [
            "d7198"
        ]
    },
    {
        "instruction": "",
        "id": "q7199",
        "input": "how to capitalize first word in python string",
        "output": "",
        "rule": [
            "d7199"
        ]
    },
    {
        "instruction": "",
        "id": "q7200",
        "input": "python matplotlib prevent figure window from appearing",
        "output": "",
        "rule": [
            "d7200"
        ]
    },
    {
        "instruction": "",
        "id": "q7201",
        "input": "how to capitalize last letter of an input string python",
        "output": "",
        "rule": [
            "d7201"
        ]
    },
    {
        "instruction": "",
        "id": "q7202",
        "input": "python matplotlib pyplot aspect ratio square",
        "output": "",
        "rule": [
            "d7202"
        ]
    },
    {
        "instruction": "",
        "id": "q7203",
        "input": "how to capitalize some letters in python",
        "output": "",
        "rule": [
            "d7203"
        ]
    },
    {
        "instruction": "",
        "id": "q7204",
        "input": "python matplotlib remove from legend",
        "output": "",
        "rule": [
            "d7204"
        ]
    },
    {
        "instruction": "",
        "id": "q7205",
        "input": "how to capitalize the first letter of userinput in python",
        "output": "",
        "rule": [
            "d7205"
        ]
    },
    {
        "instruction": "",
        "id": "q7206",
        "input": "python matplotlib remove y axis",
        "output": "",
        "rule": [
            "d7206"
        ]
    },
    {
        "instruction": "",
        "id": "q7207",
        "input": "how to cast a variable as a float in python",
        "output": "",
        "rule": [
            "d7207"
        ]
    },
    {
        "instruction": "",
        "id": "q7208",
        "input": "python matplotlib save svg figure",
        "output": "",
        "rule": [
            "d7208"
        ]
    },
    {
        "instruction": "",
        "id": "q7209",
        "input": "python matplotlib set scale to auto",
        "output": "",
        "rule": [
            "d7209"
        ]
    },
    {
        "instruction": "",
        "id": "q7210",
        "input": "how to center align text in python 3",
        "output": "",
        "rule": [
            "d7210"
        ]
    },
    {
        "instruction": "",
        "id": "q7211",
        "input": "python matplotlib set xlim",
        "output": "",
        "rule": [
            "d7211"
        ]
    },
    {
        "instruction": "",
        "id": "q7212",
        "input": "how to change an list into a tuple in python",
        "output": "",
        "rule": [
            "d7212"
        ]
    },
    {
        "instruction": "",
        "id": "q7213",
        "input": "python matplotlib wrap latex string",
        "output": "",
        "rule": [
            "d7213"
        ]
    },
    {
        "instruction": "",
        "id": "q7214",
        "input": "how to change array of strings to list of strings in python",
        "output": "",
        "rule": [
            "d7214"
        ]
    },
    {
        "instruction": "",
        "id": "q7215",
        "input": "python matrix 3d rotation",
        "output": "",
        "rule": [
            "d7215"
        ]
    },
    {
        "instruction": "",
        "id": "q7216",
        "input": "how to change colour sys python",
        "output": "",
        "rule": [
            "d7216"
        ]
    },
    {
        "instruction": "",
        "id": "q7217",
        "input": "python max to return 0 if list is empty",
        "output": "",
        "rule": [
            "d7217"
        ]
    },
    {
        "instruction": "",
        "id": "q7218",
        "input": "how to change column name in data frame of python+",
        "output": "",
        "rule": [
            "d7218"
        ]
    },
    {
        "instruction": "",
        "id": "q7219",
        "input": "python memory leak if thread join not called",
        "output": "",
        "rule": [
            "d7219"
        ]
    },
    {
        "instruction": "",
        "id": "q7220",
        "input": "how to change file modified date in python",
        "output": "",
        "rule": [
            "d7220"
        ]
    },
    {
        "instruction": "",
        "id": "q7221",
        "input": "python memory usage for a function",
        "output": "",
        "rule": [
            "d7221"
        ]
    },
    {
        "instruction": "",
        "id": "q7222",
        "input": "how to change int values to time datatype in python",
        "output": "",
        "rule": [
            "d7222"
        ]
    },
    {
        "instruction": "",
        "id": "q7223",
        "input": "python merge dict nest",
        "output": "",
        "rule": [
            "d7223"
        ]
    },
    {
        "instruction": "",
        "id": "q7224",
        "input": "how to change list type python",
        "output": "",
        "rule": [
            "d7224"
        ]
    },
    {
        "instruction": "",
        "id": "q7225",
        "input": "how to change string to date formate python",
        "output": "",
        "rule": [
            "d7225"
        ]
    },
    {
        "instruction": "",
        "id": "q7226",
        "input": "how to change string to object in python",
        "output": "",
        "rule": [
            "d7226"
        ]
    },
    {
        "instruction": "",
        "id": "q7227",
        "input": "python minidom node element getattribute",
        "output": "",
        "rule": [
            "d7227"
        ]
    },
    {
        "instruction": "",
        "id": "q7228",
        "input": "how to change the attribute of an object python",
        "output": "",
        "rule": [
            "d7228"
        ]
    },
    {
        "instruction": "",
        "id": "q7229",
        "input": "python mix**kwargs with default value kwargs",
        "output": "",
        "rule": [
            "d7229"
        ]
    },
    {
        "instruction": "",
        "id": "q7230",
        "input": "python mongo concatenate value in update",
        "output": "",
        "rule": [
            "d7230"
        ]
    },
    {
        "instruction": "",
        "id": "q7231",
        "input": "how to change the name of a key in python",
        "output": "",
        "rule": [
            "d7231"
        ]
    },
    {
        "instruction": "",
        "id": "q7232",
        "input": "python mongo db cursor to json",
        "output": "",
        "rule": [
            "d7232"
        ]
    },
    {
        "instruction": "",
        "id": "q7233",
        "input": "how to change the strings to float in python",
        "output": "",
        "rule": [
            "d7233"
        ]
    },
    {
        "instruction": "",
        "id": "q7234",
        "input": "python mongo engine connect default database not set",
        "output": "",
        "rule": [
            "d7234"
        ]
    },
    {
        "instruction": "",
        "id": "q7235",
        "input": "how to change the type of a column from series into list in python",
        "output": "",
        "rule": [
            "d7235"
        ]
    },
    {
        "instruction": "",
        "id": "q7236",
        "input": "python mouse left button",
        "output": "",
        "rule": [
            "d7236"
        ]
    },
    {
        "instruction": "",
        "id": "q7237",
        "input": "how to check a variable consistently in python",
        "output": "",
        "rule": [
            "d7237"
        ]
    },
    {
        "instruction": "",
        "id": "q7238",
        "input": "python move down a line without ruhnning code",
        "output": "",
        "rule": [
            "d7238"
        ]
    },
    {
        "instruction": "",
        "id": "q7239",
        "input": "how to check collection type in python",
        "output": "",
        "rule": [
            "d7239"
        ]
    },
    {
        "instruction": "",
        "id": "q7240",
        "input": "python mplot3d axes3d enlarge",
        "output": "",
        "rule": [
            "d7240"
        ]
    },
    {
        "instruction": "",
        "id": "q7241",
        "input": "python multiprocessing 100k lines file",
        "output": "",
        "rule": [
            "d7241"
        ]
    },
    {
        "instruction": "",
        "id": "q7242",
        "input": "how to check for valid url in python",
        "output": "",
        "rule": [
            "d7242"
        ]
    },
    {
        "instruction": "",
        "id": "q7243",
        "input": "python multiprocessing how to take only one iterable out of many",
        "output": "",
        "rule": [
            "d7243"
        ]
    },
    {
        "instruction": "",
        "id": "q7244",
        "input": "how to check gzip compression using python",
        "output": "",
        "rule": [
            "d7244"
        ]
    },
    {
        "instruction": "",
        "id": "q7245",
        "input": "python multiprocessing map imap",
        "output": "",
        "rule": [
            "d7245"
        ]
    },
    {
        "instruction": "",
        "id": "q7246",
        "input": "how to check if 2 strings have the same characters python",
        "output": "",
        "rule": [
            "d7246"
        ]
    },
    {
        "instruction": "",
        "id": "q7247",
        "input": "python multiprocessing pool apply args",
        "output": "",
        "rule": [
            "d7247"
        ]
    },
    {
        "instruction": "",
        "id": "q7248",
        "input": "how to check if a field is null in python",
        "output": "",
        "rule": [
            "d7248"
        ]
    },
    {
        "instruction": "",
        "id": "q7249",
        "input": "python multiprocessing queue dict or list or tuple",
        "output": "",
        "rule": [
            "d7249"
        ]
    },
    {
        "instruction": "",
        "id": "q7250",
        "input": "how to check if a tag is empty is xml python",
        "output": "",
        "rule": [
            "d7250"
        ]
    },
    {
        "instruction": "",
        "id": "q7251",
        "input": "python multiprocessing terminate in cluster",
        "output": "",
        "rule": [
            "d7251"
        ]
    },
    {
        "instruction": "",
        "id": "q7252",
        "input": "how to check if a value is present in every index in array, python",
        "output": "",
        "rule": [
            "d7252"
        ]
    },
    {
        "instruction": "",
        "id": "q7253",
        "input": "python multirpocessing map with multi params",
        "output": "",
        "rule": [
            "d7253"
        ]
    },
    {
        "instruction": "",
        "id": "q7254",
        "input": "how to check if all elements in a list are the same python",
        "output": "",
        "rule": [
            "d7254"
        ]
    },
    {
        "instruction": "",
        "id": "q7255",
        "input": "python multivariate normal distribution 3 sigma",
        "output": "",
        "rule": [
            "d7255"
        ]
    },
    {
        "instruction": "",
        "id": "q7256",
        "input": "how to check if all items are same in list in python",
        "output": "",
        "rule": [
            "d7256"
        ]
    },
    {
        "instruction": "",
        "id": "q7257",
        "input": "python must construct a qapplication before qwidget",
        "output": "",
        "rule": [
            "d7257"
        ]
    },
    {
        "instruction": "",
        "id": "q7258",
        "input": "python mysql cursor execute mutli query",
        "output": "",
        "rule": [
            "d7258"
        ]
    },
    {
        "instruction": "",
        "id": "q7259",
        "input": "how to check if file is in folder python",
        "output": "",
        "rule": [
            "d7259"
        ]
    },
    {
        "instruction": "",
        "id": "q7260",
        "input": "python namedtuple fromt struct",
        "output": "",
        "rule": [
            "d7260"
        ]
    },
    {
        "instruction": "",
        "id": "q7261",
        "input": "how to check if it is datetime in python",
        "output": "",
        "rule": [
            "d7261"
        ]
    },
    {
        "instruction": "",
        "id": "q7262",
        "input": "python natural log entire array",
        "output": "",
        "rule": [
            "d7262"
        ]
    },
    {
        "instruction": "",
        "id": "q7263",
        "input": "how to check if set is subset of another python",
        "output": "",
        "rule": [
            "d7263"
        ]
    },
    {
        "instruction": "",
        "id": "q7264",
        "input": "how to check if value in dictionary python is the lowercased verson of the key",
        "output": "",
        "rule": [
            "d7264"
        ]
    },
    {
        "instruction": "",
        "id": "q7265",
        "input": "python negating a value",
        "output": "",
        "rule": [
            "d7265"
        ]
    },
    {
        "instruction": "",
        "id": "q7266",
        "input": "how to check in python if a xml string is correct",
        "output": "",
        "rule": [
            "d7266"
        ]
    },
    {
        "instruction": "",
        "id": "q7267",
        "input": "python nested list flatten out",
        "output": "",
        "rule": [
            "d7267"
        ]
    },
    {
        "instruction": "",
        "id": "q7268",
        "input": "how to check number comes in the power of 2 in python",
        "output": "",
        "rule": [
            "d7268"
        ]
    },
    {
        "instruction": "",
        "id": "q7269",
        "input": "python networkx save graph",
        "output": "",
        "rule": [
            "d7269"
        ]
    },
    {
        "instruction": "",
        "id": "q7270",
        "input": "how to check punctuation in string in python3",
        "output": "",
        "rule": [
            "d7270"
        ]
    },
    {
        "instruction": "",
        "id": "q7271",
        "input": "python new line in comment",
        "output": "",
        "rule": [
            "d7271"
        ]
    },
    {
        "instruction": "",
        "id": "q7272",
        "input": "how to check the accuracy of a model in python for continuous values",
        "output": "",
        "rule": [
            "d7272"
        ]
    },
    {
        "instruction": "",
        "id": "q7273",
        "input": "python new lines in doc string",
        "output": "",
        "rule": [
            "d7273"
        ]
    },
    {
        "instruction": "",
        "id": "q7274",
        "input": "how to check the current firectory in python",
        "output": "",
        "rule": [
            "d7274"
        ]
    },
    {
        "instruction": "",
        "id": "q7275",
        "input": "python noise to signam",
        "output": "",
        "rule": [
            "d7275"
        ]
    },
    {
        "instruction": "",
        "id": "q7276",
        "input": "how to check whether data is in between a sensible range in python",
        "output": "",
        "rule": [
            "d7276"
        ]
    },
    {
        "instruction": "",
        "id": "q7277",
        "input": "python non empty line count",
        "output": "",
        "rule": [
            "d7277"
        ]
    },
    {
        "instruction": "",
        "id": "q7278",
        "input": "how to check windows filesystem with python",
        "output": "",
        "rule": [
            "d7278"
        ]
    },
    {
        "instruction": "",
        "id": "q7279",
        "input": "python non unique list values",
        "output": "",
        "rule": [
            "d7279"
        ]
    },
    {
        "instruction": "",
        "id": "q7280",
        "input": "how to clear a canvas python",
        "output": "",
        "rule": [
            "d7280"
        ]
    },
    {
        "instruction": "",
        "id": "q7281",
        "input": "python nonetype object unsubscriptable",
        "output": "",
        "rule": [
            "d7281"
        ]
    },
    {
        "instruction": "",
        "id": "q7282",
        "input": "how to clear a field in python",
        "output": "",
        "rule": [
            "d7282"
        ]
    },
    {
        "instruction": "",
        "id": "q7283",
        "input": "python normal dist given mu sigma",
        "output": "",
        "rule": [
            "d7283"
        ]
    },
    {
        "instruction": "",
        "id": "q7284",
        "input": "how to clear canvas in python",
        "output": "",
        "rule": [
            "d7284"
        ]
    },
    {
        "instruction": "",
        "id": "q7285",
        "input": "python normalize a 2d array",
        "output": "",
        "rule": [
            "d7285"
        ]
    },
    {
        "instruction": "",
        "id": "q7286",
        "input": "how to clear python canvas",
        "output": "",
        "rule": [
            "d7286"
        ]
    },
    {
        "instruction": "",
        "id": "q7287",
        "input": "python normalize by column name",
        "output": "",
        "rule": [
            "d7287"
        ]
    },
    {
        "instruction": "",
        "id": "q7288",
        "input": "how to click on next page python",
        "output": "",
        "rule": [
            "d7288"
        ]
    },
    {
        "instruction": "",
        "id": "q7289",
        "input": "python nose run specific test function",
        "output": "",
        "rule": [
            "d7289"
        ]
    },
    {
        "instruction": "",
        "id": "q7290",
        "input": "how to code the similarity between strings in python",
        "output": "",
        "rule": [
            "d7290"
        ]
    },
    {
        "instruction": "",
        "id": "q7291",
        "input": "how to compare non identical set python",
        "output": "",
        "rule": [
            "d7291"
        ]
    },
    {
        "instruction": "",
        "id": "q7292",
        "input": "python np array to string",
        "output": "",
        "rule": [
            "d7292"
        ]
    },
    {
        "instruction": "",
        "id": "q7293",
        "input": "how to compile c++ for python",
        "output": "",
        "rule": [
            "d7293"
        ]
    },
    {
        "instruction": "",
        "id": "q7294",
        "input": "python number of days in given year",
        "output": "",
        "rule": [
            "d7294"
        ]
    },
    {
        "instruction": "",
        "id": "q7295",
        "input": "how to compress bytes python",
        "output": "",
        "rule": [
            "d7295"
        ]
    },
    {
        "instruction": "",
        "id": "q7296",
        "input": "python numpy array from bytes",
        "output": "",
        "rule": [
            "d7296"
        ]
    },
    {
        "instruction": "",
        "id": "q7297",
        "input": "how to connect to aws s3 using url from python",
        "output": "",
        "rule": [
            "d7297"
        ]
    },
    {
        "instruction": "",
        "id": "q7298",
        "input": "python numpy array from items",
        "output": "",
        "rule": [
            "d7298"
        ]
    },
    {
        "instruction": "",
        "id": "q7299",
        "input": "how to conver integer to date in python",
        "output": "",
        "rule": [
            "d7299"
        ]
    },
    {
        "instruction": "",
        "id": "q7300",
        "input": "python numpy array sort return index",
        "output": "",
        "rule": [
            "d7300"
        ]
    },
    {
        "instruction": "",
        "id": "q7301",
        "input": "how to count as far as memory allows in python",
        "output": "",
        "rule": [
            "d7301"
        ]
    },
    {
        "instruction": "",
        "id": "q7302",
        "input": "python numpy array store string",
        "output": "",
        "rule": [
            "d7302"
        ]
    },
    {
        "instruction": "",
        "id": "q7303",
        "input": "python numpy average of minimum value in each column of array",
        "output": "",
        "rule": [
            "d7303"
        ]
    },
    {
        "instruction": "",
        "id": "q7304",
        "input": "python numpy fft magnitude",
        "output": "",
        "rule": [
            "d7304"
        ]
    },
    {
        "instruction": "",
        "id": "q7305",
        "input": "python numpy fromfile big endian",
        "output": "",
        "rule": [
            "d7305"
        ]
    },
    {
        "instruction": "",
        "id": "q7306",
        "input": "how to create a long string from a list python",
        "output": "",
        "rule": [
            "d7306"
        ]
    },
    {
        "instruction": "",
        "id": "q7307",
        "input": "python numpy how to specify dtype string length 32",
        "output": "",
        "rule": [
            "d7307"
        ]
    },
    {
        "instruction": "",
        "id": "q7308",
        "input": "how to create an exponential distribution not at zero in python",
        "output": "",
        "rule": [
            "d7308"
        ]
    },
    {
        "instruction": "",
        "id": "q7309",
        "input": "python numpy max axie",
        "output": "",
        "rule": [
            "d7309"
        ]
    },
    {
        "instruction": "",
        "id": "q7310",
        "input": "how to create histogram with bin in python",
        "output": "",
        "rule": [
            "d7310"
        ]
    },
    {
        "instruction": "",
        "id": "q7311",
        "input": "python numpy read fro file",
        "output": "",
        "rule": [
            "d7311"
        ]
    },
    {
        "instruction": "",
        "id": "q7312",
        "input": "how to create new log in python at run tim",
        "output": "",
        "rule": [
            "d7312"
        ]
    },
    {
        "instruction": "",
        "id": "q7313",
        "input": "python numpy unit vector",
        "output": "",
        "rule": [
            "d7313"
        ]
    },
    {
        "instruction": "",
        "id": "q7314",
        "input": "how to create np array from list in python",
        "output": "",
        "rule": [
            "d7314"
        ]
    },
    {
        "instruction": "",
        "id": "q7315",
        "input": "python oauth2 get token no auth",
        "output": "",
        "rule": [
            "d7315"
        ]
    },
    {
        "instruction": "",
        "id": "q7316",
        "input": "how to create wrapped socket in python",
        "output": "",
        "rule": [
            "d7316"
        ]
    },
    {
        "instruction": "",
        "id": "q7317",
        "input": "python object of type 'int32' is not json serializable",
        "output": "",
        "rule": [
            "d7317"
        ]
    },
    {
        "instruction": "",
        "id": "q7318",
        "input": "how to deal with kwargs python",
        "output": "",
        "rule": [
            "d7318"
        ]
    },
    {
        "instruction": "",
        "id": "q7319",
        "input": "python object of type bool has no len list length",
        "output": "",
        "rule": [
            "d7319"
        ]
    },
    {
        "instruction": "",
        "id": "q7320",
        "input": "how to define a empty data frame in python",
        "output": "",
        "rule": [
            "d7320"
        ]
    },
    {
        "instruction": "",
        "id": "q7321",
        "input": "python object of type date is not json serializable",
        "output": "",
        "rule": [
            "d7321"
        ]
    },
    {
        "instruction": "",
        "id": "q7322",
        "input": "how to define linear regression in python",
        "output": "",
        "rule": [
            "d7322"
        ]
    },
    {
        "instruction": "",
        "id": "q7323",
        "input": "python object of type textiowrapper is not json serializable",
        "output": "",
        "rule": [
            "d7323"
        ]
    },
    {
        "instruction": "",
        "id": "q7324",
        "input": "how to delete all elements in a set python",
        "output": "",
        "rule": [
            "d7324"
        ]
    },
    {
        "instruction": "",
        "id": "q7325",
        "input": "python object to json",
        "output": "",
        "rule": [
            "d7325"
        ]
    },
    {
        "instruction": "",
        "id": "q7326",
        "input": "how to delete index in python",
        "output": "",
        "rule": [
            "d7326"
        ]
    },
    {
        "instruction": "",
        "id": "q7327",
        "input": "python obmit hour seconds in timestamp",
        "output": "",
        "rule": [
            "d7327"
        ]
    },
    {
        "instruction": "",
        "id": "q7328",
        "input": "how to delete nodes from graphs python",
        "output": "",
        "rule": [
            "d7328"
        ]
    },
    {
        "instruction": "",
        "id": "q7329",
        "input": "python ols categorical regression",
        "output": "",
        "rule": [
            "d7329"
        ]
    },
    {
        "instruction": "",
        "id": "q7330",
        "input": "how to detect a palindrome word in python",
        "output": "",
        "rule": [
            "d7330"
        ]
    },
    {
        "instruction": "",
        "id": "q7331",
        "input": "python onehotencoder categorical values into feature",
        "output": "",
        "rule": [
            "d7331"
        ]
    },
    {
        "instruction": "",
        "id": "q7332",
        "input": "how to detect a word being a palindrome python",
        "output": "",
        "rule": [
            "d7332"
        ]
    },
    {
        "instruction": "",
        "id": "q7333",
        "input": "python open file with any encoding",
        "output": "",
        "rule": [
            "d7333"
        ]
    },
    {
        "instruction": "",
        "id": "q7334",
        "input": "how to detect the coordinates of the mouse python",
        "output": "",
        "rule": [
            "d7334"
        ]
    },
    {
        "instruction": "",
        "id": "q7335",
        "input": "python opencv image scale down",
        "output": "",
        "rule": [
            "d7335"
        ]
    },
    {
        "instruction": "",
        "id": "q7336",
        "input": "how to detect the encoding of a text file with python",
        "output": "",
        "rule": [
            "d7336"
        ]
    },
    {
        "instruction": "",
        "id": "q7337",
        "input": "python optionparser type date",
        "output": "",
        "rule": [
            "d7337"
        ]
    },
    {
        "instruction": "",
        "id": "q7338",
        "input": "how to do a column wise normalization in python",
        "output": "",
        "rule": [
            "d7338"
        ]
    },
    {
        "instruction": "",
        "id": "q7339",
        "input": "python order list by indices",
        "output": "",
        "rule": [
            "d7339"
        ]
    },
    {
        "instruction": "",
        "id": "q7340",
        "input": "how to do coordinates on python",
        "output": "",
        "rule": [
            "d7340"
        ]
    },
    {
        "instruction": "",
        "id": "q7341",
        "input": "python pad right side",
        "output": "",
        "rule": [
            "d7341"
        ]
    },
    {
        "instruction": "",
        "id": "q7342",
        "input": "how to do noise reduction in python",
        "output": "",
        "rule": [
            "d7342"
        ]
    },
    {
        "instruction": "",
        "id": "q7343",
        "input": "python pad with leading zeros in bitstrings",
        "output": "",
        "rule": [
            "d7343"
        ]
    },
    {
        "instruction": "",
        "id": "q7344",
        "input": "how to do width on python",
        "output": "",
        "rule": [
            "d7344"
        ]
    },
    {
        "instruction": "",
        "id": "q7345",
        "input": "python parse datetime from string with timezone",
        "output": "",
        "rule": [
            "d7345"
        ]
    },
    {
        "instruction": "",
        "id": "q7346",
        "input": "how to do you check if a value is in an array in python",
        "output": "",
        "rule": [
            "d7346"
        ]
    },
    {
        "instruction": "",
        "id": "q7347",
        "input": "python parse ip and port",
        "output": "",
        "rule": [
            "d7347"
        ]
    },
    {
        "instruction": "",
        "id": "q7348",
        "input": "how to efficiently return multiple values within a function in python",
        "output": "",
        "rule": [
            "d7348"
        ]
    },
    {
        "instruction": "",
        "id": "q7349",
        "input": "python parse markdown into elements",
        "output": "",
        "rule": [
            "d7349"
        ]
    },
    {
        "instruction": "",
        "id": "q7350",
        "input": "how to error an self in python",
        "output": "",
        "rule": [
            "d7350"
        ]
    },
    {
        "instruction": "",
        "id": "q7351",
        "input": "python parse markdown to read html",
        "output": "",
        "rule": [
            "d7351"
        ]
    },
    {
        "instruction": "",
        "id": "q7352",
        "input": "how to etermine accuracy of model python",
        "output": "",
        "rule": [
            "d7352"
        ]
    },
    {
        "instruction": "",
        "id": "q7353",
        "input": "python parse protobuf text file",
        "output": "",
        "rule": [
            "d7353"
        ]
    },
    {
        "instruction": "",
        "id": "q7354",
        "input": "how to exclude words from a dictionary loop python",
        "output": "",
        "rule": [
            "d7354"
        ]
    },
    {
        "instruction": "",
        "id": "q7355",
        "input": "python parse read xx/xx/xxxx datetime from string",
        "output": "",
        "rule": [
            "d7355"
        ]
    },
    {
        "instruction": "",
        "id": "q7356",
        "input": "how to execute a bash script in python",
        "output": "",
        "rule": [
            "d7356"
        ]
    },
    {
        "instruction": "",
        "id": "q7357",
        "input": "python parsing json args command line",
        "output": "",
        "rule": [
            "d7357"
        ]
    },
    {
        "instruction": "",
        "id": "q7358",
        "input": "how to execute shell commmands in python and return output",
        "output": "",
        "rule": [
            "d7358"
        ]
    },
    {
        "instruction": "",
        "id": "q7359",
        "input": "python pass array to html",
        "output": "",
        "rule": [
            "d7359"
        ]
    },
    {
        "instruction": "",
        "id": "q7360",
        "input": "how to extract tables of a database in python",
        "output": "",
        "rule": [
            "d7360"
        ]
    },
    {
        "instruction": "",
        "id": "q7361",
        "input": "python passing a list into function using slice",
        "output": "",
        "rule": [
            "d7361"
        ]
    },
    {
        "instruction": "",
        "id": "q7362",
        "input": "how to extract tables of mysql database in python",
        "output": "",
        "rule": [
            "d7362"
        ]
    },
    {
        "instruction": "",
        "id": "q7363",
        "input": "python paste clipboard adds enter",
        "output": "",
        "rule": [
            "d7363"
        ]
    },
    {
        "instruction": "",
        "id": "q7364",
        "input": "how to extract the rgb values from a python colormap",
        "output": "",
        "rule": [
            "d7364"
        ]
    },
    {
        "instruction": "",
        "id": "q7365",
        "input": "python path to appdata folder",
        "output": "",
        "rule": [
            "d7365"
        ]
    },
    {
        "instruction": "",
        "id": "q7366",
        "input": "how to fibd the most frequent word from the stemmed words in python",
        "output": "",
        "rule": [
            "d7366"
        ]
    },
    {
        "instruction": "",
        "id": "q7367",
        "input": "python pdb show stack trace",
        "output": "",
        "rule": [
            "d7367"
        ]
    },
    {
        "instruction": "",
        "id": "q7368",
        "input": "python pdf header footer just",
        "output": "",
        "rule": [
            "d7368"
        ]
    },
    {
        "instruction": "",
        "id": "q7369",
        "input": "how to fine a line's index in file python",
        "output": "",
        "rule": [
            "d7369"
        ]
    },
    {
        "instruction": "",
        "id": "q7370",
        "input": "python pdf page size",
        "output": "",
        "rule": [
            "d7370"
        ]
    },
    {
        "instruction": "",
        "id": "q7371",
        "input": "how to fix python error 'type' object is not subscriptable",
        "output": "",
        "rule": [
            "d7371"
        ]
    },
    {
        "instruction": "",
        "id": "q7372",
        "input": "python pearson corr between 2 columns",
        "output": "",
        "rule": [
            "d7372"
        ]
    },
    {
        "instruction": "",
        "id": "q7373",
        "input": "how to flatten 3d array in python",
        "output": "",
        "rule": [
            "d7373"
        ]
    },
    {
        "instruction": "",
        "id": "q7374",
        "input": "python pick top k",
        "output": "",
        "rule": [
            "d7374"
        ]
    },
    {
        "instruction": "",
        "id": "q7375",
        "input": "how to fold an array of strings in python",
        "output": "",
        "rule": [
            "d7375"
        ]
    },
    {
        "instruction": "",
        "id": "q7376",
        "input": "python picking out letters in strings",
        "output": "",
        "rule": [
            "d7376"
        ]
    },
    {
        "instruction": "",
        "id": "q7377",
        "input": "how to force a kill process in python",
        "output": "",
        "rule": [
            "d7377"
        ]
    },
    {
        "instruction": "",
        "id": "q7378",
        "input": "python pickle loads numpy",
        "output": "",
        "rule": [
            "d7378"
        ]
    },
    {
        "instruction": "",
        "id": "q7379",
        "input": "how to format a float to have only 2 decimals in python",
        "output": "",
        "rule": [
            "d7379"
        ]
    },
    {
        "instruction": "",
        "id": "q7380",
        "input": "how to gain focus on a python widget",
        "output": "",
        "rule": [
            "d7380"
        ]
    },
    {
        "instruction": "",
        "id": "q7381",
        "input": "python play music same time",
        "output": "",
        "rule": [
            "d7381"
        ]
    },
    {
        "instruction": "",
        "id": "q7382",
        "input": "how to generate a random password with given length and compleiety in python 3",
        "output": "",
        "rule": [
            "d7382"
        ]
    },
    {
        "instruction": "",
        "id": "q7383",
        "input": "python plot array of 2d lines",
        "output": "",
        "rule": [
            "d7383"
        ]
    },
    {
        "instruction": "",
        "id": "q7384",
        "input": "how to generate n diffreent random numbers in a range python",
        "output": "",
        "rule": [
            "d7384"
        ]
    },
    {
        "instruction": "",
        "id": "q7385",
        "input": "python plot aspect ratio set aspect equal",
        "output": "",
        "rule": [
            "d7385"
        ]
    },
    {
        "instruction": "",
        "id": "q7386",
        "input": "how to generate random variates from lognormal distribution in python",
        "output": "",
        "rule": [
            "d7386"
        ]
    },
    {
        "instruction": "",
        "id": "q7387",
        "input": "python plot axis remove",
        "output": "",
        "rule": [
            "d7387"
        ]
    },
    {
        "instruction": "",
        "id": "q7388",
        "input": "how to generate secure uuid python",
        "output": "",
        "rule": [
            "d7388"
        ]
    },
    {
        "instruction": "",
        "id": "q7389",
        "input": "python plot least squares regression line pyplot",
        "output": "",
        "rule": [
            "d7389"
        ]
    },
    {
        "instruction": "",
        "id": "q7390",
        "input": "how to generate unique permutation of words in python",
        "output": "",
        "rule": [
            "d7390"
        ]
    },
    {
        "instruction": "",
        "id": "q7391",
        "input": "python plot remove axis ticks",
        "output": "",
        "rule": [
            "d7391"
        ]
    },
    {
        "instruction": "",
        "id": "q7392",
        "input": "how to get a file from a parent folder in python",
        "output": "",
        "rule": [
            "d7392"
        ]
    },
    {
        "instruction": "",
        "id": "q7393",
        "input": "python plotting in a single figure hold",
        "output": "",
        "rule": [
            "d7393"
        ]
    },
    {
        "instruction": "",
        "id": "q7394",
        "input": "how to get a list of devices python",
        "output": "",
        "rule": [
            "d7394"
        ]
    },
    {
        "instruction": "",
        "id": "q7395",
        "input": "python plt remove axis labels",
        "output": "",
        "rule": [
            "d7395"
        ]
    },
    {
        "instruction": "",
        "id": "q7396",
        "input": "how to get all dates between 2 dates python",
        "output": "",
        "rule": [
            "d7396"
        ]
    },
    {
        "instruction": "",
        "id": "q7397",
        "input": "python pretty print dicitonary",
        "output": "",
        "rule": [
            "d7397"
        ]
    },
    {
        "instruction": "",
        "id": "q7398",
        "input": "how to get column names from table using python",
        "output": "",
        "rule": [
            "d7398"
        ]
    },
    {
        "instruction": "",
        "id": "q7399",
        "input": "python pretty print matrix",
        "output": "",
        "rule": [
            "d7399"
        ]
    },
    {
        "instruction": "",
        "id": "q7400",
        "input": "how to get default path in python",
        "output": "",
        "rule": [
            "d7400"
        ]
    },
    {
        "instruction": "",
        "id": "q7401",
        "input": "how to get dictinary first element in python",
        "output": "",
        "rule": [
            "d7401"
        ]
    },
    {
        "instruction": "",
        "id": "q7402",
        "input": "python prettytable v ptable",
        "output": "",
        "rule": [
            "d7402"
        ]
    },
    {
        "instruction": "",
        "id": "q7403",
        "input": "how to get differet between two python files in python",
        "output": "",
        "rule": [
            "d7403"
        ]
    },
    {
        "instruction": "",
        "id": "q7404",
        "input": "python prevent buffering stdout",
        "output": "",
        "rule": [
            "d7404"
        ]
    },
    {
        "instruction": "",
        "id": "q7405",
        "input": "how to get dimensions of a photo in python",
        "output": "",
        "rule": [
            "d7405"
        ]
    },
    {
        "instruction": "",
        "id": "q7406",
        "input": "python print all environment settings",
        "output": "",
        "rule": [
            "d7406"
        ]
    },
    {
        "instruction": "",
        "id": "q7407",
        "input": "how to get file md5 by python",
        "output": "",
        "rule": [
            "d7407"
        ]
    },
    {
        "instruction": "",
        "id": "q7408",
        "input": "python print all environment variables join",
        "output": "",
        "rule": [
            "d7408"
        ]
    },
    {
        "instruction": "",
        "id": "q7409",
        "input": "how to get file name using path in python",
        "output": "",
        "rule": [
            "d7409"
        ]
    },
    {
        "instruction": "",
        "id": "q7410",
        "input": "python print format items",
        "output": "",
        "rule": [
            "d7410"
        ]
    },
    {
        "instruction": "",
        "id": "q7411",
        "input": "how to get files matching to some pattern from sftp server directory using python",
        "output": "",
        "rule": [
            "d7411"
        ]
    },
    {
        "instruction": "",
        "id": "q7412",
        "input": "python print global modifier",
        "output": "",
        "rule": [
            "d7412"
        ]
    },
    {
        "instruction": "",
        "id": "q7413",
        "input": "how to get first day of the month in python",
        "output": "",
        "rule": [
            "d7413"
        ]
    },
    {
        "instruction": "",
        "id": "q7414",
        "input": "python print message assert faild",
        "output": "",
        "rule": [
            "d7414"
        ]
    },
    {
        "instruction": "",
        "id": "q7415",
        "input": "how to get list of functions that come within python",
        "output": "",
        "rule": [
            "d7415"
        ]
    },
    {
        "instruction": "",
        "id": "q7416",
        "input": "python print namedtuple string formatting",
        "output": "",
        "rule": [
            "d7416"
        ]
    },
    {
        "instruction": "",
        "id": "q7417",
        "input": "how to get memory utilization of a process python",
        "output": "",
        "rule": [
            "d7417"
        ]
    },
    {
        "instruction": "",
        "id": "q7418",
        "input": "python print tree structure",
        "output": "",
        "rule": [
            "d7418"
        ]
    },
    {
        "instruction": "",
        "id": "q7419",
        "input": "how to get method name as string python",
        "output": "",
        "rule": [
            "d7419"
        ]
    },
    {
        "instruction": "",
        "id": "q7420",
        "input": "python print with encoding",
        "output": "",
        "rule": [
            "d7420"
        ]
    },
    {
        "instruction": "",
        "id": "q7421",
        "input": "how to get month end working day in python",
        "output": "",
        "rule": [
            "d7421"
        ]
    },
    {
        "instruction": "",
        "id": "q7422",
        "input": "python process alwasy alive",
        "output": "",
        "rule": [
            "d7422"
        ]
    },
    {
        "instruction": "",
        "id": "q7423",
        "input": "how to get python code to prompt user for information",
        "output": "",
        "rule": [
            "d7423"
        ]
    },
    {
        "instruction": "",
        "id": "q7424",
        "input": "python process killed automatically",
        "output": "",
        "rule": [
            "d7424"
        ]
    },
    {
        "instruction": "",
        "id": "q7425",
        "input": "how to get rid of xml namespaces in python",
        "output": "",
        "rule": [
            "d7425"
        ]
    },
    {
        "instruction": "",
        "id": "q7426",
        "input": "python producing a comma seperated list",
        "output": "",
        "rule": [
            "d7426"
        ]
    },
    {
        "instruction": "",
        "id": "q7427",
        "input": "how to get the average of vectors from python",
        "output": "",
        "rule": [
            "d7427"
        ]
    },
    {
        "instruction": "",
        "id": "q7428",
        "input": "python programmatically set docstring for instance method",
        "output": "",
        "rule": [
            "d7428"
        ]
    },
    {
        "instruction": "",
        "id": "q7429",
        "input": "how to get the current url in my browser in python",
        "output": "",
        "rule": [
            "d7429"
        ]
    },
    {
        "instruction": "",
        "id": "q7430",
        "input": "python prompt input default",
        "output": "",
        "rule": [
            "d7430"
        ]
    },
    {
        "instruction": "",
        "id": "q7431",
        "input": "python property just getter",
        "output": "",
        "rule": [
            "d7431"
        ]
    },
    {
        "instruction": "",
        "id": "q7432",
        "input": "how to get the full path of a file in python",
        "output": "",
        "rule": [
            "d7432"
        ]
    },
    {
        "instruction": "",
        "id": "q7433",
        "input": "python property object not callable",
        "output": "",
        "rule": [
            "d7433"
        ]
    },
    {
        "instruction": "",
        "id": "q7434",
        "input": "how to get the latest date in a list python djangp",
        "output": "",
        "rule": [
            "d7434"
        ]
    },
    {
        "instruction": "",
        "id": "q7435",
        "input": "python property of a property",
        "output": "",
        "rule": [
            "d7435"
        ]
    },
    {
        "instruction": "",
        "id": "q7436",
        "input": "how to get the length of a list in python in incemental steps",
        "output": "",
        "rule": [
            "d7436"
        ]
    },
    {
        "instruction": "",
        "id": "q7437",
        "input": "python protobuf parsefromstring except",
        "output": "",
        "rule": [
            "d7437"
        ]
    },
    {
        "instruction": "",
        "id": "q7438",
        "input": "how to get the number of non whitespace characters in python",
        "output": "",
        "rule": [
            "d7438"
        ]
    },
    {
        "instruction": "",
        "id": "q7439",
        "input": "python pylint disable method",
        "output": "",
        "rule": [
            "d7439"
        ]
    },
    {
        "instruction": "",
        "id": "q7440",
        "input": "python pysaml2 signature verification fails",
        "output": "",
        "rule": [
            "d7440"
        ]
    },
    {
        "instruction": "",
        "id": "q7441",
        "input": "how to get the start and end character from regex findall python",
        "output": "",
        "rule": [
            "d7441"
        ]
    },
    {
        "instruction": "",
        "id": "q7442",
        "input": "python python passing to child process using stdin",
        "output": "",
        "rule": [
            "d7442"
        ]
    },
    {
        "instruction": "",
        "id": "q7443",
        "input": "how to get the value of loss at every iteration in python",
        "output": "",
        "rule": [
            "d7443"
        ]
    },
    {
        "instruction": "",
        "id": "q7444",
        "input": "python qapplication not defined",
        "output": "",
        "rule": [
            "d7444"
        ]
    },
    {
        "instruction": "",
        "id": "q7445",
        "input": "python qdate object to datetime",
        "output": "",
        "rule": [
            "d7445"
        ]
    },
    {
        "instruction": "",
        "id": "q7446",
        "input": "how to get unique items in python",
        "output": "",
        "rule": [
            "d7446"
        ]
    },
    {
        "instruction": "",
        "id": "q7447",
        "input": "python qdialog close signal",
        "output": "",
        "rule": [
            "d7447"
        ]
    },
    {
        "instruction": "",
        "id": "q7448",
        "input": "how to get unique value from list in python",
        "output": "",
        "rule": [
            "d7448"
        ]
    },
    {
        "instruction": "",
        "id": "q7449",
        "input": "python qpushbutton resize in grid layout",
        "output": "",
        "rule": [
            "d7449"
        ]
    },
    {
        "instruction": "",
        "id": "q7450",
        "input": "how to get unique values in python data frame",
        "output": "",
        "rule": [
            "d7450"
        ]
    },
    {
        "instruction": "",
        "id": "q7451",
        "input": "python query string parse",
        "output": "",
        "rule": [
            "d7451"
        ]
    },
    {
        "instruction": "",
        "id": "q7452",
        "input": "how to get x component of shape in python",
        "output": "",
        "rule": [
            "d7452"
        ]
    },
    {
        "instruction": "",
        "id": "q7453",
        "input": "python queue release memory",
        "output": "",
        "rule": [
            "d7453"
        ]
    },
    {
        "instruction": "",
        "id": "q7454",
        "input": "how to give decimal numbers random python",
        "output": "",
        "rule": [
            "d7454"
        ]
    },
    {
        "instruction": "",
        "id": "q7455",
        "input": "python quit all threads",
        "output": "",
        "rule": [
            "d7455"
        ]
    },
    {
        "instruction": "",
        "id": "q7456",
        "input": "how to give multiline comments in python",
        "output": "",
        "rule": [
            "d7456"
        ]
    },
    {
        "instruction": "",
        "id": "q7457",
        "input": "python rabbitmqctl subprocess hangs",
        "output": "",
        "rule": [
            "d7457"
        ]
    },
    {
        "instruction": "",
        "id": "q7458",
        "input": "how to give output in new line in print command python",
        "output": "",
        "rule": [
            "d7458"
        ]
    },
    {
        "instruction": "",
        "id": "q7459",
        "input": "python random 30 character string",
        "output": "",
        "rule": [
            "d7459"
        ]
    },
    {
        "instruction": "",
        "id": "q7460",
        "input": "how to globaloze a variable in python in multiple definition",
        "output": "",
        "rule": [
            "d7460"
        ]
    },
    {
        "instruction": "",
        "id": "q7461",
        "input": "python random function non repeating",
        "output": "",
        "rule": [
            "d7461"
        ]
    },
    {
        "instruction": "",
        "id": "q7462",
        "input": "how to grab the current url in my browser python",
        "output": "",
        "rule": [
            "d7462"
        ]
    },
    {
        "instruction": "",
        "id": "q7463",
        "input": "python random noise image",
        "output": "",
        "rule": [
            "d7463"
        ]
    },
    {
        "instruction": "",
        "id": "q7464",
        "input": "python random normal specify range",
        "output": "",
        "rule": [
            "d7464"
        ]
    },
    {
        "instruction": "",
        "id": "q7465",
        "input": "how to hash a file in python",
        "output": "",
        "rule": [
            "d7465"
        ]
    },
    {
        "instruction": "",
        "id": "q7466",
        "input": "python random sample based on pmf",
        "output": "",
        "rule": [
            "d7466"
        ]
    },
    {
        "instruction": "",
        "id": "q7467",
        "input": "how to hash variable in python 3",
        "output": "",
        "rule": [
            "d7467"
        ]
    },
    {
        "instruction": "",
        "id": "q7468",
        "input": "python range bound array",
        "output": "",
        "rule": [
            "d7468"
        ]
    },
    {
        "instruction": "",
        "id": "q7469",
        "input": "how to have python highlight some phrase",
        "output": "",
        "rule": [
            "d7469"
        ]
    },
    {
        "instruction": "",
        "id": "q7470",
        "input": "python read environment variables with default",
        "output": "",
        "rule": [
            "d7470"
        ]
    },
    {
        "instruction": "",
        "id": "q7471",
        "input": "how to have python prompt",
        "output": "",
        "rule": [
            "d7471"
        ]
    },
    {
        "instruction": "",
        "id": "q7472",
        "input": "python read file byte buffer",
        "output": "",
        "rule": [
            "d7472"
        ]
    },
    {
        "instruction": "",
        "id": "q7473",
        "input": "how to hide api key python",
        "output": "",
        "rule": [
            "d7473"
        ]
    },
    {
        "instruction": "",
        "id": "q7474",
        "input": "python read from s3 to a string",
        "output": "",
        "rule": [
            "d7474"
        ]
    },
    {
        "instruction": "",
        "id": "q7475",
        "input": "how to hit backspace in python without deleting code",
        "output": "",
        "rule": [
            "d7475"
        ]
    },
    {
        "instruction": "",
        "id": "q7476",
        "input": "python read geotiff gdal",
        "output": "",
        "rule": [
            "d7476"
        ]
    },
    {
        "instruction": "",
        "id": "q7477",
        "input": "how to implement drag and drop in python",
        "output": "",
        "rule": [
            "d7477"
        ]
    },
    {
        "instruction": "",
        "id": "q7478",
        "input": "python read json file iterate",
        "output": "",
        "rule": [
            "d7478"
        ]
    },
    {
        "instruction": "",
        "id": "q7479",
        "input": "how to implement eof in python",
        "output": "",
        "rule": [
            "d7479"
        ]
    },
    {
        "instruction": "",
        "id": "q7480",
        "input": "python read json to ordered dictionary",
        "output": "",
        "rule": [
            "d7480"
        ]
    },
    {
        "instruction": "",
        "id": "q7481",
        "input": "how to include traceback in error message python",
        "output": "",
        "rule": [
            "d7481"
        ]
    },
    {
        "instruction": "",
        "id": "q7482",
        "input": "python read lambda from file",
        "output": "",
        "rule": [
            "d7482"
        ]
    },
    {
        "instruction": "",
        "id": "q7483",
        "input": "how to insert arrows on plots python",
        "output": "",
        "rule": [
            "d7483"
        ]
    },
    {
        "instruction": "",
        "id": "q7484",
        "input": "python read list of tuples from file",
        "output": "",
        "rule": [
            "d7484"
        ]
    },
    {
        "instruction": "",
        "id": "q7485",
        "input": "how to inspect object in python",
        "output": "",
        "rule": [
            "d7485"
        ]
    },
    {
        "instruction": "",
        "id": "q7486",
        "input": "python read tif image get array",
        "output": "",
        "rule": [
            "d7486"
        ]
    },
    {
        "instruction": "",
        "id": "q7487",
        "input": "how to iterate over a line in a file word by word in python",
        "output": "",
        "rule": [
            "d7487"
        ]
    },
    {
        "instruction": "",
        "id": "q7488",
        "input": "python read tuples from file",
        "output": "",
        "rule": [
            "d7488"
        ]
    },
    {
        "instruction": "",
        "id": "q7489",
        "input": "how to join *args into 1 string python",
        "output": "",
        "rule": [
            "d7489"
        ]
    },
    {
        "instruction": "",
        "id": "q7490",
        "input": "python read whole file as a string",
        "output": "",
        "rule": [
            "d7490"
        ]
    },
    {
        "instruction": "",
        "id": "q7491",
        "input": "how to judge a string is uuid type in python",
        "output": "",
        "rule": [
            "d7491"
        ]
    },
    {
        "instruction": "",
        "id": "q7492",
        "input": "python read xx/xx/xxx datetime from string",
        "output": "",
        "rule": [
            "d7492"
        ]
    },
    {
        "instruction": "",
        "id": "q7493",
        "input": "how to keep count the number of time something happens in python",
        "output": "",
        "rule": [
            "d7493"
        ]
    },
    {
        "instruction": "",
        "id": "q7494",
        "input": "python read/write dict to file json",
        "output": "",
        "rule": [
            "d7494"
        ]
    },
    {
        "instruction": "",
        "id": "q7495",
        "input": "how to keep the data frame column name and make the value empty python",
        "output": "",
        "rule": [
            "d7495"
        ]
    },
    {
        "instruction": "",
        "id": "q7496",
        "input": "python recursive object to dict",
        "output": "",
        "rule": [
            "d7496"
        ]
    },
    {
        "instruction": "",
        "id": "q7497",
        "input": "how to know if a list is sorted in python",
        "output": "",
        "rule": [
            "d7497"
        ]
    },
    {
        "instruction": "",
        "id": "q7498",
        "input": "python redis get return none",
        "output": "",
        "rule": [
            "d7498"
        ]
    },
    {
        "instruction": "",
        "id": "q7499",
        "input": "how to know the kind of data python",
        "output": "",
        "rule": [
            "d7499"
        ]
    },
    {
        "instruction": "",
        "id": "q7500",
        "input": "python redis how to check hash doesn't exist",
        "output": "",
        "rule": [
            "d7500"
        ]
    },
    {
        "instruction": "",
        "id": "q7501",
        "input": "how to know the memory usage of current python process in linux",
        "output": "",
        "rule": [
            "d7501"
        ]
    },
    {
        "instruction": "",
        "id": "q7502",
        "input": "python redis set function return none",
        "output": "",
        "rule": [
            "d7502"
        ]
    },
    {
        "instruction": "",
        "id": "q7503",
        "input": "how to label each sentence in a documentin python",
        "output": "",
        "rule": [
            "d7503"
        ]
    },
    {
        "instruction": "",
        "id": "q7504",
        "input": "python reex capital and lowercase",
        "output": "",
        "rule": [
            "d7504"
        ]
    },
    {
        "instruction": "",
        "id": "q7505",
        "input": "how to let width in python",
        "output": "",
        "rule": [
            "d7505"
        ]
    },
    {
        "instruction": "",
        "id": "q7506",
        "input": "python refering hash as a letter",
        "output": "",
        "rule": [
            "d7506"
        ]
    },
    {
        "instruction": "",
        "id": "q7507",
        "input": "how to load a ubyte file in python",
        "output": "",
        "rule": [
            "d7507"
        ]
    },
    {
        "instruction": "",
        "id": "q7508",
        "input": "python regex custom delimiter",
        "output": "",
        "rule": [
            "d7508"
        ]
    },
    {
        "instruction": "",
        "id": "q7509",
        "input": "how to log error is python",
        "output": "",
        "rule": [
            "d7509"
        ]
    },
    {
        "instruction": "",
        "id": "q7510",
        "input": "python regex get named matches",
        "output": "",
        "rule": [
            "d7510"
        ]
    },
    {
        "instruction": "",
        "id": "q7511",
        "input": "how to log raised error in python log file",
        "output": "",
        "rule": [
            "d7511"
        ]
    },
    {
        "instruction": "",
        "id": "q7512",
        "input": "python regex validate email",
        "output": "",
        "rule": [
            "d7512"
        ]
    },
    {
        "instruction": "",
        "id": "q7513",
        "input": "how to make a base to decimal converter for base 37 in python",
        "output": "",
        "rule": [
            "d7513"
        ]
    },
    {
        "instruction": "",
        "id": "q7514",
        "input": "python regions of an array",
        "output": "",
        "rule": [
            "d7514"
        ]
    },
    {
        "instruction": "",
        "id": "q7515",
        "input": "how to make a char lowercase python",
        "output": "",
        "rule": [
            "d7515"
        ]
    },
    {
        "instruction": "",
        "id": "q7516",
        "input": "how to make a drop down menu on python",
        "output": "",
        "rule": [
            "d7516"
        ]
    },
    {
        "instruction": "",
        "id": "q7517",
        "input": "python remove all accents from string",
        "output": "",
        "rule": [
            "d7517"
        ]
    },
    {
        "instruction": "",
        "id": "q7518",
        "input": "how to make a function happen only once python",
        "output": "",
        "rule": [
            "d7518"
        ]
    },
    {
        "instruction": "",
        "id": "q7519",
        "input": "python remove all comments for c++",
        "output": "",
        "rule": [
            "d7519"
        ]
    },
    {
        "instruction": "",
        "id": "q7520",
        "input": "how to make a list callable in python",
        "output": "",
        "rule": [
            "d7520"
        ]
    },
    {
        "instruction": "",
        "id": "q7521",
        "input": "python remove cell if zero",
        "output": "",
        "rule": [
            "d7521"
        ]
    },
    {
        "instruction": "",
        "id": "q7522",
        "input": "how to make a list of a list in python as an attribute",
        "output": "",
        "rule": [
            "d7522"
        ]
    },
    {
        "instruction": "",
        "id": "q7523",
        "input": "how to make a log based graph in python",
        "output": "",
        "rule": [
            "d7523"
        ]
    },
    {
        "instruction": "",
        "id": "q7524",
        "input": "python remove characters from string except one word",
        "output": "",
        "rule": [
            "d7524"
        ]
    },
    {
        "instruction": "",
        "id": "q7525",
        "input": "how to make a log in python discord",
        "output": "",
        "rule": [
            "d7525"
        ]
    },
    {
        "instruction": "",
        "id": "q7526",
        "input": "python remove duplicates without changing order",
        "output": "",
        "rule": [
            "d7526"
        ]
    },
    {
        "instruction": "",
        "id": "q7527",
        "input": "how to make a product in a list python",
        "output": "",
        "rule": [
            "d7527"
        ]
    },
    {
        "instruction": "",
        "id": "q7528",
        "input": "python remove elements from list not match regex",
        "output": "",
        "rule": [
            "d7528"
        ]
    },
    {
        "instruction": "",
        "id": "q7529",
        "input": "how to make a string into file name in python",
        "output": "",
        "rule": [
            "d7529"
        ]
    },
    {
        "instruction": "",
        "id": "q7530",
        "input": "python remove elements using list of indices",
        "output": "",
        "rule": [
            "d7530"
        ]
    },
    {
        "instruction": "",
        "id": "q7531",
        "input": "how to make a sympy expression in python",
        "output": "",
        "rule": [
            "d7531"
        ]
    },
    {
        "instruction": "",
        "id": "q7532",
        "input": "python remove html from markdown",
        "output": "",
        "rule": [
            "d7532"
        ]
    },
    {
        "instruction": "",
        "id": "q7533",
        "input": "how to make an input be recognized as an integer and string python",
        "output": "",
        "rule": [
            "d7533"
        ]
    },
    {
        "instruction": "",
        "id": "q7534",
        "input": "python remove html markups",
        "output": "",
        "rule": [
            "d7534"
        ]
    },
    {
        "instruction": "",
        "id": "q7535",
        "input": "how to make check digit of number even or odd python",
        "output": "",
        "rule": [
            "d7535"
        ]
    },
    {
        "instruction": "",
        "id": "q7536",
        "input": "python remove newline with strip method of strings and list comprehensions",
        "output": "",
        "rule": [
            "d7536"
        ]
    },
    {
        "instruction": "",
        "id": "q7537",
        "input": "how to make clickable text in python",
        "output": "",
        "rule": [
            "d7537"
        ]
    },
    {
        "instruction": "",
        "id": "q7538",
        "input": "python remove non alphabetic",
        "output": "",
        "rule": [
            "d7538"
        ]
    },
    {
        "instruction": "",
        "id": "q7539",
        "input": "how to make correlation heatmap between features in python",
        "output": "",
        "rule": [
            "d7539"
        ]
    },
    {
        "instruction": "",
        "id": "q7540",
        "input": "how to make float callable in python",
        "output": "",
        "rule": [
            "d7540"
        ]
    },
    {
        "instruction": "",
        "id": "q7541",
        "input": "python remove object from disc",
        "output": "",
        "rule": [
            "d7541"
        ]
    },
    {
        "instruction": "",
        "id": "q7542",
        "input": "how to make histogram plots use the same bins in python",
        "output": "",
        "rule": [
            "d7542"
        ]
    },
    {
        "instruction": "",
        "id": "q7543",
        "input": "python remove quotation marks repr",
        "output": "",
        "rule": [
            "d7543"
        ]
    },
    {
        "instruction": "",
        "id": "q7544",
        "input": "how to make intercept zero in python",
        "output": "",
        "rule": [
            "d7544"
        ]
    },
    {
        "instruction": "",
        "id": "q7545",
        "input": "python remove same elements from list",
        "output": "",
        "rule": [
            "d7545"
        ]
    },
    {
        "instruction": "",
        "id": "q7546",
        "input": "how to make max heap python",
        "output": "",
        "rule": [
            "d7546"
        ]
    },
    {
        "instruction": "",
        "id": "q7547",
        "input": "python remove string list and space",
        "output": "",
        "rule": [
            "d7547"
        ]
    },
    {
        "instruction": "",
        "id": "q7548",
        "input": "how to make outputs next to each other in python",
        "output": "",
        "rule": [
            "d7548"
        ]
    },
    {
        "instruction": "",
        "id": "q7549",
        "input": "python remove timezone info of time",
        "output": "",
        "rule": [
            "d7549"
        ]
    },
    {
        "instruction": "",
        "id": "q7550",
        "input": "how to make python ask question",
        "output": "",
        "rule": [
            "d7550"
        ]
    },
    {
        "instruction": "",
        "id": "q7551",
        "input": "python remove whitespaces in a string",
        "output": "",
        "rule": [
            "d7551"
        ]
    },
    {
        "instruction": "",
        "id": "q7552",
        "input": "how to make python create a file",
        "output": "",
        "rule": [
            "d7552"
        ]
    },
    {
        "instruction": "",
        "id": "q7553",
        "input": "python replace a substring in values of all items of dictionary",
        "output": "",
        "rule": [
            "d7553"
        ]
    },
    {
        "instruction": "",
        "id": "q7554",
        "input": "how to make python font larger",
        "output": "",
        "rule": [
            "d7554"
        ]
    },
    {
        "instruction": "",
        "id": "q7555",
        "input": "python replace all occurances of a substring",
        "output": "",
        "rule": [
            "d7555"
        ]
    },
    {
        "instruction": "",
        "id": "q7556",
        "input": "how to make python use artifactory",
        "output": "",
        "rule": [
            "d7556"
        ]
    },
    {
        "instruction": "",
        "id": "q7557",
        "input": "python replace date type from column",
        "output": "",
        "rule": [
            "d7557"
        ]
    },
    {
        "instruction": "",
        "id": "q7558",
        "input": "how to make something lowercase in python",
        "output": "",
        "rule": [
            "d7558"
        ]
    },
    {
        "instruction": "",
        "id": "q7559",
        "input": "python replace html entities",
        "output": "",
        "rule": [
            "d7559"
        ]
    },
    {
        "instruction": "",
        "id": "q7560",
        "input": "how to make sure input language is english in a python form",
        "output": "",
        "rule": [
            "d7560"
        ]
    },
    {
        "instruction": "",
        "id": "q7561",
        "input": "python replace in place string in string",
        "output": "",
        "rule": [
            "d7561"
        ]
    },
    {
        "instruction": "",
        "id": "q7562",
        "input": "python replace new line in string",
        "output": "",
        "rule": [
            "d7562"
        ]
    },
    {
        "instruction": "",
        "id": "q7563",
        "input": "how to maniplate location of text in python",
        "output": "",
        "rule": [
            "d7563"
        ]
    },
    {
        "instruction": "",
        "id": "q7564",
        "input": "python replace strings in a list of lists",
        "output": "",
        "rule": [
            "d7564"
        ]
    },
    {
        "instruction": "",
        "id": "q7565",
        "input": "how to merge multi yaml file into csv in python",
        "output": "",
        "rule": [
            "d7565"
        ]
    },
    {
        "instruction": "",
        "id": "q7566",
        "input": "python replace substring in a string with another substring",
        "output": "",
        "rule": [
            "d7566"
        ]
    },
    {
        "instruction": "",
        "id": "q7567",
        "input": "how to merge pdf files using python",
        "output": "",
        "rule": [
            "d7567"
        ]
    },
    {
        "instruction": "",
        "id": "q7568",
        "input": "python replace substring splice between words",
        "output": "",
        "rule": [
            "d7568"
        ]
    },
    {
        "instruction": "",
        "id": "q7569",
        "input": "how to modify values in a dictonary in python",
        "output": "",
        "rule": [
            "d7569"
        ]
    },
    {
        "instruction": "",
        "id": "q7570",
        "input": "python replace zero entries in matrix",
        "output": "",
        "rule": [
            "d7570"
        ]
    },
    {
        "instruction": "",
        "id": "q7571",
        "input": "how to move a str in a list to the front in python",
        "output": "",
        "rule": [
            "d7571"
        ]
    },
    {
        "instruction": "",
        "id": "q7572",
        "input": "python request only get http status code",
        "output": "",
        "rule": [
            "d7572"
        ]
    },
    {
        "instruction": "",
        "id": "q7573",
        "input": "how to move the coursor up and down in python with arrow keys",
        "output": "",
        "rule": [
            "d7573"
        ]
    },
    {
        "instruction": "",
        "id": "q7574",
        "input": "python request response 401",
        "output": "",
        "rule": [
            "d7574"
        ]
    },
    {
        "instruction": "",
        "id": "q7575",
        "input": "how to noise an image in python",
        "output": "",
        "rule": [
            "d7575"
        ]
    },
    {
        "instruction": "",
        "id": "q7576",
        "input": "python requests get last redirect url",
        "output": "",
        "rule": [
            "d7576"
        ]
    },
    {
        "instruction": "",
        "id": "q7577",
        "input": "how to normalize an array in python with maximum value",
        "output": "",
        "rule": [
            "d7577"
        ]
    },
    {
        "instruction": "",
        "id": "q7578",
        "input": "python requests streaming uploads",
        "output": "",
        "rule": [
            "d7578"
        ]
    },
    {
        "instruction": "",
        "id": "q7579",
        "input": "how to only read the integer value of a file python",
        "output": "",
        "rule": [
            "d7579"
        ]
    },
    {
        "instruction": "",
        "id": "q7580",
        "input": "python requests upload file from stream",
        "output": "",
        "rule": [
            "d7580"
        ]
    },
    {
        "instruction": "",
        "id": "q7581",
        "input": "how to open a text file as a string inpython",
        "output": "",
        "rule": [
            "d7581"
        ]
    },
    {
        "instruction": "",
        "id": "q7582",
        "input": "python reset object as function",
        "output": "",
        "rule": [
            "d7582"
        ]
    },
    {
        "instruction": "",
        "id": "q7583",
        "input": "how to open image from content in python",
        "output": "",
        "rule": [
            "d7583"
        ]
    },
    {
        "instruction": "",
        "id": "q7584",
        "input": "python reset the appropriate variable(s) to their initial values",
        "output": "",
        "rule": [
            "d7584"
        ]
    },
    {
        "instruction": "",
        "id": "q7585",
        "input": "how to parse string to float or int in python",
        "output": "",
        "rule": [
            "d7585"
        ]
    },
    {
        "instruction": "",
        "id": "q7586",
        "input": "python reshape a list of images into one matrix",
        "output": "",
        "rule": [
            "d7586"
        ]
    },
    {
        "instruction": "",
        "id": "q7587",
        "input": "how to parse the results from a cursor python",
        "output": "",
        "rule": [
            "d7587"
        ]
    },
    {
        "instruction": "",
        "id": "q7588",
        "input": "python reshape to broadcast sum",
        "output": "",
        "rule": [
            "d7588"
        ]
    },
    {
        "instruction": "",
        "id": "q7589",
        "input": "how to pause a loop in python#",
        "output": "",
        "rule": [
            "d7589"
        ]
    },
    {
        "instruction": "",
        "id": "q7590",
        "input": "python resize image and keep aspect ratio",
        "output": "",
        "rule": [
            "d7590"
        ]
    },
    {
        "instruction": "",
        "id": "q7591",
        "input": "how to pause audio using python",
        "output": "",
        "rule": [
            "d7591"
        ]
    },
    {
        "instruction": "",
        "id": "q7592",
        "input": "python response 401 with text",
        "output": "",
        "rule": [
            "d7592"
        ]
    },
    {
        "instruction": "",
        "id": "q7593",
        "input": "how to pickle a file in python",
        "output": "",
        "rule": [
            "d7593"
        ]
    },
    {
        "instruction": "",
        "id": "q7594",
        "input": "python rest connection refused",
        "output": "",
        "rule": [
            "d7594"
        ]
    },
    {
        "instruction": "",
        "id": "q7595",
        "input": "how to plot confusion matrix python",
        "output": "",
        "rule": [
            "d7595"
        ]
    },
    {
        "instruction": "",
        "id": "q7596",
        "input": "python rest cookie session managment",
        "output": "",
        "rule": [
            "d7596"
        ]
    },
    {
        "instruction": "",
        "id": "q7597",
        "input": "how to plot the distribution in python",
        "output": "",
        "rule": [
            "d7597"
        ]
    },
    {
        "instruction": "",
        "id": "q7598",
        "input": "python restore to default settings",
        "output": "",
        "rule": [
            "d7598"
        ]
    },
    {
        "instruction": "",
        "id": "q7599",
        "input": "how to pretty print to json from python",
        "output": "",
        "rule": [
            "d7599"
        ]
    },
    {
        "instruction": "",
        "id": "q7600",
        "input": "python retrieve a file property",
        "output": "",
        "rule": [
            "d7600"
        ]
    },
    {
        "instruction": "",
        "id": "q7601",
        "input": "how to print all objects in a string python",
        "output": "",
        "rule": [
            "d7601"
        ]
    },
    {
        "instruction": "",
        "id": "q7602",
        "input": "python retrieve parent path",
        "output": "",
        "rule": [
            "d7602"
        ]
    },
    {
        "instruction": "",
        "id": "q7603",
        "input": "how to print an additional text output to the screen on python",
        "output": "",
        "rule": [
            "d7603"
        ]
    },
    {
        "instruction": "",
        "id": "q7604",
        "input": "python return index of substring",
        "output": "",
        "rule": [
            "d7604"
        ]
    },
    {
        "instruction": "",
        "id": "q7605",
        "input": "how to print from a dictionary with a new line python",
        "output": "",
        "rule": [
            "d7605"
        ]
    },
    {
        "instruction": "",
        "id": "q7606",
        "input": "python return parent path of a path",
        "output": "",
        "rule": [
            "d7606"
        ]
    },
    {
        "instruction": "",
        "id": "q7607",
        "input": "python return position of item in series",
        "output": "",
        "rule": [
            "d7607"
        ]
    },
    {
        "instruction": "",
        "id": "q7608",
        "input": "python return property object",
        "output": "",
        "rule": [
            "d7608"
        ]
    },
    {
        "instruction": "",
        "id": "q7609",
        "input": "how to profile a background python process",
        "output": "",
        "rule": [
            "d7609"
        ]
    },
    {
        "instruction": "",
        "id": "q7610",
        "input": "how to profile multithread python",
        "output": "",
        "rule": [
            "d7610"
        ]
    },
    {
        "instruction": "",
        "id": "q7611",
        "input": "python returning column without nan",
        "output": "",
        "rule": [
            "d7611"
        ]
    },
    {
        "instruction": "",
        "id": "q7612",
        "input": "how to properly use a raise function in python",
        "output": "",
        "rule": [
            "d7612"
        ]
    },
    {
        "instruction": "",
        "id": "q7613",
        "input": "python round to three significant digits",
        "output": "",
        "rule": [
            "d7613"
        ]
    },
    {
        "instruction": "",
        "id": "q7614",
        "input": "how to put 3d position in python",
        "output": "",
        "rule": [
            "d7614"
        ]
    },
    {
        "instruction": "",
        "id": "q7615",
        "input": "python round to x decimal place",
        "output": "",
        "rule": [
            "d7615"
        ]
    },
    {
        "instruction": "",
        "id": "q7616",
        "input": "how to put in an error message in python flask",
        "output": "",
        "rule": [
            "d7616"
        ]
    },
    {
        "instruction": "",
        "id": "q7617",
        "input": "python routine remove stop words",
        "output": "",
        "rule": [
            "d7617"
        ]
    },
    {
        "instruction": "",
        "id": "q7618",
        "input": "how to python3 user input",
        "output": "",
        "rule": [
            "d7618"
        ]
    },
    {
        "instruction": "",
        "id": "q7619",
        "input": "python run a function on a timer",
        "output": "",
        "rule": [
            "d7619"
        ]
    },
    {
        "instruction": "",
        "id": "q7620",
        "input": "how to quit the existing python session",
        "output": "",
        "rule": [
            "d7620"
        ]
    },
    {
        "instruction": "",
        "id": "q7621",
        "input": "python run a task every seconds asyncio",
        "output": "",
        "rule": [
            "d7621"
        ]
    },
    {
        "instruction": "",
        "id": "q7622",
        "input": "python run asyncio function from regular function",
        "output": "",
        "rule": [
            "d7622"
        ]
    },
    {
        "instruction": "",
        "id": "q7623",
        "input": "how to randomize a select list in python",
        "output": "",
        "rule": [
            "d7623"
        ]
    },
    {
        "instruction": "",
        "id": "q7624",
        "input": "python safe make dir",
        "output": "",
        "rule": [
            "d7624"
        ]
    },
    {
        "instruction": "",
        "id": "q7625",
        "input": "how to randomly index x elements from an array python",
        "output": "",
        "rule": [
            "d7625"
        ]
    },
    {
        "instruction": "",
        "id": "q7626",
        "input": "python safe terminate processes",
        "output": "",
        "rule": [
            "d7626"
        ]
    },
    {
        "instruction": "",
        "id": "q7627",
        "input": "how to read in a file in python utf8 encoded",
        "output": "",
        "rule": [
            "d7627"
        ]
    },
    {
        "instruction": "",
        "id": "q7628",
        "input": "python save file to temporary directory then stream it to memcached",
        "output": "",
        "rule": [
            "d7628"
        ]
    },
    {
        "instruction": "",
        "id": "q7629",
        "input": "how to read python input from stdin",
        "output": "",
        "rule": [
            "d7629"
        ]
    },
    {
        "instruction": "",
        "id": "q7630",
        "input": "make all caps lowercase python",
        "output": "",
        "rule": [
            "d7630"
        ]
    },
    {
        "instruction": "",
        "id": "q7631",
        "input": "how to read r rds object in python",
        "output": "",
        "rule": [
            "d7631"
        ]
    },
    {
        "instruction": "",
        "id": "q7632",
        "input": "python saving pickle file",
        "output": "",
        "rule": [
            "d7632"
        ]
    },
    {
        "instruction": "",
        "id": "q7633",
        "input": "python scipy interpolate datetime",
        "output": "",
        "rule": [
            "d7633"
        ]
    },
    {
        "instruction": "",
        "id": "q7634",
        "input": "how to remive html format in python",
        "output": "",
        "rule": [
            "d7634"
        ]
    },
    {
        "instruction": "",
        "id": "q7635",
        "input": "python scipy sparse multiply",
        "output": "",
        "rule": [
            "d7635"
        ]
    },
    {
        "instruction": "",
        "id": "q7636",
        "input": "how to remove \\\\ in windows path python",
        "output": "",
        "rule": [
            "d7636"
        ]
    },
    {
        "instruction": "",
        "id": "q7637",
        "input": "python scipy wav bytes write",
        "output": "",
        "rule": [
            "d7637"
        ]
    },
    {
        "instruction": "",
        "id": "q7638",
        "input": "how to remove \\n from the right side of values in python",
        "output": "",
        "rule": [
            "d7638"
        ]
    },
    {
        "instruction": "",
        "id": "q7639",
        "input": "python scipy write wav file",
        "output": "",
        "rule": [
            "d7639"
        ]
    },
    {
        "instruction": "",
        "id": "q7640",
        "input": "how to remove axis python",
        "output": "",
        "rule": [
            "d7640"
        ]
    },
    {
        "instruction": "",
        "id": "q7641",
        "input": "python script to check a url and see the return",
        "output": "",
        "rule": [
            "d7641"
        ]
    },
    {
        "instruction": "",
        "id": "q7642",
        "input": "how to remove commas python string",
        "output": "",
        "rule": [
            "d7642"
        ]
    },
    {
        "instruction": "",
        "id": "q7643",
        "input": "python script to design line length of a file",
        "output": "",
        "rule": [
            "d7643"
        ]
    },
    {
        "instruction": "",
        "id": "q7644",
        "input": "how to remove duplicaate from python list",
        "output": "",
        "rule": [
            "d7644"
        ]
    },
    {
        "instruction": "",
        "id": "q7645",
        "input": "python scrollbar for canvas",
        "output": "",
        "rule": [
            "d7645"
        ]
    },
    {
        "instruction": "",
        "id": "q7646",
        "input": "how to remove last line of string python",
        "output": "",
        "rule": [
            "d7646"
        ]
    },
    {
        "instruction": "",
        "id": "q7647",
        "input": "python selcet the next n elements from iterator",
        "output": "",
        "rule": [
            "d7647"
        ]
    },
    {
        "instruction": "",
        "id": "q7648",
        "input": "how to remove legend on a python plot",
        "output": "",
        "rule": [
            "d7648"
        ]
    },
    {
        "instruction": "",
        "id": "q7649",
        "input": "python select a random timestamp between 2 timestamps",
        "output": "",
        "rule": [
            "d7649"
        ]
    },
    {
        "instruction": "",
        "id": "q7650",
        "input": "how to remove noise from an image python",
        "output": "",
        "rule": [
            "d7650"
        ]
    },
    {
        "instruction": "",
        "id": "q7651",
        "input": "python select equal to",
        "output": "",
        "rule": [
            "d7651"
        ]
    },
    {
        "instruction": "",
        "id": "q7652",
        "input": "how to remove outer apostrophes and not inner python",
        "output": "",
        "rule": [
            "d7652"
        ]
    },
    {
        "instruction": "",
        "id": "q7653",
        "input": "how to remove parth of the url python",
        "output": "",
        "rule": [
            "d7653"
        ]
    },
    {
        "instruction": "",
        "id": "q7654",
        "input": "python select rows based on boolean",
        "output": "",
        "rule": [
            "d7654"
        ]
    },
    {
        "instruction": "",
        "id": "q7655",
        "input": "how to remove repeat instances in a list python",
        "output": "",
        "rule": [
            "d7655"
        ]
    },
    {
        "instruction": "",
        "id": "q7656",
        "input": "python select rows by bool value",
        "output": "",
        "rule": [
            "d7656"
        ]
    },
    {
        "instruction": "",
        "id": "q7657",
        "input": "how to remove space from a string python to list",
        "output": "",
        "rule": [
            "d7657"
        ]
    },
    {
        "instruction": "",
        "id": "q7658",
        "input": "python select set of keys from dict",
        "output": "",
        "rule": [
            "d7658"
        ]
    },
    {
        "instruction": "",
        "id": "q7659",
        "input": "how to remove spaces from python string",
        "output": "",
        "rule": [
            "d7659"
        ]
    },
    {
        "instruction": "",
        "id": "q7660",
        "input": "python selecting from different dimensions of an array",
        "output": "",
        "rule": [
            "d7660"
        ]
    },
    {
        "instruction": "",
        "id": "q7661",
        "input": "how to remove spaces from string in python",
        "output": "",
        "rule": [
            "d7661"
        ]
    },
    {
        "instruction": "",
        "id": "q7662",
        "input": "python self same as this",
        "output": "",
        "rule": [
            "d7662"
        ]
    },
    {
        "instruction": "",
        "id": "q7663",
        "input": "how to remove stopwords python without nltk",
        "output": "",
        "rule": [
            "d7663"
        ]
    },
    {
        "instruction": "",
        "id": "q7664",
        "input": "python send data across thread",
        "output": "",
        "rule": [
            "d7664"
        ]
    },
    {
        "instruction": "",
        "id": "q7665",
        "input": "how to remove symlink in python",
        "output": "",
        "rule": [
            "d7665"
        ]
    },
    {
        "instruction": "",
        "id": "q7666",
        "input": "python sequence export as pmml",
        "output": "",
        "rule": [
            "d7666"
        ]
    },
    {
        "instruction": "",
        "id": "q7667",
        "input": "how to remove white spaces in a file in python",
        "output": "",
        "rule": [
            "d7667"
        ]
    },
    {
        "instruction": "",
        "id": "q7668",
        "input": "python serializers validate list",
        "output": "",
        "rule": [
            "d7668"
        ]
    },
    {
        "instruction": "",
        "id": "q7669",
        "input": "how to render a image in python",
        "output": "",
        "rule": [
            "d7669"
        ]
    },
    {
        "instruction": "",
        "id": "q7670",
        "input": "python series replace nan values by another series",
        "output": "",
        "rule": [
            "d7670"
        ]
    },
    {
        "instruction": "",
        "id": "q7671",
        "input": "how to repeat an input command if an input is invalid in python",
        "output": "",
        "rule": [
            "d7671"
        ]
    },
    {
        "instruction": "",
        "id": "q7672",
        "input": "python series without freq",
        "output": "",
        "rule": [
            "d7672"
        ]
    },
    {
        "instruction": "",
        "id": "q7673",
        "input": "how to reset the input python",
        "output": "",
        "rule": [
            "d7673"
        ]
    },
    {
        "instruction": "",
        "id": "q7674",
        "input": "python session object how to use cookie for request",
        "output": "",
        "rule": [
            "d7674"
        ]
    },
    {
        "instruction": "",
        "id": "q7675",
        "input": "how to restart a python program after it fininshed",
        "output": "",
        "rule": [
            "d7675"
        ]
    },
    {
        "instruction": "",
        "id": "q7676",
        "input": "python set an image as background",
        "output": "",
        "rule": [
            "d7676"
        ]
    },
    {
        "instruction": "",
        "id": "q7677",
        "input": "how to restrict cpu usage percent for python",
        "output": "",
        "rule": [
            "d7677"
        ]
    },
    {
        "instruction": "",
        "id": "q7678",
        "input": "python set axes to 3d",
        "output": "",
        "rule": [
            "d7678"
        ]
    },
    {
        "instruction": "",
        "id": "q7679",
        "input": "how to restrict float decimals in python",
        "output": "",
        "rule": [
            "d7679"
        ]
    },
    {
        "instruction": "",
        "id": "q7680",
        "input": "python set default value of dictionary",
        "output": "",
        "rule": [
            "d7680"
        ]
    },
    {
        "instruction": "",
        "id": "q7681",
        "input": "how to return a hashtable as an array python",
        "output": "",
        "rule": [
            "d7681"
        ]
    },
    {
        "instruction": "",
        "id": "q7682",
        "input": "python set location to center of screen",
        "output": "",
        "rule": [
            "d7682"
        ]
    },
    {
        "instruction": "",
        "id": "q7683",
        "input": "how to return multiple numpy objects python",
        "output": "",
        "rule": [
            "d7683"
        ]
    },
    {
        "instruction": "",
        "id": "q7684",
        "input": "python set pdf properties",
        "output": "",
        "rule": [
            "d7684"
        ]
    },
    {
        "instruction": "",
        "id": "q7685",
        "input": "python set remove list of elements",
        "output": "",
        "rule": [
            "d7685"
        ]
    },
    {
        "instruction": "",
        "id": "q7686",
        "input": "how to return the longest string in a python list",
        "output": "",
        "rule": [
            "d7686"
        ]
    },
    {
        "instruction": "",
        "id": "q7687",
        "input": "python set x axis limits",
        "output": "",
        "rule": [
            "d7687"
        ]
    },
    {
        "instruction": "",
        "id": "q7688",
        "input": "how to rotate a matrix in place in python",
        "output": "",
        "rule": [
            "d7688"
        ]
    },
    {
        "instruction": "",
        "id": "q7689",
        "input": "python sha256 hash on a string",
        "output": "",
        "rule": [
            "d7689"
        ]
    },
    {
        "instruction": "",
        "id": "q7690",
        "input": "how to save a pyplot figure fig as pdf in python",
        "output": "",
        "rule": [
            "d7690"
        ]
    },
    {
        "instruction": "",
        "id": "q7691",
        "input": "python shelve change extension",
        "output": "",
        "rule": [
            "d7691"
        ]
    },
    {
        "instruction": "",
        "id": "q7692",
        "input": "how to save figures in a pdf python",
        "output": "",
        "rule": [
            "d7692"
        ]
    },
    {
        "instruction": "",
        "id": "q7693",
        "input": "python shift image horizontally",
        "output": "",
        "rule": [
            "d7693"
        ]
    },
    {
        "instruction": "",
        "id": "q7694",
        "input": "how to save string to html file in python",
        "output": "",
        "rule": [
            "d7694"
        ]
    },
    {
        "instruction": "",
        "id": "q7695",
        "input": "python short cut key to format",
        "output": "",
        "rule": [
            "d7695"
        ]
    },
    {
        "instruction": "",
        "id": "q7696",
        "input": "how to say if array and index python",
        "output": "",
        "rule": [
            "d7696"
        ]
    },
    {
        "instruction": "",
        "id": "q7697",
        "input": "python show max width and max columns",
        "output": "",
        "rule": [
            "d7697"
        ]
    },
    {
        "instruction": "",
        "id": "q7698",
        "input": "how to scale a image in pil python",
        "output": "",
        "rule": [
            "d7698"
        ]
    },
    {
        "instruction": "",
        "id": "q7699",
        "input": "python show traceback without exiting",
        "output": "",
        "rule": [
            "d7699"
        ]
    },
    {
        "instruction": "",
        "id": "q7700",
        "input": "how to see array size in python",
        "output": "",
        "rule": [
            "d7700"
        ]
    },
    {
        "instruction": "",
        "id": "q7701",
        "input": "python shutdown a pool",
        "output": "",
        "rule": [
            "d7701"
        ]
    },
    {
        "instruction": "",
        "id": "q7702",
        "input": "how to see matrix in python",
        "output": "",
        "rule": [
            "d7702"
        ]
    },
    {
        "instruction": "",
        "id": "q7703",
        "input": "python sigmoid activation function",
        "output": "",
        "rule": [
            "d7703"
        ]
    },
    {
        "instruction": "",
        "id": "q7704",
        "input": "how to select random element from list in fixed sequence in python",
        "output": "",
        "rule": [
            "d7704"
        ]
    },
    {
        "instruction": "",
        "id": "q7705",
        "input": "python similarity between two word seq",
        "output": "",
        "rule": [
            "d7705"
        ]
    },
    {
        "instruction": "",
        "id": "q7706",
        "input": "how to select the last row in python in numpy",
        "output": "",
        "rule": [
            "d7706"
        ]
    },
    {
        "instruction": "",
        "id": "q7707",
        "input": "python size in bytes of arrays",
        "output": "",
        "rule": [
            "d7707"
        ]
    },
    {
        "instruction": "",
        "id": "q7708",
        "input": "how to selecte few elements in list in python by indices",
        "output": "",
        "rule": [
            "d7708"
        ]
    },
    {
        "instruction": "",
        "id": "q7709",
        "input": "python sklearn imputer 'isnan' not supported for the input types",
        "output": "",
        "rule": [
            "d7709"
        ]
    },
    {
        "instruction": "",
        "id": "q7710",
        "input": "how to send ctrl+z to at command python",
        "output": "",
        "rule": [
            "d7710"
        ]
    },
    {
        "instruction": "",
        "id": "q7711",
        "input": "python slice list pass by value",
        "output": "",
        "rule": [
            "d7711"
        ]
    },
    {
        "instruction": "",
        "id": "q7712",
        "input": "python sort array by new index",
        "output": "",
        "rule": [
            "d7712"
        ]
    },
    {
        "instruction": "",
        "id": "q7713",
        "input": "how to seperate the matrix to upper triagle python",
        "output": "",
        "rule": [
            "d7713"
        ]
    },
    {
        "instruction": "",
        "id": "q7714",
        "input": "python sort by second index in 2d array",
        "output": "",
        "rule": [
            "d7714"
        ]
    },
    {
        "instruction": "",
        "id": "q7715",
        "input": "how to sequence events in python 3",
        "output": "",
        "rule": [
            "d7715"
        ]
    },
    {
        "instruction": "",
        "id": "q7716",
        "input": "how to set column in data frame using python",
        "output": "",
        "rule": [
            "d7716"
        ]
    },
    {
        "instruction": "",
        "id": "q7717",
        "input": "python sort list by name",
        "output": "",
        "rule": [
            "d7717"
        ]
    },
    {
        "instruction": "",
        "id": "q7718",
        "input": "how to set date parse in python",
        "output": "",
        "rule": [
            "d7718"
        ]
    },
    {
        "instruction": "",
        "id": "q7719",
        "input": "python sort two dimensional key",
        "output": "",
        "rule": [
            "d7719"
        ]
    },
    {
        "instruction": "",
        "id": "q7720",
        "input": "python sort x and y",
        "output": "",
        "rule": [
            "d7720"
        ]
    },
    {
        "instruction": "",
        "id": "q7721",
        "input": "how to set dimensions of python screen",
        "output": "",
        "rule": [
            "d7721"
        ]
    },
    {
        "instruction": "",
        "id": "q7722",
        "input": "python sounddevice get audio volume",
        "output": "",
        "rule": [
            "d7722"
        ]
    },
    {
        "instruction": "",
        "id": "q7723",
        "input": "how to set python proxy",
        "output": "",
        "rule": [
            "d7723"
        ]
    },
    {
        "instruction": "",
        "id": "q7724",
        "input": "python sparse matrix inverter",
        "output": "",
        "rule": [
            "d7724"
        ]
    },
    {
        "instruction": "",
        "id": "q7725",
        "input": "how to set up a python proxy",
        "output": "",
        "rule": [
            "d7725"
        ]
    },
    {
        "instruction": "",
        "id": "q7726",
        "input": "python sparse matrix nonzero number",
        "output": "",
        "rule": [
            "d7726"
        ]
    },
    {
        "instruction": "",
        "id": "q7727",
        "input": "python specific type for data field",
        "output": "",
        "rule": [
            "d7727"
        ]
    },
    {
        "instruction": "",
        "id": "q7728",
        "input": "how to set xlim in plot python",
        "output": "",
        "rule": [
            "d7728"
        ]
    },
    {
        "instruction": "",
        "id": "q7729",
        "input": "python spherical bessel function",
        "output": "",
        "rule": [
            "d7729"
        ]
    },
    {
        "instruction": "",
        "id": "q7730",
        "input": "how to set y axis as log in python",
        "output": "",
        "rule": [
            "d7730"
        ]
    },
    {
        "instruction": "",
        "id": "q7731",
        "input": "python split array into equal chunks",
        "output": "",
        "rule": [
            "d7731"
        ]
    },
    {
        "instruction": "",
        "id": "q7732",
        "input": "how to show legend in python graphing",
        "output": "",
        "rule": [
            "d7732"
        ]
    },
    {
        "instruction": "",
        "id": "q7733",
        "input": "python split brackets from word on",
        "output": "",
        "rule": [
            "d7733"
        ]
    },
    {
        "instruction": "",
        "id": "q7734",
        "input": "how to show python error messges in tkinter",
        "output": "",
        "rule": [
            "d7734"
        ]
    },
    {
        "instruction": "",
        "id": "q7735",
        "input": "how to show the plot python plt",
        "output": "",
        "rule": [
            "d7735"
        ]
    },
    {
        "instruction": "",
        "id": "q7736",
        "input": "python split not enough values to unpack (expected 2, got 1)",
        "output": "",
        "rule": [
            "d7736"
        ]
    },
    {
        "instruction": "",
        "id": "q7737",
        "input": "how to slice iteratively in python",
        "output": "",
        "rule": [
            "d7737"
        ]
    },
    {
        "instruction": "",
        "id": "q7738",
        "input": "python splitting a list into batches",
        "output": "",
        "rule": [
            "d7738"
        ]
    },
    {
        "instruction": "",
        "id": "q7739",
        "input": "how to slice row and column specifically python",
        "output": "",
        "rule": [
            "d7739"
        ]
    },
    {
        "instruction": "",
        "id": "q7740",
        "input": "python spyder reset command in script",
        "output": "",
        "rule": [
            "d7740"
        ]
    },
    {
        "instruction": "",
        "id": "q7741",
        "input": "how to smooth data in python",
        "output": "",
        "rule": [
            "d7741"
        ]
    },
    {
        "instruction": "",
        "id": "q7742",
        "input": "python spyder reset not working",
        "output": "",
        "rule": [
            "d7742"
        ]
    },
    {
        "instruction": "",
        "id": "q7743",
        "input": "how to smooth in python",
        "output": "",
        "rule": [
            "d7743"
        ]
    },
    {
        "instruction": "",
        "id": "q7744",
        "input": "python sql concat columns",
        "output": "",
        "rule": [
            "d7744"
        ]
    },
    {
        "instruction": "",
        "id": "q7745",
        "input": "how to solve a m x n matrix in python",
        "output": "",
        "rule": [
            "d7745"
        ]
    },
    {
        "instruction": "",
        "id": "q7746",
        "input": "python sql form in join from list",
        "output": "",
        "rule": [
            "d7746"
        ]
    },
    {
        "instruction": "",
        "id": "q7747",
        "input": "how to solve a matrix by python",
        "output": "",
        "rule": [
            "d7747"
        ]
    },
    {
        "instruction": "",
        "id": "q7748",
        "input": "python sql server stored proc with params example",
        "output": "",
        "rule": [
            "d7748"
        ]
    },
    {
        "instruction": "",
        "id": "q7749",
        "input": "how to solve matrix on python",
        "output": "",
        "rule": [
            "d7749"
        ]
    },
    {
        "instruction": "",
        "id": "q7750",
        "input": "python sqlalchemy delete all rows",
        "output": "",
        "rule": [
            "d7750"
        ]
    },
    {
        "instruction": "",
        "id": "q7751",
        "input": "python sqlalchemy get table primary keys",
        "output": "",
        "rule": [
            "d7751"
        ]
    },
    {
        "instruction": "",
        "id": "q7752",
        "input": "how to specfy time zone for python datetime",
        "output": "",
        "rule": [
            "d7752"
        ]
    },
    {
        "instruction": "",
        "id": "q7753",
        "input": "python sqlalchemy out of sync with model",
        "output": "",
        "rule": [
            "d7753"
        ]
    },
    {
        "instruction": "",
        "id": "q7754",
        "input": "how to specify something that only a certain user can do in python",
        "output": "",
        "rule": [
            "d7754"
        ]
    },
    {
        "instruction": "",
        "id": "q7755",
        "input": "python sqlite query to datetime",
        "output": "",
        "rule": [
            "d7755"
        ]
    },
    {
        "instruction": "",
        "id": "q7756",
        "input": "how to specify the file encoding in python",
        "output": "",
        "rule": [
            "d7756"
        ]
    },
    {
        "instruction": "",
        "id": "q7757",
        "input": "python sqlite3 fetchall dictionary",
        "output": "",
        "rule": [
            "d7757"
        ]
    },
    {
        "instruction": "",
        "id": "q7758",
        "input": "how to split a string of words into a list with each word being a char python",
        "output": "",
        "rule": [
            "d7758"
        ]
    },
    {
        "instruction": "",
        "id": "q7759",
        "input": "python standards function names",
        "output": "",
        "rule": [
            "d7759"
        ]
    },
    {
        "instruction": "",
        "id": "q7760",
        "input": "how to split space seperated text in python",
        "output": "",
        "rule": [
            "d7760"
        ]
    },
    {
        "instruction": "",
        "id": "q7761",
        "input": "python start django service",
        "output": "",
        "rule": [
            "d7761"
        ]
    },
    {
        "instruction": "",
        "id": "q7762",
        "input": "how to split words into list without spaces and punctuation in python",
        "output": "",
        "rule": [
            "d7762"
        ]
    },
    {
        "instruction": "",
        "id": "q7763",
        "input": "python static method constant",
        "output": "",
        "rule": [
            "d7763"
        ]
    },
    {
        "instruction": "",
        "id": "q7764",
        "input": "how to stack 2d arrays in python",
        "output": "",
        "rule": [
            "d7764"
        ]
    },
    {
        "instruction": "",
        "id": "q7765",
        "input": "python static type return of functyion",
        "output": "",
        "rule": [
            "d7765"
        ]
    },
    {
        "instruction": "",
        "id": "q7766",
        "input": "how to stop a python window from closing on startup",
        "output": "",
        "rule": [
            "d7766"
        ]
    },
    {
        "instruction": "",
        "id": "q7767",
        "input": "python std deviation of time",
        "output": "",
        "rule": [
            "d7767"
        ]
    },
    {
        "instruction": "",
        "id": "q7768",
        "input": "how to store a default value in python",
        "output": "",
        "rule": [
            "d7768"
        ]
    },
    {
        "instruction": "",
        "id": "q7769",
        "input": "python stdin character encoding",
        "output": "",
        "rule": [
            "d7769"
        ]
    },
    {
        "instruction": "",
        "id": "q7770",
        "input": "how to strop an animation from repeating in python",
        "output": "",
        "rule": [
            "d7770"
        ]
    },
    {
        "instruction": "",
        "id": "q7771",
        "input": "python stdin file or tty",
        "output": "",
        "rule": [
            "d7771"
        ]
    },
    {
        "instruction": "",
        "id": "q7772",
        "input": "how to swap maatrix rows in python",
        "output": "",
        "rule": [
            "d7772"
        ]
    },
    {
        "instruction": "",
        "id": "q7773",
        "input": "python stdin object type",
        "output": "",
        "rule": [
            "d7773"
        ]
    },
    {
        "instruction": "",
        "id": "q7774",
        "input": "how to take data columns in mss file python",
        "output": "",
        "rule": [
            "d7774"
        ]
    },
    {
        "instruction": "",
        "id": "q7775",
        "input": "python stdout write line",
        "output": "",
        "rule": [
            "d7775"
        ]
    },
    {
        "instruction": "",
        "id": "q7776",
        "input": "how to tell if a list is sorted python",
        "output": "",
        "rule": [
            "d7776"
        ]
    },
    {
        "instruction": "",
        "id": "q7777",
        "input": "python stop a moduyle",
        "output": "",
        "rule": [
            "d7777"
        ]
    },
    {
        "instruction": "",
        "id": "q7778",
        "input": "how to tell if complex number in python",
        "output": "",
        "rule": [
            "d7778"
        ]
    },
    {
        "instruction": "",
        "id": "q7779",
        "input": "python stop flask server after response",
        "output": "",
        "rule": [
            "d7779"
        ]
    },
    {
        "instruction": "",
        "id": "q7780",
        "input": "python stop update services",
        "output": "",
        "rule": [
            "d7780"
        ]
    },
    {
        "instruction": "",
        "id": "q7781",
        "input": "how to trim whitespace in python",
        "output": "",
        "rule": [
            "d7781"
        ]
    },
    {
        "instruction": "",
        "id": "q7782",
        "input": "python store api responses as json",
        "output": "",
        "rule": [
            "d7782"
        ]
    },
    {
        "instruction": "",
        "id": "q7783",
        "input": "how to turn a list into string python",
        "output": "",
        "rule": [
            "d7783"
        ]
    },
    {
        "instruction": "",
        "id": "q7784",
        "input": "python str' object is not callable",
        "output": "",
        "rule": [
            "d7784"
        ]
    },
    {
        "instruction": "",
        "id": "q7785",
        "input": "how to turn a non iterable object in python into an iterable object",
        "output": "",
        "rule": [
            "d7785"
        ]
    },
    {
        "instruction": "",
        "id": "q7786",
        "input": "python stream data is empty after read",
        "output": "",
        "rule": [
            "d7786"
        ]
    },
    {
        "instruction": "",
        "id": "q7787",
        "input": "how to turn array of arrays to one array in python",
        "output": "",
        "rule": [
            "d7787"
        ]
    },
    {
        "instruction": "",
        "id": "q7788",
        "input": "python strftime milliseconds precision",
        "output": "",
        "rule": [
            "d7788"
        ]
    },
    {
        "instruction": "",
        "id": "q7789",
        "input": "how to turn sync functino asynchronous python asyncio",
        "output": "",
        "rule": [
            "d7789"
        ]
    },
    {
        "instruction": "",
        "id": "q7790",
        "input": "python string date to epoch",
        "output": "",
        "rule": [
            "d7790"
        ]
    },
    {
        "instruction": "",
        "id": "q7791",
        "input": "how to use capitalize eacg word in python",
        "output": "",
        "rule": [
            "d7791"
        ]
    },
    {
        "instruction": "",
        "id": "q7792",
        "input": "python string differnce accuracy",
        "output": "",
        "rule": [
            "d7792"
        ]
    },
    {
        "instruction": "",
        "id": "q7793",
        "input": "how to use fillna for blank strings in python",
        "output": "",
        "rule": [
            "d7793"
        ]
    },
    {
        "instruction": "",
        "id": "q7794",
        "input": "python string format of dictionary to dictionary",
        "output": "",
        "rule": [
            "d7794"
        ]
    },
    {
        "instruction": "",
        "id": "q7795",
        "input": "how to use isin to negate in python",
        "output": "",
        "rule": [
            "d7795"
        ]
    },
    {
        "instruction": "",
        "id": "q7796",
        "input": "python string formating stackoverflow",
        "output": "",
        "rule": [
            "d7796"
        ]
    },
    {
        "instruction": "",
        "id": "q7797",
        "input": "how to use key to access tags in python",
        "output": "",
        "rule": [
            "d7797"
        ]
    },
    {
        "instruction": "",
        "id": "q7798",
        "input": "python string graphic font width",
        "output": "",
        "rule": [
            "d7798"
        ]
    },
    {
        "instruction": "",
        "id": "q7799",
        "input": "how to use multiple booleen opetators in python",
        "output": "",
        "rule": [
            "d7799"
        ]
    },
    {
        "instruction": "",
        "id": "q7800",
        "input": "python string logical comparison",
        "output": "",
        "rule": [
            "d7800"
        ]
    },
    {
        "instruction": "",
        "id": "q7801",
        "input": "how to use python to check contains",
        "output": "",
        "rule": [
            "d7801"
        ]
    },
    {
        "instruction": "",
        "id": "q7802",
        "input": "python string methods to remove punctuation",
        "output": "",
        "rule": [
            "d7802"
        ]
    },
    {
        "instruction": "",
        "id": "q7803",
        "input": "how to use python to check if the internet is up",
        "output": "",
        "rule": [
            "d7803"
        ]
    },
    {
        "instruction": "",
        "id": "q7804",
        "input": "python string remove white spaces three different way",
        "output": "",
        "rule": [
            "d7804"
        ]
    },
    {
        "instruction": "",
        "id": "q7805",
        "input": "how to use python to do fft",
        "output": "",
        "rule": [
            "d7805"
        ]
    },
    {
        "instruction": "",
        "id": "q7806",
        "input": "python string replace case insensitive",
        "output": "",
        "rule": [
            "d7806"
        ]
    },
    {
        "instruction": "",
        "id": "q7807",
        "input": "how to use python to perform fft",
        "output": "",
        "rule": [
            "d7807"
        ]
    },
    {
        "instruction": "",
        "id": "q7808",
        "input": "python string slice end of string",
        "output": "",
        "rule": [
            "d7808"
        ]
    },
    {
        "instruction": "",
        "id": "q7809",
        "input": "how to use the restart python function",
        "output": "",
        "rule": [
            "d7809"
        ]
    },
    {
        "instruction": "",
        "id": "q7810",
        "input": "python string slice first half",
        "output": "",
        "rule": [
            "d7810"
        ]
    },
    {
        "instruction": "",
        "id": "q7811",
        "input": "how to validate a regex in python3",
        "output": "",
        "rule": [
            "d7811"
        ]
    },
    {
        "instruction": "",
        "id": "q7812",
        "input": "python string to c++ char array",
        "output": "",
        "rule": [
            "d7812"
        ]
    },
    {
        "instruction": "",
        "id": "q7813",
        "input": "how to verify if a type is a string python",
        "output": "",
        "rule": [
            "d7813"
        ]
    },
    {
        "instruction": "",
        "id": "q7814",
        "input": "python strings sstrip punctuation",
        "output": "",
        "rule": [
            "d7814"
        ]
    },
    {
        "instruction": "",
        "id": "q7815",
        "input": "how to view the connection status in python",
        "output": "",
        "rule": [
            "d7815"
        ]
    },
    {
        "instruction": "",
        "id": "q7816",
        "input": "python strip trailing non alpha",
        "output": "",
        "rule": [
            "d7816"
        ]
    },
    {
        "instruction": "",
        "id": "q7817",
        "input": "how to visualize decision tree python sklearn",
        "output": "",
        "rule": [
            "d7817"
        ]
    },
    {
        "instruction": "",
        "id": "q7818",
        "input": "python strip zeroes after decimal",
        "output": "",
        "rule": [
            "d7818"
        ]
    },
    {
        "instruction": "",
        "id": "q7819",
        "input": "how to write a function that returns the fibonacci number on python",
        "output": "",
        "rule": [
            "d7819"
        ]
    },
    {
        "instruction": "",
        "id": "q7820",
        "input": "how to write a variable value to log python",
        "output": "",
        "rule": [
            "d7820"
        ]
    },
    {
        "instruction": "",
        "id": "q7821",
        "input": "python subplot xtick labels won't show",
        "output": "",
        "rule": [
            "d7821"
        ]
    },
    {
        "instruction": "",
        "id": "q7822",
        "input": "how to write to a document without erasing python",
        "output": "",
        "rule": [
            "d7822"
        ]
    },
    {
        "instruction": "",
        "id": "q7823",
        "input": "python subprocess run bash script in local directory",
        "output": "",
        "rule": [
            "d7823"
        ]
    },
    {
        "instruction": "",
        "id": "q7824",
        "input": "hwo to get function name in the function python",
        "output": "",
        "rule": [
            "d7824"
        ]
    },
    {
        "instruction": "",
        "id": "q7825",
        "input": "python subprocess thread not closing",
        "output": "",
        "rule": [
            "d7825"
        ]
    },
    {
        "instruction": "",
        "id": "q7826",
        "input": "i want to return none if input to my function is empty python",
        "output": "",
        "rule": [
            "d7826"
        ]
    },
    {
        "instruction": "",
        "id": "q7827",
        "input": "python subprocess write stdin",
        "output": "",
        "rule": [
            "d7827"
        ]
    },
    {
        "instruction": "",
        "id": "q7828",
        "input": "ideal lowpass filter python",
        "output": "",
        "rule": [
            "d7828"
        ]
    },
    {
        "instruction": "",
        "id": "q7829",
        "input": "python subset list by list of index values",
        "output": "",
        "rule": [
            "d7829"
        ]
    },
    {
        "instruction": "",
        "id": "q7830",
        "input": "identify the index of median python",
        "output": "",
        "rule": [
            "d7830"
        ]
    },
    {
        "instruction": "",
        "id": "q7831",
        "input": "python sync mysql tables sqlalchemy",
        "output": "",
        "rule": [
            "d7831"
        ]
    },
    {
        "instruction": "",
        "id": "q7832",
        "input": "if a string contains any of a list python",
        "output": "",
        "rule": [
            "d7832"
        ]
    },
    {
        "instruction": "",
        "id": "q7833",
        "input": "python syntax parenthases inside",
        "output": "",
        "rule": [
            "d7833"
        ]
    },
    {
        "instruction": "",
        "id": "q7834",
        "input": "if file changes then python",
        "output": "",
        "rule": [
            "d7834"
        ]
    },
    {
        "instruction": "",
        "id": "q7835",
        "input": "python table already exists",
        "output": "",
        "rule": [
            "d7835"
        ]
    },
    {
        "instruction": "",
        "id": "q7836",
        "input": "if matches a set of strings python",
        "output": "",
        "rule": [
            "d7836"
        ]
    },
    {
        "instruction": "",
        "id": "q7837",
        "input": "python table column row slicing",
        "output": "",
        "rule": [
            "d7837"
        ]
    },
    {
        "instruction": "",
        "id": "q7838",
        "input": "if method equals post python flask",
        "output": "",
        "rule": [
            "d7838"
        ]
    },
    {
        "instruction": "",
        "id": "q7839",
        "input": "python table styles colorful grid",
        "output": "",
        "rule": [
            "d7839"
        ]
    },
    {
        "instruction": "",
        "id": "q7840",
        "input": "if request args get flask python",
        "output": "",
        "rule": [
            "d7840"
        ]
    },
    {
        "instruction": "",
        "id": "q7841",
        "input": "python tell all threads to end",
        "output": "",
        "rule": [
            "d7841"
        ]
    },
    {
        "instruction": "",
        "id": "q7842",
        "input": "if return url python",
        "output": "",
        "rule": [
            "d7842"
        ]
    },
    {
        "instruction": "",
        "id": "q7843",
        "input": "python tell scalar or vector",
        "output": "",
        "rule": [
            "d7843"
        ]
    },
    {
        "instruction": "",
        "id": "q7844",
        "input": "if set is in subset python",
        "output": "",
        "rule": [
            "d7844"
        ]
    },
    {
        "instruction": "",
        "id": "q7845",
        "input": "python tensor squeeze specific dimension",
        "output": "",
        "rule": [
            "d7845"
        ]
    },
    {
        "instruction": "",
        "id": "q7846",
        "input": "if status code is 401 what should we do in python",
        "output": "",
        "rule": [
            "d7846"
        ]
    },
    {
        "instruction": "",
        "id": "q7847",
        "input": "python tensorflow argmax axis",
        "output": "",
        "rule": [
            "d7847"
        ]
    },
    {
        "instruction": "",
        "id": "q7848",
        "input": "python tensorflow estimator get prediction on data",
        "output": "",
        "rule": [
            "d7848"
        ]
    },
    {
        "instruction": "",
        "id": "q7849",
        "input": "in python is none the same as empty set",
        "output": "",
        "rule": [
            "d7849"
        ]
    },
    {
        "instruction": "",
        "id": "q7850",
        "input": "python tensorflow list gpus",
        "output": "",
        "rule": [
            "d7850"
        ]
    },
    {
        "instruction": "",
        "id": "q7851",
        "input": "inappropriate ioctl for device python popen",
        "output": "",
        "rule": [
            "d7851"
        ]
    },
    {
        "instruction": "",
        "id": "q7852",
        "input": "python tensorflow unequal dimensions",
        "output": "",
        "rule": [
            "d7852"
        ]
    },
    {
        "instruction": "",
        "id": "q7853",
        "input": "increase rectangle line size python",
        "output": "",
        "rule": [
            "d7853"
        ]
    },
    {
        "instruction": "",
        "id": "q7854",
        "input": "python test all booleans in list",
        "output": "",
        "rule": [
            "d7854"
        ]
    },
    {
        "instruction": "",
        "id": "q7855",
        "input": "increase width of bar plot in python",
        "output": "",
        "rule": [
            "d7855"
        ]
    },
    {
        "instruction": "",
        "id": "q7856",
        "input": "python test graph connected components",
        "output": "",
        "rule": [
            "d7856"
        ]
    },
    {
        "instruction": "",
        "id": "q7857",
        "input": "index lines in a file python",
        "output": "",
        "rule": [
            "d7857"
        ]
    },
    {
        "instruction": "",
        "id": "q7858",
        "input": "python test if a object is iterable",
        "output": "",
        "rule": [
            "d7858"
        ]
    },
    {
        "instruction": "",
        "id": "q7859",
        "input": "index number in a series python",
        "output": "",
        "rule": [
            "d7859"
        ]
    },
    {
        "instruction": "",
        "id": "q7860",
        "input": "python test if file in folder",
        "output": "",
        "rule": [
            "d7860"
        ]
    },
    {
        "instruction": "",
        "id": "q7861",
        "input": "index of an element in list python",
        "output": "",
        "rule": [
            "d7861"
        ]
    },
    {
        "instruction": "",
        "id": "q7862",
        "input": "python test if object has method",
        "output": "",
        "rule": [
            "d7862"
        ]
    },
    {
        "instruction": "",
        "id": "q7863",
        "input": "python test if stdin",
        "output": "",
        "rule": [
            "d7863"
        ]
    },
    {
        "instruction": "",
        "id": "q7864",
        "input": "index value of cell python",
        "output": "",
        "rule": [
            "d7864"
        ]
    },
    {
        "instruction": "",
        "id": "q7865",
        "input": "python testing if an xml node is empty",
        "output": "",
        "rule": [
            "d7865"
        ]
    },
    {
        "instruction": "",
        "id": "q7866",
        "input": "init a python list of certain size",
        "output": "",
        "rule": [
            "d7866"
        ]
    },
    {
        "instruction": "",
        "id": "q7867",
        "input": "python threading exit handler",
        "output": "",
        "rule": [
            "d7867"
        ]
    },
    {
        "instruction": "",
        "id": "q7868",
        "input": "inputting time as hours and minutes in python",
        "output": "",
        "rule": [
            "d7868"
        ]
    },
    {
        "instruction": "",
        "id": "q7869",
        "input": "python three labels matthews correlation coefficient",
        "output": "",
        "rule": [
            "d7869"
        ]
    },
    {
        "instruction": "",
        "id": "q7870",
        "input": "int to strin python",
        "output": "",
        "rule": [
            "d7870"
        ]
    },
    {
        "instruction": "",
        "id": "q7871",
        "input": "python time from hour to minute",
        "output": "",
        "rule": [
            "d7871"
        ]
    },
    {
        "instruction": "",
        "id": "q7872",
        "input": "integer boolen iterable in python",
        "output": "",
        "rule": [
            "d7872"
        ]
    },
    {
        "instruction": "",
        "id": "q7873",
        "input": "python time is between start end",
        "output": "",
        "rule": [
            "d7873"
        ]
    },
    {
        "instruction": "",
        "id": "q7874",
        "input": "integrer to bytes python",
        "output": "",
        "rule": [
            "d7874"
        ]
    },
    {
        "instruction": "",
        "id": "q7875",
        "input": "python timestamp type to datetime type",
        "output": "",
        "rule": [
            "d7875"
        ]
    },
    {
        "instruction": "",
        "id": "q7876",
        "input": "interpolate python last value",
        "output": "",
        "rule": [
            "d7876"
        ]
    },
    {
        "instruction": "",
        "id": "q7877",
        "input": "python tinker move focus to next widget",
        "output": "",
        "rule": [
            "d7877"
        ]
    },
    {
        "instruction": "",
        "id": "q7878",
        "input": "iron python delete object from memory",
        "output": "",
        "rule": [
            "d7878"
        ]
    },
    {
        "instruction": "",
        "id": "q7879",
        "input": "python tkinter canvas scroll bars",
        "output": "",
        "rule": [
            "d7879"
        ]
    },
    {
        "instruction": "",
        "id": "q7880",
        "input": "ironpython not calling garbage collection",
        "output": "",
        "rule": [
            "d7880"
        ]
    },
    {
        "instruction": "",
        "id": "q7881",
        "input": "python tkinter combobox all values",
        "output": "",
        "rule": [
            "d7881"
        ]
    },
    {
        "instruction": "",
        "id": "q7882",
        "input": "is a python set unordered",
        "output": "",
        "rule": [
            "d7882"
        ]
    },
    {
        "instruction": "",
        "id": "q7883",
        "input": "python tkinter get window width",
        "output": "",
        "rule": [
            "d7883"
        ]
    },
    {
        "instruction": "",
        "id": "q7884",
        "input": "is node defined in python",
        "output": "",
        "rule": [
            "d7884"
        ]
    },
    {
        "instruction": "",
        "id": "q7885",
        "input": "python tkinter gui closes immediately",
        "output": "",
        "rule": [
            "d7885"
        ]
    },
    {
        "instruction": "",
        "id": "q7886",
        "input": "is python block scoped or function scoped",
        "output": "",
        "rule": [
            "d7886"
        ]
    },
    {
        "instruction": "",
        "id": "q7887",
        "input": "python tkinter how to size a scrollbar",
        "output": "",
        "rule": [
            "d7887"
        ]
    },
    {
        "instruction": "",
        "id": "q7888",
        "input": "python tkinter paned scrollbar",
        "output": "",
        "rule": [
            "d7888"
        ]
    },
    {
        "instruction": "",
        "id": "q7889",
        "input": "is true a singleton in python",
        "output": "",
        "rule": [
            "d7889"
        ]
    },
    {
        "instruction": "",
        "id": "q7890",
        "input": "iterate json file pythong",
        "output": "",
        "rule": [
            "d7890"
        ]
    },
    {
        "instruction": "",
        "id": "q7891",
        "input": "python to add random noise",
        "output": "",
        "rule": [
            "d7891"
        ]
    },
    {
        "instruction": "",
        "id": "q7892",
        "input": "iterate over the sorted keys of a dict in python",
        "output": "",
        "rule": [
            "d7892"
        ]
    },
    {
        "instruction": "",
        "id": "q7893",
        "input": "python to calculate max min median",
        "output": "",
        "rule": [
            "d7893"
        ]
    },
    {
        "instruction": "",
        "id": "q7894",
        "input": "jar is for java and what python has",
        "output": "",
        "rule": [
            "d7894"
        ]
    },
    {
        "instruction": "",
        "id": "q7895",
        "input": "python to lat and long",
        "output": "",
        "rule": [
            "d7895"
        ]
    },
    {
        "instruction": "",
        "id": "q7896",
        "input": "java inputstreamreader python equivalent",
        "output": "",
        "rule": [
            "d7896"
        ]
    },
    {
        "instruction": "",
        "id": "q7897",
        "input": "python to scala converter",
        "output": "",
        "rule": [
            "d7897"
        ]
    },
    {
        "instruction": "",
        "id": "q7898",
        "input": "jpupyter taking input to a python code",
        "output": "",
        "rule": [
            "d7898"
        ]
    },
    {
        "instruction": "",
        "id": "q7899",
        "input": "python tornado detect user agent",
        "output": "",
        "rule": [
            "d7899"
        ]
    },
    {
        "instruction": "",
        "id": "q7900",
        "input": "json loads python encoding",
        "output": "",
        "rule": [
            "d7900"
        ]
    },
    {
        "instruction": "",
        "id": "q7901",
        "input": "python trace execution ath",
        "output": "",
        "rule": [
            "d7901"
        ]
    },
    {
        "instruction": "",
        "id": "q7902",
        "input": "python track time it takes to run function",
        "output": "",
        "rule": [
            "d7902"
        ]
    },
    {
        "instruction": "",
        "id": "q7903",
        "input": "judge if the last iterator python",
        "output": "",
        "rule": [
            "d7903"
        ]
    },
    {
        "instruction": "",
        "id": "q7904",
        "input": "python tree pretty print",
        "output": "",
        "rule": [
            "d7904"
        ]
    },
    {
        "instruction": "",
        "id": "q7905",
        "input": "judge if the python value type is numeric",
        "output": "",
        "rule": [
            "d7905"
        ]
    },
    {
        "instruction": "",
        "id": "q7906",
        "input": "python trim characters for left side of string",
        "output": "",
        "rule": [
            "d7906"
        ]
    },
    {
        "instruction": "",
        "id": "q7907",
        "input": "keep the ' in the sentence python",
        "output": "",
        "rule": [
            "d7907"
        ]
    },
    {
        "instruction": "",
        "id": "q7908",
        "input": "python trim string from right of string",
        "output": "",
        "rule": [
            "d7908"
        ]
    },
    {
        "instruction": "",
        "id": "q7909",
        "input": "keep the order of keys in a dictionary in python",
        "output": "",
        "rule": [
            "d7909"
        ]
    },
    {
        "instruction": "",
        "id": "q7910",
        "input": "python trim whitespace at the end of the line",
        "output": "",
        "rule": [
            "d7910"
        ]
    },
    {
        "instruction": "",
        "id": "q7911",
        "input": "keyboard binding function python",
        "output": "",
        "rule": [
            "d7911"
        ]
    },
    {
        "instruction": "",
        "id": "q7912",
        "input": "python try catch 3 times",
        "output": "",
        "rule": [
            "d7912"
        ]
    },
    {
        "instruction": "",
        "id": "q7913",
        "input": "kill a thread after join in python",
        "output": "",
        "rule": [
            "d7913"
        ]
    },
    {
        "instruction": "",
        "id": "q7914",
        "input": "python try catch within a loop",
        "output": "",
        "rule": [
            "d7914"
        ]
    },
    {
        "instruction": "",
        "id": "q7915",
        "input": "kmeans for multidimensional clustering python",
        "output": "",
        "rule": [
            "d7915"
        ]
    },
    {
        "instruction": "",
        "id": "q7916",
        "input": "python ttk scrollbar display only in treeview window area",
        "output": "",
        "rule": [
            "d7916"
        ]
    },
    {
        "instruction": "",
        "id": "q7917",
        "input": "kmeans select columns to cluster python",
        "output": "",
        "rule": [
            "d7917"
        ]
    },
    {
        "instruction": "",
        "id": "q7918",
        "input": "python tuple destructuring in lambda",
        "output": "",
        "rule": [
            "d7918"
        ]
    },
    {
        "instruction": "",
        "id": "q7919",
        "input": "l2 norm of vector matrix python",
        "output": "",
        "rule": [
            "d7919"
        ]
    },
    {
        "instruction": "",
        "id": "q7920",
        "input": "python tuple destructuring on lambda not working",
        "output": "",
        "rule": [
            "d7920"
        ]
    },
    {
        "instruction": "",
        "id": "q7921",
        "input": "lambert conformal conic projection python",
        "output": "",
        "rule": [
            "d7921"
        ]
    },
    {
        "instruction": "",
        "id": "q7922",
        "input": "python tuple hash function",
        "output": "",
        "rule": [
            "d7922"
        ]
    },
    {
        "instruction": "",
        "id": "q7923",
        "input": "last element in iterator python",
        "output": "",
        "rule": [
            "d7923"
        ]
    },
    {
        "instruction": "",
        "id": "q7924",
        "input": "length or norm of the vector a in python",
        "output": "",
        "rule": [
            "d7924"
        ]
    },
    {
        "instruction": "",
        "id": "q7925",
        "input": "python turn dict into kwargs",
        "output": "",
        "rule": [
            "d7925"
        ]
    },
    {
        "instruction": "",
        "id": "q7926",
        "input": "limit on heapq size python",
        "output": "",
        "rule": [
            "d7926"
        ]
    },
    {
        "instruction": "",
        "id": "q7927",
        "input": "python turn init args into kwargs",
        "output": "",
        "rule": [
            "d7927"
        ]
    },
    {
        "instruction": "",
        "id": "q7928",
        "input": "python turn nonetype to string",
        "output": "",
        "rule": [
            "d7928"
        ]
    },
    {
        "instruction": "",
        "id": "q7929",
        "input": "limit y axis in python pyplot",
        "output": "",
        "rule": [
            "d7929"
        ]
    },
    {
        "instruction": "",
        "id": "q7930",
        "input": "python turn nparray into list",
        "output": "",
        "rule": [
            "d7930"
        ]
    },
    {
        "instruction": "",
        "id": "q7931",
        "input": "linear regression in python with multiple features",
        "output": "",
        "rule": [
            "d7931"
        ]
    },
    {
        "instruction": "",
        "id": "q7932",
        "input": "python twisted session hangs",
        "output": "",
        "rule": [
            "d7932"
        ]
    },
    {
        "instruction": "",
        "id": "q7933",
        "input": "linux python get memory usage",
        "output": "",
        "rule": [
            "d7933"
        ]
    },
    {
        "instruction": "",
        "id": "q7934",
        "input": "python twitter api get tweets from user",
        "output": "",
        "rule": [
            "d7934"
        ]
    },
    {
        "instruction": "",
        "id": "q7935",
        "input": "list composed of 2d arrays in python",
        "output": "",
        "rule": [
            "d7935"
        ]
    },
    {
        "instruction": "",
        "id": "q7936",
        "input": "python twitter hashtag detector",
        "output": "",
        "rule": [
            "d7936"
        ]
    },
    {
        "instruction": "",
        "id": "q7937",
        "input": "list contain same elements python",
        "output": "",
        "rule": [
            "d7937"
        ]
    },
    {
        "instruction": "",
        "id": "q7938",
        "input": "python type assertion int",
        "output": "",
        "rule": [
            "d7938"
        ]
    },
    {
        "instruction": "",
        "id": "q7939",
        "input": "list delete duplicate python",
        "output": "",
        "rule": [
            "d7939"
        ]
    },
    {
        "instruction": "",
        "id": "q7940",
        "input": "python unique entries in list",
        "output": "",
        "rule": [
            "d7940"
        ]
    },
    {
        "instruction": "",
        "id": "q7941",
        "input": "list to dict in python",
        "output": "",
        "rule": [
            "d7941"
        ]
    },
    {
        "instruction": "",
        "id": "q7942",
        "input": "python unit test cmd",
        "output": "",
        "rule": [
            "d7942"
        ]
    },
    {
        "instruction": "",
        "id": "q7943",
        "input": "load h5py load to different formats in python",
        "output": "",
        "rule": [
            "d7943"
        ]
    },
    {
        "instruction": "",
        "id": "q7944",
        "input": "python unittest and coverage report",
        "output": "",
        "rule": [
            "d7944"
        ]
    },
    {
        "instruction": "",
        "id": "q7945",
        "input": "load image into tensorflow python",
        "output": "",
        "rule": [
            "d7945"
        ]
    },
    {
        "instruction": "",
        "id": "q7946",
        "input": "python unittest assert not raise",
        "output": "",
        "rule": [
            "d7946"
        ]
    },
    {
        "instruction": "",
        "id": "q7947",
        "input": "load json into mongodb from python",
        "output": "",
        "rule": [
            "d7947"
        ]
    },
    {
        "instruction": "",
        "id": "q7948",
        "input": "loading a json file into netezza using python",
        "output": "",
        "rule": [
            "d7948"
        ]
    },
    {
        "instruction": "",
        "id": "q7949",
        "input": "python url retrieve ntp time",
        "output": "",
        "rule": [
            "d7949"
        ]
    },
    {
        "instruction": "",
        "id": "q7950",
        "input": "log fit unbalanced python",
        "output": "",
        "rule": [
            "d7950"
        ]
    },
    {
        "instruction": "",
        "id": "q7951",
        "input": "python urllib openurl return code",
        "output": "",
        "rule": [
            "d7951"
        ]
    },
    {
        "instruction": "",
        "id": "q7952",
        "input": "logging output in python stored",
        "output": "",
        "rule": [
            "d7952"
        ]
    },
    {
        "instruction": "",
        "id": "q7953",
        "input": "python usb access deined",
        "output": "",
        "rule": [
            "d7953"
        ]
    },
    {
        "instruction": "",
        "id": "q7954",
        "input": "logics for making a histogram in python without using matplotlib",
        "output": "",
        "rule": [
            "d7954"
        ]
    },
    {
        "instruction": "",
        "id": "q7955",
        "input": "python use list generate dict",
        "output": "",
        "rule": [
            "d7955"
        ]
    },
    {
        "instruction": "",
        "id": "q7956",
        "input": "logistic regression for two valued variable python stack overflow",
        "output": "",
        "rule": [
            "d7956"
        ]
    },
    {
        "instruction": "",
        "id": "q7957",
        "input": "python using a pidfile",
        "output": "",
        "rule": [
            "d7957"
        ]
    },
    {
        "instruction": "",
        "id": "q7958",
        "input": "logistic regression python skleran with categorical variables",
        "output": "",
        "rule": [
            "d7958"
        ]
    },
    {
        "instruction": "",
        "id": "q7959",
        "input": "lowercasing a string python",
        "output": "",
        "rule": [
            "d7959"
        ]
    },
    {
        "instruction": "",
        "id": "q7960",
        "input": "python variables equals to the value of other variable",
        "output": "",
        "rule": [
            "d7960"
        ]
    },
    {
        "instruction": "",
        "id": "q7961",
        "input": "make a callable tuple python",
        "output": "",
        "rule": [
            "d7961"
        ]
    },
    {
        "instruction": "",
        "id": "q7962",
        "input": "python virtualenv exist dir",
        "output": "",
        "rule": [
            "d7962"
        ]
    },
    {
        "instruction": "",
        "id": "q7963",
        "input": "make a separate copy in python",
        "output": "",
        "rule": [
            "d7963"
        ]
    },
    {
        "instruction": "",
        "id": "q7964",
        "input": "python walk through all files in folder recuricvely",
        "output": "",
        "rule": [
            "d7964"
        ]
    },
    {
        "instruction": "",
        "id": "q7965",
        "input": "make array sequence python numpy",
        "output": "",
        "rule": [
            "d7965"
        ]
    },
    {
        "instruction": "",
        "id": "q7966",
        "input": "python waveform offset subtraction",
        "output": "",
        "rule": [
            "d7966"
        ]
    },
    {
        "instruction": "",
        "id": "q7967",
        "input": "make columns strings python",
        "output": "",
        "rule": [
            "d7967"
        ]
    },
    {
        "instruction": "",
        "id": "q7968",
        "input": "python websocket detect closed",
        "output": "",
        "rule": [
            "d7968"
        ]
    },
    {
        "instruction": "",
        "id": "q7969",
        "input": "make list to dictionary python",
        "output": "",
        "rule": [
            "d7969"
        ]
    },
    {
        "instruction": "",
        "id": "q7970",
        "input": "python what character ends the line after an if",
        "output": "",
        "rule": [
            "d7970"
        ]
    },
    {
        "instruction": "",
        "id": "q7971",
        "input": "make something an array python",
        "output": "",
        "rule": [
            "d7971"
        ]
    },
    {
        "instruction": "",
        "id": "q7972",
        "input": "python win32api get handle from property name",
        "output": "",
        "rule": [
            "d7972"
        ]
    },
    {
        "instruction": "",
        "id": "q7973",
        "input": "making a list of a specific size in python",
        "output": "",
        "rule": [
            "d7973"
        ]
    },
    {
        "instruction": "",
        "id": "q7974",
        "input": "python window reset mouse cursor",
        "output": "",
        "rule": [
            "d7974"
        ]
    },
    {
        "instruction": "",
        "id": "q7975",
        "input": "making pie charts in python without external libraries",
        "output": "",
        "rule": [
            "d7975"
        ]
    },
    {
        "instruction": "",
        "id": "q7976",
        "input": "python winreg looping through subkeys",
        "output": "",
        "rule": [
            "d7976"
        ]
    },
    {
        "instruction": "",
        "id": "q7977",
        "input": "map to reverse dictionary python",
        "output": "",
        "rule": [
            "d7977"
        ]
    },
    {
        "instruction": "",
        "id": "q7978",
        "input": "match parenthesis in string using stack python",
        "output": "",
        "rule": [
            "d7978"
        ]
    },
    {
        "instruction": "",
        "id": "q7979",
        "input": "python write a dict into a file",
        "output": "",
        "rule": [
            "d7979"
        ]
    },
    {
        "instruction": "",
        "id": "q7980",
        "input": "match specifc string except other python",
        "output": "",
        "rule": [
            "d7980"
        ]
    },
    {
        "instruction": "",
        "id": "q7981",
        "input": "python write a dictinery to a josn file",
        "output": "",
        "rule": [
            "d7981"
        ]
    },
    {
        "instruction": "",
        "id": "q7982",
        "input": "math fuction for area of triangle python",
        "output": "",
        "rule": [
            "d7982"
        ]
    },
    {
        "instruction": "",
        "id": "q7983",
        "input": "python write a list to a file tab separated",
        "output": "",
        "rule": [
            "d7983"
        ]
    },
    {
        "instruction": "",
        "id": "q7984",
        "input": "matrix row vector return python",
        "output": "",
        "rule": [
            "d7984"
        ]
    },
    {
        "instruction": "",
        "id": "q7985",
        "input": "python write data frames to hdf5",
        "output": "",
        "rule": [
            "d7985"
        ]
    },
    {
        "instruction": "",
        "id": "q7986",
        "input": "matrix to adjacency list python",
        "output": "",
        "rule": [
            "d7986"
        ]
    },
    {
        "instruction": "",
        "id": "q7987",
        "input": "python write json to file format",
        "output": "",
        "rule": [
            "d7987"
        ]
    },
    {
        "instruction": "",
        "id": "q7988",
        "input": "maximum memory usage running python script",
        "output": "",
        "rule": [
            "d7988"
        ]
    },
    {
        "instruction": "",
        "id": "q7989",
        "input": "md5 string python code",
        "output": "",
        "rule": [
            "d7989"
        ]
    },
    {
        "instruction": "",
        "id": "q7990",
        "input": "python write list to tab delimited",
        "output": "",
        "rule": [
            "d7990"
        ]
    },
    {
        "instruction": "",
        "id": "q7991",
        "input": "measure duration of python function call",
        "output": "",
        "rule": [
            "d7991"
        ]
    },
    {
        "instruction": "",
        "id": "q7992",
        "input": "python xml element copy",
        "output": "",
        "rule": [
            "d7992"
        ]
    },
    {
        "instruction": "",
        "id": "q7993",
        "input": "method chaining return self python",
        "output": "",
        "rule": [
            "d7993"
        ]
    },
    {
        "instruction": "",
        "id": "q7994",
        "input": "python xml get value of tag",
        "output": "",
        "rule": [
            "d7994"
        ]
    },
    {
        "instruction": "",
        "id": "q7995",
        "input": "micropython how to flush input buffer",
        "output": "",
        "rule": [
            "d7995"
        ]
    },
    {
        "instruction": "",
        "id": "q7996",
        "input": "python xmlstring to dict",
        "output": "",
        "rule": [
            "d7996"
        ]
    },
    {
        "instruction": "",
        "id": "q7997",
        "input": "mirror a plot python",
        "output": "",
        "rule": [
            "d7997"
        ]
    },
    {
        "instruction": "",
        "id": "q7998",
        "input": "python xsltwriter get row height",
        "output": "",
        "rule": [
            "d7998"
        ]
    },
    {
        "instruction": "",
        "id": "q7999",
        "input": "mnist multi gpu training python tensorflow",
        "output": "",
        "rule": [
            "d7999"
        ]
    },
    {
        "instruction": "",
        "id": "q8000",
        "input": "python xy scale of imshow",
        "output": "",
        "rule": [
            "d8000"
        ]
    },
    {
        "instruction": "",
        "id": "q8001",
        "input": "mock api response in python unit test",
        "output": "",
        "rule": [
            "d8001"
        ]
    },
    {
        "instruction": "",
        "id": "q8002",
        "input": "python y axis percentage",
        "output": "",
        "rule": [
            "d8002"
        ]
    },
    {
        "instruction": "",
        "id": "q8003",
        "input": "mongodb list all collections in database python",
        "output": "",
        "rule": [
            "d8003"
        ]
    },
    {
        "instruction": "",
        "id": "q8004",
        "input": "python yaml config file parser",
        "output": "",
        "rule": [
            "d8004"
        ]
    },
    {
        "instruction": "",
        "id": "q8005",
        "input": "multi axis slicing python",
        "output": "",
        "rule": [
            "d8005"
        ]
    },
    {
        "instruction": "",
        "id": "q8006",
        "input": "python yaml dump curly bracket",
        "output": "",
        "rule": [
            "d8006"
        ]
    },
    {
        "instruction": "",
        "id": "q8007",
        "input": "python yaml to object",
        "output": "",
        "rule": [
            "d8007"
        ]
    },
    {
        "instruction": "",
        "id": "q8008",
        "input": "multiple comments in python shortcut",
        "output": "",
        "rule": [
            "d8008"
        ]
    },
    {
        "instruction": "",
        "id": "q8009",
        "input": "python zip everything in the current folder",
        "output": "",
        "rule": [
            "d8009"
        ]
    },
    {
        "instruction": "",
        "id": "q8010",
        "input": "multiple context managers in one line python3",
        "output": "",
        "rule": [
            "d8010"
        ]
    },
    {
        "instruction": "",
        "id": "q8011",
        "input": "python zipfile extractall overwrite",
        "output": "",
        "rule": [
            "d8011"
        ]
    },
    {
        "instruction": "",
        "id": "q8012",
        "input": "mutating dictionaries using recursion python",
        "output": "",
        "rule": [
            "d8012"
        ]
    },
    {
        "instruction": "",
        "id": "q8013",
        "input": "python zlib compress content to file",
        "output": "",
        "rule": [
            "d8013"
        ]
    },
    {
        "instruction": "",
        "id": "q8014",
        "input": "my cursor in python has become white",
        "output": "",
        "rule": [
            "d8014"
        ]
    },
    {
        "instruction": "",
        "id": "q8015",
        "input": "python zlib stream decompress",
        "output": "",
        "rule": [
            "d8015"
        ]
    },
    {
        "instruction": "",
        "id": "q8016",
        "input": "mysqldb python bulk remote",
        "output": "",
        "rule": [
            "d8016"
        ]
    },
    {
        "instruction": "",
        "id": "q8017",
        "input": "python, calc average date in datetime column",
        "output": "",
        "rule": [
            "d8017"
        ]
    },
    {
        "instruction": "",
        "id": "q8018",
        "input": "nest string list to list python",
        "output": "",
        "rule": [
            "d8018"
        ]
    },
    {
        "instruction": "",
        "id": "q8019",
        "input": "python, don't allow a variable to be changed",
        "output": "",
        "rule": [
            "d8019"
        ]
    },
    {
        "instruction": "",
        "id": "q8020",
        "input": "networkx digraph python print",
        "output": "",
        "rule": [
            "d8020"
        ]
    },
    {
        "instruction": "",
        "id": "q8021",
        "input": "python, how to iterate through a folder of files",
        "output": "",
        "rule": [
            "d8021"
        ]
    },
    {
        "instruction": "",
        "id": "q8022",
        "input": "new line column header python",
        "output": "",
        "rule": [
            "d8022"
        ]
    },
    {
        "instruction": "",
        "id": "q8023",
        "input": "python2 parse query string",
        "output": "",
        "rule": [
            "d8023"
        ]
    },
    {
        "instruction": "",
        "id": "q8024",
        "input": "no address associated with hostname smtp python",
        "output": "",
        "rule": [
            "d8024"
        ]
    },
    {
        "instruction": "",
        "id": "q8025",
        "input": "python2 psutil get process memory",
        "output": "",
        "rule": [
            "d8025"
        ]
    },
    {
        "instruction": "",
        "id": "q8026",
        "input": "no of levels of categorical variable in python",
        "output": "",
        "rule": [
            "d8026"
        ]
    },
    {
        "instruction": "",
        "id": "q8027",
        "input": "python3 cast to string",
        "output": "",
        "rule": [
            "d8027"
        ]
    },
    {
        "instruction": "",
        "id": "q8028",
        "input": "non duplicate list in list python",
        "output": "",
        "rule": [
            "d8028"
        ]
    },
    {
        "instruction": "",
        "id": "q8029",
        "input": "python3 check whether is string",
        "output": "",
        "rule": [
            "d8029"
        ]
    },
    {
        "instruction": "",
        "id": "q8030",
        "input": "normalize 1 d array in python",
        "output": "",
        "rule": [
            "d8030"
        ]
    },
    {
        "instruction": "",
        "id": "q8031",
        "input": "python3 checking if line is a comment",
        "output": "",
        "rule": [
            "d8031"
        ]
    },
    {
        "instruction": "",
        "id": "q8032",
        "input": "normalize 2d array python",
        "output": "",
        "rule": [
            "d8032"
        ]
    },
    {
        "instruction": "",
        "id": "q8033",
        "input": "python3 date to string",
        "output": "",
        "rule": [
            "d8033"
        ]
    },
    {
        "instruction": "",
        "id": "q8034",
        "input": "normalize data in python into 0 to 1 range",
        "output": "",
        "rule": [
            "d8034"
        ]
    },
    {
        "instruction": "",
        "id": "q8035",
        "input": "python3 datetime second to minute",
        "output": "",
        "rule": [
            "d8035"
        ]
    },
    {
        "instruction": "",
        "id": "q8036",
        "input": "normalize image color python",
        "output": "",
        "rule": [
            "d8036"
        ]
    },
    {
        "instruction": "",
        "id": "q8037",
        "input": "number of bins in a histogram python",
        "output": "",
        "rule": [
            "d8037"
        ]
    },
    {
        "instruction": "",
        "id": "q8038",
        "input": "python3 get column name of min value in row",
        "output": "",
        "rule": [
            "d8038"
        ]
    },
    {
        "instruction": "",
        "id": "q8039",
        "input": "number of python element a lsit can contain",
        "output": "",
        "rule": [
            "d8039"
        ]
    },
    {
        "instruction": "",
        "id": "q8040",
        "input": "python3 get path relative to parent",
        "output": "",
        "rule": [
            "d8040"
        ]
    },
    {
        "instruction": "",
        "id": "q8041",
        "input": "object has no attribute update dict python",
        "output": "",
        "rule": [
            "d8041"
        ]
    },
    {
        "instruction": "",
        "id": "q8042",
        "input": "python3 how to check dependency",
        "output": "",
        "rule": [
            "d8042"
        ]
    },
    {
        "instruction": "",
        "id": "q8043",
        "input": "obtain mask in python image",
        "output": "",
        "rule": [
            "d8043"
        ]
    },
    {
        "instruction": "",
        "id": "q8044",
        "input": "python3 how to encoce to base64",
        "output": "",
        "rule": [
            "d8044"
        ]
    },
    {
        "instruction": "",
        "id": "q8045",
        "input": "once a file is open, how do you remove it from memory python",
        "output": "",
        "rule": [
            "d8045"
        ]
    },
    {
        "instruction": "",
        "id": "q8046",
        "input": "python3 return a key based on",
        "output": "",
        "rule": [
            "d8046"
        ]
    },
    {
        "instruction": "",
        "id": "q8047",
        "input": "open a close image python",
        "output": "",
        "rule": [
            "d8047"
        ]
    },
    {
        "instruction": "",
        "id": "q8048",
        "input": "python3 set default value for input",
        "output": "",
        "rule": [
            "d8048"
        ]
    },
    {
        "instruction": "",
        "id": "q8049",
        "input": "open a serial port in python",
        "output": "",
        "rule": [
            "d8049"
        ]
    },
    {
        "instruction": "",
        "id": "q8050",
        "input": "python3 test isinstance date",
        "output": "",
        "rule": [
            "d8050"
        ]
    },
    {
        "instruction": "",
        "id": "q8051",
        "input": "opencv3 python bgr to grayscale",
        "output": "",
        "rule": [
            "d8051"
        ]
    },
    {
        "instruction": "",
        "id": "q8052",
        "input": "python3 urllib bypass sslv3 handshake failure",
        "output": "",
        "rule": [
            "d8052"
        ]
    },
    {
        "instruction": "",
        "id": "q8053",
        "input": "optimize path through grid python",
        "output": "",
        "rule": [
            "d8053"
        ]
    },
    {
        "instruction": "",
        "id": "q8054",
        "input": "python3 urllib remove query string",
        "output": "",
        "rule": [
            "d8054"
        ]
    },
    {
        "instruction": "",
        "id": "q8055",
        "input": "os python time updated or accessed",
        "output": "",
        "rule": [
            "d8055"
        ]
    },
    {
        "instruction": "",
        "id": "q8056",
        "input": "quickest way to read pickle python",
        "output": "",
        "rule": [
            "d8056"
        ]
    },
    {
        "instruction": "",
        "id": "q8057",
        "input": "ow to check if object has no attribvute python",
        "output": "",
        "rule": [
            "d8057"
        ]
    },
    {
        "instruction": "",
        "id": "q8058",
        "input": "qwidget won't show if parent set in constructor in python",
        "output": "",
        "rule": [
            "d8058"
        ]
    },
    {
        "instruction": "",
        "id": "q8059",
        "input": "ow to save keras model python",
        "output": "",
        "rule": [
            "d8059"
        ]
    },
    {
        "instruction": "",
        "id": "q8060",
        "input": "rabbitmq python pika confirm",
        "output": "",
        "rule": [
            "d8060"
        ]
    },
    {
        "instruction": "",
        "id": "q8061",
        "input": "pad an image python",
        "output": "",
        "rule": [
            "d8061"
        ]
    },
    {
        "instruction": "",
        "id": "q8062",
        "input": "raise errpr in a function python",
        "output": "",
        "rule": [
            "d8062"
        ]
    },
    {
        "instruction": "",
        "id": "q8063",
        "input": "paragraph spacing code python",
        "output": "",
        "rule": [
            "d8063"
        ]
    },
    {
        "instruction": "",
        "id": "q8064",
        "input": "random float between 1 and 15 python",
        "output": "",
        "rule": [
            "d8064"
        ]
    },
    {
        "instruction": "",
        "id": "q8065",
        "input": "parsefromstring from protobuf on python",
        "output": "",
        "rule": [
            "d8065"
        ]
    },
    {
        "instruction": "",
        "id": "q8066",
        "input": "random number normal distribution in python",
        "output": "",
        "rule": [
            "d8066"
        ]
    },
    {
        "instruction": "",
        "id": "q8067",
        "input": "partial method python name",
        "output": "",
        "rule": [
            "d8067"
        ]
    },
    {
        "instruction": "",
        "id": "q8068",
        "input": "random points on python for positions",
        "output": "",
        "rule": [
            "d8068"
        ]
    },
    {
        "instruction": "",
        "id": "q8069",
        "input": "pass in integers with python *args",
        "output": "",
        "rule": [
            "d8069"
        ]
    },
    {
        "instruction": "",
        "id": "q8070",
        "input": "random variable min max python",
        "output": "",
        "rule": [
            "d8070"
        ]
    },
    {
        "instruction": "",
        "id": "q8071",
        "input": "pass list of strings in python to java",
        "output": "",
        "rule": [
            "d8071"
        ]
    },
    {
        "instruction": "",
        "id": "q8072",
        "input": "re python to remove non ascii from df",
        "output": "",
        "rule": [
            "d8072"
        ]
    },
    {
        "instruction": "",
        "id": "q8073",
        "input": "read a file and tokenize in python",
        "output": "",
        "rule": [
            "d8073"
        ]
    },
    {
        "instruction": "",
        "id": "q8074",
        "input": "passing float in json python",
        "output": "",
        "rule": [
            "d8074"
        ]
    },
    {
        "instruction": "",
        "id": "q8075",
        "input": "read byte file specific endianess python",
        "output": "",
        "rule": [
            "d8075"
        ]
    },
    {
        "instruction": "",
        "id": "q8076",
        "input": "passing multiple iterators to map in python",
        "output": "",
        "rule": [
            "d8076"
        ]
    },
    {
        "instruction": "",
        "id": "q8077",
        "input": "read json file with multiple objects python",
        "output": "",
        "rule": [
            "d8077"
        ]
    },
    {
        "instruction": "",
        "id": "q8078",
        "input": "password genorator python greater than characters",
        "output": "",
        "rule": [
            "d8078"
        ]
    },
    {
        "instruction": "",
        "id": "q8079",
        "input": "read text file in python, utf8",
        "output": "",
        "rule": [
            "d8079"
        ]
    },
    {
        "instruction": "",
        "id": "q8080",
        "input": "penalized logistic regression python",
        "output": "",
        "rule": [
            "d8080"
        ]
    },
    {
        "instruction": "",
        "id": "q8081",
        "input": "reading binary data with python numpy",
        "output": "",
        "rule": [
            "d8081"
        ]
    },
    {
        "instruction": "",
        "id": "q8082",
        "input": "pick a random elemnt within array python",
        "output": "",
        "rule": [
            "d8082"
        ]
    },
    {
        "instruction": "",
        "id": "q8083",
        "input": "reading data from url in python",
        "output": "",
        "rule": [
            "d8083"
        ]
    },
    {
        "instruction": "",
        "id": "q8084",
        "input": "pick random element of set python",
        "output": "",
        "rule": [
            "d8084"
        ]
    },
    {
        "instruction": "",
        "id": "q8085",
        "input": "real part of fft python",
        "output": "",
        "rule": [
            "d8085"
        ]
    },
    {
        "instruction": "",
        "id": "q8086",
        "input": "play and pause audio in python",
        "output": "",
        "rule": [
            "d8086"
        ]
    },
    {
        "instruction": "",
        "id": "q8087",
        "input": "real time python yield",
        "output": "",
        "rule": [
            "d8087"
        ]
    },
    {
        "instruction": "",
        "id": "q8088",
        "input": "play audio with animation python",
        "output": "",
        "rule": [
            "d8088"
        ]
    },
    {
        "instruction": "",
        "id": "q8089",
        "input": "rect positions topright topleft center python",
        "output": "",
        "rule": [
            "d8089"
        ]
    },
    {
        "instruction": "",
        "id": "q8090",
        "input": "plot histogram python custom bins",
        "output": "",
        "rule": [
            "d8090"
        ]
    },
    {
        "instruction": "",
        "id": "q8091",
        "input": "recursive dfs goal python",
        "output": "",
        "rule": [
            "d8091"
        ]
    },
    {
        "instruction": "",
        "id": "q8092",
        "input": "plot lognormal function in python",
        "output": "",
        "rule": [
            "d8092"
        ]
    },
    {
        "instruction": "",
        "id": "q8093",
        "input": "regex password validation python",
        "output": "",
        "rule": [
            "d8093"
        ]
    },
    {
        "instruction": "",
        "id": "q8094",
        "input": "plot standard deviation of a column in python",
        "output": "",
        "rule": [
            "d8094"
        ]
    },
    {
        "instruction": "",
        "id": "q8095",
        "input": "remove a file in a particular folder in python",
        "output": "",
        "rule": [
            "d8095"
        ]
    },
    {
        "instruction": "",
        "id": "q8096",
        "input": "plotting a lognormal distribution in python",
        "output": "",
        "rule": [
            "d8096"
        ]
    },
    {
        "instruction": "",
        "id": "q8097",
        "input": "remove all spaces within string python",
        "output": "",
        "rule": [
            "d8097"
        ]
    },
    {
        "instruction": "",
        "id": "q8098",
        "input": "remove all underscores from string python",
        "output": "",
        "rule": [
            "d8098"
        ]
    },
    {
        "instruction": "",
        "id": "q8099",
        "input": "polar to cartesian image python",
        "output": "",
        "rule": [
            "d8099"
        ]
    },
    {
        "instruction": "",
        "id": "q8100",
        "input": "remove b' from base64 python3",
        "output": "",
        "rule": [
            "d8100"
        ]
    },
    {
        "instruction": "",
        "id": "q8101",
        "input": "pop a key value pair dict python",
        "output": "",
        "rule": [
            "d8101"
        ]
    },
    {
        "instruction": "",
        "id": "q8102",
        "input": "remove characters from data frame column python",
        "output": "",
        "rule": [
            "d8102"
        ]
    },
    {
        "instruction": "",
        "id": "q8103",
        "input": "pretty print columns python",
        "output": "",
        "rule": [
            "d8103"
        ]
    },
    {
        "instruction": "",
        "id": "q8104",
        "input": "remove commas from list in python",
        "output": "",
        "rule": [
            "d8104"
        ]
    },
    {
        "instruction": "",
        "id": "q8105",
        "input": "prevent sorted function in python to not remove duplicates",
        "output": "",
        "rule": [
            "d8105"
        ]
    },
    {
        "instruction": "",
        "id": "q8106",
        "input": "remove comments in json file using python",
        "output": "",
        "rule": [
            "d8106"
        ]
    },
    {
        "instruction": "",
        "id": "q8107",
        "input": "print all first lines from file python",
        "output": "",
        "rule": [
            "d8107"
        ]
    },
    {
        "instruction": "",
        "id": "q8108",
        "input": "remove duplicate elements from a list python",
        "output": "",
        "rule": [
            "d8108"
        ]
    },
    {
        "instruction": "",
        "id": "q8109",
        "input": "print dictionary python without quotes",
        "output": "",
        "rule": [
            "d8109"
        ]
    },
    {
        "instruction": "",
        "id": "q8110",
        "input": "remove duplicated records in python",
        "output": "",
        "rule": [
            "d8110"
        ]
    },
    {
        "instruction": "",
        "id": "q8111",
        "input": "print protobuf contents python",
        "output": "",
        "rule": [
            "d8111"
        ]
    },
    {
        "instruction": "",
        "id": "q8112",
        "input": "remove file in the path in python",
        "output": "",
        "rule": [
            "d8112"
        ]
    },
    {
        "instruction": "",
        "id": "q8113",
        "input": "print text in color python",
        "output": "",
        "rule": [
            "d8113"
        ]
    },
    {
        "instruction": "",
        "id": "q8114",
        "input": "remove if 0 from series python",
        "output": "",
        "rule": [
            "d8114"
        ]
    },
    {
        "instruction": "",
        "id": "q8115",
        "input": "print without starting new line python",
        "output": "",
        "rule": [
            "d8115"
        ]
    },
    {
        "instruction": "",
        "id": "q8116",
        "input": "remove in between spaces in string python",
        "output": "",
        "rule": [
            "d8116"
        ]
    },
    {
        "instruction": "",
        "id": "q8117",
        "input": "printing attributes of object in python",
        "output": "",
        "rule": [
            "d8117"
        ]
    },
    {
        "instruction": "",
        "id": "q8118",
        "input": "printing text in the center python",
        "output": "",
        "rule": [
            "d8118"
        ]
    },
    {
        "instruction": "",
        "id": "q8119",
        "input": "remove line separators from text python",
        "output": "",
        "rule": [
            "d8119"
        ]
    },
    {
        "instruction": "",
        "id": "q8120",
        "input": "probabilities under function in python",
        "output": "",
        "rule": [
            "d8120"
        ]
    },
    {
        "instruction": "",
        "id": "q8121",
        "input": "remove lines from doc using python",
        "output": "",
        "rule": [
            "d8121"
        ]
    },
    {
        "instruction": "",
        "id": "q8122",
        "input": "programmatically accessing docstrings in python",
        "output": "",
        "rule": [
            "d8122"
        ]
    },
    {
        "instruction": "",
        "id": "q8123",
        "input": "remove multiples from set python",
        "output": "",
        "rule": [
            "d8123"
        ]
    },
    {
        "instruction": "",
        "id": "q8124",
        "input": "programming the sigmoid activation function python",
        "output": "",
        "rule": [
            "d8124"
        ]
    },
    {
        "instruction": "",
        "id": "q8125",
        "input": "remove non alphabets python string isalpha",
        "output": "",
        "rule": [
            "d8125"
        ]
    },
    {
        "instruction": "",
        "id": "q8126",
        "input": "remove paritcular character for sentence in python",
        "output": "",
        "rule": [
            "d8126"
        ]
    },
    {
        "instruction": "",
        "id": "q8127",
        "input": "remove pixel in python opencv",
        "output": "",
        "rule": [
            "d8127"
        ]
    },
    {
        "instruction": "",
        "id": "q8128",
        "input": "pyhon read from mongo to python object",
        "output": "",
        "rule": [
            "d8128"
        ]
    },
    {
        "instruction": "",
        "id": "q8129",
        "input": "remove spaces in text python",
        "output": "",
        "rule": [
            "d8129"
        ]
    },
    {
        "instruction": "",
        "id": "q8130",
        "input": "python '\\x' plus a int",
        "output": "",
        "rule": [
            "d8130"
        ]
    },
    {
        "instruction": "",
        "id": "q8131",
        "input": "remove strings that have a word from stopwords in them nltk python",
        "output": "",
        "rule": [
            "d8131"
        ]
    },
    {
        "instruction": "",
        "id": "q8132",
        "input": "python 'nonetype' object is not iterable",
        "output": "",
        "rule": [
            "d8132"
        ]
    },
    {
        "instruction": "",
        "id": "q8133",
        "input": "removing all the elements of a list python",
        "output": "",
        "rule": [
            "d8133"
        ]
    },
    {
        "instruction": "",
        "id": "q8134",
        "input": "python + how to count the number of lines in a file",
        "output": "",
        "rule": [
            "d8134"
        ]
    },
    {
        "instruction": "",
        "id": "q8135",
        "input": "removing noise from audio python",
        "output": "",
        "rule": [
            "d8135"
        ]
    },
    {
        "instruction": "",
        "id": "q8136",
        "input": "python 2 logging rotatingfilehandler",
        "output": "",
        "rule": [
            "d8136"
        ]
    },
    {
        "instruction": "",
        "id": "q8137",
        "input": "replace a list of strings from a text python",
        "output": "",
        "rule": [
            "d8137"
        ]
    },
    {
        "instruction": "",
        "id": "q8138",
        "input": "python 2 make timezone aware",
        "output": "",
        "rule": [
            "d8138"
        ]
    },
    {
        "instruction": "",
        "id": "q8139",
        "input": "replace a pattern with regex function python",
        "output": "",
        "rule": [
            "d8139"
        ]
    },
    {
        "instruction": "",
        "id": "q8140",
        "input": "python 2d array min axis",
        "output": "",
        "rule": [
            "d8140"
        ]
    },
    {
        "instruction": "",
        "id": "q8141",
        "input": "replace all char value by space in list in python",
        "output": "",
        "rule": [
            "d8141"
        ]
    },
    {
        "instruction": "",
        "id": "q8142",
        "input": "python 3 a list of widgets with scroll bar",
        "output": "",
        "rule": [
            "d8142"
        ]
    },
    {
        "instruction": "",
        "id": "q8143",
        "input": "replace all instaces of substring python",
        "output": "",
        "rule": [
            "d8143"
        ]
    },
    {
        "instruction": "",
        "id": "q8144",
        "input": "python 3 assert two lists are equal",
        "output": "",
        "rule": [
            "d8144"
        ]
    },
    {
        "instruction": "",
        "id": "q8145",
        "input": "replace comments with a space python",
        "output": "",
        "rule": [
            "d8145"
        ]
    },
    {
        "instruction": "",
        "id": "q8146",
        "input": "python 3 create a set with a custom key",
        "output": "",
        "rule": [
            "d8146"
        ]
    },
    {
        "instruction": "",
        "id": "q8147",
        "input": "replace items in dictionary in python",
        "output": "",
        "rule": [
            "d8147"
        ]
    },
    {
        "instruction": "",
        "id": "q8148",
        "input": "python 3 file get extension",
        "output": "",
        "rule": [
            "d8148"
        ]
    },
    {
        "instruction": "",
        "id": "q8149",
        "input": "replace new line in a string with space in python",
        "output": "",
        "rule": [
            "d8149"
        ]
    },
    {
        "instruction": "",
        "id": "q8150",
        "input": "python 3 get mouse clock coords",
        "output": "",
        "rule": [
            "d8150"
        ]
    },
    {
        "instruction": "",
        "id": "q8151",
        "input": "replacing values of a column using functions python",
        "output": "",
        "rule": [
            "d8151"
        ]
    },
    {
        "instruction": "",
        "id": "q8152",
        "input": "python 3 how to remove a list from a list]",
        "output": "",
        "rule": [
            "d8152"
        ]
    },
    {
        "instruction": "",
        "id": "q8153",
        "input": "request flask python form exist",
        "output": "",
        "rule": [
            "d8153"
        ]
    },
    {
        "instruction": "",
        "id": "q8154",
        "input": "python 3 inspect function signature",
        "output": "",
        "rule": [
            "d8154"
        ]
    },
    {
        "instruction": "",
        "id": "q8155",
        "input": "requests status code 409 python avoid",
        "output": "",
        "rule": [
            "d8155"
        ]
    },
    {
        "instruction": "",
        "id": "q8156",
        "input": "python 3 remove leading trailing quote",
        "output": "",
        "rule": [
            "d8156"
        ]
    },
    {
        "instruction": "",
        "id": "q8157",
        "input": "reset logging handler at end of iteration python",
        "output": "",
        "rule": [
            "d8157"
        ]
    },
    {
        "instruction": "",
        "id": "q8158",
        "input": "reshape data long in python",
        "output": "",
        "rule": [
            "d8158"
        ]
    },
    {
        "instruction": "",
        "id": "q8159",
        "input": "python 3 what do { represent",
        "output": "",
        "rule": [
            "d8159"
        ]
    },
    {
        "instruction": "",
        "id": "q8160",
        "input": "python 3x3 matrix divided by 1x3",
        "output": "",
        "rule": [
            "d8160"
        ]
    },
    {
        "instruction": "",
        "id": "q8161",
        "input": "response status code url doesn exists python",
        "output": "",
        "rule": [
            "d8161"
        ]
    },
    {
        "instruction": "",
        "id": "q8162",
        "input": "python access s3 data sagemaker",
        "output": "",
        "rule": [
            "d8162"
        ]
    },
    {
        "instruction": "",
        "id": "q8163",
        "input": "response time capture in log for python",
        "output": "",
        "rule": [
            "d8163"
        ]
    },
    {
        "instruction": "",
        "id": "q8164",
        "input": "python add attributes to objects",
        "output": "",
        "rule": [
            "d8164"
        ]
    },
    {
        "instruction": "",
        "id": "q8165",
        "input": "return a tuple of items from a function python",
        "output": "",
        "rule": [
            "d8165"
        ]
    },
    {
        "instruction": "",
        "id": "q8166",
        "input": "python add counts to confusion matrix",
        "output": "",
        "rule": [
            "d8166"
        ]
    },
    {
        "instruction": "",
        "id": "q8167",
        "input": "return array as iterable python",
        "output": "",
        "rule": [
            "d8167"
        ]
    },
    {
        "instruction": "",
        "id": "q8168",
        "input": "python add execute permission to file",
        "output": "",
        "rule": [
            "d8168"
        ]
    },
    {
        "instruction": "",
        "id": "q8169",
        "input": "return the original value of a max result python",
        "output": "",
        "rule": [
            "d8169"
        ]
    },
    {
        "instruction": "",
        "id": "q8170",
        "input": "python add random noise",
        "output": "",
        "rule": [
            "d8170"
        ]
    },
    {
        "instruction": "",
        "id": "q8171",
        "input": "return unique substrings given a number python",
        "output": "",
        "rule": [
            "d8171"
        ]
    },
    {
        "instruction": "",
        "id": "q8172",
        "input": "python add to existing code",
        "output": "",
        "rule": [
            "d8172"
        ]
    },
    {
        "instruction": "",
        "id": "q8173",
        "input": "returning multiple local variables from a function python",
        "output": "",
        "rule": [
            "d8173"
        ]
    },
    {
        "instruction": "",
        "id": "q8174",
        "input": "reverse lines of a text file python",
        "output": "",
        "rule": [
            "d8174"
        ]
    },
    {
        "instruction": "",
        "id": "q8175",
        "input": "python advance file handler to next line manually",
        "output": "",
        "rule": [
            "d8175"
        ]
    },
    {
        "instruction": "",
        "id": "q8176",
        "input": "rgb to hsv python",
        "output": "",
        "rule": [
            "d8176"
        ]
    },
    {
        "instruction": "",
        "id": "q8177",
        "input": "python advance to next line",
        "output": "",
        "rule": [
            "d8177"
        ]
    },
    {
        "instruction": "",
        "id": "q8178",
        "input": "rotate an image in opencv python",
        "output": "",
        "rule": [
            "d8178"
        ]
    },
    {
        "instruction": "",
        "id": "q8179",
        "input": "python algorithm for greatest common divisor",
        "output": "",
        "rule": [
            "d8179"
        ]
    },
    {
        "instruction": "",
        "id": "q8180",
        "input": "rotate image python ndimage",
        "output": "",
        "rule": [
            "d8180"
        ]
    },
    {
        "instruction": "",
        "id": "q8181",
        "input": "python all sequences of length",
        "output": "",
        "rule": [
            "d8181"
        ]
    },
    {
        "instruction": "",
        "id": "q8182",
        "input": "round datetime to nearest minute python",
        "output": "",
        "rule": [
            "d8182"
        ]
    },
    {
        "instruction": "",
        "id": "q8183",
        "input": "python all values out of a tuple",
        "output": "",
        "rule": [
            "d8183"
        ]
    },
    {
        "instruction": "",
        "id": "q8184",
        "input": "round times to quarter hour, python",
        "output": "",
        "rule": [
            "d8184"
        ]
    },
    {
        "instruction": "",
        "id": "q8185",
        "input": "python alterternative to pyaudio for microphone",
        "output": "",
        "rule": [
            "d8185"
        ]
    },
    {
        "instruction": "",
        "id": "q8186",
        "input": "round to 1 sig digit python",
        "output": "",
        "rule": [
            "d8186"
        ]
    },
    {
        "instruction": "",
        "id": "q8187",
        "input": "python and how to code float strings",
        "output": "",
        "rule": [
            "d8187"
        ]
    },
    {
        "instruction": "",
        "id": "q8188",
        "input": "round to significant figures python",
        "output": "",
        "rule": [
            "d8188"
        ]
    },
    {
        "instruction": "",
        "id": "q8189",
        "input": "python and return closest indices of value for interpolation",
        "output": "",
        "rule": [
            "d8189"
        ]
    },
    {
        "instruction": "",
        "id": "q8190",
        "input": "round to to decimals python",
        "output": "",
        "rule": [
            "d8190"
        ]
    },
    {
        "instruction": "",
        "id": "q8191",
        "input": "python angle from three points",
        "output": "",
        "rule": [
            "d8191"
        ]
    },
    {
        "instruction": "",
        "id": "q8192",
        "input": "run a function at set interval python",
        "output": "",
        "rule": [
            "d8192"
        ]
    },
    {
        "instruction": "",
        "id": "q8193",
        "input": "python append flatten list",
        "output": "",
        "rule": [
            "d8193"
        ]
    },
    {
        "instruction": "",
        "id": "q8194",
        "input": "run compiled python code",
        "output": "",
        "rule": [
            "d8194"
        ]
    },
    {
        "instruction": "",
        "id": "q8195",
        "input": "python apply dict to fuction",
        "output": "",
        "rule": [
            "d8195"
        ]
    },
    {
        "instruction": "",
        "id": "q8196",
        "input": "run mutliple sql queries in python",
        "output": "",
        "rule": [
            "d8196"
        ]
    },
    {
        "instruction": "",
        "id": "q8197",
        "input": "python apply function change self",
        "output": "",
        "rule": [
            "d8197"
        ]
    },
    {
        "instruction": "",
        "id": "q8198",
        "input": "run python with web intergace",
        "output": "",
        "rule": [
            "d8198"
        ]
    },
    {
        "instruction": "",
        "id": "q8199",
        "input": "save jpg python bigger size",
        "output": "",
        "rule": [
            "d8199"
        ]
    },
    {
        "instruction": "",
        "id": "q8200",
        "input": "python apply multiple functions to same input",
        "output": "",
        "rule": [
            "d8200"
        ]
    },
    {
        "instruction": "",
        "id": "q8201",
        "input": "save product of funtion python",
        "output": "",
        "rule": [
            "d8201"
        ]
    },
    {
        "instruction": "",
        "id": "q8202",
        "input": "python arg parse checking if arguement is",
        "output": "",
        "rule": [
            "d8202"
        ]
    },
    {
        "instruction": "",
        "id": "q8203",
        "input": "save python object as yaml",
        "output": "",
        "rule": [
            "d8203"
        ]
    },
    {
        "instruction": "",
        "id": "q8204",
        "input": "python argparse config file",
        "output": "",
        "rule": [
            "d8204"
        ]
    },
    {
        "instruction": "",
        "id": "q8205",
        "input": "save python session to server",
        "output": "",
        "rule": [
            "d8205"
        ]
    },
    {
        "instruction": "",
        "id": "q8206",
        "input": "python argparse default parser for subparser",
        "output": "",
        "rule": [
            "d8206"
        ]
    },
    {
        "instruction": "",
        "id": "q8207",
        "input": "saved a python script and is now empty",
        "output": "",
        "rule": [
            "d8207"
        ]
    },
    {
        "instruction": "",
        "id": "q8208",
        "input": "python argparse group order",
        "output": "",
        "rule": [
            "d8208"
        ]
    },
    {
        "instruction": "",
        "id": "q8209",
        "input": "scalar 1d array python",
        "output": "",
        "rule": [
            "d8209"
        ]
    },
    {
        "instruction": "",
        "id": "q8210",
        "input": "python argparse loading a json file",
        "output": "",
        "rule": [
            "d8210"
        ]
    },
    {
        "instruction": "",
        "id": "q8211",
        "input": "select only not null values python",
        "output": "",
        "rule": [
            "d8211"
        ]
    },
    {
        "instruction": "",
        "id": "q8212",
        "input": "python argparse not taking arguements",
        "output": "",
        "rule": [
            "d8212"
        ]
    },
    {
        "instruction": "",
        "id": "q8213",
        "input": "python argparse subparser callback",
        "output": "",
        "rule": [
            "d8213"
        ]
    },
    {
        "instruction": "",
        "id": "q8214",
        "input": "select specifi coluns in a df in python",
        "output": "",
        "rule": [
            "d8214"
        ]
    },
    {
        "instruction": "",
        "id": "q8215",
        "input": "python argparse validation regex",
        "output": "",
        "rule": [
            "d8215"
        ]
    },
    {
        "instruction": "",
        "id": "q8216",
        "input": "select the index of a python list except for the first item",
        "output": "",
        "rule": [
            "d8216"
        ]
    },
    {
        "instruction": "",
        "id": "q8217",
        "input": "python argparse verify directory exists",
        "output": "",
        "rule": [
            "d8217"
        ]
    },
    {
        "instruction": "",
        "id": "q8218",
        "input": "send http request with authorization python",
        "output": "",
        "rule": [
            "d8218"
        ]
    },
    {
        "instruction": "",
        "id": "q8219",
        "input": "python array all indices except",
        "output": "",
        "rule": [
            "d8219"
        ]
    },
    {
        "instruction": "",
        "id": "q8220",
        "input": "send mouse movement directx python",
        "output": "",
        "rule": [
            "d8220"
        ]
    },
    {
        "instruction": "",
        "id": "q8221",
        "input": "python array easy way",
        "output": "",
        "rule": [
            "d8221"
        ]
    },
    {
        "instruction": "",
        "id": "q8222",
        "input": "separate channels from wav file python",
        "output": "",
        "rule": [
            "d8222"
        ]
    },
    {
        "instruction": "",
        "id": "q8223",
        "input": "python array to a diagnoal matrix",
        "output": "",
        "rule": [
            "d8223"
        ]
    },
    {
        "instruction": "",
        "id": "q8224",
        "input": "separate list by spaces python",
        "output": "",
        "rule": [
            "d8224"
        ]
    },
    {
        "instruction": "",
        "id": "q8225",
        "input": "python array to scalar",
        "output": "",
        "rule": [
            "d8225"
        ]
    },
    {
        "instruction": "",
        "id": "q8226",
        "input": "set axis subplot python",
        "output": "",
        "rule": [
            "d8226"
        ]
    },
    {
        "instruction": "",
        "id": "q8227",
        "input": "set cursor position in python",
        "output": "",
        "rule": [
            "d8227"
        ]
    },
    {
        "instruction": "",
        "id": "q8228",
        "input": "python assert emit custom type",
        "output": "",
        "rule": [
            "d8228"
        ]
    },
    {
        "instruction": "",
        "id": "q8229",
        "input": "set default in python dict",
        "output": "",
        "rule": [
            "d8229"
        ]
    },
    {
        "instruction": "",
        "id": "q8230",
        "input": "python assert match any",
        "output": "",
        "rule": [
            "d8230"
        ]
    },
    {
        "instruction": "",
        "id": "q8231",
        "input": "set of unique objects python",
        "output": "",
        "rule": [
            "d8231"
        ]
    },
    {
        "instruction": "",
        "id": "q8232",
        "input": "python assert object has attribute",
        "output": "",
        "rule": [
            "d8232"
        ]
    },
    {
        "instruction": "",
        "id": "q8233",
        "input": "set proxy using command prompt for python",
        "output": "",
        "rule": [
            "d8233"
        ]
    },
    {
        "instruction": "",
        "id": "q8234",
        "input": "python assert on items in list",
        "output": "",
        "rule": [
            "d8234"
        ]
    },
    {
        "instruction": "",
        "id": "q8235",
        "input": "set width of qwidget in python",
        "output": "",
        "rule": [
            "d8235"
        ]
    },
    {
        "instruction": "",
        "id": "q8236",
        "input": "python assert that one in a list of string is in another string",
        "output": "",
        "rule": [
            "d8236"
        ]
    },
    {
        "instruction": "",
        "id": "q8237",
        "input": "set width of table output in python",
        "output": "",
        "rule": [
            "d8237"
        ]
    },
    {
        "instruction": "",
        "id": "q8238",
        "input": "python assert type of variable",
        "output": "",
        "rule": [
            "d8238"
        ]
    },
    {
        "instruction": "",
        "id": "q8239",
        "input": "set window coordinates python",
        "output": "",
        "rule": [
            "d8239"
        ]
    },
    {
        "instruction": "",
        "id": "q8240",
        "input": "set ylim on log axis python",
        "output": "",
        "rule": [
            "d8240"
        ]
    },
    {
        "instruction": "",
        "id": "q8241",
        "input": "python async callbacks with as",
        "output": "",
        "rule": [
            "d8241"
        ]
    },
    {
        "instruction": "",
        "id": "q8242",
        "input": "setting axis limits on python",
        "output": "",
        "rule": [
            "d8242"
        ]
    },
    {
        "instruction": "",
        "id": "q8243",
        "input": "python async function as paremeter",
        "output": "",
        "rule": [
            "d8243"
        ]
    },
    {
        "instruction": "",
        "id": "q8244",
        "input": "setting memory limit in python",
        "output": "",
        "rule": [
            "d8244"
        ]
    },
    {
        "instruction": "",
        "id": "q8245",
        "input": "setting the default python interprter",
        "output": "",
        "rule": [
            "d8245"
        ]
    },
    {
        "instruction": "",
        "id": "q8246",
        "input": "python async map multiple args",
        "output": "",
        "rule": [
            "d8246"
        ]
    },
    {
        "instruction": "",
        "id": "q8247",
        "input": "shape of 2d array python",
        "output": "",
        "rule": [
            "d8247"
        ]
    },
    {
        "instruction": "",
        "id": "q8248",
        "input": "python asyncio task check if is done or cancel",
        "output": "",
        "rule": [
            "d8248"
        ]
    },
    {
        "instruction": "",
        "id": "q8249",
        "input": "shifting file pointer to beginning of the file in python",
        "output": "",
        "rule": [
            "d8249"
        ]
    },
    {
        "instruction": "",
        "id": "q8250",
        "input": "python attributeerror how to fix",
        "output": "",
        "rule": [
            "d8250"
        ]
    },
    {
        "instruction": "",
        "id": "q8251",
        "input": "shortcut for making arrays python",
        "output": "",
        "rule": [
            "d8251"
        ]
    },
    {
        "instruction": "",
        "id": "q8252",
        "input": "python autogen proxy list",
        "output": "",
        "rule": [
            "d8252"
        ]
    },
    {
        "instruction": "",
        "id": "q8253",
        "input": "shortest run of values in array python",
        "output": "",
        "rule": [
            "d8253"
        ]
    },
    {
        "instruction": "",
        "id": "q8254",
        "input": "python average function on 2d array",
        "output": "",
        "rule": [
            "d8254"
        ]
    },
    {
        "instruction": "",
        "id": "q8255",
        "input": "shortest string in an array python",
        "output": "",
        "rule": [
            "d8255"
        ]
    },
    {
        "instruction": "",
        "id": "q8256",
        "input": "python aws rds if an identifier points to an rds instance or an rds cluster",
        "output": "",
        "rule": [
            "d8256"
        ]
    },
    {
        "instruction": "",
        "id": "q8257",
        "input": "should use enum in python",
        "output": "",
        "rule": [
            "d8257"
        ]
    },
    {
        "instruction": "",
        "id": "q8258",
        "input": "python axis labels on subplot",
        "output": "",
        "rule": [
            "d8258"
        ]
    },
    {
        "instruction": "",
        "id": "q8259",
        "input": "show legend in python plot",
        "output": "",
        "rule": [
            "d8259"
        ]
    },
    {
        "instruction": "",
        "id": "q8260",
        "input": "python base64 encode bytes for json",
        "output": "",
        "rule": [
            "d8260"
        ]
    },
    {
        "instruction": "",
        "id": "q8261",
        "input": "signed binary represenation of a int python",
        "output": "",
        "rule": [
            "d8261"
        ]
    },
    {
        "instruction": "",
        "id": "q8262",
        "input": "python blueprint route expression",
        "output": "",
        "rule": [
            "d8262"
        ]
    },
    {
        "instruction": "",
        "id": "q8263",
        "input": "skip formula column in python file read",
        "output": "",
        "rule": [
            "d8263"
        ]
    },
    {
        "instruction": "",
        "id": "q8264",
        "input": "python bootstrapping confidence interval",
        "output": "",
        "rule": [
            "d8264"
        ]
    },
    {
        "instruction": "",
        "id": "q8265",
        "input": "sleep the code some time in python",
        "output": "",
        "rule": [
            "d8265"
        ]
    },
    {
        "instruction": "",
        "id": "q8266",
        "input": "python boto3 how to delete file",
        "output": "",
        "rule": [
            "d8266"
        ]
    },
    {
        "instruction": "",
        "id": "q8267",
        "input": "slice a column from a table in python",
        "output": "",
        "rule": [
            "d8267"
        ]
    },
    {
        "instruction": "",
        "id": "q8268",
        "input": "python bottle auto reload",
        "output": "",
        "rule": [
            "d8268"
        ]
    },
    {
        "instruction": "",
        "id": "q8269",
        "input": "slplit string in words in python then pass to compare",
        "output": "",
        "rule": [
            "d8269"
        ]
    },
    {
        "instruction": "",
        "id": "q8270",
        "input": "python bound method return string",
        "output": "",
        "rule": [
            "d8270"
        ]
    },
    {
        "instruction": "",
        "id": "q8271",
        "input": "sort a array in python",
        "output": "",
        "rule": [
            "d8271"
        ]
    },
    {
        "instruction": "",
        "id": "q8272",
        "input": "sort object python oberride compare",
        "output": "",
        "rule": [
            "d8272"
        ]
    },
    {
        "instruction": "",
        "id": "q8273",
        "input": "python bugzilla bypass ssl cert checking",
        "output": "",
        "rule": [
            "d8273"
        ]
    },
    {
        "instruction": "",
        "id": "q8274",
        "input": "sort with array and give index python",
        "output": "",
        "rule": [
            "d8274"
        ]
    },
    {
        "instruction": "",
        "id": "q8275",
        "input": "python builtin array 2d",
        "output": "",
        "rule": [
            "d8275"
        ]
    },
    {
        "instruction": "",
        "id": "q8276",
        "input": "split a list into smaller lists of n size python",
        "output": "",
        "rule": [
            "d8276"
        ]
    },
    {
        "instruction": "",
        "id": "q8277",
        "input": "python bulk index helpers example",
        "output": "",
        "rule": [
            "d8277"
        ]
    },
    {
        "instruction": "",
        "id": "q8278",
        "input": "split string into list of words python",
        "output": "",
        "rule": [
            "d8278"
        ]
    },
    {
        "instruction": "",
        "id": "q8279",
        "input": "python bytes to human readable size",
        "output": "",
        "rule": [
            "d8279"
        ]
    },
    {
        "instruction": "",
        "id": "q8280",
        "input": "split string into n substrings python",
        "output": "",
        "rule": [
            "d8280"
        ]
    },
    {
        "instruction": "",
        "id": "q8281",
        "input": "python c dll unload",
        "output": "",
        "rule": [
            "d8281"
        ]
    },
    {
        "instruction": "",
        "id": "q8282",
        "input": "split the provided string into specified number of substrings python",
        "output": "",
        "rule": [
            "d8282"
        ]
    },
    {
        "instruction": "",
        "id": "q8283",
        "input": "python cache value in function",
        "output": "",
        "rule": [
            "d8283"
        ]
    },
    {
        "instruction": "",
        "id": "q8284",
        "input": "sqlalchemy row delete python",
        "output": "",
        "rule": [
            "d8284"
        ]
    },
    {
        "instruction": "",
        "id": "q8285",
        "input": "python calc normal of 3d points",
        "output": "",
        "rule": [
            "d8285"
        ]
    },
    {
        "instruction": "",
        "id": "q8286",
        "input": "ssl handshake failed failed python fix",
        "output": "",
        "rule": [
            "d8286"
        ]
    },
    {
        "instruction": "",
        "id": "q8287",
        "input": "python calculate area of triangle given points",
        "output": "",
        "rule": [
            "d8287"
        ]
    },
    {
        "instruction": "",
        "id": "q8288",
        "input": "stack 2d lists python",
        "output": "",
        "rule": [
            "d8288"
        ]
    },
    {
        "instruction": "",
        "id": "q8289",
        "input": "python calculate distance points to line",
        "output": "",
        "rule": [
            "d8289"
        ]
    },
    {
        "instruction": "",
        "id": "q8290",
        "input": "stack overflow python requests exceeded 30 redirects",
        "output": "",
        "rule": [
            "d8290"
        ]
    },
    {
        "instruction": "",
        "id": "q8291",
        "input": "python calculate fft frequency amplitude phase",
        "output": "",
        "rule": [
            "d8291"
        ]
    },
    {
        "instruction": "",
        "id": "q8292",
        "input": "stackoverflow how to get previous end of month date in python",
        "output": "",
        "rule": [
            "d8292"
        ]
    },
    {
        "instruction": "",
        "id": "q8293",
        "input": "python calculate hue from rgb",
        "output": "",
        "rule": [
            "d8293"
        ]
    },
    {
        "instruction": "",
        "id": "q8294",
        "input": "standard deviation of numeric columns python",
        "output": "",
        "rule": [
            "d8294"
        ]
    },
    {
        "instruction": "",
        "id": "q8295",
        "input": "python calculate time complexity",
        "output": "",
        "rule": [
            "d8295"
        ]
    },
    {
        "instruction": "",
        "id": "q8296",
        "input": "staticmethod object is not callable python",
        "output": "",
        "rule": [
            "d8296"
        ]
    },
    {
        "instruction": "",
        "id": "q8297",
        "input": "python call coroutine manually",
        "output": "",
        "rule": [
            "d8297"
        ]
    },
    {
        "instruction": "",
        "id": "q8298",
        "input": "stop watch current time python",
        "output": "",
        "rule": [
            "d8298"
        ]
    },
    {
        "instruction": "",
        "id": "q8299",
        "input": "python calling async code from asynchronous function",
        "output": "",
        "rule": [
            "d8299"
        ]
    },
    {
        "instruction": "",
        "id": "q8300",
        "input": "store credentials in python script",
        "output": "",
        "rule": [
            "d8300"
        ]
    },
    {
        "instruction": "",
        "id": "q8301",
        "input": "python can i exit from function",
        "output": "",
        "rule": [
            "d8301"
        ]
    },
    {
        "instruction": "",
        "id": "q8302",
        "input": "store ndarray in json format python",
        "output": "",
        "rule": [
            "d8302"
        ]
    },
    {
        "instruction": "",
        "id": "q8303",
        "input": "python capitalize every word except of",
        "output": "",
        "rule": [
            "d8303"
        ]
    },
    {
        "instruction": "",
        "id": "q8304",
        "input": "stream python function output to external",
        "output": "",
        "rule": [
            "d8304"
        ]
    },
    {
        "instruction": "",
        "id": "q8305",
        "input": "python capture file name with suffix",
        "output": "",
        "rule": [
            "d8305"
        ]
    },
    {
        "instruction": "",
        "id": "q8306",
        "input": "string append boolean python",
        "output": "",
        "rule": [
            "d8306"
        ]
    },
    {
        "instruction": "",
        "id": "q8307",
        "input": "python cartesian meshgrid to polar coordinate",
        "output": "",
        "rule": [
            "d8307"
        ]
    },
    {
        "instruction": "",
        "id": "q8308",
        "input": "string categorical to one hot python",
        "output": "",
        "rule": [
            "d8308"
        ]
    },
    {
        "instruction": "",
        "id": "q8309",
        "input": "python cartesian product of lists",
        "output": "",
        "rule": [
            "d8309"
        ]
    },
    {
        "instruction": "",
        "id": "q8310",
        "input": "string extract title titanic python",
        "output": "",
        "rule": [
            "d8310"
        ]
    },
    {
        "instruction": "",
        "id": "q8311",
        "input": "python cartesian to polar transformation",
        "output": "",
        "rule": [
            "d8311"
        ]
    },
    {
        "instruction": "",
        "id": "q8312",
        "input": "string must be number try in python",
        "output": "",
        "rule": [
            "d8312"
        ]
    },
    {
        "instruction": "",
        "id": "q8313",
        "input": "python cartopy latitude longitude",
        "output": "",
        "rule": [
            "d8313"
        ]
    },
    {
        "instruction": "",
        "id": "q8314",
        "input": "string remove white spaces python",
        "output": "",
        "rule": [
            "d8314"
        ]
    },
    {
        "instruction": "",
        "id": "q8315",
        "input": "python cdll load dll windows",
        "output": "",
        "rule": [
            "d8315"
        ]
    },
    {
        "instruction": "",
        "id": "q8316",
        "input": "string to bytes in python3",
        "output": "",
        "rule": [
            "d8316"
        ]
    },
    {
        "instruction": "",
        "id": "q8317",
        "input": "python chang size of image resampling resolution",
        "output": "",
        "rule": [
            "d8317"
        ]
    },
    {
        "instruction": "",
        "id": "q8318",
        "input": "string to datetime python pd",
        "output": "",
        "rule": [
            "d8318"
        ]
    },
    {
        "instruction": "",
        "id": "q8319",
        "input": "python change date into string",
        "output": "",
        "rule": [
            "d8319"
        ]
    },
    {
        "instruction": "",
        "id": "q8320",
        "input": "strip dangerous tags python beautifulsoup",
        "output": "",
        "rule": [
            "d8320"
        ]
    },
    {
        "instruction": "",
        "id": "q8321",
        "input": "python change format for date string",
        "output": "",
        "rule": [
            "d8321"
        ]
    },
    {
        "instruction": "",
        "id": "q8322",
        "input": "strip whitespace python without line breaks",
        "output": "",
        "rule": [
            "d8322"
        ]
    },
    {
        "instruction": "",
        "id": "q8323",
        "input": "python change from camel case to snake case",
        "output": "",
        "rule": [
            "d8323"
        ]
    },
    {
        "instruction": "",
        "id": "q8324",
        "input": "strptime python timezone aware",
        "output": "",
        "rule": [
            "d8324"
        ]
    },
    {
        "instruction": "",
        "id": "q8325",
        "input": "python change int to iteratable",
        "output": "",
        "rule": [
            "d8325"
        ]
    },
    {
        "instruction": "",
        "id": "q8326",
        "input": "supress python logging prints",
        "output": "",
        "rule": [
            "d8326"
        ]
    },
    {
        "instruction": "",
        "id": "q8327",
        "input": "python change mtime of a file",
        "output": "",
        "rule": [
            "d8327"
        ]
    },
    {
        "instruction": "",
        "id": "q8328",
        "input": "svd matrix completion python",
        "output": "",
        "rule": [
            "d8328"
        ]
    },
    {
        "instruction": "",
        "id": "q8329",
        "input": "python change object from read only to write",
        "output": "",
        "rule": [
            "d8329"
        ]
    },
    {
        "instruction": "",
        "id": "q8330",
        "input": "sys stdout write encode in python 2",
        "output": "",
        "rule": [
            "d8330"
        ]
    },
    {
        "instruction": "",
        "id": "q8331",
        "input": "python change permissions linux",
        "output": "",
        "rule": [
            "d8331"
        ]
    },
    {
        "instruction": "",
        "id": "q8332",
        "input": "table read from h5py python",
        "output": "",
        "rule": [
            "d8332"
        ]
    },
    {
        "instruction": "",
        "id": "q8333",
        "input": "python change timezone of datetime",
        "output": "",
        "rule": [
            "d8333"
        ]
    },
    {
        "instruction": "",
        "id": "q8334",
        "input": "tablewidget cell width python",
        "output": "",
        "rule": [
            "d8334"
        ]
    },
    {
        "instruction": "",
        "id": "q8335",
        "input": "python check a file is image",
        "output": "",
        "rule": [
            "d8335"
        ]
    },
    {
        "instruction": "",
        "id": "q8336",
        "input": "taking boolean values in python",
        "output": "",
        "rule": [
            "d8336"
        ]
    },
    {
        "instruction": "",
        "id": "q8337",
        "input": "python check df index type",
        "output": "",
        "rule": [
            "d8337"
        ]
    },
    {
        "instruction": "",
        "id": "q8338",
        "input": "tell python to go to line",
        "output": "",
        "rule": [
            "d8338"
        ]
    },
    {
        "instruction": "",
        "id": "q8339",
        "input": "python check dict key type",
        "output": "",
        "rule": [
            "d8339"
        ]
    },
    {
        "instruction": "",
        "id": "q8340",
        "input": "tell python to treat decimals as floating decimal points",
        "output": "",
        "rule": [
            "d8340"
        ]
    },
    {
        "instruction": "",
        "id": "q8341",
        "input": "python check element attributes",
        "output": "",
        "rule": [
            "d8341"
        ]
    },
    {
        "instruction": "",
        "id": "q8342",
        "input": "tensorflow for python 2 and python 3",
        "output": "",
        "rule": [
            "d8342"
        ]
    },
    {
        "instruction": "",
        "id": "q8343",
        "input": "python check element type in array",
        "output": "",
        "rule": [
            "d8343"
        ]
    },
    {
        "instruction": "",
        "id": "q8344",
        "input": "tensorflow python gpu slow",
        "output": "",
        "rule": [
            "d8344"
        ]
    },
    {
        "instruction": "",
        "id": "q8345",
        "input": "python check existance of config",
        "output": "",
        "rule": [
            "d8345"
        ]
    },
    {
        "instruction": "",
        "id": "q8346",
        "input": "tensorflow python not found",
        "output": "",
        "rule": [
            "d8346"
        ]
    },
    {
        "instruction": "",
        "id": "q8347",
        "input": "python check file exists with try and write in same file",
        "output": "",
        "rule": [
            "d8347"
        ]
    },
    {
        "instruction": "",
        "id": "q8348",
        "input": "test if something is an instance method python",
        "output": "",
        "rule": [
            "d8348"
        ]
    },
    {
        "instruction": "",
        "id": "q8349",
        "input": "python check for empty float",
        "output": "",
        "rule": [
            "d8349"
        ]
    },
    {
        "instruction": "",
        "id": "q8350",
        "input": "test if two images are the same python",
        "output": "",
        "rule": [
            "d8350"
        ]
    },
    {
        "instruction": "",
        "id": "q8351",
        "input": "python check for presence of argumetn",
        "output": "",
        "rule": [
            "d8351"
        ]
    },
    {
        "instruction": "",
        "id": "q8352",
        "input": "thread hangs on join even though tasks are finished python3",
        "output": "",
        "rule": [
            "d8352"
        ]
    },
    {
        "instruction": "",
        "id": "q8353",
        "input": "python check git status for modified files",
        "output": "",
        "rule": [
            "d8353"
        ]
    },
    {
        "instruction": "",
        "id": "q8354",
        "input": "tkinter python clear canvas",
        "output": "",
        "rule": [
            "d8354"
        ]
    },
    {
        "instruction": "",
        "id": "q8355",
        "input": "python check if a folder exist , if not create it",
        "output": "",
        "rule": [
            "d8355"
        ]
    },
    {
        "instruction": "",
        "id": "q8356",
        "input": "to insert a blank column in a data frame in python",
        "output": "",
        "rule": [
            "d8356"
        ]
    },
    {
        "instruction": "",
        "id": "q8357",
        "input": "python check if a list is null",
        "output": "",
        "rule": [
            "d8357"
        ]
    },
    {
        "instruction": "",
        "id": "q8358",
        "input": "tokenize in python to get sentences",
        "output": "",
        "rule": [
            "d8358"
        ]
    },
    {
        "instruction": "",
        "id": "q8359",
        "input": "python check if a url is valid",
        "output": "",
        "rule": [
            "d8359"
        ]
    },
    {
        "instruction": "",
        "id": "q8360",
        "input": "topic distributions of documents python",
        "output": "",
        "rule": [
            "d8360"
        ]
    },
    {
        "instruction": "",
        "id": "q8361",
        "input": "trailing zero for decimals in python",
        "output": "",
        "rule": [
            "d8361"
        ]
    },
    {
        "instruction": "",
        "id": "q8362",
        "input": "python check if all elements of list are same",
        "output": "",
        "rule": [
            "d8362"
        ]
    },
    {
        "instruction": "",
        "id": "q8363",
        "input": "transform array to string python",
        "output": "",
        "rule": [
            "d8363"
        ]
    },
    {
        "instruction": "",
        "id": "q8364",
        "input": "python check if binary file",
        "output": "",
        "rule": [
            "d8364"
        ]
    },
    {
        "instruction": "",
        "id": "q8365",
        "input": "transform to html text python",
        "output": "",
        "rule": [
            "d8365"
        ]
    },
    {
        "instruction": "",
        "id": "q8366",
        "input": "python check if byte or str",
        "output": "",
        "rule": [
            "d8366"
        ]
    },
    {
        "instruction": "",
        "id": "q8367",
        "input": "transform values of column to log10 in python",
        "output": "",
        "rule": [
            "d8367"
        ]
    },
    {
        "instruction": "",
        "id": "q8368",
        "input": "python check if collection",
        "output": "",
        "rule": [
            "d8368"
        ]
    },
    {
        "instruction": "",
        "id": "q8369",
        "input": "translate python 2 to 3",
        "output": "",
        "rule": [
            "d8369"
        ]
    },
    {
        "instruction": "",
        "id": "q8370",
        "input": "python check if function is string",
        "output": "",
        "rule": [
            "d8370"
        ]
    },
    {
        "instruction": "",
        "id": "q8371",
        "input": "python check if http server is open",
        "output": "",
        "rule": [
            "d8371"
        ]
    },
    {
        "instruction": "",
        "id": "q8372",
        "input": "traverse each branch of tree in python",
        "output": "",
        "rule": [
            "d8372"
        ]
    },
    {
        "instruction": "",
        "id": "q8373",
        "input": "python check if input is int",
        "output": "",
        "rule": [
            "d8373"
        ]
    },
    {
        "instruction": "",
        "id": "q8374",
        "input": "python check if key is in the dictionary",
        "output": "",
        "rule": [
            "d8374"
        ]
    },
    {
        "instruction": "",
        "id": "q8375",
        "input": "ttk python change disabled color of scrollbar",
        "output": "",
        "rule": [
            "d8375"
        ]
    },
    {
        "instruction": "",
        "id": "q8376",
        "input": "python check if object is a numpy array",
        "output": "",
        "rule": [
            "d8376"
        ]
    },
    {
        "instruction": "",
        "id": "q8377",
        "input": "tuple are hashable python",
        "output": "",
        "rule": [
            "d8377"
        ]
    },
    {
        "instruction": "",
        "id": "q8378",
        "input": "python check if root",
        "output": "",
        "rule": [
            "d8378"
        ]
    },
    {
        "instruction": "",
        "id": "q8379",
        "input": "turn a json into list python",
        "output": "",
        "rule": [
            "d8379"
        ]
    },
    {
        "instruction": "",
        "id": "q8380",
        "input": "python check if two numpy arrays are equal",
        "output": "",
        "rule": [
            "d8380"
        ]
    },
    {
        "instruction": "",
        "id": "q8381",
        "input": "turn string elements seperated by commas into list python",
        "output": "",
        "rule": [
            "d8381"
        ]
    },
    {
        "instruction": "",
        "id": "q8382",
        "input": "python check if user session ending",
        "output": "",
        "rule": [
            "d8382"
        ]
    },
    {
        "instruction": "",
        "id": "q8383",
        "input": "turn xml to dict python",
        "output": "",
        "rule": [
            "d8383"
        ]
    },
    {
        "instruction": "",
        "id": "q8384",
        "input": "python check if value defined in namespace",
        "output": "",
        "rule": [
            "d8384"
        ]
    },
    {
        "instruction": "",
        "id": "q8385",
        "input": "turning a list into a dictionary python",
        "output": "",
        "rule": [
            "d8385"
        ]
    },
    {
        "instruction": "",
        "id": "q8386",
        "input": "python check if value is of type timestamp",
        "output": "",
        "rule": [
            "d8386"
        ]
    },
    {
        "instruction": "",
        "id": "q8387",
        "input": "type bytes in python to str",
        "output": "",
        "rule": [
            "d8387"
        ]
    },
    {
        "instruction": "",
        "id": "q8388",
        "input": "type cast string to bool python",
        "output": "",
        "rule": [
            "d8388"
        ]
    },
    {
        "instruction": "",
        "id": "q8389",
        "input": "python check if you are root",
        "output": "",
        "rule": [
            "d8389"
        ]
    },
    {
        "instruction": "",
        "id": "q8390",
        "input": "python check if you can open file",
        "output": "",
        "rule": [
            "d8390"
        ]
    },
    {
        "instruction": "",
        "id": "q8391",
        "input": "type symbol sympy python",
        "output": "",
        "rule": [
            "d8391"
        ]
    },
    {
        "instruction": "",
        "id": "q8392",
        "input": "python check image valid",
        "output": "",
        "rule": [
            "d8392"
        ]
    },
    {
        "instruction": "",
        "id": "q8393",
        "input": "ubuntu max python memory",
        "output": "",
        "rule": [
            "d8393"
        ]
    },
    {
        "instruction": "",
        "id": "q8394",
        "input": "python check individual arg in mock call list",
        "output": "",
        "rule": [
            "d8394"
        ]
    },
    {
        "instruction": "",
        "id": "q8395",
        "input": "underscore case is recommended in python",
        "output": "",
        "rule": [
            "d8395"
        ]
    },
    {
        "instruction": "",
        "id": "q8396",
        "input": "python check is a column doesn't exist",
        "output": "",
        "rule": [
            "d8396"
        ]
    },
    {
        "instruction": "",
        "id": "q8397",
        "input": "unhashable type list for set in python",
        "output": "",
        "rule": [
            "d8397"
        ]
    },
    {
        "instruction": "",
        "id": "q8398",
        "input": "python check is json",
        "output": "",
        "rule": [
            "d8398"
        ]
    },
    {
        "instruction": "",
        "id": "q8399",
        "input": "unorderable types python str to int",
        "output": "",
        "rule": [
            "d8399"
        ]
    },
    {
        "instruction": "",
        "id": "q8400",
        "input": "unsupported locale setting python",
        "output": "",
        "rule": [
            "d8400"
        ]
    },
    {
        "instruction": "",
        "id": "q8401",
        "input": "python check namedtuple type",
        "output": "",
        "rule": [
            "d8401"
        ]
    },
    {
        "instruction": "",
        "id": "q8402",
        "input": "urlretrieve use file name python",
        "output": "",
        "rule": [
            "d8402"
        ]
    },
    {
        "instruction": "",
        "id": "q8403",
        "input": "python check number of connections of mysql",
        "output": "",
        "rule": [
            "d8403"
        ]
    },
    {
        "instruction": "",
        "id": "q8404",
        "input": "use python select poll on windows",
        "output": "",
        "rule": [
            "d8404"
        ]
    },
    {
        "instruction": "",
        "id": "q8405",
        "input": "python check object count peewee model object",
        "output": "",
        "rule": [
            "d8405"
        ]
    },
    {
        "instruction": "",
        "id": "q8406",
        "input": "use python to change volume",
        "output": "",
        "rule": [
            "d8406"
        ]
    },
    {
        "instruction": "",
        "id": "q8407",
        "input": "python check size of file in kb",
        "output": "",
        "rule": [
            "d8407"
        ]
    },
    {
        "instruction": "",
        "id": "q8408",
        "input": "use python to list every even number in a function using *args",
        "output": "",
        "rule": [
            "d8408"
        ]
    },
    {
        "instruction": "",
        "id": "q8409",
        "input": "python check stdin is not empty example",
        "output": "",
        "rule": [
            "d8409"
        ]
    },
    {
        "instruction": "",
        "id": "q8410",
        "input": "use python to server a directory over http",
        "output": "",
        "rule": [
            "d8410"
        ]
    },
    {
        "instruction": "",
        "id": "q8411",
        "input": "python check string contains array of string",
        "output": "",
        "rule": [
            "d8411"
        ]
    },
    {
        "instruction": "",
        "id": "q8412",
        "input": "using an integer as a month in python",
        "output": "",
        "rule": [
            "d8412"
        ]
    },
    {
        "instruction": "",
        "id": "q8413",
        "input": "python check string is empty or null",
        "output": "",
        "rule": [
            "d8413"
        ]
    },
    {
        "instruction": "",
        "id": "q8414",
        "input": "python check string is file path",
        "output": "",
        "rule": [
            "d8414"
        ]
    },
    {
        "instruction": "",
        "id": "q8415",
        "input": "using datetime to get the last 7 dates of a week given a date in python",
        "output": "",
        "rule": [
            "d8415"
        ]
    },
    {
        "instruction": "",
        "id": "q8416",
        "input": "python check success of response",
        "output": "",
        "rule": [
            "d8416"
        ]
    },
    {
        "instruction": "",
        "id": "q8417",
        "input": "using def in python to show document string",
        "output": "",
        "rule": [
            "d8417"
        ]
    },
    {
        "instruction": "",
        "id": "q8418",
        "input": "python check to see of a file is exicutible",
        "output": "",
        "rule": [
            "d8418"
        ]
    },
    {
        "instruction": "",
        "id": "q8419",
        "input": "using python 3 to access s3",
        "output": "",
        "rule": [
            "d8419"
        ]
    },
    {
        "instruction": "",
        "id": "q8420",
        "input": "python check type of data frame colimn",
        "output": "",
        "rule": [
            "d8420"
        ]
    },
    {
        "instruction": "",
        "id": "q8421",
        "input": "using python 3 to generate all random passwords",
        "output": "",
        "rule": [
            "d8421"
        ]
    },
    {
        "instruction": "",
        "id": "q8422",
        "input": "python check write permission",
        "output": "",
        "rule": [
            "d8422"
        ]
    },
    {
        "instruction": "",
        "id": "q8423",
        "input": "using python language how to format action outside of string",
        "output": "",
        "rule": [
            "d8423"
        ]
    },
    {
        "instruction": "",
        "id": "q8424",
        "input": "python checking for empty queue",
        "output": "",
        "rule": [
            "d8424"
        ]
    },
    {
        "instruction": "",
        "id": "q8425",
        "input": "using python to display gps coordinates",
        "output": "",
        "rule": [
            "d8425"
        ]
    },
    {
        "instruction": "",
        "id": "q8426",
        "input": "python checking multiple fields",
        "output": "",
        "rule": [
            "d8426"
        ]
    },
    {
        "instruction": "",
        "id": "q8427",
        "input": "using python to format text +color",
        "output": "",
        "rule": [
            "d8427"
        ]
    },
    {
        "instruction": "",
        "id": "q8428",
        "input": "python chinese string to pinyin",
        "output": "",
        "rule": [
            "d8428"
        ]
    },
    {
        "instruction": "",
        "id": "q8429",
        "input": "using python trace programmatically",
        "output": "",
        "rule": [
            "d8429"
        ]
    },
    {
        "instruction": "",
        "id": "q8430",
        "input": "python chk for empty dictionary",
        "output": "",
        "rule": [
            "d8430"
        ]
    },
    {
        "instruction": "",
        "id": "q8431",
        "input": "using split to parse out tuples from a file python",
        "output": "",
        "rule": [
            "d8431"
        ]
    },
    {
        "instruction": "",
        "id": "q8432",
        "input": "python choose key conditionally from a tuple",
        "output": "",
        "rule": [
            "d8432"
        ]
    },
    {
        "instruction": "",
        "id": "q8433",
        "input": "using static variables in a python rest api",
        "output": "",
        "rule": [
            "d8433"
        ]
    },
    {
        "instruction": "",
        "id": "q8434",
        "input": "python click how to redirect a group to a command",
        "output": "",
        "rule": [
            "d8434"
        ]
    },
    {
        "instruction": "",
        "id": "q8435",
        "input": "validate schema with json in python",
        "output": "",
        "rule": [
            "d8435"
        ]
    },
    {
        "instruction": "",
        "id": "q8436",
        "input": "python click how to use keyword as command name",
        "output": "",
        "rule": [
            "d8436"
        ]
    },
    {
        "instruction": "",
        "id": "q8437",
        "input": "vs code python unsupported locale",
        "output": "",
        "rule": [
            "d8437"
        ]
    },
    {
        "instruction": "",
        "id": "q8438",
        "input": "python clipping the end of a string",
        "output": "",
        "rule": [
            "d8438"
        ]
    },
    {
        "instruction": "",
        "id": "q8439",
        "input": "waht date type can be used as keys in a python dict",
        "output": "",
        "rule": [
            "d8439"
        ]
    },
    {
        "instruction": "",
        "id": "q8440",
        "input": "python close all access connections",
        "output": "",
        "rule": [
            "d8440"
        ]
    },
    {
        "instruction": "",
        "id": "q8441",
        "input": "wcompare two lisrs and return common elements in python",
        "output": "",
        "rule": [
            "d8441"
        ]
    },
    {
        "instruction": "",
        "id": "q8442",
        "input": "python close socket connection",
        "output": "",
        "rule": [
            "d8442"
        ]
    },
    {
        "instruction": "",
        "id": "q8443",
        "input": "webdriver python scroll down",
        "output": "",
        "rule": [
            "d8443"
        ]
    },
    {
        "instruction": "",
        "id": "q8444",
        "input": "python close tkinter window focus cmd prompt",
        "output": "",
        "rule": [
            "d8444"
        ]
    },
    {
        "instruction": "",
        "id": "q8445",
        "input": "websocket keep alive python",
        "output": "",
        "rule": [
            "d8445"
        ]
    },
    {
        "instruction": "",
        "id": "q8446",
        "input": "what does putting a hash at he beggining of a line do python",
        "output": "",
        "rule": [
            "d8446"
        ]
    },
    {
        "instruction": "",
        "id": "q8447",
        "input": "python cluster method centroid distance euclidean",
        "output": "",
        "rule": [
            "d8447"
        ]
    },
    {
        "instruction": "",
        "id": "q8448",
        "input": "what function covert a string to a float in python",
        "output": "",
        "rule": [
            "d8448"
        ]
    },
    {
        "instruction": "",
        "id": "q8449",
        "input": "python code for a gaussian distribution",
        "output": "",
        "rule": [
            "d8449"
        ]
    },
    {
        "instruction": "",
        "id": "q8450",
        "input": "wirte a markdown parser by python",
        "output": "",
        "rule": [
            "d8450"
        ]
    },
    {
        "instruction": "",
        "id": "q8451",
        "input": "python code for elastic collision of objects",
        "output": "",
        "rule": [
            "d8451"
        ]
    },
    {
        "instruction": "",
        "id": "q8452",
        "input": "wrap string on multiple lines python",
        "output": "",
        "rule": [
            "d8452"
        ]
    },
    {
        "instruction": "",
        "id": "q8453",
        "input": "python code for opening geojson file",
        "output": "",
        "rule": [
            "d8453"
        ]
    },
    {
        "instruction": "",
        "id": "q8454",
        "input": "write a python program to kill a process, given the program name",
        "output": "",
        "rule": [
            "d8454"
        ]
    },
    {
        "instruction": "",
        "id": "q8455",
        "input": "python code for permission",
        "output": "",
        "rule": [
            "d8455"
        ]
    },
    {
        "instruction": "",
        "id": "q8456",
        "input": "write pdf file python stack overflow",
        "output": "",
        "rule": [
            "d8456"
        ]
    },
    {
        "instruction": "",
        "id": "q8457",
        "input": "write to stdout in python",
        "output": "",
        "rule": [
            "d8457"
        ]
    },
    {
        "instruction": "",
        "id": "q8458",
        "input": "wxpython allow scrolling while disabled",
        "output": "",
        "rule": [
            "d8458"
        ]
    },
    {
        "instruction": "",
        "id": "q8459",
        "input": "python code to change a variable type from string to float",
        "output": "",
        "rule": [
            "d8459"
        ]
    },
    {
        "instruction": "",
        "id": "q8460",
        "input": "wxpython close panel on cancel",
        "output": "",
        "rule": [
            "d8460"
        ]
    },
    {
        "instruction": "",
        "id": "q8461",
        "input": "python code to display environment variables",
        "output": "",
        "rule": [
            "d8461"
        ]
    },
    {
        "instruction": "",
        "id": "q8462",
        "input": "wxpython copy image from one bitmap to another",
        "output": "",
        "rule": [
            "d8462"
        ]
    },
    {
        "instruction": "",
        "id": "q8463",
        "input": "python code to format multiple *args",
        "output": "",
        "rule": [
            "d8463"
        ]
    },
    {
        "instruction": "",
        "id": "q8464",
        "input": "wxpython no attribute 'makemodal'",
        "output": "",
        "rule": [
            "d8464"
        ]
    },
    {
        "instruction": "",
        "id": "q8465",
        "input": "python code to stop an instance",
        "output": "",
        "rule": [
            "d8465"
        ]
    },
    {
        "instruction": "",
        "id": "q8466",
        "input": "wxpython setting background color of static text",
        "output": "",
        "rule": [
            "d8466"
        ]
    },
    {
        "instruction": "",
        "id": "q8467",
        "input": "python code to verify valid email address",
        "output": "",
        "rule": [
            "d8467"
        ]
    },
    {
        "instruction": "",
        "id": "q8468",
        "input": "wxpython textctrl color for some txt",
        "output": "",
        "rule": [
            "d8468"
        ]
    },
    {
        "instruction": "",
        "id": "q8469",
        "input": "python code words and lines",
        "output": "",
        "rule": [
            "d8469"
        ]
    },
    {
        "instruction": "",
        "id": "q8470",
        "input": "xml get parent node of element python",
        "output": "",
        "rule": [
            "d8470"
        ]
    },
    {
        "instruction": "",
        "id": "q8471",
        "input": "python column string mode",
        "output": "",
        "rule": [
            "d8471"
        ]
    },
    {
        "instruction": "",
        "id": "q8472",
        "input": "xor two bytearrays python",
        "output": "",
        "rule": [
            "d8472"
        ]
    },
    {
        "instruction": "",
        "id": "q8473",
        "input": "python compare compare sets not in one set",
        "output": "",
        "rule": [
            "d8473"
        ]
    },
    {
        "instruction": "",
        "id": "q8474",
        "input": "xpath how to get all text inside an element python",
        "output": "",
        "rule": [
            "d8474"
        ]
    },
    {
        "instruction": "",
        "id": "q8475",
        "input": "python compare if files are the same",
        "output": "",
        "rule": [
            "d8475"
        ]
    },
    {
        "instruction": "",
        "id": "q8476",
        "input": "yaml read file python",
        "output": "",
        "rule": [
            "d8476"
        ]
    },
    {
        "instruction": "",
        "id": "q8477",
        "input": "python compare two ndarray equal",
        "output": "",
        "rule": [
            "d8477"
        ]
    },
    {
        "instruction": "",
        "id": "q8478",
        "input": "yml file parser python",
        "output": "",
        "rule": [
            "d8478"
        ]
    },
    {
        "instruction": "",
        "id": "q8479",
        "input": "python compare two strings character by character",
        "output": "",
        "rule": [
            "d8479"
        ]
    },
    {
        "instruction": "",
        "id": "q8480",
        "input": "zero array in python chainging dimension",
        "output": "",
        "rule": [
            "d8480"
        ]
    },
    {
        "instruction": "",
        "id": "q8481",
        "input": "python compare two strings for similiartiy",
        "output": "",
        "rule": [
            "d8481"
        ]
    },
    {
        "instruction": "",
        "id": "q8482",
        "input": "python compare two xml",
        "output": "",
        "rule": [
            "d8482"
        ]
    },
    {
        "instruction": "",
        "id": "q8483",
        "input": "add callbacks \"page\" python",
        "output": "",
        "rule": [
            "d8483"
        ]
    },
    {
        "instruction": "",
        "id": "q8484",
        "input": "python compare multiple strings",
        "output": "",
        "rule": [
            "d8484"
        ]
    },
    {
        "instruction": "",
        "id": "q8485",
        "input": "close web browser connection \"webbrowser\" python",
        "output": "",
        "rule": [
            "d8485"
        ]
    },
    {
        "instruction": "",
        "id": "q8486",
        "input": "python compare uuid and string",
        "output": "",
        "rule": [
            "d8486"
        ]
    },
    {
        "instruction": "",
        "id": "q8487",
        "input": "python argparse \"valid string\"",
        "output": "",
        "rule": [
            "d8487"
        ]
    },
    {
        "instruction": "",
        "id": "q8488",
        "input": "python compare variable with type",
        "output": "",
        "rule": [
            "d8488"
        ]
    },
    {
        "instruction": "",
        "id": "q8489",
        "input": "python open file dialog \"no tkinter\"",
        "output": "",
        "rule": [
            "d8489"
        ]
    },
    {
        "instruction": "",
        "id": "q8490",
        "input": "python comparing two numpy arrays for equality",
        "output": "",
        "rule": [
            "d8490"
        ]
    },
    {
        "instruction": "",
        "id": "q8491",
        "input": "python3 can only concatenate str (not \"bytes\") to str",
        "output": "",
        "rule": [
            "d8491"
        ]
    },
    {
        "instruction": "",
        "id": "q8492",
        "input": "python compute shannon entropy",
        "output": "",
        "rule": [
            "d8492"
        ]
    },
    {
        "instruction": "",
        "id": "q8493",
        "input": "sorting in python list \"date\"",
        "output": "",
        "rule": [
            "d8493"
        ]
    },
    {
        "instruction": "",
        "id": "q8494",
        "input": "python concantenate arrays along dimension",
        "output": "",
        "rule": [
            "d8494"
        ]
    },
    {
        "instruction": "",
        "id": "q8495",
        "input": "'list of list to a dictionary of dictionary' python",
        "output": "",
        "rule": [
            "d8495"
        ]
    },
    {
        "instruction": "",
        "id": "q8496",
        "input": "python conda activate in bash shell script",
        "output": "",
        "rule": [
            "d8496"
        ]
    },
    {
        "instruction": "",
        "id": "q8497",
        "input": "/bin/yum not working in python",
        "output": "",
        "rule": [
            "d8497"
        ]
    },
    {
        "instruction": "",
        "id": "q8498",
        "input": "python config parser combine items into dict",
        "output": "",
        "rule": [
            "d8498"
        ]
    },
    {
        "instruction": "",
        "id": "q8499",
        "input": "403 response from python requests",
        "output": "",
        "rule": [
            "d8499"
        ]
    },
    {
        "instruction": "",
        "id": "q8500",
        "input": "python configparser get list of config sections",
        "output": "",
        "rule": [
            "d8500"
        ]
    },
    {
        "instruction": "",
        "id": "q8501",
        "input": "`java` command is not found from this python process",
        "output": "",
        "rule": [
            "d8501"
        ]
    },
    {
        "instruction": "",
        "id": "q8502",
        "input": "python configuration see if setting exists",
        "output": "",
        "rule": [
            "d8502"
        ]
    },
    {
        "instruction": "",
        "id": "q8503",
        "input": "a list of month end dates in python",
        "output": "",
        "rule": [
            "d8503"
        ]
    },
    {
        "instruction": "",
        "id": "q8504",
        "input": "python connection displaying password prompt from stdin rather than connecting",
        "output": "",
        "rule": [
            "d8504"
        ]
    },
    {
        "instruction": "",
        "id": "q8505",
        "input": "a python program to count the occurrences of each word in a given sentence",
        "output": "",
        "rule": [
            "d8505"
        ]
    },
    {
        "instruction": "",
        "id": "q8506",
        "input": "python convention naming wrapper list apply functions",
        "output": "",
        "rule": [
            "d8506"
        ]
    },
    {
        "instruction": "",
        "id": "q8507",
        "input": "a table column at def function python",
        "output": "",
        "rule": [
            "d8507"
        ]
    },
    {
        "instruction": "",
        "id": "q8508",
        "input": "python conver posixpath to string",
        "output": "",
        "rule": [
            "d8508"
        ]
    },
    {
        "instruction": "",
        "id": "q8509",
        "input": "access dictionary key safely python",
        "output": "",
        "rule": [
            "d8509"
        ]
    },
    {
        "instruction": "",
        "id": "q8510",
        "input": "python converto json to string",
        "output": "",
        "rule": [
            "d8510"
        ]
    },
    {
        "instruction": "",
        "id": "q8511",
        "input": "access token in python without expiration",
        "output": "",
        "rule": [
            "d8511"
        ]
    },
    {
        "instruction": "",
        "id": "q8512",
        "input": "python copy attributes to object",
        "output": "",
        "rule": [
            "d8512"
        ]
    },
    {
        "instruction": "",
        "id": "q8513",
        "input": "access type object name python",
        "output": "",
        "rule": [
            "d8513"
        ]
    },
    {
        "instruction": "",
        "id": "q8514",
        "input": "python correctly specify tensorflow as a dependency",
        "output": "",
        "rule": [
            "d8514"
        ]
    },
    {
        "instruction": "",
        "id": "q8515",
        "input": "accessing a session in python",
        "output": "",
        "rule": [
            "d8515"
        ]
    },
    {
        "instruction": "",
        "id": "q8516",
        "input": "python covert string to list by commas",
        "output": "",
        "rule": [
            "d8516"
        ]
    },
    {
        "instruction": "",
        "id": "q8517",
        "input": "add linux permissions using python",
        "output": "",
        "rule": [
            "d8517"
        ]
    },
    {
        "instruction": "",
        "id": "q8518",
        "input": "python create all the permutations",
        "output": "",
        "rule": [
            "d8518"
        ]
    },
    {
        "instruction": "",
        "id": "q8519",
        "input": "add millsecond to time stamp in python",
        "output": "",
        "rule": [
            "d8519"
        ]
    },
    {
        "instruction": "",
        "id": "q8520",
        "input": "python create an ordered dict",
        "output": "",
        "rule": [
            "d8520"
        ]
    },
    {
        "instruction": "",
        "id": "q8521",
        "input": "add plot to document in python",
        "output": "",
        "rule": [
            "d8521"
        ]
    },
    {
        "instruction": "",
        "id": "q8522",
        "input": "python create an ordereddict from a dict",
        "output": "",
        "rule": [
            "d8522"
        ]
    },
    {
        "instruction": "",
        "id": "q8523",
        "input": "add python code in markdown",
        "output": "",
        "rule": [
            "d8523"
        ]
    },
    {
        "instruction": "",
        "id": "q8524",
        "input": "python create and apply diffs",
        "output": "",
        "rule": [
            "d8524"
        ]
    },
    {
        "instruction": "",
        "id": "q8525",
        "input": "add random noise python numpy",
        "output": "",
        "rule": [
            "d8525"
        ]
    },
    {
        "instruction": "",
        "id": "q8526",
        "input": "python create folder is not exist",
        "output": "",
        "rule": [
            "d8526"
        ]
    },
    {
        "instruction": "",
        "id": "q8527",
        "input": "python clean up objects",
        "output": "",
        "rule": [
            "d8527"
        ]
    },
    {
        "instruction": "",
        "id": "q8528",
        "input": "python create instance from string",
        "output": "",
        "rule": [
            "d8528"
        ]
    },
    {
        "instruction": "",
        "id": "q8529",
        "input": "alembic python model file",
        "output": "",
        "rule": [
            "d8529"
        ]
    },
    {
        "instruction": "",
        "id": "q8530",
        "input": "python create pdf rfrom images",
        "output": "",
        "rule": [
            "d8530"
        ]
    },
    {
        "instruction": "",
        "id": "q8531",
        "input": "all types of variables in python",
        "output": "",
        "rule": [
            "d8531"
        ]
    },
    {
        "instruction": "",
        "id": "q8532",
        "input": "python creating an html table that you can add on to",
        "output": "",
        "rule": [
            "d8532"
        ]
    },
    {
        "instruction": "",
        "id": "q8533",
        "input": "allow in secure connection python requests",
        "output": "",
        "rule": [
            "d8533"
        ]
    },
    {
        "instruction": "",
        "id": "q8534",
        "input": "python crop an image specified pixels",
        "output": "",
        "rule": [
            "d8534"
        ]
    },
    {
        "instruction": "",
        "id": "q8535",
        "input": "anaconda python3 5 tensorflow",
        "output": "",
        "rule": [
            "d8535"
        ]
    },
    {
        "instruction": "",
        "id": "q8536",
        "input": "python csv dictreader as dictionary",
        "output": "",
        "rule": [
            "d8536"
        ]
    },
    {
        "instruction": "",
        "id": "q8537",
        "input": "angle between two vector python",
        "output": "",
        "rule": [
            "d8537"
        ]
    },
    {
        "instruction": "",
        "id": "q8538",
        "input": "python ctypes allocate buffer numpy",
        "output": "",
        "rule": [
            "d8538"
        ]
    },
    {
        "instruction": "",
        "id": "q8539",
        "input": "angle of rotation using matrices in python",
        "output": "",
        "rule": [
            "d8539"
        ]
    },
    {
        "instruction": "",
        "id": "q8540",
        "input": "python ctypes callback function example",
        "output": "",
        "rule": [
            "d8540"
        ]
    },
    {
        "instruction": "",
        "id": "q8541",
        "input": "api response properties in python",
        "output": "",
        "rule": [
            "d8541"
        ]
    },
    {
        "instruction": "",
        "id": "q8542",
        "input": "append javascript to html python",
        "output": "",
        "rule": [
            "d8542"
        ]
    },
    {
        "instruction": "",
        "id": "q8543",
        "input": "python cumulative sum of list elements",
        "output": "",
        "rule": [
            "d8543"
        ]
    },
    {
        "instruction": "",
        "id": "q8544",
        "input": "appium python spinner scroll to",
        "output": "",
        "rule": [
            "d8544"
        ]
    },
    {
        "instruction": "",
        "id": "q8545",
        "input": "python curses allow print",
        "output": "",
        "rule": [
            "d8545"
        ]
    },
    {
        "instruction": "",
        "id": "q8546",
        "input": "apply lambda python function with multiple inputs",
        "output": "",
        "rule": [
            "d8546"
        ]
    },
    {
        "instruction": "",
        "id": "q8547",
        "input": "apply lowercase function in series python",
        "output": "",
        "rule": [
            "d8547"
        ]
    },
    {
        "instruction": "",
        "id": "q8548",
        "input": "apply python fucntion to each row",
        "output": "",
        "rule": [
            "d8548"
        ]
    },
    {
        "instruction": "",
        "id": "q8549",
        "input": "python cv2 pixel viewer",
        "output": "",
        "rule": [
            "d8549"
        ]
    },
    {
        "instruction": "",
        "id": "q8550",
        "input": "applying fourier transform to image using python on windows",
        "output": "",
        "rule": [
            "d8550"
        ]
    },
    {
        "instruction": "",
        "id": "q8551",
        "input": "python cv2 rgb to hsv",
        "output": "",
        "rule": [
            "d8551"
        ]
    },
    {
        "instruction": "",
        "id": "q8552",
        "input": "applying gain to certain frequency range in python",
        "output": "",
        "rule": [
            "d8552"
        ]
    },
    {
        "instruction": "",
        "id": "q8553",
        "input": "python data frame outer join",
        "output": "",
        "rule": [
            "d8553"
        ]
    },
    {
        "instruction": "",
        "id": "q8554",
        "input": "array of 10 zeros in python",
        "output": "",
        "rule": [
            "d8554"
        ]
    },
    {
        "instruction": "",
        "id": "q8555",
        "input": "python data sort multiple columns",
        "output": "",
        "rule": [
            "d8555"
        ]
    },
    {
        "instruction": "",
        "id": "q8556",
        "input": "array of zeros in python",
        "output": "",
        "rule": [
            "d8556"
        ]
    },
    {
        "instruction": "",
        "id": "q8557",
        "input": "python database close ocnnectio",
        "output": "",
        "rule": [
            "d8557"
        ]
    },
    {
        "instruction": "",
        "id": "q8558",
        "input": "array to sql python",
        "output": "",
        "rule": [
            "d8558"
        ]
    },
    {
        "instruction": "",
        "id": "q8559",
        "input": "python datetime add timezone naive to local",
        "output": "",
        "rule": [
            "d8559"
        ]
    },
    {
        "instruction": "",
        "id": "q8560",
        "input": "artifactory python nested indexes",
        "output": "",
        "rule": [
            "d8560"
        ]
    },
    {
        "instruction": "",
        "id": "q8561",
        "input": "python datetime change timezone without pytz",
        "output": "",
        "rule": [
            "d8561"
        ]
    },
    {
        "instruction": "",
        "id": "q8562",
        "input": "auto generate documentation python",
        "output": "",
        "rule": [
            "d8562"
        ]
    },
    {
        "instruction": "",
        "id": "q8563",
        "input": "python datetime covert for arrays",
        "output": "",
        "rule": [
            "d8563"
        ]
    },
    {
        "instruction": "",
        "id": "q8564",
        "input": "automatic ctypes wrapper python",
        "output": "",
        "rule": [
            "d8564"
        ]
    },
    {
        "instruction": "",
        "id": "q8565",
        "input": "python datetime epoch millisecond format",
        "output": "",
        "rule": [
            "d8565"
        ]
    },
    {
        "instruction": "",
        "id": "q8566",
        "input": "average value of an array python",
        "output": "",
        "rule": [
            "d8566"
        ]
    },
    {
        "instruction": "",
        "id": "q8567",
        "input": "python datetime from timestamp microsecond",
        "output": "",
        "rule": [
            "d8567"
        ]
    },
    {
        "instruction": "",
        "id": "q8568",
        "input": "aws lambda python read a file from code commit",
        "output": "",
        "rule": [
            "d8568"
        ]
    },
    {
        "instruction": "",
        "id": "q8569",
        "input": "python datetime get total millisecond",
        "output": "",
        "rule": [
            "d8569"
        ]
    },
    {
        "instruction": "",
        "id": "q8570",
        "input": "base64 to string python3",
        "output": "",
        "rule": [
            "d8570"
        ]
    },
    {
        "instruction": "",
        "id": "q8571",
        "input": "python datetime now in utc",
        "output": "",
        "rule": [
            "d8571"
        ]
    },
    {
        "instruction": "",
        "id": "q8572",
        "input": "best way to handle latitude and longitude in python",
        "output": "",
        "rule": [
            "d8572"
        ]
    },
    {
        "instruction": "",
        "id": "q8573",
        "input": "python datetime remove microseconds",
        "output": "",
        "rule": [
            "d8573"
        ]
    },
    {
        "instruction": "",
        "id": "q8574",
        "input": "best way to interpolate over matrix python",
        "output": "",
        "rule": [
            "d8574"
        ]
    },
    {
        "instruction": "",
        "id": "q8575",
        "input": "python datetime to epoch seconds",
        "output": "",
        "rule": [
            "d8575"
        ]
    },
    {
        "instruction": "",
        "id": "q8576",
        "input": "best way to iterate through files in a directory python",
        "output": "",
        "rule": [
            "d8576"
        ]
    },
    {
        "instruction": "",
        "id": "q8577",
        "input": "python datetime with timezone to without",
        "output": "",
        "rule": [
            "d8577"
        ]
    },
    {
        "instruction": "",
        "id": "q8578",
        "input": "best way to iterate through files in a folder python",
        "output": "",
        "rule": [
            "d8578"
        ]
    },
    {
        "instruction": "",
        "id": "q8579",
        "input": "python dateutil how to get current date/time",
        "output": "",
        "rule": [
            "d8579"
        ]
    },
    {
        "instruction": "",
        "id": "q8580",
        "input": "best way to reduce dimmension of image python",
        "output": "",
        "rule": [
            "d8580"
        ]
    },
    {
        "instruction": "",
        "id": "q8581",
        "input": "python decarators with args",
        "output": "",
        "rule": [
            "d8581"
        ]
    },
    {
        "instruction": "",
        "id": "q8582",
        "input": "python decode base64 buffer",
        "output": "",
        "rule": [
            "d8582"
        ]
    },
    {
        "instruction": "",
        "id": "q8583",
        "input": "python deep merge dic",
        "output": "",
        "rule": [
            "d8583"
        ]
    },
    {
        "instruction": "",
        "id": "q8584",
        "input": "bin edges to bin centres python",
        "output": "",
        "rule": [
            "d8584"
        ]
    },
    {
        "instruction": "",
        "id": "q8585",
        "input": "python deepcopy basic type",
        "output": "",
        "rule": [
            "d8585"
        ]
    },
    {
        "instruction": "",
        "id": "q8586",
        "input": "binary tree printing in order python",
        "output": "",
        "rule": [
            "d8586"
        ]
    },
    {
        "instruction": "",
        "id": "q8587",
        "input": "python def change function vaule",
        "output": "",
        "rule": [
            "d8587"
        ]
    },
    {
        "instruction": "",
        "id": "q8588",
        "input": "bool as int python",
        "output": "",
        "rule": [
            "d8588"
        ]
    },
    {
        "instruction": "",
        "id": "q8589",
        "input": "python def with external variables",
        "output": "",
        "rule": [
            "d8589"
        ]
    },
    {
        "instruction": "",
        "id": "q8590",
        "input": "boolean matrix numpy python",
        "output": "",
        "rule": [
            "d8590"
        ]
    },
    {
        "instruction": "",
        "id": "q8591",
        "input": "python default values empty user input",
        "output": "",
        "rule": [
            "d8591"
        ]
    },
    {
        "instruction": "",
        "id": "q8592",
        "input": "both read write permission to a file in python",
        "output": "",
        "rule": [
            "d8592"
        ]
    },
    {
        "instruction": "",
        "id": "q8593",
        "input": "python define x axis of subplot",
        "output": "",
        "rule": [
            "d8593"
        ]
    },
    {
        "instruction": "",
        "id": "q8594",
        "input": "boto3 python opening a file on s3",
        "output": "",
        "rule": [
            "d8594"
        ]
    },
    {
        "instruction": "",
        "id": "q8595",
        "input": "python delete a file safely",
        "output": "",
        "rule": [
            "d8595"
        ]
    },
    {
        "instruction": "",
        "id": "q8596",
        "input": "break sentence into words python",
        "output": "",
        "rule": [
            "d8596"
        ]
    },
    {
        "instruction": "",
        "id": "q8597",
        "input": "python delete all non alphanumeric characters",
        "output": "",
        "rule": [
            "d8597"
        ]
    },
    {
        "instruction": "",
        "id": "q8598",
        "input": "build a url in python using kwargs",
        "output": "",
        "rule": [
            "d8598"
        ]
    },
    {
        "instruction": "",
        "id": "q8599",
        "input": "python delete character on screen",
        "output": "",
        "rule": [
            "d8599"
        ]
    },
    {
        "instruction": "",
        "id": "q8600",
        "input": "build python clear clean rebuild",
        "output": "",
        "rule": [
            "d8600"
        ]
    },
    {
        "instruction": "",
        "id": "q8601",
        "input": "python delete index from dictionary",
        "output": "",
        "rule": [
            "d8601"
        ]
    },
    {
        "instruction": "",
        "id": "q8602",
        "input": "button change state python",
        "output": "",
        "rule": [
            "d8602"
        ]
    },
    {
        "instruction": "",
        "id": "q8603",
        "input": "python delete node in linked list",
        "output": "",
        "rule": [
            "d8603"
        ]
    },
    {
        "instruction": "",
        "id": "q8604",
        "input": "caffe python layer add new feature",
        "output": "",
        "rule": [
            "d8604"
        ]
    },
    {
        "instruction": "",
        "id": "q8605",
        "input": "calculate area of 3 points python",
        "output": "",
        "rule": [
            "d8605"
        ]
    },
    {
        "instruction": "",
        "id": "q8606",
        "input": "python delete some letters from string",
        "output": "",
        "rule": [
            "d8606"
        ]
    },
    {
        "instruction": "",
        "id": "q8607",
        "input": "calculate distance to object in image python",
        "output": "",
        "rule": [
            "d8607"
        ]
    },
    {
        "instruction": "",
        "id": "q8608",
        "input": "python delete specific index",
        "output": "",
        "rule": [
            "d8608"
        ]
    },
    {
        "instruction": "",
        "id": "q8609",
        "input": "calculate distance two points latitude longitude in python",
        "output": "",
        "rule": [
            "d8609"
        ]
    },
    {
        "instruction": "",
        "id": "q8610",
        "input": "python deode bytet objet",
        "output": "",
        "rule": [
            "d8610"
        ]
    },
    {
        "instruction": "",
        "id": "q8611",
        "input": "calculate fpr and tpr in h2o logistic regression python",
        "output": "",
        "rule": [
            "d8611"
        ]
    },
    {
        "instruction": "",
        "id": "q8612",
        "input": "python describe exclude type object",
        "output": "",
        "rule": [
            "d8612"
        ]
    },
    {
        "instruction": "",
        "id": "q8613",
        "input": "calculate inverse of a matrix in python",
        "output": "",
        "rule": [
            "d8613"
        ]
    },
    {
        "instruction": "",
        "id": "q8614",
        "input": "python destroy all threads",
        "output": "",
        "rule": [
            "d8614"
        ]
    },
    {
        "instruction": "",
        "id": "q8615",
        "input": "calculate manhattan distance from minkowski and pearson python",
        "output": "",
        "rule": [
            "d8615"
        ]
    },
    {
        "instruction": "",
        "id": "q8616",
        "input": "python detect if in interactive mode",
        "output": "",
        "rule": [
            "d8616"
        ]
    },
    {
        "instruction": "",
        "id": "q8617",
        "input": "calculate p value for normal distribution python",
        "output": "",
        "rule": [
            "d8617"
        ]
    },
    {
        "instruction": "",
        "id": "q8618",
        "input": "python detect signal kill",
        "output": "",
        "rule": [
            "d8618"
        ]
    },
    {
        "instruction": "",
        "id": "q8619",
        "input": "python detecting string matches",
        "output": "",
        "rule": [
            "d8619"
        ]
    },
    {
        "instruction": "",
        "id": "q8620",
        "input": "calculate time to run a function python",
        "output": "",
        "rule": [
            "d8620"
        ]
    },
    {
        "instruction": "",
        "id": "q8621",
        "input": "python determin linux or windows",
        "output": "",
        "rule": [
            "d8621"
        ]
    },
    {
        "instruction": "",
        "id": "q8622",
        "input": "calculating list size in python",
        "output": "",
        "rule": [
            "d8622"
        ]
    },
    {
        "instruction": "",
        "id": "q8623",
        "input": "python determine if a value is an array",
        "output": "",
        "rule": [
            "d8623"
        ]
    },
    {
        "instruction": "",
        "id": "q8624",
        "input": "call a function in another function with parametters python",
        "output": "",
        "rule": [
            "d8624"
        ]
    },
    {
        "instruction": "",
        "id": "q8625",
        "input": "python determine if file has specific file extension",
        "output": "",
        "rule": [
            "d8625"
        ]
    },
    {
        "instruction": "",
        "id": "q8626",
        "input": "call a route from within another route in same blueprint python",
        "output": "",
        "rule": [
            "d8626"
        ]
    },
    {
        "instruction": "",
        "id": "q8627",
        "input": "python determine key is equal",
        "output": "",
        "rule": [
            "d8627"
        ]
    },
    {
        "instruction": "",
        "id": "q8628",
        "input": "call multiple python files in a script",
        "output": "",
        "rule": [
            "d8628"
        ]
    },
    {
        "instruction": "",
        "id": "q8629",
        "input": "python determine operational time",
        "output": "",
        "rule": [
            "d8629"
        ]
    },
    {
        "instruction": "",
        "id": "q8630",
        "input": "call python script from typescript",
        "output": "",
        "rule": [
            "d8630"
        ]
    },
    {
        "instruction": "",
        "id": "q8631",
        "input": "python determine whether particular key is in dictionary",
        "output": "",
        "rule": [
            "d8631"
        ]
    },
    {
        "instruction": "",
        "id": "q8632",
        "input": "calling method of object as sorted key python",
        "output": "",
        "rule": [
            "d8632"
        ]
    },
    {
        "instruction": "",
        "id": "q8633",
        "input": "calling python functions within itself",
        "output": "",
        "rule": [
            "d8633"
        ]
    },
    {
        "instruction": "",
        "id": "q8634",
        "input": "can a python enum have fucntions",
        "output": "",
        "rule": [
            "d8634"
        ]
    },
    {
        "instruction": "",
        "id": "q8635",
        "input": "python dict howto empty",
        "output": "",
        "rule": [
            "d8635"
        ]
    },
    {
        "instruction": "",
        "id": "q8636",
        "input": "can a python object have multiple init",
        "output": "",
        "rule": [
            "d8636"
        ]
    },
    {
        "instruction": "",
        "id": "q8637",
        "input": "python dict key encode ascii",
        "output": "",
        "rule": [
            "d8637"
        ]
    },
    {
        "instruction": "",
        "id": "q8638",
        "input": "can i send a variable through python flask redirect",
        "output": "",
        "rule": [
            "d8638"
        ]
    },
    {
        "instruction": "",
        "id": "q8639",
        "input": "can python access files inside zip directly",
        "output": "",
        "rule": [
            "d8639"
        ]
    },
    {
        "instruction": "",
        "id": "q8640",
        "input": "python dict keys to lower",
        "output": "",
        "rule": [
            "d8640"
        ]
    },
    {
        "instruction": "",
        "id": "q8641",
        "input": "can you chain if tags in python",
        "output": "",
        "rule": [
            "d8641"
        ]
    },
    {
        "instruction": "",
        "id": "q8642",
        "input": "python dict pretty output",
        "output": "",
        "rule": [
            "d8642"
        ]
    },
    {
        "instruction": "",
        "id": "q8643",
        "input": "can you pull multiple index slices from a single python string",
        "output": "",
        "rule": [
            "d8643"
        ]
    },
    {
        "instruction": "",
        "id": "q8644",
        "input": "python dict remove any",
        "output": "",
        "rule": [
            "d8644"
        ]
    },
    {
        "instruction": "",
        "id": "q8645",
        "input": "cant run python plug in for git",
        "output": "",
        "rule": [
            "d8645"
        ]
    },
    {
        "instruction": "",
        "id": "q8646",
        "input": "python dict setdefault multiple",
        "output": "",
        "rule": [
            "d8646"
        ]
    },
    {
        "instruction": "",
        "id": "q8647",
        "input": "capitalize to words in python",
        "output": "",
        "rule": [
            "d8647"
        ]
    },
    {
        "instruction": "",
        "id": "q8648",
        "input": "python dict to json pretty",
        "output": "",
        "rule": [
            "d8648"
        ]
    },
    {
        "instruction": "",
        "id": "q8649",
        "input": "cast string to json python",
        "output": "",
        "rule": [
            "d8649"
        ]
    },
    {
        "instruction": "",
        "id": "q8650",
        "input": "cast to bytes python",
        "output": "",
        "rule": [
            "d8650"
        ]
    },
    {
        "instruction": "",
        "id": "q8651",
        "input": "python dict to querystring",
        "output": "",
        "rule": [
            "d8651"
        ]
    },
    {
        "instruction": "",
        "id": "q8652",
        "input": "catch output of a shell command in python without displaying on screen",
        "output": "",
        "rule": [
            "d8652"
        ]
    },
    {
        "instruction": "",
        "id": "q8653",
        "input": "python dict update multiple items",
        "output": "",
        "rule": [
            "d8653"
        ]
    },
    {
        "instruction": "",
        "id": "q8654",
        "input": "catch signals sigkill python",
        "output": "",
        "rule": [
            "d8654"
        ]
    },
    {
        "instruction": "",
        "id": "q8655",
        "input": "python dictionary case insensitive",
        "output": "",
        "rule": [
            "d8655"
        ]
    },
    {
        "instruction": "",
        "id": "q8656",
        "input": "cauculate distance between clusters python",
        "output": "",
        "rule": [
            "d8656"
        ]
    },
    {
        "instruction": "",
        "id": "q8657",
        "input": "python dictionary contain global variable, update",
        "output": "",
        "rule": [
            "d8657"
        ]
    },
    {
        "instruction": "",
        "id": "q8658",
        "input": "center of an image gaussian fit python",
        "output": "",
        "rule": [
            "d8658"
        ]
    },
    {
        "instruction": "",
        "id": "q8659",
        "input": "python dictionary dump indent",
        "output": "",
        "rule": [
            "d8659"
        ]
    },
    {
        "instruction": "",
        "id": "q8660",
        "input": "centered image minus centroid python",
        "output": "",
        "rule": [
            "d8660"
        ]
    },
    {
        "instruction": "",
        "id": "q8661",
        "input": "python dictionary in dictionary remove all specific keys",
        "output": "",
        "rule": [
            "d8661"
        ]
    },
    {
        "instruction": "",
        "id": "q8662",
        "input": "chage plot bounds python",
        "output": "",
        "rule": [
            "d8662"
        ]
    },
    {
        "instruction": "",
        "id": "q8663",
        "input": "python dictionary to np array",
        "output": "",
        "rule": [
            "d8663"
        ]
    },
    {
        "instruction": "",
        "id": "q8664",
        "input": "change a string of numbers to int python if string contains non int",
        "output": "",
        "rule": [
            "d8664"
        ]
    },
    {
        "instruction": "",
        "id": "q8665",
        "input": "python dictionary write as a json readable",
        "output": "",
        "rule": [
            "d8665"
        ]
    },
    {
        "instruction": "",
        "id": "q8666",
        "input": "change axes 3d plot python'",
        "output": "",
        "rule": [
            "d8666"
        ]
    },
    {
        "instruction": "",
        "id": "q8667",
        "input": "python dill dump closure",
        "output": "",
        "rule": [
            "d8667"
        ]
    },
    {
        "instruction": "",
        "id": "q8668",
        "input": "change axis of index name in data frame python",
        "output": "",
        "rule": [
            "d8668"
        ]
    },
    {
        "instruction": "",
        "id": "q8669",
        "input": "python discord check if voice channel is empty",
        "output": "",
        "rule": [
            "d8669"
        ]
    },
    {
        "instruction": "",
        "id": "q8670",
        "input": "change background of the image in python",
        "output": "",
        "rule": [
            "d8670"
        ]
    },
    {
        "instruction": "",
        "id": "q8671",
        "input": "python display a list as a table\\",
        "output": "",
        "rule": [
            "d8671"
        ]
    },
    {
        "instruction": "",
        "id": "q8672",
        "input": "change global env python eval",
        "output": "",
        "rule": [
            "d8672"
        ]
    },
    {
        "instruction": "",
        "id": "q8673",
        "input": "python distinct values query",
        "output": "",
        "rule": [
            "d8673"
        ]
    },
    {
        "instruction": "",
        "id": "q8674",
        "input": "change logging format during runtime python",
        "output": "",
        "rule": [
            "d8674"
        ]
    },
    {
        "instruction": "",
        "id": "q8675",
        "input": "python django booleanfield default",
        "output": "",
        "rule": [
            "d8675"
        ]
    },
    {
        "instruction": "",
        "id": "q8676",
        "input": "change na values in series python",
        "output": "",
        "rule": [
            "d8676"
        ]
    },
    {
        "instruction": "",
        "id": "q8677",
        "input": "change position of text cursor in combobox text field python",
        "output": "",
        "rule": [
            "d8677"
        ]
    },
    {
        "instruction": "",
        "id": "q8678",
        "input": "python django link static files",
        "output": "",
        "rule": [
            "d8678"
        ]
    },
    {
        "instruction": "",
        "id": "q8679",
        "input": "change python file set last modified date",
        "output": "",
        "rule": [
            "d8679"
        ]
    },
    {
        "instruction": "",
        "id": "q8680",
        "input": "python django request header exists",
        "output": "",
        "rule": [
            "d8680"
        ]
    },
    {
        "instruction": "",
        "id": "q8681",
        "input": "change python list of sting to float",
        "output": "",
        "rule": [
            "d8681"
        ]
    },
    {
        "instruction": "",
        "id": "q8682",
        "input": "python dll deallocate memory",
        "output": "",
        "rule": [
            "d8682"
        ]
    },
    {
        "instruction": "",
        "id": "q8683",
        "input": "change str to boolena python",
        "output": "",
        "rule": [
            "d8683"
        ]
    },
    {
        "instruction": "",
        "id": "q8684",
        "input": "python documentation suppress space",
        "output": "",
        "rule": [
            "d8684"
        ]
    },
    {
        "instruction": "",
        "id": "q8685",
        "input": "change to array python",
        "output": "",
        "rule": [
            "d8685"
        ]
    },
    {
        "instruction": "",
        "id": "q8686",
        "input": "python docx no style with name",
        "output": "",
        "rule": [
            "d8686"
        ]
    },
    {
        "instruction": "",
        "id": "q8687",
        "input": "change treemap labels in python",
        "output": "",
        "rule": [
            "d8687"
        ]
    },
    {
        "instruction": "",
        "id": "q8688",
        "input": "python dot write dot flush",
        "output": "",
        "rule": [
            "d8688"
        ]
    },
    {
        "instruction": "",
        "id": "q8689",
        "input": "change type in python to string",
        "output": "",
        "rule": [
            "d8689"
        ]
    },
    {
        "instruction": "",
        "id": "q8690",
        "input": "python double click in tree view",
        "output": "",
        "rule": [
            "d8690"
        ]
    },
    {
        "instruction": "",
        "id": "q8691",
        "input": "changing data types in python data frame",
        "output": "",
        "rule": [
            "d8691"
        ]
    },
    {
        "instruction": "",
        "id": "q8692",
        "input": "changing pixels opencv python",
        "output": "",
        "rule": [
            "d8692"
        ]
    },
    {
        "instruction": "",
        "id": "q8693",
        "input": "changing timezone utc to est python",
        "output": "",
        "rule": [
            "d8693"
        ]
    },
    {
        "instruction": "",
        "id": "q8694",
        "input": "python draw rectangle with dotted line",
        "output": "",
        "rule": [
            "d8694"
        ]
    },
    {
        "instruction": "",
        "id": "q8695",
        "input": "chart multiple glyphs in bokeh python",
        "output": "",
        "rule": [
            "d8695"
        ]
    },
    {
        "instruction": "",
        "id": "q8696",
        "input": "python dump current logger",
        "output": "",
        "rule": [
            "d8696"
        ]
    },
    {
        "instruction": "",
        "id": "q8697",
        "input": "check config value is defined in python",
        "output": "",
        "rule": [
            "d8697"
        ]
    },
    {
        "instruction": "",
        "id": "q8698",
        "input": "python dump diction to yaml",
        "output": "",
        "rule": [
            "d8698"
        ]
    },
    {
        "instruction": "",
        "id": "q8699",
        "input": "check dupliates in the combinatin of tow datafrmae columns in python",
        "output": "",
        "rule": [
            "d8699"
        ]
    },
    {
        "instruction": "",
        "id": "q8700",
        "input": "python duplicated set in list",
        "output": "",
        "rule": [
            "d8700"
        ]
    },
    {
        "instruction": "",
        "id": "q8701",
        "input": "check file eof in python",
        "output": "",
        "rule": [
            "d8701"
        ]
    },
    {
        "instruction": "",
        "id": "q8702",
        "input": "python dynamic doc string",
        "output": "",
        "rule": [
            "d8702"
        ]
    },
    {
        "instruction": "",
        "id": "q8703",
        "input": "check for 404 with requests python",
        "output": "",
        "rule": [
            "d8703"
        ]
    },
    {
        "instruction": "",
        "id": "q8704",
        "input": "python dynamic field access",
        "output": "",
        "rule": [
            "d8704"
        ]
    },
    {
        "instruction": "",
        "id": "q8705",
        "input": "check if a python variable is a numpy datetime64",
        "output": "",
        "rule": [
            "d8705"
        ]
    },
    {
        "instruction": "",
        "id": "q8706",
        "input": "python efficient paren matching",
        "output": "",
        "rule": [
            "d8706"
        ]
    },
    {
        "instruction": "",
        "id": "q8707",
        "input": "check if a queue is empty python",
        "output": "",
        "rule": [
            "d8707"
        ]
    },
    {
        "instruction": "",
        "id": "q8708",
        "input": "python elasticsearch bulk index tail",
        "output": "",
        "rule": [
            "d8708"
        ]
    },
    {
        "instruction": "",
        "id": "q8709",
        "input": "check if a value is a list python",
        "output": "",
        "rule": [
            "d8709"
        ]
    },
    {
        "instruction": "",
        "id": "q8710",
        "input": "python elasticsearch get types in index",
        "output": "",
        "rule": [
            "d8710"
        ]
    },
    {
        "instruction": "",
        "id": "q8711",
        "input": "python elasticsearch list of types in index",
        "output": "",
        "rule": [
            "d8711"
        ]
    },
    {
        "instruction": "",
        "id": "q8712",
        "input": "check if data is sequence of vectors python",
        "output": "",
        "rule": [
            "d8712"
        ]
    },
    {
        "instruction": "",
        "id": "q8713",
        "input": "python eliminate blank lines from a file",
        "output": "",
        "rule": [
            "d8713"
        ]
    },
    {
        "instruction": "",
        "id": "q8714",
        "input": "check if dictionary key is in a string python",
        "output": "",
        "rule": [
            "d8714"
        ]
    },
    {
        "instruction": "",
        "id": "q8715",
        "input": "python emptying current memory",
        "output": "",
        "rule": [
            "d8715"
        ]
    },
    {
        "instruction": "",
        "id": "q8716",
        "input": "check if folder is writeable python",
        "output": "",
        "rule": [
            "d8716"
        ]
    },
    {
        "instruction": "",
        "id": "q8717",
        "input": "python ensure objects passed into a function are immutable",
        "output": "",
        "rule": [
            "d8717"
        ]
    },
    {
        "instruction": "",
        "id": "q8718",
        "input": "check if headers python text",
        "output": "",
        "rule": [
            "d8718"
        ]
    },
    {
        "instruction": "",
        "id": "q8719",
        "input": "python enum code style",
        "output": "",
        "rule": [
            "d8719"
        ]
    },
    {
        "instruction": "",
        "id": "q8720",
        "input": "check if stringstarts with python",
        "output": "",
        "rule": [
            "d8720"
        ]
    },
    {
        "instruction": "",
        "id": "q8721",
        "input": "python enum control print",
        "output": "",
        "rule": [
            "d8721"
        ]
    },
    {
        "instruction": "",
        "id": "q8722",
        "input": "python enum custom enummeta",
        "output": "",
        "rule": [
            "d8722"
        ]
    },
    {
        "instruction": "",
        "id": "q8723",
        "input": "check is checkbox is checked python",
        "output": "",
        "rule": [
            "d8723"
        ]
    },
    {
        "instruction": "",
        "id": "q8724",
        "input": "python enum get by index",
        "output": "",
        "rule": [
            "d8724"
        ]
    },
    {
        "instruction": "",
        "id": "q8725",
        "input": "check my python intrepreter location",
        "output": "",
        "rule": [
            "d8725"
        ]
    },
    {
        "instruction": "",
        "id": "q8726",
        "input": "python enum has name",
        "output": "",
        "rule": [
            "d8726"
        ]
    },
    {
        "instruction": "",
        "id": "q8727",
        "input": "check prefix in string in python",
        "output": "",
        "rule": [
            "d8727"
        ]
    },
    {
        "instruction": "",
        "id": "q8728",
        "input": "python enum no attribute 'decode'",
        "output": "",
        "rule": [
            "d8728"
        ]
    },
    {
        "instruction": "",
        "id": "q8729",
        "input": "check the structure of df in python",
        "output": "",
        "rule": [
            "d8729"
        ]
    },
    {
        "instruction": "",
        "id": "q8730",
        "input": "python equivalents for sed commands",
        "output": "",
        "rule": [
            "d8730"
        ]
    },
    {
        "instruction": "",
        "id": "q8731",
        "input": "check to see if a file is json python",
        "output": "",
        "rule": [
            "d8731"
        ]
    },
    {
        "instruction": "",
        "id": "q8732",
        "input": "python euler to rotation matrix",
        "output": "",
        "rule": [
            "d8732"
        ]
    },
    {
        "instruction": "",
        "id": "q8733",
        "input": "check value of enum in python",
        "output": "",
        "rule": [
            "d8733"
        ]
    },
    {
        "instruction": "",
        "id": "q8734",
        "input": "python event loop run dont block",
        "output": "",
        "rule": [
            "d8734"
        ]
    },
    {
        "instruction": "",
        "id": "q8735",
        "input": "checking for punctuation in string python",
        "output": "",
        "rule": [
            "d8735"
        ]
    },
    {
        "instruction": "",
        "id": "q8736",
        "input": "python examples for setting locale",
        "output": "",
        "rule": [
            "d8736"
        ]
    },
    {
        "instruction": "",
        "id": "q8737",
        "input": "checking username and passwords with dictionaries python",
        "output": "",
        "rule": [
            "d8737"
        ]
    },
    {
        "instruction": "",
        "id": "q8738",
        "input": "python except file is not a zip file",
        "output": "",
        "rule": [
            "d8738"
        ]
    },
    {
        "instruction": "",
        "id": "q8739",
        "input": "chmod + w python",
        "output": "",
        "rule": [
            "d8739"
        ]
    },
    {
        "instruction": "",
        "id": "q8740",
        "input": "python exit doesn't end",
        "output": "",
        "rule": [
            "d8740"
        ]
    },
    {
        "instruction": "",
        "id": "q8741",
        "input": "python exit out of def",
        "output": "",
        "rule": [
            "d8741"
        ]
    },
    {
        "instruction": "",
        "id": "q8742",
        "input": "clicking the next button on a page python",
        "output": "",
        "rule": [
            "d8742"
        ]
    },
    {
        "instruction": "",
        "id": "q8743",
        "input": "python exit without traceback",
        "output": "",
        "rule": [
            "d8743"
        ]
    },
    {
        "instruction": "",
        "id": "q8744",
        "input": "clipboard contents from python 3",
        "output": "",
        "rule": [
            "d8744"
        ]
    },
    {
        "instruction": "",
        "id": "q8745",
        "input": "python expanding scroll window",
        "output": "",
        "rule": [
            "d8745"
        ]
    },
    {
        "instruction": "",
        "id": "q8746",
        "input": "clipboard to variable python",
        "output": "",
        "rule": [
            "d8746"
        ]
    },
    {
        "instruction": "",
        "id": "q8747",
        "input": "python expection e message",
        "output": "",
        "rule": [
            "d8747"
        ]
    },
    {
        "instruction": "",
        "id": "q8748",
        "input": "close all figures in the python",
        "output": "",
        "rule": [
            "d8748"
        ]
    },
    {
        "instruction": "",
        "id": "q8749",
        "input": "python extract certain percentile of values from list",
        "output": "",
        "rule": [
            "d8749"
        ]
    },
    {
        "instruction": "",
        "id": "q8750",
        "input": "close the sql sessions in python",
        "output": "",
        "rule": [
            "d8750"
        ]
    },
    {
        "instruction": "",
        "id": "q8751",
        "input": "python fallback on not found values",
        "output": "",
        "rule": [
            "d8751"
        ]
    },
    {
        "instruction": "",
        "id": "q8752",
        "input": "closest match in dictionary python",
        "output": "",
        "rule": [
            "d8752"
        ]
    },
    {
        "instruction": "",
        "id": "q8753",
        "input": "python fastest way to determine nearest neighbor",
        "output": "",
        "rule": [
            "d8753"
        ]
    },
    {
        "instruction": "",
        "id": "q8754",
        "input": "code to get the average in a list python",
        "output": "",
        "rule": [
            "d8754"
        ]
    },
    {
        "instruction": "",
        "id": "q8755",
        "input": "python figure out value type",
        "output": "",
        "rule": [
            "d8755"
        ]
    },
    {
        "instruction": "",
        "id": "q8756",
        "input": "code to perform scalar product in python",
        "output": "",
        "rule": [
            "d8756"
        ]
    },
    {
        "instruction": "",
        "id": "q8757",
        "input": "python file desc is closed",
        "output": "",
        "rule": [
            "d8757"
        ]
    },
    {
        "instruction": "",
        "id": "q8758",
        "input": "collapsing list in python to single string",
        "output": "",
        "rule": [
            "d8758"
        ]
    },
    {
        "instruction": "",
        "id": "q8759",
        "input": "python file encoding judge",
        "output": "",
        "rule": [
            "d8759"
        ]
    },
    {
        "instruction": "",
        "id": "q8760",
        "input": "compare a float to the third decimal place python",
        "output": "",
        "rule": [
            "d8760"
        ]
    },
    {
        "instruction": "",
        "id": "q8761",
        "input": "python file open encoding is an invalid keyword",
        "output": "",
        "rule": [
            "d8761"
        ]
    },
    {
        "instruction": "",
        "id": "q8762",
        "input": "compare str with int in python",
        "output": "",
        "rule": [
            "d8762"
        ]
    },
    {
        "instruction": "",
        "id": "q8763",
        "input": "python file that excepts command line inputs",
        "output": "",
        "rule": [
            "d8763"
        ]
    },
    {
        "instruction": "",
        "id": "q8764",
        "input": "comparing 2 strings python",
        "output": "",
        "rule": [
            "d8764"
        ]
    },
    {
        "instruction": "",
        "id": "q8765",
        "input": "python fillna of specific column",
        "output": "",
        "rule": [
            "d8765"
        ]
    },
    {
        "instruction": "",
        "id": "q8766",
        "input": "comparing contents of one python dictionary to another",
        "output": "",
        "rule": [
            "d8766"
        ]
    },
    {
        "instruction": "",
        "id": "q8767",
        "input": "compile python source too long",
        "output": "",
        "rule": [
            "d8767"
        ]
    },
    {
        "instruction": "",
        "id": "q8768",
        "input": "python filter object is empty",
        "output": "",
        "rule": [
            "d8768"
        ]
    },
    {
        "instruction": "",
        "id": "q8769",
        "input": "compute the distance between each pair of points in python numpy",
        "output": "",
        "rule": [
            "d8769"
        ]
    },
    {
        "instruction": "",
        "id": "q8770",
        "input": "python filter object subscript",
        "output": "",
        "rule": [
            "d8770"
        ]
    },
    {
        "instruction": "",
        "id": "q8771",
        "input": "compute the euclidean distance between a and b python",
        "output": "",
        "rule": [
            "d8771"
        ]
    },
    {
        "instruction": "",
        "id": "q8772",
        "input": "python finding index of element in a list",
        "output": "",
        "rule": [
            "d8772"
        ]
    },
    {
        "instruction": "",
        "id": "q8773",
        "input": "computing tpr and fpr in python",
        "output": "",
        "rule": [
            "d8773"
        ]
    },
    {
        "instruction": "",
        "id": "q8774",
        "input": "concatenate columns in python using sql",
        "output": "",
        "rule": [
            "d8774"
        ]
    },
    {
        "instruction": "",
        "id": "q8775",
        "input": "python fit three coefficients",
        "output": "",
        "rule": [
            "d8775"
        ]
    },
    {
        "instruction": "",
        "id": "q8776",
        "input": "concatinate multiple values to a string in python",
        "output": "",
        "rule": [
            "d8776"
        ]
    },
    {
        "instruction": "",
        "id": "q8777",
        "input": "python fixed aspect ratio plot",
        "output": "",
        "rule": [
            "d8777"
        ]
    },
    {
        "instruction": "",
        "id": "q8778",
        "input": "concatinate string and datetime python",
        "output": "",
        "rule": [
            "d8778"
        ]
    },
    {
        "instruction": "",
        "id": "q8779",
        "input": "python fixed width parse",
        "output": "",
        "rule": [
            "d8779"
        ]
    },
    {
        "instruction": "",
        "id": "q8780",
        "input": "confidence interval of means in python using bootstrapping",
        "output": "",
        "rule": [
            "d8780"
        ]
    },
    {
        "instruction": "",
        "id": "q8781",
        "input": "python flask api post 400",
        "output": "",
        "rule": [
            "d8781"
        ]
    },
    {
        "instruction": "",
        "id": "q8782",
        "input": "consuming rest api service python 3",
        "output": "",
        "rule": [
            "d8782"
        ]
    },
    {
        "instruction": "",
        "id": "q8783",
        "input": "python flask call internal route",
        "output": "",
        "rule": [
            "d8783"
        ]
    },
    {
        "instruction": "",
        "id": "q8784",
        "input": "continue command in next line in python",
        "output": "",
        "rule": [
            "d8784"
        ]
    },
    {
        "instruction": "",
        "id": "q8785",
        "input": "python flask checkbox onclick",
        "output": "",
        "rule": [
            "d8785"
        ]
    },
    {
        "instruction": "",
        "id": "q8786",
        "input": "convention python function names",
        "output": "",
        "rule": [
            "d8786"
        ]
    },
    {
        "instruction": "",
        "id": "q8787",
        "input": "python flask generate link to external file",
        "output": "",
        "rule": [
            "d8787"
        ]
    },
    {
        "instruction": "",
        "id": "q8788",
        "input": "python flask get hostname from request",
        "output": "",
        "rule": [
            "d8788"
        ]
    },
    {
        "instruction": "",
        "id": "q8789",
        "input": "python flask items in a table",
        "output": "",
        "rule": [
            "d8789"
        ]
    },
    {
        "instruction": "",
        "id": "q8790",
        "input": "convolution without using numpy python",
        "output": "",
        "rule": [
            "d8790"
        ]
    },
    {
        "instruction": "",
        "id": "q8791",
        "input": "python flask jsonify example",
        "output": "",
        "rule": [
            "d8791"
        ]
    },
    {
        "instruction": "",
        "id": "q8792",
        "input": "copy manipulate and paste text python pyperclip",
        "output": "",
        "rule": [
            "d8792"
        ]
    },
    {
        "instruction": "",
        "id": "q8793",
        "input": "python flask modify request header",
        "output": "",
        "rule": [
            "d8793"
        ]
    },
    {
        "instruction": "",
        "id": "q8794",
        "input": "correlation coefficient matrix in python",
        "output": "",
        "rule": [
            "d8794"
        ]
    },
    {
        "instruction": "",
        "id": "q8795",
        "input": "python flask ngnix close connection",
        "output": "",
        "rule": [
            "d8795"
        ]
    },
    {
        "instruction": "",
        "id": "q8796",
        "input": "correlation heat map for different features in python",
        "output": "",
        "rule": [
            "d8796"
        ]
    },
    {
        "instruction": "",
        "id": "q8797",
        "input": "python flask return message 500",
        "output": "",
        "rule": [
            "d8797"
        ]
    },
    {
        "instruction": "",
        "id": "q8798",
        "input": "count non na python numpy axis",
        "output": "",
        "rule": [
            "d8798"
        ]
    },
    {
        "instruction": "",
        "id": "q8799",
        "input": "python flask session cookie",
        "output": "",
        "rule": [
            "d8799"
        ]
    },
    {
        "instruction": "",
        "id": "q8800",
        "input": "count null value in python from a dataset",
        "output": "",
        "rule": [
            "d8800"
        ]
    },
    {
        "instruction": "",
        "id": "q8801",
        "input": "python flask set static folder",
        "output": "",
        "rule": [
            "d8801"
        ]
    },
    {
        "instruction": "",
        "id": "q8802",
        "input": "coverage analysis python unittest",
        "output": "",
        "rule": [
            "d8802"
        ]
    },
    {
        "instruction": "",
        "id": "q8803",
        "input": "python flask static folder location",
        "output": "",
        "rule": [
            "d8803"
        ]
    },
    {
        "instruction": "",
        "id": "q8804",
        "input": "creat random array python gaussian",
        "output": "",
        "rule": [
            "d8804"
        ]
    },
    {
        "instruction": "",
        "id": "q8805",
        "input": "python flatten nested tuple",
        "output": "",
        "rule": [
            "d8805"
        ]
    },
    {
        "instruction": "",
        "id": "q8806",
        "input": "create a bool matrix python",
        "output": "",
        "rule": [
            "d8806"
        ]
    },
    {
        "instruction": "",
        "id": "q8807",
        "input": "python folder location mac",
        "output": "",
        "rule": [
            "d8807"
        ]
    },
    {
        "instruction": "",
        "id": "q8808",
        "input": "create a fix size list in python",
        "output": "",
        "rule": [
            "d8808"
        ]
    },
    {
        "instruction": "",
        "id": "q8809",
        "input": "python for window to popup before main window closes",
        "output": "",
        "rule": [
            "d8809"
        ]
    },
    {
        "instruction": "",
        "id": "q8810",
        "input": "create a float variable in python and display after rounding in 2 decimal",
        "output": "",
        "rule": [
            "d8810"
        ]
    },
    {
        "instruction": "",
        "id": "q8811",
        "input": "python force close h5 file",
        "output": "",
        "rule": [
            "d8811"
        ]
    },
    {
        "instruction": "",
        "id": "q8812",
        "input": "create a function to realise the fibanacci number python",
        "output": "",
        "rule": [
            "d8812"
        ]
    },
    {
        "instruction": "",
        "id": "q8813",
        "input": "python force print to flush immediately",
        "output": "",
        "rule": [
            "d8813"
        ]
    },
    {
        "instruction": "",
        "id": "q8814",
        "input": "create a new column with empty strings in python",
        "output": "",
        "rule": [
            "d8814"
        ]
    },
    {
        "instruction": "",
        "id": "q8815",
        "input": "python fork check alive",
        "output": "",
        "rule": [
            "d8815"
        ]
    },
    {
        "instruction": "",
        "id": "q8816",
        "input": "create a temporaly qcoreapplication python",
        "output": "",
        "rule": [
            "d8816"
        ]
    },
    {
        "instruction": "",
        "id": "q8817",
        "input": "python fork process crash",
        "output": "",
        "rule": [
            "d8817"
        ]
    },
    {
        "instruction": "",
        "id": "q8818",
        "input": "create an array from a list in python without numpy",
        "output": "",
        "rule": [
            "d8818"
        ]
    },
    {
        "instruction": "",
        "id": "q8819",
        "input": "python format function money decimals",
        "output": "",
        "rule": [
            "d8819"
        ]
    },
    {
        "instruction": "",
        "id": "q8820",
        "input": "create df from list as columns in python",
        "output": "",
        "rule": [
            "d8820"
        ]
    },
    {
        "instruction": "",
        "id": "q8821",
        "input": "python format string escaping curly brace",
        "output": "",
        "rule": [
            "d8821"
        ]
    },
    {
        "instruction": "",
        "id": "q8822",
        "input": "create dictionary wiht programmatic field names python",
        "output": "",
        "rule": [
            "d8822"
        ]
    },
    {
        "instruction": "",
        "id": "q8823",
        "input": "python formatting ansi escape character",
        "output": "",
        "rule": [
            "d8823"
        ]
    },
    {
        "instruction": "",
        "id": "q8824",
        "input": "create doc path in python",
        "output": "",
        "rule": [
            "d8824"
        ]
    },
    {
        "instruction": "",
        "id": "q8825",
        "input": "create empty python queryset object",
        "output": "",
        "rule": [
            "d8825"
        ]
    },
    {
        "instruction": "",
        "id": "q8826",
        "input": "python function definition with underscore",
        "output": "",
        "rule": [
            "d8826"
        ]
    },
    {
        "instruction": "",
        "id": "q8827",
        "input": "create engine python connect to server",
        "output": "",
        "rule": [
            "d8827"
        ]
    },
    {
        "instruction": "",
        "id": "q8828",
        "input": "python function name leading underscore",
        "output": "",
        "rule": [
            "d8828"
        ]
    },
    {
        "instruction": "",
        "id": "q8829",
        "input": "create python dictionary from sqlite3 response",
        "output": "",
        "rule": [
            "d8829"
        ]
    },
    {
        "instruction": "",
        "id": "q8830",
        "input": "python function replaces all occurences of old with new in a string",
        "output": "",
        "rule": [
            "d8830"
        ]
    },
    {
        "instruction": "",
        "id": "q8831",
        "input": "create python file from ipynb",
        "output": "",
        "rule": [
            "d8831"
        ]
    },
    {
        "instruction": "",
        "id": "q8832",
        "input": "python function that returns to arrays",
        "output": "",
        "rule": [
            "d8832"
        ]
    },
    {
        "instruction": "",
        "id": "q8833",
        "input": "creating comment block with python",
        "output": "",
        "rule": [
            "d8833"
        ]
    },
    {
        "instruction": "",
        "id": "q8834",
        "input": "python generate all permutations of list",
        "output": "",
        "rule": [
            "d8834"
        ]
    },
    {
        "instruction": "",
        "id": "q8835",
        "input": "creating function to match column to key python",
        "output": "",
        "rule": [
            "d8835"
        ]
    },
    {
        "instruction": "",
        "id": "q8836",
        "input": "python generate android deviceid",
        "output": "",
        "rule": [
            "d8836"
        ]
    },
    {
        "instruction": "",
        "id": "q8837",
        "input": "creating gist with python passing authentication",
        "output": "",
        "rule": [
            "d8837"
        ]
    },
    {
        "instruction": "",
        "id": "q8838",
        "input": "python generate new unique id",
        "output": "",
        "rule": [
            "d8838"
        ]
    },
    {
        "instruction": "",
        "id": "q8839",
        "input": "creating model in python sqlalchemy flask",
        "output": "",
        "rule": [
            "d8839"
        ]
    },
    {
        "instruction": "",
        "id": "q8840",
        "input": "python generate random file name",
        "output": "",
        "rule": [
            "d8840"
        ]
    },
    {
        "instruction": "",
        "id": "q8841",
        "input": "creating python list from json",
        "output": "",
        "rule": [
            "d8841"
        ]
    },
    {
        "instruction": "",
        "id": "q8842",
        "input": "python generate random hash string",
        "output": "",
        "rule": [
            "d8842"
        ]
    },
    {
        "instruction": "",
        "id": "q8843",
        "input": "cursor not visible in python kinter",
        "output": "",
        "rule": [
            "d8843"
        ]
    },
    {
        "instruction": "",
        "id": "q8844",
        "input": "python generate timespan value",
        "output": "",
        "rule": [
            "d8844"
        ]
    },
    {
        "instruction": "",
        "id": "q8845",
        "input": "cuts in python bins code",
        "output": "",
        "rule": [
            "d8845"
        ]
    },
    {
        "instruction": "",
        "id": "q8846",
        "input": "python geocoder result not found",
        "output": "",
        "rule": [
            "d8846"
        ]
    },
    {
        "instruction": "",
        "id": "q8847",
        "input": "date to number converter python",
        "output": "",
        "rule": [
            "d8847"
        ]
    },
    {
        "instruction": "",
        "id": "q8848",
        "input": "python get 2d array dimensions",
        "output": "",
        "rule": [
            "d8848"
        ]
    },
    {
        "instruction": "",
        "id": "q8849",
        "input": "datetime python round to minute",
        "output": "",
        "rule": [
            "d8849"
        ]
    },
    {
        "instruction": "",
        "id": "q8850",
        "input": "python get a list of font names from windows",
        "output": "",
        "rule": [
            "d8850"
        ]
    },
    {
        "instruction": "",
        "id": "q8851",
        "input": "datetime timezone python utc",
        "output": "",
        "rule": [
            "d8851"
        ]
    },
    {
        "instruction": "",
        "id": "q8852",
        "input": "python get a method's name",
        "output": "",
        "rule": [
            "d8852"
        ]
    },
    {
        "instruction": "",
        "id": "q8853",
        "input": "datetime to epoch in python",
        "output": "",
        "rule": [
            "d8853"
        ]
    },
    {
        "instruction": "",
        "id": "q8854",
        "input": "python get all a on a string",
        "output": "",
        "rule": [
            "d8854"
        ]
    },
    {
        "instruction": "",
        "id": "q8855",
        "input": "datetime type to string python",
        "output": "",
        "rule": [
            "d8855"
        ]
    },
    {
        "instruction": "",
        "id": "q8856",
        "input": "python get all of the pids in a process group",
        "output": "",
        "rule": [
            "d8856"
        ]
    },
    {
        "instruction": "",
        "id": "q8857",
        "input": "declaring a method as private in python",
        "output": "",
        "rule": [
            "d8857"
        ]
    },
    {
        "instruction": "",
        "id": "q8858",
        "input": "python get bounds of window",
        "output": "",
        "rule": [
            "d8858"
        ]
    },
    {
        "instruction": "",
        "id": "q8859",
        "input": "default value for *args python",
        "output": "",
        "rule": [
            "d8859"
        ]
    },
    {
        "instruction": "",
        "id": "q8860",
        "input": "python get content length from http response",
        "output": "",
        "rule": [
            "d8860"
        ]
    },
    {
        "instruction": "",
        "id": "q8861",
        "input": "default value for input python3",
        "output": "",
        "rule": [
            "d8861"
        ]
    },
    {
        "instruction": "",
        "id": "q8862",
        "input": "python get current index of iterator",
        "output": "",
        "rule": [
            "d8862"
        ]
    },
    {
        "instruction": "",
        "id": "q8863",
        "input": "defaultdict python lambda argrument",
        "output": "",
        "rule": [
            "d8863"
        ]
    },
    {
        "instruction": "",
        "id": "q8864",
        "input": "define an array inside structure in python ctype",
        "output": "",
        "rule": [
            "d8864"
        ]
    },
    {
        "instruction": "",
        "id": "q8865",
        "input": "python get dimenstions of object",
        "output": "",
        "rule": [
            "d8865"
        ]
    },
    {
        "instruction": "",
        "id": "q8866",
        "input": "defining an array in python zeroes",
        "output": "",
        "rule": [
            "d8866"
        ]
    },
    {
        "instruction": "",
        "id": "q8867",
        "input": "python get distance between two points multiple dimensions",
        "output": "",
        "rule": [
            "d8867"
        ]
    },
    {
        "instruction": "",
        "id": "q8868",
        "input": "delaunay 3d triangulation python",
        "output": "",
        "rule": [
            "d8868"
        ]
    },
    {
        "instruction": "",
        "id": "q8869",
        "input": "python get domain from links",
        "output": "",
        "rule": [
            "d8869"
        ]
    },
    {
        "instruction": "",
        "id": "q8870",
        "input": "delete all figures python",
        "output": "",
        "rule": [
            "d8870"
        ]
    },
    {
        "instruction": "",
        "id": "q8871",
        "input": "python get epoch seconds from datetime",
        "output": "",
        "rule": [
            "d8871"
        ]
    },
    {
        "instruction": "",
        "id": "q8872",
        "input": "delete elements from canvas python",
        "output": "",
        "rule": [
            "d8872"
        ]
    },
    {
        "instruction": "",
        "id": "q8873",
        "input": "python get epoch time int",
        "output": "",
        "rule": [
            "d8873"
        ]
    },
    {
        "instruction": "",
        "id": "q8874",
        "input": "delete map member in python",
        "output": "",
        "rule": [
            "d8874"
        ]
    },
    {
        "instruction": "",
        "id": "q8875",
        "input": "python get file name in function",
        "output": "",
        "rule": [
            "d8875"
        ]
    },
    {
        "instruction": "",
        "id": "q8876",
        "input": "python get first number of float",
        "output": "",
        "rule": [
            "d8876"
        ]
    },
    {
        "instruction": "",
        "id": "q8877",
        "input": "depth first tree traversal python",
        "output": "",
        "rule": [
            "d8877"
        ]
    },
    {
        "instruction": "",
        "id": "q8878",
        "input": "python get frequency of mic sound",
        "output": "",
        "rule": [
            "d8878"
        ]
    },
    {
        "instruction": "",
        "id": "q8879",
        "input": "python get ipaddress of server",
        "output": "",
        "rule": [
            "d8879"
        ]
    },
    {
        "instruction": "",
        "id": "q8880",
        "input": "detecting foreign language in text python",
        "output": "",
        "rule": [
            "d8880"
        ]
    },
    {
        "instruction": "",
        "id": "q8881",
        "input": "python get jvm default path",
        "output": "",
        "rule": [
            "d8881"
        ]
    },
    {
        "instruction": "",
        "id": "q8882",
        "input": "detecting strings in an object in python",
        "output": "",
        "rule": [
            "d8882"
        ]
    },
    {
        "instruction": "",
        "id": "q8883",
        "input": "python get last file in sequence",
        "output": "",
        "rule": [
            "d8883"
        ]
    },
    {
        "instruction": "",
        "id": "q8884",
        "input": "determine last element of a line python code",
        "output": "",
        "rule": [
            "d8884"
        ]
    },
    {
        "instruction": "",
        "id": "q8885",
        "input": "python get last id in db",
        "output": "",
        "rule": [
            "d8885"
        ]
    },
    {
        "instruction": "",
        "id": "q8886",
        "input": "determine the data type of each column in the data in python",
        "output": "",
        "rule": [
            "d8886"
        ]
    },
    {
        "instruction": "",
        "id": "q8887",
        "input": "python get linked table location",
        "output": "",
        "rule": [
            "d8887"
        ]
    },
    {
        "instruction": "",
        "id": "q8888",
        "input": "determine timezone pytz function python",
        "output": "",
        "rule": [
            "d8888"
        ]
    },
    {
        "instruction": "",
        "id": "q8889",
        "input": "python get lnorm for two vectors",
        "output": "",
        "rule": [
            "d8889"
        ]
    },
    {
        "instruction": "",
        "id": "q8890",
        "input": "determining pitch of audio python",
        "output": "",
        "rule": [
            "d8890"
        ]
    },
    {
        "instruction": "",
        "id": "q8891",
        "input": "python get main axis of shape",
        "output": "",
        "rule": [
            "d8891"
        ]
    },
    {
        "instruction": "",
        "id": "q8892",
        "input": "dictionary in python read from text",
        "output": "",
        "rule": [
            "d8892"
        ]
    },
    {
        "instruction": "",
        "id": "q8893",
        "input": "python get maximum and minimum index list",
        "output": "",
        "rule": [
            "d8893"
        ]
    },
    {
        "instruction": "",
        "id": "q8894",
        "input": "dimensions of a nested list in python",
        "output": "",
        "rule": [
            "d8894"
        ]
    },
    {
        "instruction": "",
        "id": "q8895",
        "input": "python get name of file on s3",
        "output": "",
        "rule": [
            "d8895"
        ]
    },
    {
        "instruction": "",
        "id": "q8896",
        "input": "directing python output to log file",
        "output": "",
        "rule": [
            "d8896"
        ]
    },
    {
        "instruction": "",
        "id": "q8897",
        "input": "python get next month end date",
        "output": "",
        "rule": [
            "d8897"
        ]
    },
    {
        "instruction": "",
        "id": "q8898",
        "input": "disable key repeat in python curses",
        "output": "",
        "rule": [
            "d8898"
        ]
    },
    {
        "instruction": "",
        "id": "q8899",
        "input": "python get num days in year",
        "output": "",
        "rule": [
            "d8899"
        ]
    },
    {
        "instruction": "",
        "id": "q8900",
        "input": "discord how to have a bot send a private message python",
        "output": "",
        "rule": [
            "d8900"
        ]
    },
    {
        "instruction": "",
        "id": "q8901",
        "input": "python get number of processors",
        "output": "",
        "rule": [
            "d8901"
        ]
    },
    {
        "instruction": "",
        "id": "q8902",
        "input": "discord python bot user data",
        "output": "",
        "rule": [
            "d8902"
        ]
    },
    {
        "instruction": "",
        "id": "q8903",
        "input": "python get object dimension",
        "output": "",
        "rule": [
            "d8903"
        ]
    },
    {
        "instruction": "",
        "id": "q8904",
        "input": "discord python join voice channel",
        "output": "",
        "rule": [
            "d8904"
        ]
    },
    {
        "instruction": "",
        "id": "q8905",
        "input": "python get object parent",
        "output": "",
        "rule": [
            "d8905"
        ]
    },
    {
        "instruction": "",
        "id": "q8906",
        "input": "display column names of a table using python",
        "output": "",
        "rule": [
            "d8906"
        ]
    },
    {
        "instruction": "",
        "id": "q8907",
        "input": "python get output from shell command",
        "output": "",
        "rule": [
            "d8907"
        ]
    },
    {
        "instruction": "",
        "id": "q8908",
        "input": "python get output of shell command",
        "output": "",
        "rule": [
            "d8908"
        ]
    },
    {
        "instruction": "",
        "id": "q8909",
        "input": "does python compile to c++",
        "output": "",
        "rule": [
            "d8909"
        ]
    },
    {
        "instruction": "",
        "id": "q8910",
        "input": "python get parent directory for file",
        "output": "",
        "rule": [
            "d8910"
        ]
    },
    {
        "instruction": "",
        "id": "q8911",
        "input": "does python have function headers like c++",
        "output": "",
        "rule": [
            "d8911"
        ]
    },
    {
        "instruction": "",
        "id": "q8912",
        "input": "python get parent path of one path",
        "output": "",
        "rule": [
            "d8912"
        ]
    },
    {
        "instruction": "",
        "id": "q8913",
        "input": "does pythons sorted function sort by alphabetical",
        "output": "",
        "rule": [
            "d8913"
        ]
    },
    {
        "instruction": "",
        "id": "q8914",
        "input": "python get path of parent folder",
        "output": "",
        "rule": [
            "d8914"
        ]
    },
    {
        "instruction": "",
        "id": "q8915",
        "input": "doing bulk insert into oracle in python",
        "output": "",
        "rule": [
            "d8915"
        ]
    },
    {
        "instruction": "",
        "id": "q8916",
        "input": "python get path to file in project",
        "output": "",
        "rule": [
            "d8916"
        ]
    },
    {
        "instruction": "",
        "id": "q8917",
        "input": "double the pixels without changing the aspect ratio python",
        "output": "",
        "rule": [
            "d8917"
        ]
    },
    {
        "instruction": "",
        "id": "q8918",
        "input": "python get previous quarter end date",
        "output": "",
        "rule": [
            "d8918"
        ]
    },
    {
        "instruction": "",
        "id": "q8919",
        "input": "draw a cube in python",
        "output": "",
        "rule": [
            "d8919"
        ]
    },
    {
        "instruction": "",
        "id": "q8920",
        "input": "python get process memory used",
        "output": "",
        "rule": [
            "d8920"
        ]
    },
    {
        "instruction": "",
        "id": "q8921",
        "input": "dump a python dict to url query",
        "output": "",
        "rule": [
            "d8921"
        ]
    },
    {
        "instruction": "",
        "id": "q8922",
        "input": "python get reference to namespace of function defined",
        "output": "",
        "rule": [
            "d8922"
        ]
    },
    {
        "instruction": "",
        "id": "q8923",
        "input": "dynamically add a property python using property",
        "output": "",
        "rule": [
            "d8923"
        ]
    },
    {
        "instruction": "",
        "id": "q8924",
        "input": "python get relative path of an absolute path",
        "output": "",
        "rule": [
            "d8924"
        ]
    },
    {
        "instruction": "",
        "id": "q8925",
        "input": "python get rid of handles on legend",
        "output": "",
        "rule": [
            "d8925"
        ]
    },
    {
        "instruction": "",
        "id": "q8926",
        "input": "easiest way to access corpus in python",
        "output": "",
        "rule": [
            "d8926"
        ]
    },
    {
        "instruction": "",
        "id": "q8927",
        "input": "python get rid of line feed",
        "output": "",
        "rule": [
            "d8927"
        ]
    },
    {
        "instruction": "",
        "id": "q8928",
        "input": "easy python decompiler invalid pyc file",
        "output": "",
        "rule": [
            "d8928"
        ]
    },
    {
        "instruction": "",
        "id": "q8929",
        "input": "python get the indices of an array that equals a pecific value",
        "output": "",
        "rule": [
            "d8929"
        ]
    },
    {
        "instruction": "",
        "id": "q8930",
        "input": "elasticsearch get mapping python",
        "output": "",
        "rule": [
            "d8930"
        ]
    },
    {
        "instruction": "",
        "id": "q8931",
        "input": "python get value by key default otherwise",
        "output": "",
        "rule": [
            "d8931"
        ]
    },
    {
        "instruction": "",
        "id": "q8932",
        "input": "elasticsearch python return all index name",
        "output": "",
        "rule": [
            "d8932"
        ]
    },
    {
        "instruction": "",
        "id": "q8933",
        "input": "python get value from property name",
        "output": "",
        "rule": [
            "d8933"
        ]
    },
    {
        "instruction": "",
        "id": "q8934",
        "input": "elasticsearch scroll api python",
        "output": "",
        "rule": [
            "d8934"
        ]
    },
    {
        "instruction": "",
        "id": "q8935",
        "input": "python get variable by its name",
        "output": "",
        "rule": [
            "d8935"
        ]
    },
    {
        "instruction": "",
        "id": "q8936",
        "input": "enable logging for python stdout",
        "output": "",
        "rule": [
            "d8936"
        ]
    },
    {
        "instruction": "",
        "id": "q8937",
        "input": "python get variable dynamically from string",
        "output": "",
        "rule": [
            "d8937"
        ]
    },
    {
        "instruction": "",
        "id": "q8938",
        "input": "enlarge the bounding box python",
        "output": "",
        "rule": [
            "d8938"
        ]
    },
    {
        "instruction": "",
        "id": "q8939",
        "input": "python get variance of a series",
        "output": "",
        "rule": [
            "d8939"
        ]
    },
    {
        "instruction": "",
        "id": "q8940",
        "input": "equivalent of timespan in python",
        "output": "",
        "rule": [
            "d8940"
        ]
    },
    {
        "instruction": "",
        "id": "q8941",
        "input": "python get windows network userid",
        "output": "",
        "rule": [
            "d8941"
        ]
    },
    {
        "instruction": "",
        "id": "q8942",
        "input": "escape % in string python",
        "output": "",
        "rule": [
            "d8942"
        ]
    },
    {
        "instruction": "",
        "id": "q8943",
        "input": "python gevent is not defined",
        "output": "",
        "rule": [
            "d8943"
        ]
    },
    {
        "instruction": "",
        "id": "q8944",
        "input": "evaluate a user entered expression in python",
        "output": "",
        "rule": [
            "d8944"
        ]
    },
    {
        "instruction": "",
        "id": "q8945",
        "input": "python gevent shared param",
        "output": "",
        "rule": [
            "d8945"
        ]
    },
    {
        "instruction": "",
        "id": "q8946",
        "input": "example python bokeh customjs",
        "output": "",
        "rule": [
            "d8946"
        ]
    },
    {
        "instruction": "",
        "id": "q8947",
        "input": "python glx transparent window",
        "output": "",
        "rule": [
            "d8947"
        ]
    },
    {
        "instruction": "",
        "id": "q8948",
        "input": "extract numbers from tuple python",
        "output": "",
        "rule": [
            "d8948"
        ]
    },
    {
        "instruction": "",
        "id": "q8949",
        "input": "python gnereating a md5 checksum for a file",
        "output": "",
        "rule": [
            "d8949"
        ]
    },
    {
        "instruction": "",
        "id": "q8950",
        "input": "extract only letters only words in python",
        "output": "",
        "rule": [
            "d8950"
        ]
    },
    {
        "instruction": "",
        "id": "q8951",
        "input": "python go to end of line python",
        "output": "",
        "rule": [
            "d8951"
        ]
    },
    {
        "instruction": "",
        "id": "q8952",
        "input": "fastest way to make a list python",
        "output": "",
        "rule": [
            "d8952"
        ]
    },
    {
        "instruction": "",
        "id": "q8953",
        "input": "python goodness of fit plot",
        "output": "",
        "rule": [
            "d8953"
        ]
    },
    {
        "instruction": "",
        "id": "q8954",
        "input": "fetch a single column from an ndarray python\\",
        "output": "",
        "rule": [
            "d8954"
        ]
    },
    {
        "instruction": "",
        "id": "q8955",
        "input": "python grab image from url",
        "output": "",
        "rule": [
            "d8955"
        ]
    },
    {
        "instruction": "",
        "id": "q8956",
        "input": "file pattern matching in python",
        "output": "",
        "rule": [
            "d8956"
        ]
    },
    {
        "instruction": "",
        "id": "q8957",
        "input": "python grabbing a file from the internet",
        "output": "",
        "rule": [
            "d8957"
        ]
    },
    {
        "instruction": "",
        "id": "q8958",
        "input": "fill a column with null in python",
        "output": "",
        "rule": [
            "d8958"
        ]
    },
    {
        "instruction": "",
        "id": "q8959",
        "input": "python group by multiple keys itertools",
        "output": "",
        "rule": [
            "d8959"
        ]
    },
    {
        "instruction": "",
        "id": "q8960",
        "input": "filling out a pdf with python",
        "output": "",
        "rule": [
            "d8960"
        ]
    },
    {
        "instruction": "",
        "id": "q8961",
        "input": "python gui change title window",
        "output": "",
        "rule": [
            "d8961"
        ]
    },
    {
        "instruction": "",
        "id": "q8962",
        "input": "fillna python specific columns",
        "output": "",
        "rule": [
            "d8962"
        ]
    },
    {
        "instruction": "",
        "id": "q8963",
        "input": "python hamming distance script",
        "output": "",
        "rule": [
            "d8963"
        ]
    },
    {
        "instruction": "",
        "id": "q8964",
        "input": "filter list with none python",
        "output": "",
        "rule": [
            "d8964"
        ]
    },
    {
        "instruction": "",
        "id": "q8965",
        "input": "python hash function crash",
        "output": "",
        "rule": [
            "d8965"
        ]
    },
    {
        "instruction": "",
        "id": "q8966",
        "input": "finding file extensions in python",
        "output": "",
        "rule": [
            "d8966"
        ]
    },
    {
        "instruction": "",
        "id": "q8967",
        "input": "python hash function for numpy array",
        "output": "",
        "rule": [
            "d8967"
        ]
    },
    {
        "instruction": "",
        "id": "q8968",
        "input": "finding shape of an array python",
        "output": "",
        "rule": [
            "d8968"
        ]
    },
    {
        "instruction": "",
        "id": "q8969",
        "input": "python hdf5 h5py unable to create fie exists",
        "output": "",
        "rule": [
            "d8969"
        ]
    },
    {
        "instruction": "",
        "id": "q8970",
        "input": "finding the max value in an array python",
        "output": "",
        "rule": [
            "d8970"
        ]
    },
    {
        "instruction": "",
        "id": "q8971",
        "input": "python how read contents from clipboard",
        "output": "",
        "rule": [
            "d8971"
        ]
    },
    {
        "instruction": "",
        "id": "q8972",
        "input": "finding the median in python arthimeticallly",
        "output": "",
        "rule": [
            "d8972"
        ]
    },
    {
        "instruction": "",
        "id": "q8973",
        "input": "python how to average the values of a dictionary",
        "output": "",
        "rule": [
            "d8973"
        ]
    },
    {
        "instruction": "",
        "id": "q8974",
        "input": "finding unique lists in python",
        "output": "",
        "rule": [
            "d8974"
        ]
    },
    {
        "instruction": "",
        "id": "q8975",
        "input": "python how to calculate pairwise distance matrix",
        "output": "",
        "rule": [
            "d8975"
        ]
    },
    {
        "instruction": "",
        "id": "q8976",
        "input": "fitting a gaussian curve python",
        "output": "",
        "rule": [
            "d8976"
        ]
    },
    {
        "instruction": "",
        "id": "q8977",
        "input": "python how to change partial object to function",
        "output": "",
        "rule": [
            "d8977"
        ]
    },
    {
        "instruction": "",
        "id": "q8978",
        "input": "flag for null in python",
        "output": "",
        "rule": [
            "d8978"
        ]
    },
    {
        "instruction": "",
        "id": "q8979",
        "input": "python how to check if a user has read permissions to a file",
        "output": "",
        "rule": [
            "d8979"
        ]
    },
    {
        "instruction": "",
        "id": "q8980",
        "input": "flask python replacing quotes in html",
        "output": "",
        "rule": [
            "d8980"
        ]
    },
    {
        "instruction": "",
        "id": "q8981",
        "input": "python how to check if an attribute exist",
        "output": "",
        "rule": [
            "d8981"
        ]
    },
    {
        "instruction": "",
        "id": "q8982",
        "input": "flask python serialize databse query object",
        "output": "",
        "rule": [
            "d8982"
        ]
    },
    {
        "instruction": "",
        "id": "q8983",
        "input": "python how to check if host is local",
        "output": "",
        "rule": [
            "d8983"
        ]
    },
    {
        "instruction": "",
        "id": "q8984",
        "input": "flask python static files",
        "output": "",
        "rule": [
            "d8984"
        ]
    },
    {
        "instruction": "",
        "id": "q8985",
        "input": "python how to check if key exists before key error",
        "output": "",
        "rule": [
            "d8985"
        ]
    },
    {
        "instruction": "",
        "id": "q8986",
        "input": "for loop iterate string replace python",
        "output": "",
        "rule": [
            "d8986"
        ]
    },
    {
        "instruction": "",
        "id": "q8987",
        "input": "python how to check if string contains file extension",
        "output": "",
        "rule": [
            "d8987"
        ]
    },
    {
        "instruction": "",
        "id": "q8988",
        "input": "for statemnets python, how to make range inclusive",
        "output": "",
        "rule": [
            "d8988"
        ]
    },
    {
        "instruction": "",
        "id": "q8989",
        "input": "python how to check if value is in enum",
        "output": "",
        "rule": [
            "d8989"
        ]
    },
    {
        "instruction": "",
        "id": "q8990",
        "input": "for to return 5 largest value in python",
        "output": "",
        "rule": [
            "d8990"
        ]
    },
    {
        "instruction": "",
        "id": "q8991",
        "input": "python how to check if variable has any sub functions",
        "output": "",
        "rule": [
            "d8991"
        ]
    },
    {
        "instruction": "",
        "id": "q8992",
        "input": "force an array to be float in python",
        "output": "",
        "rule": [
            "d8992"
        ]
    },
    {
        "instruction": "",
        "id": "q8993",
        "input": "python how to check the extension of a file",
        "output": "",
        "rule": [
            "d8993"
        ]
    },
    {
        "instruction": "",
        "id": "q8994",
        "input": "force user input to be saved as pdf file python",
        "output": "",
        "rule": [
            "d8994"
        ]
    },
    {
        "instruction": "",
        "id": "q8995",
        "input": "python how to check url",
        "output": "",
        "rule": [
            "d8995"
        ]
    },
    {
        "instruction": "",
        "id": "q8996",
        "input": "fork a daemon python",
        "output": "",
        "rule": [
            "d8996"
        ]
    },
    {
        "instruction": "",
        "id": "q8997",
        "input": "python how to create a md5 hash on a file",
        "output": "",
        "rule": [
            "d8997"
        ]
    },
    {
        "instruction": "",
        "id": "q8998",
        "input": "fork in python in windows",
        "output": "",
        "rule": [
            "d8998"
        ]
    },
    {
        "instruction": "",
        "id": "q8999",
        "input": "python how to define static uuid",
        "output": "",
        "rule": [
            "d8999"
        ]
    },
    {
        "instruction": "",
        "id": "q9000",
        "input": "format json output in python",
        "output": "",
        "rule": [
            "d9000"
        ]
    },
    {
        "instruction": "",
        "id": "q9001",
        "input": "python how to determine if image is mostly black in decimals",
        "output": "",
        "rule": [
            "d9001"
        ]
    },
    {
        "instruction": "",
        "id": "q9002",
        "input": "format object to format string python",
        "output": "",
        "rule": [
            "d9002"
        ]
    },
    {
        "instruction": "",
        "id": "q9003",
        "input": "python how to do multiple string replaces",
        "output": "",
        "rule": [
            "d9003"
        ]
    },
    {
        "instruction": "",
        "id": "q9004",
        "input": "format string in python to pass a specific string",
        "output": "",
        "rule": [
            "d9004"
        ]
    },
    {
        "instruction": "",
        "id": "q9005",
        "input": "python how to download a json url and save it as a file to your computer",
        "output": "",
        "rule": [
            "d9005"
        ]
    },
    {
        "instruction": "",
        "id": "q9006",
        "input": "fourier coefficients for each pixel using fft in python",
        "output": "",
        "rule": [
            "d9006"
        ]
    },
    {
        "instruction": "",
        "id": "q9007",
        "input": "python how to end indentation",
        "output": "",
        "rule": [
            "d9007"
        ]
    },
    {
        "instruction": "",
        "id": "q9008",
        "input": "python how to exist a gevent thread",
        "output": "",
        "rule": [
            "d9008"
        ]
    },
    {
        "instruction": "",
        "id": "q9009",
        "input": "function pointer to string representation python",
        "output": "",
        "rule": [
            "d9009"
        ]
    },
    {
        "instruction": "",
        "id": "q9010",
        "input": "python how to fix mixed tabs and spaces",
        "output": "",
        "rule": [
            "d9010"
        ]
    },
    {
        "instruction": "",
        "id": "q9011",
        "input": "function that return the number of days in a month without the year python",
        "output": "",
        "rule": [
            "d9011"
        ]
    },
    {
        "instruction": "",
        "id": "q9012",
        "input": "python how to flip a matrix",
        "output": "",
        "rule": [
            "d9012"
        ]
    },
    {
        "instruction": "",
        "id": "q9013",
        "input": "function to check strngth of password in python",
        "output": "",
        "rule": [
            "d9013"
        ]
    },
    {
        "instruction": "",
        "id": "q9014",
        "input": "python how to force paratemr type to int",
        "output": "",
        "rule": [
            "d9014"
        ]
    },
    {
        "instruction": "",
        "id": "q9015",
        "input": "function to to check if user exist in python",
        "output": "",
        "rule": [
            "d9015"
        ]
    },
    {
        "instruction": "",
        "id": "q9016",
        "input": "python how to get domain top ;level",
        "output": "",
        "rule": [
            "d9016"
        ]
    },
    {
        "instruction": "",
        "id": "q9017",
        "input": "gaussian blur opencv python",
        "output": "",
        "rule": [
            "d9017"
        ]
    },
    {
        "instruction": "",
        "id": "q9018",
        "input": "python how to get function name",
        "output": "",
        "rule": [
            "d9018"
        ]
    },
    {
        "instruction": "",
        "id": "q9019",
        "input": "gaussian distribution formula python",
        "output": "",
        "rule": [
            "d9019"
        ]
    },
    {
        "instruction": "",
        "id": "q9020",
        "input": "python how to get method name",
        "output": "",
        "rule": [
            "d9020"
        ]
    },
    {
        "instruction": "",
        "id": "q9021",
        "input": "generate a random apikey for a user python",
        "output": "",
        "rule": [
            "d9021"
        ]
    },
    {
        "instruction": "",
        "id": "q9022",
        "input": "python how to get original data from normalized data",
        "output": "",
        "rule": [
            "d9022"
        ]
    },
    {
        "instruction": "",
        "id": "q9023",
        "input": "generate list of fixed size python",
        "output": "",
        "rule": [
            "d9023"
        ]
    },
    {
        "instruction": "",
        "id": "q9024",
        "input": "python how to get program to restart after executing",
        "output": "",
        "rule": [
            "d9024"
        ]
    },
    {
        "instruction": "",
        "id": "q9025",
        "input": "generate random hash string python",
        "output": "",
        "rule": [
            "d9025"
        ]
    },
    {
        "instruction": "",
        "id": "q9026",
        "input": "generating documentation from python docstring comments",
        "output": "",
        "rule": [
            "d9026"
        ]
    },
    {
        "instruction": "",
        "id": "q9027",
        "input": "python how to get the average of red blue and green values",
        "output": "",
        "rule": [
            "d9027"
        ]
    },
    {
        "instruction": "",
        "id": "q9028",
        "input": "python how to get the last n elements of a list",
        "output": "",
        "rule": [
            "d9028"
        ]
    },
    {
        "instruction": "",
        "id": "q9029",
        "input": "get all integers from a string python",
        "output": "",
        "rule": [
            "d9029"
        ]
    },
    {
        "instruction": "",
        "id": "q9030",
        "input": "python how to get the variable with the same name as the string",
        "output": "",
        "rule": [
            "d9030"
        ]
    },
    {
        "instruction": "",
        "id": "q9031",
        "input": "get all numbers in a string python",
        "output": "",
        "rule": [
            "d9031"
        ]
    },
    {
        "instruction": "",
        "id": "q9032",
        "input": "python how to gzip a file",
        "output": "",
        "rule": [
            "d9032"
        ]
    },
    {
        "instruction": "",
        "id": "q9033",
        "input": "get all the variable in python local",
        "output": "",
        "rule": [
            "d9033"
        ]
    },
    {
        "instruction": "",
        "id": "q9034",
        "input": "python how to hide axes ticks matplotlib",
        "output": "",
        "rule": [
            "d9034"
        ]
    },
    {
        "instruction": "",
        "id": "q9035",
        "input": "get an entry from a dictionary dynaimcally python3",
        "output": "",
        "rule": [
            "d9035"
        ]
    },
    {
        "instruction": "",
        "id": "q9036",
        "input": "python how to identify integers or floats",
        "output": "",
        "rule": [
            "d9036"
        ]
    },
    {
        "instruction": "",
        "id": "q9037",
        "input": "get attached logger handlers python",
        "output": "",
        "rule": [
            "d9037"
        ]
    },
    {
        "instruction": "",
        "id": "q9038",
        "input": "python how to investigate time used in each call",
        "output": "",
        "rule": [
            "d9038"
        ]
    },
    {
        "instruction": "",
        "id": "q9039",
        "input": "get average from list in python",
        "output": "",
        "rule": [
            "d9039"
        ]
    },
    {
        "instruction": "",
        "id": "q9040",
        "input": "python how to know if a file handle is valid",
        "output": "",
        "rule": [
            "d9040"
        ]
    },
    {
        "instruction": "",
        "id": "q9041",
        "input": "get average of items in a list python",
        "output": "",
        "rule": [
            "d9041"
        ]
    },
    {
        "instruction": "",
        "id": "q9042",
        "input": "python how to list the most recent file",
        "output": "",
        "rule": [
            "d9042"
        ]
    },
    {
        "instruction": "",
        "id": "q9043",
        "input": "get base address of a process python",
        "output": "",
        "rule": [
            "d9043"
        ]
    },
    {
        "instruction": "",
        "id": "q9044",
        "input": "python how to make an infinity sign",
        "output": "",
        "rule": [
            "d9044"
        ]
    },
    {
        "instruction": "",
        "id": "q9045",
        "input": "get cache path python",
        "output": "",
        "rule": [
            "d9045"
        ]
    },
    {
        "instruction": "",
        "id": "q9046",
        "input": "python how to make an object into a string",
        "output": "",
        "rule": [
            "d9046"
        ]
    },
    {
        "instruction": "",
        "id": "q9047",
        "input": "get closest value in an array python",
        "output": "",
        "rule": [
            "d9047"
        ]
    },
    {
        "instruction": "",
        "id": "q9048",
        "input": "python how to make traceback error",
        "output": "",
        "rule": [
            "d9048"
        ]
    },
    {
        "instruction": "",
        "id": "q9049",
        "input": "get columns name of data frame in python",
        "output": "",
        "rule": [
            "d9049"
        ]
    },
    {
        "instruction": "",
        "id": "q9050",
        "input": "python how to make transparent hole in image",
        "output": "",
        "rule": [
            "d9050"
        ]
    },
    {
        "instruction": "",
        "id": "q9051",
        "input": "get contour and fill image python",
        "output": "",
        "rule": [
            "d9051"
        ]
    },
    {
        "instruction": "",
        "id": "q9052",
        "input": "python how to open file using absolute path",
        "output": "",
        "rule": [
            "d9052"
        ]
    },
    {
        "instruction": "",
        "id": "q9053",
        "input": "get coordinates of box in a image python",
        "output": "",
        "rule": [
            "d9053"
        ]
    },
    {
        "instruction": "",
        "id": "q9054",
        "input": "python how to open json from url",
        "output": "",
        "rule": [
            "d9054"
        ]
    },
    {
        "instruction": "",
        "id": "q9055",
        "input": "get date diff in week python",
        "output": "",
        "rule": [
            "d9055"
        ]
    },
    {
        "instruction": "",
        "id": "q9056",
        "input": "python how to print dictionary within a dictionary",
        "output": "",
        "rule": [
            "d9056"
        ]
    },
    {
        "instruction": "",
        "id": "q9057",
        "input": "get default python session",
        "output": "",
        "rule": [
            "d9057"
        ]
    },
    {
        "instruction": "",
        "id": "q9058",
        "input": "python how to redirect stdout to file",
        "output": "",
        "rule": [
            "d9058"
        ]
    },
    {
        "instruction": "",
        "id": "q9059",
        "input": "get every nth element from array python",
        "output": "",
        "rule": [
            "d9059"
        ]
    },
    {
        "instruction": "",
        "id": "q9060",
        "input": "python how to replace capitals with lowercase",
        "output": "",
        "rule": [
            "d9060"
        ]
    },
    {
        "instruction": "",
        "id": "q9061",
        "input": "get file name without extension in python",
        "output": "",
        "rule": [
            "d9061"
        ]
    },
    {
        "instruction": "",
        "id": "q9062",
        "input": "python how to return the quarter of a date",
        "output": "",
        "rule": [
            "d9062"
        ]
    },
    {
        "instruction": "",
        "id": "q9063",
        "input": "get file type in python",
        "output": "",
        "rule": [
            "d9063"
        ]
    },
    {
        "instruction": "",
        "id": "q9064",
        "input": "python how to save figure to pdf",
        "output": "",
        "rule": [
            "d9064"
        ]
    },
    {
        "instruction": "",
        "id": "q9065",
        "input": "get filename of url python",
        "output": "",
        "rule": [
            "d9065"
        ]
    },
    {
        "instruction": "",
        "id": "q9066",
        "input": "python how to save to path in requests",
        "output": "",
        "rule": [
            "d9066"
        ]
    },
    {
        "instruction": "",
        "id": "q9067",
        "input": "get first column array python",
        "output": "",
        "rule": [
            "d9067"
        ]
    },
    {
        "instruction": "",
        "id": "q9068",
        "input": "python how to select list of table mysql",
        "output": "",
        "rule": [
            "d9068"
        ]
    },
    {
        "instruction": "",
        "id": "q9069",
        "input": "get index of second largest value python",
        "output": "",
        "rule": [
            "d9069"
        ]
    },
    {
        "instruction": "",
        "id": "q9070",
        "input": "python how to set proxy",
        "output": "",
        "rule": [
            "d9070"
        ]
    },
    {
        "instruction": "",
        "id": "q9071",
        "input": "get item at index in python",
        "output": "",
        "rule": [
            "d9071"
        ]
    },
    {
        "instruction": "",
        "id": "q9072",
        "input": "get keypress out of focus python",
        "output": "",
        "rule": [
            "d9072"
        ]
    },
    {
        "instruction": "",
        "id": "q9073",
        "input": "python how to show training time",
        "output": "",
        "rule": [
            "d9073"
        ]
    },
    {
        "instruction": "",
        "id": "q9074",
        "input": "get keywords from a sentence python",
        "output": "",
        "rule": [
            "d9074"
        ]
    },
    {
        "instruction": "",
        "id": "q9075",
        "input": "python how to simulate android operation",
        "output": "",
        "rule": [
            "d9075"
        ]
    },
    {
        "instruction": "",
        "id": "q9076",
        "input": "get label wise top words python",
        "output": "",
        "rule": [
            "d9076"
        ]
    },
    {
        "instruction": "",
        "id": "q9077",
        "input": "python how to sort a list whithout changing it",
        "output": "",
        "rule": [
            "d9077"
        ]
    },
    {
        "instruction": "",
        "id": "q9078",
        "input": "get last item from queue python",
        "output": "",
        "rule": [
            "d9078"
        ]
    },
    {
        "instruction": "",
        "id": "q9079",
        "input": "python how to stop current thread",
        "output": "",
        "rule": [
            "d9079"
        ]
    },
    {
        "instruction": "",
        "id": "q9080",
        "input": "get length of table sqlite python",
        "output": "",
        "rule": [
            "d9080"
        ]
    },
    {
        "instruction": "",
        "id": "q9081",
        "input": "get list of all values of a series python",
        "output": "",
        "rule": [
            "d9081"
        ]
    },
    {
        "instruction": "",
        "id": "q9082",
        "input": "python how to store numpy array in sql database",
        "output": "",
        "rule": [
            "d9082"
        ]
    },
    {
        "instruction": "",
        "id": "q9083",
        "input": "get list of all youtube api python",
        "output": "",
        "rule": [
            "d9083"
        ]
    },
    {
        "instruction": "",
        "id": "q9084",
        "input": "python how to tell if list is 2d or 3d",
        "output": "",
        "rule": [
            "d9084"
        ]
    },
    {
        "instruction": "",
        "id": "q9085",
        "input": "get list of handlers on logger python",
        "output": "",
        "rule": [
            "d9085"
        ]
    },
    {
        "instruction": "",
        "id": "q9086",
        "input": "python how to upper case first leter",
        "output": "",
        "rule": [
            "d9086"
        ]
    },
    {
        "instruction": "",
        "id": "q9087",
        "input": "get max value in counter python",
        "output": "",
        "rule": [
            "d9087"
        ]
    },
    {
        "instruction": "",
        "id": "q9088",
        "input": "python how to use spines to draw the axes with arrow",
        "output": "",
        "rule": [
            "d9088"
        ]
    },
    {
        "instruction": "",
        "id": "q9089",
        "input": "get microseconds seconds in python from datetime",
        "output": "",
        "rule": [
            "d9089"
        ]
    },
    {
        "instruction": "",
        "id": "q9090",
        "input": "python how to write gzip a file",
        "output": "",
        "rule": [
            "d9090"
        ]
    },
    {
        "instruction": "",
        "id": "q9091",
        "input": "python how to write prompt that asks the user for input if the value doesnt match",
        "output": "",
        "rule": [
            "d9091"
        ]
    },
    {
        "instruction": "",
        "id": "q9092",
        "input": "get nth element of array python",
        "output": "",
        "rule": [
            "d9092"
        ]
    },
    {
        "instruction": "",
        "id": "q9093",
        "input": "python https proxy negotiate",
        "output": "",
        "rule": [
            "d9093"
        ]
    },
    {
        "instruction": "",
        "id": "q9094",
        "input": "get parent of woking directory file path python",
        "output": "",
        "rule": [
            "d9094"
        ]
    },
    {
        "instruction": "",
        "id": "q9095",
        "input": "python hyphen in thrift namespace",
        "output": "",
        "rule": [
            "d9095"
        ]
    },
    {
        "instruction": "",
        "id": "q9096",
        "input": "get previous month python",
        "output": "",
        "rule": [
            "d9096"
        ]
    },
    {
        "instruction": "",
        "id": "q9097",
        "input": "python if a string is hex",
        "output": "",
        "rule": [
            "d9097"
        ]
    },
    {
        "instruction": "",
        "id": "q9098",
        "input": "python if at last element of list iterator",
        "output": "",
        "rule": [
            "d9098"
        ]
    },
    {
        "instruction": "",
        "id": "q9099",
        "input": "get quarter year from date in python",
        "output": "",
        "rule": [
            "d9099"
        ]
    },
    {
        "instruction": "",
        "id": "q9100",
        "input": "python if elemment is in list",
        "output": "",
        "rule": [
            "d9100"
        ]
    },
    {
        "instruction": "",
        "id": "q9101",
        "input": "get rid of nas in python with average variable",
        "output": "",
        "rule": [
            "d9101"
        ]
    },
    {
        "instruction": "",
        "id": "q9102",
        "input": "get seconds past epoch python",
        "output": "",
        "rule": [
            "d9102"
        ]
    },
    {
        "instruction": "",
        "id": "q9103",
        "input": "python if last item in list",
        "output": "",
        "rule": [
            "d9103"
        ]
    },
    {
        "instruction": "",
        "id": "q9104",
        "input": "get size of numpy array python",
        "output": "",
        "rule": [
            "d9104"
        ]
    },
    {
        "instruction": "",
        "id": "q9105",
        "input": "python if traceback then",
        "output": "",
        "rule": [
            "d9105"
        ]
    },
    {
        "instruction": "",
        "id": "q9106",
        "input": "how to know the data type of an object in python",
        "output": "",
        "rule": [
            "d9106"
        ]
    },
    {
        "instruction": "",
        "id": "q9107",
        "input": "python if type is numeric",
        "output": "",
        "rule": [
            "d9107"
        ]
    },
    {
        "instruction": "",
        "id": "q9108",
        "input": "get start and end date of previous quarter in python",
        "output": "",
        "rule": [
            "d9108"
        ]
    },
    {
        "instruction": "",
        "id": "q9109",
        "input": "python if type of date",
        "output": "",
        "rule": [
            "d9109"
        ]
    },
    {
        "instruction": "",
        "id": "q9110",
        "input": "get status code of url using python",
        "output": "",
        "rule": [
            "d9110"
        ]
    },
    {
        "instruction": "",
        "id": "q9111",
        "input": "python if val is a numerical",
        "output": "",
        "rule": [
            "d9111"
        ]
    },
    {
        "instruction": "",
        "id": "q9112",
        "input": "get the columns of database table python",
        "output": "",
        "rule": [
            "d9112"
        ]
    },
    {
        "instruction": "",
        "id": "q9113",
        "input": "python ignoring blank lines in reading a file",
        "output": "",
        "rule": [
            "d9113"
        ]
    },
    {
        "instruction": "",
        "id": "q9114",
        "input": "get the last line of the file python",
        "output": "",
        "rule": [
            "d9114"
        ]
    },
    {
        "instruction": "",
        "id": "q9115",
        "input": "python image crop boundary",
        "output": "",
        "rule": [
            "d9115"
        ]
    },
    {
        "instruction": "",
        "id": "q9116",
        "input": "get the last record in sql python",
        "output": "",
        "rule": [
            "d9116"
        ]
    },
    {
        "instruction": "",
        "id": "q9117",
        "input": "python image crop non rectangular",
        "output": "",
        "rule": [
            "d9117"
        ]
    },
    {
        "instruction": "",
        "id": "q9118",
        "input": "get the type of an value python",
        "output": "",
        "rule": [
            "d9118"
        ]
    },
    {
        "instruction": "",
        "id": "q9119",
        "input": "python image region of interest",
        "output": "",
        "rule": [
            "d9119"
        ]
    },
    {
        "instruction": "",
        "id": "q9120",
        "input": "python get text screen column width",
        "output": "",
        "rule": [
            "d9120"
        ]
    },
    {
        "instruction": "",
        "id": "q9121",
        "input": "get void pointer python",
        "output": "",
        "rule": [
            "d9121"
        ]
    },
    {
        "instruction": "",
        "id": "q9122",
        "input": "python imshow not showing entire picture",
        "output": "",
        "rule": [
            "d9122"
        ]
    },
    {
        "instruction": "",
        "id": "q9123",
        "input": "get window name from pid python",
        "output": "",
        "rule": [
            "d9123"
        ]
    },
    {
        "instruction": "",
        "id": "q9124",
        "input": "python increase text size",
        "output": "",
        "rule": [
            "d9124"
        ]
    },
    {
        "instruction": "",
        "id": "q9125",
        "input": "getall predecessors of a node python",
        "output": "",
        "rule": [
            "d9125"
        ]
    },
    {
        "instruction": "",
        "id": "q9126",
        "input": "python indent block backwards",
        "output": "",
        "rule": [
            "d9126"
        ]
    },
    {
        "instruction": "",
        "id": "q9127",
        "input": "geting unique value from a list in python",
        "output": "",
        "rule": [
            "d9127"
        ]
    },
    {
        "instruction": "",
        "id": "q9128",
        "input": "python index of closest value",
        "output": "",
        "rule": [
            "d9128"
        ]
    },
    {
        "instruction": "",
        "id": "q9129",
        "input": "getsize of hash key python",
        "output": "",
        "rule": [
            "d9129"
        ]
    },
    {
        "instruction": "",
        "id": "q9130",
        "input": "python index range of values",
        "output": "",
        "rule": [
            "d9130"
        ]
    },
    {
        "instruction": "",
        "id": "q9131",
        "input": "github file upload api python",
        "output": "",
        "rule": [
            "d9131"
        ]
    },
    {
        "instruction": "",
        "id": "q9132",
        "input": "python index through lines in a file",
        "output": "",
        "rule": [
            "d9132"
        ]
    },
    {
        "instruction": "",
        "id": "q9133",
        "input": "grab user input asynchronously python",
        "output": "",
        "rule": [
            "d9133"
        ]
    },
    {
        "instruction": "",
        "id": "q9134",
        "input": "python init obj from string",
        "output": "",
        "rule": [
            "d9134"
        ]
    },
    {
        "instruction": "",
        "id": "q9135",
        "input": "python initial heap size set to a larger value than the maximum heap size",
        "output": "",
        "rule": [
            "d9135"
        ]
    },
    {
        "instruction": "",
        "id": "q9136",
        "input": "hamming distance between two strings python",
        "output": "",
        "rule": [
            "d9136"
        ]
    },
    {
        "instruction": "",
        "id": "q9137",
        "input": "python input is blocking",
        "output": "",
        "rule": [
            "d9137"
        ]
    },
    {
        "instruction": "",
        "id": "q9138",
        "input": "hash in python by dict",
        "output": "",
        "rule": [
            "d9138"
        ]
    },
    {
        "instruction": "",
        "id": "q9139",
        "input": "python inspect get functions",
        "output": "",
        "rule": [
            "d9139"
        ]
    },
    {
        "instruction": "",
        "id": "q9140",
        "input": "hash of a tuple python",
        "output": "",
        "rule": [
            "d9140"
        ]
    },
    {
        "instruction": "",
        "id": "q9141",
        "input": "python inspect stack get function name",
        "output": "",
        "rule": [
            "d9141"
        ]
    },
    {
        "instruction": "",
        "id": "q9142",
        "input": "have text in different languages given them one name in python",
        "output": "",
        "rule": [
            "d9142"
        ]
    },
    {
        "instruction": "",
        "id": "q9143",
        "input": "python int and string dtype example",
        "output": "",
        "rule": [
            "d9143"
        ]
    },
    {
        "instruction": "",
        "id": "q9144",
        "input": "hex ascii converter python escaped",
        "output": "",
        "rule": [
            "d9144"
        ]
    },
    {
        "instruction": "",
        "id": "q9145",
        "input": "python int cast with default",
        "output": "",
        "rule": [
            "d9145"
        ]
    },
    {
        "instruction": "",
        "id": "q9146",
        "input": "hierarchical clustering python precomputed distance matrix",
        "output": "",
        "rule": [
            "d9146"
        ]
    },
    {
        "instruction": "",
        "id": "q9147",
        "input": "python int round up or down",
        "output": "",
        "rule": [
            "d9147"
        ]
    },
    {
        "instruction": "",
        "id": "q9148",
        "input": "hot to get a file's size in python",
        "output": "",
        "rule": [
            "d9148"
        ]
    },
    {
        "instruction": "",
        "id": "q9149",
        "input": "python intersection of lines slope intercept",
        "output": "",
        "rule": [
            "d9149"
        ]
    },
    {
        "instruction": "",
        "id": "q9150",
        "input": "hot to input complex numbers in python",
        "output": "",
        "rule": [
            "d9150"
        ]
    },
    {
        "instruction": "",
        "id": "q9151",
        "input": "python ipaddress expand v6",
        "output": "",
        "rule": [
            "d9151"
        ]
    },
    {
        "instruction": "",
        "id": "q9152",
        "input": "how can i make python create a file",
        "output": "",
        "rule": [
            "d9152"
        ]
    },
    {
        "instruction": "",
        "id": "q9153",
        "input": "python is a value an int or str",
        "output": "",
        "rule": [
            "d9153"
        ]
    },
    {
        "instruction": "",
        "id": "q9154",
        "input": "how can we get current month end date in python",
        "output": "",
        "rule": [
            "d9154"
        ]
    },
    {
        "instruction": "",
        "id": "q9155",
        "input": "python is not none list",
        "output": "",
        "rule": [
            "d9155"
        ]
    },
    {
        "instruction": "",
        "id": "q9156",
        "input": "how can you check if python is in path",
        "output": "",
        "rule": [
            "d9156"
        ]
    },
    {
        "instruction": "",
        "id": "q9157",
        "input": "how do i access an element of an array that is itself an array inpython",
        "output": "",
        "rule": [
            "d9157"
        ]
    },
    {
        "instruction": "",
        "id": "q9158",
        "input": "python is stdin a tty",
        "output": "",
        "rule": [
            "d9158"
        ]
    },
    {
        "instruction": "",
        "id": "q9159",
        "input": "how do i format a number to two decimals in python",
        "output": "",
        "rule": [
            "d9159"
        ]
    },
    {
        "instruction": "",
        "id": "q9160",
        "input": "python items in alist that are not in the other",
        "output": "",
        "rule": [
            "d9160"
        ]
    },
    {
        "instruction": "",
        "id": "q9161",
        "input": "how do i right justify my python list output",
        "output": "",
        "rule": [
            "d9161"
        ]
    },
    {
        "instruction": "",
        "id": "q9162",
        "input": "python iterate function call",
        "output": "",
        "rule": [
            "d9162"
        ]
    },
    {
        "instruction": "",
        "id": "q9163",
        "input": "how do i slice a list in python in constant itme",
        "output": "",
        "rule": [
            "d9163"
        ]
    },
    {
        "instruction": "",
        "id": "q9164",
        "input": "how do i turn a python script into a callable function",
        "output": "",
        "rule": [
            "d9164"
        ]
    },
    {
        "instruction": "",
        "id": "q9165",
        "input": "python iterating in reverse order",
        "output": "",
        "rule": [
            "d9165"
        ]
    },
    {
        "instruction": "",
        "id": "q9166",
        "input": "how do you average the contents of a list in python",
        "output": "",
        "rule": [
            "d9166"
        ]
    },
    {
        "instruction": "",
        "id": "q9167",
        "input": "python iterator get position",
        "output": "",
        "rule": [
            "d9167"
        ]
    },
    {
        "instruction": "",
        "id": "q9168",
        "input": "how do you load numpy in python",
        "output": "",
        "rule": [
            "d9168"
        ]
    },
    {
        "instruction": "",
        "id": "q9169",
        "input": "python iterator skip file",
        "output": "",
        "rule": [
            "d9169"
        ]
    },
    {
        "instruction": "",
        "id": "q9170",
        "input": "how do you make a horizontal line in python",
        "output": "",
        "rule": [
            "d9170"
        ]
    },
    {
        "instruction": "",
        "id": "q9171",
        "input": "python iterator through a file",
        "output": "",
        "rule": [
            "d9171"
        ]
    },
    {
        "instruction": "",
        "id": "q9172",
        "input": "how do you remove duplicate entries in a list in python",
        "output": "",
        "rule": [
            "d9172"
        ]
    },
    {
        "instruction": "",
        "id": "q9173",
        "input": "python java stream equivalent",
        "output": "",
        "rule": [
            "d9173"
        ]
    },
    {
        "instruction": "",
        "id": "q9174",
        "input": "python join two df and dont duplicate columns",
        "output": "",
        "rule": [
            "d9174"
        ]
    },
    {
        "instruction": "",
        "id": "q9175",
        "input": "how set proxy for python",
        "output": "",
        "rule": [
            "d9175"
        ]
    },
    {
        "instruction": "",
        "id": "q9176",
        "input": "python json dump order",
        "output": "",
        "rule": [
            "d9176"
        ]
    },
    {
        "instruction": "",
        "id": "q9177",
        "input": "how similar is java to python",
        "output": "",
        "rule": [
            "d9177"
        ]
    },
    {
        "instruction": "",
        "id": "q9178",
        "input": "python json load from file check file empty",
        "output": "",
        "rule": [
            "d9178"
        ]
    },
    {
        "instruction": "",
        "id": "q9179",
        "input": "how to 303 redirect python",
        "output": "",
        "rule": [
            "d9179"
        ]
    },
    {
        "instruction": "",
        "id": "q9180",
        "input": "python json timestamp to int",
        "output": "",
        "rule": [
            "d9180"
        ]
    },
    {
        "instruction": "",
        "id": "q9181",
        "input": "how to [rint without a new line python",
        "output": "",
        "rule": [
            "d9181"
        ]
    },
    {
        "instruction": "",
        "id": "q9182",
        "input": "python judge file have exe permission",
        "output": "",
        "rule": [
            "d9182"
        ]
    },
    {
        "instruction": "",
        "id": "q9183",
        "input": "how to access 2 last row of a list in python",
        "output": "",
        "rule": [
            "d9183"
        ]
    },
    {
        "instruction": "",
        "id": "q9184",
        "input": "python keras model save",
        "output": "",
        "rule": [
            "d9184"
        ]
    },
    {
        "instruction": "",
        "id": "q9185",
        "input": "how to access all fields of structure in python",
        "output": "",
        "rule": [
            "d9185"
        ]
    },
    {
        "instruction": "",
        "id": "q9186",
        "input": "python kwargs with default value",
        "output": "",
        "rule": [
            "d9186"
        ]
    },
    {
        "instruction": "",
        "id": "q9187",
        "input": "how to access bound method python",
        "output": "",
        "rule": [
            "d9187"
        ]
    },
    {
        "instruction": "",
        "id": "q9188",
        "input": "python l2 norm array",
        "output": "",
        "rule": [
            "d9188"
        ]
    },
    {
        "instruction": "",
        "id": "q9189",
        "input": "how to acssess min using lambada in python",
        "output": "",
        "rule": [
            "d9189"
        ]
    },
    {
        "instruction": "",
        "id": "q9190",
        "input": "python l2 norm of array",
        "output": "",
        "rule": [
            "d9190"
        ]
    },
    {
        "instruction": "",
        "id": "q9191",
        "input": "how to add a prefix to a list of strings in python",
        "output": "",
        "rule": [
            "d9191"
        ]
    },
    {
        "instruction": "",
        "id": "q9192",
        "input": "python lambda function with variable args",
        "output": "",
        "rule": [
            "d9192"
        ]
    },
    {
        "instruction": "",
        "id": "q9193",
        "input": "how to add a string to a filename in python",
        "output": "",
        "rule": [
            "d9193"
        ]
    },
    {
        "instruction": "",
        "id": "q9194",
        "input": "python lambda sort returns none",
        "output": "",
        "rule": [
            "d9194"
        ]
    },
    {
        "instruction": "",
        "id": "q9195",
        "input": "how to add entity in datastore python",
        "output": "",
        "rule": [
            "d9195"
        ]
    },
    {
        "instruction": "",
        "id": "q9196",
        "input": "python lambda syntax example",
        "output": "",
        "rule": [
            "d9196"
        ]
    },
    {
        "instruction": "",
        "id": "q9197",
        "input": "how to add last update in python",
        "output": "",
        "rule": [
            "d9197"
        ]
    },
    {
        "instruction": "",
        "id": "q9198",
        "input": "python length of a table",
        "output": "",
        "rule": [
            "d9198"
        ]
    },
    {
        "instruction": "",
        "id": "q9199",
        "input": "how to add two matrix in python",
        "output": "",
        "rule": [
            "d9199"
        ]
    },
    {
        "instruction": "",
        "id": "q9200",
        "input": "python levenshtein distance performance",
        "output": "",
        "rule": [
            "d9200"
        ]
    },
    {
        "instruction": "",
        "id": "q9201",
        "input": "how to avoid python auto spacing",
        "output": "",
        "rule": [
            "d9201"
        ]
    },
    {
        "instruction": "",
        "id": "q9202",
        "input": "python limit decimals for created variable",
        "output": "",
        "rule": [
            "d9202"
        ]
    },
    {
        "instruction": "",
        "id": "q9203",
        "input": "how to bin data for histogram python",
        "output": "",
        "rule": [
            "d9203"
        ]
    },
    {
        "instruction": "",
        "id": "q9204",
        "input": "python list behaving as array",
        "output": "",
        "rule": [
            "d9204"
        ]
    },
    {
        "instruction": "",
        "id": "q9205",
        "input": "how to build a graph from a wighted adjacency matrix in python",
        "output": "",
        "rule": [
            "d9205"
        ]
    },
    {
        "instruction": "",
        "id": "q9206",
        "input": "python list not duplicate",
        "output": "",
        "rule": [
            "d9206"
        ]
    },
    {
        "instruction": "",
        "id": "q9207",
        "input": "how to calculate distance between two points on python 3",
        "output": "",
        "rule": [
            "d9207"
        ]
    },
    {
        "instruction": "",
        "id": "q9208",
        "input": "python list of a size instantiate",
        "output": "",
        "rule": [
            "d9208"
        ]
    },
    {
        "instruction": "",
        "id": "q9209",
        "input": "how to call a float object in python",
        "output": "",
        "rule": [
            "d9209"
        ]
    },
    {
        "instruction": "",
        "id": "q9210",
        "input": "python list of indices of a matrix",
        "output": "",
        "rule": [
            "d9210"
        ]
    },
    {
        "instruction": "",
        "id": "q9211",
        "input": "how to call a list element into a string python",
        "output": "",
        "rule": [
            "d9211"
        ]
    },
    {
        "instruction": "",
        "id": "q9212",
        "input": "python list of lists to tab delimited",
        "output": "",
        "rule": [
            "d9212"
        ]
    },
    {
        "instruction": "",
        "id": "q9213",
        "input": "how to call a python virtual env using shebang",
        "output": "",
        "rule": [
            "d9213"
        ]
    },
    {
        "instruction": "",
        "id": "q9214",
        "input": "python list select top and bottom",
        "output": "",
        "rule": [
            "d9214"
        ]
    },
    {
        "instruction": "",
        "id": "q9215",
        "input": "how to call help for method in python",
        "output": "",
        "rule": [
            "d9215"
        ]
    },
    {
        "instruction": "",
        "id": "q9216",
        "input": "python list the nearest",
        "output": "",
        "rule": [
            "d9216"
        ]
    },
    {
        "instruction": "",
        "id": "q9217",
        "input": "how to cast a nontype to int in python",
        "output": "",
        "rule": [
            "d9217"
        ]
    },
    {
        "instruction": "",
        "id": "q9218",
        "input": "python list to dict with list of keys",
        "output": "",
        "rule": [
            "d9218"
        ]
    },
    {
        "instruction": "",
        "id": "q9219",
        "input": "how to cast a string to int python",
        "output": "",
        "rule": [
            "d9219"
        ]
    },
    {
        "instruction": "",
        "id": "q9220",
        "input": "python list to ordered dictionary",
        "output": "",
        "rule": [
            "d9220"
        ]
    },
    {
        "instruction": "",
        "id": "q9221",
        "input": "how to change a screen pixel in python",
        "output": "",
        "rule": [
            "d9221"
        ]
    },
    {
        "instruction": "",
        "id": "q9222",
        "input": "python list to string comma delimited",
        "output": "",
        "rule": [
            "d9222"
        ]
    },
    {
        "instruction": "",
        "id": "q9223",
        "input": "how to change a variable from a string to a number in python",
        "output": "",
        "rule": [
            "d9223"
        ]
    },
    {
        "instruction": "",
        "id": "q9224",
        "input": "python listing all enum values",
        "output": "",
        "rule": [
            "d9224"
        ]
    },
    {
        "instruction": "",
        "id": "q9225",
        "input": "how to change aspect ratio of image with python",
        "output": "",
        "rule": [
            "d9225"
        ]
    },
    {
        "instruction": "",
        "id": "q9226",
        "input": "python listing sqlite tables",
        "output": "",
        "rule": [
            "d9226"
        ]
    },
    {
        "instruction": "",
        "id": "q9227",
        "input": "how to change case in a python char",
        "output": "",
        "rule": [
            "d9227"
        ]
    },
    {
        "instruction": "",
        "id": "q9228",
        "input": "python load image into tensorflow",
        "output": "",
        "rule": [
            "d9228"
        ]
    },
    {
        "instruction": "",
        "id": "q9229",
        "input": "how to change code color in python",
        "output": "",
        "rule": [
            "d9229"
        ]
    },
    {
        "instruction": "",
        "id": "q9230",
        "input": "python load object from text file",
        "output": "",
        "rule": [
            "d9230"
        ]
    },
    {
        "instruction": "",
        "id": "q9231",
        "input": "how to change column values with boolean values in python",
        "output": "",
        "rule": [
            "d9231"
        ]
    },
    {
        "instruction": "",
        "id": "q9232",
        "input": "python log base somthing else",
        "output": "",
        "rule": [
            "d9232"
        ]
    },
    {
        "instruction": "",
        "id": "q9233",
        "input": "how to change data type to int in python",
        "output": "",
        "rule": [
            "d9233"
        ]
    },
    {
        "instruction": "",
        "id": "q9234",
        "input": "python logger is enabled for",
        "output": "",
        "rule": [
            "d9234"
        ]
    },
    {
        "instruction": "",
        "id": "q9235",
        "input": "how to change file extension in python",
        "output": "",
        "rule": [
            "d9235"
        ]
    },
    {
        "instruction": "",
        "id": "q9236",
        "input": "python logging format without newline",
        "output": "",
        "rule": [
            "d9236"
        ]
    },
    {
        "instruction": "",
        "id": "q9237",
        "input": "how to change from float64 to float32 python",
        "output": "",
        "rule": [
            "d9237"
        ]
    },
    {
        "instruction": "",
        "id": "q9238",
        "input": "how to change isexecutable in linux python",
        "output": "",
        "rule": [
            "d9238"
        ]
    },
    {
        "instruction": "",
        "id": "q9239",
        "input": "python loop through self attributes",
        "output": "",
        "rule": [
            "d9239"
        ]
    },
    {
        "instruction": "",
        "id": "q9240",
        "input": "how to change the f pointer in a file in python",
        "output": "",
        "rule": [
            "d9240"
        ]
    },
    {
        "instruction": "",
        "id": "q9241",
        "input": "python lower case command",
        "output": "",
        "rule": [
            "d9241"
        ]
    },
    {
        "instruction": "",
        "id": "q9242",
        "input": "how to change the letter case in python",
        "output": "",
        "rule": [
            "d9242"
        ]
    },
    {
        "instruction": "",
        "id": "q9243",
        "input": "python lxml get node text",
        "output": "",
        "rule": [
            "d9243"
        ]
    },
    {
        "instruction": "",
        "id": "q9244",
        "input": "how to check all elements are same in list python",
        "output": "",
        "rule": [
            "d9244"
        ]
    },
    {
        "instruction": "",
        "id": "q9245",
        "input": "python mac clipboard contents",
        "output": "",
        "rule": [
            "d9245"
        ]
    },
    {
        "instruction": "",
        "id": "q9246",
        "input": "how to check data type of a variable in python",
        "output": "",
        "rule": [
            "d9246"
        ]
    },
    {
        "instruction": "",
        "id": "q9247",
        "input": "python mainwindow close event",
        "output": "",
        "rule": [
            "d9247"
        ]
    },
    {
        "instruction": "",
        "id": "q9248",
        "input": "how to check for a symbol in a string python",
        "output": "",
        "rule": [
            "d9248"
        ]
    },
    {
        "instruction": "",
        "id": "q9249",
        "input": "python make a cumulative sum of a list",
        "output": "",
        "rule": [
            "d9249"
        ]
    },
    {
        "instruction": "",
        "id": "q9250",
        "input": "python make a dict immutable",
        "output": "",
        "rule": [
            "d9250"
        ]
    },
    {
        "instruction": "",
        "id": "q9251",
        "input": "how to check if a file does not exist in python",
        "output": "",
        "rule": [
            "d9251"
        ]
    },
    {
        "instruction": "",
        "id": "q9252",
        "input": "python make a list from comma separated string",
        "output": "",
        "rule": [
            "d9252"
        ]
    },
    {
        "instruction": "",
        "id": "q9253",
        "input": "how to check if a json property exists in python",
        "output": "",
        "rule": [
            "d9253"
        ]
    },
    {
        "instruction": "",
        "id": "q9254",
        "input": "python make a list into dict",
        "output": "",
        "rule": [
            "d9254"
        ]
    },
    {
        "instruction": "",
        "id": "q9255",
        "input": "how to check if a string is present in a file if present replace else write to file in python",
        "output": "",
        "rule": [
            "d9255"
        ]
    },
    {
        "instruction": "",
        "id": "q9256",
        "input": "python make all the elements in a list none",
        "output": "",
        "rule": [
            "d9256"
        ]
    },
    {
        "instruction": "",
        "id": "q9257",
        "input": "how to check if a tree is a bst in python",
        "output": "",
        "rule": [
            "d9257"
        ]
    },
    {
        "instruction": "",
        "id": "q9258",
        "input": "python make boject from string",
        "output": "",
        "rule": [
            "d9258"
        ]
    },
    {
        "instruction": "",
        "id": "q9259",
        "input": "how to check if a variable is iterable python",
        "output": "",
        "rule": [
            "d9259"
        ]
    },
    {
        "instruction": "",
        "id": "q9260",
        "input": "python make clear interfaces",
        "output": "",
        "rule": [
            "d9260"
        ]
    },
    {
        "instruction": "",
        "id": "q9261",
        "input": "how to check if arguemnts are empty in python",
        "output": "",
        "rule": [
            "d9261"
        ]
    },
    {
        "instruction": "",
        "id": "q9262",
        "input": "python make function iterable",
        "output": "",
        "rule": [
            "d9262"
        ]
    },
    {
        "instruction": "",
        "id": "q9263",
        "input": "how to check if defined python",
        "output": "",
        "rule": [
            "d9263"
        ]
    },
    {
        "instruction": "",
        "id": "q9264",
        "input": "python make points iterable",
        "output": "",
        "rule": [
            "d9264"
        ]
    },
    {
        "instruction": "",
        "id": "q9265",
        "input": "python make string html safe",
        "output": "",
        "rule": [
            "d9265"
        ]
    },
    {
        "instruction": "",
        "id": "q9266",
        "input": "how to check if input was read python",
        "output": "",
        "rule": [
            "d9266"
        ]
    },
    {
        "instruction": "",
        "id": "q9267",
        "input": "how to check if python code is running",
        "output": "",
        "rule": [
            "d9267"
        ]
    },
    {
        "instruction": "",
        "id": "q9268",
        "input": "python make uuid filename",
        "output": "",
        "rule": [
            "d9268"
        ]
    },
    {
        "instruction": "",
        "id": "q9269",
        "input": "how to check if the pos tag is noun of a word python",
        "output": "",
        "rule": [
            "d9269"
        ]
    },
    {
        "instruction": "",
        "id": "q9270",
        "input": "python making an array into a float",
        "output": "",
        "rule": [
            "d9270"
        ]
    },
    {
        "instruction": "",
        "id": "q9271",
        "input": "how to check if you've reached end of file in python",
        "output": "",
        "rule": [
            "d9271"
        ]
    },
    {
        "instruction": "",
        "id": "q9272",
        "input": "how to check in python with slenium locator is created or not",
        "output": "",
        "rule": [
            "d9272"
        ]
    },
    {
        "instruction": "",
        "id": "q9273",
        "input": "python map change on click",
        "output": "",
        "rule": [
            "d9273"
        ]
    },
    {
        "instruction": "",
        "id": "q9274",
        "input": "how to check internet connection in python",
        "output": "",
        "rule": [
            "d9274"
        ]
    },
    {
        "instruction": "",
        "id": "q9275",
        "input": "python masked array copy",
        "output": "",
        "rule": [
            "d9275"
        ]
    },
    {
        "instruction": "",
        "id": "q9276",
        "input": "how to check method obj in python",
        "output": "",
        "rule": [
            "d9276"
        ]
    },
    {
        "instruction": "",
        "id": "q9277",
        "input": "python match any case",
        "output": "",
        "rule": [
            "d9277"
        ]
    },
    {
        "instruction": "",
        "id": "q9278",
        "input": "how to check the current time in python",
        "output": "",
        "rule": [
            "d9278"
        ]
    },
    {
        "instruction": "",
        "id": "q9279",
        "input": "python math normalize vector",
        "output": "",
        "rule": [
            "d9279"
        ]
    },
    {
        "instruction": "",
        "id": "q9280",
        "input": "how to check the data type of columns in python",
        "output": "",
        "rule": [
            "d9280"
        ]
    },
    {
        "instruction": "",
        "id": "q9281",
        "input": "python matplotlib add title to subplots",
        "output": "",
        "rule": [
            "d9281"
        ]
    },
    {
        "instruction": "",
        "id": "q9282",
        "input": "how to check the data type of variable in python",
        "output": "",
        "rule": [
            "d9282"
        ]
    },
    {
        "instruction": "",
        "id": "q9283",
        "input": "python matplotlib axes set visable",
        "output": "",
        "rule": [
            "d9283"
        ]
    },
    {
        "instruction": "",
        "id": "q9284",
        "input": "how to check what libraries for python",
        "output": "",
        "rule": [
            "d9284"
        ]
    },
    {
        "instruction": "",
        "id": "q9285",
        "input": "python matplotlib axis clear",
        "output": "",
        "rule": [
            "d9285"
        ]
    },
    {
        "instruction": "",
        "id": "q9286",
        "input": "how to check whether a list of boolean are all true in python",
        "output": "",
        "rule": [
            "d9286"
        ]
    },
    {
        "instruction": "",
        "id": "q9287",
        "input": "python matplotlib get height of each bar",
        "output": "",
        "rule": [
            "d9287"
        ]
    },
    {
        "instruction": "",
        "id": "q9288",
        "input": "how to check whether an item is a directory in python",
        "output": "",
        "rule": [
            "d9288"
        ]
    },
    {
        "instruction": "",
        "id": "q9289",
        "input": "python matplotlib subplot add text",
        "output": "",
        "rule": [
            "d9289"
        ]
    },
    {
        "instruction": "",
        "id": "q9290",
        "input": "how to choose a random position in an array in python",
        "output": "",
        "rule": [
            "d9290"
        ]
    },
    {
        "instruction": "",
        "id": "q9291",
        "input": "python matrix normalize each column",
        "output": "",
        "rule": [
            "d9291"
        ]
    },
    {
        "instruction": "",
        "id": "q9292",
        "input": "how to clear an entry in python",
        "output": "",
        "rule": [
            "d9292"
        ]
    },
    {
        "instruction": "",
        "id": "q9293",
        "input": "python max int from range",
        "output": "",
        "rule": [
            "d9293"
        ]
    },
    {
        "instruction": "",
        "id": "q9294",
        "input": "how to clear an objecting python",
        "output": "",
        "rule": [
            "d9294"
        ]
    },
    {
        "instruction": "",
        "id": "q9295",
        "input": "python md5 a file",
        "output": "",
        "rule": [
            "d9295"
        ]
    },
    {
        "instruction": "",
        "id": "q9296",
        "input": "how to clear directory using python",
        "output": "",
        "rule": [
            "d9296"
        ]
    },
    {
        "instruction": "",
        "id": "q9297",
        "input": "python memory contents at ctypes address",
        "output": "",
        "rule": [
            "d9297"
        ]
    },
    {
        "instruction": "",
        "id": "q9298",
        "input": "how to clear log file python",
        "output": "",
        "rule": [
            "d9298"
        ]
    },
    {
        "instruction": "",
        "id": "q9299",
        "input": "python min array value of multiple values",
        "output": "",
        "rule": [
            "d9299"
        ]
    },
    {
        "instruction": "",
        "id": "q9300",
        "input": "how to clear the shell in python",
        "output": "",
        "rule": [
            "d9300"
        ]
    },
    {
        "instruction": "",
        "id": "q9301",
        "input": "python minidom get value of a tag",
        "output": "",
        "rule": [
            "d9301"
        ]
    },
    {
        "instruction": "",
        "id": "q9302",
        "input": "how to close figure windows opened in a loop in python",
        "output": "",
        "rule": [
            "d9302"
        ]
    },
    {
        "instruction": "",
        "id": "q9303",
        "input": "python mock how to patch property of an object and set value",
        "output": "",
        "rule": [
            "d9303"
        ]
    },
    {
        "instruction": "",
        "id": "q9304",
        "input": "how to close the serial port in python",
        "output": "",
        "rule": [
            "d9304"
        ]
    },
    {
        "instruction": "",
        "id": "q9305",
        "input": "how to close threads in python",
        "output": "",
        "rule": [
            "d9305"
        ]
    },
    {
        "instruction": "",
        "id": "q9306",
        "input": "python mock post request",
        "output": "",
        "rule": [
            "d9306"
        ]
    },
    {
        "instruction": "",
        "id": "q9307",
        "input": "how to combine value with a pair keys in array python",
        "output": "",
        "rule": [
            "d9307"
        ]
    },
    {
        "instruction": "",
        "id": "q9308",
        "input": "python modify global variable with functions",
        "output": "",
        "rule": [
            "d9308"
        ]
    },
    {
        "instruction": "",
        "id": "q9309",
        "input": "how to compare several strings at one time python",
        "output": "",
        "rule": [
            "d9309"
        ]
    },
    {
        "instruction": "",
        "id": "q9310",
        "input": "python mongodb object from json",
        "output": "",
        "rule": [
            "d9310"
        ]
    },
    {
        "instruction": "",
        "id": "q9311",
        "input": "how to control number of iterations in ref python",
        "output": "",
        "rule": [
            "d9311"
        ]
    },
    {
        "instruction": "",
        "id": "q9312",
        "input": "python most beautiful string in the world",
        "output": "",
        "rule": [
            "d9312"
        ]
    },
    {
        "instruction": "",
        "id": "q9313",
        "input": "how to count the number of times a function is called in python",
        "output": "",
        "rule": [
            "d9313"
        ]
    },
    {
        "instruction": "",
        "id": "q9314",
        "input": "python most common value found in a list",
        "output": "",
        "rule": [
            "d9314"
        ]
    },
    {
        "instruction": "",
        "id": "q9315",
        "input": "python move to next iteration of loop without executing",
        "output": "",
        "rule": [
            "d9315"
        ]
    },
    {
        "instruction": "",
        "id": "q9316",
        "input": "how to create 3*2 matrix in python",
        "output": "",
        "rule": [
            "d9316"
        ]
    },
    {
        "instruction": "",
        "id": "q9317",
        "input": "python multi bracket match",
        "output": "",
        "rule": [
            "d9317"
        ]
    },
    {
        "instruction": "",
        "id": "q9318",
        "input": "how to create a 2d array from 1d array using ndarray in python",
        "output": "",
        "rule": [
            "d9318"
        ]
    },
    {
        "instruction": "",
        "id": "q9319",
        "input": "python multiple arguent lambd",
        "output": "",
        "rule": [
            "d9319"
        ]
    },
    {
        "instruction": "",
        "id": "q9320",
        "input": "how to create a dynamic dictionary with same keyword in python",
        "output": "",
        "rule": [
            "d9320"
        ]
    },
    {
        "instruction": "",
        "id": "q9321",
        "input": "python multiple if conditions multiline",
        "output": "",
        "rule": [
            "d9321"
        ]
    },
    {
        "instruction": "",
        "id": "q9322",
        "input": "how to create a function to return to main menu in python",
        "output": "",
        "rule": [
            "d9322"
        ]
    },
    {
        "instruction": "",
        "id": "q9323",
        "input": "python multiple iterators one loop",
        "output": "",
        "rule": [
            "d9323"
        ]
    },
    {
        "instruction": "",
        "id": "q9324",
        "input": "how to create a json string in python",
        "output": "",
        "rule": [
            "d9324"
        ]
    },
    {
        "instruction": "",
        "id": "q9325",
        "input": "python multiple returns from a function",
        "output": "",
        "rule": [
            "d9325"
        ]
    },
    {
        "instruction": "",
        "id": "q9326",
        "input": "how to create a max heap python",
        "output": "",
        "rule": [
            "d9326"
        ]
    },
    {
        "instruction": "",
        "id": "q9327",
        "input": "python multiprocessing + process exit",
        "output": "",
        "rule": [
            "d9327"
        ]
    },
    {
        "instruction": "",
        "id": "q9328",
        "input": "how to create a zoom out button in tkinter python",
        "output": "",
        "rule": [
            "d9328"
        ]
    },
    {
        "instruction": "",
        "id": "q9329",
        "input": "python multiprocessing consumer producer",
        "output": "",
        "rule": [
            "d9329"
        ]
    },
    {
        "instruction": "",
        "id": "q9330",
        "input": "how to create an identifier python",
        "output": "",
        "rule": [
            "d9330"
        ]
    },
    {
        "instruction": "",
        "id": "q9331",
        "input": "python multiprocessing pool how to get the return variable",
        "output": "",
        "rule": [
            "d9331"
        ]
    },
    {
        "instruction": "",
        "id": "q9332",
        "input": "how to create distance matrix in python",
        "output": "",
        "rule": [
            "d9332"
        ]
    },
    {
        "instruction": "",
        "id": "q9333",
        "input": "python multiprocessing pool lock manager",
        "output": "",
        "rule": [
            "d9333"
        ]
    },
    {
        "instruction": "",
        "id": "q9334",
        "input": "how to create empty numpy array of single list in python",
        "output": "",
        "rule": [
            "d9334"
        ]
    },
    {
        "instruction": "",
        "id": "q9335",
        "input": "python multiprocessing queue stop",
        "output": "",
        "rule": [
            "d9335"
        ]
    },
    {
        "instruction": "",
        "id": "q9336",
        "input": "how to create length without using length in python",
        "output": "",
        "rule": [
            "d9336"
        ]
    },
    {
        "instruction": "",
        "id": "q9337",
        "input": "python mysql connect not working",
        "output": "",
        "rule": [
            "d9337"
        ]
    },
    {
        "instruction": "",
        "id": "q9338",
        "input": "how to create progress bar in text widget python",
        "output": "",
        "rule": [
            "d9338"
        ]
    },
    {
        "instruction": "",
        "id": "q9339",
        "input": "python mysql connection retry",
        "output": "",
        "rule": [
            "d9339"
        ]
    },
    {
        "instruction": "",
        "id": "q9340",
        "input": "how to create python api doc similar to javadoc",
        "output": "",
        "rule": [
            "d9340"
        ]
    },
    {
        "instruction": "",
        "id": "q9341",
        "input": "python nametuple to dict",
        "output": "",
        "rule": [
            "d9341"
        ]
    },
    {
        "instruction": "",
        "id": "q9342",
        "input": "how to default a value in python 3 dictionary",
        "output": "",
        "rule": [
            "d9342"
        ]
    },
    {
        "instruction": "",
        "id": "q9343",
        "input": "python ndarray boolean index",
        "output": "",
        "rule": [
            "d9343"
        ]
    },
    {
        "instruction": "",
        "id": "q9344",
        "input": "how to define an array of undefined size in python",
        "output": "",
        "rule": [
            "d9344"
        ]
    },
    {
        "instruction": "",
        "id": "q9345",
        "input": "python ndarray get the first column",
        "output": "",
        "rule": [
            "d9345"
        ]
    },
    {
        "instruction": "",
        "id": "q9346",
        "input": "how to define percentage in python",
        "output": "",
        "rule": [
            "d9346"
        ]
    },
    {
        "instruction": "",
        "id": "q9347",
        "input": "python nested dot notation for dictionary",
        "output": "",
        "rule": [
            "d9347"
        ]
    },
    {
        "instruction": "",
        "id": "q9348",
        "input": "how to define the rbg color value in python",
        "output": "",
        "rule": [
            "d9348"
        ]
    },
    {
        "instruction": "",
        "id": "q9349",
        "input": "python nodejs base64 decode get diffrence result",
        "output": "",
        "rule": [
            "d9349"
        ]
    },
    {
        "instruction": "",
        "id": "q9350",
        "input": "how to delete an image from an image in python",
        "output": "",
        "rule": [
            "d9350"
        ]
    },
    {
        "instruction": "",
        "id": "q9351",
        "input": "python nonetype change to string",
        "output": "",
        "rule": [
            "d9351"
        ]
    },
    {
        "instruction": "",
        "id": "q9352",
        "input": "how to delete previous line on python",
        "output": "",
        "rule": [
            "d9352"
        ]
    },
    {
        "instruction": "",
        "id": "q9353",
        "input": "python normal distribution dense function",
        "output": "",
        "rule": [
            "d9353"
        ]
    },
    {
        "instruction": "",
        "id": "q9354",
        "input": "how to describe objects in python shell",
        "output": "",
        "rule": [
            "d9354"
        ]
    },
    {
        "instruction": "",
        "id": "q9355",
        "input": "python normal distribution density",
        "output": "",
        "rule": [
            "d9355"
        ]
    },
    {
        "instruction": "",
        "id": "q9356",
        "input": "how to detect mouse click in the graphic window in python",
        "output": "",
        "rule": [
            "d9356"
        ]
    },
    {
        "instruction": "",
        "id": "q9357",
        "input": "python normalize grayscale image 0 to 1",
        "output": "",
        "rule": [
            "d9357"
        ]
    },
    {
        "instruction": "",
        "id": "q9358",
        "input": "how to detect names regular expression python",
        "output": "",
        "rule": [
            "d9358"
        ]
    },
    {
        "instruction": "",
        "id": "q9359",
        "input": "python normalize grayscale image to 0 255",
        "output": "",
        "rule": [
            "d9359"
        ]
    },
    {
        "instruction": "",
        "id": "q9360",
        "input": "how to detect what key someone presses in python",
        "output": "",
        "rule": [
            "d9360"
        ]
    },
    {
        "instruction": "",
        "id": "q9361",
        "input": "python normalize text string",
        "output": "",
        "rule": [
            "d9361"
        ]
    },
    {
        "instruction": "",
        "id": "q9362",
        "input": "how to determine if a value is a string python",
        "output": "",
        "rule": [
            "d9362"
        ]
    },
    {
        "instruction": "",
        "id": "q9363",
        "input": "python not eqaul to",
        "output": "",
        "rule": [
            "d9363"
        ]
    },
    {
        "instruction": "",
        "id": "q9364",
        "input": "how to determine if every list entry contains cat in python",
        "output": "",
        "rule": [
            "d9364"
        ]
    },
    {
        "instruction": "",
        "id": "q9365",
        "input": "python not running in interactive mode",
        "output": "",
        "rule": [
            "d9365"
        ]
    },
    {
        "instruction": "",
        "id": "q9366",
        "input": "how to determine whether a list is descending in python",
        "output": "",
        "rule": [
            "d9366"
        ]
    },
    {
        "instruction": "",
        "id": "q9367",
        "input": "python np last points in an array",
        "output": "",
        "rule": [
            "d9367"
        ]
    },
    {
        "instruction": "",
        "id": "q9368",
        "input": "how to discretize columns in equal sized bins python",
        "output": "",
        "rule": [
            "d9368"
        ]
    },
    {
        "instruction": "",
        "id": "q9369",
        "input": "python numpy arrary max along axis",
        "output": "",
        "rule": [
            "d9369"
        ]
    },
    {
        "instruction": "",
        "id": "q9370",
        "input": "how to display calculation as percent python",
        "output": "",
        "rule": [
            "d9370"
        ]
    },
    {
        "instruction": "",
        "id": "q9371",
        "input": "python numpy gaussian fit",
        "output": "",
        "rule": [
            "d9371"
        ]
    },
    {
        "instruction": "",
        "id": "q9372",
        "input": "how to do a factorial with loops python",
        "output": "",
        "rule": [
            "d9372"
        ]
    },
    {
        "instruction": "",
        "id": "q9373",
        "input": "python numpy matrix distance between",
        "output": "",
        "rule": [
            "d9373"
        ]
    },
    {
        "instruction": "",
        "id": "q9374",
        "input": "how to do a set width of string in python",
        "output": "",
        "rule": [
            "d9374"
        ]
    },
    {
        "instruction": "",
        "id": "q9375",
        "input": "python numpy parse binary file",
        "output": "",
        "rule": [
            "d9375"
        ]
    },
    {
        "instruction": "",
        "id": "q9376",
        "input": "how to do an inverse matrix in python sympy",
        "output": "",
        "rule": [
            "d9376"
        ]
    },
    {
        "instruction": "",
        "id": "q9377",
        "input": "python numpy read binary array from file",
        "output": "",
        "rule": [
            "d9377"
        ]
    },
    {
        "instruction": "",
        "id": "q9378",
        "input": "how to do garbage collection in python",
        "output": "",
        "rule": [
            "d9378"
        ]
    },
    {
        "instruction": "",
        "id": "q9379",
        "input": "python numpy string dtype",
        "output": "",
        "rule": [
            "d9379"
        ]
    },
    {
        "instruction": "",
        "id": "q9380",
        "input": "how to document an enum python",
        "output": "",
        "rule": [
            "d9380"
        ]
    },
    {
        "instruction": "",
        "id": "q9381",
        "input": "python numpy to table",
        "output": "",
        "rule": [
            "d9381"
        ]
    },
    {
        "instruction": "",
        "id": "q9382",
        "input": "python numpy two matrix element wise function",
        "output": "",
        "rule": [
            "d9382"
        ]
    },
    {
        "instruction": "",
        "id": "q9383",
        "input": "how to edit all column width in python openpyxl",
        "output": "",
        "rule": [
            "d9383"
        ]
    },
    {
        "instruction": "",
        "id": "q9384",
        "input": "python object gets converted to string in list",
        "output": "",
        "rule": [
            "d9384"
        ]
    },
    {
        "instruction": "",
        "id": "q9385",
        "input": "python object has no attribute 'iteritems'",
        "output": "",
        "rule": [
            "d9385"
        ]
    },
    {
        "instruction": "",
        "id": "q9386",
        "input": "how to end a python session in cmd",
        "output": "",
        "rule": [
            "d9386"
        ]
    },
    {
        "instruction": "",
        "id": "q9387",
        "input": "python object has no attribute 'pop'",
        "output": "",
        "rule": [
            "d9387"
        ]
    },
    {
        "instruction": "",
        "id": "q9388",
        "input": "how to exclude multiline comments in python with re",
        "output": "",
        "rule": [
            "d9388"
        ]
    },
    {
        "instruction": "",
        "id": "q9389",
        "input": "python object is not nonetype",
        "output": "",
        "rule": [
            "d9389"
        ]
    },
    {
        "instruction": "",
        "id": "q9390",
        "input": "how to exit python",
        "output": "",
        "rule": [
            "d9390"
        ]
    },
    {
        "instruction": "",
        "id": "q9391",
        "input": "python object persistence to json",
        "output": "",
        "rule": [
            "d9391"
        ]
    },
    {
        "instruction": "",
        "id": "q9392",
        "input": "how to expand address ranges python",
        "output": "",
        "rule": [
            "d9392"
        ]
    },
    {
        "instruction": "",
        "id": "q9393",
        "input": "python object remove attribute",
        "output": "",
        "rule": [
            "d9393"
        ]
    },
    {
        "instruction": "",
        "id": "q9394",
        "input": "how to express login timeout in python flask",
        "output": "",
        "rule": [
            "d9394"
        ]
    },
    {
        "instruction": "",
        "id": "q9395",
        "input": "python one hot to indices",
        "output": "",
        "rule": [
            "d9395"
        ]
    },
    {
        "instruction": "",
        "id": "q9396",
        "input": "how to fill a list one by one in python",
        "output": "",
        "rule": [
            "d9396"
        ]
    },
    {
        "instruction": "",
        "id": "q9397",
        "input": "python one liner to prefix and suffix a string",
        "output": "",
        "rule": [
            "d9397"
        ]
    },
    {
        "instruction": "",
        "id": "q9398",
        "input": "how to filter a dictionary on the basis of key in python",
        "output": "",
        "rule": [
            "d9398"
        ]
    },
    {
        "instruction": "",
        "id": "q9399",
        "input": "python open read will not interfere with a locked file",
        "output": "",
        "rule": [
            "d9399"
        ]
    },
    {
        "instruction": "",
        "id": "q9400",
        "input": "how to fix a float error in python",
        "output": "",
        "rule": [
            "d9400"
        ]
    },
    {
        "instruction": "",
        "id": "q9401",
        "input": "python opencv rotate image 90 degree",
        "output": "",
        "rule": [
            "d9401"
        ]
    },
    {
        "instruction": "",
        "id": "q9402",
        "input": "how to fix a python source file",
        "output": "",
        "rule": [
            "d9402"
        ]
    },
    {
        "instruction": "",
        "id": "q9403",
        "input": "python opengl get object window coordinates",
        "output": "",
        "rule": [
            "d9403"
        ]
    },
    {
        "instruction": "",
        "id": "q9404",
        "input": "how to flag deprecated function python",
        "output": "",
        "rule": [
            "d9404"
        ]
    },
    {
        "instruction": "",
        "id": "q9405",
        "input": "python opengl to create a 3d coordinate",
        "output": "",
        "rule": [
            "d9405"
        ]
    },
    {
        "instruction": "",
        "id": "q9406",
        "input": "how to force cursor to go to next line in python",
        "output": "",
        "rule": [
            "d9406"
        ]
    },
    {
        "instruction": "",
        "id": "q9407",
        "input": "python openpyxl patternfill bgcolor",
        "output": "",
        "rule": [
            "d9407"
        ]
    },
    {
        "instruction": "",
        "id": "q9408",
        "input": "how to forcibly close all threads python",
        "output": "",
        "rule": [
            "d9408"
        ]
    },
    {
        "instruction": "",
        "id": "q9409",
        "input": "python os get modified time of file",
        "output": "",
        "rule": [
            "d9409"
        ]
    },
    {
        "instruction": "",
        "id": "q9410",
        "input": "how to form ordered dictionary in python",
        "output": "",
        "rule": [
            "d9410"
        ]
    },
    {
        "instruction": "",
        "id": "q9411",
        "input": "python pad image to given size",
        "output": "",
        "rule": [
            "d9411"
        ]
    },
    {
        "instruction": "",
        "id": "q9412",
        "input": "how to generate 25 random strings in python",
        "output": "",
        "rule": [
            "d9412"
        ]
    },
    {
        "instruction": "",
        "id": "q9413",
        "input": "python panda entropy function",
        "output": "",
        "rule": [
            "d9413"
        ]
    },
    {
        "instruction": "",
        "id": "q9414",
        "input": "how to generate nonce in python",
        "output": "",
        "rule": [
            "d9414"
        ]
    },
    {
        "instruction": "",
        "id": "q9415",
        "input": "how to get a specific key from a dictionary in python",
        "output": "",
        "rule": [
            "d9415"
        ]
    },
    {
        "instruction": "",
        "id": "q9416",
        "input": "how to get all the dates from a date range python",
        "output": "",
        "rule": [
            "d9416"
        ]
    },
    {
        "instruction": "",
        "id": "q9417",
        "input": "python parse datetime string to datetime",
        "output": "",
        "rule": [
            "d9417"
        ]
    },
    {
        "instruction": "",
        "id": "q9418",
        "input": "how to get all true booleans in python",
        "output": "",
        "rule": [
            "d9418"
        ]
    },
    {
        "instruction": "",
        "id": "q9419",
        "input": "python parse http response output",
        "output": "",
        "rule": [
            "d9419"
        ]
    },
    {
        "instruction": "",
        "id": "q9420",
        "input": "how to get an instanceid in python",
        "output": "",
        "rule": [
            "d9420"
        ]
    },
    {
        "instruction": "",
        "id": "q9421",
        "input": "python parse iso format time with timezone offset",
        "output": "",
        "rule": [
            "d9421"
        ]
    },
    {
        "instruction": "",
        "id": "q9422",
        "input": "how to get environment variables and its name in python",
        "output": "",
        "rule": [
            "d9422"
        ]
    },
    {
        "instruction": "",
        "id": "q9423",
        "input": "python parse rfc3339 to datetime",
        "output": "",
        "rule": [
            "d9423"
        ]
    },
    {
        "instruction": "",
        "id": "q9424",
        "input": "how to get execution time for a function in python",
        "output": "",
        "rule": [
            "d9424"
        ]
    },
    {
        "instruction": "",
        "id": "q9425",
        "input": "python parse yaml get",
        "output": "",
        "rule": [
            "d9425"
        ]
    },
    {
        "instruction": "",
        "id": "q9426",
        "input": "how to get firstname in language python",
        "output": "",
        "rule": [
            "d9426"
        ]
    },
    {
        "instruction": "",
        "id": "q9427",
        "input": "python pass string list to c++ ctypes",
        "output": "",
        "rule": [
            "d9427"
        ]
    },
    {
        "instruction": "",
        "id": "q9428",
        "input": "how to get key corresponding to a value in dictionary python",
        "output": "",
        "rule": [
            "d9428"
        ]
    },
    {
        "instruction": "",
        "id": "q9429",
        "input": "python paste clipboard text",
        "output": "",
        "rule": [
            "d9429"
        ]
    },
    {
        "instruction": "",
        "id": "q9430",
        "input": "how to get mouse pos in python",
        "output": "",
        "rule": [
            "d9430"
        ]
    },
    {
        "instruction": "",
        "id": "q9431",
        "input": "python pathlib get parent directory of file",
        "output": "",
        "rule": [
            "d9431"
        ]
    },
    {
        "instruction": "",
        "id": "q9432",
        "input": "how to get mouse x and y individually in python",
        "output": "",
        "rule": [
            "d9432"
        ]
    },
    {
        "instruction": "",
        "id": "q9433",
        "input": "python pdb set trace stop",
        "output": "",
        "rule": [
            "d9433"
        ]
    },
    {
        "instruction": "",
        "id": "q9434",
        "input": "how to get normal of a vector python",
        "output": "",
        "rule": [
            "d9434"
        ]
    },
    {
        "instruction": "",
        "id": "q9435",
        "input": "python pdf file size is 0",
        "output": "",
        "rule": [
            "d9435"
        ]
    },
    {
        "instruction": "",
        "id": "q9436",
        "input": "how to get python dictionary key",
        "output": "",
        "rule": [
            "d9436"
        ]
    },
    {
        "instruction": "",
        "id": "q9437",
        "input": "python pdf object has no attribute 'pagebufferwidth'",
        "output": "",
        "rule": [
            "d9437"
        ]
    },
    {
        "instruction": "",
        "id": "q9438",
        "input": "how to get python to round using intgers to the nearest decimal tenth",
        "output": "",
        "rule": [
            "d9438"
        ]
    },
    {
        "instruction": "",
        "id": "q9439",
        "input": "python percentile of a list of values",
        "output": "",
        "rule": [
            "d9439"
        ]
    },
    {
        "instruction": "",
        "id": "q9440",
        "input": "how to get schema of json in python",
        "output": "",
        "rule": [
            "d9440"
        ]
    },
    {
        "instruction": "",
        "id": "q9441",
        "input": "python pick closest value from list",
        "output": "",
        "rule": [
            "d9441"
        ]
    },
    {
        "instruction": "",
        "id": "q9442",
        "input": "how to get screen resolution in python",
        "output": "",
        "rule": [
            "d9442"
        ]
    },
    {
        "instruction": "",
        "id": "q9443",
        "input": "python pika stop consume",
        "output": "",
        "rule": [
            "d9443"
        ]
    },
    {
        "instruction": "",
        "id": "q9444",
        "input": "how to get spaces in strings in python",
        "output": "",
        "rule": [
            "d9444"
        ]
    },
    {
        "instruction": "",
        "id": "q9445",
        "input": "python pil padding img",
        "output": "",
        "rule": [
            "d9445"
        ]
    },
    {
        "instruction": "",
        "id": "q9446",
        "input": "how to get specific indexes of a string python",
        "output": "",
        "rule": [
            "d9446"
        ]
    },
    {
        "instruction": "",
        "id": "q9447",
        "input": "python play music sped up",
        "output": "",
        "rule": [
            "d9447"
        ]
    },
    {
        "instruction": "",
        "id": "q9448",
        "input": "how to get specify shape python",
        "output": "",
        "rule": [
            "d9448"
        ]
    },
    {
        "instruction": "",
        "id": "q9449",
        "input": "python plot named colormap",
        "output": "",
        "rule": [
            "d9449"
        ]
    },
    {
        "instruction": "",
        "id": "q9450",
        "input": "how to get the accuracy score in python",
        "output": "",
        "rule": [
            "d9450"
        ]
    },
    {
        "instruction": "",
        "id": "q9451",
        "input": "python plotting 0 1 array with time",
        "output": "",
        "rule": [
            "d9451"
        ]
    },
    {
        "instruction": "",
        "id": "q9452",
        "input": "how to get the actual object using object id in python",
        "output": "",
        "rule": [
            "d9452"
        ]
    },
    {
        "instruction": "",
        "id": "q9453",
        "input": "python pool async map",
        "output": "",
        "rule": [
            "d9453"
        ]
    },
    {
        "instruction": "",
        "id": "q9454",
        "input": "how to get the db size in python",
        "output": "",
        "rule": [
            "d9454"
        ]
    },
    {
        "instruction": "",
        "id": "q9455",
        "input": "python pool close doesn't work",
        "output": "",
        "rule": [
            "d9455"
        ]
    },
    {
        "instruction": "",
        "id": "q9456",
        "input": "how to get the index of a value in python",
        "output": "",
        "rule": [
            "d9456"
        ]
    },
    {
        "instruction": "",
        "id": "q9457",
        "input": "python popen git tag",
        "output": "",
        "rule": [
            "d9457"
        ]
    },
    {
        "instruction": "",
        "id": "q9458",
        "input": "how to get the index of the current item in a for loop django python",
        "output": "",
        "rule": [
            "d9458"
        ]
    },
    {
        "instruction": "",
        "id": "q9459",
        "input": "python post call using requests",
        "output": "",
        "rule": [
            "d9459"
        ]
    },
    {
        "instruction": "",
        "id": "q9460",
        "input": "how to get the length of a word in python using len",
        "output": "",
        "rule": [
            "d9460"
        ]
    },
    {
        "instruction": "",
        "id": "q9461",
        "input": "python postgres bind variables",
        "output": "",
        "rule": [
            "d9461"
        ]
    },
    {
        "instruction": "",
        "id": "q9462",
        "input": "how to get the value of a header in python requests",
        "output": "",
        "rule": [
            "d9462"
        ]
    },
    {
        "instruction": "",
        "id": "q9463",
        "input": "python pprint orders dictionary",
        "output": "",
        "rule": [
            "d9463"
        ]
    },
    {
        "instruction": "",
        "id": "q9464",
        "input": "how to get the white background on python'",
        "output": "",
        "rule": [
            "d9464"
        ]
    },
    {
        "instruction": "",
        "id": "q9465",
        "input": "python pretty print file",
        "output": "",
        "rule": [
            "d9465"
        ]
    },
    {
        "instruction": "",
        "id": "q9466",
        "input": "how to get unique list from list of list in python",
        "output": "",
        "rule": [
            "d9466"
        ]
    },
    {
        "instruction": "",
        "id": "q9467",
        "input": "how to get unique value in a list in python",
        "output": "",
        "rule": [
            "d9467"
        ]
    },
    {
        "instruction": "",
        "id": "q9468",
        "input": "python prettyxml remove carrige returns",
        "output": "",
        "rule": [
            "d9468"
        ]
    },
    {
        "instruction": "",
        "id": "q9469",
        "input": "how to get unit vector of two matrice using python",
        "output": "",
        "rule": [
            "d9469"
        ]
    },
    {
        "instruction": "",
        "id": "q9470",
        "input": "python print all attributes of instance",
        "output": "",
        "rule": [
            "d9470"
        ]
    },
    {
        "instruction": "",
        "id": "q9471",
        "input": "how to get weekdays date between a range python",
        "output": "",
        "rule": [
            "d9471"
        ]
    },
    {
        "instruction": "",
        "id": "q9472",
        "input": "python print avoid linespace",
        "output": "",
        "rule": [
            "d9472"
        ]
    },
    {
        "instruction": "",
        "id": "q9473",
        "input": "how to get your screen dimensions in python",
        "output": "",
        "rule": [
            "d9473"
        ]
    },
    {
        "instruction": "",
        "id": "q9474",
        "input": "python print bold red text",
        "output": "",
        "rule": [
            "d9474"
        ]
    },
    {
        "instruction": "",
        "id": "q9475",
        "input": "how to give text on python color",
        "output": "",
        "rule": [
            "d9475"
        ]
    },
    {
        "instruction": "",
        "id": "q9476",
        "input": "python print colored json",
        "output": "",
        "rule": [
            "d9476"
        ]
    },
    {
        "instruction": "",
        "id": "q9477",
        "input": "how to go back up a line ouput python 3",
        "output": "",
        "rule": [
            "d9477"
        ]
    },
    {
        "instruction": "",
        "id": "q9478",
        "input": "python print how long a method takes to run",
        "output": "",
        "rule": [
            "d9478"
        ]
    },
    {
        "instruction": "",
        "id": "q9479",
        "input": "how to go through every element if a tree structure in python",
        "output": "",
        "rule": [
            "d9479"
        ]
    },
    {
        "instruction": "",
        "id": "q9480",
        "input": "how to gracefully handle timeout http python",
        "output": "",
        "rule": [
            "d9480"
        ]
    },
    {
        "instruction": "",
        "id": "q9481",
        "input": "python print right allign float",
        "output": "",
        "rule": [
            "d9481"
        ]
    },
    {
        "instruction": "",
        "id": "q9482",
        "input": "how to hash a dictionary python",
        "output": "",
        "rule": [
            "d9482"
        ]
    },
    {
        "instruction": "",
        "id": "q9483",
        "input": "python print stream docker log",
        "output": "",
        "rule": [
            "d9483"
        ]
    },
    {
        "instruction": "",
        "id": "q9484",
        "input": "how to have the program run after 3 seconds in python",
        "output": "",
        "rule": [
            "d9484"
        ]
    },
    {
        "instruction": "",
        "id": "q9485",
        "input": "python print tuple elements in one line",
        "output": "",
        "rule": [
            "d9485"
        ]
    },
    {
        "instruction": "",
        "id": "q9486",
        "input": "how to hide shell in python",
        "output": "",
        "rule": [
            "d9486"
        ]
    },
    {
        "instruction": "",
        "id": "q9487",
        "input": "python printing without spaces",
        "output": "",
        "rule": [
            "d9487"
        ]
    },
    {
        "instruction": "",
        "id": "q9488",
        "input": "how to highlight in python",
        "output": "",
        "rule": [
            "d9488"
        ]
    },
    {
        "instruction": "",
        "id": "q9489",
        "input": "python private variable uppercase",
        "output": "",
        "rule": [
            "d9489"
        ]
    },
    {
        "instruction": "",
        "id": "q9490",
        "input": "how to identify a number in a tuple in python",
        "output": "",
        "rule": [
            "d9490"
        ]
    },
    {
        "instruction": "",
        "id": "q9491",
        "input": "python process exited before it can make",
        "output": "",
        "rule": [
            "d9491"
        ]
    },
    {
        "instruction": "",
        "id": "q9492",
        "input": "how to identify encoding of a file in python",
        "output": "",
        "rule": [
            "d9492"
        ]
    },
    {
        "instruction": "",
        "id": "q9493",
        "input": "python program cartesian coordinates",
        "output": "",
        "rule": [
            "d9493"
        ]
    },
    {
        "instruction": "",
        "id": "q9494",
        "input": "python program for price and percentage",
        "output": "",
        "rule": [
            "d9494"
        ]
    },
    {
        "instruction": "",
        "id": "q9495",
        "input": "how to ietrate in a byte type object in python",
        "output": "",
        "rule": [
            "d9495"
        ]
    },
    {
        "instruction": "",
        "id": "q9496",
        "input": "python progress bar for a line",
        "output": "",
        "rule": [
            "d9496"
        ]
    },
    {
        "instruction": "",
        "id": "q9497",
        "input": "how to incorporate string input in function python",
        "output": "",
        "rule": [
            "d9497"
        ]
    },
    {
        "instruction": "",
        "id": "q9498",
        "input": "python property instead of plain method",
        "output": "",
        "rule": [
            "d9498"
        ]
    },
    {
        "instruction": "",
        "id": "q9499",
        "input": "how to increase the pixel size in python opencv",
        "output": "",
        "rule": [
            "d9499"
        ]
    },
    {
        "instruction": "",
        "id": "q9500",
        "input": "python property to ensure function is also loaded once the first time it is called",
        "output": "",
        "rule": [
            "d9500"
        ]
    },
    {
        "instruction": "",
        "id": "q9501",
        "input": "how to increase the value of a key in python",
        "output": "",
        "rule": [
            "d9501"
        ]
    },
    {
        "instruction": "",
        "id": "q9502",
        "input": "python protobuffer read proto file",
        "output": "",
        "rule": [
            "d9502"
        ]
    },
    {
        "instruction": "",
        "id": "q9503",
        "input": "how to indicate file is in same directory python load pickle",
        "output": "",
        "rule": [
            "d9503"
        ]
    },
    {
        "instruction": "",
        "id": "q9504",
        "input": "python proxy http tunnel",
        "output": "",
        "rule": [
            "d9504"
        ]
    },
    {
        "instruction": "",
        "id": "q9505",
        "input": "how to indicate the highest count in python",
        "output": "",
        "rule": [
            "d9505"
        ]
    },
    {
        "instruction": "",
        "id": "q9506",
        "input": "python put functions in iterable",
        "output": "",
        "rule": [
            "d9506"
        ]
    },
    {
        "instruction": "",
        "id": "q9507",
        "input": "how to insert indent symbol python",
        "output": "",
        "rule": [
            "d9507"
        ]
    },
    {
        "instruction": "",
        "id": "q9508",
        "input": "how to instanticate a bytes like object python",
        "output": "",
        "rule": [
            "d9508"
        ]
    },
    {
        "instruction": "",
        "id": "q9509",
        "input": "python pytest assert called once",
        "output": "",
        "rule": [
            "d9509"
        ]
    },
    {
        "instruction": "",
        "id": "q9510",
        "input": "how to inverse the elements of alist in python",
        "output": "",
        "rule": [
            "d9510"
        ]
    },
    {
        "instruction": "",
        "id": "q9511",
        "input": "python random char gener",
        "output": "",
        "rule": [
            "d9511"
        ]
    },
    {
        "instruction": "",
        "id": "q9512",
        "input": "how to iterate through hash functions python",
        "output": "",
        "rule": [
            "d9512"
        ]
    },
    {
        "instruction": "",
        "id": "q9513",
        "input": "how to kill a python script ctrl",
        "output": "",
        "rule": [
            "d9513"
        ]
    },
    {
        "instruction": "",
        "id": "q9514",
        "input": "python random int not including 0",
        "output": "",
        "rule": [
            "d9514"
        ]
    },
    {
        "instruction": "",
        "id": "q9515",
        "input": "how to kill the process in linux using python",
        "output": "",
        "rule": [
            "d9515"
        ]
    },
    {
        "instruction": "",
        "id": "q9516",
        "input": "python random integer without replacement",
        "output": "",
        "rule": [
            "d9516"
        ]
    },
    {
        "instruction": "",
        "id": "q9517",
        "input": "how to know how large a python array is",
        "output": "",
        "rule": [
            "d9517"
        ]
    },
    {
        "instruction": "",
        "id": "q9518",
        "input": "how to know the data type of a object in python",
        "output": "",
        "rule": [
            "d9518"
        ]
    },
    {
        "instruction": "",
        "id": "q9519",
        "input": "python read all text from url",
        "output": "",
        "rule": [
            "d9519"
        ]
    },
    {
        "instruction": "",
        "id": "q9520",
        "input": "how to know the datatype of each column python",
        "output": "",
        "rule": [
            "d9520"
        ]
    },
    {
        "instruction": "",
        "id": "q9521",
        "input": "python read binary file with integer and float",
        "output": "",
        "rule": [
            "d9521"
        ]
    },
    {
        "instruction": "",
        "id": "q9522",
        "input": "how to know the type of python variable",
        "output": "",
        "rule": [
            "d9522"
        ]
    },
    {
        "instruction": "",
        "id": "q9523",
        "input": "python read bytes into array",
        "output": "",
        "rule": [
            "d9523"
        ]
    },
    {
        "instruction": "",
        "id": "q9524",
        "input": "how to limit 5 results in python list",
        "output": "",
        "rule": [
            "d9524"
        ]
    },
    {
        "instruction": "",
        "id": "q9525",
        "input": "python read database into numpy",
        "output": "",
        "rule": [
            "d9525"
        ]
    },
    {
        "instruction": "",
        "id": "q9526",
        "input": "how to load a matlab file into python h5py",
        "output": "",
        "rule": [
            "d9526"
        ]
    },
    {
        "instruction": "",
        "id": "q9527",
        "input": "how to load mnist dataset in python from skikit",
        "output": "",
        "rule": [
            "d9527"
        ]
    },
    {
        "instruction": "",
        "id": "q9528",
        "input": "python read file and conver to string",
        "output": "",
        "rule": [
            "d9528"
        ]
    },
    {
        "instruction": "",
        "id": "q9529",
        "input": "how to load rds file in python 3",
        "output": "",
        "rule": [
            "d9529"
        ]
    },
    {
        "instruction": "",
        "id": "q9530",
        "input": "python read file bytes to array",
        "output": "",
        "rule": [
            "d9530"
        ]
    },
    {
        "instruction": "",
        "id": "q9531",
        "input": "python read file slow",
        "output": "",
        "rule": [
            "d9531"
        ]
    },
    {
        "instruction": "",
        "id": "q9532",
        "input": "how to make a function iterable in python",
        "output": "",
        "rule": [
            "d9532"
        ]
    },
    {
        "instruction": "",
        "id": "q9533",
        "input": "python read file specific content",
        "output": "",
        "rule": [
            "d9533"
        ]
    },
    {
        "instruction": "",
        "id": "q9534",
        "input": "python read file with enumerate",
        "output": "",
        "rule": [
            "d9534"
        ]
    },
    {
        "instruction": "",
        "id": "q9535",
        "input": "how to make a list from what a cursor sees python",
        "output": "",
        "rule": [
            "d9535"
        ]
    },
    {
        "instruction": "",
        "id": "q9536",
        "input": "python read from stdin without enter",
        "output": "",
        "rule": [
            "d9536"
        ]
    },
    {
        "instruction": "",
        "id": "q9537",
        "input": "how to make a plane in vtk python",
        "output": "",
        "rule": [
            "d9537"
        ]
    },
    {
        "instruction": "",
        "id": "q9538",
        "input": "python read text file without comments",
        "output": "",
        "rule": [
            "d9538"
        ]
    },
    {
        "instruction": "",
        "id": "q9539",
        "input": "how to make a python bot run continuously",
        "output": "",
        "rule": [
            "d9539"
        ]
    },
    {
        "instruction": "",
        "id": "q9540",
        "input": "python read tiff image as an array",
        "output": "",
        "rule": [
            "d9540"
        ]
    },
    {
        "instruction": "",
        "id": "q9541",
        "input": "how to make a python code delete itself without a window popping up",
        "output": "",
        "rule": [
            "d9541"
        ]
    },
    {
        "instruction": "",
        "id": "q9542",
        "input": "python recursion sum of the left leaves",
        "output": "",
        "rule": [
            "d9542"
        ]
    },
    {
        "instruction": "",
        "id": "q9543",
        "input": "how to make a python code to exit",
        "output": "",
        "rule": [
            "d9543"
        ]
    },
    {
        "instruction": "",
        "id": "q9544",
        "input": "python redirect output to both file and stdout",
        "output": "",
        "rule": [
            "d9544"
        ]
    },
    {
        "instruction": "",
        "id": "q9545",
        "input": "how to make a python list in yaml",
        "output": "",
        "rule": [
            "d9545"
        ]
    },
    {
        "instruction": "",
        "id": "q9546",
        "input": "python redirect stdout contextmanager",
        "output": "",
        "rule": [
            "d9546"
        ]
    },
    {
        "instruction": "",
        "id": "q9547",
        "input": "how to make a python loop pause",
        "output": "",
        "rule": [
            "d9547"
        ]
    },
    {
        "instruction": "",
        "id": "q9548",
        "input": "python redirect stdout to both buffer a logger at the same time",
        "output": "",
        "rule": [
            "d9548"
        ]
    },
    {
        "instruction": "",
        "id": "q9549",
        "input": "how to make a simple exit in python",
        "output": "",
        "rule": [
            "d9549"
        ]
    },
    {
        "instruction": "",
        "id": "q9550",
        "input": "python redis get value",
        "output": "",
        "rule": [
            "d9550"
        ]
    },
    {
        "instruction": "",
        "id": "q9551",
        "input": "how to make a single line comment in python",
        "output": "",
        "rule": [
            "d9551"
        ]
    },
    {
        "instruction": "",
        "id": "q9552",
        "input": "python redis list pop sequence",
        "output": "",
        "rule": [
            "d9552"
        ]
    },
    {
        "instruction": "",
        "id": "q9553",
        "input": "how to make a string in python capitalize",
        "output": "",
        "rule": [
            "d9553"
        ]
    },
    {
        "instruction": "",
        "id": "q9554",
        "input": "python redis qeuue blocked",
        "output": "",
        "rule": [
            "d9554"
        ]
    },
    {
        "instruction": "",
        "id": "q9555",
        "input": "how to make a toggle button in python",
        "output": "",
        "rule": [
            "d9555"
        ]
    },
    {
        "instruction": "",
        "id": "q9556",
        "input": "python redis set function",
        "output": "",
        "rule": [
            "d9556"
        ]
    },
    {
        "instruction": "",
        "id": "q9557",
        "input": "how to make alternate elements of a matrix to 1 in python",
        "output": "",
        "rule": [
            "d9557"
        ]
    },
    {
        "instruction": "",
        "id": "q9558",
        "input": "python reflection get type from string",
        "output": "",
        "rule": [
            "d9558"
        ]
    },
    {
        "instruction": "",
        "id": "q9559",
        "input": "how to make arrays into floats python",
        "output": "",
        "rule": [
            "d9559"
        ]
    },
    {
        "instruction": "",
        "id": "q9560",
        "input": "python reflection invoke method by name",
        "output": "",
        "rule": [
            "d9560"
        ]
    },
    {
        "instruction": "",
        "id": "q9561",
        "input": "how to make colorbar on python",
        "output": "",
        "rule": [
            "d9561"
        ]
    },
    {
        "instruction": "",
        "id": "q9562",
        "input": "python regex get domain from url",
        "output": "",
        "rule": [
            "d9562"
        ]
    },
    {
        "instruction": "",
        "id": "q9563",
        "input": "how to make conda default python environment",
        "output": "",
        "rule": [
            "d9563"
        ]
    },
    {
        "instruction": "",
        "id": "q9564",
        "input": "python regex replace with count",
        "output": "",
        "rule": [
            "d9564"
        ]
    },
    {
        "instruction": "",
        "id": "q9565",
        "input": "how to make custom windows error with python",
        "output": "",
        "rule": [
            "d9565"
        ]
    },
    {
        "instruction": "",
        "id": "q9566",
        "input": "python regex s deprecated",
        "output": "",
        "rule": [
            "d9566"
        ]
    },
    {
        "instruction": "",
        "id": "q9567",
        "input": "how to make dictionary from dynamic path string python3",
        "output": "",
        "rule": [
            "d9567"
        ]
    },
    {
        "instruction": "",
        "id": "q9568",
        "input": "python regexpression not match comment",
        "output": "",
        "rule": [
            "d9568"
        ]
    },
    {
        "instruction": "",
        "id": "q9569",
        "input": "how to make everything in a list a string in python",
        "output": "",
        "rule": [
            "d9569"
        ]
    },
    {
        "instruction": "",
        "id": "q9570",
        "input": "python remove all comments from c",
        "output": "",
        "rule": [
            "d9570"
        ]
    },
    {
        "instruction": "",
        "id": "q9571",
        "input": "how to make f string colors python",
        "output": "",
        "rule": [
            "d9571"
        ]
    },
    {
        "instruction": "",
        "id": "q9572",
        "input": "python remove all letters from string",
        "output": "",
        "rule": [
            "d9572"
        ]
    },
    {
        "instruction": "",
        "id": "q9573",
        "input": "how to make gradient in python",
        "output": "",
        "rule": [
            "d9573"
        ]
    },
    {
        "instruction": "",
        "id": "q9574",
        "input": "python remove all non alphanumeric",
        "output": "",
        "rule": [
            "d9574"
        ]
    },
    {
        "instruction": "",
        "id": "q9575",
        "input": "how to make matrix in python 3,7",
        "output": "",
        "rule": [
            "d9575"
        ]
    },
    {
        "instruction": "",
        "id": "q9576",
        "input": "python remove file permission deny",
        "output": "",
        "rule": [
            "d9576"
        ]
    },
    {
        "instruction": "",
        "id": "q9577",
        "input": "how to make multiline comment in python",
        "output": "",
        "rule": [
            "d9577"
        ]
    },
    {
        "instruction": "",
        "id": "q9578",
        "input": "python remove from a dict if key is not present",
        "output": "",
        "rule": [
            "d9578"
        ]
    },
    {
        "instruction": "",
        "id": "q9579",
        "input": "how to make python datetime object timezone aware",
        "output": "",
        "rule": [
            "d9579"
        ]
    },
    {
        "instruction": "",
        "id": "q9580",
        "input": "python remove from a list and return list",
        "output": "",
        "rule": [
            "d9580"
        ]
    },
    {
        "instruction": "",
        "id": "q9581",
        "input": "how to make python tables larger",
        "output": "",
        "rule": [
            "d9581"
        ]
    },
    {
        "instruction": "",
        "id": "q9582",
        "input": "python remove guid from file name",
        "output": "",
        "rule": [
            "d9582"
        ]
    },
    {
        "instruction": "",
        "id": "q9583",
        "input": "how to make str to dict in python",
        "output": "",
        "rule": [
            "d9583"
        ]
    },
    {
        "instruction": "",
        "id": "q9584",
        "input": "python remove item from apt cache",
        "output": "",
        "rule": [
            "d9584"
        ]
    },
    {
        "instruction": "",
        "id": "q9585",
        "input": "how to make string imput upper case in python 3",
        "output": "",
        "rule": [
            "d9585"
        ]
    },
    {
        "instruction": "",
        "id": "q9586",
        "input": "python remove items from wrapper",
        "output": "",
        "rule": [
            "d9586"
        ]
    },
    {
        "instruction": "",
        "id": "q9587",
        "input": "how to merge one dict with another python",
        "output": "",
        "rule": [
            "d9587"
        ]
    },
    {
        "instruction": "",
        "id": "q9588",
        "input": "python remove non letters in string",
        "output": "",
        "rule": [
            "d9588"
        ]
    },
    {
        "instruction": "",
        "id": "q9589",
        "input": "how to merge two object in python",
        "output": "",
        "rule": [
            "d9589"
        ]
    },
    {
        "instruction": "",
        "id": "q9590",
        "input": "how to move legend to left side python",
        "output": "",
        "rule": [
            "d9590"
        ]
    },
    {
        "instruction": "",
        "id": "q9591",
        "input": "python remove object from dist",
        "output": "",
        "rule": [
            "d9591"
        ]
    },
    {
        "instruction": "",
        "id": "q9592",
        "input": "how to move the location of the legend in a python graph",
        "output": "",
        "rule": [
            "d9592"
        ]
    },
    {
        "instruction": "",
        "id": "q9593",
        "input": "python remove plus sign from a string",
        "output": "",
        "rule": [
            "d9593"
        ]
    },
    {
        "instruction": "",
        "id": "q9594",
        "input": "how to multiply list element in python",
        "output": "",
        "rule": [
            "d9594"
        ]
    },
    {
        "instruction": "",
        "id": "q9595",
        "input": "python remove repeated whitespace",
        "output": "",
        "rule": [
            "d9595"
        ]
    },
    {
        "instruction": "",
        "id": "q9596",
        "input": "how to name a file property in python",
        "output": "",
        "rule": [
            "d9596"
        ]
    },
    {
        "instruction": "",
        "id": "q9597",
        "input": "python remove space elements from list",
        "output": "",
        "rule": [
            "d9597"
        ]
    },
    {
        "instruction": "",
        "id": "q9598",
        "input": "how to name a member dynamically python",
        "output": "",
        "rule": [
            "d9598"
        ]
    },
    {
        "instruction": "",
        "id": "q9599",
        "input": "python render sympy latex",
        "output": "",
        "rule": [
            "d9599"
        ]
    },
    {
        "instruction": "",
        "id": "q9600",
        "input": "how to open a compiled python file in idle",
        "output": "",
        "rule": [
            "d9600"
        ]
    },
    {
        "instruction": "",
        "id": "q9601",
        "input": "python reorder a list using an array of indices",
        "output": "",
        "rule": [
            "d9601"
        ]
    },
    {
        "instruction": "",
        "id": "q9602",
        "input": "how to open a file using an abolute path python",
        "output": "",
        "rule": [
            "d9602"
        ]
    },
    {
        "instruction": "",
        "id": "q9603",
        "input": "python replace blank values in a column",
        "output": "",
        "rule": [
            "d9603"
        ]
    },
    {
        "instruction": "",
        "id": "q9604",
        "input": "how to open an xlsx in python",
        "output": "",
        "rule": [
            "d9604"
        ]
    },
    {
        "instruction": "",
        "id": "q9605",
        "input": "python replace characters with %",
        "output": "",
        "rule": [
            "d9605"
        ]
    },
    {
        "instruction": "",
        "id": "q9606",
        "input": "how to open file with full permission in python",
        "output": "",
        "rule": [
            "d9606"
        ]
    },
    {
        "instruction": "",
        "id": "q9607",
        "input": "python replace every letter for",
        "output": "",
        "rule": [
            "d9607"
        ]
    },
    {
        "instruction": "",
        "id": "q9608",
        "input": "how to open protobuf in python",
        "output": "",
        "rule": [
            "d9608"
        ]
    },
    {
        "instruction": "",
        "id": "q9609",
        "input": "python replace multiple whitespaces",
        "output": "",
        "rule": [
            "d9609"
        ]
    },
    {
        "instruction": "",
        "id": "q9610",
        "input": "how to overload constructor python",
        "output": "",
        "rule": [
            "d9610"
        ]
    },
    {
        "instruction": "",
        "id": "q9611",
        "input": "python replace non letter symbols",
        "output": "",
        "rule": [
            "d9611"
        ]
    },
    {
        "instruction": "",
        "id": "q9612",
        "input": "how to parse an error in python try",
        "output": "",
        "rule": [
            "d9612"
        ]
    },
    {
        "instruction": "",
        "id": "q9613",
        "input": "python replace substitute text in string",
        "output": "",
        "rule": [
            "d9613"
        ]
    },
    {
        "instruction": "",
        "id": "q9614",
        "input": "how to parse response python application/zip",
        "output": "",
        "rule": [
            "d9614"
        ]
    },
    {
        "instruction": "",
        "id": "q9615",
        "input": "python replace tabs by spaces in string",
        "output": "",
        "rule": [
            "d9615"
        ]
    },
    {
        "instruction": "",
        "id": "q9616",
        "input": "how to parse string to date fromat in python",
        "output": "",
        "rule": [
            "d9616"
        ]
    },
    {
        "instruction": "",
        "id": "q9617",
        "input": "python request input with default value",
        "output": "",
        "rule": [
            "d9617"
        ]
    },
    {
        "instruction": "",
        "id": "q9618",
        "input": "how to pass a date format in python variable",
        "output": "",
        "rule": [
            "d9618"
        ]
    },
    {
        "instruction": "",
        "id": "q9619",
        "input": "python request session get url",
        "output": "",
        "rule": [
            "d9619"
        ]
    },
    {
        "instruction": "",
        "id": "q9620",
        "input": "how to pass javascript value to python",
        "output": "",
        "rule": [
            "d9620"
        ]
    },
    {
        "instruction": "",
        "id": "q9621",
        "input": "python requests add basic auth",
        "output": "",
        "rule": [
            "d9621"
        ]
    },
    {
        "instruction": "",
        "id": "q9622",
        "input": "how to pass json in body in http post request from python",
        "output": "",
        "rule": [
            "d9622"
        ]
    },
    {
        "instruction": "",
        "id": "q9623",
        "input": "python requests browser language accept en",
        "output": "",
        "rule": [
            "d9623"
        ]
    },
    {
        "instruction": "",
        "id": "q9624",
        "input": "how to pass response as xml type in python",
        "output": "",
        "rule": [
            "d9624"
        ]
    },
    {
        "instruction": "",
        "id": "q9625",
        "input": "python requests consume paginated api",
        "output": "",
        "rule": [
            "d9625"
        ]
    },
    {
        "instruction": "",
        "id": "q9626",
        "input": "how to pass sys argv to another function in python",
        "output": "",
        "rule": [
            "d9626"
        ]
    },
    {
        "instruction": "",
        "id": "q9627",
        "input": "python requests dump session cookies",
        "output": "",
        "rule": [
            "d9627"
        ]
    },
    {
        "instruction": "",
        "id": "q9628",
        "input": "how to pick out vocab of a file python",
        "output": "",
        "rule": [
            "d9628"
        ]
    },
    {
        "instruction": "",
        "id": "q9629",
        "input": "python requests failing after a couple of times",
        "output": "",
        "rule": [
            "d9629"
        ]
    },
    {
        "instruction": "",
        "id": "q9630",
        "input": "how to place figures into one figure after figure is made python",
        "output": "",
        "rule": [
            "d9630"
        ]
    },
    {
        "instruction": "",
        "id": "q9631",
        "input": "how to post a variable in the request body in python api",
        "output": "",
        "rule": [
            "d9631"
        ]
    },
    {
        "instruction": "",
        "id": "q9632",
        "input": "python requests set maximum retries",
        "output": "",
        "rule": [
            "d9632"
        ]
    },
    {
        "instruction": "",
        "id": "q9633",
        "input": "python requestscookiejar retrive cookie",
        "output": "",
        "rule": [
            "d9633"
        ]
    },
    {
        "instruction": "",
        "id": "q9634",
        "input": "how to print a prompt and read stdin python",
        "output": "",
        "rule": [
            "d9634"
        ]
    },
    {
        "instruction": "",
        "id": "q9635",
        "input": "python restful how to process errors",
        "output": "",
        "rule": [
            "d9635"
        ]
    },
    {
        "instruction": "",
        "id": "q9636",
        "input": "how to print enum key if you know the value in python",
        "output": "",
        "rule": [
            "d9636"
        ]
    },
    {
        "instruction": "",
        "id": "q9637",
        "input": "python retrieve filter from log handler",
        "output": "",
        "rule": [
            "d9637"
        ]
    },
    {
        "instruction": "",
        "id": "q9638",
        "input": "how to print multiple lists as a table python",
        "output": "",
        "rule": [
            "d9638"
        ]
    },
    {
        "instruction": "",
        "id": "q9639",
        "input": "python return all indices given a value",
        "output": "",
        "rule": [
            "d9639"
        ]
    },
    {
        "instruction": "",
        "id": "q9640",
        "input": "how to print out data type of a column python",
        "output": "",
        "rule": [
            "d9640"
        ]
    },
    {
        "instruction": "",
        "id": "q9641",
        "input": "python return all the index of a sub string",
        "output": "",
        "rule": [
            "d9641"
        ]
    },
    {
        "instruction": "",
        "id": "q9642",
        "input": "how to print out the type of a vraible in python",
        "output": "",
        "rule": [
            "d9642"
        ]
    },
    {
        "instruction": "",
        "id": "q9643",
        "input": "python return results from external command",
        "output": "",
        "rule": [
            "d9643"
        ]
    },
    {
        "instruction": "",
        "id": "q9644",
        "input": "how to print recursive depth python",
        "output": "",
        "rule": [
            "d9644"
        ]
    },
    {
        "instruction": "",
        "id": "q9645",
        "input": "python return the two closest values of an array",
        "output": "",
        "rule": [
            "d9645"
        ]
    },
    {
        "instruction": "",
        "id": "q9646",
        "input": "how to print red error in python",
        "output": "",
        "rule": [
            "d9646"
        ]
    },
    {
        "instruction": "",
        "id": "q9647",
        "input": "python return vector of max indexs",
        "output": "",
        "rule": [
            "d9647"
        ]
    },
    {
        "instruction": "",
        "id": "q9648",
        "input": "how to put a button in python treeview",
        "output": "",
        "rule": [
            "d9648"
        ]
    },
    {
        "instruction": "",
        "id": "q9649",
        "input": "python rewind to start of file",
        "output": "",
        "rule": [
            "d9649"
        ]
    },
    {
        "instruction": "",
        "id": "q9650",
        "input": "python right trim string",
        "output": "",
        "rule": [
            "d9650"
        ]
    },
    {
        "instruction": "",
        "id": "q9651",
        "input": "how to put useragent in webbrowser python",
        "output": "",
        "rule": [
            "d9651"
        ]
    },
    {
        "instruction": "",
        "id": "q9652",
        "input": "python rolling average by window interval not data points",
        "output": "",
        "rule": [
            "d9652"
        ]
    },
    {
        "instruction": "",
        "id": "q9653",
        "input": "how to raise exponents in python",
        "output": "",
        "rule": [
            "d9653"
        ]
    },
    {
        "instruction": "",
        "id": "q9654",
        "input": "python rotate an array into a circle",
        "output": "",
        "rule": [
            "d9654"
        ]
    },
    {
        "instruction": "",
        "id": "q9655",
        "input": "how to randomly select elemts of a list without repeating them in python",
        "output": "",
        "rule": [
            "d9655"
        ]
    },
    {
        "instruction": "",
        "id": "q9656",
        "input": "python round do with precision",
        "output": "",
        "rule": [
            "d9656"
        ]
    },
    {
        "instruction": "",
        "id": "q9657",
        "input": "python round to decimal places",
        "output": "",
        "rule": [
            "d9657"
        ]
    },
    {
        "instruction": "",
        "id": "q9658",
        "input": "how to read a csv file an make it a matrix python",
        "output": "",
        "rule": [
            "d9658"
        ]
    },
    {
        "instruction": "",
        "id": "q9659",
        "input": "python round to significant figures",
        "output": "",
        "rule": [
            "d9659"
        ]
    },
    {
        "instruction": "",
        "id": "q9660",
        "input": "how to read a file in as integers only in python",
        "output": "",
        "rule": [
            "d9660"
        ]
    },
    {
        "instruction": "",
        "id": "q9661",
        "input": "python run code before exit",
        "output": "",
        "rule": [
            "d9661"
        ]
    },
    {
        "instruction": "",
        "id": "q9662",
        "input": "how to read a file in python as numpy ndarray",
        "output": "",
        "rule": [
            "d9662"
        ]
    },
    {
        "instruction": "",
        "id": "q9663",
        "input": "python run github rest api create pull request",
        "output": "",
        "rule": [
            "d9663"
        ]
    },
    {
        "instruction": "",
        "id": "q9664",
        "input": "how to read a pickle file in python",
        "output": "",
        "rule": [
            "d9664"
        ]
    },
    {
        "instruction": "",
        "id": "q9665",
        "input": "python run individual unit test",
        "output": "",
        "rule": [
            "d9665"
        ]
    },
    {
        "instruction": "",
        "id": "q9666",
        "input": "how to read an html as a plain text in python",
        "output": "",
        "rule": [
            "d9666"
        ]
    },
    {
        "instruction": "",
        "id": "q9667",
        "input": "python s3 get objecs based using prefix",
        "output": "",
        "rule": [
            "d9667"
        ]
    },
    {
        "instruction": "",
        "id": "q9668",
        "input": "how to read contents of a numpy file with python",
        "output": "",
        "rule": [
            "d9668"
        ]
    },
    {
        "instruction": "",
        "id": "q9669",
        "input": "python save a file as save as",
        "output": "",
        "rule": [
            "d9669"
        ]
    },
    {
        "instruction": "",
        "id": "q9670",
        "input": "how to read index of specific line in python",
        "output": "",
        "rule": [
            "d9670"
        ]
    },
    {
        "instruction": "",
        "id": "q9671",
        "input": "python save animation list object has no attribute set animated",
        "output": "",
        "rule": [
            "d9671"
        ]
    },
    {
        "instruction": "",
        "id": "q9672",
        "input": "how to read numbers in a list as integers in python",
        "output": "",
        "rule": [
            "d9672"
        ]
    },
    {
        "instruction": "",
        "id": "q9673",
        "input": "python save ndarray to json",
        "output": "",
        "rule": [
            "d9673"
        ]
    },
    {
        "instruction": "",
        "id": "q9674",
        "input": "how to reference today's date in python",
        "output": "",
        "rule": [
            "d9674"
        ]
    },
    {
        "instruction": "",
        "id": "q9675",
        "input": "python save numpy array to database",
        "output": "",
        "rule": [
            "d9675"
        ]
    },
    {
        "instruction": "",
        "id": "q9676",
        "input": "how to remove accent in python",
        "output": "",
        "rule": [
            "d9676"
        ]
    },
    {
        "instruction": "",
        "id": "q9677",
        "input": "python save numpy array to postgresql",
        "output": "",
        "rule": [
            "d9677"
        ]
    },
    {
        "instruction": "",
        "id": "q9678",
        "input": "how to remove all python environment",
        "output": "",
        "rule": [
            "d9678"
        ]
    },
    {
        "instruction": "",
        "id": "q9679",
        "input": "python save this session",
        "output": "",
        "rule": [
            "d9679"
        ]
    },
    {
        "instruction": "",
        "id": "q9680",
        "input": "how to remove an instance from a list python",
        "output": "",
        "rule": [
            "d9680"
        ]
    },
    {
        "instruction": "",
        "id": "q9681",
        "input": "python save variable into a file",
        "output": "",
        "rule": [
            "d9681"
        ]
    },
    {
        "instruction": "",
        "id": "q9682",
        "input": "how to remove duplicated from a list in python",
        "output": "",
        "rule": [
            "d9682"
        ]
    },
    {
        "instruction": "",
        "id": "q9683",
        "input": "python saving json to file",
        "output": "",
        "rule": [
            "d9683"
        ]
    },
    {
        "instruction": "",
        "id": "q9684",
        "input": "how to remove duplicates from a queryset in python models",
        "output": "",
        "rule": [
            "d9684"
        ]
    },
    {
        "instruction": "",
        "id": "q9685",
        "input": "python says string is nonetype",
        "output": "",
        "rule": [
            "d9685"
        ]
    },
    {
        "instruction": "",
        "id": "q9686",
        "input": "how to remove duplicates without changing order in python",
        "output": "",
        "rule": [
            "d9686"
        ]
    },
    {
        "instruction": "",
        "id": "q9687",
        "input": "python scatter plot color by catergoral",
        "output": "",
        "rule": [
            "d9687"
        ]
    },
    {
        "instruction": "",
        "id": "q9688",
        "input": "python script to close browser",
        "output": "",
        "rule": [
            "d9688"
        ]
    },
    {
        "instruction": "",
        "id": "q9689",
        "input": "how to remove json formate for python and make into dictionary",
        "output": "",
        "rule": [
            "d9689"
        ]
    },
    {
        "instruction": "",
        "id": "q9690",
        "input": "python script to delete s3 files",
        "output": "",
        "rule": [
            "d9690"
        ]
    },
    {
        "instruction": "",
        "id": "q9691",
        "input": "how to remove links with certain characters python3",
        "output": "",
        "rule": [
            "d9691"
        ]
    },
    {
        "instruction": "",
        "id": "q9692",
        "input": "python script to releasing the stdout",
        "output": "",
        "rule": [
            "d9692"
        ]
    },
    {
        "instruction": "",
        "id": "q9693",
        "input": "python script to send multiple pdf attachments",
        "output": "",
        "rule": [
            "d9693"
        ]
    },
    {
        "instruction": "",
        "id": "q9694",
        "input": "how to remove something from an item python",
        "output": "",
        "rule": [
            "d9694"
        ]
    },
    {
        "instruction": "",
        "id": "q9695",
        "input": "python scrollbar 2 canvas",
        "output": "",
        "rule": [
            "d9695"
        ]
    },
    {
        "instruction": "",
        "id": "q9696",
        "input": "how to remove specific letters from a string in python",
        "output": "",
        "rule": [
            "d9696"
        ]
    },
    {
        "instruction": "",
        "id": "q9697",
        "input": "python seconds to hours minutes",
        "output": "",
        "rule": [
            "d9697"
        ]
    },
    {
        "instruction": "",
        "id": "q9698",
        "input": "how to remove url from a string in python",
        "output": "",
        "rule": [
            "d9698"
        ]
    },
    {
        "instruction": "",
        "id": "q9699",
        "input": "python see all attributes of a object",
        "output": "",
        "rule": [
            "d9699"
        ]
    },
    {
        "instruction": "",
        "id": "q9700",
        "input": "how to replace \\ in pythong",
        "output": "",
        "rule": [
            "d9700"
        ]
    },
    {
        "instruction": "",
        "id": "q9701",
        "input": "python select count(*) from a table",
        "output": "",
        "rule": [
            "d9701"
        ]
    },
    {
        "instruction": "",
        "id": "q9702",
        "input": "how to replace each value in a column with its log base python",
        "output": "",
        "rule": [
            "d9702"
        ]
    },
    {
        "instruction": "",
        "id": "q9703",
        "input": "python seleniuim scroll into view",
        "output": "",
        "rule": [
            "d9703"
        ]
    },
    {
        "instruction": "",
        "id": "q9704",
        "input": "how to replace multiple with one in python",
        "output": "",
        "rule": [
            "d9704"
        ]
    },
    {
        "instruction": "",
        "id": "q9705",
        "input": "python send data between threads",
        "output": "",
        "rule": [
            "d9705"
        ]
    },
    {
        "instruction": "",
        "id": "q9706",
        "input": "how to reset an object in python",
        "output": "",
        "rule": [
            "d9706"
        ]
    },
    {
        "instruction": "",
        "id": "q9707",
        "input": "python separate string by comma into list",
        "output": "",
        "rule": [
            "d9707"
        ]
    },
    {
        "instruction": "",
        "id": "q9708",
        "input": "how to reset iterator python",
        "output": "",
        "rule": [
            "d9708"
        ]
    },
    {
        "instruction": "",
        "id": "q9709",
        "input": "python serializers django foreign keys",
        "output": "",
        "rule": [
            "d9709"
        ]
    },
    {
        "instruction": "",
        "id": "q9710",
        "input": "how to restart program automatically python",
        "output": "",
        "rule": [
            "d9710"
        ]
    },
    {
        "instruction": "",
        "id": "q9711",
        "input": "python set a method to none",
        "output": "",
        "rule": [
            "d9711"
        ]
    },
    {
        "instruction": "",
        "id": "q9712",
        "input": "how to retrieve s3 file data using its key using python",
        "output": "",
        "rule": [
            "d9712"
        ]
    },
    {
        "instruction": "",
        "id": "q9713",
        "input": "python set axis range",
        "output": "",
        "rule": [
            "d9713"
        ]
    },
    {
        "instruction": "",
        "id": "q9714",
        "input": "how to return the most common value in a list python",
        "output": "",
        "rule": [
            "d9714"
        ]
    },
    {
        "instruction": "",
        "id": "q9715",
        "input": "python set default file path",
        "output": "",
        "rule": [
            "d9715"
        ]
    },
    {
        "instruction": "",
        "id": "q9716",
        "input": "how to reuse python logging config",
        "output": "",
        "rule": [
            "d9716"
        ]
    },
    {
        "instruction": "",
        "id": "q9717",
        "input": "how to reverse the movement of a sprite in python",
        "output": "",
        "rule": [
            "d9717"
        ]
    },
    {
        "instruction": "",
        "id": "q9718",
        "input": "python set local image url",
        "output": "",
        "rule": [
            "d9718"
        ]
    },
    {
        "instruction": "",
        "id": "q9719",
        "input": "how to rotate an array by 63 degrees in python",
        "output": "",
        "rule": [
            "d9719"
        ]
    },
    {
        "instruction": "",
        "id": "q9720",
        "input": "python set output to true",
        "output": "",
        "rule": [
            "d9720"
        ]
    },
    {
        "instruction": "",
        "id": "q9721",
        "input": "how to rotate array 180 in python numpy",
        "output": "",
        "rule": [
            "d9721"
        ]
    },
    {
        "instruction": "",
        "id": "q9722",
        "input": "python set randome state",
        "output": "",
        "rule": [
            "d9722"
        ]
    },
    {
        "instruction": "",
        "id": "q9723",
        "input": "how to round decimals up in python",
        "output": "",
        "rule": [
            "d9723"
        ]
    },
    {
        "instruction": "",
        "id": "q9724",
        "input": "python settrace stack frame",
        "output": "",
        "rule": [
            "d9724"
        ]
    },
    {
        "instruction": "",
        "id": "q9725",
        "input": "how to round off the values stored in a list in python",
        "output": "",
        "rule": [
            "d9725"
        ]
    },
    {
        "instruction": "",
        "id": "q9726",
        "input": "python sha1 of file different",
        "output": "",
        "rule": [
            "d9726"
        ]
    },
    {
        "instruction": "",
        "id": "q9727",
        "input": "how to round up an intager in python",
        "output": "",
        "rule": [
            "d9727"
        ]
    },
    {
        "instruction": "",
        "id": "q9728",
        "input": "python short cut to get cursor to end of line",
        "output": "",
        "rule": [
            "d9728"
        ]
    },
    {
        "instruction": "",
        "id": "q9729",
        "input": "how to run a loop moving background on idle python",
        "output": "",
        "rule": [
            "d9729"
        ]
    },
    {
        "instruction": "",
        "id": "q9730",
        "input": "python show the last 300 records in a data frame",
        "output": "",
        "rule": [
            "d9730"
        ]
    },
    {
        "instruction": "",
        "id": "q9731",
        "input": "how to run python unittest cmd",
        "output": "",
        "rule": [
            "d9731"
        ]
    },
    {
        "instruction": "",
        "id": "q9732",
        "input": "python show time passed in days hours minutes seconds",
        "output": "",
        "rule": [
            "d9732"
        ]
    },
    {
        "instruction": "",
        "id": "q9733",
        "input": "how to save a file from an api token python",
        "output": "",
        "rule": [
            "d9733"
        ]
    },
    {
        "instruction": "",
        "id": "q9734",
        "input": "python sigint kill blocking master process",
        "output": "",
        "rule": [
            "d9734"
        ]
    },
    {
        "instruction": "",
        "id": "q9735",
        "input": "how to save a file on your coumpter given a url python",
        "output": "",
        "rule": [
            "d9735"
        ]
    },
    {
        "instruction": "",
        "id": "q9736",
        "input": "python single byte to int",
        "output": "",
        "rule": [
            "d9736"
        ]
    },
    {
        "instruction": "",
        "id": "q9737",
        "input": "how to save audio as wave file python",
        "output": "",
        "rule": [
            "d9737"
        ]
    },
    {
        "instruction": "",
        "id": "q9738",
        "input": "python singleton lazy initialize",
        "output": "",
        "rule": [
            "d9738"
        ]
    },
    {
        "instruction": "",
        "id": "q9739",
        "input": "python size of numpy array in memory",
        "output": "",
        "rule": [
            "d9739"
        ]
    },
    {
        "instruction": "",
        "id": "q9740",
        "input": "how to see all python functions",
        "output": "",
        "rule": [
            "d9740"
        ]
    },
    {
        "instruction": "",
        "id": "q9741",
        "input": "python skip to next item",
        "output": "",
        "rule": [
            "d9741"
        ]
    },
    {
        "instruction": "",
        "id": "q9742",
        "input": "python slice column numbers",
        "output": "",
        "rule": [
            "d9742"
        ]
    },
    {
        "instruction": "",
        "id": "q9743",
        "input": "python slice notation same as golang",
        "output": "",
        "rule": [
            "d9743"
        ]
    },
    {
        "instruction": "",
        "id": "q9744",
        "input": "how to see common elements in a set python",
        "output": "",
        "rule": [
            "d9744"
        ]
    },
    {
        "instruction": "",
        "id": "q9745",
        "input": "python socket restart after close",
        "output": "",
        "rule": [
            "d9745"
        ]
    },
    {
        "instruction": "",
        "id": "q9746",
        "input": "how to see python code line by line",
        "output": "",
        "rule": [
            "d9746"
        ]
    },
    {
        "instruction": "",
        "id": "q9747",
        "input": "python socketio and flask socketio",
        "output": "",
        "rule": [
            "d9747"
        ]
    },
    {
        "instruction": "",
        "id": "q9748",
        "input": "how to segment object from image using pil in python",
        "output": "",
        "rule": [
            "d9748"
        ]
    },
    {
        "instruction": "",
        "id": "q9749",
        "input": "python solve matrix unknowns on both sides",
        "output": "",
        "rule": [
            "d9749"
        ]
    },
    {
        "instruction": "",
        "id": "q9750",
        "input": "how to select n elements randomly from a list python",
        "output": "",
        "rule": [
            "d9750"
        ]
    },
    {
        "instruction": "",
        "id": "q9751",
        "input": "python sortlevels in multi index by list",
        "output": "",
        "rule": [
            "d9751"
        ]
    },
    {
        "instruction": "",
        "id": "q9752",
        "input": "how to set a default value if no value given in a setter function for a clas python",
        "output": "",
        "rule": [
            "d9752"
        ]
    },
    {
        "instruction": "",
        "id": "q9753",
        "input": "python spacing after for",
        "output": "",
        "rule": [
            "d9753"
        ]
    },
    {
        "instruction": "",
        "id": "q9754",
        "input": "how to set a python function to have a start time",
        "output": "",
        "rule": [
            "d9754"
        ]
    },
    {
        "instruction": "",
        "id": "q9755",
        "input": "python specify a type literal",
        "output": "",
        "rule": [
            "d9755"
        ]
    },
    {
        "instruction": "",
        "id": "q9756",
        "input": "how to set a tuple as a paramter in python",
        "output": "",
        "rule": [
            "d9756"
        ]
    },
    {
        "instruction": "",
        "id": "q9757",
        "input": "python splinter choose combobox",
        "output": "",
        "rule": [
            "d9757"
        ]
    },
    {
        "instruction": "",
        "id": "q9758",
        "input": "how to set a variable with a color python",
        "output": "",
        "rule": [
            "d9758"
        ]
    },
    {
        "instruction": "",
        "id": "q9759",
        "input": "python split a list at each word",
        "output": "",
        "rule": [
            "d9759"
        ]
    },
    {
        "instruction": "",
        "id": "q9760",
        "input": "how to set an image as background in python'",
        "output": "",
        "rule": [
            "d9760"
        ]
    },
    {
        "instruction": "",
        "id": "q9761",
        "input": "python split iterate by size",
        "output": "",
        "rule": [
            "d9761"
        ]
    },
    {
        "instruction": "",
        "id": "q9762",
        "input": "how to set global variable by name in python",
        "output": "",
        "rule": [
            "d9762"
        ]
    },
    {
        "instruction": "",
        "id": "q9763",
        "input": "python split list into sublists on token",
        "output": "",
        "rule": [
            "d9763"
        ]
    },
    {
        "instruction": "",
        "id": "q9764",
        "input": "how to set limits in python on plot",
        "output": "",
        "rule": [
            "d9764"
        ]
    },
    {
        "instruction": "",
        "id": "q9765",
        "input": "python split prefix from suffix",
        "output": "",
        "rule": [
            "d9765"
        ]
    },
    {
        "instruction": "",
        "id": "q9766",
        "input": "how to set str into float python",
        "output": "",
        "rule": [
            "d9766"
        ]
    },
    {
        "instruction": "",
        "id": "q9767",
        "input": "python split string by len list",
        "output": "",
        "rule": [
            "d9767"
        ]
    },
    {
        "instruction": "",
        "id": "q9768",
        "input": "how to set the precision of a float python",
        "output": "",
        "rule": [
            "d9768"
        ]
    },
    {
        "instruction": "",
        "id": "q9769",
        "input": "how to set y axis limits in python",
        "output": "",
        "rule": [
            "d9769"
        ]
    },
    {
        "instruction": "",
        "id": "q9770",
        "input": "python sqlalchemy compile to raw sql",
        "output": "",
        "rule": [
            "d9770"
        ]
    },
    {
        "instruction": "",
        "id": "q9771",
        "input": "how to shift print to left or right in python",
        "output": "",
        "rule": [
            "d9771"
        ]
    },
    {
        "instruction": "",
        "id": "q9772",
        "input": "python sqlalchemy create database and tables",
        "output": "",
        "rule": [
            "d9772"
        ]
    },
    {
        "instruction": "",
        "id": "q9773",
        "input": "how to show area of shapes in an image python",
        "output": "",
        "rule": [
            "d9773"
        ]
    },
    {
        "instruction": "",
        "id": "q9774",
        "input": "python sqlalchemy delete row",
        "output": "",
        "rule": [
            "d9774"
        ]
    },
    {
        "instruction": "",
        "id": "q9775",
        "input": "how to show certain plots in python",
        "output": "",
        "rule": [
            "d9775"
        ]
    },
    {
        "instruction": "",
        "id": "q9776",
        "input": "python sqlite build a dictonary",
        "output": "",
        "rule": [
            "d9776"
        ]
    },
    {
        "instruction": "",
        "id": "q9777",
        "input": "how to show error msg in else python",
        "output": "",
        "rule": [
            "d9777"
        ]
    },
    {
        "instruction": "",
        "id": "q9778",
        "input": "python square but keep negative",
        "output": "",
        "rule": [
            "d9778"
        ]
    },
    {
        "instruction": "",
        "id": "q9779",
        "input": "how to show progress bar in python for some code",
        "output": "",
        "rule": [
            "d9779"
        ]
    },
    {
        "instruction": "",
        "id": "q9780",
        "input": "python ssh stdin is not a tty",
        "output": "",
        "rule": [
            "d9780"
        ]
    },
    {
        "instruction": "",
        "id": "q9781",
        "input": "how to show shape of a variable in python",
        "output": "",
        "rule": [
            "d9781"
        ]
    },
    {
        "instruction": "",
        "id": "q9782",
        "input": "python stack information accessing caller's variables",
        "output": "",
        "rule": [
            "d9782"
        ]
    },
    {
        "instruction": "",
        "id": "q9783",
        "input": "how to show spectogram in python",
        "output": "",
        "rule": [
            "d9783"
        ]
    },
    {
        "instruction": "",
        "id": "q9784",
        "input": "python stack on list of columns",
        "output": "",
        "rule": [
            "d9784"
        ]
    },
    {
        "instruction": "",
        "id": "q9785",
        "input": "how to show text on edge in networkx python",
        "output": "",
        "rule": [
            "d9785"
        ]
    },
    {
        "instruction": "",
        "id": "q9786",
        "input": "python standard deviation function numpy",
        "output": "",
        "rule": [
            "d9786"
        ]
    },
    {
        "instruction": "",
        "id": "q9787",
        "input": "how to show type in python",
        "output": "",
        "rule": [
            "d9787"
        ]
    },
    {
        "instruction": "",
        "id": "q9788",
        "input": "python standard deviation of a signal",
        "output": "",
        "rule": [
            "d9788"
        ]
    },
    {
        "instruction": "",
        "id": "q9789",
        "input": "how to show x axis clear in mathplot python in scatterplot",
        "output": "",
        "rule": [
            "d9789"
        ]
    },
    {
        "instruction": "",
        "id": "q9790",
        "input": "python stdin read blocking",
        "output": "",
        "rule": [
            "d9790"
        ]
    },
    {
        "instruction": "",
        "id": "q9791",
        "input": "how to shuffle all arrays the same way python",
        "output": "",
        "rule": [
            "d9791"
        ]
    },
    {
        "instruction": "",
        "id": "q9792",
        "input": "python stdout to screen",
        "output": "",
        "rule": [
            "d9792"
        ]
    },
    {
        "instruction": "",
        "id": "q9793",
        "input": "how to shut down proccess in linux with python code",
        "output": "",
        "rule": [
            "d9793"
        ]
    },
    {
        "instruction": "",
        "id": "q9794",
        "input": "python stop celery task",
        "output": "",
        "rule": [
            "d9794"
        ]
    },
    {
        "instruction": "",
        "id": "q9795",
        "input": "how to slice column python",
        "output": "",
        "rule": [
            "d9795"
        ]
    },
    {
        "instruction": "",
        "id": "q9796",
        "input": "python stops working with tensorflow",
        "output": "",
        "rule": [
            "d9796"
        ]
    },
    {
        "instruction": "",
        "id": "q9797",
        "input": "how to smooth function in python",
        "output": "",
        "rule": [
            "d9797"
        ]
    },
    {
        "instruction": "",
        "id": "q9798",
        "input": "python store files in s3 buckets and retrieve files from aws s3 buckets",
        "output": "",
        "rule": [
            "d9798"
        ]
    },
    {
        "instruction": "",
        "id": "q9799",
        "input": "python str to object reference eval",
        "output": "",
        "rule": [
            "d9799"
        ]
    },
    {
        "instruction": "",
        "id": "q9800",
        "input": "how to sorted python list self",
        "output": "",
        "rule": [
            "d9800"
        ]
    },
    {
        "instruction": "",
        "id": "q9801",
        "input": "python stream json to a file",
        "output": "",
        "rule": [
            "d9801"
        ]
    },
    {
        "instruction": "",
        "id": "q9802",
        "input": "how to specify distance metric for k means in python",
        "output": "",
        "rule": [
            "d9802"
        ]
    },
    {
        "instruction": "",
        "id": "q9803",
        "input": "python string converstions dictionary",
        "output": "",
        "rule": [
            "d9803"
        ]
    },
    {
        "instruction": "",
        "id": "q9804",
        "input": "how to split large list to small lists in python",
        "output": "",
        "rule": [
            "d9804"
        ]
    },
    {
        "instruction": "",
        "id": "q9805",
        "input": "python string for path on windows",
        "output": "",
        "rule": [
            "d9805"
        ]
    },
    {
        "instruction": "",
        "id": "q9806",
        "input": "how to split the iterator object into chunks python",
        "output": "",
        "rule": [
            "d9806"
        ]
    },
    {
        "instruction": "",
        "id": "q9807",
        "input": "python string hamming distance fast",
        "output": "",
        "rule": [
            "d9807"
        ]
    },
    {
        "instruction": "",
        "id": "q9808",
        "input": "how to split words in a list in python",
        "output": "",
        "rule": [
            "d9808"
        ]
    },
    {
        "instruction": "",
        "id": "q9809",
        "input": "python string is bool",
        "output": "",
        "rule": [
            "d9809"
        ]
    },
    {
        "instruction": "",
        "id": "q9810",
        "input": "how to sql escape string python",
        "output": "",
        "rule": [
            "d9810"
        ]
    },
    {
        "instruction": "",
        "id": "q9811",
        "input": "python string of bytes to numpy",
        "output": "",
        "rule": [
            "d9811"
        ]
    },
    {
        "instruction": "",
        "id": "q9812",
        "input": "how to standardize an array in python",
        "output": "",
        "rule": [
            "d9812"
        ]
    },
    {
        "instruction": "",
        "id": "q9813",
        "input": "python string remove substring at begin",
        "output": "",
        "rule": [
            "d9813"
        ]
    },
    {
        "instruction": "",
        "id": "q9814",
        "input": "how to stop asking for input python",
        "output": "",
        "rule": [
            "d9814"
        ]
    },
    {
        "instruction": "",
        "id": "q9815",
        "input": "python string split to small chunks",
        "output": "",
        "rule": [
            "d9815"
        ]
    },
    {
        "instruction": "",
        "id": "q9816",
        "input": "how to stop function after attempts in python",
        "output": "",
        "rule": [
            "d9816"
        ]
    },
    {
        "instruction": "",
        "id": "q9817",
        "input": "python string strip whitespace docs",
        "output": "",
        "rule": [
            "d9817"
        ]
    },
    {
        "instruction": "",
        "id": "q9818",
        "input": "how to stop python pool gracefully with keyboard inturrupt",
        "output": "",
        "rule": [
            "d9818"
        ]
    },
    {
        "instruction": "",
        "id": "q9819",
        "input": "python string to ctype",
        "output": "",
        "rule": [
            "d9819"
        ]
    },
    {
        "instruction": "",
        "id": "q9820",
        "input": "python strip ' ' from list",
        "output": "",
        "rule": [
            "d9820"
        ]
    },
    {
        "instruction": "",
        "id": "q9821",
        "input": "how to strip quotes from a list of strings in python",
        "output": "",
        "rule": [
            "d9821"
        ]
    },
    {
        "instruction": "",
        "id": "q9822",
        "input": "python subplot2grid x limit only",
        "output": "",
        "rule": [
            "d9822"
        ]
    },
    {
        "instruction": "",
        "id": "q9823",
        "input": "how to take a transpose of a matrix python",
        "output": "",
        "rule": [
            "d9823"
        ]
    },
    {
        "instruction": "",
        "id": "q9824",
        "input": "python subprocess run command in background",
        "output": "",
        "rule": [
            "d9824"
        ]
    },
    {
        "instruction": "",
        "id": "q9825",
        "input": "how to take input from stdin in python",
        "output": "",
        "rule": [
            "d9825"
        ]
    },
    {
        "instruction": "",
        "id": "q9826",
        "input": "python subprocess send stdin",
        "output": "",
        "rule": [
            "d9826"
        ]
    },
    {
        "instruction": "",
        "id": "q9827",
        "input": "how to tell if a file line is blank in python",
        "output": "",
        "rule": [
            "d9827"
        ]
    },
    {
        "instruction": "",
        "id": "q9828",
        "input": "python substract timedelta from datetime64",
        "output": "",
        "rule": [
            "d9828"
        ]
    },
    {
        "instruction": "",
        "id": "q9829",
        "input": "how to tell if a python script has admin privaliges",
        "output": "",
        "rule": [
            "d9829"
        ]
    },
    {
        "instruction": "",
        "id": "q9830",
        "input": "how to tell if a string contains something python",
        "output": "",
        "rule": [
            "d9830"
        ]
    },
    {
        "instruction": "",
        "id": "q9831",
        "input": "python switch on enum type",
        "output": "",
        "rule": [
            "d9831"
        ]
    },
    {
        "instruction": "",
        "id": "q9832",
        "input": "how to tell if its an email using regex python",
        "output": "",
        "rule": [
            "d9832"
        ]
    },
    {
        "instruction": "",
        "id": "q9833",
        "input": "python syntax to access the memory address",
        "output": "",
        "rule": [
            "d9833"
        ]
    },
    {
        "instruction": "",
        "id": "q9834",
        "input": "python sys argv append",
        "output": "",
        "rule": [
            "d9834"
        ]
    },
    {
        "instruction": "",
        "id": "q9835",
        "input": "how to test atexit python",
        "output": "",
        "rule": [
            "d9835"
        ]
    },
    {
        "instruction": "",
        "id": "q9836",
        "input": "python sys argv space in args",
        "output": "",
        "rule": [
            "d9836"
        ]
    },
    {
        "instruction": "",
        "id": "q9837",
        "input": "how to test if a list is sorted in python",
        "output": "",
        "rule": [
            "d9837"
        ]
    },
    {
        "instruction": "",
        "id": "q9838",
        "input": "python sys stdin read enter",
        "output": "",
        "rule": [
            "d9838"
        ]
    },
    {
        "instruction": "",
        "id": "q9839",
        "input": "how to test if two arrays are equal python",
        "output": "",
        "rule": [
            "d9839"
        ]
    },
    {
        "instruction": "",
        "id": "q9840",
        "input": "how to test tensorflow python",
        "output": "",
        "rule": [
            "d9840"
        ]
    },
    {
        "instruction": "",
        "id": "q9841",
        "input": "python table into dictionary of lists",
        "output": "",
        "rule": [
            "d9841"
        ]
    },
    {
        "instruction": "",
        "id": "q9842",
        "input": "how to transform a string in a float python",
        "output": "",
        "rule": [
            "d9842"
        ]
    },
    {
        "instruction": "",
        "id": "q9843",
        "input": "python table select top row and column",
        "output": "",
        "rule": [
            "d9843"
        ]
    },
    {
        "instruction": "",
        "id": "q9844",
        "input": "how to traverse tree in python",
        "output": "",
        "rule": [
            "d9844"
        ]
    },
    {
        "instruction": "",
        "id": "q9845",
        "input": "python take n elements from list",
        "output": "",
        "rule": [
            "d9845"
        ]
    },
    {
        "instruction": "",
        "id": "q9846",
        "input": "how to turn a range into a slice python",
        "output": "",
        "rule": [
            "d9846"
        ]
    },
    {
        "instruction": "",
        "id": "q9847",
        "input": "python tell if is callable",
        "output": "",
        "rule": [
            "d9847"
        ]
    },
    {
        "instruction": "",
        "id": "q9848",
        "input": "how to turn a string into a dictionary with values python",
        "output": "",
        "rule": [
            "d9848"
        ]
    },
    {
        "instruction": "",
        "id": "q9849",
        "input": "python tell windows or linux",
        "output": "",
        "rule": [
            "d9849"
        ]
    },
    {
        "instruction": "",
        "id": "q9850",
        "input": "how to turn array into a table python",
        "output": "",
        "rule": [
            "d9850"
        ]
    },
    {
        "instruction": "",
        "id": "q9851",
        "input": "python tensorflow object detection gpu slow ingrestion",
        "output": "",
        "rule": [
            "d9851"
        ]
    },
    {
        "instruction": "",
        "id": "q9852",
        "input": "how to turn numpy array into python string",
        "output": "",
        "rule": [
            "d9852"
        ]
    },
    {
        "instruction": "",
        "id": "q9853",
        "input": "python tensorflow object detection with self dataset",
        "output": "",
        "rule": [
            "d9853"
        ]
    },
    {
        "instruction": "",
        "id": "q9854",
        "input": "how to turn python list to rdd",
        "output": "",
        "rule": [
            "d9854"
        ]
    },
    {
        "instruction": "",
        "id": "q9855",
        "input": "python test a string is valid path",
        "output": "",
        "rule": [
            "d9855"
        ]
    },
    {
        "instruction": "",
        "id": "q9856",
        "input": "how to type infinity in python",
        "output": "",
        "rule": [
            "d9856"
        ]
    },
    {
        "instruction": "",
        "id": "q9857",
        "input": "python test if object has attribute attribute",
        "output": "",
        "rule": [
            "d9857"
        ]
    },
    {
        "instruction": "",
        "id": "q9858",
        "input": "how to type logarithms into python",
        "output": "",
        "rule": [
            "d9858"
        ]
    },
    {
        "instruction": "",
        "id": "q9859",
        "input": "python test logical type",
        "output": "",
        "rule": [
            "d9859"
        ]
    },
    {
        "instruction": "",
        "id": "q9860",
        "input": "how to update screen in python",
        "output": "",
        "rule": [
            "d9860"
        ]
    },
    {
        "instruction": "",
        "id": "q9861",
        "input": "python test mock propertymock setter",
        "output": "",
        "rule": [
            "d9861"
        ]
    },
    {
        "instruction": "",
        "id": "q9862",
        "input": "python test nose output",
        "output": "",
        "rule": [
            "d9862"
        ]
    },
    {
        "instruction": "",
        "id": "q9863",
        "input": "how to use different gpu in python tensorflow",
        "output": "",
        "rule": [
            "d9863"
        ]
    },
    {
        "instruction": "",
        "id": "q9864",
        "input": "python test telnet port only",
        "output": "",
        "rule": [
            "d9864"
        ]
    },
    {
        "instruction": "",
        "id": "q9865",
        "input": "python test the type of input",
        "output": "",
        "rule": [
            "d9865"
        ]
    },
    {
        "instruction": "",
        "id": "q9866",
        "input": "how to validate xml against xsd in python",
        "output": "",
        "rule": [
            "d9866"
        ]
    },
    {
        "instruction": "",
        "id": "q9867",
        "input": "how to verify that a url is valid in python",
        "output": "",
        "rule": [
            "d9867"
        ]
    },
    {
        "instruction": "",
        "id": "q9868",
        "input": "python the scope of setting random seed",
        "output": "",
        "rule": [
            "d9868"
        ]
    },
    {
        "instruction": "",
        "id": "q9869",
        "input": "how to write a fits file python 3",
        "output": "",
        "rule": [
            "d9869"
        ]
    },
    {
        "instruction": "",
        "id": "q9870",
        "input": "python thread stop self",
        "output": "",
        "rule": [
            "d9870"
        ]
    },
    {
        "instruction": "",
        "id": "q9871",
        "input": "how to write and save html file in python",
        "output": "",
        "rule": [
            "d9871"
        ]
    },
    {
        "instruction": "",
        "id": "q9872",
        "input": "python threading clean up threads",
        "output": "",
        "rule": [
            "d9872"
        ]
    },
    {
        "instruction": "",
        "id": "q9873",
        "input": "how to write code for complex number in python",
        "output": "",
        "rule": [
            "d9873"
        ]
    },
    {
        "instruction": "",
        "id": "q9874",
        "input": "python time stampe type to datetime type",
        "output": "",
        "rule": [
            "d9874"
        ]
    },
    {
        "instruction": "",
        "id": "q9875",
        "input": "how to write headers for a column in python",
        "output": "",
        "rule": [
            "d9875"
        ]
    },
    {
        "instruction": "",
        "id": "q9876",
        "input": "how to zip folders into a zipfile with python",
        "output": "",
        "rule": [
            "d9876"
        ]
    },
    {
        "instruction": "",
        "id": "q9877",
        "input": "python timestamp seconds to datetime",
        "output": "",
        "rule": [
            "d9877"
        ]
    },
    {
        "instruction": "",
        "id": "q9878",
        "input": "how use python ctypes byref and pointer",
        "output": "",
        "rule": [
            "d9878"
        ]
    },
    {
        "instruction": "",
        "id": "q9879",
        "input": "python timezone no utcoffset",
        "output": "",
        "rule": [
            "d9879"
        ]
    },
    {
        "instruction": "",
        "id": "q9880",
        "input": "howto delete object on image using python",
        "output": "",
        "rule": [
            "d9880"
        ]
    },
    {
        "instruction": "",
        "id": "q9881",
        "input": "python title string not of from",
        "output": "",
        "rule": [
            "d9881"
        ]
    },
    {
        "instruction": "",
        "id": "q9882",
        "input": "idex of max in an array python",
        "output": "",
        "rule": [
            "d9882"
        ]
    },
    {
        "instruction": "",
        "id": "q9883",
        "input": "python tk select a folder",
        "output": "",
        "rule": [
            "d9883"
        ]
    },
    {
        "instruction": "",
        "id": "q9884",
        "input": "if attribute is calable python",
        "output": "",
        "rule": [
            "d9884"
        ]
    },
    {
        "instruction": "",
        "id": "q9885",
        "input": "python tkinter canvas get scrollregion",
        "output": "",
        "rule": [
            "d9885"
        ]
    },
    {
        "instruction": "",
        "id": "q9886",
        "input": "if column exists python",
        "output": "",
        "rule": [
            "d9886"
        ]
    },
    {
        "instruction": "",
        "id": "q9887",
        "input": "python tkinter choose folder button",
        "output": "",
        "rule": [
            "d9887"
        ]
    },
    {
        "instruction": "",
        "id": "q9888",
        "input": "if file is not exist then create in python",
        "output": "",
        "rule": [
            "d9888"
        ]
    },
    {
        "instruction": "",
        "id": "q9889",
        "input": "python tkinter popup window with scrollbar",
        "output": "",
        "rule": [
            "d9889"
        ]
    },
    {
        "instruction": "",
        "id": "q9890",
        "input": "if matching a keyword store line to variable python",
        "output": "",
        "rule": [
            "d9890"
        ]
    },
    {
        "instruction": "",
        "id": "q9891",
        "input": "python tkinter sunken scrollbar",
        "output": "",
        "rule": [
            "d9891"
        ]
    },
    {
        "instruction": "",
        "id": "q9892",
        "input": "if syntax with multiple conditions for python 3",
        "output": "",
        "rule": [
            "d9892"
        ]
    },
    {
        "instruction": "",
        "id": "q9893",
        "input": "python to dict if only one item",
        "output": "",
        "rule": [
            "d9893"
        ]
    },
    {
        "instruction": "",
        "id": "q9894",
        "input": "if user redirect python form security",
        "output": "",
        "rule": [
            "d9894"
        ]
    },
    {
        "instruction": "",
        "id": "q9895",
        "input": "python to normalize an array",
        "output": "",
        "rule": [
            "d9895"
        ]
    },
    {
        "instruction": "",
        "id": "q9896",
        "input": "iinitiliazing a veriable as array in python",
        "output": "",
        "rule": [
            "d9896"
        ]
    },
    {
        "instruction": "",
        "id": "q9897",
        "input": "python to voltdb timestamp",
        "output": "",
        "rule": [
            "d9897"
        ]
    },
    {
        "instruction": "",
        "id": "q9898",
        "input": "image segmentation data augment python",
        "output": "",
        "rule": [
            "d9898"
        ]
    },
    {
        "instruction": "",
        "id": "q9899",
        "input": "python trace function calls",
        "output": "",
        "rule": [
            "d9899"
        ]
    },
    {
        "instruction": "",
        "id": "q9900",
        "input": "implement 2d convolution python",
        "output": "",
        "rule": [
            "d9900"
        ]
    },
    {
        "instruction": "",
        "id": "q9901",
        "input": "python traceback get string",
        "output": "",
        "rule": [
            "d9901"
        ]
    },
    {
        "instruction": "",
        "id": "q9902",
        "input": "imshow aspect ratio python",
        "output": "",
        "rule": [
            "d9902"
        ]
    },
    {
        "instruction": "",
        "id": "q9903",
        "input": "python traceback to string",
        "output": "",
        "rule": [
            "d9903"
        ]
    },
    {
        "instruction": "",
        "id": "q9904",
        "input": "in a python range how to set a step that increases by 1",
        "output": "",
        "rule": [
            "d9904"
        ]
    },
    {
        "instruction": "",
        "id": "q9905",
        "input": "python transpose first column",
        "output": "",
        "rule": [
            "d9905"
        ]
    },
    {
        "instruction": "",
        "id": "q9906",
        "input": "in python differentiate pass and comment line",
        "output": "",
        "rule": [
            "d9906"
        ]
    },
    {
        "instruction": "",
        "id": "q9907",
        "input": "python tree max depth",
        "output": "",
        "rule": [
            "d9907"
        ]
    },
    {
        "instruction": "",
        "id": "q9908",
        "input": "in python, what does tell method of a file object do",
        "output": "",
        "rule": [
            "d9908"
        ]
    },
    {
        "instruction": "",
        "id": "q9909",
        "input": "python trim whitespaces in between words",
        "output": "",
        "rule": [
            "d9909"
        ]
    },
    {
        "instruction": "",
        "id": "q9910",
        "input": "inbuilt dummy veriable creation function in python",
        "output": "",
        "rule": [
            "d9910"
        ]
    },
    {
        "instruction": "",
        "id": "q9911",
        "input": "python troposphere s3 session role principal",
        "output": "",
        "rule": [
            "d9911"
        ]
    },
    {
        "instruction": "",
        "id": "q9912",
        "input": "index of an element in a list in python",
        "output": "",
        "rule": [
            "d9912"
        ]
    },
    {
        "instruction": "",
        "id": "q9913",
        "input": "python try block create a scope",
        "output": "",
        "rule": [
            "d9913"
        ]
    },
    {
        "instruction": "",
        "id": "q9914",
        "input": "index python parantheses or brackets",
        "output": "",
        "rule": [
            "d9914"
        ]
    },
    {
        "instruction": "",
        "id": "q9915",
        "input": "python try excpetion finally block",
        "output": "",
        "rule": [
            "d9915"
        ]
    },
    {
        "instruction": "",
        "id": "q9916",
        "input": "instance attribute not recognized python",
        "output": "",
        "rule": [
            "d9916"
        ]
    },
    {
        "instruction": "",
        "id": "q9917",
        "input": "python try in a loop",
        "output": "",
        "rule": [
            "d9917"
        ]
    },
    {
        "instruction": "",
        "id": "q9918",
        "input": "integrate python code ito html",
        "output": "",
        "rule": [
            "d9918"
        ]
    },
    {
        "instruction": "",
        "id": "q9919",
        "input": "python tuple print string",
        "output": "",
        "rule": [
            "d9919"
        ]
    },
    {
        "instruction": "",
        "id": "q9920",
        "input": "interchange axis histogram in python",
        "output": "",
        "rule": [
            "d9920"
        ]
    },
    {
        "instruction": "",
        "id": "q9921",
        "input": "python turn a string into a tuple",
        "output": "",
        "rule": [
            "d9921"
        ]
    },
    {
        "instruction": "",
        "id": "q9922",
        "input": "invalid syntax python slice",
        "output": "",
        "rule": [
            "d9922"
        ]
    },
    {
        "instruction": "",
        "id": "q9923",
        "input": "invert key value pairs dictionary python",
        "output": "",
        "rule": [
            "d9923"
        ]
    },
    {
        "instruction": "",
        "id": "q9924",
        "input": "python turn array into sentence",
        "output": "",
        "rule": [
            "d9924"
        ]
    },
    {
        "instruction": "",
        "id": "q9925",
        "input": "is nargs allowed in custom action argparse python",
        "output": "",
        "rule": [
            "d9925"
        ]
    },
    {
        "instruction": "",
        "id": "q9926",
        "input": "python turn dic into string",
        "output": "",
        "rule": [
            "d9926"
        ]
    },
    {
        "instruction": "",
        "id": "q9927",
        "input": "python turn list to rdd",
        "output": "",
        "rule": [
            "d9927"
        ]
    },
    {
        "instruction": "",
        "id": "q9928",
        "input": "is there any wrapper that can ensure to use matlab's functions in python",
        "output": "",
        "rule": [
            "d9928"
        ]
    },
    {
        "instruction": "",
        "id": "q9929",
        "input": "python turn self into list",
        "output": "",
        "rule": [
            "d9929"
        ]
    },
    {
        "instruction": "",
        "id": "q9930",
        "input": "is using relative path safe python",
        "output": "",
        "rule": [
            "d9930"
        ]
    },
    {
        "instruction": "",
        "id": "q9931",
        "input": "iterate ndarray without loop python",
        "output": "",
        "rule": [
            "d9931"
        ]
    },
    {
        "instruction": "",
        "id": "q9932",
        "input": "iterate through files in a directory python\\",
        "output": "",
        "rule": [
            "d9932"
        ]
    },
    {
        "instruction": "",
        "id": "q9933",
        "input": "python type hinting return method",
        "output": "",
        "rule": [
            "d9933"
        ]
    },
    {
        "instruction": "",
        "id": "q9934",
        "input": "iterating over indices of a string in python",
        "output": "",
        "rule": [
            "d9934"
        ]
    },
    {
        "instruction": "",
        "id": "q9935",
        "input": "python type is a type",
        "output": "",
        "rule": [
            "d9935"
        ]
    },
    {
        "instruction": "",
        "id": "q9936",
        "input": "iterating through values to produce a final sum in a database python",
        "output": "",
        "rule": [
            "d9936"
        ]
    },
    {
        "instruction": "",
        "id": "q9937",
        "input": "python underscore to camelcase",
        "output": "",
        "rule": [
            "d9937"
        ]
    },
    {
        "instruction": "",
        "id": "q9938",
        "input": "python unique items of a list",
        "output": "",
        "rule": [
            "d9938"
        ]
    },
    {
        "instruction": "",
        "id": "q9939",
        "input": "ive packet capture and create pcap using pyshark in python",
        "output": "",
        "rule": [
            "d9939"
        ]
    },
    {
        "instruction": "",
        "id": "q9940",
        "input": "python unit test assertequals",
        "output": "",
        "rule": [
            "d9940"
        ]
    },
    {
        "instruction": "",
        "id": "q9941",
        "input": "jacobian of function in python",
        "output": "",
        "rule": [
            "d9941"
        ]
    },
    {
        "instruction": "",
        "id": "q9942",
        "input": "python unit test rebuild project",
        "output": "",
        "rule": [
            "d9942"
        ]
    },
    {
        "instruction": "",
        "id": "q9943",
        "input": "java api to run python code",
        "output": "",
        "rule": [
            "d9943"
        ]
    },
    {
        "instruction": "",
        "id": "q9944",
        "input": "python unittest assertregex caseinsesitive",
        "output": "",
        "rule": [
            "d9944"
        ]
    },
    {
        "instruction": "",
        "id": "q9945",
        "input": "java compress and python zlib compress result don't be same",
        "output": "",
        "rule": [
            "d9945"
        ]
    },
    {
        "instruction": "",
        "id": "q9946",
        "input": "java runtime calling python script",
        "output": "",
        "rule": [
            "d9946"
        ]
    },
    {
        "instruction": "",
        "id": "q9947",
        "input": "python unittest not discovered",
        "output": "",
        "rule": [
            "d9947"
        ]
    },
    {
        "instruction": "",
        "id": "q9948",
        "input": "javascript equivalent libraries for python",
        "output": "",
        "rule": [
            "d9948"
        ]
    },
    {
        "instruction": "",
        "id": "q9949",
        "input": "python unresolved reference local folder",
        "output": "",
        "rule": [
            "d9949"
        ]
    },
    {
        "instruction": "",
        "id": "q9950",
        "input": "jinja template not found python",
        "output": "",
        "rule": [
            "d9950"
        ]
    },
    {
        "instruction": "",
        "id": "q9951",
        "input": "python unsupported operand types for *",
        "output": "",
        "rule": [
            "d9951"
        ]
    },
    {
        "instruction": "",
        "id": "q9952",
        "input": "python update dict multiple values",
        "output": "",
        "rule": [
            "d9952"
        ]
    },
    {
        "instruction": "",
        "id": "q9953",
        "input": "join list of value sinto a string python",
        "output": "",
        "rule": [
            "d9953"
        ]
    },
    {
        "instruction": "",
        "id": "q9954",
        "input": "python update dict using variable",
        "output": "",
        "rule": [
            "d9954"
        ]
    },
    {
        "instruction": "",
        "id": "q9955",
        "input": "json to a table view in python",
        "output": "",
        "rule": [
            "d9955"
        ]
    },
    {
        "instruction": "",
        "id": "q9956",
        "input": "python updating a property in a dict",
        "output": "",
        "rule": [
            "d9956"
        ]
    },
    {
        "instruction": "",
        "id": "q9957",
        "input": "kafka python consumer not working",
        "output": "",
        "rule": [
            "d9957"
        ]
    },
    {
        "instruction": "",
        "id": "q9958",
        "input": "python url without openning browser window",
        "output": "",
        "rule": [
            "d9958"
        ]
    },
    {
        "instruction": "",
        "id": "q9959",
        "input": "keep track of how long a function has been running python",
        "output": "",
        "rule": [
            "d9959"
        ]
    },
    {
        "instruction": "",
        "id": "q9960",
        "input": "python urllib get file size",
        "output": "",
        "rule": [
            "d9960"
        ]
    },
    {
        "instruction": "",
        "id": "q9961",
        "input": "kill a task in python",
        "output": "",
        "rule": [
            "d9961"
        ]
    },
    {
        "instruction": "",
        "id": "q9962",
        "input": "python urllib quote plus",
        "output": "",
        "rule": [
            "d9962"
        ]
    },
    {
        "instruction": "",
        "id": "q9963",
        "input": "kill all python instances",
        "output": "",
        "rule": [
            "d9963"
        ]
    },
    {
        "instruction": "",
        "id": "q9964",
        "input": "python urlparse query string",
        "output": "",
        "rule": [
            "d9964"
        ]
    },
    {
        "instruction": "",
        "id": "q9965",
        "input": "kill all python processes from python",
        "output": "",
        "rule": [
            "d9965"
        ]
    },
    {
        "instruction": "",
        "id": "q9966",
        "input": "kwargs inside contructor python",
        "output": "",
        "rule": [
            "d9966"
        ]
    },
    {
        "instruction": "",
        "id": "q9967",
        "input": "python use pretty print to set encoding of json",
        "output": "",
        "rule": [
            "d9967"
        ]
    },
    {
        "instruction": "",
        "id": "q9968",
        "input": "python using or operation with in",
        "output": "",
        "rule": [
            "d9968"
        ]
    },
    {
        "instruction": "",
        "id": "q9969",
        "input": "legend title showing up as none python",
        "output": "",
        "rule": [
            "d9969"
        ]
    },
    {
        "instruction": "",
        "id": "q9970",
        "input": "letter count in a string stored in a dictionary python",
        "output": "",
        "rule": [
            "d9970"
        ]
    },
    {
        "instruction": "",
        "id": "q9971",
        "input": "python utf8 decode base64 decoded string",
        "output": "",
        "rule": [
            "d9971"
        ]
    },
    {
        "instruction": "",
        "id": "q9972",
        "input": "limit y axis plot python",
        "output": "",
        "rule": [
            "d9972"
        ]
    },
    {
        "instruction": "",
        "id": "q9973",
        "input": "python uuid to base64",
        "output": "",
        "rule": [
            "d9973"
        ]
    },
    {
        "instruction": "",
        "id": "q9974",
        "input": "lines that start with exactly 7 spaces are treated as comments python",
        "output": "",
        "rule": [
            "d9974"
        ]
    },
    {
        "instruction": "",
        "id": "q9975",
        "input": "python validate argv given",
        "output": "",
        "rule": [
            "d9975"
        ]
    },
    {
        "instruction": "",
        "id": "q9976",
        "input": "linux python ioctl modify ip",
        "output": "",
        "rule": [
            "d9976"
        ]
    },
    {
        "instruction": "",
        "id": "q9977",
        "input": "python validate json is list or dictionary",
        "output": "",
        "rule": [
            "d9977"
        ]
    },
    {
        "instruction": "",
        "id": "q9978",
        "input": "linux python make symlink",
        "output": "",
        "rule": [
            "d9978"
        ]
    },
    {
        "instruction": "",
        "id": "q9979",
        "input": "python validate list has at least one",
        "output": "",
        "rule": [
            "d9979"
        ]
    },
    {
        "instruction": "",
        "id": "q9980",
        "input": "list dictionary scala python",
        "output": "",
        "rule": [
            "d9980"
        ]
    },
    {
        "instruction": "",
        "id": "q9981",
        "input": "python variable adb shell getprop",
        "output": "",
        "rule": [
            "d9981"
        ]
    },
    {
        "instruction": "",
        "id": "q9982",
        "input": "list in python are immutable",
        "output": "",
        "rule": [
            "d9982"
        ]
    },
    {
        "instruction": "",
        "id": "q9983",
        "input": "python variable input add to list",
        "output": "",
        "rule": [
            "d9983"
        ]
    },
    {
        "instruction": "",
        "id": "q9984",
        "input": "list into dictionary in python",
        "output": "",
        "rule": [
            "d9984"
        ]
    },
    {
        "instruction": "",
        "id": "q9985",
        "input": "python vector from two points",
        "output": "",
        "rule": [
            "d9985"
        ]
    },
    {
        "instruction": "",
        "id": "q9986",
        "input": "load json data from file in python",
        "output": "",
        "rule": [
            "d9986"
        ]
    },
    {
        "instruction": "",
        "id": "q9987",
        "input": "python vector two points",
        "output": "",
        "rule": [
            "d9987"
        ]
    },
    {
        "instruction": "",
        "id": "q9988",
        "input": "load json with chinese characters in python",
        "output": "",
        "rule": [
            "d9988"
        ]
    },
    {
        "instruction": "",
        "id": "q9989",
        "input": "python verify text in alert window",
        "output": "",
        "rule": [
            "d9989"
        ]
    },
    {
        "instruction": "",
        "id": "q9990",
        "input": "logarithmic scale python plots",
        "output": "",
        "rule": [
            "d9990"
        ]
    },
    {
        "instruction": "",
        "id": "q9991",
        "input": "python view it size must be a divisor of the total size",
        "output": "",
        "rule": [
            "d9991"
        ]
    },
    {
        "instruction": "",
        "id": "q9992",
        "input": "logger stops logging after requests python",
        "output": "",
        "rule": [
            "d9992"
        ]
    },
    {
        "instruction": "",
        "id": "q9993",
        "input": "python view vector to azimuth elevation",
        "output": "",
        "rule": [
            "d9993"
        ]
    },
    {
        "instruction": "",
        "id": "q9994",
        "input": "lognormal regression random effects python",
        "output": "",
        "rule": [
            "d9994"
        ]
    },
    {
        "instruction": "",
        "id": "q9995",
        "input": "python virtualenv deactivate with delete",
        "output": "",
        "rule": [
            "d9995"
        ]
    },
    {
        "instruction": "",
        "id": "q9996",
        "input": "macos python appkit windowsid",
        "output": "",
        "rule": [
            "d9996"
        ]
    },
    {
        "instruction": "",
        "id": "q9997",
        "input": "python virtualenv how to deactivate",
        "output": "",
        "rule": [
            "d9997"
        ]
    },
    {
        "instruction": "",
        "id": "q9998",
        "input": "make a 2d array into 1d python",
        "output": "",
        "rule": [
            "d9998"
        ]
    },
    {
        "instruction": "",
        "id": "q9999",
        "input": "make a list into a set that maintains order python",
        "output": "",
        "rule": [
            "d9999"
        ]
    },
    {
        "instruction": "",
        "id": "q10000",
        "input": "python web form automate javascript",
        "output": "",
        "rule": [
            "d10000"
        ]
    },
    {
        "instruction": "",
        "id": "q10001",
        "input": "make a list into dictionary python",
        "output": "",
        "rule": [
            "d10001"
        ]
    },
    {
        "instruction": "",
        "id": "q10002",
        "input": "python webdriver click not clickable",
        "output": "",
        "rule": [
            "d10002"
        ]
    },
    {
        "instruction": "",
        "id": "q10003",
        "input": "make a list of the unique letters used in a sentence python",
        "output": "",
        "rule": [
            "d10003"
        ]
    },
    {
        "instruction": "",
        "id": "q10004",
        "input": "python webdriver not detectable",
        "output": "",
        "rule": [
            "d10004"
        ]
    },
    {
        "instruction": "",
        "id": "q10005",
        "input": "make a pd from a list python",
        "output": "",
        "rule": [
            "d10005"
        ]
    },
    {
        "instruction": "",
        "id": "q10006",
        "input": "python webserver run a background thread",
        "output": "",
        "rule": [
            "d10006"
        ]
    },
    {
        "instruction": "",
        "id": "q10007",
        "input": "make each list element a string python",
        "output": "",
        "rule": [
            "d10007"
        ]
    },
    {
        "instruction": "",
        "id": "q10008",
        "input": "python websocket server restablish connection",
        "output": "",
        "rule": [
            "d10008"
        ]
    },
    {
        "instruction": "",
        "id": "q10009",
        "input": "make list of arrays a single array python",
        "output": "",
        "rule": [
            "d10009"
        ]
    },
    {
        "instruction": "",
        "id": "q10010",
        "input": "python websocket stream remove delay",
        "output": "",
        "rule": [
            "d10010"
        ]
    },
    {
        "instruction": "",
        "id": "q10011",
        "input": "make random subset from table python",
        "output": "",
        "rule": [
            "d10011"
        ]
    },
    {
        "instruction": "",
        "id": "q10012",
        "input": "python websocket trapping connection refused",
        "output": "",
        "rule": [
            "d10012"
        ]
    },
    {
        "instruction": "",
        "id": "q10013",
        "input": "make string capitalized python",
        "output": "",
        "rule": [
            "d10013"
        ]
    },
    {
        "instruction": "",
        "id": "q10014",
        "input": "python whether a file exist",
        "output": "",
        "rule": [
            "d10014"
        ]
    },
    {
        "instruction": "",
        "id": "q10015",
        "input": "make top row headers python",
        "output": "",
        "rule": [
            "d10015"
        ]
    },
    {
        "instruction": "",
        "id": "q10016",
        "input": "python white space in path",
        "output": "",
        "rule": [
            "d10016"
        ]
    },
    {
        "instruction": "",
        "id": "q10017",
        "input": "make wpf ui for ironpython",
        "output": "",
        "rule": [
            "d10017"
        ]
    },
    {
        "instruction": "",
        "id": "q10018",
        "input": "python window close button",
        "output": "",
        "rule": [
            "d10018"
        ]
    },
    {
        "instruction": "",
        "id": "q10019",
        "input": "making dictionary from list and conditionals python",
        "output": "",
        "rule": [
            "d10019"
        ]
    },
    {
        "instruction": "",
        "id": "q10020",
        "input": "python windows file paths fix function",
        "output": "",
        "rule": [
            "d10020"
        ]
    },
    {
        "instruction": "",
        "id": "q10021",
        "input": "python working with yaml",
        "output": "",
        "rule": [
            "d10021"
        ]
    },
    {
        "instruction": "",
        "id": "q10022",
        "input": "manhattan distance two points python",
        "output": "",
        "rule": [
            "d10022"
        ]
    },
    {
        "instruction": "",
        "id": "q10023",
        "input": "python worksheet column index not an int in range",
        "output": "",
        "rule": [
            "d10023"
        ]
    },
    {
        "instruction": "",
        "id": "q10024",
        "input": "map async function python",
        "output": "",
        "rule": [
            "d10024"
        ]
    },
    {
        "instruction": "",
        "id": "q10025",
        "input": "map numerical values to colormap numbers python",
        "output": "",
        "rule": [
            "d10025"
        ]
    },
    {
        "instruction": "",
        "id": "q10026",
        "input": "python write dict to yaml",
        "output": "",
        "rule": [
            "d10026"
        ]
    },
    {
        "instruction": "",
        "id": "q10027",
        "input": "mark specific piint on graph python",
        "output": "",
        "rule": [
            "d10027"
        ]
    },
    {
        "instruction": "",
        "id": "q10028",
        "input": "python write fits header to new fits",
        "output": "",
        "rule": [
            "d10028"
        ]
    },
    {
        "instruction": "",
        "id": "q10029",
        "input": "markdown to confluence converter python",
        "output": "",
        "rule": [
            "d10029"
        ]
    },
    {
        "instruction": "",
        "id": "q10030",
        "input": "python write stdout encoding",
        "output": "",
        "rule": [
            "d10030"
        ]
    },
    {
        "instruction": "",
        "id": "q10031",
        "input": "match key and values from different dictionary in python",
        "output": "",
        "rule": [
            "d10031"
        ]
    },
    {
        "instruction": "",
        "id": "q10032",
        "input": "python xml remove whitespaces",
        "output": "",
        "rule": [
            "d10032"
        ]
    },
    {
        "instruction": "",
        "id": "q10033",
        "input": "matching dictionaries with slightly different keys python",
        "output": "",
        "rule": [
            "d10033"
        ]
    },
    {
        "instruction": "",
        "id": "q10034",
        "input": "python xml schema except validate",
        "output": "",
        "rule": [
            "d10034"
        ]
    },
    {
        "instruction": "",
        "id": "q10035",
        "input": "matrix data frame in python",
        "output": "",
        "rule": [
            "d10035"
        ]
    },
    {
        "instruction": "",
        "id": "q10036",
        "input": "python yaml dump indentation",
        "output": "",
        "rule": [
            "d10036"
        ]
    },
    {
        "instruction": "",
        "id": "q10037",
        "input": "python yaml dump to variable",
        "output": "",
        "rule": [
            "d10037"
        ]
    },
    {
        "instruction": "",
        "id": "q10038",
        "input": "max value and min vlaue constants in python",
        "output": "",
        "rule": [
            "d10038"
        ]
    },
    {
        "instruction": "",
        "id": "q10039",
        "input": "python yaml dump with order",
        "output": "",
        "rule": [
            "d10039"
        ]
    },
    {
        "instruction": "",
        "id": "q10040",
        "input": "max value stack python",
        "output": "",
        "rule": [
            "d10040"
        ]
    },
    {
        "instruction": "",
        "id": "q10041",
        "input": "maximization problem python scipy",
        "output": "",
        "rule": [
            "d10041"
        ]
    },
    {
        "instruction": "",
        "id": "q10042",
        "input": "python zero width whitespace",
        "output": "",
        "rule": [
            "d10042"
        ]
    },
    {
        "instruction": "",
        "id": "q10043",
        "input": "maximum size of a bytes object python",
        "output": "",
        "rule": [
            "d10043"
        ]
    },
    {
        "instruction": "",
        "id": "q10044",
        "input": "python zipfile without folder structure",
        "output": "",
        "rule": [
            "d10044"
        ]
    },
    {
        "instruction": "",
        "id": "q10045",
        "input": "measure object dimension in python",
        "output": "",
        "rule": [
            "d10045"
        ]
    },
    {
        "instruction": "",
        "id": "q10046",
        "input": "python zlib decompress stream inflate",
        "output": "",
        "rule": [
            "d10046"
        ]
    },
    {
        "instruction": "",
        "id": "q10047",
        "input": "measure time of code python",
        "output": "",
        "rule": [
            "d10047"
        ]
    },
    {
        "instruction": "",
        "id": "q10048",
        "input": "python zlib streaming compress",
        "output": "",
        "rule": [
            "d10048"
        ]
    },
    {
        "instruction": "",
        "id": "q10049",
        "input": "measure time of function in python",
        "output": "",
        "rule": [
            "d10049"
        ]
    },
    {
        "instruction": "",
        "id": "q10050",
        "input": "python2 stdout color windows",
        "output": "",
        "rule": [
            "d10050"
        ]
    },
    {
        "instruction": "",
        "id": "q10051",
        "input": "median of list values python",
        "output": "",
        "rule": [
            "d10051"
        ]
    },
    {
        "instruction": "",
        "id": "q10052",
        "input": "python3 add default value to input",
        "output": "",
        "rule": [
            "d10052"
        ]
    },
    {
        "instruction": "",
        "id": "q10053",
        "input": "merge a bunch of list pythons",
        "output": "",
        "rule": [
            "d10053"
        ]
    },
    {
        "instruction": "",
        "id": "q10054",
        "input": "python3 apply function to iterable",
        "output": "",
        "rule": [
            "d10054"
        ]
    },
    {
        "instruction": "",
        "id": "q10055",
        "input": "merge keys python two dicts",
        "output": "",
        "rule": [
            "d10055"
        ]
    },
    {
        "instruction": "",
        "id": "q10056",
        "input": "python3 async blocking function",
        "output": "",
        "rule": [
            "d10056"
        ]
    },
    {
        "instruction": "",
        "id": "q10057",
        "input": "merge with two different keys name in python",
        "output": "",
        "rule": [
            "d10057"
        ]
    },
    {
        "instruction": "",
        "id": "q10058",
        "input": "python3 bytes string encoding",
        "output": "",
        "rule": [
            "d10058"
        ]
    },
    {
        "instruction": "",
        "id": "q10059",
        "input": "modify element in pymongo python",
        "output": "",
        "rule": [
            "d10059"
        ]
    },
    {
        "instruction": "",
        "id": "q10060",
        "input": "python3 bytes to signed int",
        "output": "",
        "rule": [
            "d10060"
        ]
    },
    {
        "instruction": "",
        "id": "q10061",
        "input": "most second most recent file python",
        "output": "",
        "rule": [
            "d10061"
        ]
    },
    {
        "instruction": "",
        "id": "q10062",
        "input": "python3 check whether a path is valid",
        "output": "",
        "rule": [
            "d10062"
        ]
    },
    {
        "instruction": "",
        "id": "q10063",
        "input": "motion blur gaussian blur image python",
        "output": "",
        "rule": [
            "d10063"
        ]
    },
    {
        "instruction": "",
        "id": "q10064",
        "input": "python3 create md5 hash",
        "output": "",
        "rule": [
            "d10064"
        ]
    },
    {
        "instruction": "",
        "id": "q10065",
        "input": "move the slug python",
        "output": "",
        "rule": [
            "d10065"
        ]
    },
    {
        "instruction": "",
        "id": "q10066",
        "input": "moving average based on previous data python",
        "output": "",
        "rule": [
            "d10066"
        ]
    },
    {
        "instruction": "",
        "id": "q10067",
        "input": "python3 daemon handling sigkill",
        "output": "",
        "rule": [
            "d10067"
        ]
    },
    {
        "instruction": "",
        "id": "q10068",
        "input": "moving to parent directory in python",
        "output": "",
        "rule": [
            "d10068"
        ]
    },
    {
        "instruction": "",
        "id": "q10069",
        "input": "python3 decode bytes as string",
        "output": "",
        "rule": [
            "d10069"
        ]
    },
    {
        "instruction": "",
        "id": "q10070",
        "input": "multiple return values of a function python",
        "output": "",
        "rule": [
            "d10070"
        ]
    },
    {
        "instruction": "",
        "id": "q10071",
        "input": "python3 enum check value",
        "output": "",
        "rule": [
            "d10071"
        ]
    },
    {
        "instruction": "",
        "id": "q10072",
        "input": "multiple returns for function python",
        "output": "",
        "rule": [
            "d10072"
        ]
    },
    {
        "instruction": "",
        "id": "q10073",
        "input": "multiple text files word count for each file python",
        "output": "",
        "rule": [
            "d10073"
        ]
    },
    {
        "instruction": "",
        "id": "q10074",
        "input": "python3 how to set a dictionary item to a value or a default",
        "output": "",
        "rule": [
            "d10074"
        ]
    },
    {
        "instruction": "",
        "id": "q10075",
        "input": "nested arugment comma separtaed parentheses matcher python",
        "output": "",
        "rule": [
            "d10075"
        ]
    },
    {
        "instruction": "",
        "id": "q10076",
        "input": "python3 logger timedrotatingfilehandler rotate failed",
        "output": "",
        "rule": [
            "d10076"
        ]
    },
    {
        "instruction": "",
        "id": "q10077",
        "input": "ngram implementation example for matching 2 sentences python",
        "output": "",
        "rule": [
            "d10077"
        ]
    },
    {
        "instruction": "",
        "id": "q10078",
        "input": "python3 logging add blank line",
        "output": "",
        "rule": [
            "d10078"
        ]
    },
    {
        "instruction": "",
        "id": "q10079",
        "input": "no of records updated from executemany python",
        "output": "",
        "rule": [
            "d10079"
        ]
    },
    {
        "instruction": "",
        "id": "q10080",
        "input": "python3 object of type 'bytes' is not json serializable base64",
        "output": "",
        "rule": [
            "d10080"
        ]
    },
    {
        "instruction": "",
        "id": "q10081",
        "input": "nonblocking serial read in python",
        "output": "",
        "rule": [
            "d10081"
        ]
    },
    {
        "instruction": "",
        "id": "q10082",
        "input": "python3 parse a substring to datetime in a string",
        "output": "",
        "rule": [
            "d10082"
        ]
    },
    {
        "instruction": "",
        "id": "q10083",
        "input": "normal distribution python pdf",
        "output": "",
        "rule": [
            "d10083"
        ]
    },
    {
        "instruction": "",
        "id": "q10084",
        "input": "python3 read buffer from binary file",
        "output": "",
        "rule": [
            "d10084"
        ]
    },
    {
        "instruction": "",
        "id": "q10085",
        "input": "normalize 1d array python",
        "output": "",
        "rule": [
            "d10085"
        ]
    },
    {
        "instruction": "",
        "id": "q10086",
        "input": "python3 redirect stdout to memory",
        "output": "",
        "rule": [
            "d10086"
        ]
    },
    {
        "instruction": "",
        "id": "q10087",
        "input": "normalize a row python numpy array",
        "output": "",
        "rule": [
            "d10087"
        ]
    },
    {
        "instruction": "",
        "id": "q10088",
        "input": "python3 socket how to test if port in use before binding to it",
        "output": "",
        "rule": [
            "d10088"
        ]
    },
    {
        "instruction": "",
        "id": "q10089",
        "input": "not a gzipped file python",
        "output": "",
        "rule": [
            "d10089"
        ]
    },
    {
        "instruction": "",
        "id": "q10090",
        "input": "python3 string default bytes",
        "output": "",
        "rule": [
            "d10090"
        ]
    },
    {
        "instruction": "",
        "id": "q10091",
        "input": "not allow duplicates in python list",
        "output": "",
        "rule": [
            "d10091"
        ]
    },
    {
        "instruction": "",
        "id": "q10092",
        "input": "python3 utf8 not as default",
        "output": "",
        "rule": [
            "d10092"
        ]
    },
    {
        "instruction": "",
        "id": "q10093",
        "input": "not case sensitive string compare, python",
        "output": "",
        "rule": [
            "d10093"
        ]
    },
    {
        "instruction": "",
        "id": "q10094",
        "input": "pythonconvert any type to string",
        "output": "",
        "rule": [
            "d10094"
        ]
    },
    {
        "instruction": "",
        "id": "q10095",
        "input": "not generate random file name in python",
        "output": "",
        "rule": [
            "d10095"
        ]
    },
    {
        "instruction": "",
        "id": "q10096",
        "input": "pythond datetime from isoformat to datetime object",
        "output": "",
        "rule": [
            "d10096"
        ]
    },
    {
        "instruction": "",
        "id": "q10097",
        "input": "np array of list of lists python",
        "output": "",
        "rule": [
            "d10097"
        ]
    },
    {
        "instruction": "",
        "id": "q10098",
        "input": "pythong concat two list of lists remove duplicats",
        "output": "",
        "rule": [
            "d10098"
        ]
    },
    {
        "instruction": "",
        "id": "q10099",
        "input": "numpy float64 compare with python",
        "output": "",
        "rule": [
            "d10099"
        ]
    },
    {
        "instruction": "",
        "id": "q10100",
        "input": "query all global constants in a python file",
        "output": "",
        "rule": [
            "d10100"
        ]
    },
    {
        "instruction": "",
        "id": "q10101",
        "input": "numpy max along axis in python",
        "output": "",
        "rule": [
            "d10101"
        ]
    },
    {
        "instruction": "",
        "id": "q10102",
        "input": "query on multiple things python mongo",
        "output": "",
        "rule": [
            "d10102"
        ]
    },
    {
        "instruction": "",
        "id": "q10103",
        "input": "object is not subscriptable python parsing config file",
        "output": "",
        "rule": [
            "d10103"
        ]
    },
    {
        "instruction": "",
        "id": "q10104",
        "input": "random noise bandwidth python",
        "output": "",
        "rule": [
            "d10104"
        ]
    },
    {
        "instruction": "",
        "id": "q10105",
        "input": "random string different length python",
        "output": "",
        "rule": [
            "d10105"
        ]
    },
    {
        "instruction": "",
        "id": "q10106",
        "input": "one dimensional convolution python",
        "output": "",
        "rule": [
            "d10106"
        ]
    },
    {
        "instruction": "",
        "id": "q10107",
        "input": "random string of 5 characters inn python",
        "output": "",
        "rule": [
            "d10107"
        ]
    },
    {
        "instruction": "",
        "id": "q10108",
        "input": "one hot encoding python encoder if label is a list",
        "output": "",
        "rule": [
            "d10108"
        ]
    },
    {
        "instruction": "",
        "id": "q10109",
        "input": "random uniform sample between a range in python",
        "output": "",
        "rule": [
            "d10109"
        ]
    },
    {
        "instruction": "",
        "id": "q10110",
        "input": "online python to c++ code converter",
        "output": "",
        "rule": [
            "d10110"
        ]
    },
    {
        "instruction": "",
        "id": "q10111",
        "input": "range with two auguments python",
        "output": "",
        "rule": [
            "d10111"
        ]
    },
    {
        "instruction": "",
        "id": "q10112",
        "input": "only current date python datetime",
        "output": "",
        "rule": [
            "d10112"
        ]
    },
    {
        "instruction": "",
        "id": "q10113",
        "input": "rather than returning the singleton object, the enum is returning the vlaues in python",
        "output": "",
        "rule": [
            "d10113"
        ]
    },
    {
        "instruction": "",
        "id": "q10114",
        "input": "only want root info displayed by logger python",
        "output": "",
        "rule": [
            "d10114"
        ]
    },
    {
        "instruction": "",
        "id": "q10115",
        "input": "read a list of tuples from a file python",
        "output": "",
        "rule": [
            "d10115"
        ]
    },
    {
        "instruction": "",
        "id": "q10116",
        "input": "open a file in encoding in python",
        "output": "",
        "rule": [
            "d10116"
        ]
    },
    {
        "instruction": "",
        "id": "q10117",
        "input": "read huge text file in chunks python",
        "output": "",
        "rule": [
            "d10117"
        ]
    },
    {
        "instruction": "",
        "id": "q10118",
        "input": "open file in python encoding",
        "output": "",
        "rule": [
            "d10118"
        ]
    },
    {
        "instruction": "",
        "id": "q10119",
        "input": "read json different encoding python",
        "output": "",
        "rule": [
            "d10119"
        ]
    },
    {
        "instruction": "",
        "id": "q10120",
        "input": "open file in python using encoding",
        "output": "",
        "rule": [
            "d10120"
        ]
    },
    {
        "instruction": "",
        "id": "q10121",
        "input": "read json from url python",
        "output": "",
        "rule": [
            "d10121"
        ]
    },
    {
        "instruction": "",
        "id": "q10122",
        "input": "open file on different encodings in python",
        "output": "",
        "rule": [
            "d10122"
        ]
    },
    {
        "instruction": "",
        "id": "q10123",
        "input": "read text and count word occurrences save to dictionary python",
        "output": "",
        "rule": [
            "d10123"
        ]
    },
    {
        "instruction": "",
        "id": "q10124",
        "input": "open up pages document in python",
        "output": "",
        "rule": [
            "d10124"
        ]
    },
    {
        "instruction": "",
        "id": "q10125",
        "input": "read utf8 file in python",
        "output": "",
        "rule": [
            "d10125"
        ]
    },
    {
        "instruction": "",
        "id": "q10126",
        "input": "open url in chrome in python webbrowser",
        "output": "",
        "rule": [
            "d10126"
        ]
    },
    {
        "instruction": "",
        "id": "q10127",
        "input": "reading a file content in python",
        "output": "",
        "rule": [
            "d10127"
        ]
    },
    {
        "instruction": "",
        "id": "q10128",
        "input": "open with encoding python",
        "output": "",
        "rule": [
            "d10128"
        ]
    },
    {
        "instruction": "",
        "id": "q10129",
        "input": "reading an h5 file with python h5py",
        "output": "",
        "rule": [
            "d10129"
        ]
    },
    {
        "instruction": "",
        "id": "q10130",
        "input": "opencv python normalize intensity of 3d image",
        "output": "",
        "rule": [
            "d10130"
        ]
    },
    {
        "instruction": "",
        "id": "q10131",
        "input": "reading data out of hdf5 matlab files python",
        "output": "",
        "rule": [
            "d10131"
        ]
    },
    {
        "instruction": "",
        "id": "q10132",
        "input": "opencv python rotate image centet",
        "output": "",
        "rule": [
            "d10132"
        ]
    },
    {
        "instruction": "",
        "id": "q10133",
        "input": "receive aspect ration of images python",
        "output": "",
        "rule": [
            "d10133"
        ]
    },
    {
        "instruction": "",
        "id": "q10134",
        "input": "opening a geojson file in python",
        "output": "",
        "rule": [
            "d10134"
        ]
    },
    {
        "instruction": "",
        "id": "q10135",
        "input": "receive request param in python django",
        "output": "",
        "rule": [
            "d10135"
        ]
    },
    {
        "instruction": "",
        "id": "q10136",
        "input": "or two series of boolean python",
        "output": "",
        "rule": [
            "d10136"
        ]
    },
    {
        "instruction": "",
        "id": "q10137",
        "input": "os python remove dir recursively",
        "output": "",
        "rule": [
            "d10137"
        ]
    },
    {
        "instruction": "",
        "id": "q10138",
        "input": "recursively unzip files even if duplicate filenames python",
        "output": "",
        "rule": [
            "d10138"
        ]
    },
    {
        "instruction": "",
        "id": "q10139",
        "input": "output ascii text in python",
        "output": "",
        "rule": [
            "d10139"
        ]
    },
    {
        "instruction": "",
        "id": "q10140",
        "input": "redefining paramets in a function python",
        "output": "",
        "rule": [
            "d10140"
        ]
    },
    {
        "instruction": "",
        "id": "q10141",
        "input": "parse a env file in python",
        "output": "",
        "rule": [
            "d10141"
        ]
    },
    {
        "instruction": "",
        "id": "q10142",
        "input": "redirect stdout to both buffer a logger at the same time python2",
        "output": "",
        "rule": [
            "d10142"
        ]
    },
    {
        "instruction": "",
        "id": "q10143",
        "input": "parse a lambda expression in python at runtime",
        "output": "",
        "rule": [
            "d10143"
        ]
    },
    {
        "instruction": "",
        "id": "q10144",
        "input": "remove a item in a series by its index python",
        "output": "",
        "rule": [
            "d10144"
        ]
    },
    {
        "instruction": "",
        "id": "q10145",
        "input": "parse wrong date format python",
        "output": "",
        "rule": [
            "d10145"
        ]
    },
    {
        "instruction": "",
        "id": "q10146",
        "input": "remove a key from objecy python",
        "output": "",
        "rule": [
            "d10146"
        ]
    },
    {
        "instruction": "",
        "id": "q10147",
        "input": "parsing a query string with python",
        "output": "",
        "rule": [
            "d10147"
        ]
    },
    {
        "instruction": "",
        "id": "q10148",
        "input": "pass iterable to sum python",
        "output": "",
        "rule": [
            "d10148"
        ]
    },
    {
        "instruction": "",
        "id": "q10149",
        "input": "remove character type coloumns from dataset using python",
        "output": "",
        "rule": [
            "d10149"
        ]
    },
    {
        "instruction": "",
        "id": "q10150",
        "input": "passing encode in a function python 3",
        "output": "",
        "rule": [
            "d10150"
        ]
    },
    {
        "instruction": "",
        "id": "q10151",
        "input": "remove characters from string except for python",
        "output": "",
        "rule": [
            "d10151"
        ]
    },
    {
        "instruction": "",
        "id": "q10152",
        "input": "passing json as function params in python",
        "output": "",
        "rule": [
            "d10152"
        ]
    },
    {
        "instruction": "",
        "id": "q10153",
        "input": "remove comma from object in python",
        "output": "",
        "rule": [
            "d10153"
        ]
    },
    {
        "instruction": "",
        "id": "q10154",
        "input": "passing json object in python response",
        "output": "",
        "rule": [
            "d10154"
        ]
    },
    {
        "instruction": "",
        "id": "q10155",
        "input": "remove comma in a list in python",
        "output": "",
        "rule": [
            "d10155"
        ]
    },
    {
        "instruction": "",
        "id": "q10156",
        "input": "password validation python regular expression",
        "output": "",
        "rule": [
            "d10156"
        ]
    },
    {
        "instruction": "",
        "id": "q10157",
        "input": "remove comment from block of codepython",
        "output": "",
        "rule": [
            "d10157"
        ]
    },
    {
        "instruction": "",
        "id": "q10158",
        "input": "remove duplicate list in python",
        "output": "",
        "rule": [
            "d10158"
        ]
    },
    {
        "instruction": "",
        "id": "q10159",
        "input": "place dot in string in python",
        "output": "",
        "rule": [
            "d10159"
        ]
    },
    {
        "instruction": "",
        "id": "q10160",
        "input": "remove element from series in python",
        "output": "",
        "rule": [
            "d10160"
        ]
    },
    {
        "instruction": "",
        "id": "q10161",
        "input": "please add timezone info to timestamps python",
        "output": "",
        "rule": [
            "d10161"
        ]
    },
    {
        "instruction": "",
        "id": "q10162",
        "input": "remove emptu cells in python",
        "output": "",
        "rule": [
            "d10162"
        ]
    },
    {
        "instruction": "",
        "id": "q10163",
        "input": "plot a specific range matplotlib python",
        "output": "",
        "rule": [
            "d10163"
        ]
    },
    {
        "instruction": "",
        "id": "q10164",
        "input": "remove empty entry list python",
        "output": "",
        "rule": [
            "d10164"
        ]
    },
    {
        "instruction": "",
        "id": "q10165",
        "input": "plot boxplot for entire dataset python",
        "output": "",
        "rule": [
            "d10165"
        ]
    },
    {
        "instruction": "",
        "id": "q10166",
        "input": "remove first instance of a space in string python",
        "output": "",
        "rule": [
            "d10166"
        ]
    },
    {
        "instruction": "",
        "id": "q10167",
        "input": "plot histogram python as percentage",
        "output": "",
        "rule": [
            "d10167"
        ]
    },
    {
        "instruction": "",
        "id": "q10168",
        "input": "remove ite spaces python",
        "output": "",
        "rule": [
            "d10168"
        ]
    },
    {
        "instruction": "",
        "id": "q10169",
        "input": "remove item from python dictionary list",
        "output": "",
        "rule": [
            "d10169"
        ]
    },
    {
        "instruction": "",
        "id": "q10170",
        "input": "plot tree from random forest python",
        "output": "",
        "rule": [
            "d10170"
        ]
    },
    {
        "instruction": "",
        "id": "q10171",
        "input": "remove last item from array python",
        "output": "",
        "rule": [
            "d10171"
        ]
    },
    {
        "instruction": "",
        "id": "q10172",
        "input": "plotting confusion matrix in python",
        "output": "",
        "rule": [
            "d10172"
        ]
    },
    {
        "instruction": "",
        "id": "q10173",
        "input": "remove occurrences in list python",
        "output": "",
        "rule": [
            "d10173"
        ]
    },
    {
        "instruction": "",
        "id": "q10174",
        "input": "pretty is not defined python",
        "output": "",
        "rule": [
            "d10174"
        ]
    },
    {
        "instruction": "",
        "id": "q10175",
        "input": "remove same elements in a list in python",
        "output": "",
        "rule": [
            "d10175"
        ]
    },
    {
        "instruction": "",
        "id": "q10176",
        "input": "prevent color of white or black using python colorsys",
        "output": "",
        "rule": [
            "d10176"
        ]
    },
    {
        "instruction": "",
        "id": "q10177",
        "input": "remove tabs and new lines before and after string element python",
        "output": "",
        "rule": [
            "d10177"
        ]
    },
    {
        "instruction": "",
        "id": "q10178",
        "input": "print as formatted table python",
        "output": "",
        "rule": [
            "d10178"
        ]
    },
    {
        "instruction": "",
        "id": "q10179",
        "input": "remove whitespaces in string python",
        "output": "",
        "rule": [
            "d10179"
        ]
    },
    {
        "instruction": "",
        "id": "q10180",
        "input": "print object as string python",
        "output": "",
        "rule": [
            "d10180"
        ]
    },
    {
        "instruction": "",
        "id": "q10181",
        "input": "replace all non alpha in python",
        "output": "",
        "rule": [
            "d10181"
        ]
    },
    {
        "instruction": "",
        "id": "q10182",
        "input": "print to cerr in python",
        "output": "",
        "rule": [
            "d10182"
        ]
    },
    {
        "instruction": "",
        "id": "q10183",
        "input": "replace every upper and lower letter in python",
        "output": "",
        "rule": [
            "d10183"
        ]
    },
    {
        "instruction": "",
        "id": "q10184",
        "input": "printing object variable in python",
        "output": "",
        "rule": [
            "d10184"
        ]
    },
    {
        "instruction": "",
        "id": "q10185",
        "input": "replace function for text file in python",
        "output": "",
        "rule": [
            "d10185"
        ]
    },
    {
        "instruction": "",
        "id": "q10186",
        "input": "printing the name of an enum in python",
        "output": "",
        "rule": [
            "d10186"
        ]
    },
    {
        "instruction": "",
        "id": "q10187",
        "input": "replace in string list comprehension python",
        "output": "",
        "rule": [
            "d10187"
        ]
    },
    {
        "instruction": "",
        "id": "q10188",
        "input": "produce list of unique values in python data frame frequencies",
        "output": "",
        "rule": [
            "d10188"
        ]
    },
    {
        "instruction": "",
        "id": "q10189",
        "input": "replace number with month in python",
        "output": "",
        "rule": [
            "d10189"
        ]
    },
    {
        "instruction": "",
        "id": "q10190",
        "input": "python 'axessubplot' object is not subscriptable",
        "output": "",
        "rule": [
            "d10190"
        ]
    },
    {
        "instruction": "",
        "id": "q10191",
        "input": "replace slashes with hyphens python string",
        "output": "",
        "rule": [
            "d10191"
        ]
    },
    {
        "instruction": "",
        "id": "q10192",
        "input": "replacing value with nan conditional in python",
        "output": "",
        "rule": [
            "d10192"
        ]
    },
    {
        "instruction": "",
        "id": "q10193",
        "input": "python 'nonetype' object has no attribute 'xenapi'",
        "output": "",
        "rule": [
            "d10193"
        ]
    },
    {
        "instruction": "",
        "id": "q10194",
        "input": "reset method for iterator python",
        "output": "",
        "rule": [
            "d10194"
        ]
    },
    {
        "instruction": "",
        "id": "q10195",
        "input": "python 'resource' has no attribute 'getpagesize'",
        "output": "",
        "rule": [
            "d10195"
        ]
    },
    {
        "instruction": "",
        "id": "q10196",
        "input": "reset only one multiindex python",
        "output": "",
        "rule": [
            "d10196"
        ]
    },
    {
        "instruction": "",
        "id": "q10197",
        "input": "response status 404 python",
        "output": "",
        "rule": [
            "d10197"
        ]
    },
    {
        "instruction": "",
        "id": "q10198",
        "input": "python 2 arraysreshape into 3 dimensional",
        "output": "",
        "rule": [
            "d10198"
        ]
    },
    {
        "instruction": "",
        "id": "q10199",
        "input": "restricting input of python function to listlike",
        "output": "",
        "rule": [
            "d10199"
        ]
    },
    {
        "instruction": "",
        "id": "q10200",
        "input": "python 2 function return null while it should return int",
        "output": "",
        "rule": [
            "d10200"
        ]
    },
    {
        "instruction": "",
        "id": "q10201",
        "input": "retrieve function name python",
        "output": "",
        "rule": [
            "d10201"
        ]
    },
    {
        "instruction": "",
        "id": "q10202",
        "input": "python 2 write json object to file",
        "output": "",
        "rule": [
            "d10202"
        ]
    },
    {
        "instruction": "",
        "id": "q10203",
        "input": "retrieving file location of python script",
        "output": "",
        "rule": [
            "d10203"
        ]
    },
    {
        "instruction": "",
        "id": "q10204",
        "input": "python 2d array of lists numpy",
        "output": "",
        "rule": [
            "d10204"
        ]
    },
    {
        "instruction": "",
        "id": "q10205",
        "input": "retrrieve item from priorityqueue without priority python",
        "output": "",
        "rule": [
            "d10205"
        ]
    },
    {
        "instruction": "",
        "id": "q10206",
        "input": "python 2d array of objects",
        "output": "",
        "rule": [
            "d10206"
        ]
    },
    {
        "instruction": "",
        "id": "q10207",
        "input": "return docstring python as help",
        "output": "",
        "rule": [
            "d10207"
        ]
    },
    {
        "instruction": "",
        "id": "q10208",
        "input": "return indice in matrix python",
        "output": "",
        "rule": [
            "d10208"
        ]
    },
    {
        "instruction": "",
        "id": "q10209",
        "input": "python 3 check file permissions",
        "output": "",
        "rule": [
            "d10209"
        ]
    },
    {
        "instruction": "",
        "id": "q10210",
        "input": "return largest subsequence in python",
        "output": "",
        "rule": [
            "d10210"
        ]
    },
    {
        "instruction": "",
        "id": "q10211",
        "input": "python 3 datetime fromtimestamp",
        "output": "",
        "rule": [
            "d10211"
        ]
    },
    {
        "instruction": "",
        "id": "q10212",
        "input": "return nan values of a column in data frame python",
        "output": "",
        "rule": [
            "d10212"
        ]
    },
    {
        "instruction": "",
        "id": "q10213",
        "input": "python 3 define length of an arr",
        "output": "",
        "rule": [
            "d10213"
        ]
    },
    {
        "instruction": "",
        "id": "q10214",
        "input": "return only unique items from list python",
        "output": "",
        "rule": [
            "d10214"
        ]
    },
    {
        "instruction": "",
        "id": "q10215",
        "input": "python 3 float 2 decimal points round",
        "output": "",
        "rule": [
            "d10215"
        ]
    },
    {
        "instruction": "",
        "id": "q10216",
        "input": "return render function python django",
        "output": "",
        "rule": [
            "d10216"
        ]
    },
    {
        "instruction": "",
        "id": "q10217",
        "input": "python 3 get basename of url",
        "output": "",
        "rule": [
            "d10217"
        ]
    },
    {
        "instruction": "",
        "id": "q10218",
        "input": "return something from an environment variable from python",
        "output": "",
        "rule": [
            "d10218"
        ]
    },
    {
        "instruction": "",
        "id": "q10219",
        "input": "python 3 how to color code",
        "output": "",
        "rule": [
            "d10219"
        ]
    },
    {
        "instruction": "",
        "id": "q10220",
        "input": "return true if integer, false if not python",
        "output": "",
        "rule": [
            "d10220"
        ]
    },
    {
        "instruction": "",
        "id": "q10221",
        "input": "python 3 int round up",
        "output": "",
        "rule": [
            "d10221"
        ]
    },
    {
        "instruction": "",
        "id": "q10222",
        "input": "return unique list vlaues python",
        "output": "",
        "rule": [
            "d10222"
        ]
    },
    {
        "instruction": "",
        "id": "q10223",
        "input": "python 3 md5hash file",
        "output": "",
        "rule": [
            "d10223"
        ]
    },
    {
        "instruction": "",
        "id": "q10224",
        "input": "returning multiple values in a queue python multiprocesss",
        "output": "",
        "rule": [
            "d10224"
        ]
    },
    {
        "instruction": "",
        "id": "q10225",
        "input": "python 3 print excetion message",
        "output": "",
        "rule": [
            "d10225"
        ]
    },
    {
        "instruction": "",
        "id": "q10226",
        "input": "rotation transform on 2d array in python",
        "output": "",
        "rule": [
            "d10226"
        ]
    },
    {
        "instruction": "",
        "id": "q10227",
        "input": "python 3 regular expression to validate email",
        "output": "",
        "rule": [
            "d10227"
        ]
    },
    {
        "instruction": "",
        "id": "q10228",
        "input": "round to significant digits in python",
        "output": "",
        "rule": [
            "d10228"
        ]
    },
    {
        "instruction": "",
        "id": "q10229",
        "input": "python 3 replace every n instacnesstring",
        "output": "",
        "rule": [
            "d10229"
        ]
    },
    {
        "instruction": "",
        "id": "q10230",
        "input": "round to zero decimals python",
        "output": "",
        "rule": [
            "d10230"
        ]
    },
    {
        "instruction": "",
        "id": "q10231",
        "input": "python 3 validate iterable type",
        "output": "",
        "rule": [
            "d10231"
        ]
    },
    {
        "instruction": "",
        "id": "q10232",
        "input": "ruemel yaml read file python",
        "output": "",
        "rule": [
            "d10232"
        ]
    },
    {
        "instruction": "",
        "id": "q10233",
        "input": "python 3 xml pretty",
        "output": "",
        "rule": [
            "d10233"
        ]
    },
    {
        "instruction": "",
        "id": "q10234",
        "input": "run a python script jquery",
        "output": "",
        "rule": [
            "d10234"
        ]
    },
    {
        "instruction": "",
        "id": "q10235",
        "input": "python 3d array rotation",
        "output": "",
        "rule": [
            "d10235"
        ]
    },
    {
        "instruction": "",
        "id": "q10236",
        "input": "run ansible playbook from python with host pass as variable",
        "output": "",
        "rule": [
            "d10236"
        ]
    },
    {
        "instruction": "",
        "id": "q10237",
        "input": "python a list of all constants",
        "output": "",
        "rule": [
            "d10237"
        ]
    },
    {
        "instruction": "",
        "id": "q10238",
        "input": "run python file in java using runtime",
        "output": "",
        "rule": [
            "d10238"
        ]
    },
    {
        "instruction": "",
        "id": "q10239",
        "input": "python access fillable fields in pdf",
        "output": "",
        "rule": [
            "d10239"
        ]
    },
    {
        "instruction": "",
        "id": "q10240",
        "input": "run python funcntion for only x seconds",
        "output": "",
        "rule": [
            "d10240"
        ]
    },
    {
        "instruction": "",
        "id": "q10241",
        "input": "python access next item in a for loop from current iteration",
        "output": "",
        "rule": [
            "d10241"
        ]
    },
    {
        "instruction": "",
        "id": "q10242",
        "input": "run the python script without pytest",
        "output": "",
        "rule": [
            "d10242"
        ]
    },
    {
        "instruction": "",
        "id": "q10243",
        "input": "python access object properties as dict",
        "output": "",
        "rule": [
            "d10243"
        ]
    },
    {
        "instruction": "",
        "id": "q10244",
        "input": "python access second element of each array",
        "output": "",
        "rule": [
            "d10244"
        ]
    },
    {
        "instruction": "",
        "id": "q10245",
        "input": "running python by code block on spyder",
        "output": "",
        "rule": [
            "d10245"
        ]
    },
    {
        "instruction": "",
        "id": "q10246",
        "input": "python active window title",
        "output": "",
        "rule": [
            "d10246"
        ]
    },
    {
        "instruction": "",
        "id": "q10247",
        "input": "s3 boto3 python create object",
        "output": "",
        "rule": [
            "d10247"
        ]
    },
    {
        "instruction": "",
        "id": "q10248",
        "input": "python add a colormap width",
        "output": "",
        "rule": [
            "d10248"
        ]
    },
    {
        "instruction": "",
        "id": "q10249",
        "input": "save http get to file python",
        "output": "",
        "rule": [
            "d10249"
        ]
    },
    {
        "instruction": "",
        "id": "q10250",
        "input": "python add boolean to string",
        "output": "",
        "rule": [
            "d10250"
        ]
    },
    {
        "instruction": "",
        "id": "q10251",
        "input": "save numpy data to json python",
        "output": "",
        "rule": [
            "d10251"
        ]
    },
    {
        "instruction": "",
        "id": "q10252",
        "input": "python add items to iterable object",
        "output": "",
        "rule": [
            "d10252"
        ]
    },
    {
        "instruction": "",
        "id": "q10253",
        "input": "save python graphviz as jpeg",
        "output": "",
        "rule": [
            "d10253"
        ]
    },
    {
        "instruction": "",
        "id": "q10254",
        "input": "python add path to modle",
        "output": "",
        "rule": [
            "d10254"
        ]
    },
    {
        "instruction": "",
        "id": "q10255",
        "input": "scala equivileant of python dictionary",
        "output": "",
        "rule": [
            "d10255"
        ]
    },
    {
        "instruction": "",
        "id": "q10256",
        "input": "python add property from kwargs",
        "output": "",
        "rule": [
            "d10256"
        ]
    },
    {
        "instruction": "",
        "id": "q10257",
        "input": "screen height and width python frame",
        "output": "",
        "rule": [
            "d10257"
        ]
    },
    {
        "instruction": "",
        "id": "q10258",
        "input": "python adjacency matrix dict",
        "output": "",
        "rule": [
            "d10258"
        ]
    },
    {
        "instruction": "",
        "id": "q10259",
        "input": "select 50 items randomnly from list python",
        "output": "",
        "rule": [
            "d10259"
        ]
    },
    {
        "instruction": "",
        "id": "q10260",
        "input": "python agg max of one column, return value for that",
        "output": "",
        "rule": [
            "d10260"
        ]
    },
    {
        "instruction": "",
        "id": "q10261",
        "input": "select last row in python",
        "output": "",
        "rule": [
            "d10261"
        ]
    },
    {
        "instruction": "",
        "id": "q10262",
        "input": "python alembic get table",
        "output": "",
        "rule": [
            "d10262"
        ]
    },
    {
        "instruction": "",
        "id": "q10263",
        "input": "select values that are not null python",
        "output": "",
        "rule": [
            "d10263"
        ]
    },
    {
        "instruction": "",
        "id": "q10264",
        "input": "python and bounding box column in pdf",
        "output": "",
        "rule": [
            "d10264"
        ]
    },
    {
        "instruction": "",
        "id": "q10265",
        "input": "series drop a condition for value python",
        "output": "",
        "rule": [
            "d10265"
        ]
    },
    {
        "instruction": "",
        "id": "q10266",
        "input": "python angle using 3 points",
        "output": "",
        "rule": [
            "d10266"
        ]
    },
    {
        "instruction": "",
        "id": "q10267",
        "input": "serving a python page as an index",
        "output": "",
        "rule": [
            "d10267"
        ]
    },
    {
        "instruction": "",
        "id": "q10268",
        "input": "python ansi color windows",
        "output": "",
        "rule": [
            "d10268"
        ]
    },
    {
        "instruction": "",
        "id": "q10269",
        "input": "python append prefix to each line in string",
        "output": "",
        "rule": [
            "d10269"
        ]
    },
    {
        "instruction": "",
        "id": "q10270",
        "input": "set axis limits example python",
        "output": "",
        "rule": [
            "d10270"
        ]
    },
    {
        "instruction": "",
        "id": "q10271",
        "input": "python append table from another table",
        "output": "",
        "rule": [
            "d10271"
        ]
    },
    {
        "instruction": "",
        "id": "q10272",
        "input": "set call on iterable python",
        "output": "",
        "rule": [
            "d10272"
        ]
    },
    {
        "instruction": "",
        "id": "q10273",
        "input": "python apply function to data frame",
        "output": "",
        "rule": [
            "d10273"
        ]
    },
    {
        "instruction": "",
        "id": "q10274",
        "input": "set content type python requests",
        "output": "",
        "rule": [
            "d10274"
        ]
    },
    {
        "instruction": "",
        "id": "q10275",
        "input": "python apply iterate the 1st row twice",
        "output": "",
        "rule": [
            "d10275"
        ]
    },
    {
        "instruction": "",
        "id": "q10276",
        "input": "set date to 1st of the current month python",
        "output": "",
        "rule": [
            "d10276"
        ]
    },
    {
        "instruction": "",
        "id": "q10277",
        "input": "python argparse how to check if default is used",
        "output": "",
        "rule": [
            "d10277"
        ]
    },
    {
        "instruction": "",
        "id": "q10278",
        "input": "set default arg to a value def python",
        "output": "",
        "rule": [
            "d10278"
        ]
    },
    {
        "instruction": "",
        "id": "q10279",
        "input": "python argparse subparser type of subparser",
        "output": "",
        "rule": [
            "d10279"
        ]
    },
    {
        "instruction": "",
        "id": "q10280",
        "input": "set output activation function different from input python",
        "output": "",
        "rule": [
            "d10280"
        ]
    },
    {
        "instruction": "",
        "id": "q10281",
        "input": "python argparse test default",
        "output": "",
        "rule": [
            "d10281"
        ]
    },
    {
        "instruction": "",
        "id": "q10282",
        "input": "set python default proxy",
        "output": "",
        "rule": [
            "d10282"
        ]
    },
    {
        "instruction": "",
        "id": "q10283",
        "input": "python argsparse default value",
        "output": "",
        "rule": [
            "d10283"
        ]
    },
    {
        "instruction": "",
        "id": "q10284",
        "input": "set python request headers",
        "output": "",
        "rule": [
            "d10284"
        ]
    },
    {
        "instruction": "",
        "id": "q10285",
        "input": "python array index of nearest",
        "output": "",
        "rule": [
            "d10285"
        ]
    },
    {
        "instruction": "",
        "id": "q10286",
        "input": "set s axis limits in python matplotlib",
        "output": "",
        "rule": [
            "d10286"
        ]
    },
    {
        "instruction": "",
        "id": "q10287",
        "input": "python array map to a dict",
        "output": "",
        "rule": [
            "d10287"
        ]
    },
    {
        "instruction": "",
        "id": "q10288",
        "input": "set varaible to line number in python",
        "output": "",
        "rule": [
            "d10288"
        ]
    },
    {
        "instruction": "",
        "id": "q10289",
        "input": "python array mask matlab",
        "output": "",
        "rule": [
            "d10289"
        ]
    },
    {
        "instruction": "",
        "id": "q10290",
        "input": "set window title python",
        "output": "",
        "rule": [
            "d10290"
        ]
    },
    {
        "instruction": "",
        "id": "q10291",
        "input": "python array shape detection",
        "output": "",
        "rule": [
            "d10291"
        ]
    },
    {
        "instruction": "",
        "id": "q10292",
        "input": "shortest distance to line python",
        "output": "",
        "rule": [
            "d10292"
        ]
    },
    {
        "instruction": "",
        "id": "q10293",
        "input": "python array to dic",
        "output": "",
        "rule": [
            "d10293"
        ]
    },
    {
        "instruction": "",
        "id": "q10294",
        "input": "show multiple plots in sequence and save them python",
        "output": "",
        "rule": [
            "d10294"
        ]
    },
    {
        "instruction": "",
        "id": "q10295",
        "input": "python array to numpy array pickling is disabled",
        "output": "",
        "rule": [
            "d10295"
        ]
    },
    {
        "instruction": "",
        "id": "q10296",
        "input": "show python interactive window not there",
        "output": "",
        "rule": [
            "d10296"
        ]
    },
    {
        "instruction": "",
        "id": "q10297",
        "input": "python array with one dimension",
        "output": "",
        "rule": [
            "d10297"
        ]
    },
    {
        "instruction": "",
        "id": "q10298",
        "input": "shuffle then unshuffle data python",
        "output": "",
        "rule": [
            "d10298"
        ]
    },
    {
        "instruction": "",
        "id": "q10299",
        "input": "python ask default intent",
        "output": "",
        "rule": [
            "d10299"
        ]
    },
    {
        "instruction": "",
        "id": "q10300",
        "input": "single color format string python",
        "output": "",
        "rule": [
            "d10300"
        ]
    },
    {
        "instruction": "",
        "id": "q10301",
        "input": "python ask player to play again",
        "output": "",
        "rule": [
            "d10301"
        ]
    },
    {
        "instruction": "",
        "id": "q10302",
        "input": "size of one pixel python",
        "output": "",
        "rule": [
            "d10302"
        ]
    },
    {
        "instruction": "",
        "id": "q10303",
        "input": "python ask user to exit",
        "output": "",
        "rule": [
            "d10303"
        ]
    },
    {
        "instruction": "",
        "id": "q10304",
        "input": "skip to the end of a line index python",
        "output": "",
        "rule": [
            "d10304"
        ]
    },
    {
        "instruction": "",
        "id": "q10305",
        "input": "python assert is iterable",
        "output": "",
        "rule": [
            "d10305"
        ]
    },
    {
        "instruction": "",
        "id": "q10306",
        "input": "python assert list equal fail",
        "output": "",
        "rule": [
            "d10306"
        ]
    },
    {
        "instruction": "",
        "id": "q10307",
        "input": "slicing string into sentences in python",
        "output": "",
        "rule": [
            "d10307"
        ]
    },
    {
        "instruction": "",
        "id": "q10308",
        "input": "python assertisnone assertequals test",
        "output": "",
        "rule": [
            "d10308"
        ]
    },
    {
        "instruction": "",
        "id": "q10309",
        "input": "sort an array with indices python",
        "output": "",
        "rule": [
            "d10309"
        ]
    },
    {
        "instruction": "",
        "id": "q10310",
        "input": "python asyncio nonblocking io",
        "output": "",
        "rule": [
            "d10310"
        ]
    },
    {
        "instruction": "",
        "id": "q10311",
        "input": "sort arrays by an index in python",
        "output": "",
        "rule": [
            "d10311"
        ]
    },
    {
        "instruction": "",
        "id": "q10312",
        "input": "python asynico run until done",
        "output": "",
        "rule": [
            "d10312"
        ]
    },
    {
        "instruction": "",
        "id": "q10313",
        "input": "sorting python list on a special key stack overflow",
        "output": "",
        "rule": [
            "d10313"
        ]
    },
    {
        "instruction": "",
        "id": "q10314",
        "input": "python auto resize column",
        "output": "",
        "rule": [
            "d10314"
        ]
    },
    {
        "instruction": "",
        "id": "q10315",
        "input": "spacing for texts in python",
        "output": "",
        "rule": [
            "d10315"
        ]
    },
    {
        "instruction": "",
        "id": "q10316",
        "input": "python autoreload run command",
        "output": "",
        "rule": [
            "d10316"
        ]
    },
    {
        "instruction": "",
        "id": "q10317",
        "input": "spearman rank correlation python",
        "output": "",
        "rule": [
            "d10317"
        ]
    },
    {
        "instruction": "",
        "id": "q10318",
        "input": "python average of a dictonary",
        "output": "",
        "rule": [
            "d10318"
        ]
    },
    {
        "instruction": "",
        "id": "q10319",
        "input": "split python only first",
        "output": "",
        "rule": [
            "d10319"
        ]
    },
    {
        "instruction": "",
        "id": "q10320",
        "input": "python average of number arrary",
        "output": "",
        "rule": [
            "d10320"
        ]
    },
    {
        "instruction": "",
        "id": "q10321",
        "input": "split string into segments of certain lengthpython",
        "output": "",
        "rule": [
            "d10321"
        ]
    },
    {
        "instruction": "",
        "id": "q10322",
        "input": "python aws generate s3 url",
        "output": "",
        "rule": [
            "d10322"
        ]
    },
    {
        "instruction": "",
        "id": "q10323",
        "input": "splitting to words from sting in python",
        "output": "",
        "rule": [
            "d10323"
        ]
    },
    {
        "instruction": "",
        "id": "q10324",
        "input": "python aws lambda return 400 response api gateway",
        "output": "",
        "rule": [
            "d10324"
        ]
    },
    {
        "instruction": "",
        "id": "q10325",
        "input": "sqlalchemy python create table not null column",
        "output": "",
        "rule": [
            "d10325"
        ]
    },
    {
        "instruction": "",
        "id": "q10326",
        "input": "python axes pixels between points",
        "output": "",
        "rule": [
            "d10326"
        ]
    },
    {
        "instruction": "",
        "id": "q10327",
        "input": "stack overflow define function max in python",
        "output": "",
        "rule": [
            "d10327"
        ]
    },
    {
        "instruction": "",
        "id": "q10328",
        "input": "python bar plot change graph height",
        "output": "",
        "rule": [
            "d10328"
        ]
    },
    {
        "instruction": "",
        "id": "q10329",
        "input": "stack overflow python databases i",
        "output": "",
        "rule": [
            "d10329"
        ]
    },
    {
        "instruction": "",
        "id": "q10330",
        "input": "python base64 decode with b ahead of string",
        "output": "",
        "rule": [
            "d10330"
        ]
    },
    {
        "instruction": "",
        "id": "q10331",
        "input": "stack overflow python databases in c",
        "output": "",
        "rule": [
            "d10331"
        ]
    },
    {
        "instruction": "",
        "id": "q10332",
        "input": "python base64 to ndarray",
        "output": "",
        "rule": [
            "d10332"
        ]
    },
    {
        "instruction": "",
        "id": "q10333",
        "input": "stacked plot python time series matplotlib",
        "output": "",
        "rule": [
            "d10333"
        ]
    },
    {
        "instruction": "",
        "id": "q10334",
        "input": "python basehttpserver header set nocache",
        "output": "",
        "rule": [
            "d10334"
        ]
    },
    {
        "instruction": "",
        "id": "q10335",
        "input": "stackoverflow python slugify filename",
        "output": "",
        "rule": [
            "d10335"
        ]
    },
    {
        "instruction": "",
        "id": "q10336",
        "input": "python binary representation of the tiff",
        "output": "",
        "rule": [
            "d10336"
        ]
    },
    {
        "instruction": "",
        "id": "q10337",
        "input": "stackovrflow python send text",
        "output": "",
        "rule": [
            "d10337"
        ]
    },
    {
        "instruction": "",
        "id": "q10338",
        "input": "python binding to adb",
        "output": "",
        "rule": [
            "d10338"
        ]
    },
    {
        "instruction": "",
        "id": "q10339",
        "input": "standard deviation time series python",
        "output": "",
        "rule": [
            "d10339"
        ]
    },
    {
        "instruction": "",
        "id": "q10340",
        "input": "python bokeh plot has no data renderers",
        "output": "",
        "rule": [
            "d10340"
        ]
    },
    {
        "instruction": "",
        "id": "q10341",
        "input": "python bool object not callable",
        "output": "",
        "rule": [
            "d10341"
        ]
    },
    {
        "instruction": "",
        "id": "q10342",
        "input": "static int inside python function",
        "output": "",
        "rule": [
            "d10342"
        ]
    },
    {
        "instruction": "",
        "id": "q10343",
        "input": "python boolean not true",
        "output": "",
        "rule": [
            "d10343"
        ]
    },
    {
        "instruction": "",
        "id": "q10344",
        "input": "statistic unique data in column in python",
        "output": "",
        "rule": [
            "d10344"
        ]
    },
    {
        "instruction": "",
        "id": "q10345",
        "input": "python boto3 check if sts is expire and renew",
        "output": "",
        "rule": [
            "d10345"
        ]
    },
    {
        "instruction": "",
        "id": "q10346",
        "input": "stop async loop python",
        "output": "",
        "rule": [
            "d10346"
        ]
    },
    {
        "instruction": "",
        "id": "q10347",
        "input": "python boto3 dynamodb delete a item from list",
        "output": "",
        "rule": [
            "d10347"
        ]
    },
    {
        "instruction": "",
        "id": "q10348",
        "input": "store a list of points python",
        "output": "",
        "rule": [
            "d10348"
        ]
    },
    {
        "instruction": "",
        "id": "q10349",
        "input": "python boto3 upload all files in a folder",
        "output": "",
        "rule": [
            "d10349"
        ]
    },
    {
        "instruction": "",
        "id": "q10350",
        "input": "store database credentials on environment variable in python",
        "output": "",
        "rule": [
            "d10350"
        ]
    },
    {
        "instruction": "",
        "id": "q10351",
        "input": "python bottle run server background",
        "output": "",
        "rule": [
            "d10351"
        ]
    },
    {
        "instruction": "",
        "id": "q10352",
        "input": "str object is not callable python",
        "output": "",
        "rule": [
            "d10352"
        ]
    },
    {
        "instruction": "",
        "id": "q10353",
        "input": "python bound method reference circular",
        "output": "",
        "rule": [
            "d10353"
        ]
    },
    {
        "instruction": "",
        "id": "q10354",
        "input": "string as file object stringio python",
        "output": "",
        "rule": [
            "d10354"
        ]
    },
    {
        "instruction": "",
        "id": "q10355",
        "input": "python boundmethod to unbound",
        "output": "",
        "rule": [
            "d10355"
        ]
    },
    {
        "instruction": "",
        "id": "q10356",
        "input": "string to list python comma",
        "output": "",
        "rule": [
            "d10356"
        ]
    },
    {
        "instruction": "",
        "id": "q10357",
        "input": "python bs4 xml to dict",
        "output": "",
        "rule": [
            "d10357"
        ]
    },
    {
        "instruction": "",
        "id": "q10358",
        "input": "python bson to file",
        "output": "",
        "rule": [
            "d10358"
        ]
    },
    {
        "instruction": "",
        "id": "q10359",
        "input": "strip non alphabetic characters python",
        "output": "",
        "rule": [
            "d10359"
        ]
    },
    {
        "instruction": "",
        "id": "q10360",
        "input": "python built in yaml support",
        "output": "",
        "rule": [
            "d10360"
        ]
    },
    {
        "instruction": "",
        "id": "q10361",
        "input": "sum function python non iterable",
        "output": "",
        "rule": [
            "d10361"
        ]
    },
    {
        "instruction": "",
        "id": "q10362",
        "input": "python bytearray from image frame",
        "output": "",
        "rule": [
            "d10362"
        ]
    },
    {
        "instruction": "",
        "id": "q10363",
        "input": "python bytecode to native code",
        "output": "",
        "rule": [
            "d10363"
        ]
    },
    {
        "instruction": "",
        "id": "q10364",
        "input": "summing with a for loop in python",
        "output": "",
        "rule": [
            "d10364"
        ]
    },
    {
        "instruction": "",
        "id": "q10365",
        "input": "python bytecode to numpy from array",
        "output": "",
        "rule": [
            "d10365"
        ]
    },
    {
        "instruction": "",
        "id": "q10366",
        "input": "swagger api generate python",
        "output": "",
        "rule": [
            "d10366"
        ]
    },
    {
        "instruction": "",
        "id": "q10367",
        "input": "python calculate boundingcircle from points",
        "output": "",
        "rule": [
            "d10367"
        ]
    },
    {
        "instruction": "",
        "id": "q10368",
        "input": "swap function for lists python",
        "output": "",
        "rule": [
            "d10368"
        ]
    },
    {
        "instruction": "",
        "id": "q10369",
        "input": "python calculate hash of any file",
        "output": "",
        "rule": [
            "d10369"
        ]
    },
    {
        "instruction": "",
        "id": "q10370",
        "input": "take the longest string in list python",
        "output": "",
        "rule": [
            "d10370"
        ]
    },
    {
        "instruction": "",
        "id": "q10371",
        "input": "python calculate rotation matrix of two vector",
        "output": "",
        "rule": [
            "d10371"
        ]
    },
    {
        "instruction": "",
        "id": "q10372",
        "input": "take two list from the python and generate a dynamic table html",
        "output": "",
        "rule": [
            "d10372"
        ]
    },
    {
        "instruction": "",
        "id": "q10373",
        "input": "python capital to lower case letter",
        "output": "",
        "rule": [
            "d10373"
        ]
    },
    {
        "instruction": "",
        "id": "q10374",
        "input": "taking the fft of an large array in python",
        "output": "",
        "rule": [
            "d10374"
        ]
    },
    {
        "instruction": "",
        "id": "q10375",
        "input": "python capitalize first lette r",
        "output": "",
        "rule": [
            "d10375"
        ]
    },
    {
        "instruction": "",
        "id": "q10376",
        "input": "temporary failure in name resolution smtp python",
        "output": "",
        "rule": [
            "d10376"
        ]
    },
    {
        "instruction": "",
        "id": "q10377",
        "input": "python capture closing of matplotlib figure",
        "output": "",
        "rule": [
            "d10377"
        ]
    },
    {
        "instruction": "",
        "id": "q10378",
        "input": "tensorflow supported python versions",
        "output": "",
        "rule": [
            "d10378"
        ]
    },
    {
        "instruction": "",
        "id": "q10379",
        "input": "python capture return value of shell command",
        "output": "",
        "rule": [
            "d10379"
        ]
    },
    {
        "instruction": "",
        "id": "q10380",
        "input": "tensorflow take python list as placeholder",
        "output": "",
        "rule": [
            "d10380"
        ]
    },
    {
        "instruction": "",
        "id": "q10381",
        "input": "python cast a datetime",
        "output": "",
        "rule": [
            "d10381"
        ]
    },
    {
        "instruction": "",
        "id": "q10382",
        "input": "terminate while loop after predefined time python process",
        "output": "",
        "rule": [
            "d10382"
        ]
    },
    {
        "instruction": "",
        "id": "q10383",
        "input": "test if a row in a file is empty python",
        "output": "",
        "rule": [
            "d10383"
        ]
    },
    {
        "instruction": "",
        "id": "q10384",
        "input": "python catch and raise same excepiton",
        "output": "",
        "rule": [
            "d10384"
        ]
    },
    {
        "instruction": "",
        "id": "q10385",
        "input": "python caught sigwinch, shutting down gracefully",
        "output": "",
        "rule": [
            "d10385"
        ]
    },
    {
        "instruction": "",
        "id": "q10386",
        "input": "python chaining filter functions",
        "output": "",
        "rule": [
            "d10386"
        ]
    },
    {
        "instruction": "",
        "id": "q10387",
        "input": "testing the symbol set with nested brackets in python",
        "output": "",
        "rule": [
            "d10387"
        ]
    },
    {
        "instruction": "",
        "id": "q10388",
        "input": "python chang fraction to decimal number in string",
        "output": "",
        "rule": [
            "d10388"
        ]
    },
    {
        "instruction": "",
        "id": "q10389",
        "input": "text replace with dictionary python multiple values full match",
        "output": "",
        "rule": [
            "d10389"
        ]
    },
    {
        "instruction": "",
        "id": "q10390",
        "input": "python change backward slash to forward slash",
        "output": "",
        "rule": [
            "d10390"
        ]
    },
    {
        "instruction": "",
        "id": "q10391",
        "input": "textwrap python doensnt work",
        "output": "",
        "rule": [
            "d10391"
        ]
    },
    {
        "instruction": "",
        "id": "q10392",
        "input": "python change column string to boolean true",
        "output": "",
        "rule": [
            "d10392"
        ]
    },
    {
        "instruction": "",
        "id": "q10393",
        "input": "the order of an element in an index python",
        "output": "",
        "rule": [
            "d10393"
        ]
    },
    {
        "instruction": "",
        "id": "q10394",
        "input": "time in am/pm in python to utc time",
        "output": "",
        "rule": [
            "d10394"
        ]
    },
    {
        "instruction": "",
        "id": "q10395",
        "input": "python change file permissions linux",
        "output": "",
        "rule": [
            "d10395"
        ]
    },
    {
        "instruction": "",
        "id": "q10396",
        "input": "timestamp string to datetime python",
        "output": "",
        "rule": [
            "d10396"
        ]
    },
    {
        "instruction": "",
        "id": "q10397",
        "input": "python change function values with slider",
        "output": "",
        "rule": [
            "d10397"
        ]
    },
    {
        "instruction": "",
        "id": "q10398",
        "input": "to check the data type of each column in python",
        "output": "",
        "rule": [
            "d10398"
        ]
    },
    {
        "instruction": "",
        "id": "q10399",
        "input": "python change index name of a df",
        "output": "",
        "rule": [
            "d10399"
        ]
    },
    {
        "instruction": "",
        "id": "q10400",
        "input": "to impute missing values in python",
        "output": "",
        "rule": [
            "d10400"
        ]
    },
    {
        "instruction": "",
        "id": "q10401",
        "input": "to many indexers in python",
        "output": "",
        "rule": [
            "d10401"
        ]
    },
    {
        "instruction": "",
        "id": "q10402",
        "input": "python change user to root",
        "output": "",
        "rule": [
            "d10402"
        ]
    },
    {
        "instruction": "",
        "id": "q10403",
        "input": "python change variables in outer scope",
        "output": "",
        "rule": [
            "d10403"
        ]
    },
    {
        "instruction": "",
        "id": "q10404",
        "input": "training mnist data python",
        "output": "",
        "rule": [
            "d10404"
        ]
    },
    {
        "instruction": "",
        "id": "q10405",
        "input": "python check array of strings",
        "output": "",
        "rule": [
            "d10405"
        ]
    },
    {
        "instruction": "",
        "id": "q10406",
        "input": "transfer column string to date type in python",
        "output": "",
        "rule": [
            "d10406"
        ]
    },
    {
        "instruction": "",
        "id": "q10407",
        "input": "python check datetime instance",
        "output": "",
        "rule": [
            "d10407"
        ]
    },
    {
        "instruction": "",
        "id": "q10408",
        "input": "trigger to exit python",
        "output": "",
        "rule": [
            "d10408"
        ]
    },
    {
        "instruction": "",
        "id": "q10409",
        "input": "python check exact one parametars",
        "output": "",
        "rule": [
            "d10409"
        ]
    },
    {
        "instruction": "",
        "id": "q10410",
        "input": "turn dictionary into query string python",
        "output": "",
        "rule": [
            "d10410"
        ]
    },
    {
        "instruction": "",
        "id": "q10411",
        "input": "python check folder exist then create",
        "output": "",
        "rule": [
            "d10411"
        ]
    },
    {
        "instruction": "",
        "id": "q10412",
        "input": "turn fractions in a function to decimals python",
        "output": "",
        "rule": [
            "d10412"
        ]
    },
    {
        "instruction": "",
        "id": "q10413",
        "input": "python check for 200 status code",
        "output": "",
        "rule": [
            "d10413"
        ]
    },
    {
        "instruction": "",
        "id": "q10414",
        "input": "turn string elements separated by commas into list python",
        "output": "",
        "rule": [
            "d10414"
        ]
    },
    {
        "instruction": "",
        "id": "q10415",
        "input": "python check for attribute to exist",
        "output": "",
        "rule": [
            "d10415"
        ]
    },
    {
        "instruction": "",
        "id": "q10416",
        "input": "turn string to json python",
        "output": "",
        "rule": [
            "d10416"
        ]
    },
    {
        "instruction": "",
        "id": "q10417",
        "input": "python check http connection",
        "output": "",
        "rule": [
            "d10417"
        ]
    },
    {
        "instruction": "",
        "id": "q10418",
        "input": "turn string to list commas python",
        "output": "",
        "rule": [
            "d10418"
        ]
    },
    {
        "instruction": "",
        "id": "q10419",
        "input": "python check if a field exists in a object",
        "output": "",
        "rule": [
            "d10419"
        ]
    },
    {
        "instruction": "",
        "id": "q10420",
        "input": "turning a multidict into a dict python",
        "output": "",
        "rule": [
            "d10420"
        ]
    },
    {
        "instruction": "",
        "id": "q10421",
        "input": "python check if a path is a file",
        "output": "",
        "rule": [
            "d10421"
        ]
    },
    {
        "instruction": "",
        "id": "q10422",
        "input": "type hinting python style",
        "output": "",
        "rule": [
            "d10422"
        ]
    },
    {
        "instruction": "",
        "id": "q10423",
        "input": "python check if a string is only punctuation",
        "output": "",
        "rule": [
            "d10423"
        ]
    },
    {
        "instruction": "",
        "id": "q10424",
        "input": "type of string in python",
        "output": "",
        "rule": [
            "d10424"
        ]
    },
    {
        "instruction": "",
        "id": "q10425",
        "input": "python check if all elements in a list are the same",
        "output": "",
        "rule": [
            "d10425"
        ]
    },
    {
        "instruction": "",
        "id": "q10426",
        "input": "typecasting in python string to boolean",
        "output": "",
        "rule": [
            "d10426"
        ]
    },
    {
        "instruction": "",
        "id": "q10427",
        "input": "python check if an array contains a given range of values",
        "output": "",
        "rule": [
            "d10427"
        ]
    },
    {
        "instruction": "",
        "id": "q10428",
        "input": "ubuntu python max memory",
        "output": "",
        "rule": [
            "d10428"
        ]
    },
    {
        "instruction": "",
        "id": "q10429",
        "input": "python check if case insensitive substring exists",
        "output": "",
        "rule": [
            "d10429"
        ]
    },
    {
        "instruction": "",
        "id": "q10430",
        "input": "uniquifying a list in python",
        "output": "",
        "rule": [
            "d10430"
        ]
    },
    {
        "instruction": "",
        "id": "q10431",
        "input": "python check if complex number function",
        "output": "",
        "rule": [
            "d10431"
        ]
    },
    {
        "instruction": "",
        "id": "q10432",
        "input": "unix timestamp to utc offset python",
        "output": "",
        "rule": [
            "d10432"
        ]
    },
    {
        "instruction": "",
        "id": "q10433",
        "input": "python check if database can be reached",
        "output": "",
        "rule": [
            "d10433"
        ]
    },
    {
        "instruction": "",
        "id": "q10434",
        "input": "unix utc to local time python",
        "output": "",
        "rule": [
            "d10434"
        ]
    },
    {
        "instruction": "",
        "id": "q10435",
        "input": "python check if directory access",
        "output": "",
        "rule": [
            "d10435"
        ]
    },
    {
        "instruction": "",
        "id": "q10436",
        "input": "update elasticsearch index python",
        "output": "",
        "rule": [
            "d10436"
        ]
    },
    {
        "instruction": "",
        "id": "q10437",
        "input": "python check if email is valid",
        "output": "",
        "rule": [
            "d10437"
        ]
    },
    {
        "instruction": "",
        "id": "q10438",
        "input": "usage of any/all in python",
        "output": "",
        "rule": [
            "d10438"
        ]
    },
    {
        "instruction": "",
        "id": "q10439",
        "input": "python check if file exists without permission",
        "output": "",
        "rule": [
            "d10439"
        ]
    },
    {
        "instruction": "",
        "id": "q10440",
        "input": "using datetime in python on a variable python",
        "output": "",
        "rule": [
            "d10440"
        ]
    },
    {
        "instruction": "",
        "id": "q10441",
        "input": "python check if is collection",
        "output": "",
        "rule": [
            "d10441"
        ]
    },
    {
        "instruction": "",
        "id": "q10442",
        "input": "using element tree to read xml file in python",
        "output": "",
        "rule": [
            "d10442"
        ]
    },
    {
        "instruction": "",
        "id": "q10443",
        "input": "python check if it is a file",
        "output": "",
        "rule": [
            "d10443"
        ]
    },
    {
        "instruction": "",
        "id": "q10444",
        "input": "using h5py in python 3",
        "output": "",
        "rule": [
            "d10444"
        ]
    },
    {
        "instruction": "",
        "id": "q10445",
        "input": "python check if json file exists",
        "output": "",
        "rule": [
            "d10445"
        ]
    },
    {
        "instruction": "",
        "id": "q10446",
        "input": "using image magick in python in windows",
        "output": "",
        "rule": [
            "d10446"
        ]
    },
    {
        "instruction": "",
        "id": "q10447",
        "input": "python check if line for multiple strings",
        "output": "",
        "rule": [
            "d10447"
        ]
    },
    {
        "instruction": "",
        "id": "q10448",
        "input": "using lambda with tuple input python",
        "output": "",
        "rule": [
            "d10448"
        ]
    },
    {
        "instruction": "",
        "id": "q10449",
        "input": "python check if numeric type",
        "output": "",
        "rule": [
            "d10449"
        ]
    },
    {
        "instruction": "",
        "id": "q10450",
        "input": "using one hot tensor as index for a python 2d list",
        "output": "",
        "rule": [
            "d10450"
        ]
    },
    {
        "instruction": "",
        "id": "q10451",
        "input": "python check if numpy dtype",
        "output": "",
        "rule": [
            "d10451"
        ]
    },
    {
        "instruction": "",
        "id": "q10452",
        "input": "using python to delete a map service",
        "output": "",
        "rule": [
            "d10452"
        ]
    },
    {
        "instruction": "",
        "id": "q10453",
        "input": "python check if object exists dynamodb",
        "output": "",
        "rule": [
            "d10453"
        ]
    },
    {
        "instruction": "",
        "id": "q10454",
        "input": "using python to generate c++",
        "output": "",
        "rule": [
            "d10454"
        ]
    },
    {
        "instruction": "",
        "id": "q10455",
        "input": "using replace in loop from a string using python",
        "output": "",
        "rule": [
            "d10455"
        ]
    },
    {
        "instruction": "",
        "id": "q10456",
        "input": "python check if object json serializable",
        "output": "",
        "rule": [
            "d10456"
        ]
    },
    {
        "instruction": "",
        "id": "q10457",
        "input": "using title case in python",
        "output": "",
        "rule": [
            "d10457"
        ]
    },
    {
        "instruction": "",
        "id": "q10458",
        "input": "python check if object not nonetype",
        "output": "",
        "rule": [
            "d10458"
        ]
    },
    {
        "instruction": "",
        "id": "q10459",
        "input": "valiate filename python check user input reg ex",
        "output": "",
        "rule": [
            "d10459"
        ]
    },
    {
        "instruction": "",
        "id": "q10460",
        "input": "python check if port 443 is open",
        "output": "",
        "rule": [
            "d10460"
        ]
    },
    {
        "instruction": "",
        "id": "q10461",
        "input": "python check if value is null or a list",
        "output": "",
        "rule": [
            "d10461"
        ]
    },
    {
        "instruction": "",
        "id": "q10462",
        "input": "validate email address string python",
        "output": "",
        "rule": [
            "d10462"
        ]
    },
    {
        "instruction": "",
        "id": "q10463",
        "input": "python check ifa value isina list",
        "output": "",
        "rule": [
            "d10463"
        ]
    },
    {
        "instruction": "",
        "id": "q10464",
        "input": "visualizing layer outputs in cnn conv2d python",
        "output": "",
        "rule": [
            "d10464"
        ]
    },
    {
        "instruction": "",
        "id": "q10465",
        "input": "python check int is not float or boolean",
        "output": "",
        "rule": [
            "d10465"
        ]
    },
    {
        "instruction": "",
        "id": "q10466",
        "input": "want python to run one time then stop loop",
        "output": "",
        "rule": [
            "d10466"
        ]
    },
    {
        "instruction": "",
        "id": "q10467",
        "input": "python check is a function is a method",
        "output": "",
        "rule": [
            "d10467"
        ]
    },
    {
        "instruction": "",
        "id": "q10468",
        "input": "python check null nonetype object has no attribute",
        "output": "",
        "rule": [
            "d10468"
        ]
    },
    {
        "instruction": "",
        "id": "q10469",
        "input": "what category is a string variable in python",
        "output": "",
        "rule": [
            "d10469"
        ]
    },
    {
        "instruction": "",
        "id": "q10470",
        "input": "python check string %s",
        "output": "",
        "rule": [
            "d10470"
        ]
    },
    {
        "instruction": "",
        "id": "q10471",
        "input": "what function in python code tests if a string only contains letters",
        "output": "",
        "rule": [
            "d10471"
        ]
    },
    {
        "instruction": "",
        "id": "q10472",
        "input": "python check string extensions in list",
        "output": "",
        "rule": [
            "d10472"
        ]
    },
    {
        "instruction": "",
        "id": "q10473",
        "input": "what method is used to test if one set is contained entirely within another set in python",
        "output": "",
        "rule": [
            "d10473"
        ]
    },
    {
        "instruction": "",
        "id": "q10474",
        "input": "python check variable type list or matrix",
        "output": "",
        "rule": [
            "d10474"
        ]
    },
    {
        "instruction": "",
        "id": "q10475",
        "input": "what should be your test size in training python",
        "output": "",
        "rule": [
            "d10475"
        ]
    },
    {
        "instruction": "",
        "id": "q10476",
        "input": "python check whether stdout is binary",
        "output": "",
        "rule": [
            "d10476"
        ]
    },
    {
        "instruction": "",
        "id": "q10477",
        "input": "who killed my python process with sigkill",
        "output": "",
        "rule": [
            "d10477"
        ]
    },
    {
        "instruction": "",
        "id": "q10478",
        "input": "python chunk list into n parts'",
        "output": "",
        "rule": [
            "d10478"
        ]
    },
    {
        "instruction": "",
        "id": "q10479",
        "input": "word contain all vowels python",
        "output": "",
        "rule": [
            "d10479"
        ]
    },
    {
        "instruction": "",
        "id": "q10480",
        "input": "python clear all variables from memory",
        "output": "",
        "rule": [
            "d10480"
        ]
    },
    {
        "instruction": "",
        "id": "q10481",
        "input": "write a fits file python",
        "output": "",
        "rule": [
            "d10481"
        ]
    },
    {
        "instruction": "",
        "id": "q10482",
        "input": "python clear deleate an object",
        "output": "",
        "rule": [
            "d10482"
        ]
    },
    {
        "instruction": "",
        "id": "q10483",
        "input": "python close all figures",
        "output": "",
        "rule": [
            "d10483"
        ]
    },
    {
        "instruction": "",
        "id": "q10484",
        "input": "write a python function to count the number of lines in a text file",
        "output": "",
        "rule": [
            "d10484"
        ]
    },
    {
        "instruction": "",
        "id": "q10485",
        "input": "python close gui command",
        "output": "",
        "rule": [
            "d10485"
        ]
    },
    {
        "instruction": "",
        "id": "q10486",
        "input": "python close socket gracefully",
        "output": "",
        "rule": [
            "d10486"
        ]
    },
    {
        "instruction": "",
        "id": "q10487",
        "input": "write python object to yaml file",
        "output": "",
        "rule": [
            "d10487"
        ]
    },
    {
        "instruction": "",
        "id": "q10488",
        "input": "python closing files safely",
        "output": "",
        "rule": [
            "d10488"
        ]
    },
    {
        "instruction": "",
        "id": "q10489",
        "input": "writerow python extra line",
        "output": "",
        "rule": [
            "d10489"
        ]
    },
    {
        "instruction": "",
        "id": "q10490",
        "input": "writing at the end of the line python",
        "output": "",
        "rule": [
            "d10490"
        ]
    },
    {
        "instruction": "",
        "id": "q10491",
        "input": "python code for graphing a normal multi variate",
        "output": "",
        "rule": [
            "d10491"
        ]
    },
    {
        "instruction": "",
        "id": "q10492",
        "input": "wx python window not showing",
        "output": "",
        "rule": [
            "d10492"
        ]
    },
    {
        "instruction": "",
        "id": "q10493",
        "input": "python code to calculate distance using my map distance",
        "output": "",
        "rule": [
            "d10493"
        ]
    },
    {
        "instruction": "",
        "id": "q10494",
        "input": "wxpython add icon image",
        "output": "",
        "rule": [
            "d10494"
        ]
    },
    {
        "instruction": "",
        "id": "q10495",
        "input": "python code to plot a fourier waveform",
        "output": "",
        "rule": [
            "d10495"
        ]
    },
    {
        "instruction": "",
        "id": "q10496",
        "input": "wxpython change text color",
        "output": "",
        "rule": [
            "d10496"
        ]
    },
    {
        "instruction": "",
        "id": "q10497",
        "input": "python code to print all the columns csv",
        "output": "",
        "rule": [
            "d10497"
        ]
    },
    {
        "instruction": "",
        "id": "q10498",
        "input": "wxpython hide a control, maintain sizer",
        "output": "",
        "rule": [
            "d10498"
        ]
    },
    {
        "instruction": "",
        "id": "q10499",
        "input": "python code to receive a java object in json",
        "output": "",
        "rule": [
            "d10499"
        ]
    },
    {
        "instruction": "",
        "id": "q10500",
        "input": "wxpython select background color",
        "output": "",
        "rule": [
            "d10500"
        ]
    },
    {
        "instruction": "",
        "id": "q10501",
        "input": "python code to validate whether a location is within a geo json polygon",
        "output": "",
        "rule": [
            "d10501"
        ]
    },
    {
        "instruction": "",
        "id": "q10502",
        "input": "x y coordinates in python on a canvas",
        "output": "",
        "rule": [
            "d10502"
        ]
    },
    {
        "instruction": "",
        "id": "q10503",
        "input": "python codecs decode to binary",
        "output": "",
        "rule": [
            "d10503"
        ]
    },
    {
        "instruction": "",
        "id": "q10504",
        "input": "xlabel and ylabel in subplot in python",
        "output": "",
        "rule": [
            "d10504"
        ]
    },
    {
        "instruction": "",
        "id": "q10505",
        "input": "python combinations of 3 list",
        "output": "",
        "rule": [
            "d10505"
        ]
    },
    {
        "instruction": "",
        "id": "q10506",
        "input": "xml data validation using python",
        "output": "",
        "rule": [
            "d10506"
        ]
    },
    {
        "instruction": "",
        "id": "q10507",
        "input": "python combine arbitrary number of lists into one list",
        "output": "",
        "rule": [
            "d10507"
        ]
    },
    {
        "instruction": "",
        "id": "q10508",
        "input": "xml string to dict pythong",
        "output": "",
        "rule": [
            "d10508"
        ]
    },
    {
        "instruction": "",
        "id": "q10509",
        "input": "python combining async code",
        "output": "",
        "rule": [
            "d10509"
        ]
    },
    {
        "instruction": "",
        "id": "q10510",
        "input": "yaml load dump in python",
        "output": "",
        "rule": [
            "d10510"
        ]
    },
    {
        "instruction": "",
        "id": "q10511",
        "input": "python combobox dropdown click event",
        "output": "",
        "rule": [
            "d10511"
        ]
    },
    {
        "instruction": "",
        "id": "q10512",
        "input": "zero element vector, python3",
        "output": "",
        "rule": [
            "d10512"
        ]
    },
    {
        "instruction": "",
        "id": "q10513",
        "input": "python common words dictionary list",
        "output": "",
        "rule": [
            "d10513"
        ]
    },
    {
        "instruction": "",
        "id": "q10514",
        "input": "python context manager within context manager",
        "output": "",
        "rule": [
            "d10514"
        ]
    },
    {
        "instruction": "",
        "id": "q10515",
        "input": "how to use \"save as other\" reduced size pdf in python script text",
        "output": "",
        "rule": [
            "d10515"
        ]
    },
    {
        "instruction": "",
        "id": "q10516",
        "input": "python conventions for naming functions",
        "output": "",
        "rule": [
            "d10516"
        ]
    },
    {
        "instruction": "",
        "id": "q10517",
        "input": "is there a way to \"clear\" in python",
        "output": "",
        "rule": [
            "d10517"
        ]
    },
    {
        "instruction": "",
        "id": "q10518",
        "input": "python conver string to numpy str",
        "output": "",
        "rule": [
            "d10518"
        ]
    },
    {
        "instruction": "",
        "id": "q10519",
        "input": "python convolve gaussian kernel",
        "output": "",
        "rule": [
            "d10519"
        ]
    },
    {
        "instruction": "",
        "id": "q10520",
        "input": "python open file dialog \"without tkinter\"",
        "output": "",
        "rule": [
            "d10520"
        ]
    },
    {
        "instruction": "",
        "id": "q10521",
        "input": "python copy dict lowercase keys",
        "output": "",
        "rule": [
            "d10521"
        ]
    },
    {
        "instruction": "",
        "id": "q10522",
        "input": "'blueprint' object is not callable python",
        "output": "",
        "rule": [
            "d10522"
        ]
    },
    {
        "instruction": "",
        "id": "q10523",
        "input": "python copy properties of one object to another",
        "output": "",
        "rule": [
            "d10523"
        ]
    },
    {
        "instruction": "",
        "id": "q10524",
        "input": "1d array dtype python",
        "output": "",
        "rule": [
            "d10524"
        ]
    },
    {
        "instruction": "",
        "id": "q10525",
        "input": "python correlation function on specific columns",
        "output": "",
        "rule": [
            "d10525"
        ]
    },
    {
        "instruction": "",
        "id": "q10526",
        "input": "1d convolutional network python",
        "output": "",
        "rule": [
            "d10526"
        ]
    },
    {
        "instruction": "",
        "id": "q10527",
        "input": "python count unique number of occurrences in list",
        "output": "",
        "rule": [
            "d10527"
        ]
    },
    {
        "instruction": "",
        "id": "q10528",
        "input": "a string of colors for print in python",
        "output": "",
        "rule": [
            "d10528"
        ]
    },
    {
        "instruction": "",
        "id": "q10529",
        "input": "python counting sundays in a month",
        "output": "",
        "rule": [
            "d10529"
        ]
    },
    {
        "instruction": "",
        "id": "q10530",
        "input": "access a column using column name python",
        "output": "",
        "rule": [
            "d10530"
        ]
    },
    {
        "instruction": "",
        "id": "q10531",
        "input": "python covert string to number",
        "output": "",
        "rule": [
            "d10531"
        ]
    },
    {
        "instruction": "",
        "id": "q10532",
        "input": "access item based on name in list python",
        "output": "",
        "rule": [
            "d10532"
        ]
    },
    {
        "instruction": "",
        "id": "q10533",
        "input": "python covert string type list to list",
        "output": "",
        "rule": [
            "d10533"
        ]
    },
    {
        "instruction": "",
        "id": "q10534",
        "input": "access last element python numpy",
        "output": "",
        "rule": [
            "d10534"
        ]
    },
    {
        "instruction": "",
        "id": "q10535",
        "input": "python create a randomly size rectangle",
        "output": "",
        "rule": [
            "d10535"
        ]
    },
    {
        "instruction": "",
        "id": "q10536",
        "input": "access s3 data from python aws",
        "output": "",
        "rule": [
            "d10536"
        ]
    },
    {
        "instruction": "",
        "id": "q10537",
        "input": "python create c dll with ctypes",
        "output": "",
        "rule": [
            "d10537"
        ]
    },
    {
        "instruction": "",
        "id": "q10538",
        "input": "accesssing cpu return functions in python",
        "output": "",
        "rule": [
            "d10538"
        ]
    },
    {
        "instruction": "",
        "id": "q10539",
        "input": "python create comment block",
        "output": "",
        "rule": [
            "d10539"
        ]
    },
    {
        "instruction": "",
        "id": "q10540",
        "input": "activate virtual envs in python",
        "output": "",
        "rule": [
            "d10540"
        ]
    },
    {
        "instruction": "",
        "id": "q10541",
        "input": "python create dictionary from list of tuples",
        "output": "",
        "rule": [
            "d10541"
        ]
    },
    {
        "instruction": "",
        "id": "q10542",
        "input": "activemq python consumer 0",
        "output": "",
        "rule": [
            "d10542"
        ]
    },
    {
        "instruction": "",
        "id": "q10543",
        "input": "python create directory path",
        "output": "",
        "rule": [
            "d10543"
        ]
    },
    {
        "instruction": "",
        "id": "q10544",
        "input": "add a token interface python",
        "output": "",
        "rule": [
            "d10544"
        ]
    },
    {
        "instruction": "",
        "id": "q10545",
        "input": "python create large random string",
        "output": "",
        "rule": [
            "d10545"
        ]
    },
    {
        "instruction": "",
        "id": "q10546",
        "input": "add auth bearer header to python request",
        "output": "",
        "rule": [
            "d10546"
        ]
    },
    {
        "instruction": "",
        "id": "q10547",
        "input": "python create numpy array as list",
        "output": "",
        "rule": [
            "d10547"
        ]
    },
    {
        "instruction": "",
        "id": "q10548",
        "input": "add column sqlalchemy python",
        "output": "",
        "rule": [
            "d10548"
        ]
    },
    {
        "instruction": "",
        "id": "q10549",
        "input": "python create path if doesnt exist",
        "output": "",
        "rule": [
            "d10549"
        ]
    },
    {
        "instruction": "",
        "id": "q10550",
        "input": "add early stopping in tensorflow 2 layers in python",
        "output": "",
        "rule": [
            "d10550"
        ]
    },
    {
        "instruction": "",
        "id": "q10551",
        "input": "python creating a string form a list",
        "output": "",
        "rule": [
            "d10551"
        ]
    },
    {
        "instruction": "",
        "id": "q10552",
        "input": "add high frequency signal to wave file python",
        "output": "",
        "rule": [
            "d10552"
        ]
    },
    {
        "instruction": "",
        "id": "q10553",
        "input": "python ctype returned null in string",
        "output": "",
        "rule": [
            "d10553"
        ]
    },
    {
        "instruction": "",
        "id": "q10554",
        "input": "add images to pdf python code",
        "output": "",
        "rule": [
            "d10554"
        ]
    },
    {
        "instruction": "",
        "id": "q10555",
        "input": "python ctypes load dll linux",
        "output": "",
        "rule": [
            "d10555"
        ]
    },
    {
        "instruction": "",
        "id": "q10556",
        "input": "add itemes to end of python liost",
        "output": "",
        "rule": [
            "d10556"
        ]
    },
    {
        "instruction": "",
        "id": "q10557",
        "input": "python ctypes pass array of short",
        "output": "",
        "rule": [
            "d10557"
        ]
    },
    {
        "instruction": "",
        "id": "q10558",
        "input": "add iterable to list python",
        "output": "",
        "rule": [
            "d10558"
        ]
    },
    {
        "instruction": "",
        "id": "q10559",
        "input": "python ctypes pass string to c char*",
        "output": "",
        "rule": [
            "d10559"
        ]
    },
    {
        "instruction": "",
        "id": "q10560",
        "input": "python ctypes structure dictionary",
        "output": "",
        "rule": [
            "d10560"
        ]
    },
    {
        "instruction": "",
        "id": "q10561",
        "input": "adding text to images in python",
        "output": "",
        "rule": [
            "d10561"
        ]
    },
    {
        "instruction": "",
        "id": "q10562",
        "input": "python ctypes use string",
        "output": "",
        "rule": [
            "d10562"
        ]
    },
    {
        "instruction": "",
        "id": "q10563",
        "input": "admin run command for python in cmd",
        "output": "",
        "rule": [
            "d10563"
        ]
    },
    {
        "instruction": "",
        "id": "q10564",
        "input": "python curses add string without moving cursor",
        "output": "",
        "rule": [
            "d10564"
        ]
    },
    {
        "instruction": "",
        "id": "q10565",
        "input": "amax python for 3d numpy array",
        "output": "",
        "rule": [
            "d10565"
        ]
    },
    {
        "instruction": "",
        "id": "q10566",
        "input": "python curses window addstr",
        "output": "",
        "rule": [
            "d10566"
        ]
    },
    {
        "instruction": "",
        "id": "q10567",
        "input": "anyway to inject javascript with python",
        "output": "",
        "rule": [
            "d10567"
        ]
    },
    {
        "instruction": "",
        "id": "q10568",
        "input": "python cycle through files with specific extension",
        "output": "",
        "rule": [
            "d10568"
        ]
    },
    {
        "instruction": "",
        "id": "q10569",
        "input": "python data frame drop columns without names",
        "output": "",
        "rule": [
            "d10569"
        ]
    },
    {
        "instruction": "",
        "id": "q10570",
        "input": "apply a texture opengl python",
        "output": "",
        "rule": [
            "d10570"
        ]
    },
    {
        "instruction": "",
        "id": "q10571",
        "input": "python datatype of an array check condition",
        "output": "",
        "rule": [
            "d10571"
        ]
    },
    {
        "instruction": "",
        "id": "q10572",
        "input": "apply function to a table python",
        "output": "",
        "rule": [
            "d10572"
        ]
    },
    {
        "instruction": "",
        "id": "q10573",
        "input": "python datetime delta total milliseconds",
        "output": "",
        "rule": [
            "d10573"
        ]
    },
    {
        "instruction": "",
        "id": "q10574",
        "input": "apply upper case python function",
        "output": "",
        "rule": [
            "d10574"
        ]
    },
    {
        "instruction": "",
        "id": "q10575",
        "input": "python datetime isoformat formatstring",
        "output": "",
        "rule": [
            "d10575"
        ]
    },
    {
        "instruction": "",
        "id": "q10576",
        "input": "python datetime timestamp to human readable",
        "output": "",
        "rule": [
            "d10576"
        ]
    },
    {
        "instruction": "",
        "id": "q10577",
        "input": "argmax of array values in python",
        "output": "",
        "rule": [
            "d10577"
        ]
    },
    {
        "instruction": "",
        "id": "q10578",
        "input": "python datetime to iso datetime",
        "output": "",
        "rule": [
            "d10578"
        ]
    },
    {
        "instruction": "",
        "id": "q10579",
        "input": "array to ascii python",
        "output": "",
        "rule": [
            "d10579"
        ]
    },
    {
        "instruction": "",
        "id": "q10580",
        "input": "python datetime truncate microseconds",
        "output": "",
        "rule": [
            "d10580"
        ]
    },
    {
        "instruction": "",
        "id": "q10581",
        "input": "ascii capital letters python",
        "output": "",
        "rule": [
            "d10581"
        ]
    },
    {
        "instruction": "",
        "id": "q10582",
        "input": "python datetime with tzinfo from timestamp",
        "output": "",
        "rule": [
            "d10582"
        ]
    },
    {
        "instruction": "",
        "id": "q10583",
        "input": "python decision tree output node and depth",
        "output": "",
        "rule": [
            "d10583"
        ]
    },
    {
        "instruction": "",
        "id": "q10584",
        "input": "automaitcally crop images python",
        "output": "",
        "rule": [
            "d10584"
        ]
    },
    {
        "instruction": "",
        "id": "q10585",
        "input": "python decision tree symbolic feature",
        "output": "",
        "rule": [
            "d10585"
        ]
    },
    {
        "instruction": "",
        "id": "q10586",
        "input": "aws ec2 python get instance ips",
        "output": "",
        "rule": [
            "d10586"
        ]
    },
    {
        "instruction": "",
        "id": "q10587",
        "input": "python decorate an instance method",
        "output": "",
        "rule": [
            "d10587"
        ]
    },
    {
        "instruction": "",
        "id": "q10588",
        "input": "aws lambda python boto3 credential",
        "output": "",
        "rule": [
            "d10588"
        ]
    },
    {
        "instruction": "",
        "id": "q10589",
        "input": "python decorate function execution",
        "output": "",
        "rule": [
            "d10589"
        ]
    },
    {
        "instruction": "",
        "id": "q10590",
        "input": "aws lambda request url python",
        "output": "",
        "rule": [
            "d10590"
        ]
    },
    {
        "instruction": "",
        "id": "q10591",
        "input": "python decorate object method",
        "output": "",
        "rule": [
            "d10591"
        ]
    },
    {
        "instruction": "",
        "id": "q10592",
        "input": "aws python list ec2 filter by tag",
        "output": "",
        "rule": [
            "d10592"
        ]
    },
    {
        "instruction": "",
        "id": "q10593",
        "input": "python def specify variable type",
        "output": "",
        "rule": [
            "d10593"
        ]
    },
    {
        "instruction": "",
        "id": "q10594",
        "input": "python def to remove duplicates from excel file",
        "output": "",
        "rule": [
            "d10594"
        ]
    },
    {
        "instruction": "",
        "id": "q10595",
        "input": "best normalized 2d python",
        "output": "",
        "rule": [
            "d10595"
        ]
    },
    {
        "instruction": "",
        "id": "q10596",
        "input": "python default function value not being overwritten",
        "output": "",
        "rule": [
            "d10596"
        ]
    },
    {
        "instruction": "",
        "id": "q10597",
        "input": "best way to do two way mapping python",
        "output": "",
        "rule": [
            "d10597"
        ]
    },
    {
        "instruction": "",
        "id": "q10598",
        "input": "python delete a unempty folder",
        "output": "",
        "rule": [
            "d10598"
        ]
    },
    {
        "instruction": "",
        "id": "q10599",
        "input": "best way to see xml content in python",
        "output": "",
        "rule": [
            "d10599"
        ]
    },
    {
        "instruction": "",
        "id": "q10600",
        "input": "python deleting the cache",
        "output": "",
        "rule": [
            "d10600"
        ]
    },
    {
        "instruction": "",
        "id": "q10601",
        "input": "best way to stringify python object",
        "output": "",
        "rule": [
            "d10601"
        ]
    },
    {
        "instruction": "",
        "id": "q10602",
        "input": "python design time domain high pass filter",
        "output": "",
        "rule": [
            "d10602"
        ]
    },
    {
        "instruction": "",
        "id": "q10603",
        "input": "bits to binary python",
        "output": "",
        "rule": [
            "d10603"
        ]
    },
    {
        "instruction": "",
        "id": "q10604",
        "input": "python detect gaps in list",
        "output": "",
        "rule": [
            "d10604"
        ]
    },
    {
        "instruction": "",
        "id": "q10605",
        "input": "black or white background python",
        "output": "",
        "rule": [
            "d10605"
        ]
    },
    {
        "instruction": "",
        "id": "q10606",
        "input": "python detect if function is a method",
        "output": "",
        "rule": [
            "d10606"
        ]
    },
    {
        "instruction": "",
        "id": "q10607",
        "input": "boxplot not accurate python",
        "output": "",
        "rule": [
            "d10607"
        ]
    },
    {
        "instruction": "",
        "id": "q10608",
        "input": "python detect parent process exit",
        "output": "",
        "rule": [
            "d10608"
        ]
    },
    {
        "instruction": "",
        "id": "q10609",
        "input": "bring window to focus python",
        "output": "",
        "rule": [
            "d10609"
        ]
    },
    {
        "instruction": "",
        "id": "q10610",
        "input": "python determine file empty",
        "output": "",
        "rule": [
            "d10610"
        ]
    },
    {
        "instruction": "",
        "id": "q10611",
        "input": "bringing frame within a frame into toplevel python",
        "output": "",
        "rule": [
            "d10611"
        ]
    },
    {
        "instruction": "",
        "id": "q10612",
        "input": "python determine process memory usage",
        "output": "",
        "rule": [
            "d10612"
        ]
    },
    {
        "instruction": "",
        "id": "q10613",
        "input": "build python extension with compile flag",
        "output": "",
        "rule": [
            "d10613"
        ]
    },
    {
        "instruction": "",
        "id": "q10614",
        "input": "python determining bytes on a buffered reader",
        "output": "",
        "rule": [
            "d10614"
        ]
    },
    {
        "instruction": "",
        "id": "q10615",
        "input": "built in python ftp server",
        "output": "",
        "rule": [
            "d10615"
        ]
    },
    {
        "instruction": "",
        "id": "q10616",
        "input": "python diagonal matrix boolen",
        "output": "",
        "rule": [
            "d10616"
        ]
    },
    {
        "instruction": "",
        "id": "q10617",
        "input": "bytearray in python for array",
        "output": "",
        "rule": [
            "d10617"
        ]
    },
    {
        "instruction": "",
        "id": "q10618",
        "input": "python dict keys iterable",
        "output": "",
        "rule": [
            "d10618"
        ]
    },
    {
        "instruction": "",
        "id": "q10619",
        "input": "bytes to gzip object python",
        "output": "",
        "rule": [
            "d10619"
        ]
    },
    {
        "instruction": "",
        "id": "q10620",
        "input": "python dict to yaml",
        "output": "",
        "rule": [
            "d10620"
        ]
    },
    {
        "instruction": "",
        "id": "q10621",
        "input": "bytes to json object python",
        "output": "",
        "rule": [
            "d10621"
        ]
    },
    {
        "instruction": "",
        "id": "q10622",
        "input": "python dictionary best way to check if item in set and get value",
        "output": "",
        "rule": [
            "d10622"
        ]
    },
    {
        "instruction": "",
        "id": "q10623",
        "input": "c++ equivelence of def in python",
        "output": "",
        "rule": [
            "d10623"
        ]
    },
    {
        "instruction": "",
        "id": "q10624",
        "input": "python dictionary set default for wrong key",
        "output": "",
        "rule": [
            "d10624"
        ]
    },
    {
        "instruction": "",
        "id": "q10625",
        "input": "c++ map to python dict",
        "output": "",
        "rule": [
            "d10625"
        ]
    },
    {
        "instruction": "",
        "id": "q10626",
        "input": "python dictionary setdefault multiple keys",
        "output": "",
        "rule": [
            "d10626"
        ]
    },
    {
        "instruction": "",
        "id": "q10627",
        "input": "calculate an inverse matrix using python",
        "output": "",
        "rule": [
            "d10627"
        ]
    },
    {
        "instruction": "",
        "id": "q10628",
        "input": "python dictionary values to lowercase",
        "output": "",
        "rule": [
            "d10628"
        ]
    },
    {
        "instruction": "",
        "id": "q10629",
        "input": "calculate centroid vector of list of vectors python",
        "output": "",
        "rule": [
            "d10629"
        ]
    },
    {
        "instruction": "",
        "id": "q10630",
        "input": "calculate euclidean distance between two vectors python",
        "output": "",
        "rule": [
            "d10630"
        ]
    },
    {
        "instruction": "",
        "id": "q10631",
        "input": "python discord already connected to a voice channel",
        "output": "",
        "rule": [
            "d10631"
        ]
    },
    {
        "instruction": "",
        "id": "q10632",
        "input": "calculate median of list of times python",
        "output": "",
        "rule": [
            "d10632"
        ]
    },
    {
        "instruction": "",
        "id": "q10633",
        "input": "python display specific columns",
        "output": "",
        "rule": [
            "d10633"
        ]
    },
    {
        "instruction": "",
        "id": "q10634",
        "input": "calculate p value python logistic regression",
        "output": "",
        "rule": [
            "d10634"
        ]
    },
    {
        "instruction": "",
        "id": "q10635",
        "input": "python dispose of object in loop",
        "output": "",
        "rule": [
            "d10635"
        ]
    },
    {
        "instruction": "",
        "id": "q10636",
        "input": "calculating the average of a list in python",
        "output": "",
        "rule": [
            "d10636"
        ]
    },
    {
        "instruction": "",
        "id": "q10637",
        "input": "python distance of two points",
        "output": "",
        "rule": [
            "d10637"
        ]
    },
    {
        "instruction": "",
        "id": "q10638",
        "input": "call a function with wrapper python",
        "output": "",
        "rule": [
            "d10638"
        ]
    },
    {
        "instruction": "",
        "id": "q10639",
        "input": "python divide string into list of lines",
        "output": "",
        "rule": [
            "d10639"
        ]
    },
    {
        "instruction": "",
        "id": "q10640",
        "input": "python django change active directory",
        "output": "",
        "rule": [
            "d10640"
        ]
    },
    {
        "instruction": "",
        "id": "q10641",
        "input": "can a range object hold strings python",
        "output": "",
        "rule": [
            "d10641"
        ]
    },
    {
        "instruction": "",
        "id": "q10642",
        "input": "python django function redirect",
        "output": "",
        "rule": [
            "d10642"
        ]
    },
    {
        "instruction": "",
        "id": "q10643",
        "input": "python django how to print out image models",
        "output": "",
        "rule": [
            "d10643"
        ]
    },
    {
        "instruction": "",
        "id": "q10644",
        "input": "can you change a python iterable mid loop",
        "output": "",
        "rule": [
            "d10644"
        ]
    },
    {
        "instruction": "",
        "id": "q10645",
        "input": "python django request get locale",
        "output": "",
        "rule": [
            "d10645"
        ]
    },
    {
        "instruction": "",
        "id": "q10646",
        "input": "can you change the data type of an entire list in python",
        "output": "",
        "rule": [
            "d10646"
        ]
    },
    {
        "instruction": "",
        "id": "q10647",
        "input": "python django static files",
        "output": "",
        "rule": [
            "d10647"
        ]
    },
    {
        "instruction": "",
        "id": "q10648",
        "input": "can you combine pdf files using python",
        "output": "",
        "rule": [
            "d10648"
        ]
    },
    {
        "instruction": "",
        "id": "q10649",
        "input": "python django validator regex",
        "output": "",
        "rule": [
            "d10649"
        ]
    },
    {
        "instruction": "",
        "id": "q10650",
        "input": "can you replace multiple things in a string in python",
        "output": "",
        "rule": [
            "d10650"
        ]
    },
    {
        "instruction": "",
        "id": "q10651",
        "input": "python docstring restructuredtext sphinx",
        "output": "",
        "rule": [
            "d10651"
        ]
    },
    {
        "instruction": "",
        "id": "q10652",
        "input": "can you turn a string into a dictionary python",
        "output": "",
        "rule": [
            "d10652"
        ]
    },
    {
        "instruction": "",
        "id": "q10653",
        "input": "python doctest string multiline",
        "output": "",
        "rule": [
            "d10653"
        ]
    },
    {
        "instruction": "",
        "id": "q10654",
        "input": "capitalize entire string pythonm",
        "output": "",
        "rule": [
            "d10654"
        ]
    },
    {
        "instruction": "",
        "id": "q10655",
        "input": "python downsampling 2d array",
        "output": "",
        "rule": [
            "d10655"
        ]
    },
    {
        "instruction": "",
        "id": "q10656",
        "input": "catch code in cache mem python",
        "output": "",
        "rule": [
            "d10656"
        ]
    },
    {
        "instruction": "",
        "id": "q10657",
        "input": "python draw line segment",
        "output": "",
        "rule": [
            "d10657"
        ]
    },
    {
        "instruction": "",
        "id": "q10658",
        "input": "centos 7 yum remove python",
        "output": "",
        "rule": [
            "d10658"
        ]
    },
    {
        "instruction": "",
        "id": "q10659",
        "input": "python draw string into qrcode",
        "output": "",
        "rule": [
            "d10659"
        ]
    },
    {
        "instruction": "",
        "id": "q10660",
        "input": "change a string into a list in python",
        "output": "",
        "rule": [
            "d10660"
        ]
    },
    {
        "instruction": "",
        "id": "q10661",
        "input": "python drop none from dictionary",
        "output": "",
        "rule": [
            "d10661"
        ]
    },
    {
        "instruction": "",
        "id": "q10662",
        "input": "change all strings in a list to list python",
        "output": "",
        "rule": [
            "d10662"
        ]
    },
    {
        "instruction": "",
        "id": "q10663",
        "input": "python elasticsearch batch delete",
        "output": "",
        "rule": [
            "d10663"
        ]
    },
    {
        "instruction": "",
        "id": "q10664",
        "input": "change cartesian coordinates to range and azimuth python",
        "output": "",
        "rule": [
            "d10664"
        ]
    },
    {
        "instruction": "",
        "id": "q10665",
        "input": "python elasticsearch hits is empty",
        "output": "",
        "rule": [
            "d10665"
        ]
    },
    {
        "instruction": "",
        "id": "q10666",
        "input": "change column string to float python",
        "output": "",
        "rule": [
            "d10666"
        ]
    },
    {
        "instruction": "",
        "id": "q10667",
        "input": "python elasticsearch not all values sent",
        "output": "",
        "rule": [
            "d10667"
        ]
    },
    {
        "instruction": "",
        "id": "q10668",
        "input": "change numpy array to table in python",
        "output": "",
        "rule": [
            "d10668"
        ]
    },
    {
        "instruction": "",
        "id": "q10669",
        "input": "python eliminate spaces in a string",
        "output": "",
        "rule": [
            "d10669"
        ]
    },
    {
        "instruction": "",
        "id": "q10670",
        "input": "change object value and heap python",
        "output": "",
        "rule": [
            "d10670"
        ]
    },
    {
        "instruction": "",
        "id": "q10671",
        "input": "python email address exists validate",
        "output": "",
        "rule": [
            "d10671"
        ]
    },
    {
        "instruction": "",
        "id": "q10672",
        "input": "change python dictionary to multidimensional array",
        "output": "",
        "rule": [
            "d10672"
        ]
    },
    {
        "instruction": "",
        "id": "q10673",
        "input": "python email only sending to self",
        "output": "",
        "rule": [
            "d10673"
        ]
    },
    {
        "instruction": "",
        "id": "q10674",
        "input": "change scale python plot",
        "output": "",
        "rule": [
            "d10674"
        ]
    },
    {
        "instruction": "",
        "id": "q10675",
        "input": "python empty line signifies last line stdin",
        "output": "",
        "rule": [
            "d10675"
        ]
    },
    {
        "instruction": "",
        "id": "q10676",
        "input": "change the type of one element in a tuple python",
        "output": "",
        "rule": [
            "d10676"
        ]
    },
    {
        "instruction": "",
        "id": "q10677",
        "input": "python equivelent to sql in",
        "output": "",
        "rule": [
            "d10677"
        ]
    },
    {
        "instruction": "",
        "id": "q10678",
        "input": "change year in datetime python",
        "output": "",
        "rule": [
            "d10678"
        ]
    },
    {
        "instruction": "",
        "id": "q10679",
        "input": "python escape out % in string",
        "output": "",
        "rule": [
            "d10679"
        ]
    },
    {
        "instruction": "",
        "id": "q10680",
        "input": "changing numpy array to float python",
        "output": "",
        "rule": [
            "d10680"
        ]
    },
    {
        "instruction": "",
        "id": "q10681",
        "input": "python escape string to path in bash",
        "output": "",
        "rule": [
            "d10681"
        ]
    },
    {
        "instruction": "",
        "id": "q10682",
        "input": "check file is empty python",
        "output": "",
        "rule": [
            "d10682"
        ]
    },
    {
        "instruction": "",
        "id": "q10683",
        "input": "check for punctuation in string python",
        "output": "",
        "rule": [
            "d10683"
        ]
    },
    {
        "instruction": "",
        "id": "q10684",
        "input": "python execution root directory",
        "output": "",
        "rule": [
            "d10684"
        ]
    },
    {
        "instruction": "",
        "id": "q10685",
        "input": "check if a file is json python",
        "output": "",
        "rule": [
            "d10685"
        ]
    },
    {
        "instruction": "",
        "id": "q10686",
        "input": "check if a queue is empty in python",
        "output": "",
        "rule": [
            "d10686"
        ]
    },
    {
        "instruction": "",
        "id": "q10687",
        "input": "python expand into kwargs",
        "output": "",
        "rule": [
            "d10687"
        ]
    },
    {
        "instruction": "",
        "id": "q10688",
        "input": "check if a sting is empty python",
        "output": "",
        "rule": [
            "d10688"
        ]
    },
    {
        "instruction": "",
        "id": "q10689",
        "input": "python expand variable in string",
        "output": "",
        "rule": [
            "d10689"
        ]
    },
    {
        "instruction": "",
        "id": "q10690",
        "input": "python extension add method to object",
        "output": "",
        "rule": [
            "d10690"
        ]
    },
    {
        "instruction": "",
        "id": "q10691",
        "input": "check if file is readonly python",
        "output": "",
        "rule": [
            "d10691"
        ]
    },
    {
        "instruction": "",
        "id": "q10692",
        "input": "python extract complex nested ordereddict keys",
        "output": "",
        "rule": [
            "d10692"
        ]
    },
    {
        "instruction": "",
        "id": "q10693",
        "input": "check if it is nonetype python",
        "output": "",
        "rule": [
            "d10693"
        ]
    },
    {
        "instruction": "",
        "id": "q10694",
        "input": "python extract sentences based on keywords",
        "output": "",
        "rule": [
            "d10694"
        ]
    },
    {
        "instruction": "",
        "id": "q10695",
        "input": "check if list object is null in python",
        "output": "",
        "rule": [
            "d10695"
        ]
    },
    {
        "instruction": "",
        "id": "q10696",
        "input": "python fast reading within text file",
        "output": "",
        "rule": [
            "d10696"
        ]
    },
    {
        "instruction": "",
        "id": "q10697",
        "input": "check if object is a number python",
        "output": "",
        "rule": [
            "d10697"
        ]
    },
    {
        "instruction": "",
        "id": "q10698",
        "input": "python fast way to decode image",
        "output": "",
        "rule": [
            "d10698"
        ]
    },
    {
        "instruction": "",
        "id": "q10699",
        "input": "check if python is running on microsoft",
        "output": "",
        "rule": [
            "d10699"
        ]
    },
    {
        "instruction": "",
        "id": "q10700",
        "input": "python fastest way to copy files",
        "output": "",
        "rule": [
            "d10700"
        ]
    },
    {
        "instruction": "",
        "id": "q10701",
        "input": "check if python variable is a file path",
        "output": "",
        "rule": [
            "d10701"
        ]
    },
    {
        "instruction": "",
        "id": "q10702",
        "input": "python fatest way to read remote files",
        "output": "",
        "rule": [
            "d10702"
        ]
    },
    {
        "instruction": "",
        "id": "q10703",
        "input": "check if string is hex python",
        "output": "",
        "rule": [
            "d10703"
        ]
    },
    {
        "instruction": "",
        "id": "q10704",
        "input": "python ffmpeg save animation",
        "output": "",
        "rule": [
            "d10704"
        ]
    },
    {
        "instruction": "",
        "id": "q10705",
        "input": "check if string present in list of strings python",
        "output": "",
        "rule": [
            "d10705"
        ]
    },
    {
        "instruction": "",
        "id": "q10706",
        "input": "python fft numpy code example magnitude",
        "output": "",
        "rule": [
            "d10706"
        ]
    },
    {
        "instruction": "",
        "id": "q10707",
        "input": "check if variable is emoty or not in python",
        "output": "",
        "rule": [
            "d10707"
        ]
    },
    {
        "instruction": "",
        "id": "q10708",
        "input": "python fft plot magnitude phase",
        "output": "",
        "rule": [
            "d10708"
        ]
    },
    {
        "instruction": "",
        "id": "q10709",
        "input": "check if variable not passed into html python flask",
        "output": "",
        "rule": [
            "d10709"
        ]
    },
    {
        "instruction": "",
        "id": "q10710",
        "input": "python fft scipy amplitude",
        "output": "",
        "rule": [
            "d10710"
        ]
    },
    {
        "instruction": "",
        "id": "q10711",
        "input": "check iterable property in python",
        "output": "",
        "rule": [
            "d10711"
        ]
    },
    {
        "instruction": "",
        "id": "q10712",
        "input": "python fft spectrum np",
        "output": "",
        "rule": [
            "d10712"
        ]
    },
    {
        "instruction": "",
        "id": "q10713",
        "input": "check list shape python",
        "output": "",
        "rule": [
            "d10713"
        ]
    },
    {
        "instruction": "",
        "id": "q10714",
        "input": "python file extension for pickled objects",
        "output": "",
        "rule": [
            "d10714"
        ]
    },
    {
        "instruction": "",
        "id": "q10715",
        "input": "check memory size of computer python",
        "output": "",
        "rule": [
            "d10715"
        ]
    },
    {
        "instruction": "",
        "id": "q10716",
        "input": "python file extension rename to lower",
        "output": "",
        "rule": [
            "d10716"
        ]
    },
    {
        "instruction": "",
        "id": "q10717",
        "input": "check memory usage in python",
        "output": "",
        "rule": [
            "d10717"
        ]
    },
    {
        "instruction": "",
        "id": "q10718",
        "input": "python file flush not working",
        "output": "",
        "rule": [
            "d10718"
        ]
    },
    {
        "instruction": "",
        "id": "q10719",
        "input": "check systemd service python",
        "output": "",
        "rule": [
            "d10719"
        ]
    },
    {
        "instruction": "",
        "id": "q10720",
        "input": "python file read last line",
        "output": "",
        "rule": [
            "d10720"
        ]
    },
    {
        "instruction": "",
        "id": "q10721",
        "input": "check type in list python",
        "output": "",
        "rule": [
            "d10721"
        ]
    },
    {
        "instruction": "",
        "id": "q10722",
        "input": "python filter columns isin",
        "output": "",
        "rule": [
            "d10722"
        ]
    },
    {
        "instruction": "",
        "id": "q10723",
        "input": "checking for file changes in python",
        "output": "",
        "rule": [
            "d10723"
        ]
    },
    {
        "instruction": "",
        "id": "q10724",
        "input": "python filter empty lines",
        "output": "",
        "rule": [
            "d10724"
        ]
    },
    {
        "instruction": "",
        "id": "q10725",
        "input": "checking in python if two files are similar",
        "output": "",
        "rule": [
            "d10725"
        ]
    },
    {
        "instruction": "",
        "id": "q10726",
        "input": "python filter out stop words",
        "output": "",
        "rule": [
            "d10726"
        ]
    },
    {
        "instruction": "",
        "id": "q10727",
        "input": "checking the intersection of two boxes in python",
        "output": "",
        "rule": [
            "d10727"
        ]
    },
    {
        "instruction": "",
        "id": "q10728",
        "input": "python filter the duplicated item in a list",
        "output": "",
        "rule": [
            "d10728"
        ]
    },
    {
        "instruction": "",
        "id": "q10729",
        "input": "checking what linux distibution is being used with python",
        "output": "",
        "rule": [
            "d10729"
        ]
    },
    {
        "instruction": "",
        "id": "q10730",
        "input": "python finally run before raise",
        "output": "",
        "rule": [
            "d10730"
        ]
    },
    {
        "instruction": "",
        "id": "q10731",
        "input": "python finding local maxima in image",
        "output": "",
        "rule": [
            "d10731"
        ]
    },
    {
        "instruction": "",
        "id": "q10732",
        "input": "choose directory in python gui",
        "output": "",
        "rule": [
            "d10732"
        ]
    },
    {
        "instruction": "",
        "id": "q10733",
        "input": "python first of month for date",
        "output": "",
        "rule": [
            "d10733"
        ]
    },
    {
        "instruction": "",
        "id": "q10734",
        "input": "cifar 10 python 3",
        "output": "",
        "rule": [
            "d10734"
        ]
    },
    {
        "instruction": "",
        "id": "q10735",
        "input": "python fiure out object type",
        "output": "",
        "rule": [
            "d10735"
        ]
    },
    {
        "instruction": "",
        "id": "q10736",
        "input": "clear all local variables python",
        "output": "",
        "rule": [
            "d10736"
        ]
    },
    {
        "instruction": "",
        "id": "q10737",
        "input": "python fixed align print text",
        "output": "",
        "rule": [
            "d10737"
        ]
    },
    {
        "instruction": "",
        "id": "q10738",
        "input": "clear an numpy array from memory, python",
        "output": "",
        "rule": [
            "d10738"
        ]
    },
    {
        "instruction": "",
        "id": "q10739",
        "input": "python flask if has url params not empty",
        "output": "",
        "rule": [
            "d10739"
        ]
    },
    {
        "instruction": "",
        "id": "q10740",
        "input": "close command in python 2",
        "output": "",
        "rule": [
            "d10740"
        ]
    },
    {
        "instruction": "",
        "id": "q10741",
        "input": "python flask if requests is post",
        "output": "",
        "rule": [
            "d10741"
        ]
    },
    {
        "instruction": "",
        "id": "q10742",
        "input": "close db connection on execpt python",
        "output": "",
        "rule": [
            "d10742"
        ]
    },
    {
        "instruction": "",
        "id": "q10743",
        "input": "python flask link route and responce",
        "output": "",
        "rule": [
            "d10743"
        ]
    },
    {
        "instruction": "",
        "id": "q10744",
        "input": "close python sql server connections",
        "output": "",
        "rule": [
            "d10744"
        ]
    },
    {
        "instruction": "",
        "id": "q10745",
        "input": "python flask method not allowed for requested url",
        "output": "",
        "rule": [
            "d10745"
        ]
    },
    {
        "instruction": "",
        "id": "q10746",
        "input": "cmap color python colarbar limits",
        "output": "",
        "rule": [
            "d10746"
        ]
    },
    {
        "instruction": "",
        "id": "q10747",
        "input": "python flask request set authorization headers",
        "output": "",
        "rule": [
            "d10747"
        ]
    },
    {
        "instruction": "",
        "id": "q10748",
        "input": "code for calculating manhattan distance in python",
        "output": "",
        "rule": [
            "d10748"
        ]
    },
    {
        "instruction": "",
        "id": "q10749",
        "input": "python flask watch restart",
        "output": "",
        "rule": [
            "d10749"
        ]
    },
    {
        "instruction": "",
        "id": "q10750",
        "input": "combobox dropdown event python click",
        "output": "",
        "rule": [
            "d10750"
        ]
    },
    {
        "instruction": "",
        "id": "q10751",
        "input": "python flat a nested list",
        "output": "",
        "rule": [
            "d10751"
        ]
    },
    {
        "instruction": "",
        "id": "q10752",
        "input": "command to clear the shell in python",
        "output": "",
        "rule": [
            "d10752"
        ]
    },
    {
        "instruction": "",
        "id": "q10753",
        "input": "python flat nested lists",
        "output": "",
        "rule": [
            "d10753"
        ]
    },
    {
        "instruction": "",
        "id": "q10754",
        "input": "command to run test cases in python shell",
        "output": "",
        "rule": [
            "d10754"
        ]
    },
    {
        "instruction": "",
        "id": "q10755",
        "input": "compare elemt wise two vector sin python",
        "output": "",
        "rule": [
            "d10755"
        ]
    },
    {
        "instruction": "",
        "id": "q10756",
        "input": "python flatten in not defined",
        "output": "",
        "rule": [
            "d10756"
        ]
    },
    {
        "instruction": "",
        "id": "q10757",
        "input": "compare python string, list and tuple",
        "output": "",
        "rule": [
            "d10757"
        ]
    },
    {
        "instruction": "",
        "id": "q10758",
        "input": "python flip a matrix",
        "output": "",
        "rule": [
            "d10758"
        ]
    },
    {
        "instruction": "",
        "id": "q10759",
        "input": "comparing elements of an array to an entire second array in python",
        "output": "",
        "rule": [
            "d10759"
        ]
    },
    {
        "instruction": "",
        "id": "q10760",
        "input": "python flush thread before executing",
        "output": "",
        "rule": [
            "d10760"
        ]
    },
    {
        "instruction": "",
        "id": "q10761",
        "input": "comparing integers and strings in python",
        "output": "",
        "rule": [
            "d10761"
        ]
    },
    {
        "instruction": "",
        "id": "q10762",
        "input": "python flush writes faster",
        "output": "",
        "rule": [
            "d10762"
        ]
    },
    {
        "instruction": "",
        "id": "q10763",
        "input": "compress zlib python readable by gzip",
        "output": "",
        "rule": [
            "d10763"
        ]
    },
    {
        "instruction": "",
        "id": "q10764",
        "input": "python fonttools how to merge",
        "output": "",
        "rule": [
            "d10764"
        ]
    },
    {
        "instruction": "",
        "id": "q10765",
        "input": "compute poisson cdf in python",
        "output": "",
        "rule": [
            "d10765"
        ]
    },
    {
        "instruction": "",
        "id": "q10766",
        "input": "python for tensorflow nightly versio",
        "output": "",
        "rule": [
            "d10766"
        ]
    },
    {
        "instruction": "",
        "id": "q10767",
        "input": "python force lambda function to be eager",
        "output": "",
        "rule": [
            "d10767"
        ]
    },
    {
        "instruction": "",
        "id": "q10768",
        "input": "compute tpr fpr for a model in python",
        "output": "",
        "rule": [
            "d10768"
        ]
    },
    {
        "instruction": "",
        "id": "q10769",
        "input": "python force list reference to be copy",
        "output": "",
        "rule": [
            "d10769"
        ]
    },
    {
        "instruction": "",
        "id": "q10770",
        "input": "connect to python ftp server",
        "output": "",
        "rule": [
            "d10770"
        ]
    },
    {
        "instruction": "",
        "id": "q10771",
        "input": "python format center padding",
        "output": "",
        "rule": [
            "d10771"
        ]
    },
    {
        "instruction": "",
        "id": "q10772",
        "input": "connecting to ftp server python",
        "output": "",
        "rule": [
            "d10772"
        ]
    },
    {
        "instruction": "",
        "id": "q10773",
        "input": "python format compute length",
        "output": "",
        "rule": [
            "d10773"
        ]
    },
    {
        "instruction": "",
        "id": "q10774",
        "input": "constrained delaunay triangulation python",
        "output": "",
        "rule": [
            "d10774"
        ]
    },
    {
        "instruction": "",
        "id": "q10775",
        "input": "python format datetime objects as strings",
        "output": "",
        "rule": [
            "d10775"
        ]
    },
    {
        "instruction": "",
        "id": "q10776",
        "input": "count he number of calls of function in python",
        "output": "",
        "rule": [
            "d10776"
        ]
    },
    {
        "instruction": "",
        "id": "q10777",
        "input": "python format round 2 decimal placesexample",
        "output": "",
        "rule": [
            "d10777"
        ]
    },
    {
        "instruction": "",
        "id": "q10778",
        "input": "count leading whitespace in python",
        "output": "",
        "rule": [
            "d10778"
        ]
    },
    {
        "instruction": "",
        "id": "q10779",
        "input": "python format width in data",
        "output": "",
        "rule": [
            "d10779"
        ]
    },
    {
        "instruction": "",
        "id": "q10780",
        "input": "count most common element in array python",
        "output": "",
        "rule": [
            "d10780"
        ]
    },
    {
        "instruction": "",
        "id": "q10781",
        "input": "python from csv file to printed report",
        "output": "",
        "rule": [
            "d10781"
        ]
    },
    {
        "instruction": "",
        "id": "q10782",
        "input": "count null nan values in python",
        "output": "",
        "rule": [
            "d10782"
        ]
    },
    {
        "instruction": "",
        "id": "q10783",
        "input": "python frombytes not enough image data",
        "output": "",
        "rule": [
            "d10783"
        ]
    },
    {
        "instruction": "",
        "id": "q10784",
        "input": "count words in a sentance python",
        "output": "",
        "rule": [
            "d10784"
        ]
    },
    {
        "instruction": "",
        "id": "q10785",
        "input": "python fseek go to end of file",
        "output": "",
        "rule": [
            "d10785"
        ]
    },
    {
        "instruction": "",
        "id": "q10786",
        "input": "counting bounding box in python",
        "output": "",
        "rule": [
            "d10786"
        ]
    },
    {
        "instruction": "",
        "id": "q10787",
        "input": "python ftp server access",
        "output": "",
        "rule": [
            "d10787"
        ]
    },
    {
        "instruction": "",
        "id": "q10788",
        "input": "cpython benchmark against java",
        "output": "",
        "rule": [
            "d10788"
        ]
    },
    {
        "instruction": "",
        "id": "q10789",
        "input": "python function caller self",
        "output": "",
        "rule": [
            "d10789"
        ]
    },
    {
        "instruction": "",
        "id": "q10790",
        "input": "create a bucket with python boto",
        "output": "",
        "rule": [
            "d10790"
        ]
    },
    {
        "instruction": "",
        "id": "q10791",
        "input": "create a dict for a string python",
        "output": "",
        "rule": [
            "d10791"
        ]
    },
    {
        "instruction": "",
        "id": "q10792",
        "input": "python function mutliple return print",
        "output": "",
        "rule": [
            "d10792"
        ]
    },
    {
        "instruction": "",
        "id": "q10793",
        "input": "create a dictionary based on unique values in python",
        "output": "",
        "rule": [
            "d10793"
        ]
    },
    {
        "instruction": "",
        "id": "q10794",
        "input": "python function never invoke",
        "output": "",
        "rule": [
            "d10794"
        ]
    },
    {
        "instruction": "",
        "id": "q10795",
        "input": "create a function to generate random letters in python",
        "output": "",
        "rule": [
            "d10795"
        ]
    },
    {
        "instruction": "",
        "id": "q10796",
        "input": "python function paramter flag",
        "output": "",
        "rule": [
            "d10796"
        ]
    },
    {
        "instruction": "",
        "id": "q10797",
        "input": "create a legend just for definitions in python",
        "output": "",
        "rule": [
            "d10797"
        ]
    },
    {
        "instruction": "",
        "id": "q10798",
        "input": "python function to calculate month based on date",
        "output": "",
        "rule": [
            "d10798"
        ]
    },
    {
        "instruction": "",
        "id": "q10799",
        "input": "create a yaml document in python",
        "output": "",
        "rule": [
            "d10799"
        ]
    },
    {
        "instruction": "",
        "id": "q10800",
        "input": "python function to change a sentence to a list of words",
        "output": "",
        "rule": [
            "d10800"
        ]
    },
    {
        "instruction": "",
        "id": "q10801",
        "input": "create accuracy test python",
        "output": "",
        "rule": [
            "d10801"
        ]
    },
    {
        "instruction": "",
        "id": "q10802",
        "input": "python function to get it owner",
        "output": "",
        "rule": [
            "d10802"
        ]
    },
    {
        "instruction": "",
        "id": "q10803",
        "input": "create code in python that reads pdf",
        "output": "",
        "rule": [
            "d10803"
        ]
    },
    {
        "instruction": "",
        "id": "q10804",
        "input": "python function to toggle gpio pin",
        "output": "",
        "rule": [
            "d10804"
        ]
    },
    {
        "instruction": "",
        "id": "q10805",
        "input": "create distance grid on map python",
        "output": "",
        "rule": [
            "d10805"
        ]
    },
    {
        "instruction": "",
        "id": "q10806",
        "input": "python garbage collection call",
        "output": "",
        "rule": [
            "d10806"
        ]
    },
    {
        "instruction": "",
        "id": "q10807",
        "input": "create inclusive range in python",
        "output": "",
        "rule": [
            "d10807"
        ]
    },
    {
        "instruction": "",
        "id": "q10808",
        "input": "python garbage collection slow",
        "output": "",
        "rule": [
            "d10808"
        ]
    },
    {
        "instruction": "",
        "id": "q10809",
        "input": "create property file for python",
        "output": "",
        "rule": [
            "d10809"
        ]
    },
    {
        "instruction": "",
        "id": "q10810",
        "input": "python gaussian distribution pdf",
        "output": "",
        "rule": [
            "d10810"
        ]
    },
    {
        "instruction": "",
        "id": "q10811",
        "input": "create ruler with lines in python",
        "output": "",
        "rule": [
            "d10811"
        ]
    },
    {
        "instruction": "",
        "id": "q10812",
        "input": "python gaussian filter numpy array",
        "output": "",
        "rule": [
            "d10812"
        ]
    },
    {
        "instruction": "",
        "id": "q10813",
        "input": "crop image out of background python",
        "output": "",
        "rule": [
            "d10813"
        ]
    },
    {
        "instruction": "",
        "id": "q10814",
        "input": "python gaussian fit image",
        "output": "",
        "rule": [
            "d10814"
        ]
    },
    {
        "instruction": "",
        "id": "q10815",
        "input": "python gaussian image filter",
        "output": "",
        "rule": [
            "d10815"
        ]
    },
    {
        "instruction": "",
        "id": "q10816",
        "input": "cumsum on a list in python",
        "output": "",
        "rule": [
            "d10816"
        ]
    },
    {
        "instruction": "",
        "id": "q10817",
        "input": "python generate a covariance matrix given pairwise correlations",
        "output": "",
        "rule": [
            "d10817"
        ]
    },
    {
        "instruction": "",
        "id": "q10818",
        "input": "curly braces in python format string",
        "output": "",
        "rule": [
            "d10818"
        ]
    },
    {
        "instruction": "",
        "id": "q10819",
        "input": "python generate list of filenames in directory",
        "output": "",
        "rule": [
            "d10819"
        ]
    },
    {
        "instruction": "",
        "id": "q10820",
        "input": "cv2 imread python try catch",
        "output": "",
        "rule": [
            "d10820"
        ]
    },
    {
        "instruction": "",
        "id": "q10821",
        "input": "python generate pdf from pngs",
        "output": "",
        "rule": [
            "d10821"
        ]
    },
    {
        "instruction": "",
        "id": "q10822",
        "input": "data frame consist all element not in other data frame python",
        "output": "",
        "rule": [
            "d10822"
        ]
    },
    {
        "instruction": "",
        "id": "q10823",
        "input": "python generate random integer with step interval",
        "output": "",
        "rule": [
            "d10823"
        ]
    },
    {
        "instruction": "",
        "id": "q10824",
        "input": "data frame from dictionary, python",
        "output": "",
        "rule": [
            "d10824"
        ]
    },
    {
        "instruction": "",
        "id": "q10825",
        "input": "python generate randoms strings",
        "output": "",
        "rule": [
            "d10825"
        ]
    },
    {
        "instruction": "",
        "id": "q10826",
        "input": "data frame from list in python",
        "output": "",
        "rule": [
            "d10826"
        ]
    },
    {
        "instruction": "",
        "id": "q10827",
        "input": "python get a specific matrix column",
        "output": "",
        "rule": [
            "d10827"
        ]
    },
    {
        "instruction": "",
        "id": "q10828",
        "input": "data frame string to date in python",
        "output": "",
        "rule": [
            "d10828"
        ]
    },
    {
        "instruction": "",
        "id": "q10829",
        "input": "python get all colors in image",
        "output": "",
        "rule": [
            "d10829"
        ]
    },
    {
        "instruction": "",
        "id": "q10830",
        "input": "data frame to hdf5 in python",
        "output": "",
        "rule": [
            "d10830"
        ]
    },
    {
        "instruction": "",
        "id": "q10831",
        "input": "python get all dates in a given month",
        "output": "",
        "rule": [
            "d10831"
        ]
    },
    {
        "instruction": "",
        "id": "q10832",
        "input": "data length for reshape python",
        "output": "",
        "rule": [
            "d10832"
        ]
    },
    {
        "instruction": "",
        "id": "q10833",
        "input": "python get array for subset of image based on box",
        "output": "",
        "rule": [
            "d10833"
        ]
    },
    {
        "instruction": "",
        "id": "q10834",
        "input": "date from string datetime python",
        "output": "",
        "rule": [
            "d10834"
        ]
    },
    {
        "instruction": "",
        "id": "q10835",
        "input": "python get attribute dictionary from object",
        "output": "",
        "rule": [
            "d10835"
        ]
    },
    {
        "instruction": "",
        "id": "q10836",
        "input": "datetime datetime object with tzoffset python",
        "output": "",
        "rule": [
            "d10836"
        ]
    },
    {
        "instruction": "",
        "id": "q10837",
        "input": "python get cofactor matrix",
        "output": "",
        "rule": [
            "d10837"
        ]
    },
    {
        "instruction": "",
        "id": "q10838",
        "input": "datetime python millisecond format",
        "output": "",
        "rule": [
            "d10838"
        ]
    },
    {
        "instruction": "",
        "id": "q10839",
        "input": "datetime to iso86301 string python",
        "output": "",
        "rule": [
            "d10839"
        ]
    },
    {
        "instruction": "",
        "id": "q10840",
        "input": "python get date from file modifiede",
        "output": "",
        "rule": [
            "d10840"
        ]
    },
    {
        "instruction": "",
        "id": "q10841",
        "input": "datetime to utc time python",
        "output": "",
        "rule": [
            "d10841"
        ]
    },
    {
        "instruction": "",
        "id": "q10842",
        "input": "python get dictionary keys with largest values",
        "output": "",
        "rule": [
            "d10842"
        ]
    },
    {
        "instruction": "",
        "id": "q10843",
        "input": "def and return python and feed into next function",
        "output": "",
        "rule": [
            "d10843"
        ]
    },
    {
        "instruction": "",
        "id": "q10844",
        "input": "default dict of default dicts python",
        "output": "",
        "rule": [
            "d10844"
        ]
    },
    {
        "instruction": "",
        "id": "q10845",
        "input": "python get field by name nil on missing",
        "output": "",
        "rule": [
            "d10845"
        ]
    },
    {
        "instruction": "",
        "id": "q10846",
        "input": "defaultvalue for a boolean in python",
        "output": "",
        "rule": [
            "d10846"
        ]
    },
    {
        "instruction": "",
        "id": "q10847",
        "input": "python get file from remote linux",
        "output": "",
        "rule": [
            "d10847"
        ]
    },
    {
        "instruction": "",
        "id": "q10848",
        "input": "define a function to checking data type in python",
        "output": "",
        "rule": [
            "d10848"
        ]
    },
    {
        "instruction": "",
        "id": "q10849",
        "input": "python get file parent folder name",
        "output": "",
        "rule": [
            "d10849"
        ]
    },
    {
        "instruction": "",
        "id": "q10850",
        "input": "define equality in python object",
        "output": "",
        "rule": [
            "d10850"
        ]
    },
    {
        "instruction": "",
        "id": "q10851",
        "input": "python get float from string",
        "output": "",
        "rule": [
            "d10851"
        ]
    },
    {
        "instruction": "",
        "id": "q10852",
        "input": "python get hierarchy of parent for an instance",
        "output": "",
        "rule": [
            "d10852"
        ]
    },
    {
        "instruction": "",
        "id": "q10853",
        "input": "python get highest score",
        "output": "",
        "rule": [
            "d10853"
        ]
    },
    {
        "instruction": "",
        "id": "q10854",
        "input": "delete image files in python",
        "output": "",
        "rule": [
            "d10854"
        ]
    },
    {
        "instruction": "",
        "id": "q10855",
        "input": "python get image size from request",
        "output": "",
        "rule": [
            "d10855"
        ]
    },
    {
        "instruction": "",
        "id": "q10856",
        "input": "delete index not working python",
        "output": "",
        "rule": [
            "d10856"
        ]
    },
    {
        "instruction": "",
        "id": "q10857",
        "input": "python get index for sorted array",
        "output": "",
        "rule": [
            "d10857"
        ]
    },
    {
        "instruction": "",
        "id": "q10858",
        "input": "delete last e;ement from stack in python",
        "output": "",
        "rule": [
            "d10858"
        ]
    },
    {
        "instruction": "",
        "id": "q10859",
        "input": "delete last value in array in python",
        "output": "",
        "rule": [
            "d10859"
        ]
    },
    {
        "instruction": "",
        "id": "q10860",
        "input": "python get index of row",
        "output": "",
        "rule": [
            "d10860"
        ]
    },
    {
        "instruction": "",
        "id": "q10861",
        "input": "delete object from s3 python",
        "output": "",
        "rule": [
            "d10861"
        ]
    },
    {
        "instruction": "",
        "id": "q10862",
        "input": "python get indices of element lambda condition",
        "output": "",
        "rule": [
            "d10862"
        ]
    },
    {
        "instruction": "",
        "id": "q10863",
        "input": "deletefolder or file in python",
        "output": "",
        "rule": [
            "d10863"
        ]
    },
    {
        "instruction": "",
        "id": "q10864",
        "input": "python get instance attribute by name",
        "output": "",
        "rule": [
            "d10864"
        ]
    },
    {
        "instruction": "",
        "id": "q10865",
        "input": "deleting all objects in memory python",
        "output": "",
        "rule": [
            "d10865"
        ]
    },
    {
        "instruction": "",
        "id": "q10866",
        "input": "python get last n of array",
        "output": "",
        "rule": [
            "d10866"
        ]
    },
    {
        "instruction": "",
        "id": "q10867",
        "input": "deleting entire column whose header is empty in python",
        "output": "",
        "rule": [
            "d10867"
        ]
    },
    {
        "instruction": "",
        "id": "q10868",
        "input": "python get length of stream",
        "output": "",
        "rule": [
            "d10868"
        ]
    },
    {
        "instruction": "",
        "id": "q10869",
        "input": "deleting files from a folder python",
        "output": "",
        "rule": [
            "d10869"
        ]
    },
    {
        "instruction": "",
        "id": "q10870",
        "input": "python get linux clipboard",
        "output": "",
        "rule": [
            "d10870"
        ]
    },
    {
        "instruction": "",
        "id": "q10871",
        "input": "deploy a python project inteded for c++ in a virtual env",
        "output": "",
        "rule": [
            "d10871"
        ]
    },
    {
        "instruction": "",
        "id": "q10872",
        "input": "python get list item index position",
        "output": "",
        "rule": [
            "d10872"
        ]
    },
    {
        "instruction": "",
        "id": "q10873",
        "input": "designing a bandpass filter with 4 frequencies, python",
        "output": "",
        "rule": [
            "d10873"
        ]
    },
    {
        "instruction": "",
        "id": "q10874",
        "input": "python get memory usage by process",
        "output": "",
        "rule": [
            "d10874"
        ]
    },
    {
        "instruction": "",
        "id": "q10875",
        "input": "designing a server with session management for multiple user in python",
        "output": "",
        "rule": [
            "d10875"
        ]
    },
    {
        "instruction": "",
        "id": "q10876",
        "input": "python get memory usage of an object",
        "output": "",
        "rule": [
            "d10876"
        ]
    },
    {
        "instruction": "",
        "id": "q10877",
        "input": "detect empty dictionary python",
        "output": "",
        "rule": [
            "d10877"
        ]
    },
    {
        "instruction": "",
        "id": "q10878",
        "input": "python get memory usage of numpy array",
        "output": "",
        "rule": [
            "d10878"
        ]
    },
    {
        "instruction": "",
        "id": "q10879",
        "input": "detect the date created on a file with python",
        "output": "",
        "rule": [
            "d10879"
        ]
    },
    {
        "instruction": "",
        "id": "q10880",
        "input": "python get nearest position in list",
        "output": "",
        "rule": [
            "d10880"
        ]
    },
    {
        "instruction": "",
        "id": "q10881",
        "input": "detect yellow bordered square in photo python tensorflow",
        "output": "",
        "rule": [
            "d10881"
        ]
    },
    {
        "instruction": "",
        "id": "q10882",
        "input": "determine bounding box of keyword in python",
        "output": "",
        "rule": [
            "d10882"
        ]
    },
    {
        "instruction": "",
        "id": "q10883",
        "input": "python get object of string",
        "output": "",
        "rule": [
            "d10883"
        ]
    },
    {
        "instruction": "",
        "id": "q10884",
        "input": "deterministic distribution noise in python",
        "output": "",
        "rule": [
            "d10884"
        ]
    },
    {
        "instruction": "",
        "id": "q10885",
        "input": "python get object of type",
        "output": "",
        "rule": [
            "d10885"
        ]
    },
    {
        "instruction": "",
        "id": "q10886",
        "input": "dfs without recursion in python",
        "output": "",
        "rule": [
            "d10886"
        ]
    },
    {
        "instruction": "",
        "id": "q10887",
        "input": "python get object's parent",
        "output": "",
        "rule": [
            "d10887"
        ]
    },
    {
        "instruction": "",
        "id": "q10888",
        "input": "dict to html python",
        "output": "",
        "rule": [
            "d10888"
        ]
    },
    {
        "instruction": "",
        "id": "q10889",
        "input": "python get parent file path",
        "output": "",
        "rule": [
            "d10889"
        ]
    },
    {
        "instruction": "",
        "id": "q10890",
        "input": "python get parent scope of function",
        "output": "",
        "rule": [
            "d10890"
        ]
    },
    {
        "instruction": "",
        "id": "q10891",
        "input": "dictionary data type for latitude and longitude in python",
        "output": "",
        "rule": [
            "d10891"
        ]
    },
    {
        "instruction": "",
        "id": "q10892",
        "input": "python get pixel position from screen",
        "output": "",
        "rule": [
            "d10892"
        ]
    },
    {
        "instruction": "",
        "id": "q10893",
        "input": "different activation functions python",
        "output": "",
        "rule": [
            "d10893"
        ]
    },
    {
        "instruction": "",
        "id": "q10894",
        "input": "python get precision of float",
        "output": "",
        "rule": [
            "d10894"
        ]
    },
    {
        "instruction": "",
        "id": "q10895",
        "input": "digit to integer as what to string python",
        "output": "",
        "rule": [
            "d10895"
        ]
    },
    {
        "instruction": "",
        "id": "q10896",
        "input": "python get query strinng from url",
        "output": "",
        "rule": [
            "d10896"
        ]
    },
    {
        "instruction": "",
        "id": "q10897",
        "input": "discord python bot check owner",
        "output": "",
        "rule": [
            "d10897"
        ]
    },
    {
        "instruction": "",
        "id": "q10898",
        "input": "python get region of image",
        "output": "",
        "rule": [
            "d10898"
        ]
    },
    {
        "instruction": "",
        "id": "q10899",
        "input": "python get regkey value",
        "output": "",
        "rule": [
            "d10899"
        ]
    },
    {
        "instruction": "",
        "id": "q10900",
        "input": "distance between data pair in python",
        "output": "",
        "rule": [
            "d10900"
        ]
    },
    {
        "instruction": "",
        "id": "q10901",
        "input": "python get retreiev access property dynamic",
        "output": "",
        "rule": [
            "d10901"
        ]
    },
    {
        "instruction": "",
        "id": "q10902",
        "input": "distinct items in a list python",
        "output": "",
        "rule": [
            "d10902"
        ]
    },
    {
        "instruction": "",
        "id": "q10903",
        "input": "python get rid of axis points on graph",
        "output": "",
        "rule": [
            "d10903"
        ]
    },
    {
        "instruction": "",
        "id": "q10904",
        "input": "distribution fitting in normal distribution python",
        "output": "",
        "rule": [
            "d10904"
        ]
    },
    {
        "instruction": "",
        "id": "q10905",
        "input": "python get rid of last element in array",
        "output": "",
        "rule": [
            "d10905"
        ]
    },
    {
        "instruction": "",
        "id": "q10906",
        "input": "django python test check if column/key exists",
        "output": "",
        "rule": [
            "d10906"
        ]
    },
    {
        "instruction": "",
        "id": "q10907",
        "input": "python get size of url image",
        "output": "",
        "rule": [
            "d10907"
        ]
    },
    {
        "instruction": "",
        "id": "q10908",
        "input": "do abstract methods in python slow down code",
        "output": "",
        "rule": [
            "d10908"
        ]
    },
    {
        "instruction": "",
        "id": "q10909",
        "input": "does python have boolean values",
        "output": "",
        "rule": [
            "d10909"
        ]
    },
    {
        "instruction": "",
        "id": "q10910",
        "input": "python get sound volume",
        "output": "",
        "rule": [
            "d10910"
        ]
    },
    {
        "instruction": "",
        "id": "q10911",
        "input": "does the code coninue running after sleep python",
        "output": "",
        "rule": [
            "d10911"
        ]
    },
    {
        "instruction": "",
        "id": "q10912",
        "input": "python get stty size",
        "output": "",
        "rule": [
            "d10912"
        ]
    },
    {
        "instruction": "",
        "id": "q10913",
        "input": "does with close a file upon exiting python",
        "output": "",
        "rule": [
            "d10913"
        ]
    },
    {
        "instruction": "",
        "id": "q10914",
        "input": "dot product of vectors python",
        "output": "",
        "rule": [
            "d10914"
        ]
    },
    {
        "instruction": "",
        "id": "q10915",
        "input": "python get the cores of my pc",
        "output": "",
        "rule": [
            "d10915"
        ]
    },
    {
        "instruction": "",
        "id": "q10916",
        "input": "dot product operation in python",
        "output": "",
        "rule": [
            "d10916"
        ]
    },
    {
        "instruction": "",
        "id": "q10917",
        "input": "python get the function name",
        "output": "",
        "rule": [
            "d10917"
        ]
    },
    {
        "instruction": "",
        "id": "q10918",
        "input": "draw horizontal line in python",
        "output": "",
        "rule": [
            "d10918"
        ]
    },
    {
        "instruction": "",
        "id": "q10919",
        "input": "python get the largest dictionary key",
        "output": "",
        "rule": [
            "d10919"
        ]
    },
    {
        "instruction": "",
        "id": "q10920",
        "input": "draw line segments connecting the three points in python",
        "output": "",
        "rule": [
            "d10920"
        ]
    },
    {
        "instruction": "",
        "id": "q10921",
        "input": "draw lines between 2d points in python",
        "output": "",
        "rule": [
            "d10921"
        ]
    },
    {
        "instruction": "",
        "id": "q10922",
        "input": "python get the row and column number of mati",
        "output": "",
        "rule": [
            "d10922"
        ]
    },
    {
        "instruction": "",
        "id": "q10923",
        "input": "dynamic attribute access python",
        "output": "",
        "rule": [
            "d10923"
        ]
    },
    {
        "instruction": "",
        "id": "q10924",
        "input": "python get the second lowest value in a list",
        "output": "",
        "rule": [
            "d10924"
        ]
    },
    {
        "instruction": "",
        "id": "q10925",
        "input": "easiest way to pad an image python",
        "output": "",
        "rule": [
            "d10925"
        ]
    },
    {
        "instruction": "",
        "id": "q10926",
        "input": "python get user name on windows",
        "output": "",
        "rule": [
            "d10926"
        ]
    },
    {
        "instruction": "",
        "id": "q10927",
        "input": "edit a copy of a dictionary python",
        "output": "",
        "rule": [
            "d10927"
        ]
    },
    {
        "instruction": "",
        "id": "q10928",
        "input": "python get utc offset datetime",
        "output": "",
        "rule": [
            "d10928"
        ]
    },
    {
        "instruction": "",
        "id": "q10929",
        "input": "efficent way to remove character from string python",
        "output": "",
        "rule": [
            "d10929"
        ]
    },
    {
        "instruction": "",
        "id": "q10930",
        "input": "python get utilized ram",
        "output": "",
        "rule": [
            "d10930"
        ]
    },
    {
        "instruction": "",
        "id": "q10931",
        "input": "elasticsearch check whether a field exists python",
        "output": "",
        "rule": [
            "d10931"
        ]
    },
    {
        "instruction": "",
        "id": "q10932",
        "input": "python get value from enum by name",
        "output": "",
        "rule": [
            "d10932"
        ]
    },
    {
        "instruction": "",
        "id": "q10933",
        "input": "elasticsearch python bulk upsert",
        "output": "",
        "rule": [
            "d10933"
        ]
    },
    {
        "instruction": "",
        "id": "q10934",
        "input": "python get value in a list closest to a number",
        "output": "",
        "rule": [
            "d10934"
        ]
    },
    {
        "instruction": "",
        "id": "q10935",
        "input": "elegant python 3 reproduction of most common words from a story",
        "output": "",
        "rule": [
            "d10935"
        ]
    },
    {
        "instruction": "",
        "id": "q10936",
        "input": "python get variable attribute",
        "output": "",
        "rule": [
            "d10936"
        ]
    },
    {
        "instruction": "",
        "id": "q10937",
        "input": "eliminate empty cells from list in python 2",
        "output": "",
        "rule": [
            "d10937"
        ]
    },
    {
        "instruction": "",
        "id": "q10938",
        "input": "python get weeks between 2 days",
        "output": "",
        "rule": [
            "d10938"
        ]
    },
    {
        "instruction": "",
        "id": "q10939",
        "input": "email address validation using reg exp in python",
        "output": "",
        "rule": [
            "d10939"
        ]
    },
    {
        "instruction": "",
        "id": "q10940",
        "input": "python get window title",
        "output": "",
        "rule": [
            "d10940"
        ]
    },
    {
        "instruction": "",
        "id": "q10941",
        "input": "enter text into header docx python",
        "output": "",
        "rule": [
            "d10941"
        ]
    },
    {
        "instruction": "",
        "id": "q10942",
        "input": "python get word count across list of sentences",
        "output": "",
        "rule": [
            "d10942"
        ]
    },
    {
        "instruction": "",
        "id": "q10943",
        "input": "epoch value from datetime python",
        "output": "",
        "rule": [
            "d10943"
        ]
    },
    {
        "instruction": "",
        "id": "q10944",
        "input": "python get xml node parent",
        "output": "",
        "rule": [
            "d10944"
        ]
    },
    {
        "instruction": "",
        "id": "q10945",
        "input": "equivalent of a vector python",
        "output": "",
        "rule": [
            "d10945"
        ]
    },
    {
        "instruction": "",
        "id": "q10946",
        "input": "python getsystem up time",
        "output": "",
        "rule": [
            "d10946"
        ]
    },
    {
        "instruction": "",
        "id": "q10947",
        "input": "excuting sql query from sqlalchemy in python",
        "output": "",
        "rule": [
            "d10947"
        ]
    },
    {
        "instruction": "",
        "id": "q10948",
        "input": "python gevent wsgiserver multithread",
        "output": "",
        "rule": [
            "d10948"
        ]
    },
    {
        "instruction": "",
        "id": "q10949",
        "input": "export python graph to word document",
        "output": "",
        "rule": [
            "d10949"
        ]
    },
    {
        "instruction": "",
        "id": "q10950",
        "input": "python given date get first of month",
        "output": "",
        "rule": [
            "d10950"
        ]
    },
    {
        "instruction": "",
        "id": "q10951",
        "input": "export r data frame to python",
        "output": "",
        "rule": [
            "d10951"
        ]
    },
    {
        "instruction": "",
        "id": "q10952",
        "input": "python glm linear regression",
        "output": "",
        "rule": [
            "d10952"
        ]
    },
    {
        "instruction": "",
        "id": "q10953",
        "input": "export sql view to excel python",
        "output": "",
        "rule": [
            "d10953"
        ]
    },
    {
        "instruction": "",
        "id": "q10954",
        "input": "extract everthing before underscore python",
        "output": "",
        "rule": [
            "d10954"
        ]
    },
    {
        "instruction": "",
        "id": "q10955",
        "input": "extract keywords from text python",
        "output": "",
        "rule": [
            "d10955"
        ]
    },
    {
        "instruction": "",
        "id": "q10956",
        "input": "python gpio read realy state and toggle",
        "output": "",
        "rule": [
            "d10956"
        ]
    },
    {
        "instruction": "",
        "id": "q10957",
        "input": "extract pure text from xml python",
        "output": "",
        "rule": [
            "d10957"
        ]
    },
    {
        "instruction": "",
        "id": "q10958",
        "input": "python gtk get toplevel widget",
        "output": "",
        "rule": [
            "d10958"
        ]
    },
    {
        "instruction": "",
        "id": "q10959",
        "input": "faster dot product python",
        "output": "",
        "rule": [
            "d10959"
        ]
    },
    {
        "instruction": "",
        "id": "q10960",
        "input": "python gzip unzip file",
        "output": "",
        "rule": [
            "d10960"
        ]
    },
    {
        "instruction": "",
        "id": "q10961",
        "input": "fastest way to iterate over an iterator python",
        "output": "",
        "rule": [
            "d10961"
        ]
    },
    {
        "instruction": "",
        "id": "q10962",
        "input": "python help function signature",
        "output": "",
        "rule": [
            "d10962"
        ]
    },
    {
        "instruction": "",
        "id": "q10963",
        "input": "fcfs python with i/o",
        "output": "",
        "rule": [
            "d10963"
        ]
    },
    {
        "instruction": "",
        "id": "q10964",
        "input": "python hierarchical clustering symmetric matrix",
        "output": "",
        "rule": [
            "d10964"
        ]
    },
    {
        "instruction": "",
        "id": "q10965",
        "input": "fetch last 10 results from python list",
        "output": "",
        "rule": [
            "d10965"
        ]
    },
    {
        "instruction": "",
        "id": "q10966",
        "input": "python hoe to check if query dict is empty",
        "output": "",
        "rule": [
            "d10966"
        ]
    },
    {
        "instruction": "",
        "id": "q10967",
        "input": "fetch the background color of the excel cell into a list using the python",
        "output": "",
        "rule": [
            "d10967"
        ]
    },
    {
        "instruction": "",
        "id": "q10968",
        "input": "python how check if float",
        "output": "",
        "rule": [
            "d10968"
        ]
    },
    {
        "instruction": "",
        "id": "q10969",
        "input": "fetchall result as dict postgresql python",
        "output": "",
        "rule": [
            "d10969"
        ]
    },
    {
        "instruction": "",
        "id": "q10970",
        "input": "python how ot use daemon to exit",
        "output": "",
        "rule": [
            "d10970"
        ]
    },
    {
        "instruction": "",
        "id": "q10971",
        "input": "fft low frequency signal python",
        "output": "",
        "rule": [
            "d10971"
        ]
    },
    {
        "instruction": "",
        "id": "q10972",
        "input": "python how to analyze stdout line by line",
        "output": "",
        "rule": [
            "d10972"
        ]
    },
    {
        "instruction": "",
        "id": "q10973",
        "input": "fileconf not applied python logging",
        "output": "",
        "rule": [
            "d10973"
        ]
    },
    {
        "instruction": "",
        "id": "q10974",
        "input": "python how to call sed",
        "output": "",
        "rule": [
            "d10974"
        ]
    },
    {
        "instruction": "",
        "id": "q10975",
        "input": "python how to change max line length",
        "output": "",
        "rule": [
            "d10975"
        ]
    },
    {
        "instruction": "",
        "id": "q10976",
        "input": "filter unique items in python",
        "output": "",
        "rule": [
            "d10976"
        ]
    },
    {
        "instruction": "",
        "id": "q10977",
        "input": "python how to check a process is running",
        "output": "",
        "rule": [
            "d10977"
        ]
    },
    {
        "instruction": "",
        "id": "q10978",
        "input": "finding max using lambda in python",
        "output": "",
        "rule": [
            "d10978"
        ]
    },
    {
        "instruction": "",
        "id": "q10979",
        "input": "python how to check if a variable is iterable",
        "output": "",
        "rule": [
            "d10979"
        ]
    },
    {
        "instruction": "",
        "id": "q10980",
        "input": "finding the largest key in a dictionary python",
        "output": "",
        "rule": [
            "d10980"
        ]
    },
    {
        "instruction": "",
        "id": "q10981",
        "input": "python how to check if an attribute exists",
        "output": "",
        "rule": [
            "d10981"
        ]
    },
    {
        "instruction": "",
        "id": "q10982",
        "input": "finding the median of an even list in python",
        "output": "",
        "rule": [
            "d10982"
        ]
    },
    {
        "instruction": "",
        "id": "q10983",
        "input": "python how to check tree node size",
        "output": "",
        "rule": [
            "d10983"
        ]
    },
    {
        "instruction": "",
        "id": "q10984",
        "input": "finding the method name python",
        "output": "",
        "rule": [
            "d10984"
        ]
    },
    {
        "instruction": "",
        "id": "q10985",
        "input": "python how to chunk a large number into groups of smaller ones",
        "output": "",
        "rule": [
            "d10985"
        ]
    },
    {
        "instruction": "",
        "id": "q10986",
        "input": "finding width of expanded python tkinter widget",
        "output": "",
        "rule": [
            "d10986"
        ]
    },
    {
        "instruction": "",
        "id": "q10987",
        "input": "python how to correctly close a socket",
        "output": "",
        "rule": [
            "d10987"
        ]
    },
    {
        "instruction": "",
        "id": "q10988",
        "input": "fitting data into equation using python",
        "output": "",
        "rule": [
            "d10988"
        ]
    },
    {
        "instruction": "",
        "id": "q10989",
        "input": "fix bad urls python",
        "output": "",
        "rule": [
            "d10989"
        ]
    },
    {
        "instruction": "",
        "id": "q10990",
        "input": "python how to create an object with an id that incrments everytime it is created",
        "output": "",
        "rule": [
            "d10990"
        ]
    },
    {
        "instruction": "",
        "id": "q10991",
        "input": "python how to define an alias",
        "output": "",
        "rule": [
            "d10991"
        ]
    },
    {
        "instruction": "",
        "id": "q10992",
        "input": "flatten list of lists python numpy",
        "output": "",
        "rule": [
            "d10992"
        ]
    },
    {
        "instruction": "",
        "id": "q10993",
        "input": "python how to delete all tables in mysql database",
        "output": "",
        "rule": [
            "d10993"
        ]
    },
    {
        "instruction": "",
        "id": "q10994",
        "input": "floyd python not found",
        "output": "",
        "rule": [
            "d10994"
        ]
    },
    {
        "instruction": "",
        "id": "q10995",
        "input": "python how to delete columns",
        "output": "",
        "rule": [
            "d10995"
        ]
    },
    {
        "instruction": "",
        "id": "q10996",
        "input": "force a file to delete in python",
        "output": "",
        "rule": [
            "d10996"
        ]
    },
    {
        "instruction": "",
        "id": "q10997",
        "input": "fork and forking in python",
        "output": "",
        "rule": [
            "d10997"
        ]
    },
    {
        "instruction": "",
        "id": "q10998",
        "input": "frequency listing of characters in string on python",
        "output": "",
        "rule": [
            "d10998"
        ]
    },
    {
        "instruction": "",
        "id": "q10999",
        "input": "python how to evaluate bound methods",
        "output": "",
        "rule": [
            "d10999"
        ]
    },
    {
        "instruction": "",
        "id": "q11000",
        "input": "from staticmethod get function python",
        "output": "",
        "rule": [
            "d11000"
        ]
    },
    {
        "instruction": "",
        "id": "q11001",
        "input": "python how to format a time amount",
        "output": "",
        "rule": [
            "d11001"
        ]
    },
    {
        "instruction": "",
        "id": "q11002",
        "input": "from string to date format in python",
        "output": "",
        "rule": [
            "d11002"
        ]
    },
    {
        "instruction": "",
        "id": "q11003",
        "input": "python how to get data directory",
        "output": "",
        "rule": [
            "d11003"
        ]
    },
    {
        "instruction": "",
        "id": "q11004",
        "input": "fromtimestamp python time zone",
        "output": "",
        "rule": [
            "d11004"
        ]
    },
    {
        "instruction": "",
        "id": "q11005",
        "input": "python how to get dimension of list of list",
        "output": "",
        "rule": [
            "d11005"
        ]
    },
    {
        "instruction": "",
        "id": "q11006",
        "input": "function python leap year boolean",
        "output": "",
        "rule": [
            "d11006"
        ]
    },
    {
        "instruction": "",
        "id": "q11007",
        "input": "python how to get extension from list of files",
        "output": "",
        "rule": [
            "d11007"
        ]
    },
    {
        "instruction": "",
        "id": "q11008",
        "input": "function that accepts two bitstrings and returns the xor value python",
        "output": "",
        "rule": [
            "d11008"
        ]
    },
    {
        "instruction": "",
        "id": "q11009",
        "input": "python how to get max value of a column",
        "output": "",
        "rule": [
            "d11009"
        ]
    },
    {
        "instruction": "",
        "id": "q11010",
        "input": "gaussian density function in python",
        "output": "",
        "rule": [
            "d11010"
        ]
    },
    {
        "instruction": "",
        "id": "q11011",
        "input": "python how to get memory utilization of a process",
        "output": "",
        "rule": [
            "d11011"
        ]
    },
    {
        "instruction": "",
        "id": "q11012",
        "input": "generat a key with commants in python",
        "output": "",
        "rule": [
            "d11012"
        ]
    },
    {
        "instruction": "",
        "id": "q11013",
        "input": "python how to get name of method being run",
        "output": "",
        "rule": [
            "d11013"
        ]
    },
    {
        "instruction": "",
        "id": "q11014",
        "input": "generate custom colors with python using hsv",
        "output": "",
        "rule": [
            "d11014"
        ]
    },
    {
        "instruction": "",
        "id": "q11015",
        "input": "python how to get object type",
        "output": "",
        "rule": [
            "d11015"
        ]
    },
    {
        "instruction": "",
        "id": "q11016",
        "input": "generate filenames given pattern python",
        "output": "",
        "rule": [
            "d11016"
        ]
    },
    {
        "instruction": "",
        "id": "q11017",
        "input": "python how to get parent path",
        "output": "",
        "rule": [
            "d11017"
        ]
    },
    {
        "instruction": "",
        "id": "q11018",
        "input": "generate random number on python django forms",
        "output": "",
        "rule": [
            "d11018"
        ]
    },
    {
        "instruction": "",
        "id": "q11019",
        "input": "python how to get quarter of date",
        "output": "",
        "rule": [
            "d11019"
        ]
    },
    {
        "instruction": "",
        "id": "q11020",
        "input": "generating a latex table in python",
        "output": "",
        "rule": [
            "d11020"
        ]
    },
    {
        "instruction": "",
        "id": "q11021",
        "input": "python how to get the details of a method",
        "output": "",
        "rule": [
            "d11021"
        ]
    },
    {
        "instruction": "",
        "id": "q11022",
        "input": "generating a normal random distribution in python",
        "output": "",
        "rule": [
            "d11022"
        ]
    },
    {
        "instruction": "",
        "id": "q11023",
        "input": "python how to get unique elements of a list",
        "output": "",
        "rule": [
            "d11023"
        ]
    },
    {
        "instruction": "",
        "id": "q11024",
        "input": "geolocator in not defined python",
        "output": "",
        "rule": [
            "d11024"
        ]
    },
    {
        "instruction": "",
        "id": "q11025",
        "input": "python how to get variable's name",
        "output": "",
        "rule": [
            "d11025"
        ]
    },
    {
        "instruction": "",
        "id": "q11026",
        "input": "get all variables from python script",
        "output": "",
        "rule": [
            "d11026"
        ]
    },
    {
        "instruction": "",
        "id": "q11027",
        "input": "python how to handle paginated calls using offset",
        "output": "",
        "rule": [
            "d11027"
        ]
    },
    {
        "instruction": "",
        "id": "q11028",
        "input": "get any expression like asterisk in python",
        "output": "",
        "rule": [
            "d11028"
        ]
    },
    {
        "instruction": "",
        "id": "q11029",
        "input": "python how to implement websocket",
        "output": "",
        "rule": [
            "d11029"
        ]
    },
    {
        "instruction": "",
        "id": "q11030",
        "input": "get attribute name of a variable python",
        "output": "",
        "rule": [
            "d11030"
        ]
    },
    {
        "instruction": "",
        "id": "q11031",
        "input": "python how to know list is nested",
        "output": "",
        "rule": [
            "d11031"
        ]
    },
    {
        "instruction": "",
        "id": "q11032",
        "input": "python how to make an iterable",
        "output": "",
        "rule": [
            "d11032"
        ]
    },
    {
        "instruction": "",
        "id": "q11033",
        "input": "get average for numbers in list python",
        "output": "",
        "rule": [
            "d11033"
        ]
    },
    {
        "instruction": "",
        "id": "q11034",
        "input": "python how to make list of points",
        "output": "",
        "rule": [
            "d11034"
        ]
    },
    {
        "instruction": "",
        "id": "q11035",
        "input": "get average in dictionaries python",
        "output": "",
        "rule": [
            "d11035"
        ]
    },
    {
        "instruction": "",
        "id": "q11036",
        "input": "python how to manipulate an attrubute of a object",
        "output": "",
        "rule": [
            "d11036"
        ]
    },
    {
        "instruction": "",
        "id": "q11037",
        "input": "python how to map grid points",
        "output": "",
        "rule": [
            "d11037"
        ]
    },
    {
        "instruction": "",
        "id": "q11038",
        "input": "get date of previous monday python",
        "output": "",
        "rule": [
            "d11038"
        ]
    },
    {
        "instruction": "",
        "id": "q11039",
        "input": "get dimension of array axis python",
        "output": "",
        "rule": [
            "d11039"
        ]
    },
    {
        "instruction": "",
        "id": "q11040",
        "input": "python how to move read file pointer back",
        "output": "",
        "rule": [
            "d11040"
        ]
    },
    {
        "instruction": "",
        "id": "q11041",
        "input": "get distinct values in a list in python",
        "output": "",
        "rule": [
            "d11041"
        ]
    },
    {
        "instruction": "",
        "id": "q11042",
        "input": "python how to normalize a list of dictionaries",
        "output": "",
        "rule": [
            "d11042"
        ]
    },
    {
        "instruction": "",
        "id": "q11043",
        "input": "get file length without read python",
        "output": "",
        "rule": [
            "d11043"
        ]
    },
    {
        "instruction": "",
        "id": "q11044",
        "input": "python how to print the first 10 lines in a large file",
        "output": "",
        "rule": [
            "d11044"
        ]
    },
    {
        "instruction": "",
        "id": "q11045",
        "input": "get hash of file + python",
        "output": "",
        "rule": [
            "d11045"
        ]
    },
    {
        "instruction": "",
        "id": "q11046",
        "input": "get index in a tuple python",
        "output": "",
        "rule": [
            "d11046"
        ]
    },
    {
        "instruction": "",
        "id": "q11047",
        "input": "get index of current row python",
        "output": "",
        "rule": [
            "d11047"
        ]
    },
    {
        "instruction": "",
        "id": "q11048",
        "input": "get index of iterator in python",
        "output": "",
        "rule": [
            "d11048"
        ]
    },
    {
        "instruction": "",
        "id": "q11049",
        "input": "python how to remove multiple whitespace",
        "output": "",
        "rule": [
            "d11049"
        ]
    },
    {
        "instruction": "",
        "id": "q11050",
        "input": "get indexes of elements python",
        "output": "",
        "rule": [
            "d11050"
        ]
    },
    {
        "instruction": "",
        "id": "q11051",
        "input": "python how to remove spaces between strings",
        "output": "",
        "rule": [
            "d11051"
        ]
    },
    {
        "instruction": "",
        "id": "q11052",
        "input": "get keywords from a sentence python nltk",
        "output": "",
        "rule": [
            "d11052"
        ]
    },
    {
        "instruction": "",
        "id": "q11053",
        "input": "python how to remove zeros from the end of decimal numbers",
        "output": "",
        "rule": [
            "d11053"
        ]
    },
    {
        "instruction": "",
        "id": "q11054",
        "input": "get last inserted id from mongodb collection python",
        "output": "",
        "rule": [
            "d11054"
        ]
    },
    {
        "instruction": "",
        "id": "q11055",
        "input": "python how to return array of float64",
        "output": "",
        "rule": [
            "d11055"
        ]
    },
    {
        "instruction": "",
        "id": "q11056",
        "input": "get last modified file with python",
        "output": "",
        "rule": [
            "d11056"
        ]
    },
    {
        "instruction": "",
        "id": "q11057",
        "input": "python how to revert monkeypatch changes",
        "output": "",
        "rule": [
            "d11057"
        ]
    },
    {
        "instruction": "",
        "id": "q11058",
        "input": "get mouse x and y position in python position",
        "output": "",
        "rule": [
            "d11058"
        ]
    },
    {
        "instruction": "",
        "id": "q11059",
        "input": "python how to see if key is in dict",
        "output": "",
        "rule": [
            "d11059"
        ]
    },
    {
        "instruction": "",
        "id": "q11060",
        "input": "get nth numpy in python",
        "output": "",
        "rule": [
            "d11060"
        ]
    },
    {
        "instruction": "",
        "id": "q11061",
        "input": "python how to set the value of constraint",
        "output": "",
        "rule": [
            "d11061"
        ]
    },
    {
        "instruction": "",
        "id": "q11062",
        "input": "get num cores on machine python",
        "output": "",
        "rule": [
            "d11062"
        ]
    },
    {
        "instruction": "",
        "id": "q11063",
        "input": "get number of days in datetime python",
        "output": "",
        "rule": [
            "d11063"
        ]
    },
    {
        "instruction": "",
        "id": "q11064",
        "input": "python how to split string into chunks of n size",
        "output": "",
        "rule": [
            "d11064"
        ]
    },
    {
        "instruction": "",
        "id": "q11065",
        "input": "get number of nonzero values in array python",
        "output": "",
        "rule": [
            "d11065"
        ]
    },
    {
        "instruction": "",
        "id": "q11066",
        "input": "python how to suppress printing in a method",
        "output": "",
        "rule": [
            "d11066"
        ]
    },
    {
        "instruction": "",
        "id": "q11067",
        "input": "python how to terminate a program using quit",
        "output": "",
        "rule": [
            "d11067"
        ]
    },
    {
        "instruction": "",
        "id": "q11068",
        "input": "get previous date python",
        "output": "",
        "rule": [
            "d11068"
        ]
    },
    {
        "instruction": "",
        "id": "q11069",
        "input": "python how to turn a string into a number",
        "output": "",
        "rule": [
            "d11069"
        ]
    },
    {
        "instruction": "",
        "id": "q11070",
        "input": "get properties names python",
        "output": "",
        "rule": [
            "d11070"
        ]
    },
    {
        "instruction": "",
        "id": "q11071",
        "input": "python how to turn logs into a list",
        "output": "",
        "rule": [
            "d11071"
        ]
    },
    {
        "instruction": "",
        "id": "q11072",
        "input": "python how to unreference memory",
        "output": "",
        "rule": [
            "d11072"
        ]
    },
    {
        "instruction": "",
        "id": "q11073",
        "input": "get rgb colors in python from an image",
        "output": "",
        "rule": [
            "d11073"
        ]
    },
    {
        "instruction": "",
        "id": "q11074",
        "input": "python how to upgrate",
        "output": "",
        "rule": [
            "d11074"
        ]
    },
    {
        "instruction": "",
        "id": "q11075",
        "input": "get something from a form python",
        "output": "",
        "rule": [
            "d11075"
        ]
    },
    {
        "instruction": "",
        "id": "q11076",
        "input": "python how to use bins in histogram",
        "output": "",
        "rule": [
            "d11076"
        ]
    },
    {
        "instruction": "",
        "id": "q11077",
        "input": "get text from a url python",
        "output": "",
        "rule": [
            "d11077"
        ]
    },
    {
        "instruction": "",
        "id": "q11078",
        "input": "python how to write a context manager",
        "output": "",
        "rule": [
            "d11078"
        ]
    },
    {
        "instruction": "",
        "id": "q11079",
        "input": "get the date from string in python",
        "output": "",
        "rule": [
            "d11079"
        ]
    },
    {
        "instruction": "",
        "id": "q11080",
        "input": "python howto test value is an array or not",
        "output": "",
        "rule": [
            "d11080"
        ]
    },
    {
        "instruction": "",
        "id": "q11081",
        "input": "get the index of a minimum value of a list python numpy",
        "output": "",
        "rule": [
            "d11081"
        ]
    },
    {
        "instruction": "",
        "id": "q11082",
        "input": "python html table show table",
        "output": "",
        "rule": [
            "d11082"
        ]
    },
    {
        "instruction": "",
        "id": "q11083",
        "input": "get the index of a value in python based on conditions",
        "output": "",
        "rule": [
            "d11083"
        ]
    },
    {
        "instruction": "",
        "id": "q11084",
        "input": "python if (not boolean)",
        "output": "",
        "rule": [
            "d11084"
        ]
    },
    {
        "instruction": "",
        "id": "q11085",
        "input": "get the length of a file in python",
        "output": "",
        "rule": [
            "d11085"
        ]
    },
    {
        "instruction": "",
        "id": "q11086",
        "input": "python if folder exist and create",
        "output": "",
        "rule": [
            "d11086"
        ]
    },
    {
        "instruction": "",
        "id": "q11087",
        "input": "get the most common element from list python",
        "output": "",
        "rule": [
            "d11087"
        ]
    },
    {
        "instruction": "",
        "id": "q11088",
        "input": "python if subset isin set",
        "output": "",
        "rule": [
            "d11088"
        ]
    },
    {
        "instruction": "",
        "id": "q11089",
        "input": "get the structure of a table from conn python",
        "output": "",
        "rule": [
            "d11089"
        ]
    },
    {
        "instruction": "",
        "id": "q11090",
        "input": "python image crop and pad",
        "output": "",
        "rule": [
            "d11090"
        ]
    },
    {
        "instruction": "",
        "id": "q11091",
        "input": "get traceback in dll from python",
        "output": "",
        "rule": [
            "d11091"
        ]
    },
    {
        "instruction": "",
        "id": "q11092",
        "input": "get utc time from datetime python",
        "output": "",
        "rule": [
            "d11092"
        ]
    },
    {
        "instruction": "",
        "id": "q11093",
        "input": "python image resize and save",
        "output": "",
        "rule": [
            "d11093"
        ]
    },
    {
        "instruction": "",
        "id": "q11094",
        "input": "get values callable iterator python",
        "output": "",
        "rule": [
            "d11094"
        ]
    },
    {
        "instruction": "",
        "id": "q11095",
        "input": "python image resize aspect ratio",
        "output": "",
        "rule": [
            "d11095"
        ]
    },
    {
        "instruction": "",
        "id": "q11096",
        "input": "getelementsbytagname python get all child",
        "output": "",
        "rule": [
            "d11096"
        ]
    },
    {
        "instruction": "",
        "id": "q11097",
        "input": "python image rgb to hsl hue",
        "output": "",
        "rule": [
            "d11097"
        ]
    },
    {
        "instruction": "",
        "id": "q11098",
        "input": "go through the folder and select files python",
        "output": "",
        "rule": [
            "d11098"
        ]
    },
    {
        "instruction": "",
        "id": "q11099",
        "input": "python implement a bytes like object",
        "output": "",
        "rule": [
            "d11099"
        ]
    },
    {
        "instruction": "",
        "id": "q11100",
        "input": "graph dfs detect cycle python",
        "output": "",
        "rule": [
            "d11100"
        ]
    },
    {
        "instruction": "",
        "id": "q11101",
        "input": "python implement matrix inverse",
        "output": "",
        "rule": [
            "d11101"
        ]
    },
    {
        "instruction": "",
        "id": "q11102",
        "input": "graph from dictionary networkx python",
        "output": "",
        "rule": [
            "d11102"
        ]
    },
    {
        "instruction": "",
        "id": "q11103",
        "input": "python indentation back shidt",
        "output": "",
        "rule": [
            "d11103"
        ]
    },
    {
        "instruction": "",
        "id": "q11104",
        "input": "graphviz python to png",
        "output": "",
        "rule": [
            "d11104"
        ]
    },
    {
        "instruction": "",
        "id": "q11105",
        "input": "gray scale image to matrix in python",
        "output": "",
        "rule": [
            "d11105"
        ]
    },
    {
        "instruction": "",
        "id": "q11106",
        "input": "python index of maximum value array",
        "output": "",
        "rule": [
            "d11106"
        ]
    },
    {
        "instruction": "",
        "id": "q11107",
        "input": "hamming distance calculation string in python",
        "output": "",
        "rule": [
            "d11107"
        ]
    },
    {
        "instruction": "",
        "id": "q11108",
        "input": "python indexing with list of booleans",
        "output": "",
        "rule": [
            "d11108"
        ]
    },
    {
        "instruction": "",
        "id": "q11109",
        "input": "hash of string python stack overflow",
        "output": "",
        "rule": [
            "d11109"
        ]
    },
    {
        "instruction": "",
        "id": "q11110",
        "input": "python inspect getmembers example",
        "output": "",
        "rule": [
            "d11110"
        ]
    },
    {
        "instruction": "",
        "id": "q11111",
        "input": "hide a tkinter window python",
        "output": "",
        "rule": [
            "d11111"
        ]
    },
    {
        "instruction": "",
        "id": "q11112",
        "input": "python inspect how to get the function name from the stack",
        "output": "",
        "rule": [
            "d11112"
        ]
    },
    {
        "instruction": "",
        "id": "q11113",
        "input": "how can i combine all the elements in a list in python",
        "output": "",
        "rule": [
            "d11113"
        ]
    },
    {
        "instruction": "",
        "id": "q11114",
        "input": "python instance del count",
        "output": "",
        "rule": [
            "d11114"
        ]
    },
    {
        "instruction": "",
        "id": "q11115",
        "input": "how decompiled python code looks like",
        "output": "",
        "rule": [
            "d11115"
        ]
    },
    {
        "instruction": "",
        "id": "q11116",
        "input": "python integers floats strings",
        "output": "",
        "rule": [
            "d11116"
        ]
    },
    {
        "instruction": "",
        "id": "q11117",
        "input": "how do i change the root directory to run the python code",
        "output": "",
        "rule": [
            "d11117"
        ]
    },
    {
        "instruction": "",
        "id": "q11118",
        "input": "how do i get tensorflow for python",
        "output": "",
        "rule": [
            "d11118"
        ]
    },
    {
        "instruction": "",
        "id": "q11119",
        "input": "python interger to binary",
        "output": "",
        "rule": [
            "d11119"
        ]
    },
    {
        "instruction": "",
        "id": "q11120",
        "input": "how do i get the ascii representation of a char in python",
        "output": "",
        "rule": [
            "d11120"
        ]
    },
    {
        "instruction": "",
        "id": "q11121",
        "input": "how do i know if a folder exits in python",
        "output": "",
        "rule": [
            "d11121"
        ]
    },
    {
        "instruction": "",
        "id": "q11122",
        "input": "python io open file with exclusive access permissions",
        "output": "",
        "rule": [
            "d11122"
        ]
    },
    {
        "instruction": "",
        "id": "q11123",
        "input": "python ipywidgets 'function' object is not subscriptable",
        "output": "",
        "rule": [
            "d11123"
        ]
    },
    {
        "instruction": "",
        "id": "q11124",
        "input": "how do i parse data from command line in python",
        "output": "",
        "rule": [
            "d11124"
        ]
    },
    {
        "instruction": "",
        "id": "q11125",
        "input": "python is last date of month",
        "output": "",
        "rule": [
            "d11125"
        ]
    },
    {
        "instruction": "",
        "id": "q11126",
        "input": "how do i reset python spyder",
        "output": "",
        "rule": [
            "d11126"
        ]
    },
    {
        "instruction": "",
        "id": "q11127",
        "input": "python is not none syntax",
        "output": "",
        "rule": [
            "d11127"
        ]
    },
    {
        "instruction": "",
        "id": "q11128",
        "input": "how do i run a django python program",
        "output": "",
        "rule": [
            "d11128"
        ]
    },
    {
        "instruction": "",
        "id": "q11129",
        "input": "python is not none\\",
        "output": "",
        "rule": [
            "d11129"
        ]
    },
    {
        "instruction": "",
        "id": "q11130",
        "input": "how do i set int64 as the default in python",
        "output": "",
        "rule": [
            "d11130"
        ]
    },
    {
        "instruction": "",
        "id": "q11131",
        "input": "python iterate an nest dict and return",
        "output": "",
        "rule": [
            "d11131"
        ]
    },
    {
        "instruction": "",
        "id": "q11132",
        "input": "python iterate json file",
        "output": "",
        "rule": [
            "d11132"
        ]
    },
    {
        "instruction": "",
        "id": "q11133",
        "input": "how do i tokenize multiple files in python",
        "output": "",
        "rule": [
            "d11133"
        ]
    },
    {
        "instruction": "",
        "id": "q11134",
        "input": "python iterate through two dictionary keys and create a list of common values as strings",
        "output": "",
        "rule": [
            "d11134"
        ]
    },
    {
        "instruction": "",
        "id": "q11135",
        "input": "how do i use a github access token with gitpython",
        "output": "",
        "rule": [
            "d11135"
        ]
    },
    {
        "instruction": "",
        "id": "q11136",
        "input": "python iteration progress bar",
        "output": "",
        "rule": [
            "d11136"
        ]
    },
    {
        "instruction": "",
        "id": "q11137",
        "input": "how do you change a list to a string in python",
        "output": "",
        "rule": [
            "d11137"
        ]
    },
    {
        "instruction": "",
        "id": "q11138",
        "input": "how do you get only latitude and longitude using geocode in python geeks for geeks",
        "output": "",
        "rule": [
            "d11138"
        ]
    },
    {
        "instruction": "",
        "id": "q11139",
        "input": "python iterparse has children",
        "output": "",
        "rule": [
            "d11139"
        ]
    },
    {
        "instruction": "",
        "id": "q11140",
        "input": "how do you get the type of an object in python",
        "output": "",
        "rule": [
            "d11140"
        ]
    },
    {
        "instruction": "",
        "id": "q11141",
        "input": "python jaccard similarity on chunks of a large list of lists",
        "output": "",
        "rule": [
            "d11141"
        ]
    },
    {
        "instruction": "",
        "id": "q11142",
        "input": "how do you kill a program in python",
        "output": "",
        "rule": [
            "d11142"
        ]
    },
    {
        "instruction": "",
        "id": "q11143",
        "input": "python jinja2 parse file",
        "output": "",
        "rule": [
            "d11143"
        ]
    },
    {
        "instruction": "",
        "id": "q11144",
        "input": "how do you load a an images in a file into python",
        "output": "",
        "rule": [
            "d11144"
        ]
    },
    {
        "instruction": "",
        "id": "q11145",
        "input": "python join array elem into line separated string",
        "output": "",
        "rule": [
            "d11145"
        ]
    },
    {
        "instruction": "",
        "id": "q11146",
        "input": "how do you set limits for the axes in python",
        "output": "",
        "rule": [
            "d11146"
        ]
    },
    {
        "instruction": "",
        "id": "q11147",
        "input": "python join column entried",
        "output": "",
        "rule": [
            "d11147"
        ]
    },
    {
        "instruction": "",
        "id": "q11148",
        "input": "how do you sort an array in python and save indices of sort",
        "output": "",
        "rule": [
            "d11148"
        ]
    },
    {
        "instruction": "",
        "id": "q11149",
        "input": "python join multiple images into single image",
        "output": "",
        "rule": [
            "d11149"
        ]
    },
    {
        "instruction": "",
        "id": "q11150",
        "input": "how do you test for equality in python",
        "output": "",
        "rule": [
            "d11150"
        ]
    },
    {
        "instruction": "",
        "id": "q11151",
        "input": "python join string only if nonempty",
        "output": "",
        "rule": [
            "d11151"
        ]
    },
    {
        "instruction": "",
        "id": "q11152",
        "input": "how does python change type from int to float",
        "output": "",
        "rule": [
            "d11152"
        ]
    },
    {
        "instruction": "",
        "id": "q11153",
        "input": "python join url fragments without /",
        "output": "",
        "rule": [
            "d11153"
        ]
    },
    {
        "instruction": "",
        "id": "q11154",
        "input": "how does python compare complex number",
        "output": "",
        "rule": [
            "d11154"
        ]
    },
    {
        "instruction": "",
        "id": "q11155",
        "input": "python join with seperator",
        "output": "",
        "rule": [
            "d11155"
        ]
    },
    {
        "instruction": "",
        "id": "q11156",
        "input": "how is alias used in python",
        "output": "",
        "rule": [
            "d11156"
        ]
    },
    {
        "instruction": "",
        "id": "q11157",
        "input": "python json check if serializable",
        "output": "",
        "rule": [
            "d11157"
        ]
    },
    {
        "instruction": "",
        "id": "q11158",
        "input": "how similar are two words in python",
        "output": "",
        "rule": [
            "d11158"
        ]
    },
    {
        "instruction": "",
        "id": "q11159",
        "input": "python json dump command output",
        "output": "",
        "rule": [
            "d11159"
        ]
    },
    {
        "instruction": "",
        "id": "q11160",
        "input": "how to access an 2 d array in python",
        "output": "",
        "rule": [
            "d11160"
        ]
    },
    {
        "instruction": "",
        "id": "q11161",
        "input": "how to access an ordered dictionary in python",
        "output": "",
        "rule": [
            "d11161"
        ]
    },
    {
        "instruction": "",
        "id": "q11162",
        "input": "python json dumps remove space",
        "output": "",
        "rule": [
            "d11162"
        ]
    },
    {
        "instruction": "",
        "id": "q11163",
        "input": "how to access element of a list n python",
        "output": "",
        "rule": [
            "d11163"
        ]
    },
    {
        "instruction": "",
        "id": "q11164",
        "input": "python json file parse comment",
        "output": "",
        "rule": [
            "d11164"
        ]
    },
    {
        "instruction": "",
        "id": "q11165",
        "input": "how to access the first number in an integer python",
        "output": "",
        "rule": [
            "d11165"
        ]
    },
    {
        "instruction": "",
        "id": "q11166",
        "input": "how to accessfile path python",
        "output": "",
        "rule": [
            "d11166"
        ]
    },
    {
        "instruction": "",
        "id": "q11167",
        "input": "python json serialize deserialize list of object",
        "output": "",
        "rule": [
            "d11167"
        ]
    },
    {
        "instruction": "",
        "id": "q11168",
        "input": "python json to yaml converter",
        "output": "",
        "rule": [
            "d11168"
        ]
    },
    {
        "instruction": "",
        "id": "q11169",
        "input": "how to add a delimiter to a list in python",
        "output": "",
        "rule": [
            "d11169"
        ]
    },
    {
        "instruction": "",
        "id": "q11170",
        "input": "python k random element from array",
        "output": "",
        "rule": [
            "d11170"
        ]
    },
    {
        "instruction": "",
        "id": "q11171",
        "input": "python kdeplot the curve is not in the data",
        "output": "",
        "rule": [
            "d11171"
        ]
    },
    {
        "instruction": "",
        "id": "q11172",
        "input": "how to add custom spacing in python",
        "output": "",
        "rule": [
            "d11172"
        ]
    },
    {
        "instruction": "",
        "id": "q11173",
        "input": "python keep diagonal entries of an array, everything else becomes zero",
        "output": "",
        "rule": [
            "d11173"
        ]
    },
    {
        "instruction": "",
        "id": "q11174",
        "input": "how to add long description in python",
        "output": "",
        "rule": [
            "d11174"
        ]
    },
    {
        "instruction": "",
        "id": "q11175",
        "input": "python kill process by signal",
        "output": "",
        "rule": [
            "d11175"
        ]
    },
    {
        "instruction": "",
        "id": "q11176",
        "input": "python lambda example to tuple",
        "output": "",
        "rule": [
            "d11176"
        ]
    },
    {
        "instruction": "",
        "id": "q11177",
        "input": "how to add values to display on top of each bar chart python",
        "output": "",
        "rule": [
            "d11177"
        ]
    },
    {
        "instruction": "",
        "id": "q11178",
        "input": "python lambda takes a tuple",
        "output": "",
        "rule": [
            "d11178"
        ]
    },
    {
        "instruction": "",
        "id": "q11179",
        "input": "how to allivate permission in python",
        "output": "",
        "rule": [
            "d11179"
        ]
    },
    {
        "instruction": "",
        "id": "q11180",
        "input": "python last file line not read",
        "output": "",
        "rule": [
            "d11180"
        ]
    },
    {
        "instruction": "",
        "id": "q11181",
        "input": "python latex to png",
        "output": "",
        "rule": [
            "d11181"
        ]
    },
    {
        "instruction": "",
        "id": "q11182",
        "input": "how to apply bin function to elements in a list or array in python",
        "output": "",
        "rule": [
            "d11182"
        ]
    },
    {
        "instruction": "",
        "id": "q11183",
        "input": "python left right mid string",
        "output": "",
        "rule": [
            "d11183"
        ]
    },
    {
        "instruction": "",
        "id": "q11184",
        "input": "how to apply log transformation to a column in python",
        "output": "",
        "rule": [
            "d11184"
        ]
    },
    {
        "instruction": "",
        "id": "q11185",
        "input": "python len function complexity",
        "output": "",
        "rule": [
            "d11185"
        ]
    },
    {
        "instruction": "",
        "id": "q11186",
        "input": "how to ask question in python then pick formula based on answer",
        "output": "",
        "rule": [
            "d11186"
        ]
    },
    {
        "instruction": "",
        "id": "q11187",
        "input": "python levenshtein distance algorithm",
        "output": "",
        "rule": [
            "d11187"
        ]
    },
    {
        "instruction": "",
        "id": "q11188",
        "input": "how to bold only certain characters in python",
        "output": "",
        "rule": [
            "d11188"
        ]
    },
    {
        "instruction": "",
        "id": "q11189",
        "input": "python limit axis range",
        "output": "",
        "rule": [
            "d11189"
        ]
    },
    {
        "instruction": "",
        "id": "q11190",
        "input": "how to bold the text in print in python",
        "output": "",
        "rule": [
            "d11190"
        ]
    },
    {
        "instruction": "",
        "id": "q11191",
        "input": "python linked list implementation with head and tail",
        "output": "",
        "rule": [
            "d11191"
        ]
    },
    {
        "instruction": "",
        "id": "q11192",
        "input": "how to byte align in python",
        "output": "",
        "rule": [
            "d11192"
        ]
    },
    {
        "instruction": "",
        "id": "q11193",
        "input": "python list combine to string with delimiter",
        "output": "",
        "rule": [
            "d11193"
        ]
    },
    {
        "instruction": "",
        "id": "q11194",
        "input": "how to calculate covariance python",
        "output": "",
        "rule": [
            "d11194"
        ]
    },
    {
        "instruction": "",
        "id": "q11195",
        "input": "python list dedup in order",
        "output": "",
        "rule": [
            "d11195"
        ]
    },
    {
        "instruction": "",
        "id": "q11196",
        "input": "how to calculate standard deviation or missing percentage of a variable in python",
        "output": "",
        "rule": [
            "d11196"
        ]
    },
    {
        "instruction": "",
        "id": "q11197",
        "input": "python list fill between values",
        "output": "",
        "rule": [
            "d11197"
        ]
    },
    {
        "instruction": "",
        "id": "q11198",
        "input": "how to calculate the six months previous date python",
        "output": "",
        "rule": [
            "d11198"
        ]
    },
    {
        "instruction": "",
        "id": "q11199",
        "input": "python list logical indexing from a list of true",
        "output": "",
        "rule": [
            "d11199"
        ]
    },
    {
        "instruction": "",
        "id": "q11200",
        "input": "how to call a range from a through z in python",
        "output": "",
        "rule": [
            "d11200"
        ]
    },
    {
        "instruction": "",
        "id": "q11201",
        "input": "python list median calculations",
        "output": "",
        "rule": [
            "d11201"
        ]
    },
    {
        "instruction": "",
        "id": "q11202",
        "input": "how to call the header of columns in python",
        "output": "",
        "rule": [
            "d11202"
        ]
    },
    {
        "instruction": "",
        "id": "q11203",
        "input": "python list numpy identical",
        "output": "",
        "rule": [
            "d11203"
        ]
    },
    {
        "instruction": "",
        "id": "q11204",
        "input": "how to cast a float in python",
        "output": "",
        "rule": [
            "d11204"
        ]
    },
    {
        "instruction": "",
        "id": "q11205",
        "input": "python lists into 2d array",
        "output": "",
        "rule": [
            "d11205"
        ]
    },
    {
        "instruction": "",
        "id": "q11206",
        "input": "how to cast string to uint8 in python",
        "output": "",
        "rule": [
            "d11206"
        ]
    },
    {
        "instruction": "",
        "id": "q11207",
        "input": "python load array from numpy",
        "output": "",
        "rule": [
            "d11207"
        ]
    },
    {
        "instruction": "",
        "id": "q11208",
        "input": "python load comma seperated string into list",
        "output": "",
        "rule": [
            "d11208"
        ]
    },
    {
        "instruction": "",
        "id": "q11209",
        "input": "how to change a 2d list to a 1d list python",
        "output": "",
        "rule": [
            "d11209"
        ]
    },
    {
        "instruction": "",
        "id": "q11210",
        "input": "python load json byte encoding",
        "output": "",
        "rule": [
            "d11210"
        ]
    },
    {
        "instruction": "",
        "id": "q11211",
        "input": "how to change a python iterable",
        "output": "",
        "rule": [
            "d11211"
        ]
    },
    {
        "instruction": "",
        "id": "q11212",
        "input": "python load json from url",
        "output": "",
        "rule": [
            "d11212"
        ]
    },
    {
        "instruction": "",
        "id": "q11213",
        "input": "how to change a true to one in python",
        "output": "",
        "rule": [
            "d11213"
        ]
    },
    {
        "instruction": "",
        "id": "q11214",
        "input": "python locate the maximum of an array",
        "output": "",
        "rule": [
            "d11214"
        ]
    },
    {
        "instruction": "",
        "id": "q11215",
        "input": "how to change postition of turtle in python",
        "output": "",
        "rule": [
            "d11215"
        ]
    },
    {
        "instruction": "",
        "id": "q11216",
        "input": "python lock non block",
        "output": "",
        "rule": [
            "d11216"
        ]
    },
    {
        "instruction": "",
        "id": "q11217",
        "input": "how to change python type to string",
        "output": "",
        "rule": [
            "d11217"
        ]
    },
    {
        "instruction": "",
        "id": "q11218",
        "input": "python lockfile run once",
        "output": "",
        "rule": [
            "d11218"
        ]
    },
    {
        "instruction": "",
        "id": "q11219",
        "input": "how to change small case in python'",
        "output": "",
        "rule": [
            "d11219"
        ]
    },
    {
        "instruction": "",
        "id": "q11220",
        "input": "python log scale wont show all points",
        "output": "",
        "rule": [
            "d11220"
        ]
    },
    {
        "instruction": "",
        "id": "q11221",
        "input": "how to change starting position of turtle in python",
        "output": "",
        "rule": [
            "d11221"
        ]
    },
    {
        "instruction": "",
        "id": "q11222",
        "input": "python logarithmic regression prediction",
        "output": "",
        "rule": [
            "d11222"
        ]
    },
    {
        "instruction": "",
        "id": "q11223",
        "input": "how to change the scale in python plot",
        "output": "",
        "rule": [
            "d11223"
        ]
    },
    {
        "instruction": "",
        "id": "q11224",
        "input": "python logger do i have to close prior to my python script exiting",
        "output": "",
        "rule": [
            "d11224"
        ]
    },
    {
        "instruction": "",
        "id": "q11225",
        "input": "how to change type timestamp value python to date",
        "output": "",
        "rule": [
            "d11225"
        ]
    },
    {
        "instruction": "",
        "id": "q11226",
        "input": "python logger no color",
        "output": "",
        "rule": [
            "d11226"
        ]
    },
    {
        "instruction": "",
        "id": "q11227",
        "input": "how to check an input is a sequence or not in python",
        "output": "",
        "rule": [
            "d11227"
        ]
    },
    {
        "instruction": "",
        "id": "q11228",
        "input": "python logging list of all formatter pre defined values",
        "output": "",
        "rule": [
            "d11228"
        ]
    },
    {
        "instruction": "",
        "id": "q11229",
        "input": "how to check array strings python",
        "output": "",
        "rule": [
            "d11229"
        ]
    },
    {
        "instruction": "",
        "id": "q11230",
        "input": "how to check for equal in python",
        "output": "",
        "rule": [
            "d11230"
        ]
    },
    {
        "instruction": "",
        "id": "q11231",
        "input": "python logging with queue",
        "output": "",
        "rule": [
            "d11231"
        ]
    },
    {
        "instruction": "",
        "id": "q11232",
        "input": "how to check for lower case values in python",
        "output": "",
        "rule": [
            "d11232"
        ]
    },
    {
        "instruction": "",
        "id": "q11233",
        "input": "python logrithm to matrix",
        "output": "",
        "rule": [
            "d11233"
        ]
    },
    {
        "instruction": "",
        "id": "q11234",
        "input": "how to check if 2 dicts are equal in python",
        "output": "",
        "rule": [
            "d11234"
        ]
    },
    {
        "instruction": "",
        "id": "q11235",
        "input": "python magickmock to mock method variable value",
        "output": "",
        "rule": [
            "d11235"
        ]
    },
    {
        "instruction": "",
        "id": "q11236",
        "input": "how to check if a connection is refused in python",
        "output": "",
        "rule": [
            "d11236"
        ]
    },
    {
        "instruction": "",
        "id": "q11237",
        "input": "python make all letters underscores",
        "output": "",
        "rule": [
            "d11237"
        ]
    },
    {
        "instruction": "",
        "id": "q11238",
        "input": "python make an array of datetime",
        "output": "",
        "rule": [
            "d11238"
        ]
    },
    {
        "instruction": "",
        "id": "q11239",
        "input": "how to check if a url is valid python",
        "output": "",
        "rule": [
            "d11239"
        ]
    },
    {
        "instruction": "",
        "id": "q11240",
        "input": "python make new list excluding values from other list",
        "output": "",
        "rule": [
            "d11240"
        ]
    },
    {
        "instruction": "",
        "id": "q11241",
        "input": "how to check if an element in list is string in python",
        "output": "",
        "rule": [
            "d11241"
        ]
    },
    {
        "instruction": "",
        "id": "q11242",
        "input": "python make print print in one line",
        "output": "",
        "rule": [
            "d11242"
        ]
    },
    {
        "instruction": "",
        "id": "q11243",
        "input": "how to check if element is in line python",
        "output": "",
        "rule": [
            "d11243"
        ]
    },
    {
        "instruction": "",
        "id": "q11244",
        "input": "python make valiablke in moduile editable",
        "output": "",
        "rule": [
            "d11244"
        ]
    },
    {
        "instruction": "",
        "id": "q11245",
        "input": "how to check if not condition python",
        "output": "",
        "rule": [
            "d11245"
        ]
    },
    {
        "instruction": "",
        "id": "q11246",
        "input": "python manage windows domain name",
        "output": "",
        "rule": [
            "d11246"
        ]
    },
    {
        "instruction": "",
        "id": "q11247",
        "input": "how to check if number is power of 2 python",
        "output": "",
        "rule": [
            "d11247"
        ]
    },
    {
        "instruction": "",
        "id": "q11248",
        "input": "python map react to click",
        "output": "",
        "rule": [
            "d11248"
        ]
    },
    {
        "instruction": "",
        "id": "q11249",
        "input": "how to check if series is empty in python",
        "output": "",
        "rule": [
            "d11249"
        ]
    },
    {
        "instruction": "",
        "id": "q11250",
        "input": "python mapp an array to a color scale",
        "output": "",
        "rule": [
            "d11250"
        ]
    },
    {
        "instruction": "",
        "id": "q11251",
        "input": "python mask array nomask",
        "output": "",
        "rule": [
            "d11251"
        ]
    },
    {
        "instruction": "",
        "id": "q11252",
        "input": "how to check if text file is empty or not python",
        "output": "",
        "rule": [
            "d11252"
        ]
    },
    {
        "instruction": "",
        "id": "q11253",
        "input": "python match a set of strings",
        "output": "",
        "rule": [
            "d11253"
        ]
    },
    {
        "instruction": "",
        "id": "q11254",
        "input": "how to check image format in tensorflow or python",
        "output": "",
        "rule": [
            "d11254"
        ]
    },
    {
        "instruction": "",
        "id": "q11255",
        "input": "python math greatest common divisor",
        "output": "",
        "rule": [
            "d11255"
        ]
    },
    {
        "instruction": "",
        "id": "q11256",
        "input": "how to check number has only two digit in python",
        "output": "",
        "rule": [
            "d11256"
        ]
    },
    {
        "instruction": "",
        "id": "q11257",
        "input": "python matplotlib colorbar colormap",
        "output": "",
        "rule": [
            "d11257"
        ]
    },
    {
        "instruction": "",
        "id": "q11258",
        "input": "how to check path is a file or directory python",
        "output": "",
        "rule": [
            "d11258"
        ]
    },
    {
        "instruction": "",
        "id": "q11259",
        "input": "python matplotlib not in new window",
        "output": "",
        "rule": [
            "d11259"
        ]
    },
    {
        "instruction": "",
        "id": "q11260",
        "input": "python matplotlib prevent figure window take focus",
        "output": "",
        "rule": [
            "d11260"
        ]
    },
    {
        "instruction": "",
        "id": "q11261",
        "input": "how to check the index of a series in python",
        "output": "",
        "rule": [
            "d11261"
        ]
    },
    {
        "instruction": "",
        "id": "q11262",
        "input": "how to check the interval in a list in python",
        "output": "",
        "rule": [
            "d11262"
        ]
    },
    {
        "instruction": "",
        "id": "q11263",
        "input": "python matrix band dot",
        "output": "",
        "rule": [
            "d11263"
        ]
    },
    {
        "instruction": "",
        "id": "q11264",
        "input": "how to check the log created by python code in docker container",
        "output": "",
        "rule": [
            "d11264"
        ]
    },
    {
        "instruction": "",
        "id": "q11265",
        "input": "python max size variable name",
        "output": "",
        "rule": [
            "d11265"
        ]
    },
    {
        "instruction": "",
        "id": "q11266",
        "input": "how to check to see if a file exists in python",
        "output": "",
        "rule": [
            "d11266"
        ]
    },
    {
        "instruction": "",
        "id": "q11267",
        "input": "python maximum line length",
        "output": "",
        "rule": [
            "d11267"
        ]
    },
    {
        "instruction": "",
        "id": "q11268",
        "input": "how to chek size of dataset in python",
        "output": "",
        "rule": [
            "d11268"
        ]
    },
    {
        "instruction": "",
        "id": "q11269",
        "input": "how to clear all python dependancies",
        "output": "",
        "rule": [
            "d11269"
        ]
    },
    {
        "instruction": "",
        "id": "q11270",
        "input": "python merge pdf files free",
        "output": "",
        "rule": [
            "d11270"
        ]
    },
    {
        "instruction": "",
        "id": "q11271",
        "input": "how to clear output in juypter python",
        "output": "",
        "rule": [
            "d11271"
        ]
    },
    {
        "instruction": "",
        "id": "q11272",
        "input": "python meters to lat lon",
        "output": "",
        "rule": [
            "d11272"
        ]
    },
    {
        "instruction": "",
        "id": "q11273",
        "input": "how to clear plots python",
        "output": "",
        "rule": [
            "d11273"
        ]
    },
    {
        "instruction": "",
        "id": "q11274",
        "input": "python method args matching stars",
        "output": "",
        "rule": [
            "d11274"
        ]
    },
    {
        "instruction": "",
        "id": "q11275",
        "input": "python notify all other threads to stop",
        "output": "",
        "rule": [
            "d11275"
        ]
    },
    {
        "instruction": "",
        "id": "q11276",
        "input": "python minidom remove empty line",
        "output": "",
        "rule": [
            "d11276"
        ]
    },
    {
        "instruction": "",
        "id": "q11277",
        "input": "how to close figure python",
        "output": "",
        "rule": [
            "d11277"
        ]
    },
    {
        "instruction": "",
        "id": "q11278",
        "input": "python minimum value numpy array",
        "output": "",
        "rule": [
            "d11278"
        ]
    },
    {
        "instruction": "",
        "id": "q11279",
        "input": "how to code a word count with python",
        "output": "",
        "rule": [
            "d11279"
        ]
    },
    {
        "instruction": "",
        "id": "q11280",
        "input": "python mlab distribution log normal",
        "output": "",
        "rule": [
            "d11280"
        ]
    },
    {
        "instruction": "",
        "id": "q11281",
        "input": "how to code adjacency matrix python",
        "output": "",
        "rule": [
            "d11281"
        ]
    },
    {
        "instruction": "",
        "id": "q11282",
        "input": "python mock patch only in function",
        "output": "",
        "rule": [
            "d11282"
        ]
    },
    {
        "instruction": "",
        "id": "q11283",
        "input": "how to code change text color in python",
        "output": "",
        "rule": [
            "d11283"
        ]
    },
    {
        "instruction": "",
        "id": "q11284",
        "input": "python mock set constructor",
        "output": "",
        "rule": [
            "d11284"
        ]
    },
    {
        "instruction": "",
        "id": "q11285",
        "input": "how to code for empty table in python",
        "output": "",
        "rule": [
            "d11285"
        ]
    },
    {
        "instruction": "",
        "id": "q11286",
        "input": "python modified file watchdog",
        "output": "",
        "rule": [
            "d11286"
        ]
    },
    {
        "instruction": "",
        "id": "q11287",
        "input": "how to code for the fibbonacci sequence in python",
        "output": "",
        "rule": [
            "d11287"
        ]
    },
    {
        "instruction": "",
        "id": "q11288",
        "input": "python modify dict in function",
        "output": "",
        "rule": [
            "d11288"
        ]
    },
    {
        "instruction": "",
        "id": "q11289",
        "input": "how to combine sentence into list python",
        "output": "",
        "rule": [
            "d11289"
        ]
    },
    {
        "instruction": "",
        "id": "q11290",
        "input": "python mongo objectid string",
        "output": "",
        "rule": [
            "d11290"
        ]
    },
    {
        "instruction": "",
        "id": "q11291",
        "input": "how to commit multiple things at once python",
        "output": "",
        "rule": [
            "d11291"
        ]
    },
    {
        "instruction": "",
        "id": "q11292",
        "input": "python mongoclient close connection",
        "output": "",
        "rule": [
            "d11292"
        ]
    },
    {
        "instruction": "",
        "id": "q11293",
        "input": "how to compare a string and integer python",
        "output": "",
        "rule": [
            "d11293"
        ]
    },
    {
        "instruction": "",
        "id": "q11294",
        "input": "python mongodb create index",
        "output": "",
        "rule": [
            "d11294"
        ]
    },
    {
        "instruction": "",
        "id": "q11295",
        "input": "how to compile a single python file",
        "output": "",
        "rule": [
            "d11295"
        ]
    },
    {
        "instruction": "",
        "id": "q11296",
        "input": "python mongodb cursor to json",
        "output": "",
        "rule": [
            "d11296"
        ]
    },
    {
        "instruction": "",
        "id": "q11297",
        "input": "how to compute median of 3 values in python using function",
        "output": "",
        "rule": [
            "d11297"
        ]
    },
    {
        "instruction": "",
        "id": "q11298",
        "input": "python most common element in list",
        "output": "",
        "rule": [
            "d11298"
        ]
    },
    {
        "instruction": "",
        "id": "q11299",
        "input": "how to connect redis using python",
        "output": "",
        "rule": [
            "d11299"
        ]
    },
    {
        "instruction": "",
        "id": "q11300",
        "input": "python move index to comumn",
        "output": "",
        "rule": [
            "d11300"
        ]
    },
    {
        "instruction": "",
        "id": "q11301",
        "input": "how to connect to mq using python",
        "output": "",
        "rule": [
            "d11301"
        ]
    },
    {
        "instruction": "",
        "id": "q11302",
        "input": "how to conver list to dictionary in python",
        "output": "",
        "rule": [
            "d11302"
        ]
    },
    {
        "instruction": "",
        "id": "q11303",
        "input": "python multiple context managers on single line",
        "output": "",
        "rule": [
            "d11303"
        ]
    },
    {
        "instruction": "",
        "id": "q11304",
        "input": "how to convertt none type to string in python",
        "output": "",
        "rule": [
            "d11304"
        ]
    },
    {
        "instruction": "",
        "id": "q11305",
        "input": "python multiple line string format",
        "output": "",
        "rule": [
            "d11305"
        ]
    },
    {
        "instruction": "",
        "id": "q11306",
        "input": "how to count the number of letters in python uing len",
        "output": "",
        "rule": [
            "d11306"
        ]
    },
    {
        "instruction": "",
        "id": "q11307",
        "input": "python multiply 3d matrix",
        "output": "",
        "rule": [
            "d11307"
        ]
    },
    {
        "instruction": "",
        "id": "q11308",
        "input": "python multiply a variable in a list",
        "output": "",
        "rule": [
            "d11308"
        ]
    },
    {
        "instruction": "",
        "id": "q11309",
        "input": "how to create acronyms and removed stopwords without nklt using python",
        "output": "",
        "rule": [
            "d11309"
        ]
    },
    {
        "instruction": "",
        "id": "q11310",
        "input": "how to create dictionary from string in python",
        "output": "",
        "rule": [
            "d11310"
        ]
    },
    {
        "instruction": "",
        "id": "q11311",
        "input": "python multiprocessing stop a process",
        "output": "",
        "rule": [
            "d11311"
        ]
    },
    {
        "instruction": "",
        "id": "q11312",
        "input": "how to create dot file in python",
        "output": "",
        "rule": [
            "d11312"
        ]
    },
    {
        "instruction": "",
        "id": "q11313",
        "input": "how to cretate an output file and route python output to a file",
        "output": "",
        "rule": [
            "d11313"
        ]
    },
    {
        "instruction": "",
        "id": "q11314",
        "input": "python mysqldb get cursor",
        "output": "",
        "rule": [
            "d11314"
        ]
    },
    {
        "instruction": "",
        "id": "q11315",
        "input": "how to cut off beginning of a string in python",
        "output": "",
        "rule": [
            "d11315"
        ]
    },
    {
        "instruction": "",
        "id": "q11316",
        "input": "python neo4j driver to graphml",
        "output": "",
        "rule": [
            "d11316"
        ]
    },
    {
        "instruction": "",
        "id": "q11317",
        "input": "how to deal with pickle file in python",
        "output": "",
        "rule": [
            "d11317"
        ]
    },
    {
        "instruction": "",
        "id": "q11318",
        "input": "python networkx check if edge in graph",
        "output": "",
        "rule": [
            "d11318"
        ]
    },
    {
        "instruction": "",
        "id": "q11319",
        "input": "how to define the width of a gaussian distribution in python",
        "output": "",
        "rule": [
            "d11319"
        ]
    },
    {
        "instruction": "",
        "id": "q11320",
        "input": "python networkx remove a node",
        "output": "",
        "rule": [
            "d11320"
        ]
    },
    {
        "instruction": "",
        "id": "q11321",
        "input": "how to delay a while loop in python",
        "output": "",
        "rule": [
            "d11321"
        ]
    },
    {
        "instruction": "",
        "id": "q11322",
        "input": "python new image with colisions",
        "output": "",
        "rule": [
            "d11322"
        ]
    },
    {
        "instruction": "",
        "id": "q11323",
        "input": "how to delete all the commas in a list python",
        "output": "",
        "rule": [
            "d11323"
        ]
    },
    {
        "instruction": "",
        "id": "q11324",
        "input": "python no shortcut boolean condition",
        "output": "",
        "rule": [
            "d11324"
        ]
    },
    {
        "instruction": "",
        "id": "q11325",
        "input": "how to delete duplicate records in python",
        "output": "",
        "rule": [
            "d11325"
        ]
    },
    {
        "instruction": "",
        "id": "q11326",
        "input": "python normalize matrix by column",
        "output": "",
        "rule": [
            "d11326"
        ]
    },
    {
        "instruction": "",
        "id": "q11327",
        "input": "how to delete last list member in python",
        "output": "",
        "rule": [
            "d11327"
        ]
    },
    {
        "instruction": "",
        "id": "q11328",
        "input": "python nose known fail",
        "output": "",
        "rule": [
            "d11328"
        ]
    },
    {
        "instruction": "",
        "id": "q11329",
        "input": "how to delete letters in a string in python",
        "output": "",
        "rule": [
            "d11329"
        ]
    },
    {
        "instruction": "",
        "id": "q11330",
        "input": "python nose last run",
        "output": "",
        "rule": [
            "d11330"
        ]
    },
    {
        "instruction": "",
        "id": "q11331",
        "input": "python not condition and condition",
        "output": "",
        "rule": [
            "d11331"
        ]
    },
    {
        "instruction": "",
        "id": "q11332",
        "input": "how to destroy a canvas in python",
        "output": "",
        "rule": [
            "d11332"
        ]
    },
    {
        "instruction": "",
        "id": "q11333",
        "input": "python not recognizing named method",
        "output": "",
        "rule": [
            "d11333"
        ]
    },
    {
        "instruction": "",
        "id": "q11334",
        "input": "how to detect scrolls in python",
        "output": "",
        "rule": [
            "d11334"
        ]
    },
    {
        "instruction": "",
        "id": "q11335",
        "input": "how to determine index field type in python",
        "output": "",
        "rule": [
            "d11335"
        ]
    },
    {
        "instruction": "",
        "id": "q11336",
        "input": "python nouse wheel scrollbar",
        "output": "",
        "rule": [
            "d11336"
        ]
    },
    {
        "instruction": "",
        "id": "q11337",
        "input": "how to determine length of python email message in bytes",
        "output": "",
        "rule": [
            "d11337"
        ]
    },
    {
        "instruction": "",
        "id": "q11338",
        "input": "python np array dtype",
        "output": "",
        "rule": [
            "d11338"
        ]
    },
    {
        "instruction": "",
        "id": "q11339",
        "input": "how to determine the index of a specific value in python",
        "output": "",
        "rule": [
            "d11339"
        ]
    },
    {
        "instruction": "",
        "id": "q11340",
        "input": "python np interpolate for multiple dimensions",
        "output": "",
        "rule": [
            "d11340"
        ]
    },
    {
        "instruction": "",
        "id": "q11341",
        "input": "how to disable ssl check in python",
        "output": "",
        "rule": [
            "d11341"
        ]
    },
    {
        "instruction": "",
        "id": "q11342",
        "input": "python number of non nan rows in a row",
        "output": "",
        "rule": [
            "d11342"
        ]
    },
    {
        "instruction": "",
        "id": "q11343",
        "input": "how to disable ssl verification in python urllib",
        "output": "",
        "rule": [
            "d11343"
        ]
    },
    {
        "instruction": "",
        "id": "q11344",
        "input": "python numpy array dtype",
        "output": "",
        "rule": [
            "d11344"
        ]
    },
    {
        "instruction": "",
        "id": "q11345",
        "input": "how to do dimensional arrays in python",
        "output": "",
        "rule": [
            "d11345"
        ]
    },
    {
        "instruction": "",
        "id": "q11346",
        "input": "python numpy array dtype compare",
        "output": "",
        "rule": [
            "d11346"
        ]
    },
    {
        "instruction": "",
        "id": "q11347",
        "input": "python how to setuptools",
        "output": "",
        "rule": [
            "d11347"
        ]
    },
    {
        "instruction": "",
        "id": "q11348",
        "input": "python numpy array from dict",
        "output": "",
        "rule": [
            "d11348"
        ]
    },
    {
        "instruction": "",
        "id": "q11349",
        "input": "how to do non linear curve fitting with new equation python",
        "output": "",
        "rule": [
            "d11349"
        ]
    },
    {
        "instruction": "",
        "id": "q11350",
        "input": "python numpy array masking a region based on coordinates",
        "output": "",
        "rule": [
            "d11350"
        ]
    },
    {
        "instruction": "",
        "id": "q11351",
        "input": "how to download as a zip file data in python",
        "output": "",
        "rule": [
            "d11351"
        ]
    },
    {
        "instruction": "",
        "id": "q11352",
        "input": "python numpy array rounding numbers",
        "output": "",
        "rule": [
            "d11352"
        ]
    },
    {
        "instruction": "",
        "id": "q11353",
        "input": "how to draw horizontal line in python",
        "output": "",
        "rule": [
            "d11353"
        ]
    },
    {
        "instruction": "",
        "id": "q11354",
        "input": "python numpy change dtype to str",
        "output": "",
        "rule": [
            "d11354"
        ]
    },
    {
        "instruction": "",
        "id": "q11355",
        "input": "how to dump yaml as dictionary python",
        "output": "",
        "rule": [
            "d11355"
        ]
    },
    {
        "instruction": "",
        "id": "q11356",
        "input": "python numpy compare max function",
        "output": "",
        "rule": [
            "d11356"
        ]
    },
    {
        "instruction": "",
        "id": "q11357",
        "input": "how to dynamically save a file in python",
        "output": "",
        "rule": [
            "d11357"
        ]
    },
    {
        "instruction": "",
        "id": "q11358",
        "input": "python numpy get random state seed",
        "output": "",
        "rule": [
            "d11358"
        ]
    },
    {
        "instruction": "",
        "id": "q11359",
        "input": "how to encode the utf code in python",
        "output": "",
        "rule": [
            "d11359"
        ]
    },
    {
        "instruction": "",
        "id": "q11360",
        "input": "python numpy index of bool",
        "output": "",
        "rule": [
            "d11360"
        ]
    },
    {
        "instruction": "",
        "id": "q11361",
        "input": "how to erase a previous line in python",
        "output": "",
        "rule": [
            "d11361"
        ]
    },
    {
        "instruction": "",
        "id": "q11362",
        "input": "how to evaluate the accuracy of a model; python",
        "output": "",
        "rule": [
            "d11362"
        ]
    },
    {
        "instruction": "",
        "id": "q11363",
        "input": "python numpy masked arrays",
        "output": "",
        "rule": [
            "d11363"
        ]
    },
    {
        "instruction": "",
        "id": "q11364",
        "input": "how to exclude empty strings from a collection in python",
        "output": "",
        "rule": [
            "d11364"
        ]
    },
    {
        "instruction": "",
        "id": "q11365",
        "input": "how to execute a python script with a button click in jquery",
        "output": "",
        "rule": [
            "d11365"
        ]
    },
    {
        "instruction": "",
        "id": "q11366",
        "input": "python numpy nd convolution",
        "output": "",
        "rule": [
            "d11366"
        ]
    },
    {
        "instruction": "",
        "id": "q11367",
        "input": "how to execute python functios in django templates",
        "output": "",
        "rule": [
            "d11367"
        ]
    },
    {
        "instruction": "",
        "id": "q11368",
        "input": "python numpy read binary data file",
        "output": "",
        "rule": [
            "d11368"
        ]
    },
    {
        "instruction": "",
        "id": "q11369",
        "input": "how to exit from a code in python script",
        "output": "",
        "rule": [
            "d11369"
        ]
    },
    {
        "instruction": "",
        "id": "q11370",
        "input": "python numpy read data from binary file",
        "output": "",
        "rule": [
            "d11370"
        ]
    },
    {
        "instruction": "",
        "id": "q11371",
        "input": "how to fetch column names from postgresql python",
        "output": "",
        "rule": [
            "d11371"
        ]
    },
    {
        "instruction": "",
        "id": "q11372",
        "input": "python numpy sum along axis",
        "output": "",
        "rule": [
            "d11372"
        ]
    },
    {
        "instruction": "",
        "id": "q11373",
        "input": "how to fetch prior month in date in python",
        "output": "",
        "rule": [
            "d11373"
        ]
    },
    {
        "instruction": "",
        "id": "q11374",
        "input": "python object has not attributre",
        "output": "",
        "rule": [
            "d11374"
        ]
    },
    {
        "instruction": "",
        "id": "q11375",
        "input": "how to figure out min and max in python",
        "output": "",
        "rule": [
            "d11375"
        ]
    },
    {
        "instruction": "",
        "id": "q11376",
        "input": "python object of type bytes is not json serializable",
        "output": "",
        "rule": [
            "d11376"
        ]
    },
    {
        "instruction": "",
        "id": "q11377",
        "input": "python on windws check file permissions",
        "output": "",
        "rule": [
            "d11377"
        ]
    },
    {
        "instruction": "",
        "id": "q11378",
        "input": "how to flatten 2d arrays python numpy",
        "output": "",
        "rule": [
            "d11378"
        ]
    },
    {
        "instruction": "",
        "id": "q11379",
        "input": "python only allow kwargs",
        "output": "",
        "rule": [
            "d11379"
        ]
    },
    {
        "instruction": "",
        "id": "q11380",
        "input": "how to formai in italic on python",
        "output": "",
        "rule": [
            "d11380"
        ]
    },
    {
        "instruction": "",
        "id": "q11381",
        "input": "python open an excel and save it as something else",
        "output": "",
        "rule": [
            "d11381"
        ]
    },
    {
        "instruction": "",
        "id": "q11382",
        "input": "how to garbage collect python",
        "output": "",
        "rule": [
            "d11382"
        ]
    },
    {
        "instruction": "",
        "id": "q11383",
        "input": "python open bytesio for reading",
        "output": "",
        "rule": [
            "d11383"
        ]
    },
    {
        "instruction": "",
        "id": "q11384",
        "input": "how to generate a password using python",
        "output": "",
        "rule": [
            "d11384"
        ]
    },
    {
        "instruction": "",
        "id": "q11385",
        "input": "python open file should i close it",
        "output": "",
        "rule": [
            "d11385"
        ]
    },
    {
        "instruction": "",
        "id": "q11386",
        "input": "how to generate a unique random number in python",
        "output": "",
        "rule": [
            "d11386"
        ]
    },
    {
        "instruction": "",
        "id": "q11387",
        "input": "python open file to read til end of file",
        "output": "",
        "rule": [
            "d11387"
        ]
    },
    {
        "instruction": "",
        "id": "q11388",
        "input": "how to generate covariance matrix python",
        "output": "",
        "rule": [
            "d11388"
        ]
    },
    {
        "instruction": "",
        "id": "q11389",
        "input": "python open file with unknown encoding",
        "output": "",
        "rule": [
            "d11389"
        ]
    },
    {
        "instruction": "",
        "id": "q11390",
        "input": "how to get a frequency of a word in python",
        "output": "",
        "rule": [
            "d11390"
        ]
    },
    {
        "instruction": "",
        "id": "q11391",
        "input": "python open json encoding",
        "output": "",
        "rule": [
            "d11391"
        ]
    },
    {
        "instruction": "",
        "id": "q11392",
        "input": "how to get a list of all globle varibles in python",
        "output": "",
        "rule": [
            "d11392"
        ]
    },
    {
        "instruction": "",
        "id": "q11393",
        "input": "python opencv conver to gray",
        "output": "",
        "rule": [
            "d11393"
        ]
    },
    {
        "instruction": "",
        "id": "q11394",
        "input": "how to get a list of constant in python",
        "output": "",
        "rule": [
            "d11394"
        ]
    },
    {
        "instruction": "",
        "id": "q11395",
        "input": "python openpyxl how to get cell background color",
        "output": "",
        "rule": [
            "d11395"
        ]
    },
    {
        "instruction": "",
        "id": "q11396",
        "input": "how to get a list of lower case letters in python",
        "output": "",
        "rule": [
            "d11396"
        ]
    },
    {
        "instruction": "",
        "id": "q11397",
        "input": "python opoengl 3d texture",
        "output": "",
        "rule": [
            "d11397"
        ]
    },
    {
        "instruction": "",
        "id": "q11398",
        "input": "how to get a list of prime numbers in python",
        "output": "",
        "rule": [
            "d11398"
        ]
    },
    {
        "instruction": "",
        "id": "q11399",
        "input": "python oracle all the fields of a table",
        "output": "",
        "rule": [
            "d11399"
        ]
    },
    {
        "instruction": "",
        "id": "q11400",
        "input": "how to get a minimum in python using if and else",
        "output": "",
        "rule": [
            "d11400"
        ]
    },
    {
        "instruction": "",
        "id": "q11401",
        "input": "python order a list given a list of new indices",
        "output": "",
        "rule": [
            "d11401"
        ]
    },
    {
        "instruction": "",
        "id": "q11402",
        "input": "how to get a previous business date in python",
        "output": "",
        "rule": [
            "d11402"
        ]
    },
    {
        "instruction": "",
        "id": "q11403",
        "input": "python output attributes of object",
        "output": "",
        "rule": [
            "d11403"
        ]
    },
    {
        "instruction": "",
        "id": "q11404",
        "input": "how to get active window detail in python",
        "output": "",
        "rule": [
            "d11404"
        ]
    },
    {
        "instruction": "",
        "id": "q11405",
        "input": "python output to asi file",
        "output": "",
        "rule": [
            "d11405"
        ]
    },
    {
        "instruction": "",
        "id": "q11406",
        "input": "how to get all files in a directory in python",
        "output": "",
        "rule": [
            "d11406"
        ]
    },
    {
        "instruction": "",
        "id": "q11407",
        "input": "python panda lambda x multiple conditions",
        "output": "",
        "rule": [
            "d11407"
        ]
    },
    {
        "instruction": "",
        "id": "q11408",
        "input": "how to get complete sub set in python function",
        "output": "",
        "rule": [
            "d11408"
        ]
    },
    {
        "instruction": "",
        "id": "q11409",
        "input": "python paramiko check stdout",
        "output": "",
        "rule": [
            "d11409"
        ]
    },
    {
        "instruction": "",
        "id": "q11410",
        "input": "how to get distinct list in python",
        "output": "",
        "rule": [
            "d11410"
        ]
    },
    {
        "instruction": "",
        "id": "q11411",
        "input": "python paramiko ssh read stdout",
        "output": "",
        "rule": [
            "d11411"
        ]
    },
    {
        "instruction": "",
        "id": "q11412",
        "input": "how to get distinct values from a list in python",
        "output": "",
        "rule": [
            "d11412"
        ]
    },
    {
        "instruction": "",
        "id": "q11413",
        "input": "python parentheses matching with regex",
        "output": "",
        "rule": [
            "d11413"
        ]
    },
    {
        "instruction": "",
        "id": "q11414",
        "input": "how to get dpi of a jpeg image python",
        "output": "",
        "rule": [
            "d11414"
        ]
    },
    {
        "instruction": "",
        "id": "q11415",
        "input": "python parse date on a data frame",
        "output": "",
        "rule": [
            "d11415"
        ]
    },
    {
        "instruction": "",
        "id": "q11416",
        "input": "how to get impala/hive table metadata by python",
        "output": "",
        "rule": [
            "d11416"
        ]
    },
    {
        "instruction": "",
        "id": "q11417",
        "input": "python parse date string to date time",
        "output": "",
        "rule": [
            "d11417"
        ]
    },
    {
        "instruction": "",
        "id": "q11418",
        "input": "how to get largest values from a a list python",
        "output": "",
        "rule": [
            "d11418"
        ]
    },
    {
        "instruction": "",
        "id": "q11419",
        "input": "python parse ply grammar",
        "output": "",
        "rule": [
            "d11419"
        ]
    },
    {
        "instruction": "",
        "id": "q11420",
        "input": "how to get last n elements in python",
        "output": "",
        "rule": [
            "d11420"
        ]
    },
    {
        "instruction": "",
        "id": "q11421",
        "input": "how to get lat and long from string python",
        "output": "",
        "rule": [
            "d11421"
        ]
    },
    {
        "instruction": "",
        "id": "q11422",
        "input": "python parse s3 bucket and key from path",
        "output": "",
        "rule": [
            "d11422"
        ]
    },
    {
        "instruction": "",
        "id": "q11423",
        "input": "how to get method name python",
        "output": "",
        "rule": [
            "d11423"
        ]
    },
    {
        "instruction": "",
        "id": "q11424",
        "input": "python parse string to get datetime object",
        "output": "",
        "rule": [
            "d11424"
        ]
    },
    {
        "instruction": "",
        "id": "q11425",
        "input": "how to get next month python datetime",
        "output": "",
        "rule": [
            "d11425"
        ]
    },
    {
        "instruction": "",
        "id": "q11426",
        "input": "python parse true or false",
        "output": "",
        "rule": [
            "d11426"
        ]
    },
    {
        "instruction": "",
        "id": "q11427",
        "input": "how to get number of days in year in python",
        "output": "",
        "rule": [
            "d11427"
        ]
    },
    {
        "instruction": "",
        "id": "q11428",
        "input": "python pass html form values to flask py",
        "output": "",
        "rule": [
            "d11428"
        ]
    },
    {
        "instruction": "",
        "id": "q11429",
        "input": "how to get number of days in yearin python",
        "output": "",
        "rule": [
            "d11429"
        ]
    },
    {
        "instruction": "",
        "id": "q11430",
        "input": "python pass kwargs dict",
        "output": "",
        "rule": [
            "d11430"
        ]
    },
    {
        "instruction": "",
        "id": "q11431",
        "input": "how to get owner of a folder python",
        "output": "",
        "rule": [
            "d11431"
        ]
    },
    {
        "instruction": "",
        "id": "q11432",
        "input": "python pass self object to function",
        "output": "",
        "rule": [
            "d11432"
        ]
    },
    {
        "instruction": "",
        "id": "q11433",
        "input": "how to get python data frame col names",
        "output": "",
        "rule": [
            "d11433"
        ]
    },
    {
        "instruction": "",
        "id": "q11434",
        "input": "python pass variable to yaml file",
        "output": "",
        "rule": [
            "d11434"
        ]
    },
    {
        "instruction": "",
        "id": "q11435",
        "input": "how to get rid of the bound method statemnt in python",
        "output": "",
        "rule": [
            "d11435"
        ]
    },
    {
        "instruction": "",
        "id": "q11436",
        "input": "python passing parent to child bad",
        "output": "",
        "rule": [
            "d11436"
        ]
    },
    {
        "instruction": "",
        "id": "q11437",
        "input": "how to get row an col indexes sing enumerate python",
        "output": "",
        "rule": [
            "d11437"
        ]
    },
    {
        "instruction": "",
        "id": "q11438",
        "input": "python path abspath current file",
        "output": "",
        "rule": [
            "d11438"
        ]
    },
    {
        "instruction": "",
        "id": "q11439",
        "input": "how to get the column names of a data frame in python",
        "output": "",
        "rule": [
            "d11439"
        ]
    },
    {
        "instruction": "",
        "id": "q11440",
        "input": "how to get the complete path of a file in python",
        "output": "",
        "rule": [
            "d11440"
        ]
    },
    {
        "instruction": "",
        "id": "q11441",
        "input": "python pdb print out call stack",
        "output": "",
        "rule": [
            "d11441"
        ]
    },
    {
        "instruction": "",
        "id": "q11442",
        "input": "how to get the cursor in python",
        "output": "",
        "rule": [
            "d11442"
        ]
    },
    {
        "instruction": "",
        "id": "q11443",
        "input": "python pdb return from function",
        "output": "",
        "rule": [
            "d11443"
        ]
    },
    {
        "instruction": "",
        "id": "q11444",
        "input": "how to get the index of a row python",
        "output": "",
        "rule": [
            "d11444"
        ]
    },
    {
        "instruction": "",
        "id": "q11445",
        "input": "python pdf document size",
        "output": "",
        "rule": [
            "d11445"
        ]
    },
    {
        "instruction": "",
        "id": "q11446",
        "input": "how to get the intensity phase using python",
        "output": "",
        "rule": [
            "d11446"
        ]
    },
    {
        "instruction": "",
        "id": "q11447",
        "input": "python pdf float right",
        "output": "",
        "rule": [
            "d11447"
        ]
    },
    {
        "instruction": "",
        "id": "q11448",
        "input": "how to get the least value in a column in python",
        "output": "",
        "rule": [
            "d11448"
        ]
    },
    {
        "instruction": "",
        "id": "q11449",
        "input": "python pickle custom type",
        "output": "",
        "rule": [
            "d11449"
        ]
    },
    {
        "instruction": "",
        "id": "q11450",
        "input": "how to get the lowest number from a list in python",
        "output": "",
        "rule": [
            "d11450"
        ]
    },
    {
        "instruction": "",
        "id": "q11451",
        "input": "python pickle dump keras model",
        "output": "",
        "rule": [
            "d11451"
        ]
    },
    {
        "instruction": "",
        "id": "q11452",
        "input": "how to get the start index and end index in python",
        "output": "",
        "rule": [
            "d11452"
        ]
    },
    {
        "instruction": "",
        "id": "q11453",
        "input": "python plink problems with m command file",
        "output": "",
        "rule": [
            "d11453"
        ]
    },
    {
        "instruction": "",
        "id": "q11454",
        "input": "how to get the std err and std output in python",
        "output": "",
        "rule": [
            "d11454"
        ]
    },
    {
        "instruction": "",
        "id": "q11455",
        "input": "python plot scrollbar button move with scroll",
        "output": "",
        "rule": [
            "d11455"
        ]
    },
    {
        "instruction": "",
        "id": "q11456",
        "input": "how to get the user id in windows using python",
        "output": "",
        "rule": [
            "d11456"
        ]
    },
    {
        "instruction": "",
        "id": "q11457",
        "input": "python plot specify figure",
        "output": "",
        "rule": [
            "d11457"
        ]
    },
    {
        "instruction": "",
        "id": "q11458",
        "input": "how to get working directory in python",
        "output": "",
        "rule": [
            "d11458"
        ]
    },
    {
        "instruction": "",
        "id": "q11459",
        "input": "python png to texture2d",
        "output": "",
        "rule": [
            "d11459"
        ]
    },
    {
        "instruction": "",
        "id": "q11460",
        "input": "how to give encoding for file write in python",
        "output": "",
        "rule": [
            "d11460"
        ]
    },
    {
        "instruction": "",
        "id": "q11461",
        "input": "python pojo object to json",
        "output": "",
        "rule": [
            "d11461"
        ]
    },
    {
        "instruction": "",
        "id": "q11462",
        "input": "how to hamming distance in python without functions",
        "output": "",
        "rule": [
            "d11462"
        ]
    },
    {
        "instruction": "",
        "id": "q11463",
        "input": "python pool join hang",
        "output": "",
        "rule": [
            "d11463"
        ]
    },
    {
        "instruction": "",
        "id": "q11464",
        "input": "how to have python save a file as",
        "output": "",
        "rule": [
            "d11464"
        ]
    },
    {
        "instruction": "",
        "id": "q11465",
        "input": "python pop from first top array",
        "output": "",
        "rule": [
            "d11465"
        ]
    },
    {
        "instruction": "",
        "id": "q11466",
        "input": "python prettify json encoding",
        "output": "",
        "rule": [
            "d11466"
        ]
    },
    {
        "instruction": "",
        "id": "q11467",
        "input": "how to identify if variable is not a factoral in python",
        "output": "",
        "rule": [
            "d11467"
        ]
    },
    {
        "instruction": "",
        "id": "q11468",
        "input": "python pretty print namedtuple",
        "output": "",
        "rule": [
            "d11468"
        ]
    },
    {
        "instruction": "",
        "id": "q11469",
        "input": "how to identify type of input with python",
        "output": "",
        "rule": [
            "d11469"
        ]
    },
    {
        "instruction": "",
        "id": "q11470",
        "input": "python pretty print tuple",
        "output": "",
        "rule": [
            "d11470"
        ]
    },
    {
        "instruction": "",
        "id": "q11471",
        "input": "how to impute missing data python",
        "output": "",
        "rule": [
            "d11471"
        ]
    },
    {
        "instruction": "",
        "id": "q11472",
        "input": "python pretty print write",
        "output": "",
        "rule": [
            "d11472"
        ]
    },
    {
        "instruction": "",
        "id": "q11473",
        "input": "python prettytable column headers in multiple rows",
        "output": "",
        "rule": [
            "d11473"
        ]
    },
    {
        "instruction": "",
        "id": "q11474",
        "input": "how to indicate a sum of a column in python",
        "output": "",
        "rule": [
            "d11474"
        ]
    },
    {
        "instruction": "",
        "id": "q11475",
        "input": "python prettytable horizontal line",
        "output": "",
        "rule": [
            "d11475"
        ]
    },
    {
        "instruction": "",
        "id": "q11476",
        "input": "how to initialize an empty array of 10 length in python",
        "output": "",
        "rule": [
            "d11476"
        ]
    },
    {
        "instruction": "",
        "id": "q11477",
        "input": "python print \\033 cursor",
        "output": "",
        "rule": [
            "d11477"
        ]
    },
    {
        "instruction": "",
        "id": "q11478",
        "input": "how to invert a dictionary in python with multiple keys",
        "output": "",
        "rule": [
            "d11478"
        ]
    },
    {
        "instruction": "",
        "id": "q11479",
        "input": "python print all environment variables",
        "output": "",
        "rule": [
            "d11479"
        ]
    },
    {
        "instruction": "",
        "id": "q11480",
        "input": "how to iterate on multiple iterator in python",
        "output": "",
        "rule": [
            "d11480"
        ]
    },
    {
        "instruction": "",
        "id": "q11481",
        "input": "python print centered text",
        "output": "",
        "rule": [
            "d11481"
        ]
    },
    {
        "instruction": "",
        "id": "q11482",
        "input": "how to iterate through multiple folders in python",
        "output": "",
        "rule": [
            "d11482"
        ]
    },
    {
        "instruction": "",
        "id": "q11483",
        "input": "python print entire dictionary without ellipses",
        "output": "",
        "rule": [
            "d11483"
        ]
    },
    {
        "instruction": "",
        "id": "q11484",
        "input": "python print function trace",
        "output": "",
        "rule": [
            "d11484"
        ]
    },
    {
        "instruction": "",
        "id": "q11485",
        "input": "how to join two masked arrays in python",
        "output": "",
        "rule": [
            "d11485"
        ]
    },
    {
        "instruction": "",
        "id": "q11486",
        "input": "python print help message",
        "output": "",
        "rule": [
            "d11486"
        ]
    },
    {
        "instruction": "",
        "id": "q11487",
        "input": "how to jump to the end of a line in python",
        "output": "",
        "rule": [
            "d11487"
        ]
    },
    {
        "instruction": "",
        "id": "q11488",
        "input": "python print item appended to list",
        "output": "",
        "rule": [
            "d11488"
        ]
    },
    {
        "instruction": "",
        "id": "q11489",
        "input": "how to keep pivotable index in python df",
        "output": "",
        "rule": [
            "d11489"
        ]
    },
    {
        "instruction": "",
        "id": "q11490",
        "input": "python print object to a string",
        "output": "",
        "rule": [
            "d11490"
        ]
    },
    {
        "instruction": "",
        "id": "q11491",
        "input": "how to know if an array is empty in python",
        "output": "",
        "rule": [
            "d11491"
        ]
    },
    {
        "instruction": "",
        "id": "q11492",
        "input": "python print object with precision",
        "output": "",
        "rule": [
            "d11492"
        ]
    },
    {
        "instruction": "",
        "id": "q11493",
        "input": "python print on string with newline",
        "output": "",
        "rule": [
            "d11493"
        ]
    },
    {
        "instruction": "",
        "id": "q11494",
        "input": "python print optionparser help",
        "output": "",
        "rule": [
            "d11494"
        ]
    },
    {
        "instruction": "",
        "id": "q11495",
        "input": "python print shape of tensor",
        "output": "",
        "rule": [
            "d11495"
        ]
    },
    {
        "instruction": "",
        "id": "q11496",
        "input": "how to list in array format in python",
        "output": "",
        "rule": [
            "d11496"
        ]
    },
    {
        "instruction": "",
        "id": "q11497",
        "input": "python print values for specified columns",
        "output": "",
        "rule": [
            "d11497"
        ]
    },
    {
        "instruction": "",
        "id": "q11498",
        "input": "how to list the levels of a categorical variable in python",
        "output": "",
        "rule": [
            "d11498"
        ]
    },
    {
        "instruction": "",
        "id": "q11499",
        "input": "python printing dictionary in single quotes instead of double quotes",
        "output": "",
        "rule": [
            "d11499"
        ]
    },
    {
        "instruction": "",
        "id": "q11500",
        "input": "python process memory usage stats",
        "output": "",
        "rule": [
            "d11500"
        ]
    },
    {
        "instruction": "",
        "id": "q11501",
        "input": "how to load text file to python",
        "output": "",
        "rule": [
            "d11501"
        ]
    },
    {
        "instruction": "",
        "id": "q11502",
        "input": "python proper way to get access token",
        "output": "",
        "rule": [
            "d11502"
        ]
    },
    {
        "instruction": "",
        "id": "q11503",
        "input": "how to locate indices based on value in python",
        "output": "",
        "rule": [
            "d11503"
        ]
    },
    {
        "instruction": "",
        "id": "q11504",
        "input": "python property change event",
        "output": "",
        "rule": [
            "d11504"
        ]
    },
    {
        "instruction": "",
        "id": "q11505",
        "input": "how to locate python executable file on windows",
        "output": "",
        "rule": [
            "d11505"
        ]
    },
    {
        "instruction": "",
        "id": "q11506",
        "input": "python property with container",
        "output": "",
        "rule": [
            "d11506"
        ]
    },
    {
        "instruction": "",
        "id": "q11507",
        "input": "how to lowercase text in python",
        "output": "",
        "rule": [
            "d11507"
        ]
    },
    {
        "instruction": "",
        "id": "q11508",
        "input": "python proxy objects iterable",
        "output": "",
        "rule": [
            "d11508"
        ]
    },
    {
        "instruction": "",
        "id": "q11509",
        "input": "how to make 80th percentile on python histogram",
        "output": "",
        "rule": [
            "d11509"
        ]
    },
    {
        "instruction": "",
        "id": "q11510",
        "input": "python pull image from url",
        "output": "",
        "rule": [
            "d11510"
        ]
    },
    {
        "instruction": "",
        "id": "q11511",
        "input": "python pull tables from sql database",
        "output": "",
        "rule": [
            "d11511"
        ]
    },
    {
        "instruction": "",
        "id": "q11512",
        "input": "how to make a default arguement in function python",
        "output": "",
        "rule": [
            "d11512"
        ]
    },
    {
        "instruction": "",
        "id": "q11513",
        "input": "python push to history undo",
        "output": "",
        "rule": [
            "d11513"
        ]
    },
    {
        "instruction": "",
        "id": "q11514",
        "input": "how to make a dictionary from a string file python",
        "output": "",
        "rule": [
            "d11514"
        ]
    },
    {
        "instruction": "",
        "id": "q11515",
        "input": "python put variables in a matrix",
        "output": "",
        "rule": [
            "d11515"
        ]
    },
    {
        "instruction": "",
        "id": "q11516",
        "input": "how to make a file open at a specific time with python",
        "output": "",
        "rule": [
            "d11516"
        ]
    },
    {
        "instruction": "",
        "id": "q11517",
        "input": "python pykeyboard arrow key",
        "output": "",
        "rule": [
            "d11517"
        ]
    },
    {
        "instruction": "",
        "id": "q11518",
        "input": "how to make a function iterable python",
        "output": "",
        "rule": [
            "d11518"
        ]
    },
    {
        "instruction": "",
        "id": "q11519",
        "input": "python pymongo change field value",
        "output": "",
        "rule": [
            "d11519"
        ]
    },
    {
        "instruction": "",
        "id": "q11520",
        "input": "how to make a list into a dictionary in python",
        "output": "",
        "rule": [
            "d11520"
        ]
    },
    {
        "instruction": "",
        "id": "q11521",
        "input": "python pyodbc get value by column name",
        "output": "",
        "rule": [
            "d11521"
        ]
    },
    {
        "instruction": "",
        "id": "q11522",
        "input": "how to make a list of a given size without inputs in python",
        "output": "",
        "rule": [
            "d11522"
        ]
    },
    {
        "instruction": "",
        "id": "q11523",
        "input": "python pypdf2 read document",
        "output": "",
        "rule": [
            "d11523"
        ]
    },
    {
        "instruction": "",
        "id": "q11524",
        "input": "how to make a norm distribution in python",
        "output": "",
        "rule": [
            "d11524"
        ]
    },
    {
        "instruction": "",
        "id": "q11525",
        "input": "python qcombobox change index not firing event",
        "output": "",
        "rule": [
            "d11525"
        ]
    },
    {
        "instruction": "",
        "id": "q11526",
        "input": "how to make a username and password on python",
        "output": "",
        "rule": [
            "d11526"
        ]
    },
    {
        "instruction": "",
        "id": "q11527",
        "input": "python querystring value not there",
        "output": "",
        "rule": [
            "d11527"
        ]
    },
    {
        "instruction": "",
        "id": "q11528",
        "input": "how to make an array of one element in python",
        "output": "",
        "rule": [
            "d11528"
        ]
    },
    {
        "instruction": "",
        "id": "q11529",
        "input": "python quotion mark and single quote",
        "output": "",
        "rule": [
            "d11529"
        ]
    },
    {
        "instruction": "",
        "id": "q11530",
        "input": "how to make an error message in python",
        "output": "",
        "rule": [
            "d11530"
        ]
    },
    {
        "instruction": "",
        "id": "q11531",
        "input": "python rabbitmq channel reconnect",
        "output": "",
        "rule": [
            "d11531"
        ]
    },
    {
        "instruction": "",
        "id": "q11532",
        "input": "how to make astype list python",
        "output": "",
        "rule": [
            "d11532"
        ]
    },
    {
        "instruction": "",
        "id": "q11533",
        "input": "python raise original but with different type",
        "output": "",
        "rule": [
            "d11533"
        ]
    },
    {
        "instruction": "",
        "id": "q11534",
        "input": "how to make matrix sparse python",
        "output": "",
        "rule": [
            "d11534"
        ]
    },
    {
        "instruction": "",
        "id": "q11535",
        "input": "python raise without try",
        "output": "",
        "rule": [
            "d11535"
        ]
    },
    {
        "instruction": "",
        "id": "q11536",
        "input": "how to make method into decoractor in python",
        "output": "",
        "rule": [
            "d11536"
        ]
    },
    {
        "instruction": "",
        "id": "q11537",
        "input": "python raising to a power using for loop",
        "output": "",
        "rule": [
            "d11537"
        ]
    },
    {
        "instruction": "",
        "id": "q11538",
        "input": "how to make multi lined code in python",
        "output": "",
        "rule": [
            "d11538"
        ]
    },
    {
        "instruction": "",
        "id": "q11539",
        "input": "python random pseudo gaussian noise",
        "output": "",
        "rule": [
            "d11539"
        ]
    },
    {
        "instruction": "",
        "id": "q11540",
        "input": "how to make python into binding",
        "output": "",
        "rule": [
            "d11540"
        ]
    },
    {
        "instruction": "",
        "id": "q11541",
        "input": "how to make sprites move up and down in python",
        "output": "",
        "rule": [
            "d11541"
        ]
    },
    {
        "instruction": "",
        "id": "q11542",
        "input": "python random tuple between min and max",
        "output": "",
        "rule": [
            "d11542"
        ]
    },
    {
        "instruction": "",
        "id": "q11543",
        "input": "how to make text widget scrollable in python",
        "output": "",
        "rule": [
            "d11543"
        ]
    },
    {
        "instruction": "",
        "id": "q11544",
        "input": "python read a geojson file",
        "output": "",
        "rule": [
            "d11544"
        ]
    },
    {
        "instruction": "",
        "id": "q11545",
        "input": "how to make the legend box outside python",
        "output": "",
        "rule": [
            "d11545"
        ]
    },
    {
        "instruction": "",
        "id": "q11546",
        "input": "python read a yml file",
        "output": "",
        "rule": [
            "d11546"
        ]
    },
    {
        "instruction": "",
        "id": "q11547",
        "input": "how to make the python garbage collector run",
        "output": "",
        "rule": [
            "d11547"
        ]
    },
    {
        "instruction": "",
        "id": "q11548",
        "input": "python read big and little endian",
        "output": "",
        "rule": [
            "d11548"
        ]
    },
    {
        "instruction": "",
        "id": "q11549",
        "input": "how to make toggle button in python",
        "output": "",
        "rule": [
            "d11549"
        ]
    },
    {
        "instruction": "",
        "id": "q11550",
        "input": "python read config, yaml",
        "output": "",
        "rule": [
            "d11550"
        ]
    },
    {
        "instruction": "",
        "id": "q11551",
        "input": "how to manually apply image filter in python",
        "output": "",
        "rule": [
            "d11551"
        ]
    },
    {
        "instruction": "",
        "id": "q11552",
        "input": "how to measure execution time of python function",
        "output": "",
        "rule": [
            "d11552"
        ]
    },
    {
        "instruction": "",
        "id": "q11553",
        "input": "python read file 'int' object is not callable",
        "output": "",
        "rule": [
            "d11553"
        ]
    },
    {
        "instruction": "",
        "id": "q11554",
        "input": "how to merge cells in python",
        "output": "",
        "rule": [
            "d11554"
        ]
    },
    {
        "instruction": "",
        "id": "q11555",
        "input": "python read file as 0's and 1's",
        "output": "",
        "rule": [
            "d11555"
        ]
    },
    {
        "instruction": "",
        "id": "q11556",
        "input": "how to modify tensorflow lite c++ to python",
        "output": "",
        "rule": [
            "d11556"
        ]
    },
    {
        "instruction": "",
        "id": "q11557",
        "input": "how to mount connection string externally for he docker in python",
        "output": "",
        "rule": [
            "d11557"
        ]
    },
    {
        "instruction": "",
        "id": "q11558",
        "input": "python read from stdin till input stops",
        "output": "",
        "rule": [
            "d11558"
        ]
    },
    {
        "instruction": "",
        "id": "q11559",
        "input": "python read json as ordered dictionary",
        "output": "",
        "rule": [
            "d11559"
        ]
    },
    {
        "instruction": "",
        "id": "q11560",
        "input": "how to move the legend on python lower left",
        "output": "",
        "rule": [
            "d11560"
        ]
    },
    {
        "instruction": "",
        "id": "q11561",
        "input": "python read json from web",
        "output": "",
        "rule": [
            "d11561"
        ]
    },
    {
        "instruction": "",
        "id": "q11562",
        "input": "how to normalize a string in python",
        "output": "",
        "rule": [
            "d11562"
        ]
    },
    {
        "instruction": "",
        "id": "q11563",
        "input": "how to order a dictionary into keys in python",
        "output": "",
        "rule": [
            "d11563"
        ]
    },
    {
        "instruction": "",
        "id": "q11564",
        "input": "python read one fom stdin",
        "output": "",
        "rule": [
            "d11564"
        ]
    },
    {
        "instruction": "",
        "id": "q11565",
        "input": "how to pad with zero in python",
        "output": "",
        "rule": [
            "d11565"
        ]
    },
    {
        "instruction": "",
        "id": "q11566",
        "input": "python read pickle to numpy array",
        "output": "",
        "rule": [
            "d11566"
        ]
    },
    {
        "instruction": "",
        "id": "q11567",
        "input": "how to pass lists into json python",
        "output": "",
        "rule": [
            "d11567"
        ]
    },
    {
        "instruction": "",
        "id": "q11568",
        "input": "python read text file as corpus",
        "output": "",
        "rule": [
            "d11568"
        ]
    },
    {
        "instruction": "",
        "id": "q11569",
        "input": "how to pass two dynamic arguements using function in python",
        "output": "",
        "rule": [
            "d11569"
        ]
    },
    {
        "instruction": "",
        "id": "q11570",
        "input": "python read top n lines of a file",
        "output": "",
        "rule": [
            "d11570"
        ]
    },
    {
        "instruction": "",
        "id": "q11571",
        "input": "how to pickle and send over python socket",
        "output": "",
        "rule": [
            "d11571"
        ]
    },
    {
        "instruction": "",
        "id": "q11572",
        "input": "python read until end",
        "output": "",
        "rule": [
            "d11572"
        ]
    },
    {
        "instruction": "",
        "id": "q11573",
        "input": "how to pop a value off an stack that is a fixed array in python 3",
        "output": "",
        "rule": [
            "d11573"
        ]
    },
    {
        "instruction": "",
        "id": "q11574",
        "input": "python read windows clipboard",
        "output": "",
        "rule": [
            "d11574"
        ]
    },
    {
        "instruction": "",
        "id": "q11575",
        "input": "how to print an objects attributes python",
        "output": "",
        "rule": [
            "d11575"
        ]
    },
    {
        "instruction": "",
        "id": "q11576",
        "input": "python read words to list in lowercase",
        "output": "",
        "rule": [
            "d11576"
        ]
    },
    {
        "instruction": "",
        "id": "q11577",
        "input": "how to print only one return value in python",
        "output": "",
        "rule": [
            "d11577"
        ]
    },
    {
        "instruction": "",
        "id": "q11578",
        "input": "python received a naive datetime",
        "output": "",
        "rule": [
            "d11578"
        ]
    },
    {
        "instruction": "",
        "id": "q11579",
        "input": "how to print out help in python",
        "output": "",
        "rule": [
            "d11579"
        ]
    },
    {
        "instruction": "",
        "id": "q11580",
        "input": "python recursive schema validation",
        "output": "",
        "rule": [
            "d11580"
        ]
    },
    {
        "instruction": "",
        "id": "q11581",
        "input": "how to print outputs to python cmd window",
        "output": "",
        "rule": [
            "d11581"
        ]
    },
    {
        "instruction": "",
        "id": "q11582",
        "input": "python recursively flatten a list",
        "output": "",
        "rule": [
            "d11582"
        ]
    },
    {
        "instruction": "",
        "id": "q11583",
        "input": "how to print something bold in python",
        "output": "",
        "rule": [
            "d11583"
        ]
    },
    {
        "instruction": "",
        "id": "q11584",
        "input": "python recursively replace multiple list of text",
        "output": "",
        "rule": [
            "d11584"
        ]
    },
    {
        "instruction": "",
        "id": "q11585",
        "input": "how to print text with different color python",
        "output": "",
        "rule": [
            "d11585"
        ]
    },
    {
        "instruction": "",
        "id": "q11586",
        "input": "python redis all keys with a prefix",
        "output": "",
        "rule": [
            "d11586"
        ]
    },
    {
        "instruction": "",
        "id": "q11587",
        "input": "how to print top 5 rows of data frame in python",
        "output": "",
        "rule": [
            "d11587"
        ]
    },
    {
        "instruction": "",
        "id": "q11588",
        "input": "python redis list pop",
        "output": "",
        "rule": [
            "d11588"
        ]
    },
    {
        "instruction": "",
        "id": "q11589",
        "input": "how to produce confusion matrix in python",
        "output": "",
        "rule": [
            "d11589"
        ]
    },
    {
        "instruction": "",
        "id": "q11590",
        "input": "python redis lpush fixed siz",
        "output": "",
        "rule": [
            "d11590"
        ]
    },
    {
        "instruction": "",
        "id": "q11591",
        "input": "how to profile object memory python3",
        "output": "",
        "rule": [
            "d11591"
        ]
    },
    {
        "instruction": "",
        "id": "q11592",
        "input": "python redis multi subscriber only one",
        "output": "",
        "rule": [
            "d11592"
        ]
    },
    {
        "instruction": "",
        "id": "q11593",
        "input": "how to push an object into a list python",
        "output": "",
        "rule": [
            "d11593"
        ]
    },
    {
        "instruction": "",
        "id": "q11594",
        "input": "python regex capital a to lowercase z",
        "output": "",
        "rule": [
            "d11594"
        ]
    },
    {
        "instruction": "",
        "id": "q11595",
        "input": "how to put an exit button in python",
        "output": "",
        "rule": [
            "d11595"
        ]
    },
    {
        "instruction": "",
        "id": "q11596",
        "input": "python regex extract domain",
        "output": "",
        "rule": [
            "d11596"
        ]
    },
    {
        "instruction": "",
        "id": "q11597",
        "input": "python regex password validation",
        "output": "",
        "rule": [
            "d11597"
        ]
    },
    {
        "instruction": "",
        "id": "q11598",
        "input": "how to put multable arrays into 1 array python",
        "output": "",
        "rule": [
            "d11598"
        ]
    },
    {
        "instruction": "",
        "id": "q11599",
        "input": "python regex replace with lowercase",
        "output": "",
        "rule": [
            "d11599"
        ]
    },
    {
        "instruction": "",
        "id": "q11600",
        "input": "how to query an url in python and write the json to file",
        "output": "",
        "rule": [
            "d11600"
        ]
    },
    {
        "instruction": "",
        "id": "q11601",
        "input": "python regex replace with match count",
        "output": "",
        "rule": [
            "d11601"
        ]
    },
    {
        "instruction": "",
        "id": "q11602",
        "input": "how to raise value error in python constructor",
        "output": "",
        "rule": [
            "d11602"
        ]
    },
    {
        "instruction": "",
        "id": "q11603",
        "input": "how to read a scale as a number python",
        "output": "",
        "rule": [
            "d11603"
        ]
    },
    {
        "instruction": "",
        "id": "q11604",
        "input": "python relative path from",
        "output": "",
        "rule": [
            "d11604"
        ]
    },
    {
        "instruction": "",
        "id": "q11605",
        "input": "how to read date strings in python",
        "output": "",
        "rule": [
            "d11605"
        ]
    },
    {
        "instruction": "",
        "id": "q11606",
        "input": "python remane multi index",
        "output": "",
        "rule": [
            "d11606"
        ]
    },
    {
        "instruction": "",
        "id": "q11607",
        "input": "python remove accents from arabic",
        "output": "",
        "rule": [
            "d11607"
        ]
    },
    {
        "instruction": "",
        "id": "q11608",
        "input": "how to read pickle data in python",
        "output": "",
        "rule": [
            "d11608"
        ]
    },
    {
        "instruction": "",
        "id": "q11609",
        "input": "python remove accents from letters",
        "output": "",
        "rule": [
            "d11609"
        ]
    },
    {
        "instruction": "",
        "id": "q11610",
        "input": "how to read text from url in python",
        "output": "",
        "rule": [
            "d11610"
        ]
    },
    {
        "instruction": "",
        "id": "q11611",
        "input": "python remove all empty entries form list",
        "output": "",
        "rule": [
            "d11611"
        ]
    },
    {
        "instruction": "",
        "id": "q11612",
        "input": "how to read utf8 in python",
        "output": "",
        "rule": [
            "d11612"
        ]
    },
    {
        "instruction": "",
        "id": "q11613",
        "input": "python remove an object to free memory",
        "output": "",
        "rule": [
            "d11613"
        ]
    },
    {
        "instruction": "",
        "id": "q11614",
        "input": "how to read xml file in python",
        "output": "",
        "rule": [
            "d11614"
        ]
    },
    {
        "instruction": "",
        "id": "q11615",
        "input": "python remove axis frame",
        "output": "",
        "rule": [
            "d11615"
        ]
    },
    {
        "instruction": "",
        "id": "q11616",
        "input": "how to redefine a method python overload",
        "output": "",
        "rule": [
            "d11616"
        ]
    },
    {
        "instruction": "",
        "id": "q11617",
        "input": "how to refer to excel column in python xlrd",
        "output": "",
        "rule": [
            "d11617"
        ]
    },
    {
        "instruction": "",
        "id": "q11618",
        "input": "python remove duplicates from list of files",
        "output": "",
        "rule": [
            "d11618"
        ]
    },
    {
        "instruction": "",
        "id": "q11619",
        "input": "how to remove a index in python3",
        "output": "",
        "rule": [
            "d11619"
        ]
    },
    {
        "instruction": "",
        "id": "q11620",
        "input": "python remove extra spaces in a string",
        "output": "",
        "rule": [
            "d11620"
        ]
    },
    {
        "instruction": "",
        "id": "q11621",
        "input": "how to remove all the punctuations in text in python",
        "output": "",
        "rule": [
            "d11621"
        ]
    },
    {
        "instruction": "",
        "id": "q11622",
        "input": "python remove file after read stream",
        "output": "",
        "rule": [
            "d11622"
        ]
    },
    {
        "instruction": "",
        "id": "q11623",
        "input": "python remove first element from list of dictionary",
        "output": "",
        "rule": [
            "d11623"
        ]
    },
    {
        "instruction": "",
        "id": "q11624",
        "input": "how to remove comma from python string",
        "output": "",
        "rule": [
            "d11624"
        ]
    },
    {
        "instruction": "",
        "id": "q11625",
        "input": "python remove last element from a stack",
        "output": "",
        "rule": [
            "d11625"
        ]
    },
    {
        "instruction": "",
        "id": "q11626",
        "input": "how to remove from a specific index python",
        "output": "",
        "rule": [
            "d11626"
        ]
    },
    {
        "instruction": "",
        "id": "q11627",
        "input": "python remove odd mark in twitter",
        "output": "",
        "rule": [
            "d11627"
        ]
    },
    {
        "instruction": "",
        "id": "q11628",
        "input": "how to remove fullstop in a string in python",
        "output": "",
        "rule": [
            "d11628"
        ]
    },
    {
        "instruction": "",
        "id": "q11629",
        "input": "python remove parenthesis around stringf",
        "output": "",
        "rule": [
            "d11629"
        ]
    },
    {
        "instruction": "",
        "id": "q11630",
        "input": "how to remove object from list python",
        "output": "",
        "rule": [
            "d11630"
        ]
    },
    {
        "instruction": "",
        "id": "q11631",
        "input": "python remove rows with empty values in a column",
        "output": "",
        "rule": [
            "d11631"
        ]
    },
    {
        "instruction": "",
        "id": "q11632",
        "input": "how to remove space from keys of a dictonary in python3",
        "output": "",
        "rule": [
            "d11632"
        ]
    },
    {
        "instruction": "",
        "id": "q11633",
        "input": "python remove zeros from list",
        "output": "",
        "rule": [
            "d11633"
        ]
    },
    {
        "instruction": "",
        "id": "q11634",
        "input": "how to remove spaces between words in python string",
        "output": "",
        "rule": [
            "d11634"
        ]
    },
    {
        "instruction": "",
        "id": "q11635",
        "input": "python removing one element from a list would make the list ascending",
        "output": "",
        "rule": [
            "d11635"
        ]
    },
    {
        "instruction": "",
        "id": "q11636",
        "input": "how to remove the last comma from a string in python string",
        "output": "",
        "rule": [
            "d11636"
        ]
    },
    {
        "instruction": "",
        "id": "q11637",
        "input": "python reorder list based on list of indices",
        "output": "",
        "rule": [
            "d11637"
        ]
    },
    {
        "instruction": "",
        "id": "q11638",
        "input": "how to replace multiple substring from a string in python",
        "output": "",
        "rule": [
            "d11638"
        ]
    },
    {
        "instruction": "",
        "id": "q11639",
        "input": "how to replace placeholder in a string in python",
        "output": "",
        "rule": [
            "d11639"
        ]
    },
    {
        "instruction": "",
        "id": "q11640",
        "input": "python replace case sensitive",
        "output": "",
        "rule": [
            "d11640"
        ]
    },
    {
        "instruction": "",
        "id": "q11641",
        "input": "how to replace underscores with whitespace, python",
        "output": "",
        "rule": [
            "d11641"
        ]
    },
    {
        "instruction": "",
        "id": "q11642",
        "input": "python replace characters in between % %",
        "output": "",
        "rule": [
            "d11642"
        ]
    },
    {
        "instruction": "",
        "id": "q11643",
        "input": "how to reset the file pointer in python",
        "output": "",
        "rule": [
            "d11643"
        ]
    },
    {
        "instruction": "",
        "id": "q11644",
        "input": "python replace first n occurrence in string",
        "output": "",
        "rule": [
            "d11644"
        ]
    },
    {
        "instruction": "",
        "id": "q11645",
        "input": "how to return a match substring in python",
        "output": "",
        "rule": [
            "d11645"
        ]
    },
    {
        "instruction": "",
        "id": "q11646",
        "input": "python replace in place string",
        "output": "",
        "rule": [
            "d11646"
        ]
    },
    {
        "instruction": "",
        "id": "q11647",
        "input": "how to return current date and time in python",
        "output": "",
        "rule": [
            "d11647"
        ]
    },
    {
        "instruction": "",
        "id": "q11648",
        "input": "python replace many strings",
        "output": "",
        "rule": [
            "d11648"
        ]
    },
    {
        "instruction": "",
        "id": "q11649",
        "input": "how to return month number python",
        "output": "",
        "rule": [
            "d11649"
        ]
    },
    {
        "instruction": "",
        "id": "q11650",
        "input": "python replace numpy missing values nan",
        "output": "",
        "rule": [
            "d11650"
        ]
    },
    {
        "instruction": "",
        "id": "q11651",
        "input": "how to round and a number in python",
        "output": "",
        "rule": [
            "d11651"
        ]
    },
    {
        "instruction": "",
        "id": "q11652",
        "input": "python replace regex hash comment",
        "output": "",
        "rule": [
            "d11652"
        ]
    },
    {
        "instruction": "",
        "id": "q11653",
        "input": "how to run a bash script through python",
        "output": "",
        "rule": [
            "d11653"
        ]
    },
    {
        "instruction": "",
        "id": "q11654",
        "input": "python request session change user agent",
        "output": "",
        "rule": [
            "d11654"
        ]
    },
    {
        "instruction": "",
        "id": "q11655",
        "input": "how to run python script in jupytor",
        "output": "",
        "rule": [
            "d11655"
        ]
    },
    {
        "instruction": "",
        "id": "q11656",
        "input": "python requests disable ssl verification not working",
        "output": "",
        "rule": [
            "d11656"
        ]
    },
    {
        "instruction": "",
        "id": "q11657",
        "input": "how to save a python file as a zip",
        "output": "",
        "rule": [
            "d11657"
        ]
    },
    {
        "instruction": "",
        "id": "q11658",
        "input": "python reset clear variable explorer",
        "output": "",
        "rule": [
            "d11658"
        ]
    },
    {
        "instruction": "",
        "id": "q11659",
        "input": "how to save a string to file in python",
        "output": "",
        "rule": [
            "d11659"
        ]
    },
    {
        "instruction": "",
        "id": "q11660",
        "input": "python reshape 1x25 to 5x5",
        "output": "",
        "rule": [
            "d11660"
        ]
    },
    {
        "instruction": "",
        "id": "q11661",
        "input": "how to save contents of a variable to a file python",
        "output": "",
        "rule": [
            "d11661"
        ]
    },
    {
        "instruction": "",
        "id": "q11662",
        "input": "python resize image aspect",
        "output": "",
        "rule": [
            "d11662"
        ]
    },
    {
        "instruction": "",
        "id": "q11663",
        "input": "how to say yes in a input in python",
        "output": "",
        "rule": [
            "d11663"
        ]
    },
    {
        "instruction": "",
        "id": "q11664",
        "input": "python resize image maintaining aspect ratio",
        "output": "",
        "rule": [
            "d11664"
        ]
    },
    {
        "instruction": "",
        "id": "q11665",
        "input": "how to see if two python arrays are equal",
        "output": "",
        "rule": [
            "d11665"
        ]
    },
    {
        "instruction": "",
        "id": "q11666",
        "input": "python respond to interrupt ctrl+c",
        "output": "",
        "rule": [
            "d11666"
        ]
    },
    {
        "instruction": "",
        "id": "q11667",
        "input": "how to see members of a group hdf5 python",
        "output": "",
        "rule": [
            "d11667"
        ]
    },
    {
        "instruction": "",
        "id": "q11668",
        "input": "python respond to prompt",
        "output": "",
        "rule": [
            "d11668"
        ]
    },
    {
        "instruction": "",
        "id": "q11669",
        "input": "how to see out a vector python",
        "output": "",
        "rule": [
            "d11669"
        ]
    },
    {
        "instruction": "",
        "id": "q11670",
        "input": "python respose to json",
        "output": "",
        "rule": [
            "d11670"
        ]
    },
    {
        "instruction": "",
        "id": "q11671",
        "input": "how to select percentile range of a dataset in python",
        "output": "",
        "rule": [
            "d11671"
        ]
    },
    {
        "instruction": "",
        "id": "q11672",
        "input": "python restful services calling not automate",
        "output": "",
        "rule": [
            "d11672"
        ]
    },
    {
        "instruction": "",
        "id": "q11673",
        "input": "how to send a string in output stream python",
        "output": "",
        "rule": [
            "d11673"
        ]
    },
    {
        "instruction": "",
        "id": "q11674",
        "input": "python retrieve string from file",
        "output": "",
        "rule": [
            "d11674"
        ]
    },
    {
        "instruction": "",
        "id": "q11675",
        "input": "how to set a default spacing in python",
        "output": "",
        "rule": [
            "d11675"
        ]
    },
    {
        "instruction": "",
        "id": "q11676",
        "input": "python return average growth in year span",
        "output": "",
        "rule": [
            "d11676"
        ]
    },
    {
        "instruction": "",
        "id": "q11677",
        "input": "how to set an image as background in python",
        "output": "",
        "rule": [
            "d11677"
        ]
    },
    {
        "instruction": "",
        "id": "q11678",
        "input": "python return index of list item",
        "output": "",
        "rule": [
            "d11678"
        ]
    },
    {
        "instruction": "",
        "id": "q11679",
        "input": "how to set y axis as log python",
        "output": "",
        "rule": [
            "d11679"
        ]
    },
    {
        "instruction": "",
        "id": "q11680",
        "input": "python return index of match in string list",
        "output": "",
        "rule": [
            "d11680"
        ]
    },
    {
        "instruction": "",
        "id": "q11681",
        "input": "python return last item of queryset",
        "output": "",
        "rule": [
            "d11681"
        ]
    },
    {
        "instruction": "",
        "id": "q11682",
        "input": "how to show plot after plotting python",
        "output": "",
        "rule": [
            "d11682"
        ]
    },
    {
        "instruction": "",
        "id": "q11683",
        "input": "python return list index if string",
        "output": "",
        "rule": [
            "d11683"
        ]
    },
    {
        "instruction": "",
        "id": "q11684",
        "input": "how to show the plot in python",
        "output": "",
        "rule": [
            "d11684"
        ]
    },
    {
        "instruction": "",
        "id": "q11685",
        "input": "python return property objectno not value",
        "output": "",
        "rule": [
            "d11685"
        ]
    },
    {
        "instruction": "",
        "id": "q11686",
        "input": "how to show time complexity python",
        "output": "",
        "rule": [
            "d11686"
        ]
    },
    {
        "instruction": "",
        "id": "q11687",
        "input": "python return range of array",
        "output": "",
        "rule": [
            "d11687"
        ]
    },
    {
        "instruction": "",
        "id": "q11688",
        "input": "how to shuffle the array in python",
        "output": "",
        "rule": [
            "d11688"
        ]
    },
    {
        "instruction": "",
        "id": "q11689",
        "input": "python reverse iterator map",
        "output": "",
        "rule": [
            "d11689"
        ]
    },
    {
        "instruction": "",
        "id": "q11690",
        "input": "how to singularize vector python",
        "output": "",
        "rule": [
            "d11690"
        ]
    },
    {
        "instruction": "",
        "id": "q11691",
        "input": "python rewind file inside with",
        "output": "",
        "rule": [
            "d11691"
        ]
    },
    {
        "instruction": "",
        "id": "q11692",
        "input": "python rotate transform 3d coordinates",
        "output": "",
        "rule": [
            "d11692"
        ]
    },
    {
        "instruction": "",
        "id": "q11693",
        "input": "how to slice in python stack overflow",
        "output": "",
        "rule": [
            "d11693"
        ]
    },
    {
        "instruction": "",
        "id": "q11694",
        "input": "python rotation matrix to rotation vector",
        "output": "",
        "rule": [
            "d11694"
        ]
    },
    {
        "instruction": "",
        "id": "q11695",
        "input": "how to sort a numpy array and store the index od descending value in python",
        "output": "",
        "rule": [
            "d11695"
        ]
    },
    {
        "instruction": "",
        "id": "q11696",
        "input": "python round down float to integer",
        "output": "",
        "rule": [
            "d11696"
        ]
    },
    {
        "instruction": "",
        "id": "q11697",
        "input": "how to sort data in python based on column values",
        "output": "",
        "rule": [
            "d11697"
        ]
    },
    {
        "instruction": "",
        "id": "q11698",
        "input": "python rq get job finished percemtwge",
        "output": "",
        "rule": [
            "d11698"
        ]
    },
    {
        "instruction": "",
        "id": "q11699",
        "input": "how to sort items in a key python",
        "output": "",
        "rule": [
            "d11699"
        ]
    },
    {
        "instruction": "",
        "id": "q11700",
        "input": "python run external command in background",
        "output": "",
        "rule": [
            "d11700"
        ]
    },
    {
        "instruction": "",
        "id": "q11701",
        "input": "how to sort mapped objects in python",
        "output": "",
        "rule": [
            "d11701"
        ]
    },
    {
        "instruction": "",
        "id": "q11702",
        "input": "python run sync function in async function",
        "output": "",
        "rule": [
            "d11702"
        ]
    },
    {
        "instruction": "",
        "id": "q11703",
        "input": "how to sort objects in a set python",
        "output": "",
        "rule": [
            "d11703"
        ]
    },
    {
        "instruction": "",
        "id": "q11704",
        "input": "python sanitize path windows",
        "output": "",
        "rule": [
            "d11704"
        ]
    },
    {
        "instruction": "",
        "id": "q11705",
        "input": "how to specifiy width in format python",
        "output": "",
        "rule": [
            "d11705"
        ]
    },
    {
        "instruction": "",
        "id": "q11706",
        "input": "python save a variable to file",
        "output": "",
        "rule": [
            "d11706"
        ]
    },
    {
        "instruction": "",
        "id": "q11707",
        "input": "how to specify domain name resolution in python",
        "output": "",
        "rule": [
            "d11707"
        ]
    },
    {
        "instruction": "",
        "id": "q11708",
        "input": "python save array as compressed array",
        "output": "",
        "rule": [
            "d11708"
        ]
    },
    {
        "instruction": "",
        "id": "q11709",
        "input": "how to specify first elment of series python",
        "output": "",
        "rule": [
            "d11709"
        ]
    },
    {
        "instruction": "",
        "id": "q11710",
        "input": "python save graph to file",
        "output": "",
        "rule": [
            "d11710"
        ]
    },
    {
        "instruction": "",
        "id": "q11711",
        "input": "how to specify the number of digits in python floats",
        "output": "",
        "rule": [
            "d11711"
        ]
    },
    {
        "instruction": "",
        "id": "q11712",
        "input": "python save keras model",
        "output": "",
        "rule": [
            "d11712"
        ]
    },
    {
        "instruction": "",
        "id": "q11713",
        "input": "how to specify type in python",
        "output": "",
        "rule": [
            "d11713"
        ]
    },
    {
        "instruction": "",
        "id": "q11714",
        "input": "python save url image to local",
        "output": "",
        "rule": [
            "d11714"
        ]
    },
    {
        "instruction": "",
        "id": "q11715",
        "input": "how to splice a confusion matrix python sklearn",
        "output": "",
        "rule": [
            "d11715"
        ]
    },
    {
        "instruction": "",
        "id": "q11716",
        "input": "python scale down an image",
        "output": "",
        "rule": [
            "d11716"
        ]
    },
    {
        "instruction": "",
        "id": "q11717",
        "input": "how to split a list into unequal size chunks python",
        "output": "",
        "rule": [
            "d11717"
        ]
    },
    {
        "instruction": "",
        "id": "q11718",
        "input": "python scipy matplotlib multiple regression def",
        "output": "",
        "rule": [
            "d11718"
        ]
    },
    {
        "instruction": "",
        "id": "q11719",
        "input": "python script for running hive query",
        "output": "",
        "rule": [
            "d11719"
        ]
    },
    {
        "instruction": "",
        "id": "q11720",
        "input": "how to stop python execution externally",
        "output": "",
        "rule": [
            "d11720"
        ]
    },
    {
        "instruction": "",
        "id": "q11721",
        "input": "python script to load json files into mongodb",
        "output": "",
        "rule": [
            "d11721"
        ]
    },
    {
        "instruction": "",
        "id": "q11722",
        "input": "how to stop python service",
        "output": "",
        "rule": [
            "d11722"
        ]
    },
    {
        "instruction": "",
        "id": "q11723",
        "input": "python script write pid",
        "output": "",
        "rule": [
            "d11723"
        ]
    },
    {
        "instruction": "",
        "id": "q11724",
        "input": "how to store my coding errors of python in logfile",
        "output": "",
        "rule": [
            "d11724"
        ]
    },
    {
        "instruction": "",
        "id": "q11725",
        "input": "python script write pid file",
        "output": "",
        "rule": [
            "d11725"
        ]
    },
    {
        "instruction": "",
        "id": "q11726",
        "input": "how to store the output of curl command in python using logger",
        "output": "",
        "rule": [
            "d11726"
        ]
    },
    {
        "instruction": "",
        "id": "q11727",
        "input": "python see if char is ready for reading",
        "output": "",
        "rule": [
            "d11727"
        ]
    },
    {
        "instruction": "",
        "id": "q11728",
        "input": "how to strip commas out and create list python\\",
        "output": "",
        "rule": [
            "d11728"
        ]
    },
    {
        "instruction": "",
        "id": "q11729",
        "input": "python select longest string in a dictionary",
        "output": "",
        "rule": [
            "d11729"
        ]
    },
    {
        "instruction": "",
        "id": "q11730",
        "input": "how to strip file of whitespace in python",
        "output": "",
        "rule": [
            "d11730"
        ]
    },
    {
        "instruction": "",
        "id": "q11731",
        "input": "python select random element from set",
        "output": "",
        "rule": [
            "d11731"
        ]
    },
    {
        "instruction": "",
        "id": "q11732",
        "input": "how to strip first word in a string before the space python",
        "output": "",
        "rule": [
            "d11732"
        ]
    },
    {
        "instruction": "",
        "id": "q11733",
        "input": "python select rows that are not null",
        "output": "",
        "rule": [
            "d11733"
        ]
    },
    {
        "instruction": "",
        "id": "q11734",
        "input": "how to strip spaces from elements of a list python",
        "output": "",
        "rule": [
            "d11734"
        ]
    },
    {
        "instruction": "",
        "id": "q11735",
        "input": "python select the last row",
        "output": "",
        "rule": [
            "d11735"
        ]
    },
    {
        "instruction": "",
        "id": "q11736",
        "input": "how to swap a lower case letter for a capitol in python",
        "output": "",
        "rule": [
            "d11736"
        ]
    },
    {
        "instruction": "",
        "id": "q11737",
        "input": "python separate upper letter with underscore",
        "output": "",
        "rule": [
            "d11737"
        ]
    },
    {
        "instruction": "",
        "id": "q11738",
        "input": "how to take fourier transform python",
        "output": "",
        "rule": [
            "d11738"
        ]
    },
    {
        "instruction": "",
        "id": "q11739",
        "input": "python seperating sentence into list",
        "output": "",
        "rule": [
            "d11739"
        ]
    },
    {
        "instruction": "",
        "id": "q11740",
        "input": "how to take global path in python",
        "output": "",
        "rule": [
            "d11740"
        ]
    },
    {
        "instruction": "",
        "id": "q11741",
        "input": "python serializers reference before define",
        "output": "",
        "rule": [
            "d11741"
        ]
    },
    {
        "instruction": "",
        "id": "q11742",
        "input": "how to take spaces out of datetime func python",
        "output": "",
        "rule": [
            "d11742"
        ]
    },
    {
        "instruction": "",
        "id": "q11743",
        "input": "python series has none",
        "output": "",
        "rule": [
            "d11743"
        ]
    },
    {
        "instruction": "",
        "id": "q11744",
        "input": "how to take the ip from my machine python",
        "output": "",
        "rule": [
            "d11744"
        ]
    },
    {
        "instruction": "",
        "id": "q11745",
        "input": "how to tell if python code is running",
        "output": "",
        "rule": [
            "d11745"
        ]
    },
    {
        "instruction": "",
        "id": "q11746",
        "input": "python set access time of file",
        "output": "",
        "rule": [
            "d11746"
        ]
    },
    {
        "instruction": "",
        "id": "q11747",
        "input": "how to tell if verbose is selected in python",
        "output": "",
        "rule": [
            "d11747"
        ]
    },
    {
        "instruction": "",
        "id": "q11748",
        "input": "python set all columns to lower",
        "output": "",
        "rule": [
            "d11748"
        ]
    },
    {
        "instruction": "",
        "id": "q11749",
        "input": "how to test null in python assert",
        "output": "",
        "rule": [
            "d11749"
        ]
    },
    {
        "instruction": "",
        "id": "q11750",
        "input": "python set form default value using request",
        "output": "",
        "rule": [
            "d11750"
        ]
    },
    {
        "instruction": "",
        "id": "q11751",
        "input": "how to trapezoidal integrate in python",
        "output": "",
        "rule": [
            "d11751"
        ]
    },
    {
        "instruction": "",
        "id": "q11752",
        "input": "python set property to magicmock",
        "output": "",
        "rule": [
            "d11752"
        ]
    },
    {
        "instruction": "",
        "id": "q11753",
        "input": "how to traspose a matrix using python",
        "output": "",
        "rule": [
            "d11753"
        ]
    },
    {
        "instruction": "",
        "id": "q11754",
        "input": "python set y axis log",
        "output": "",
        "rule": [
            "d11754"
        ]
    },
    {
        "instruction": "",
        "id": "q11755",
        "input": "how to traverse a python tree",
        "output": "",
        "rule": [
            "d11755"
        ]
    },
    {
        "instruction": "",
        "id": "q11756",
        "input": "python setting a variable to a node",
        "output": "",
        "rule": [
            "d11756"
        ]
    },
    {
        "instruction": "",
        "id": "q11757",
        "input": "how to tune the camera resolution in python",
        "output": "",
        "rule": [
            "d11757"
        ]
    },
    {
        "instruction": "",
        "id": "q11758",
        "input": "python setting specific tab width",
        "output": "",
        "rule": [
            "d11758"
        ]
    },
    {
        "instruction": "",
        "id": "q11759",
        "input": "how to turn a comma seperated string to list python",
        "output": "",
        "rule": [
            "d11759"
        ]
    },
    {
        "instruction": "",
        "id": "q11760",
        "input": "python setuptools specify dependencies",
        "output": "",
        "rule": [
            "d11760"
        ]
    },
    {
        "instruction": "",
        "id": "q11761",
        "input": "how to turn a list into a slice in python",
        "output": "",
        "rule": [
            "d11761"
        ]
    },
    {
        "instruction": "",
        "id": "q11762",
        "input": "python shape extraction from image using numpy geometric shapes",
        "output": "",
        "rule": [
            "d11762"
        ]
    },
    {
        "instruction": "",
        "id": "q11763",
        "input": "how to turn a list of string to upper case in python",
        "output": "",
        "rule": [
            "d11763"
        ]
    },
    {
        "instruction": "",
        "id": "q11764",
        "input": "python show cursor location",
        "output": "",
        "rule": [
            "d11764"
        ]
    },
    {
        "instruction": "",
        "id": "q11765",
        "input": "how to turn a str into a datetime python",
        "output": "",
        "rule": [
            "d11765"
        ]
    },
    {
        "instruction": "",
        "id": "q11766",
        "input": "python show time without colon",
        "output": "",
        "rule": [
            "d11766"
        ]
    },
    {
        "instruction": "",
        "id": "q11767",
        "input": "how to turn somethibg into an array python",
        "output": "",
        "rule": [
            "d11767"
        ]
    },
    {
        "instruction": "",
        "id": "q11768",
        "input": "python sign value numpy",
        "output": "",
        "rule": [
            "d11768"
        ]
    },
    {
        "instruction": "",
        "id": "q11769",
        "input": "how to type cast all elements in a list in python",
        "output": "",
        "rule": [
            "d11769"
        ]
    },
    {
        "instruction": "",
        "id": "q11770",
        "input": "python signed binary string to int",
        "output": "",
        "rule": [
            "d11770"
        ]
    },
    {
        "instruction": "",
        "id": "q11771",
        "input": "how to union join table based on column python",
        "output": "",
        "rule": [
            "d11771"
        ]
    },
    {
        "instruction": "",
        "id": "q11772",
        "input": "python single asterik expansion",
        "output": "",
        "rule": [
            "d11772"
        ]
    },
    {
        "instruction": "",
        "id": "q11773",
        "input": "how to unzip a python file in windows",
        "output": "",
        "rule": [
            "d11773"
        ]
    },
    {
        "instruction": "",
        "id": "q11774",
        "input": "python singleton double check locking",
        "output": "",
        "rule": [
            "d11774"
        ]
    },
    {
        "instruction": "",
        "id": "q11775",
        "input": "how to use a function to prompt user for inputs python",
        "output": "",
        "rule": [
            "d11775"
        ]
    },
    {
        "instruction": "",
        "id": "q11776",
        "input": "python singleton instance global",
        "output": "",
        "rule": [
            "d11776"
        ]
    },
    {
        "instruction": "",
        "id": "q11777",
        "input": "how to use a method that ends with yield python",
        "output": "",
        "rule": [
            "d11777"
        ]
    },
    {
        "instruction": "",
        "id": "q11778",
        "input": "python skip comment quots",
        "output": "",
        "rule": [
            "d11778"
        ]
    },
    {
        "instruction": "",
        "id": "q11779",
        "input": "how to use assertitemsequal in python to compare lists",
        "output": "",
        "rule": [
            "d11779"
        ]
    },
    {
        "instruction": "",
        "id": "q11780",
        "input": "python skip lines that are empty or only spaces",
        "output": "",
        "rule": [
            "d11780"
        ]
    },
    {
        "instruction": "",
        "id": "q11781",
        "input": "how to use defaultdict for frequency of words in python",
        "output": "",
        "rule": [
            "d11781"
        ]
    },
    {
        "instruction": "",
        "id": "q11782",
        "input": "python sklearn how to output graph of decision tree",
        "output": "",
        "rule": [
            "d11782"
        ]
    },
    {
        "instruction": "",
        "id": "q11783",
        "input": "how to use dictionary funtion to replace in python",
        "output": "",
        "rule": [
            "d11783"
        ]
    },
    {
        "instruction": "",
        "id": "q11784",
        "input": "how to use division and remainder in python",
        "output": "",
        "rule": [
            "d11784"
        ]
    },
    {
        "instruction": "",
        "id": "q11785",
        "input": "python solve for a log equation",
        "output": "",
        "rule": [
            "d11785"
        ]
    },
    {
        "instruction": "",
        "id": "q11786",
        "input": "how to use lambda function for descending order sorting in python",
        "output": "",
        "rule": [
            "d11786"
        ]
    },
    {
        "instruction": "",
        "id": "q11787",
        "input": "python sort indices of array",
        "output": "",
        "rule": [
            "d11787"
        ]
    },
    {
        "instruction": "",
        "id": "q11788",
        "input": "how to use max function for a matrix python",
        "output": "",
        "rule": [
            "d11788"
        ]
    },
    {
        "instruction": "",
        "id": "q11789",
        "input": "python sort list of file names",
        "output": "",
        "rule": [
            "d11789"
        ]
    },
    {
        "instruction": "",
        "id": "q11790",
        "input": "how to use percentage on python 3",
        "output": "",
        "rule": [
            "d11790"
        ]
    },
    {
        "instruction": "",
        "id": "q11791",
        "input": "python sort list of filenames",
        "output": "",
        "rule": [
            "d11791"
        ]
    },
    {
        "instruction": "",
        "id": "q11792",
        "input": "how to use python configparser with include files",
        "output": "",
        "rule": [
            "d11792"
        ]
    },
    {
        "instruction": "",
        "id": "q11793",
        "input": "python sort values into new columns",
        "output": "",
        "rule": [
            "d11793"
        ]
    },
    {
        "instruction": "",
        "id": "q11794",
        "input": "how to use python in interactive mode",
        "output": "",
        "rule": [
            "d11794"
        ]
    },
    {
        "instruction": "",
        "id": "q11795",
        "input": "python sorted lambda comparison",
        "output": "",
        "rule": [
            "d11795"
        ]
    },
    {
        "instruction": "",
        "id": "q11796",
        "input": "how to use python to plot gaussian distribution",
        "output": "",
        "rule": [
            "d11796"
        ]
    },
    {
        "instruction": "",
        "id": "q11797",
        "input": "python specify utf8 without codecs",
        "output": "",
        "rule": [
            "d11797"
        ]
    },
    {
        "instruction": "",
        "id": "q11798",
        "input": "how to use the getattr function in the python",
        "output": "",
        "rule": [
            "d11798"
        ]
    },
    {
        "instruction": "",
        "id": "q11799",
        "input": "python sphinx autosummary change directory name",
        "output": "",
        "rule": [
            "d11799"
        ]
    },
    {
        "instruction": "",
        "id": "q11800",
        "input": "how to use the makedir command in python",
        "output": "",
        "rule": [
            "d11800"
        ]
    },
    {
        "instruction": "",
        "id": "q11801",
        "input": "python sphinx documentation as a text file",
        "output": "",
        "rule": [
            "d11801"
        ]
    },
    {
        "instruction": "",
        "id": "q11802",
        "input": "how to use x and y coordinates in python",
        "output": "",
        "rule": [
            "d11802"
        ]
    },
    {
        "instruction": "",
        "id": "q11803",
        "input": "python sphinx figure with caption",
        "output": "",
        "rule": [
            "d11803"
        ]
    },
    {
        "instruction": "",
        "id": "q11804",
        "input": "how to ush python flush method",
        "output": "",
        "rule": [
            "d11804"
        ]
    },
    {
        "instruction": "",
        "id": "q11805",
        "input": "python splinter set checkbox state",
        "output": "",
        "rule": [
            "d11805"
        ]
    },
    {
        "instruction": "",
        "id": "q11806",
        "input": "how to utilize line labels in python",
        "output": "",
        "rule": [
            "d11806"
        ]
    },
    {
        "instruction": "",
        "id": "q11807",
        "input": "python split a list into n parts",
        "output": "",
        "rule": [
            "d11807"
        ]
    },
    {
        "instruction": "",
        "id": "q11808",
        "input": "how to validate a url in python",
        "output": "",
        "rule": [
            "d11808"
        ]
    },
    {
        "instruction": "",
        "id": "q11809",
        "input": "python split array to chunk",
        "output": "",
        "rule": [
            "d11809"
        ]
    },
    {
        "instruction": "",
        "id": "q11810",
        "input": "how to validate url in python",
        "output": "",
        "rule": [
            "d11810"
        ]
    },
    {
        "instruction": "",
        "id": "q11811",
        "input": "python split into chunks by value",
        "output": "",
        "rule": [
            "d11811"
        ]
    },
    {
        "instruction": "",
        "id": "q11812",
        "input": "how to write a python code that will give all results if you remove for letters",
        "output": "",
        "rule": [
            "d11812"
        ]
    },
    {
        "instruction": "",
        "id": "q11813",
        "input": "python split string into chunks of fixed length",
        "output": "",
        "rule": [
            "d11813"
        ]
    },
    {
        "instruction": "",
        "id": "q11814",
        "input": "how to write code for decimal and binary conversions in python",
        "output": "",
        "rule": [
            "d11814"
        ]
    },
    {
        "instruction": "",
        "id": "q11815",
        "input": "python split string on length",
        "output": "",
        "rule": [
            "d11815"
        ]
    },
    {
        "instruction": "",
        "id": "q11816",
        "input": "how to write code python to accept post request from javascript",
        "output": "",
        "rule": [
            "d11816"
        ]
    },
    {
        "instruction": "",
        "id": "q11817",
        "input": "python split strings multiline",
        "output": "",
        "rule": [
            "d11817"
        ]
    },
    {
        "instruction": "",
        "id": "q11818",
        "input": "how to write dictionary to file as json python",
        "output": "",
        "rule": [
            "d11818"
        ]
    },
    {
        "instruction": "",
        "id": "q11819",
        "input": "python split up compressed file into chunks",
        "output": "",
        "rule": [
            "d11819"
        ]
    },
    {
        "instruction": "",
        "id": "q11820",
        "input": "how to write function to excel in python",
        "output": "",
        "rule": [
            "d11820"
        ]
    },
    {
        "instruction": "",
        "id": "q11821",
        "input": "python sql query string remove parentheses",
        "output": "",
        "rule": [
            "d11821"
        ]
    },
    {
        "instruction": "",
        "id": "q11822",
        "input": "how to write print in two line in python",
        "output": "",
        "rule": [
            "d11822"
        ]
    },
    {
        "instruction": "",
        "id": "q11823",
        "input": "python sql update pass value",
        "output": "",
        "rule": [
            "d11823"
        ]
    },
    {
        "instruction": "",
        "id": "q11824",
        "input": "how to zip files to directory in python",
        "output": "",
        "rule": [
            "d11824"
        ]
    },
    {
        "instruction": "",
        "id": "q11825",
        "input": "python sqlalchemy bulk insert",
        "output": "",
        "rule": [
            "d11825"
        ]
    },
    {
        "instruction": "",
        "id": "q11826",
        "input": "hwo to access elements in a counter python",
        "output": "",
        "rule": [
            "d11826"
        ]
    },
    {
        "instruction": "",
        "id": "q11827",
        "input": "hyphen in python dict key",
        "output": "",
        "rule": [
            "d11827"
        ]
    },
    {
        "instruction": "",
        "id": "q11828",
        "input": "python sqlalchemy model to dict",
        "output": "",
        "rule": [
            "d11828"
        ]
    },
    {
        "instruction": "",
        "id": "q11829",
        "input": "identifying most frequent word in sentance using python",
        "output": "",
        "rule": [
            "d11829"
        ]
    },
    {
        "instruction": "",
        "id": "q11830",
        "input": "python sqlalchemy sync tables",
        "output": "",
        "rule": [
            "d11830"
        ]
    },
    {
        "instruction": "",
        "id": "q11831",
        "input": "if get key del key python",
        "output": "",
        "rule": [
            "d11831"
        ]
    },
    {
        "instruction": "",
        "id": "q11832",
        "input": "python sqlalchemy truncate table",
        "output": "",
        "rule": [
            "d11832"
        ]
    },
    {
        "instruction": "",
        "id": "q11833",
        "input": "if value is string plus anything python",
        "output": "",
        "rule": [
            "d11833"
        ]
    },
    {
        "instruction": "",
        "id": "q11834",
        "input": "python sqlite fetch to dictionary",
        "output": "",
        "rule": [
            "d11834"
        ]
    },
    {
        "instruction": "",
        "id": "q11835",
        "input": "ihow to call help function in python",
        "output": "",
        "rule": [
            "d11835"
        ]
    },
    {
        "instruction": "",
        "id": "q11836",
        "input": "python sqlite get dictionary instead of list",
        "output": "",
        "rule": [
            "d11836"
        ]
    },
    {
        "instruction": "",
        "id": "q11837",
        "input": "image normalization matrix python",
        "output": "",
        "rule": [
            "d11837"
        ]
    },
    {
        "instruction": "",
        "id": "q11838",
        "input": "python squeeze nested list",
        "output": "",
        "rule": [
            "d11838"
        ]
    },
    {
        "instruction": "",
        "id": "q11839",
        "input": "implement downsampling python array",
        "output": "",
        "rule": [
            "d11839"
        ]
    },
    {
        "instruction": "",
        "id": "q11840",
        "input": "python stack multiple 2d arrays",
        "output": "",
        "rule": [
            "d11840"
        ]
    },
    {
        "instruction": "",
        "id": "q11841",
        "input": "python stdin buffer method",
        "output": "",
        "rule": [
            "d11841"
        ]
    },
    {
        "instruction": "",
        "id": "q11842",
        "input": "in array even only python",
        "output": "",
        "rule": [
            "d11842"
        ]
    },
    {
        "instruction": "",
        "id": "q11843",
        "input": "python stdin line feed",
        "output": "",
        "rule": [
            "d11843"
        ]
    },
    {
        "instruction": "",
        "id": "q11844",
        "input": "in python do all functions return a value",
        "output": "",
        "rule": [
            "d11844"
        ]
    },
    {
        "instruction": "",
        "id": "q11845",
        "input": "python stop threads once all queue items processed",
        "output": "",
        "rule": [
            "d11845"
        ]
    },
    {
        "instruction": "",
        "id": "q11846",
        "input": "in python how to limit decimal value at two decimal places",
        "output": "",
        "rule": [
            "d11846"
        ]
    },
    {
        "instruction": "",
        "id": "q11847",
        "input": "python store numpy array in database",
        "output": "",
        "rule": [
            "d11847"
        ]
    },
    {
        "instruction": "",
        "id": "q11848",
        "input": "in python, you create a comment with the character(s)",
        "output": "",
        "rule": [
            "d11848"
        ]
    },
    {
        "instruction": "",
        "id": "q11849",
        "input": "python store numpy array in db",
        "output": "",
        "rule": [
            "d11849"
        ]
    },
    {
        "instruction": "",
        "id": "q11850",
        "input": "include equals in min max python",
        "output": "",
        "rule": [
            "d11850"
        ]
    },
    {
        "instruction": "",
        "id": "q11851",
        "input": "python strftime miliseconds fixed width",
        "output": "",
        "rule": [
            "d11851"
        ]
    },
    {
        "instruction": "",
        "id": "q11852",
        "input": "increase axis label size python",
        "output": "",
        "rule": [
            "d11852"
        ]
    },
    {
        "instruction": "",
        "id": "q11853",
        "input": "python string contains non hex",
        "output": "",
        "rule": [
            "d11853"
        ]
    },
    {
        "instruction": "",
        "id": "q11854",
        "input": "increase text size in python",
        "output": "",
        "rule": [
            "d11854"
        ]
    },
    {
        "instruction": "",
        "id": "q11855",
        "input": "python string format left pad",
        "output": "",
        "rule": [
            "d11855"
        ]
    },
    {
        "instruction": "",
        "id": "q11856",
        "input": "index of in python list",
        "output": "",
        "rule": [
            "d11856"
        ]
    },
    {
        "instruction": "",
        "id": "q11857",
        "input": "python string o float",
        "output": "",
        "rule": [
            "d11857"
        ]
    },
    {
        "instruction": "",
        "id": "q11858",
        "input": "index of list of int python",
        "output": "",
        "rule": [
            "d11858"
        ]
    },
    {
        "instruction": "",
        "id": "q11859",
        "input": "python string reduce space",
        "output": "",
        "rule": [
            "d11859"
        ]
    },
    {
        "instruction": "",
        "id": "q11860",
        "input": "python string replace for multiple",
        "output": "",
        "rule": [
            "d11860"
        ]
    },
    {
        "instruction": "",
        "id": "q11861",
        "input": "python string to json date",
        "output": "",
        "rule": [
            "d11861"
        ]
    },
    {
        "instruction": "",
        "id": "q11862",
        "input": "insert element into index list python",
        "output": "",
        "rule": [
            "d11862"
        ]
    },
    {
        "instruction": "",
        "id": "q11863",
        "input": "python string to list every space",
        "output": "",
        "rule": [
            "d11863"
        ]
    },
    {
        "instruction": "",
        "id": "q11864",
        "input": "instance has no member python",
        "output": "",
        "rule": [
            "d11864"
        ]
    },
    {
        "instruction": "",
        "id": "q11865",
        "input": "python string trim leading zeros",
        "output": "",
        "rule": [
            "d11865"
        ]
    },
    {
        "instruction": "",
        "id": "q11866",
        "input": "interpolate python lat/lon to polar coordination",
        "output": "",
        "rule": [
            "d11866"
        ]
    },
    {
        "instruction": "",
        "id": "q11867",
        "input": "python strip all spaces from a string",
        "output": "",
        "rule": [
            "d11867"
        ]
    },
    {
        "instruction": "",
        "id": "q11868",
        "input": "python strip string of only letterfs",
        "output": "",
        "rule": [
            "d11868"
        ]
    },
    {
        "instruction": "",
        "id": "q11869",
        "input": "invalid syntax python for a word",
        "output": "",
        "rule": [
            "d11869"
        ]
    },
    {
        "instruction": "",
        "id": "q11870",
        "input": "python struct unpack return a tuple",
        "output": "",
        "rule": [
            "d11870"
        ]
    },
    {
        "instruction": "",
        "id": "q11871",
        "input": "inverse a dictionary python",
        "output": "",
        "rule": [
            "d11871"
        ]
    },
    {
        "instruction": "",
        "id": "q11872",
        "input": "python style column width",
        "output": "",
        "rule": [
            "d11872"
        ]
    },
    {
        "instruction": "",
        "id": "q11873",
        "input": "python style underscore funcitons",
        "output": "",
        "rule": [
            "d11873"
        ]
    },
    {
        "instruction": "",
        "id": "q11874",
        "input": "is it makig problem if you trian on cpu and predict on gpu? python",
        "output": "",
        "rule": [
            "d11874"
        ]
    },
    {
        "instruction": "",
        "id": "q11875",
        "input": "python sub case sensitive",
        "output": "",
        "rule": [
            "d11875"
        ]
    },
    {
        "instruction": "",
        "id": "q11876",
        "input": "is python convention using camel case or underscore",
        "output": "",
        "rule": [
            "d11876"
        ]
    },
    {
        "instruction": "",
        "id": "q11877",
        "input": "python subprocess write to stdin",
        "output": "",
        "rule": [
            "d11877"
        ]
    },
    {
        "instruction": "",
        "id": "q11878",
        "input": "python suppress unverified https request",
        "output": "",
        "rule": [
            "d11878"
        ]
    },
    {
        "instruction": "",
        "id": "q11879",
        "input": "is the modulo in python flawed",
        "output": "",
        "rule": [
            "d11879"
        ]
    },
    {
        "instruction": "",
        "id": "q11880",
        "input": "python sync tables sqlalchemy",
        "output": "",
        "rule": [
            "d11880"
        ]
    },
    {
        "instruction": "",
        "id": "q11881",
        "input": "is there a way to print comment sign in python",
        "output": "",
        "rule": [
            "d11881"
        ]
    },
    {
        "instruction": "",
        "id": "q11882",
        "input": "python systemexcepthook is missing",
        "output": "",
        "rule": [
            "d11882"
        ]
    },
    {
        "instruction": "",
        "id": "q11883",
        "input": "isdir not working in python",
        "output": "",
        "rule": [
            "d11883"
        ]
    },
    {
        "instruction": "",
        "id": "q11884",
        "input": "python table to dictionary",
        "output": "",
        "rule": [
            "d11884"
        ]
    },
    {
        "instruction": "",
        "id": "q11885",
        "input": "isinteger test array python",
        "output": "",
        "rule": [
            "d11885"
        ]
    },
    {
        "instruction": "",
        "id": "q11886",
        "input": "python table view column width",
        "output": "",
        "rule": [
            "d11886"
        ]
    },
    {
        "instruction": "",
        "id": "q11887",
        "input": "python tabular output with header",
        "output": "",
        "rule": [
            "d11887"
        ]
    },
    {
        "instruction": "",
        "id": "q11888",
        "input": "python takes 0 positional arugements but 1 was given",
        "output": "",
        "rule": [
            "d11888"
        ]
    },
    {
        "instruction": "",
        "id": "q11889",
        "input": "jaccard similarity product labelling python",
        "output": "",
        "rule": [
            "d11889"
        ]
    },
    {
        "instruction": "",
        "id": "q11890",
        "input": "python tell if isiterable",
        "output": "",
        "rule": [
            "d11890"
        ]
    },
    {
        "instruction": "",
        "id": "q11891",
        "input": "jacobian and hessian in python",
        "output": "",
        "rule": [
            "d11891"
        ]
    },
    {
        "instruction": "",
        "id": "q11892",
        "input": "python tell none type",
        "output": "",
        "rule": [
            "d11892"
        ]
    },
    {
        "instruction": "",
        "id": "q11893",
        "input": "join characters in a list python",
        "output": "",
        "rule": [
            "d11893"
        ]
    },
    {
        "instruction": "",
        "id": "q11894",
        "input": "python tensorflow dimensions of a tensor",
        "output": "",
        "rule": [
            "d11894"
        ]
    },
    {
        "instruction": "",
        "id": "q11895",
        "input": "join elements of a list as string python",
        "output": "",
        "rule": [
            "d11895"
        ]
    },
    {
        "instruction": "",
        "id": "q11896",
        "input": "python tensorflow input shape",
        "output": "",
        "rule": [
            "d11896"
        ]
    },
    {
        "instruction": "",
        "id": "q11897",
        "input": "join items of a list python by ' '",
        "output": "",
        "rule": [
            "d11897"
        ]
    },
    {
        "instruction": "",
        "id": "q11898",
        "input": "python test coverage on linux",
        "output": "",
        "rule": [
            "d11898"
        ]
    },
    {
        "instruction": "",
        "id": "q11899",
        "input": "js hash array like python dict",
        "output": "",
        "rule": [
            "d11899"
        ]
    },
    {
        "instruction": "",
        "id": "q11900",
        "input": "python test for actual end of file not white space",
        "output": "",
        "rule": [
            "d11900"
        ]
    },
    {
        "instruction": "",
        "id": "q11901",
        "input": "json paramfile in python code",
        "output": "",
        "rule": [
            "d11901"
        ]
    },
    {
        "instruction": "",
        "id": "q11902",
        "input": "python test for sequence type",
        "output": "",
        "rule": [
            "d11902"
        ]
    },
    {
        "instruction": "",
        "id": "q11903",
        "input": "json python dump default",
        "output": "",
        "rule": [
            "d11903"
        ]
    },
    {
        "instruction": "",
        "id": "q11904",
        "input": "python test if an attribute exists",
        "output": "",
        "rule": [
            "d11904"
        ]
    },
    {
        "instruction": "",
        "id": "q11905",
        "input": "json python isoformat datetime",
        "output": "",
        "rule": [
            "d11905"
        ]
    },
    {
        "instruction": "",
        "id": "q11906",
        "input": "python test if list",
        "output": "",
        "rule": [
            "d11906"
        ]
    },
    {
        "instruction": "",
        "id": "q11907",
        "input": "json response api as table python",
        "output": "",
        "rule": [
            "d11907"
        ]
    },
    {
        "instruction": "",
        "id": "q11908",
        "input": "json template engine python",
        "output": "",
        "rule": [
            "d11908"
        ]
    },
    {
        "instruction": "",
        "id": "q11909",
        "input": "python the first sunday of month",
        "output": "",
        "rule": [
            "d11909"
        ]
    },
    {
        "instruction": "",
        "id": "q11910",
        "input": "keep magnitude only of fourier transform python",
        "output": "",
        "rule": [
            "d11910"
        ]
    },
    {
        "instruction": "",
        "id": "q11911",
        "input": "python thread join outer thread",
        "output": "",
        "rule": [
            "d11911"
        ]
    },
    {
        "instruction": "",
        "id": "q11912",
        "input": "kill async python script",
        "output": "",
        "rule": [
            "d11912"
        ]
    },
    {
        "instruction": "",
        "id": "q11913",
        "input": "kill socket connections python",
        "output": "",
        "rule": [
            "d11913"
        ]
    },
    {
        "instruction": "",
        "id": "q11914",
        "input": "python time hour and minute to string",
        "output": "",
        "rule": [
            "d11914"
        ]
    },
    {
        "instruction": "",
        "id": "q11915",
        "input": "killl all threads python",
        "output": "",
        "rule": [
            "d11915"
        ]
    },
    {
        "instruction": "",
        "id": "q11916",
        "input": "python time is not null",
        "output": "",
        "rule": [
            "d11916"
        ]
    },
    {
        "instruction": "",
        "id": "q11917",
        "input": "lambda connecting to redis python",
        "output": "",
        "rule": [
            "d11917"
        ]
    },
    {
        "instruction": "",
        "id": "q11918",
        "input": "python time limit for function call",
        "output": "",
        "rule": [
            "d11918"
        ]
    },
    {
        "instruction": "",
        "id": "q11919",
        "input": "lambda function python read in file",
        "output": "",
        "rule": [
            "d11919"
        ]
    },
    {
        "instruction": "",
        "id": "q11920",
        "input": "python time span in minutes",
        "output": "",
        "rule": [
            "d11920"
        ]
    },
    {
        "instruction": "",
        "id": "q11921",
        "input": "libclang python loaddll fail",
        "output": "",
        "rule": [
            "d11921"
        ]
    },
    {
        "instruction": "",
        "id": "q11922",
        "input": "linear regression between time series python",
        "output": "",
        "rule": [
            "d11922"
        ]
    },
    {
        "instruction": "",
        "id": "q11923",
        "input": "python timezone to gmt offset",
        "output": "",
        "rule": [
            "d11923"
        ]
    },
    {
        "instruction": "",
        "id": "q11924",
        "input": "list of lists to dictiosat python",
        "output": "",
        "rule": [
            "d11924"
        ]
    },
    {
        "instruction": "",
        "id": "q11925",
        "input": "python timezone to offset",
        "output": "",
        "rule": [
            "d11925"
        ]
    },
    {
        "instruction": "",
        "id": "q11926",
        "input": "list to dictionary in python",
        "output": "",
        "rule": [
            "d11926"
        ]
    },
    {
        "instruction": "",
        "id": "q11927",
        "input": "python title text object not callable",
        "output": "",
        "rule": [
            "d11927"
        ]
    },
    {
        "instruction": "",
        "id": "q11928",
        "input": "list to unique python",
        "output": "",
        "rule": [
            "d11928"
        ]
    },
    {
        "instruction": "",
        "id": "q11929",
        "input": "python tk text clean",
        "output": "",
        "rule": [
            "d11929"
        ]
    },
    {
        "instruction": "",
        "id": "q11930",
        "input": "load a file as a dictionary python",
        "output": "",
        "rule": [
            "d11930"
        ]
    },
    {
        "instruction": "",
        "id": "q11931",
        "input": "python tkinter context menu",
        "output": "",
        "rule": [
            "d11931"
        ]
    },
    {
        "instruction": "",
        "id": "q11932",
        "input": "python tkinter display tip message",
        "output": "",
        "rule": [
            "d11932"
        ]
    },
    {
        "instruction": "",
        "id": "q11933",
        "input": "loading a structure in a matlab file in python",
        "output": "",
        "rule": [
            "d11933"
        ]
    },
    {
        "instruction": "",
        "id": "q11934",
        "input": "python tkinter get screen resolution",
        "output": "",
        "rule": [
            "d11934"
        ]
    },
    {
        "instruction": "",
        "id": "q11935",
        "input": "loading mat files into python",
        "output": "",
        "rule": [
            "d11935"
        ]
    },
    {
        "instruction": "",
        "id": "q11936",
        "input": "python tkinter indeterminate progressbar",
        "output": "",
        "rule": [
            "d11936"
        ]
    },
    {
        "instruction": "",
        "id": "q11937",
        "input": "python tkinter next button for next tab",
        "output": "",
        "rule": [
            "d11937"
        ]
    },
    {
        "instruction": "",
        "id": "q11938",
        "input": "logging in a user from database python flask",
        "output": "",
        "rule": [
            "d11938"
        ]
    },
    {
        "instruction": "",
        "id": "q11939",
        "input": "python tkinter open multiple files dialog",
        "output": "",
        "rule": [
            "d11939"
        ]
    },
    {
        "instruction": "",
        "id": "q11940",
        "input": "long hand code for standard deviation python",
        "output": "",
        "rule": [
            "d11940"
        ]
    },
    {
        "instruction": "",
        "id": "q11941",
        "input": "python tkinter remove checkbox",
        "output": "",
        "rule": [
            "d11941"
        ]
    },
    {
        "instruction": "",
        "id": "q11942",
        "input": "loop through left joins python",
        "output": "",
        "rule": [
            "d11942"
        ]
    },
    {
        "instruction": "",
        "id": "q11943",
        "input": "python tkinter scrolled text delete last line",
        "output": "",
        "rule": [
            "d11943"
        ]
    },
    {
        "instruction": "",
        "id": "q11944",
        "input": "lost focus event in python",
        "output": "",
        "rule": [
            "d11944"
        ]
    },
    {
        "instruction": "",
        "id": "q11945",
        "input": "python tkinter treeview set scrollbar",
        "output": "",
        "rule": [
            "d11945"
        ]
    },
    {
        "instruction": "",
        "id": "q11946",
        "input": "make a file as a data frame in python",
        "output": "",
        "rule": [
            "d11946"
        ]
    },
    {
        "instruction": "",
        "id": "q11947",
        "input": "python to detect os x window in focus",
        "output": "",
        "rule": [
            "d11947"
        ]
    },
    {
        "instruction": "",
        "id": "q11948",
        "input": "make array objects iterable python",
        "output": "",
        "rule": [
            "d11948"
        ]
    },
    {
        "instruction": "",
        "id": "q11949",
        "input": "python torch generate 0 1 matrix",
        "output": "",
        "rule": [
            "d11949"
        ]
    },
    {
        "instruction": "",
        "id": "q11950",
        "input": "python tornado force flush",
        "output": "",
        "rule": [
            "d11950"
        ]
    },
    {
        "instruction": "",
        "id": "q11951",
        "input": "make eecutable chmod python",
        "output": "",
        "rule": [
            "d11951"
        ]
    },
    {
        "instruction": "",
        "id": "q11952",
        "input": "python tornado http server",
        "output": "",
        "rule": [
            "d11952"
        ]
    },
    {
        "instruction": "",
        "id": "q11953",
        "input": "make file executable python chmod",
        "output": "",
        "rule": [
            "d11953"
        ]
    },
    {
        "instruction": "",
        "id": "q11954",
        "input": "python tornado write json",
        "output": "",
        "rule": [
            "d11954"
        ]
    },
    {
        "instruction": "",
        "id": "q11955",
        "input": "make function threadsafe in python",
        "output": "",
        "rule": [
            "d11955"
        ]
    },
    {
        "instruction": "",
        "id": "q11956",
        "input": "python traceback to str",
        "output": "",
        "rule": [
            "d11956"
        ]
    },
    {
        "instruction": "",
        "id": "q11957",
        "input": "make map function for looping through python",
        "output": "",
        "rule": [
            "d11957"
        ]
    },
    {
        "instruction": "",
        "id": "q11958",
        "input": "python transform tuple dict to panda",
        "output": "",
        "rule": [
            "d11958"
        ]
    },
    {
        "instruction": "",
        "id": "q11959",
        "input": "make python script admin only",
        "output": "",
        "rule": [
            "d11959"
        ]
    },
    {
        "instruction": "",
        "id": "q11960",
        "input": "python traverse up a tree",
        "output": "",
        "rule": [
            "d11960"
        ]
    },
    {
        "instruction": "",
        "id": "q11961",
        "input": "make table into a python dictionary",
        "output": "",
        "rule": [
            "d11961"
        ]
    },
    {
        "instruction": "",
        "id": "q11962",
        "input": "python treeview mouse over event",
        "output": "",
        "rule": [
            "d11962"
        ]
    },
    {
        "instruction": "",
        "id": "q11963",
        "input": "make values uppercase in dictionary python",
        "output": "",
        "rule": [
            "d11963"
        ]
    },
    {
        "instruction": "",
        "id": "q11964",
        "input": "python trim string left",
        "output": "",
        "rule": [
            "d11964"
        ]
    },
    {
        "instruction": "",
        "id": "q11965",
        "input": "making a matrix of only 0s in python",
        "output": "",
        "rule": [
            "d11965"
        ]
    },
    {
        "instruction": "",
        "id": "q11966",
        "input": "python trim whitespace of every line",
        "output": "",
        "rule": [
            "d11966"
        ]
    },
    {
        "instruction": "",
        "id": "q11967",
        "input": "python truncate table not doing anything",
        "output": "",
        "rule": [
            "d11967"
        ]
    },
    {
        "instruction": "",
        "id": "q11968",
        "input": "making list dumpy,narray in python",
        "output": "",
        "rule": [
            "d11968"
        ]
    },
    {
        "instruction": "",
        "id": "q11969",
        "input": "python tuple and default value",
        "output": "",
        "rule": [
            "d11969"
        ]
    },
    {
        "instruction": "",
        "id": "q11970",
        "input": "match datetime in certain array python",
        "output": "",
        "rule": [
            "d11970"
        ]
    },
    {
        "instruction": "",
        "id": "q11971",
        "input": "python typing filelike object",
        "output": "",
        "rule": [
            "d11971"
        ]
    },
    {
        "instruction": "",
        "id": "q11972",
        "input": "python unify a list of dict",
        "output": "",
        "rule": [
            "d11972"
        ]
    },
    {
        "instruction": "",
        "id": "q11973",
        "input": "matrix csv write python",
        "output": "",
        "rule": [
            "d11973"
        ]
    },
    {
        "instruction": "",
        "id": "q11974",
        "input": "python unique id in short lent",
        "output": "",
        "rule": [
            "d11974"
        ]
    },
    {
        "instruction": "",
        "id": "q11975",
        "input": "matrix shift columns independently python",
        "output": "",
        "rule": [
            "d11975"
        ]
    },
    {
        "instruction": "",
        "id": "q11976",
        "input": "matrix to grey image cv2 python",
        "output": "",
        "rule": [
            "d11976"
        ]
    },
    {
        "instruction": "",
        "id": "q11977",
        "input": "python unpack namedtuple struct",
        "output": "",
        "rule": [
            "d11977"
        ]
    },
    {
        "instruction": "",
        "id": "q11978",
        "input": "max number of dimensions python list",
        "output": "",
        "rule": [
            "d11978"
        ]
    },
    {
        "instruction": "",
        "id": "q11979",
        "input": "python argparse boolean type",
        "output": "",
        "rule": [
            "d11979"
        ]
    },
    {
        "instruction": "",
        "id": "q11980",
        "input": "maya python get name of attribute",
        "output": "",
        "rule": [
            "d11980"
        ]
    },
    {
        "instruction": "",
        "id": "q11981",
        "input": "python upper all elements in list",
        "output": "",
        "rule": [
            "d11981"
        ]
    },
    {
        "instruction": "",
        "id": "q11982",
        "input": "measure distances between data points and locations in a map python",
        "output": "",
        "rule": [
            "d11982"
        ]
    },
    {
        "instruction": "",
        "id": "q11983",
        "input": "measuring function time in python",
        "output": "",
        "rule": [
            "d11983"
        ]
    },
    {
        "instruction": "",
        "id": "q11984",
        "input": "python url encode for string",
        "output": "",
        "rule": [
            "d11984"
        ]
    },
    {
        "instruction": "",
        "id": "q11985",
        "input": "measuring time elapsed during function execution in python",
        "output": "",
        "rule": [
            "d11985"
        ]
    },
    {
        "instruction": "",
        "id": "q11986",
        "input": "python url encode to dict",
        "output": "",
        "rule": [
            "d11986"
        ]
    },
    {
        "instruction": "",
        "id": "q11987",
        "input": "median code program python",
        "output": "",
        "rule": [
            "d11987"
        ]
    },
    {
        "instruction": "",
        "id": "q11988",
        "input": "python use default arg if not defined",
        "output": "",
        "rule": [
            "d11988"
        ]
    },
    {
        "instruction": "",
        "id": "q11989",
        "input": "median formula for python",
        "output": "",
        "rule": [
            "d11989"
        ]
    },
    {
        "instruction": "",
        "id": "q11990",
        "input": "python use int on a binary string",
        "output": "",
        "rule": [
            "d11990"
        ]
    },
    {
        "instruction": "",
        "id": "q11991",
        "input": "median from a list of integers python",
        "output": "",
        "rule": [
            "d11991"
        ]
    },
    {
        "instruction": "",
        "id": "q11992",
        "input": "python use of tuple for coordinate storage",
        "output": "",
        "rule": [
            "d11992"
        ]
    },
    {
        "instruction": "",
        "id": "q11993",
        "input": "median of an even number of numbers python",
        "output": "",
        "rule": [
            "d11993"
        ]
    },
    {
        "instruction": "",
        "id": "q11994",
        "input": "python use signal to kill process",
        "output": "",
        "rule": [
            "d11994"
        ]
    },
    {
        "instruction": "",
        "id": "q11995",
        "input": "median value of tuple python",
        "output": "",
        "rule": [
            "d11995"
        ]
    },
    {
        "instruction": "",
        "id": "q11996",
        "input": "python using next to iterate",
        "output": "",
        "rule": [
            "d11996"
        ]
    },
    {
        "instruction": "",
        "id": "q11997",
        "input": "method in try catch failing python",
        "output": "",
        "rule": [
            "d11997"
        ]
    },
    {
        "instruction": "",
        "id": "q11998",
        "input": "python uuid5 byte string",
        "output": "",
        "rule": [
            "d11998"
        ]
    },
    {
        "instruction": "",
        "id": "q11999",
        "input": "microcontroller read and write to registers in python and udp",
        "output": "",
        "rule": [
            "d11999"
        ]
    },
    {
        "instruction": "",
        "id": "q12000",
        "input": "python validate method paramters",
        "output": "",
        "rule": [
            "d12000"
        ]
    },
    {
        "instruction": "",
        "id": "q12001",
        "input": "millisecond utc to python datetime datetime",
        "output": "",
        "rule": [
            "d12001"
        ]
    },
    {
        "instruction": "",
        "id": "q12002",
        "input": "python variable adb shell getprop string",
        "output": "",
        "rule": [
            "d12002"
        ]
    },
    {
        "instruction": "",
        "id": "q12003",
        "input": "mime type for batch files, python requests",
        "output": "",
        "rule": [
            "d12003"
        ]
    },
    {
        "instruction": "",
        "id": "q12004",
        "input": "python vector and 1dim matrix\\",
        "output": "",
        "rule": [
            "d12004"
        ]
    },
    {
        "instruction": "",
        "id": "q12005",
        "input": "minify multiple python files into one",
        "output": "",
        "rule": [
            "d12005"
        ]
    },
    {
        "instruction": "",
        "id": "q12006",
        "input": "python verify is uuid",
        "output": "",
        "rule": [
            "d12006"
        ]
    },
    {
        "instruction": "",
        "id": "q12007",
        "input": "minimizing the photoin the python tkinter",
        "output": "",
        "rule": [
            "d12007"
        ]
    },
    {
        "instruction": "",
        "id": "q12008",
        "input": "python virtual env wrapper",
        "output": "",
        "rule": [
            "d12008"
        ]
    },
    {
        "instruction": "",
        "id": "q12009",
        "input": "minimum distance between two lines python",
        "output": "",
        "rule": [
            "d12009"
        ]
    },
    {
        "instruction": "",
        "id": "q12010",
        "input": "python virtualenv not work",
        "output": "",
        "rule": [
            "d12010"
        ]
    },
    {
        "instruction": "",
        "id": "q12011",
        "input": "modal login in python flask",
        "output": "",
        "rule": [
            "d12011"
        ]
    },
    {
        "instruction": "",
        "id": "q12012",
        "input": "python webdriver assert checking",
        "output": "",
        "rule": [
            "d12012"
        ]
    },
    {
        "instruction": "",
        "id": "q12013",
        "input": "mongodb python query distinct",
        "output": "",
        "rule": [
            "d12013"
        ]
    },
    {
        "instruction": "",
        "id": "q12014",
        "input": "python webdriver assert not clickable",
        "output": "",
        "rule": [
            "d12014"
        ]
    },
    {
        "instruction": "",
        "id": "q12015",
        "input": "move cursor to next line in python",
        "output": "",
        "rule": [
            "d12015"
        ]
    },
    {
        "instruction": "",
        "id": "q12016",
        "input": "python webserver on demand streaming",
        "output": "",
        "rule": [
            "d12016"
        ]
    },
    {
        "instruction": "",
        "id": "q12017",
        "input": "python websocket manually close",
        "output": "",
        "rule": [
            "d12017"
        ]
    },
    {
        "instruction": "",
        "id": "q12018",
        "input": "mpython display gugire from explorer",
        "output": "",
        "rule": [
            "d12018"
        ]
    },
    {
        "instruction": "",
        "id": "q12019",
        "input": "python whether a string is able to be converted to float",
        "output": "",
        "rule": [
            "d12019"
        ]
    },
    {
        "instruction": "",
        "id": "q12020",
        "input": "mssql database automation with python",
        "output": "",
        "rule": [
            "d12020"
        ]
    },
    {
        "instruction": "",
        "id": "q12021",
        "input": "python whether a var is built in types",
        "output": "",
        "rule": [
            "d12021"
        ]
    },
    {
        "instruction": "",
        "id": "q12022",
        "input": "multi variate uniform distribution python",
        "output": "",
        "rule": [
            "d12022"
        ]
    },
    {
        "instruction": "",
        "id": "q12023",
        "input": "python wildcard filename match",
        "output": "",
        "rule": [
            "d12023"
        ]
    },
    {
        "instruction": "",
        "id": "q12024",
        "input": "multinomial logistic in python coeff",
        "output": "",
        "rule": [
            "d12024"
        ]
    },
    {
        "instruction": "",
        "id": "q12025",
        "input": "python win32api mouse get position",
        "output": "",
        "rule": [
            "d12025"
        ]
    },
    {
        "instruction": "",
        "id": "q12026",
        "input": "multiprocessing python exit process without emptying queue",
        "output": "",
        "rule": [
            "d12026"
        ]
    },
    {
        "instruction": "",
        "id": "q12027",
        "input": "python windows get active window title",
        "output": "",
        "rule": [
            "d12027"
        ]
    },
    {
        "instruction": "",
        "id": "q12028",
        "input": "multiprocessing python multiple cores",
        "output": "",
        "rule": [
            "d12028"
        ]
    },
    {
        "instruction": "",
        "id": "q12029",
        "input": "python windows get user name",
        "output": "",
        "rule": [
            "d12029"
        ]
    },
    {
        "instruction": "",
        "id": "q12030",
        "input": "mysqldb close the sql sessions in python",
        "output": "",
        "rule": [
            "d12030"
        ]
    },
    {
        "instruction": "",
        "id": "q12031",
        "input": "python with open dynamicload file",
        "output": "",
        "rule": [
            "d12031"
        ]
    },
    {
        "instruction": "",
        "id": "q12032",
        "input": "mysqldb python get table information",
        "output": "",
        "rule": [
            "d12032"
        ]
    },
    {
        "instruction": "",
        "id": "q12033",
        "input": "python wordnet lemmatizer not workinf",
        "output": "",
        "rule": [
            "d12033"
        ]
    },
    {
        "instruction": "",
        "id": "q12034",
        "input": "naive datetime object in python",
        "output": "",
        "rule": [
            "d12034"
        ]
    },
    {
        "instruction": "",
        "id": "q12035",
        "input": "python wrap a future in a method",
        "output": "",
        "rule": [
            "d12035"
        ]
    },
    {
        "instruction": "",
        "id": "q12036",
        "input": "name for external python libraries",
        "output": "",
        "rule": [
            "d12036"
        ]
    },
    {
        "instruction": "",
        "id": "q12037",
        "input": "python wrap function with agrs",
        "output": "",
        "rule": [
            "d12037"
        ]
    },
    {
        "instruction": "",
        "id": "q12038",
        "input": "name of highest count python",
        "output": "",
        "rule": [
            "d12038"
        ]
    },
    {
        "instruction": "",
        "id": "q12039",
        "input": "python wrap list to string length",
        "output": "",
        "rule": [
            "d12039"
        ]
    },
    {
        "instruction": "",
        "id": "q12040",
        "input": "neo4j add attributes to node python",
        "output": "",
        "rule": [
            "d12040"
        ]
    },
    {
        "instruction": "",
        "id": "q12041",
        "input": "python write a list to a txt file space delimited",
        "output": "",
        "rule": [
            "d12041"
        ]
    },
    {
        "instruction": "",
        "id": "q12042",
        "input": "next async iterator python",
        "output": "",
        "rule": [
            "d12042"
        ]
    },
    {
        "instruction": "",
        "id": "q12043",
        "input": "python write protobuf to file",
        "output": "",
        "rule": [
            "d12043"
        ]
    },
    {
        "instruction": "",
        "id": "q12044",
        "input": "normalise python data frame multi column",
        "output": "",
        "rule": [
            "d12044"
        ]
    },
    {
        "instruction": "",
        "id": "q12045",
        "input": "python write random test on function",
        "output": "",
        "rule": [
            "d12045"
        ]
    },
    {
        "instruction": "",
        "id": "q12046",
        "input": "normalize each row of matrix python",
        "output": "",
        "rule": [
            "d12046"
        ]
    },
    {
        "instruction": "",
        "id": "q12047",
        "input": "python write to gzip filestream",
        "output": "",
        "rule": [
            "d12047"
        ]
    },
    {
        "instruction": "",
        "id": "q12048",
        "input": "normalize matrix columns python",
        "output": "",
        "rule": [
            "d12048"
        ]
    },
    {
        "instruction": "",
        "id": "q12049",
        "input": "python write to obj",
        "output": "",
        "rule": [
            "d12049"
        ]
    },
    {
        "instruction": "",
        "id": "q12050",
        "input": "normalize person's names python",
        "output": "",
        "rule": [
            "d12050"
        ]
    },
    {
        "instruction": "",
        "id": "q12051",
        "input": "python write yaml from dictionary",
        "output": "",
        "rule": [
            "d12051"
        ]
    },
    {
        "instruction": "",
        "id": "q12052",
        "input": "normalize the intensity of two images in python",
        "output": "",
        "rule": [
            "d12052"
        ]
    },
    {
        "instruction": "",
        "id": "q12053",
        "input": "python wrting line in cmd in color",
        "output": "",
        "rule": [
            "d12053"
        ]
    },
    {
        "instruction": "",
        "id": "q12054",
        "input": "normalizing an image with python",
        "output": "",
        "rule": [
            "d12054"
        ]
    },
    {
        "instruction": "",
        "id": "q12055",
        "input": "python yaml double quote",
        "output": "",
        "rule": [
            "d12055"
        ]
    },
    {
        "instruction": "",
        "id": "q12056",
        "input": "number of columns in excel sheet python",
        "output": "",
        "rule": [
            "d12056"
        ]
    },
    {
        "instruction": "",
        "id": "q12057",
        "input": "python yaml dump stream",
        "output": "",
        "rule": [
            "d12057"
        ]
    },
    {
        "instruction": "",
        "id": "q12058",
        "input": "object of type is not json serializable python",
        "output": "",
        "rule": [
            "d12058"
        ]
    },
    {
        "instruction": "",
        "id": "q12059",
        "input": "python yaml keys with dashes",
        "output": "",
        "rule": [
            "d12059"
        ]
    },
    {
        "instruction": "",
        "id": "q12060",
        "input": "oload a frozen graph in tensorflow python",
        "output": "",
        "rule": [
            "d12060"
        ]
    },
    {
        "instruction": "",
        "id": "q12061",
        "input": "python yaml multiple documents stream",
        "output": "",
        "rule": [
            "d12061"
        ]
    },
    {
        "instruction": "",
        "id": "q12062",
        "input": "opencv python normalize intensity of image",
        "output": "",
        "rule": [
            "d12062"
        ]
    },
    {
        "instruction": "",
        "id": "q12063",
        "input": "python zip into folder without including the zip",
        "output": "",
        "rule": [
            "d12063"
        ]
    },
    {
        "instruction": "",
        "id": "q12064",
        "input": "python zipfile without copying directory structure",
        "output": "",
        "rule": [
            "d12064"
        ]
    },
    {
        "instruction": "",
        "id": "q12065",
        "input": "output of a query to dictionary in python",
        "output": "",
        "rule": [
            "d12065"
        ]
    },
    {
        "instruction": "",
        "id": "q12066",
        "input": "python zlib compress string",
        "output": "",
        "rule": [
            "d12066"
        ]
    },
    {
        "instruction": "",
        "id": "q12067",
        "input": "output prettyprint to file python",
        "output": "",
        "rule": [
            "d12067"
        ]
    },
    {
        "instruction": "",
        "id": "q12068",
        "input": "python, object to xml",
        "output": "",
        "rule": [
            "d12068"
        ]
    },
    {
        "instruction": "",
        "id": "q12069",
        "input": "parse datetime from string python",
        "output": "",
        "rule": [
            "d12069"
        ]
    },
    {
        "instruction": "",
        "id": "q12070",
        "input": "python, print dictionary in the input order",
        "output": "",
        "rule": [
            "d12070"
        ]
    },
    {
        "instruction": "",
        "id": "q12071",
        "input": "parse html table with python beautifulsoup wiki",
        "output": "",
        "rule": [
            "d12071"
        ]
    },
    {
        "instruction": "",
        "id": "q12072",
        "input": "python3 ctypes load dll example",
        "output": "",
        "rule": [
            "d12072"
        ]
    },
    {
        "instruction": "",
        "id": "q12073",
        "input": "parseargs python in separate function",
        "output": "",
        "rule": [
            "d12073"
        ]
    },
    {
        "instruction": "",
        "id": "q12074",
        "input": "python3 get default charset",
        "output": "",
        "rule": [
            "d12074"
        ]
    },
    {
        "instruction": "",
        "id": "q12075",
        "input": "parsing text into keywords pythons",
        "output": "",
        "rule": [
            "d12075"
        ]
    },
    {
        "instruction": "",
        "id": "q12076",
        "input": "python3 get document count in index elasticsearch",
        "output": "",
        "rule": [
            "d12076"
        ]
    },
    {
        "instruction": "",
        "id": "q12077",
        "input": "pass a 2d array to argmax in python",
        "output": "",
        "rule": [
            "d12077"
        ]
    },
    {
        "instruction": "",
        "id": "q12078",
        "input": "python3 get streamhandler from logging",
        "output": "",
        "rule": [
            "d12078"
        ]
    },
    {
        "instruction": "",
        "id": "q12079",
        "input": "passing arguements through functions python",
        "output": "",
        "rule": [
            "d12079"
        ]
    },
    {
        "instruction": "",
        "id": "q12080",
        "input": "python3 html to text",
        "output": "",
        "rule": [
            "d12080"
        ]
    },
    {
        "instruction": "",
        "id": "q12081",
        "input": "passing in argments to a python method",
        "output": "",
        "rule": [
            "d12081"
        ]
    },
    {
        "instruction": "",
        "id": "q12082",
        "input": "python3 join a list of string to a long string",
        "output": "",
        "rule": [
            "d12082"
        ]
    },
    {
        "instruction": "",
        "id": "q12083",
        "input": "pearson correlation with nan python",
        "output": "",
        "rule": [
            "d12083"
        ]
    },
    {
        "instruction": "",
        "id": "q12084",
        "input": "python3 see if object is string",
        "output": "",
        "rule": [
            "d12084"
        ]
    },
    {
        "instruction": "",
        "id": "q12085",
        "input": "python3 six get function global locals",
        "output": "",
        "rule": [
            "d12085"
        ]
    },
    {
        "instruction": "",
        "id": "q12086",
        "input": "python3 string allowed chars",
        "output": "",
        "rule": [
            "d12086"
        ]
    },
    {
        "instruction": "",
        "id": "q12087",
        "input": "plotting in python clear previous image",
        "output": "",
        "rule": [
            "d12087"
        ]
    },
    {
        "instruction": "",
        "id": "q12088",
        "input": "python3 string cast bytes",
        "output": "",
        "rule": [
            "d12088"
        ]
    },
    {
        "instruction": "",
        "id": "q12089",
        "input": "pop not changing the length of the array python",
        "output": "",
        "rule": [
            "d12089"
        ]
    },
    {
        "instruction": "",
        "id": "q12090",
        "input": "pythonvirabletype of an array check condition",
        "output": "",
        "rule": [
            "d12090"
        ]
    },
    {
        "instruction": "",
        "id": "q12091",
        "input": "positional default value in python",
        "output": "",
        "rule": [
            "d12091"
        ]
    },
    {
        "instruction": "",
        "id": "q12092",
        "input": "qmark notation python sql",
        "output": "",
        "rule": [
            "d12092"
        ]
    },
    {
        "instruction": "",
        "id": "q12093",
        "input": "postfix expression polish reverse number python",
        "output": "",
        "rule": [
            "d12093"
        ]
    },
    {
        "instruction": "",
        "id": "q12094",
        "input": "quick way to concatenate a lot of lists python",
        "output": "",
        "rule": [
            "d12094"
        ]
    },
    {
        "instruction": "",
        "id": "q12095",
        "input": "postgresql check table exists or not python",
        "output": "",
        "rule": [
            "d12095"
        ]
    },
    {
        "instruction": "",
        "id": "q12096",
        "input": "random state 21 means in python",
        "output": "",
        "rule": [
            "d12096"
        ]
    },
    {
        "instruction": "",
        "id": "q12097",
        "input": "ppython insert an space between a character and a number regex",
        "output": "",
        "rule": [
            "d12097"
        ]
    },
    {
        "instruction": "",
        "id": "q12098",
        "input": "read binary file into numpy array in python",
        "output": "",
        "rule": [
            "d12098"
        ]
    },
    {
        "instruction": "",
        "id": "q12099",
        "input": "prevent deep copy of object python",
        "output": "",
        "rule": [
            "d12099"
        ]
    },
    {
        "instruction": "",
        "id": "q12100",
        "input": "read binary file using array python'",
        "output": "",
        "rule": [
            "d12100"
        ]
    },
    {
        "instruction": "",
        "id": "q12101",
        "input": "print all object arguements python",
        "output": "",
        "rule": [
            "d12101"
        ]
    },
    {
        "instruction": "",
        "id": "q12102",
        "input": "read file and covert to int python",
        "output": "",
        "rule": [
            "d12102"
        ]
    },
    {
        "instruction": "",
        "id": "q12103",
        "input": "print clean stack trace python",
        "output": "",
        "rule": [
            "d12103"
        ]
    },
    {
        "instruction": "",
        "id": "q12104",
        "input": "read float from string list python",
        "output": "",
        "rule": [
            "d12104"
        ]
    },
    {
        "instruction": "",
        "id": "q12105",
        "input": "print first few lines in a python file",
        "output": "",
        "rule": [
            "d12105"
        ]
    },
    {
        "instruction": "",
        "id": "q12106",
        "input": "read png from url python",
        "output": "",
        "rule": [
            "d12106"
        ]
    },
    {
        "instruction": "",
        "id": "q12107",
        "input": "print list of docs in folder python",
        "output": "",
        "rule": [
            "d12107"
        ]
    },
    {
        "instruction": "",
        "id": "q12108",
        "input": "recreate python usb packets",
        "output": "",
        "rule": [
            "d12108"
        ]
    },
    {
        "instruction": "",
        "id": "q12109",
        "input": "print list table screen width python",
        "output": "",
        "rule": [
            "d12109"
        ]
    },
    {
        "instruction": "",
        "id": "q12110",
        "input": "recursive max function tuple python",
        "output": "",
        "rule": [
            "d12110"
        ]
    },
    {
        "instruction": "",
        "id": "q12111",
        "input": "print page content in python",
        "output": "",
        "rule": [
            "d12111"
        ]
    },
    {
        "instruction": "",
        "id": "q12112",
        "input": "recursive method for max element is sequence in python",
        "output": "",
        "rule": [
            "d12112"
        ]
    },
    {
        "instruction": "",
        "id": "q12113",
        "input": "print time taken by code in python",
        "output": "",
        "rule": [
            "d12113"
        ]
    },
    {
        "instruction": "",
        "id": "q12114",
        "input": "recursively flatten list python",
        "output": "",
        "rule": [
            "d12114"
        ]
    },
    {
        "instruction": "",
        "id": "q12115",
        "input": "print to a file instead of stdout in python",
        "output": "",
        "rule": [
            "d12115"
        ]
    },
    {
        "instruction": "",
        "id": "q12116",
        "input": "printing the items in a tuple in python",
        "output": "",
        "rule": [
            "d12116"
        ]
    },
    {
        "instruction": "",
        "id": "q12117",
        "input": "redhat django admin templates won't work with python but not apache",
        "output": "",
        "rule": [
            "d12117"
        ]
    },
    {
        "instruction": "",
        "id": "q12118",
        "input": "prnt stack trace in except python",
        "output": "",
        "rule": [
            "d12118"
        ]
    },
    {
        "instruction": "",
        "id": "q12119",
        "input": "redirect stdout python global",
        "output": "",
        "rule": [
            "d12119"
        ]
    },
    {
        "instruction": "",
        "id": "q12120",
        "input": "program that says is word is palindrome python",
        "output": "",
        "rule": [
            "d12120"
        ]
    },
    {
        "instruction": "",
        "id": "q12121",
        "input": "redis check key value size python",
        "output": "",
        "rule": [
            "d12121"
        ]
    },
    {
        "instruction": "",
        "id": "q12122",
        "input": "programmatic call methods in an instance python",
        "output": "",
        "rule": [
            "d12122"
        ]
    },
    {
        "instruction": "",
        "id": "q12123",
        "input": "redis drop key in redis python",
        "output": "",
        "rule": [
            "d12123"
        ]
    },
    {
        "instruction": "",
        "id": "q12124",
        "input": "protobuf into json in python",
        "output": "",
        "rule": [
            "d12124"
        ]
    },
    {
        "instruction": "",
        "id": "q12125",
        "input": "refelect only output only in web page load till analysis ready using python flask",
        "output": "",
        "rule": [
            "d12125"
        ]
    },
    {
        "instruction": "",
        "id": "q12126",
        "input": "protobuf message compare equal python",
        "output": "",
        "rule": [
            "d12126"
        ]
    },
    {
        "instruction": "",
        "id": "q12127",
        "input": "protobuf python add to zero length field",
        "output": "",
        "rule": [
            "d12127"
        ]
    },
    {
        "instruction": "",
        "id": "q12128",
        "input": "remove [u' and starting space from string using [python",
        "output": "",
        "rule": [
            "d12128"
        ]
    },
    {
        "instruction": "",
        "id": "q12129",
        "input": "remove all zeros from list python",
        "output": "",
        "rule": [
            "d12129"
        ]
    },
    {
        "instruction": "",
        "id": "q12130",
        "input": "py2exe python was not found registry",
        "output": "",
        "rule": [
            "d12130"
        ]
    },
    {
        "instruction": "",
        "id": "q12131",
        "input": "remove category python column transformer",
        "output": "",
        "rule": [
            "d12131"
        ]
    },
    {
        "instruction": "",
        "id": "q12132",
        "input": "pynb export to python script",
        "output": "",
        "rule": [
            "d12132"
        ]
    },
    {
        "instruction": "",
        "id": "q12133",
        "input": "remove common elements of a set python",
        "output": "",
        "rule": [
            "d12133"
        ]
    },
    {
        "instruction": "",
        "id": "q12134",
        "input": "python 2 datetime epoch to iso",
        "output": "",
        "rule": [
            "d12134"
        ]
    },
    {
        "instruction": "",
        "id": "q12135",
        "input": "remove duplicated list python",
        "output": "",
        "rule": [
            "d12135"
        ]
    },
    {
        "instruction": "",
        "id": "q12136",
        "input": "python 2 datetime fromtimestamp",
        "output": "",
        "rule": [
            "d12136"
        ]
    },
    {
        "instruction": "",
        "id": "q12137",
        "input": "remove empty strings from list python for new list",
        "output": "",
        "rule": [
            "d12137"
        ]
    },
    {
        "instruction": "",
        "id": "q12138",
        "input": "python 2 dimensonal bool matrix",
        "output": "",
        "rule": [
            "d12138"
        ]
    },
    {
        "instruction": "",
        "id": "q12139",
        "input": "remove everything between paranthesis string python",
        "output": "",
        "rule": [
            "d12139"
        ]
    },
    {
        "instruction": "",
        "id": "q12140",
        "input": "python 2d array remove sparse",
        "output": "",
        "rule": [
            "d12140"
        ]
    },
    {
        "instruction": "",
        "id": "q12141",
        "input": "remove last object from python list without deleting list",
        "output": "",
        "rule": [
            "d12141"
        ]
    },
    {
        "instruction": "",
        "id": "q12142",
        "input": "remove leading letter from string python",
        "output": "",
        "rule": [
            "d12142"
        ]
    },
    {
        "instruction": "",
        "id": "q12143",
        "input": "python 2to3 not recognized",
        "output": "",
        "rule": [
            "d12143"
        ]
    },
    {
        "instruction": "",
        "id": "q12144",
        "input": "remove list of words in python",
        "output": "",
        "rule": [
            "d12144"
        ]
    },
    {
        "instruction": "",
        "id": "q12145",
        "input": "python 3 argparse set defaults",
        "output": "",
        "rule": [
            "d12145"
        ]
    },
    {
        "instruction": "",
        "id": "q12146",
        "input": "remove noise from audio realtime python",
        "output": "",
        "rule": [
            "d12146"
        ]
    },
    {
        "instruction": "",
        "id": "q12147",
        "input": "python 3 check if object has a ffunction",
        "output": "",
        "rule": [
            "d12147"
        ]
    },
    {
        "instruction": "",
        "id": "q12148",
        "input": "remove rows with empty data in python",
        "output": "",
        "rule": [
            "d12148"
        ]
    },
    {
        "instruction": "",
        "id": "q12149",
        "input": "python 3 how to try getattr",
        "output": "",
        "rule": [
            "d12149"
        ]
    },
    {
        "instruction": "",
        "id": "q12150",
        "input": "remove timestamp datetime python",
        "output": "",
        "rule": [
            "d12150"
        ]
    },
    {
        "instruction": "",
        "id": "q12151",
        "input": "python 3 judge object is string or bytes'",
        "output": "",
        "rule": [
            "d12151"
        ]
    },
    {
        "instruction": "",
        "id": "q12152",
        "input": "python 3 logging rotatingfilehandler",
        "output": "",
        "rule": [
            "d12152"
        ]
    },
    {
        "instruction": "",
        "id": "q12153",
        "input": "remove white spaces on python column names",
        "output": "",
        "rule": [
            "d12153"
        ]
    },
    {
        "instruction": "",
        "id": "q12154",
        "input": "python 3 make single dictionary from csv with dictreader",
        "output": "",
        "rule": [
            "d12154"
        ]
    },
    {
        "instruction": "",
        "id": "q12155",
        "input": "python 3 multiprocessing pickling methods",
        "output": "",
        "rule": [
            "d12155"
        ]
    },
    {
        "instruction": "",
        "id": "q12156",
        "input": "removing a colon in a list of strings in python",
        "output": "",
        "rule": [
            "d12156"
        ]
    },
    {
        "instruction": "",
        "id": "q12157",
        "input": "python 3 namespace object is not iterable",
        "output": "",
        "rule": [
            "d12157"
        ]
    },
    {
        "instruction": "",
        "id": "q12158",
        "input": "removing leading letter python",
        "output": "",
        "rule": [
            "d12158"
        ]
    },
    {
        "instruction": "",
        "id": "q12159",
        "input": "python 3 numpy read raw file bytes",
        "output": "",
        "rule": [
            "d12159"
        ]
    },
    {
        "instruction": "",
        "id": "q12160",
        "input": "removing mentions, emojis and hashtags from a tweet python",
        "output": "",
        "rule": [
            "d12160"
        ]
    },
    {
        "instruction": "",
        "id": "q12161",
        "input": "python 3 ordered set",
        "output": "",
        "rule": [
            "d12161"
        ]
    },
    {
        "instruction": "",
        "id": "q12162",
        "input": "removing namespace from xml python",
        "output": "",
        "rule": [
            "d12162"
        ]
    },
    {
        "instruction": "",
        "id": "q12163",
        "input": "python 3 print formated columns",
        "output": "",
        "rule": [
            "d12163"
        ]
    },
    {
        "instruction": "",
        "id": "q12164",
        "input": "remvoing exclamaiton markes and commas from list python",
        "output": "",
        "rule": [
            "d12164"
        ]
    },
    {
        "instruction": "",
        "id": "q12165",
        "input": "renaming a key in a dictionary python",
        "output": "",
        "rule": [
            "d12165"
        ]
    },
    {
        "instruction": "",
        "id": "q12166",
        "input": "python 3 read first line of file",
        "output": "",
        "rule": [
            "d12166"
        ]
    },
    {
        "instruction": "",
        "id": "q12167",
        "input": "replace a character with a macron in python",
        "output": "",
        "rule": [
            "d12167"
        ]
    },
    {
        "instruction": "",
        "id": "q12168",
        "input": "replace a list with underscores in python",
        "output": "",
        "rule": [
            "d12168"
        ]
    },
    {
        "instruction": "",
        "id": "q12169",
        "input": "python 3 rounding or floats",
        "output": "",
        "rule": [
            "d12169"
        ]
    },
    {
        "instruction": "",
        "id": "q12170",
        "input": "replace function python regex",
        "output": "",
        "rule": [
            "d12170"
        ]
    },
    {
        "instruction": "",
        "id": "q12171",
        "input": "python 3 sys stdin read",
        "output": "",
        "rule": [
            "d12171"
        ]
    },
    {
        "instruction": "",
        "id": "q12172",
        "input": "python 3 unit test mock patch",
        "output": "",
        "rule": [
            "d12172"
        ]
    },
    {
        "instruction": "",
        "id": "q12173",
        "input": "replace strings by dictionary key values python",
        "output": "",
        "rule": [
            "d12173"
        ]
    },
    {
        "instruction": "",
        "id": "q12174",
        "input": "replace words in a dictionary python",
        "output": "",
        "rule": [
            "d12174"
        ]
    },
    {
        "instruction": "",
        "id": "q12175",
        "input": "python a equals whatever b is",
        "output": "",
        "rule": [
            "d12175"
        ]
    },
    {
        "instruction": "",
        "id": "q12176",
        "input": "requests python disable insecurerequest",
        "output": "",
        "rule": [
            "d12176"
        ]
    },
    {
        "instruction": "",
        "id": "q12177",
        "input": "python a set without unique characters",
        "output": "",
        "rule": [
            "d12177"
        ]
    },
    {
        "instruction": "",
        "id": "q12178",
        "input": "reset screen in matlibplot python",
        "output": "",
        "rule": [
            "d12178"
        ]
    },
    {
        "instruction": "",
        "id": "q12179",
        "input": "python a stringio object",
        "output": "",
        "rule": [
            "d12179"
        ]
    },
    {
        "instruction": "",
        "id": "q12180",
        "input": "reshape data frame in python",
        "output": "",
        "rule": [
            "d12180"
        ]
    },
    {
        "instruction": "",
        "id": "q12181",
        "input": "reshape higher dimension array python",
        "output": "",
        "rule": [
            "d12181"
        ]
    },
    {
        "instruction": "",
        "id": "q12182",
        "input": "python access next item",
        "output": "",
        "rule": [
            "d12182"
        ]
    },
    {
        "instruction": "",
        "id": "q12183",
        "input": "reshape to wide in python",
        "output": "",
        "rule": [
            "d12183"
        ]
    },
    {
        "instruction": "",
        "id": "q12184",
        "input": "python add a year to datetime",
        "output": "",
        "rule": [
            "d12184"
        ]
    },
    {
        "instruction": "",
        "id": "q12185",
        "input": "restart sequence python sqlalchemy postgres",
        "output": "",
        "rule": [
            "d12185"
        ]
    },
    {
        "instruction": "",
        "id": "q12186",
        "input": "python add prefix to every line",
        "output": "",
        "rule": [
            "d12186"
        ]
    },
    {
        "instruction": "",
        "id": "q12187",
        "input": "retreiving results from redis python",
        "output": "",
        "rule": [
            "d12187"
        ]
    },
    {
        "instruction": "",
        "id": "q12188",
        "input": "python add progress bar in multiprocessing starmap",
        "output": "",
        "rule": [
            "d12188"
        ]
    },
    {
        "instruction": "",
        "id": "q12189",
        "input": "python add properties using kwargs",
        "output": "",
        "rule": [
            "d12189"
        ]
    },
    {
        "instruction": "",
        "id": "q12190",
        "input": "retrieve last modified file in a folder in python",
        "output": "",
        "rule": [
            "d12190"
        ]
    },
    {
        "instruction": "",
        "id": "q12191",
        "input": "python add random gaussian noise image",
        "output": "",
        "rule": [
            "d12191"
        ]
    },
    {
        "instruction": "",
        "id": "q12192",
        "input": "retrieve multiple return values from parametrised function python",
        "output": "",
        "rule": [
            "d12192"
        ]
    },
    {
        "instruction": "",
        "id": "q12193",
        "input": "python add spaces after capital letter in string",
        "output": "",
        "rule": [
            "d12193"
        ]
    },
    {
        "instruction": "",
        "id": "q12194",
        "input": "return a colunm as a list in python",
        "output": "",
        "rule": [
            "d12194"
        ]
    },
    {
        "instruction": "",
        "id": "q12195",
        "input": "python add string to logger",
        "output": "",
        "rule": [
            "d12195"
        ]
    },
    {
        "instruction": "",
        "id": "q12196",
        "input": "return a string representation of the object python",
        "output": "",
        "rule": [
            "d12196"
        ]
    },
    {
        "instruction": "",
        "id": "q12197",
        "input": "python add windows domainname",
        "output": "",
        "rule": [
            "d12197"
        ]
    },
    {
        "instruction": "",
        "id": "q12198",
        "input": "return c buffer to python",
        "output": "",
        "rule": [
            "d12198"
        ]
    },
    {
        "instruction": "",
        "id": "q12199",
        "input": "python allocate memory with pagealign",
        "output": "",
        "rule": [
            "d12199"
        ]
    },
    {
        "instruction": "",
        "id": "q12200",
        "input": "return index of series python",
        "output": "",
        "rule": [
            "d12200"
        ]
    },
    {
        "instruction": "",
        "id": "q12201",
        "input": "python allow pickling of custom functions",
        "output": "",
        "rule": [
            "d12201"
        ]
    },
    {
        "instruction": "",
        "id": "q12202",
        "input": "python amount of time elapsed",
        "output": "",
        "rule": [
            "d12202"
        ]
    },
    {
        "instruction": "",
        "id": "q12203",
        "input": "return top row of table python",
        "output": "",
        "rule": [
            "d12203"
        ]
    },
    {
        "instruction": "",
        "id": "q12204",
        "input": "python angle from two points",
        "output": "",
        "rule": [
            "d12204"
        ]
    },
    {
        "instruction": "",
        "id": "q12205",
        "input": "return type of function id in python",
        "output": "",
        "rule": [
            "d12205"
        ]
    },
    {
        "instruction": "",
        "id": "q12206",
        "input": "python angle of two segments",
        "output": "",
        "rule": [
            "d12206"
        ]
    },
    {
        "instruction": "",
        "id": "q12207",
        "input": "python apply rigid transformation 3d",
        "output": "",
        "rule": [
            "d12207"
        ]
    },
    {
        "instruction": "",
        "id": "q12208",
        "input": "returns the number of characters in the string, excluding all whitespace python",
        "output": "",
        "rule": [
            "d12208"
        ]
    },
    {
        "instruction": "",
        "id": "q12209",
        "input": "python argmin of all min elements",
        "output": "",
        "rule": [
            "d12209"
        ]
    },
    {
        "instruction": "",
        "id": "q12210",
        "input": "rotate a matrix element in python",
        "output": "",
        "rule": [
            "d12210"
        ]
    },
    {
        "instruction": "",
        "id": "q12211",
        "input": "rotate cv2 image 90 degreses python",
        "output": "",
        "rule": [
            "d12211"
        ]
    },
    {
        "instruction": "",
        "id": "q12212",
        "input": "python argparse is value the default or did user specify",
        "output": "",
        "rule": [
            "d12212"
        ]
    },
    {
        "instruction": "",
        "id": "q12213",
        "input": "rotating image using opencv or matplotlib in python",
        "output": "",
        "rule": [
            "d12213"
        ]
    },
    {
        "instruction": "",
        "id": "q12214",
        "input": "python argparse set default help message",
        "output": "",
        "rule": [
            "d12214"
        ]
    },
    {
        "instruction": "",
        "id": "q12215",
        "input": "round datetime value to nearest minute python",
        "output": "",
        "rule": [
            "d12215"
        ]
    },
    {
        "instruction": "",
        "id": "q12216",
        "input": "python argparse set variable",
        "output": "",
        "rule": [
            "d12216"
        ]
    },
    {
        "instruction": "",
        "id": "q12217",
        "input": "round number to significant figures python",
        "output": "",
        "rule": [
            "d12217"
        ]
    },
    {
        "instruction": "",
        "id": "q12218",
        "input": "python argparse show default value",
        "output": "",
        "rule": [
            "d12218"
        ]
    },
    {
        "instruction": "",
        "id": "q12219",
        "input": "round numbers to int in python",
        "output": "",
        "rule": [
            "d12219"
        ]
    },
    {
        "instruction": "",
        "id": "q12220",
        "input": "python argparse valid enum",
        "output": "",
        "rule": [
            "d12220"
        ]
    },
    {
        "instruction": "",
        "id": "q12221",
        "input": "run the python code using jupytor",
        "output": "",
        "rule": [
            "d12221"
        ]
    },
    {
        "instruction": "",
        "id": "q12222",
        "input": "python argparse with different delimiter",
        "output": "",
        "rule": [
            "d12222"
        ]
    },
    {
        "instruction": "",
        "id": "q12223",
        "input": "running python codes on jupitor",
        "output": "",
        "rule": [
            "d12223"
        ]
    },
    {
        "instruction": "",
        "id": "q12224",
        "input": "python args test if optional passed",
        "output": "",
        "rule": [
            "d12224"
        ]
    },
    {
        "instruction": "",
        "id": "q12225",
        "input": "s there a way to have a python discord bot mute someone",
        "output": "",
        "rule": [
            "d12225"
        ]
    },
    {
        "instruction": "",
        "id": "q12226",
        "input": "python array slice dont include last element",
        "output": "",
        "rule": [
            "d12226"
        ]
    },
    {
        "instruction": "",
        "id": "q12227",
        "input": "save a variable to file python",
        "output": "",
        "rule": [
            "d12227"
        ]
    },
    {
        "instruction": "",
        "id": "q12228",
        "input": "python array slice end",
        "output": "",
        "rule": [
            "d12228"
        ]
    },
    {
        "instruction": "",
        "id": "q12229",
        "input": "save figure as a pdf python",
        "output": "",
        "rule": [
            "d12229"
        ]
    },
    {
        "instruction": "",
        "id": "q12230",
        "input": "python array with logarithm",
        "output": "",
        "rule": [
            "d12230"
        ]
    },
    {
        "instruction": "",
        "id": "q12231",
        "input": "save figure as pdf python",
        "output": "",
        "rule": [
            "d12231"
        ]
    },
    {
        "instruction": "",
        "id": "q12232",
        "input": "save image after resizing python",
        "output": "",
        "rule": [
            "d12232"
        ]
    },
    {
        "instruction": "",
        "id": "q12233",
        "input": "python asyncio streaming data from iterable",
        "output": "",
        "rule": [
            "d12233"
        ]
    },
    {
        "instruction": "",
        "id": "q12234",
        "input": "save list of list to csv python",
        "output": "",
        "rule": [
            "d12234"
        ]
    },
    {
        "instruction": "",
        "id": "q12235",
        "input": "python asyncio syncio hybrid",
        "output": "",
        "rule": [
            "d12235"
        ]
    },
    {
        "instruction": "",
        "id": "q12236",
        "input": "select the nth element in an array in python",
        "output": "",
        "rule": [
            "d12236"
        ]
    },
    {
        "instruction": "",
        "id": "q12237",
        "input": "python auto test setup teardown",
        "output": "",
        "rule": [
            "d12237"
        ]
    },
    {
        "instruction": "",
        "id": "q12238",
        "input": "sentence to list of words python",
        "output": "",
        "rule": [
            "d12238"
        ]
    },
    {
        "instruction": "",
        "id": "q12239",
        "input": "session cookies save python request",
        "output": "",
        "rule": [
            "d12239"
        ]
    },
    {
        "instruction": "",
        "id": "q12240",
        "input": "python automatically close figure",
        "output": "",
        "rule": [
            "d12240"
        ]
    },
    {
        "instruction": "",
        "id": "q12241",
        "input": "set default dictionary python",
        "output": "",
        "rule": [
            "d12241"
        ]
    },
    {
        "instruction": "",
        "id": "q12242",
        "input": "python average length of words in a sentence",
        "output": "",
        "rule": [
            "d12242"
        ]
    },
    {
        "instruction": "",
        "id": "q12243",
        "input": "set graphical table column width in ironpython",
        "output": "",
        "rule": [
            "d12243"
        ]
    },
    {
        "instruction": "",
        "id": "q12244",
        "input": "python base64 decode byte array",
        "output": "",
        "rule": [
            "d12244"
        ]
    },
    {
        "instruction": "",
        "id": "q12245",
        "input": "set python ctype pointer to null",
        "output": "",
        "rule": [
            "d12245"
        ]
    },
    {
        "instruction": "",
        "id": "q12246",
        "input": "python based c++ build script",
        "output": "",
        "rule": [
            "d12246"
        ]
    },
    {
        "instruction": "",
        "id": "q12247",
        "input": "set xticks for every axes python",
        "output": "",
        "rule": [
            "d12247"
        ]
    },
    {
        "instruction": "",
        "id": "q12248",
        "input": "python basehttpserver don't log",
        "output": "",
        "rule": [
            "d12248"
        ]
    },
    {
        "instruction": "",
        "id": "q12249",
        "input": "setting a python global variabe",
        "output": "",
        "rule": [
            "d12249"
        ]
    },
    {
        "instruction": "",
        "id": "q12250",
        "input": "python basehttpserver serve a directory",
        "output": "",
        "rule": [
            "d12250"
        ]
    },
    {
        "instruction": "",
        "id": "q12251",
        "input": "setting a variable equal to string python typing",
        "output": "",
        "rule": [
            "d12251"
        ]
    },
    {
        "instruction": "",
        "id": "q12252",
        "input": "python beautifulsoup get every anchor tag that has an href",
        "output": "",
        "rule": [
            "d12252"
        ]
    },
    {
        "instruction": "",
        "id": "q12253",
        "input": "setting avariable to a boolean python",
        "output": "",
        "rule": [
            "d12253"
        ]
    },
    {
        "instruction": "",
        "id": "q12254",
        "input": "python blocks of same values matrix",
        "output": "",
        "rule": [
            "d12254"
        ]
    },
    {
        "instruction": "",
        "id": "q12255",
        "input": "setting memory limits on python",
        "output": "",
        "rule": [
            "d12255"
        ]
    },
    {
        "instruction": "",
        "id": "q12256",
        "input": "python bokeh standalone css",
        "output": "",
        "rule": [
            "d12256"
        ]
    },
    {
        "instruction": "",
        "id": "q12257",
        "input": "setting python path for shared objects",
        "output": "",
        "rule": [
            "d12257"
        ]
    },
    {
        "instruction": "",
        "id": "q12258",
        "input": "python bookean fields in if condition",
        "output": "",
        "rule": [
            "d12258"
        ]
    },
    {
        "instruction": "",
        "id": "q12259",
        "input": "setting up sslcontext for https python 3",
        "output": "",
        "rule": [
            "d12259"
        ]
    },
    {
        "instruction": "",
        "id": "q12260",
        "input": "python boolean type in sprintf type",
        "output": "",
        "rule": [
            "d12260"
        ]
    },
    {
        "instruction": "",
        "id": "q12261",
        "input": "shift by an year date python",
        "output": "",
        "rule": [
            "d12261"
        ]
    },
    {
        "instruction": "",
        "id": "q12262",
        "input": "python boto get contents of s3 file",
        "output": "",
        "rule": [
            "d12262"
        ]
    },
    {
        "instruction": "",
        "id": "q12263",
        "input": "show actual character not encoding in python",
        "output": "",
        "rule": [
            "d12263"
        ]
    },
    {
        "instruction": "",
        "id": "q12264",
        "input": "python boto3 rds external access",
        "output": "",
        "rule": [
            "d12264"
        ]
    },
    {
        "instruction": "",
        "id": "q12265",
        "input": "shuffle data in array in python",
        "output": "",
        "rule": [
            "d12265"
        ]
    },
    {
        "instruction": "",
        "id": "q12266",
        "input": "shuffle data of a 2d array with non equal rows and cols in python",
        "output": "",
        "rule": [
            "d12266"
        ]
    },
    {
        "instruction": "",
        "id": "q12267",
        "input": "python build a dictionary with unique",
        "output": "",
        "rule": [
            "d12267"
        ]
    },
    {
        "instruction": "",
        "id": "q12268",
        "input": "shuffling an array randomly in python",
        "output": "",
        "rule": [
            "d12268"
        ]
    },
    {
        "instruction": "",
        "id": "q12269",
        "input": "python build markdown to html",
        "output": "",
        "rule": [
            "d12269"
        ]
    },
    {
        "instruction": "",
        "id": "q12270",
        "input": "siomplify datetime to months python",
        "output": "",
        "rule": [
            "d12270"
        ]
    },
    {
        "instruction": "",
        "id": "q12271",
        "input": "python byte array from file",
        "output": "",
        "rule": [
            "d12271"
        ]
    },
    {
        "instruction": "",
        "id": "q12272",
        "input": "slice list in half python",
        "output": "",
        "rule": [
            "d12272"
        ]
    },
    {
        "instruction": "",
        "id": "q12273",
        "input": "python bytes to int32",
        "output": "",
        "rule": [
            "d12273"
        ]
    },
    {
        "instruction": "",
        "id": "q12274",
        "input": "slicing datasets with array using python",
        "output": "",
        "rule": [
            "d12274"
        ]
    },
    {
        "instruction": "",
        "id": "q12275",
        "input": "python bytesio size limitation",
        "output": "",
        "rule": [
            "d12275"
        ]
    },
    {
        "instruction": "",
        "id": "q12276",
        "input": "sort a dataset in python using date as a paramter",
        "output": "",
        "rule": [
            "d12276"
        ]
    },
    {
        "instruction": "",
        "id": "q12277",
        "input": "python cache reading data",
        "output": "",
        "rule": [
            "d12277"
        ]
    },
    {
        "instruction": "",
        "id": "q12278",
        "input": "space to underscore function python",
        "output": "",
        "rule": [
            "d12278"
        ]
    },
    {
        "instruction": "",
        "id": "q12279",
        "input": "python calculate md5 of file",
        "output": "",
        "rule": [
            "d12279"
        ]
    },
    {
        "instruction": "",
        "id": "q12280",
        "input": "sparse matrix not zero index python",
        "output": "",
        "rule": [
            "d12280"
        ]
    },
    {
        "instruction": "",
        "id": "q12281",
        "input": "python calculate previous month using timedelta",
        "output": "",
        "rule": [
            "d12281"
        ]
    },
    {
        "instruction": "",
        "id": "q12282",
        "input": "specify python response as json",
        "output": "",
        "rule": [
            "d12282"
        ]
    },
    {
        "instruction": "",
        "id": "q12283",
        "input": "python calculate total distance using multiple lat and long",
        "output": "",
        "rule": [
            "d12283"
        ]
    },
    {
        "instruction": "",
        "id": "q12284",
        "input": "specifying path in python s3 bucket",
        "output": "",
        "rule": [
            "d12284"
        ]
    },
    {
        "instruction": "",
        "id": "q12285",
        "input": "python calendar number of days in month",
        "output": "",
        "rule": [
            "d12285"
        ]
    },
    {
        "instruction": "",
        "id": "q12286",
        "input": "split a string every n characters python",
        "output": "",
        "rule": [
            "d12286"
        ]
    },
    {
        "instruction": "",
        "id": "q12287",
        "input": "python call java jni",
        "output": "",
        "rule": [
            "d12287"
        ]
    },
    {
        "instruction": "",
        "id": "q12288",
        "input": "split array into chunks of same numbers python",
        "output": "",
        "rule": [
            "d12288"
        ]
    },
    {
        "instruction": "",
        "id": "q12289",
        "input": "python calling a function from a tuple",
        "output": "",
        "rule": [
            "d12289"
        ]
    },
    {
        "instruction": "",
        "id": "q12290",
        "input": "splitting files into chunks in python",
        "output": "",
        "rule": [
            "d12290"
        ]
    },
    {
        "instruction": "",
        "id": "q12291",
        "input": "python can devices info",
        "output": "",
        "rule": [
            "d12291"
        ]
    },
    {
        "instruction": "",
        "id": "q12292",
        "input": "sql developer constraint with primary key python",
        "output": "",
        "rule": [
            "d12292"
        ]
    },
    {
        "instruction": "",
        "id": "q12293",
        "input": "python can imwrite make gifs",
        "output": "",
        "rule": [
            "d12293"
        ]
    },
    {
        "instruction": "",
        "id": "q12294",
        "input": "sqlachemu python foreign key reflective base",
        "output": "",
        "rule": [
            "d12294"
        ]
    },
    {
        "instruction": "",
        "id": "q12295",
        "input": "python can you cast",
        "output": "",
        "rule": [
            "d12295"
        ]
    },
    {
        "instruction": "",
        "id": "q12296",
        "input": "sqlalchemy how to delete all th records in a table python",
        "output": "",
        "rule": [
            "d12296"
        ]
    },
    {
        "instruction": "",
        "id": "q12297",
        "input": "python capture file creation date",
        "output": "",
        "rule": [
            "d12297"
        ]
    },
    {
        "instruction": "",
        "id": "q12298",
        "input": "sqllite3 python get max id col",
        "output": "",
        "rule": [
            "d12298"
        ]
    },
    {
        "instruction": "",
        "id": "q12299",
        "input": "python case insensitve string comparison",
        "output": "",
        "rule": [
            "d12299"
        ]
    },
    {
        "instruction": "",
        "id": "q12300",
        "input": "python cast a list of string into float",
        "output": "",
        "rule": [
            "d12300"
        ]
    },
    {
        "instruction": "",
        "id": "q12301",
        "input": "stack overflow python databases in co",
        "output": "",
        "rule": [
            "d12301"
        ]
    },
    {
        "instruction": "",
        "id": "q12302",
        "input": "python cast as bytes",
        "output": "",
        "rule": [
            "d12302"
        ]
    },
    {
        "instruction": "",
        "id": "q12303",
        "input": "stack overflow python rank",
        "output": "",
        "rule": [
            "d12303"
        ]
    },
    {
        "instruction": "",
        "id": "q12304",
        "input": "python cast multiple columns as datatype at once",
        "output": "",
        "rule": [
            "d12304"
        ]
    },
    {
        "instruction": "",
        "id": "q12305",
        "input": "stacked time series plot in python",
        "output": "",
        "rule": [
            "d12305"
        ]
    },
    {
        "instruction": "",
        "id": "q12306",
        "input": "python catch opencv corrupt jpeg data",
        "output": "",
        "rule": [
            "d12306"
        ]
    },
    {
        "instruction": "",
        "id": "q12307",
        "input": "stackoverflow python dtype of a column",
        "output": "",
        "rule": [
            "d12307"
        ]
    },
    {
        "instruction": "",
        "id": "q12308",
        "input": "python ceate random file name",
        "output": "",
        "rule": [
            "d12308"
        ]
    },
    {
        "instruction": "",
        "id": "q12309",
        "input": "stackoverflow python unzip file",
        "output": "",
        "rule": [
            "d12309"
        ]
    },
    {
        "instruction": "",
        "id": "q12310",
        "input": "python center region in square",
        "output": "",
        "rule": [
            "d12310"
        ]
    },
    {
        "instruction": "",
        "id": "q12311",
        "input": "static folder config in python flask",
        "output": "",
        "rule": [
            "d12311"
        ]
    },
    {
        "instruction": "",
        "id": "q12312",
        "input": "stop a running thread python",
        "output": "",
        "rule": [
            "d12312"
        ]
    },
    {
        "instruction": "",
        "id": "q12313",
        "input": "python change all column row values nan to zero",
        "output": "",
        "rule": [
            "d12313"
        ]
    },
    {
        "instruction": "",
        "id": "q12314",
        "input": "python change data type in data frame",
        "output": "",
        "rule": [
            "d12314"
        ]
    },
    {
        "instruction": "",
        "id": "q12315",
        "input": "store the column values as a list in python",
        "output": "",
        "rule": [
            "d12315"
        ]
    },
    {
        "instruction": "",
        "id": "q12316",
        "input": "python change date format of a column",
        "output": "",
        "rule": [
            "d12316"
        ]
    },
    {
        "instruction": "",
        "id": "q12317",
        "input": "str function python precision",
        "output": "",
        "rule": [
            "d12317"
        ]
    },
    {
        "instruction": "",
        "id": "q12318",
        "input": "python change date format of variable",
        "output": "",
        "rule": [
            "d12318"
        ]
    },
    {
        "instruction": "",
        "id": "q12319",
        "input": "string get file from path python",
        "output": "",
        "rule": [
            "d12319"
        ]
    },
    {
        "instruction": "",
        "id": "q12320",
        "input": "python change dictionary in for loop",
        "output": "",
        "rule": [
            "d12320"
        ]
    },
    {
        "instruction": "",
        "id": "q12321",
        "input": "string of binary to int python",
        "output": "",
        "rule": [
            "d12321"
        ]
    },
    {
        "instruction": "",
        "id": "q12322",
        "input": "python change file permissions execution",
        "output": "",
        "rule": [
            "d12322"
        ]
    },
    {
        "instruction": "",
        "id": "q12323",
        "input": "string of binary to intpython",
        "output": "",
        "rule": [
            "d12323"
        ]
    },
    {
        "instruction": "",
        "id": "q12324",
        "input": "python change file to readonly",
        "output": "",
        "rule": [
            "d12324"
        ]
    },
    {
        "instruction": "",
        "id": "q12325",
        "input": "string replace python multiple substring",
        "output": "",
        "rule": [
            "d12325"
        ]
    },
    {
        "instruction": "",
        "id": "q12326",
        "input": "python change lowercase to uppercase input",
        "output": "",
        "rule": [
            "d12326"
        ]
    },
    {
        "instruction": "",
        "id": "q12327",
        "input": "string to callable name python",
        "output": "",
        "rule": [
            "d12327"
        ]
    },
    {
        "instruction": "",
        "id": "q12328",
        "input": "python change str to float",
        "output": "",
        "rule": [
            "d12328"
        ]
    },
    {
        "instruction": "",
        "id": "q12329",
        "input": "string transformation python hangman",
        "output": "",
        "rule": [
            "d12329"
        ]
    },
    {
        "instruction": "",
        "id": "q12330",
        "input": "string with spaces in single array python",
        "output": "",
        "rule": [
            "d12330"
        ]
    },
    {
        "instruction": "",
        "id": "q12331",
        "input": "python change string into date object",
        "output": "",
        "rule": [
            "d12331"
        ]
    },
    {
        "instruction": "",
        "id": "q12332",
        "input": "strings python double or single quote",
        "output": "",
        "rule": [
            "d12332"
        ]
    },
    {
        "instruction": "",
        "id": "q12333",
        "input": "python change the encoding of stdin",
        "output": "",
        "rule": [
            "d12333"
        ]
    },
    {
        "instruction": "",
        "id": "q12334",
        "input": "strip fragment from url python",
        "output": "",
        "rule": [
            "d12334"
        ]
    },
    {
        "instruction": "",
        "id": "q12335",
        "input": "python check 2 float is equal",
        "output": "",
        "rule": [
            "d12335"
        ]
    },
    {
        "instruction": "",
        "id": "q12336",
        "input": "style not loading if python compiled django",
        "output": "",
        "rule": [
            "d12336"
        ]
    },
    {
        "instruction": "",
        "id": "q12337",
        "input": "python check a var is iterable",
        "output": "",
        "rule": [
            "d12337"
        ]
    },
    {
        "instruction": "",
        "id": "q12338",
        "input": "submit information to a form python",
        "output": "",
        "rule": [
            "d12338"
        ]
    },
    {
        "instruction": "",
        "id": "q12339",
        "input": "python check all are none or none are none",
        "output": "",
        "rule": [
            "d12339"
        ]
    },
    {
        "instruction": "",
        "id": "q12340",
        "input": "subprocess stdin from python thread",
        "output": "",
        "rule": [
            "d12340"
        ]
    },
    {
        "instruction": "",
        "id": "q12341",
        "input": "python check current file size",
        "output": "",
        "rule": [
            "d12341"
        ]
    },
    {
        "instruction": "",
        "id": "q12342",
        "input": "subset a list using a list of indices in python",
        "output": "",
        "rule": [
            "d12342"
        ]
    },
    {
        "instruction": "",
        "id": "q12343",
        "input": "python check current os is linux",
        "output": "",
        "rule": [
            "d12343"
        ]
    },
    {
        "instruction": "",
        "id": "q12344",
        "input": "surrounding a variable with parentheses python",
        "output": "",
        "rule": [
            "d12344"
        ]
    },
    {
        "instruction": "",
        "id": "q12345",
        "input": "python check empty matrix",
        "output": "",
        "rule": [
            "d12345"
        ]
    },
    {
        "instruction": "",
        "id": "q12346",
        "input": "swig c++ map to python dict",
        "output": "",
        "rule": [
            "d12346"
        ]
    },
    {
        "instruction": "",
        "id": "q12347",
        "input": "python check env is exists",
        "output": "",
        "rule": [
            "d12347"
        ]
    },
    {
        "instruction": "",
        "id": "q12348",
        "input": "take only non na values python",
        "output": "",
        "rule": [
            "d12348"
        ]
    },
    {
        "instruction": "",
        "id": "q12349",
        "input": "python check filename in in a list of extension",
        "output": "",
        "rule": [
            "d12349"
        ]
    },
    {
        "instruction": "",
        "id": "q12350",
        "input": "taking the average of elements in a list python",
        "output": "",
        "rule": [
            "d12350"
        ]
    },
    {
        "instruction": "",
        "id": "q12351",
        "input": "python check for empty value in float object",
        "output": "",
        "rule": [
            "d12351"
        ]
    },
    {
        "instruction": "",
        "id": "q12352",
        "input": "telnet connection test python loop",
        "output": "",
        "rule": [
            "d12352"
        ]
    },
    {
        "instruction": "",
        "id": "q12353",
        "input": "python check for mouse pointer",
        "output": "",
        "rule": [
            "d12353"
        ]
    },
    {
        "instruction": "",
        "id": "q12354",
        "input": "test end of file in python",
        "output": "",
        "rule": [
            "d12354"
        ]
    },
    {
        "instruction": "",
        "id": "q12355",
        "input": "python check for run as admin",
        "output": "",
        "rule": [
            "d12355"
        ]
    },
    {
        "instruction": "",
        "id": "q12356",
        "input": "test if a variable is an array python",
        "output": "",
        "rule": [
            "d12356"
        ]
    },
    {
        "instruction": "",
        "id": "q12357",
        "input": "python check if all elements satisfy a condtion",
        "output": "",
        "rule": [
            "d12357"
        ]
    },
    {
        "instruction": "",
        "id": "q12358",
        "input": "test if field is empty python",
        "output": "",
        "rule": [
            "d12358"
        ]
    },
    {
        "instruction": "",
        "id": "q12359",
        "input": "python check if dictionary are the same",
        "output": "",
        "rule": [
            "d12359"
        ]
    },
    {
        "instruction": "",
        "id": "q12360",
        "input": "test lenght o list python",
        "output": "",
        "rule": [
            "d12360"
        ]
    },
    {
        "instruction": "",
        "id": "q12361",
        "input": "text type and size in shell for python",
        "output": "",
        "rule": [
            "d12361"
        ]
    },
    {
        "instruction": "",
        "id": "q12362",
        "input": "python check if enum is",
        "output": "",
        "rule": [
            "d12362"
        ]
    },
    {
        "instruction": "",
        "id": "q12363",
        "input": "tf idf during single testing python",
        "output": "",
        "rule": [
            "d12363"
        ]
    },
    {
        "instruction": "",
        "id": "q12364",
        "input": "python check if enum value exists",
        "output": "",
        "rule": [
            "d12364"
        ]
    },
    {
        "instruction": "",
        "id": "q12365",
        "input": "the begining charecterr for a print function python",
        "output": "",
        "rule": [
            "d12365"
        ]
    },
    {
        "instruction": "",
        "id": "q12366",
        "input": "python check if field is empty",
        "output": "",
        "rule": [
            "d12366"
        ]
    },
    {
        "instruction": "",
        "id": "q12367",
        "input": "the best way to load a text file into python or matlab file",
        "output": "",
        "rule": [
            "d12367"
        ]
    },
    {
        "instruction": "",
        "id": "q12368",
        "input": "the kth largest in a array python",
        "output": "",
        "rule": [
            "d12368"
        ]
    },
    {
        "instruction": "",
        "id": "q12369",
        "input": "python check if file excists on harddrive",
        "output": "",
        "rule": [
            "d12369"
        ]
    },
    {
        "instruction": "",
        "id": "q12370",
        "input": "the last first element from the queue to the end python",
        "output": "",
        "rule": [
            "d12370"
        ]
    },
    {
        "instruction": "",
        "id": "q12371",
        "input": "python check if file has extension",
        "output": "",
        "rule": [
            "d12371"
        ]
    },
    {
        "instruction": "",
        "id": "q12372",
        "input": "the self python stack",
        "output": "",
        "rule": [
            "d12372"
        ]
    },
    {
        "instruction": "",
        "id": "q12373",
        "input": "the similarity of sentences python code",
        "output": "",
        "rule": [
            "d12373"
        ]
    },
    {
        "instruction": "",
        "id": "q12374",
        "input": "python check if file is readable",
        "output": "",
        "rule": [
            "d12374"
        ]
    },
    {
        "instruction": "",
        "id": "q12375",
        "input": "to check if object doesnt have attribute valu python",
        "output": "",
        "rule": [
            "d12375"
        ]
    },
    {
        "instruction": "",
        "id": "q12376",
        "input": "python check if file is writable",
        "output": "",
        "rule": [
            "d12376"
        ]
    },
    {
        "instruction": "",
        "id": "q12377",
        "input": "to isoformat python no timezone",
        "output": "",
        "rule": [
            "d12377"
        ]
    },
    {
        "instruction": "",
        "id": "q12378",
        "input": "python check if folder empty",
        "output": "",
        "rule": [
            "d12378"
        ]
    },
    {
        "instruction": "",
        "id": "q12379",
        "input": "to replace the extension of a file in python",
        "output": "",
        "rule": [
            "d12379"
        ]
    },
    {
        "instruction": "",
        "id": "q12380",
        "input": "python check if input string is empty",
        "output": "",
        "rule": [
            "d12380"
        ]
    },
    {
        "instruction": "",
        "id": "q12381",
        "input": "to use json numeric value in python",
        "output": "",
        "rule": [
            "d12381"
        ]
    },
    {
        "instruction": "",
        "id": "q12382",
        "input": "top values in column python",
        "output": "",
        "rule": [
            "d12382"
        ]
    },
    {
        "instruction": "",
        "id": "q12383",
        "input": "python check if it is a vector",
        "output": "",
        "rule": [
            "d12383"
        ]
    },
    {
        "instruction": "",
        "id": "q12384",
        "input": "track how long a function takes to run in python",
        "output": "",
        "rule": [
            "d12384"
        ]
    },
    {
        "instruction": "",
        "id": "q12385",
        "input": "python check if line is a comment",
        "output": "",
        "rule": [
            "d12385"
        ]
    },
    {
        "instruction": "",
        "id": "q12386",
        "input": "transfer python network graph to javascript",
        "output": "",
        "rule": [
            "d12386"
        ]
    },
    {
        "instruction": "",
        "id": "q12387",
        "input": "python check if list is string",
        "output": "",
        "rule": [
            "d12387"
        ]
    },
    {
        "instruction": "",
        "id": "q12388",
        "input": "transform 1d array to list python",
        "output": "",
        "rule": [
            "d12388"
        ]
    },
    {
        "instruction": "",
        "id": "q12389",
        "input": "python check if nested list contain items",
        "output": "",
        "rule": [
            "d12389"
        ]
    },
    {
        "instruction": "",
        "id": "q12390",
        "input": "transposing of an image in python",
        "output": "",
        "rule": [
            "d12390"
        ]
    },
    {
        "instruction": "",
        "id": "q12391",
        "input": "python check if object is dayetime",
        "output": "",
        "rule": [
            "d12391"
        ]
    },
    {
        "instruction": "",
        "id": "q12392",
        "input": "try catch retry python",
        "output": "",
        "rule": [
            "d12392"
        ]
    },
    {
        "instruction": "",
        "id": "q12393",
        "input": "python check if object is iterable but not string",
        "output": "",
        "rule": [
            "d12393"
        ]
    },
    {
        "instruction": "",
        "id": "q12394",
        "input": "turn a matrix into a vector in python",
        "output": "",
        "rule": [
            "d12394"
        ]
    },
    {
        "instruction": "",
        "id": "q12395",
        "input": "python check if object is numeric",
        "output": "",
        "rule": [
            "d12395"
        ]
    },
    {
        "instruction": "",
        "id": "q12396",
        "input": "turn an integer into date python",
        "output": "",
        "rule": [
            "d12396"
        ]
    },
    {
        "instruction": "",
        "id": "q12397",
        "input": "python check if path is symbolic link",
        "output": "",
        "rule": [
            "d12397"
        ]
    },
    {
        "instruction": "",
        "id": "q12398",
        "input": "turn an rdd into a list python",
        "output": "",
        "rule": [
            "d12398"
        ]
    },
    {
        "instruction": "",
        "id": "q12399",
        "input": "turn python dict into strings",
        "output": "",
        "rule": [
            "d12399"
        ]
    },
    {
        "instruction": "",
        "id": "q12400",
        "input": "python check if string or heximal number",
        "output": "",
        "rule": [
            "d12400"
        ]
    },
    {
        "instruction": "",
        "id": "q12401",
        "input": "turn string with commas into list python",
        "output": "",
        "rule": [
            "d12401"
        ]
    },
    {
        "instruction": "",
        "id": "q12402",
        "input": "python check if the server is network connected",
        "output": "",
        "rule": [
            "d12402"
        ]
    },
    {
        "instruction": "",
        "id": "q12403",
        "input": "turning a ctype pointer into a python buffer",
        "output": "",
        "rule": [
            "d12403"
        ]
    },
    {
        "instruction": "",
        "id": "q12404",
        "input": "python check if two intervals intersect",
        "output": "",
        "rule": [
            "d12404"
        ]
    },
    {
        "instruction": "",
        "id": "q12405",
        "input": "twig template for python",
        "output": "",
        "rule": [
            "d12405"
        ]
    },
    {
        "instruction": "",
        "id": "q12406",
        "input": "python check if url local",
        "output": "",
        "rule": [
            "d12406"
        ]
    },
    {
        "instruction": "",
        "id": "q12407",
        "input": "twitter api python tweeting with hashtag",
        "output": "",
        "rule": [
            "d12407"
        ]
    },
    {
        "instruction": "",
        "id": "q12408",
        "input": "python check if user is root",
        "output": "",
        "rule": [
            "d12408"
        ]
    },
    {
        "instruction": "",
        "id": "q12409",
        "input": "two key for sort python",
        "output": "",
        "rule": [
            "d12409"
        ]
    },
    {
        "instruction": "",
        "id": "q12410",
        "input": "python check if value is enumvalue",
        "output": "",
        "rule": [
            "d12410"
        ]
    },
    {
        "instruction": "",
        "id": "q12411",
        "input": "ubuntu remove item in pythonpath",
        "output": "",
        "rule": [
            "d12411"
        ]
    },
    {
        "instruction": "",
        "id": "q12412",
        "input": "python check if variable is list of floats",
        "output": "",
        "rule": [
            "d12412"
        ]
    },
    {
        "instruction": "",
        "id": "q12413",
        "input": "un do log transformation in python",
        "output": "",
        "rule": [
            "d12413"
        ]
    },
    {
        "instruction": "",
        "id": "q12414",
        "input": "python check is a file has a specific extension",
        "output": "",
        "rule": [
            "d12414"
        ]
    },
    {
        "instruction": "",
        "id": "q12415",
        "input": "unable to get section in configuration ini file in python",
        "output": "",
        "rule": [
            "d12415"
        ]
    },
    {
        "instruction": "",
        "id": "q12416",
        "input": "python check is nonetype",
        "output": "",
        "rule": [
            "d12416"
        ]
    },
    {
        "instruction": "",
        "id": "q12417",
        "input": "python check process alive by pid",
        "output": "",
        "rule": [
            "d12417"
        ]
    },
    {
        "instruction": "",
        "id": "q12418",
        "input": "underscore and double underscore in python",
        "output": "",
        "rule": [
            "d12418"
        ]
    },
    {
        "instruction": "",
        "id": "q12419",
        "input": "python check set contain subset",
        "output": "",
        "rule": [
            "d12419"
        ]
    },
    {
        "instruction": "",
        "id": "q12420",
        "input": "unique list python without set",
        "output": "",
        "rule": [
            "d12420"
        ]
    },
    {
        "instruction": "",
        "id": "q12421",
        "input": "python check stdin is not empty",
        "output": "",
        "rule": [
            "d12421"
        ]
    },
    {
        "instruction": "",
        "id": "q12422",
        "input": "unit test python no unit tests were found",
        "output": "",
        "rule": [
            "d12422"
        ]
    },
    {
        "instruction": "",
        "id": "q12423",
        "input": "python check string contains any string from a list",
        "output": "",
        "rule": [
            "d12423"
        ]
    },
    {
        "instruction": "",
        "id": "q12424",
        "input": "unix timestamp milliseconds into date python",
        "output": "",
        "rule": [
            "d12424"
        ]
    },
    {
        "instruction": "",
        "id": "q12425",
        "input": "python check string in another string prefix",
        "output": "",
        "rule": [
            "d12425"
        ]
    },
    {
        "instruction": "",
        "id": "q12426",
        "input": "python check two file same or not",
        "output": "",
        "rule": [
            "d12426"
        ]
    },
    {
        "instruction": "",
        "id": "q12427",
        "input": "updating object attributes in a function python",
        "output": "",
        "rule": [
            "d12427"
        ]
    },
    {
        "instruction": "",
        "id": "q12428",
        "input": "urlparse python 3 get params",
        "output": "",
        "rule": [
            "d12428"
        ]
    },
    {
        "instruction": "",
        "id": "q12429",
        "input": "use default value python",
        "output": "",
        "rule": [
            "d12429"
        ]
    },
    {
        "instruction": "",
        "id": "q12430",
        "input": "python check whether a path is a file",
        "output": "",
        "rule": [
            "d12430"
        ]
    },
    {
        "instruction": "",
        "id": "q12431",
        "input": "use most recent file in python",
        "output": "",
        "rule": [
            "d12431"
        ]
    },
    {
        "instruction": "",
        "id": "q12432",
        "input": "python check whether a value is iterable",
        "output": "",
        "rule": [
            "d12432"
        ]
    },
    {
        "instruction": "",
        "id": "q12433",
        "input": "use python dictionary as configure file",
        "output": "",
        "rule": [
            "d12433"
        ]
    },
    {
        "instruction": "",
        "id": "q12434",
        "input": "python checking equality of integr list element to integer",
        "output": "",
        "rule": [
            "d12434"
        ]
    },
    {
        "instruction": "",
        "id": "q12435",
        "input": "python checking that a file is there",
        "output": "",
        "rule": [
            "d12435"
        ]
    },
    {
        "instruction": "",
        "id": "q12436",
        "input": "use update for dictionary inside of a comprehension in python",
        "output": "",
        "rule": [
            "d12436"
        ]
    },
    {
        "instruction": "",
        "id": "q12437",
        "input": "python checking to see the longest list in a dictionary",
        "output": "",
        "rule": [
            "d12437"
        ]
    },
    {
        "instruction": "",
        "id": "q12438",
        "input": "using a loop in a try catch block python",
        "output": "",
        "rule": [
            "d12438"
        ]
    },
    {
        "instruction": "",
        "id": "q12439",
        "input": "python child process not exit",
        "output": "",
        "rule": [
            "d12439"
        ]
    },
    {
        "instruction": "",
        "id": "q12440",
        "input": "uuid not serializable python",
        "output": "",
        "rule": [
            "d12440"
        ]
    },
    {
        "instruction": "",
        "id": "q12441",
        "input": "python clear all plots from axis",
        "output": "",
        "rule": [
            "d12441"
        ]
    },
    {
        "instruction": "",
        "id": "q12442",
        "input": "value for infinity in python",
        "output": "",
        "rule": [
            "d12442"
        ]
    },
    {
        "instruction": "",
        "id": "q12443",
        "input": "python clear lru cache",
        "output": "",
        "rule": [
            "d12443"
        ]
    },
    {
        "instruction": "",
        "id": "q12444",
        "input": "values of a dictionary must be unique in python",
        "output": "",
        "rule": [
            "d12444"
        ]
    },
    {
        "instruction": "",
        "id": "q12445",
        "input": "python clearing all variables",
        "output": "",
        "rule": [
            "d12445"
        ]
    },
    {
        "instruction": "",
        "id": "q12446",
        "input": "vector for 2 points python",
        "output": "",
        "rule": [
            "d12446"
        ]
    },
    {
        "instruction": "",
        "id": "q12447",
        "input": "python click color help output",
        "output": "",
        "rule": [
            "d12447"
        ]
    },
    {
        "instruction": "",
        "id": "q12448",
        "input": "vectorize a python function",
        "output": "",
        "rule": [
            "d12448"
        ]
    },
    {
        "instruction": "",
        "id": "q12449",
        "input": "python closing an sql connection",
        "output": "",
        "rule": [
            "d12449"
        ]
    },
    {
        "instruction": "",
        "id": "q12450",
        "input": "view the variables that are not null in python",
        "output": "",
        "rule": [
            "d12450"
        ]
    },
    {
        "instruction": "",
        "id": "q12451",
        "input": "python code for exponential and logarithmic",
        "output": "",
        "rule": [
            "d12451"
        ]
    },
    {
        "instruction": "",
        "id": "q12452",
        "input": "what api gateway expects from a lambda python if true return status code 200 else return 400",
        "output": "",
        "rule": [
            "d12452"
        ]
    },
    {
        "instruction": "",
        "id": "q12453",
        "input": "python code for screen updating",
        "output": "",
        "rule": [
            "d12453"
        ]
    },
    {
        "instruction": "",
        "id": "q12454",
        "input": "what's an ellipsis in python",
        "output": "",
        "rule": [
            "d12454"
        ]
    },
    {
        "instruction": "",
        "id": "q12455",
        "input": "python code for update the edited date in the attribute table",
        "output": "",
        "rule": [
            "d12455"
        ]
    },
    {
        "instruction": "",
        "id": "q12456",
        "input": "whats are struct fields in python",
        "output": "",
        "rule": [
            "d12456"
        ]
    },
    {
        "instruction": "",
        "id": "q12457",
        "input": "python code how to align comments",
        "output": "",
        "rule": [
            "d12457"
        ]
    },
    {
        "instruction": "",
        "id": "q12458",
        "input": "python code that sees if a graph has a cycle",
        "output": "",
        "rule": [
            "d12458"
        ]
    },
    {
        "instruction": "",
        "id": "q12459",
        "input": "with coverage python unittest",
        "output": "",
        "rule": [
            "d12459"
        ]
    },
    {
        "instruction": "",
        "id": "q12460",
        "input": "python code to change binary to letters",
        "output": "",
        "rule": [
            "d12460"
        ]
    },
    {
        "instruction": "",
        "id": "q12461",
        "input": "wrap a vector python",
        "output": "",
        "rule": [
            "d12461"
        ]
    },
    {
        "instruction": "",
        "id": "q12462",
        "input": "python code to check if all elements in a list are equal",
        "output": "",
        "rule": [
            "d12462"
        ]
    },
    {
        "instruction": "",
        "id": "q12463",
        "input": "write a function that returns a list of the numbers of the fibonacci series up to n python",
        "output": "",
        "rule": [
            "d12463"
        ]
    },
    {
        "instruction": "",
        "id": "q12464",
        "input": "python code to check if password is valid regex",
        "output": "",
        "rule": [
            "d12464"
        ]
    },
    {
        "instruction": "",
        "id": "q12465",
        "input": "write a function to compare two strings ignoring case in python",
        "output": "",
        "rule": [
            "d12465"
        ]
    },
    {
        "instruction": "",
        "id": "q12466",
        "input": "python code to detect ble devices",
        "output": "",
        "rule": [
            "d12466"
        ]
    },
    {
        "instruction": "",
        "id": "q12467",
        "input": "write a python function to determine if is valid cut",
        "output": "",
        "rule": [
            "d12467"
        ]
    },
    {
        "instruction": "",
        "id": "q12468",
        "input": "python code to get refresh token on sandbox using oauth",
        "output": "",
        "rule": [
            "d12468"
        ]
    },
    {
        "instruction": "",
        "id": "q12469",
        "input": "write another line after write python",
        "output": "",
        "rule": [
            "d12469"
        ]
    },
    {
        "instruction": "",
        "id": "q12470",
        "input": "python code to remove file from a folder",
        "output": "",
        "rule": [
            "d12470"
        ]
    },
    {
        "instruction": "",
        "id": "q12471",
        "input": "write comparisons for custom object python",
        "output": "",
        "rule": [
            "d12471"
        ]
    },
    {
        "instruction": "",
        "id": "q12472",
        "input": "python code to remove pixels from an image",
        "output": "",
        "rule": [
            "d12472"
        ]
    },
    {
        "instruction": "",
        "id": "q12473",
        "input": "write graph data to gml in python",
        "output": "",
        "rule": [
            "d12473"
        ]
    },
    {
        "instruction": "",
        "id": "q12474",
        "input": "python code to replace data in a template text",
        "output": "",
        "rule": [
            "d12474"
        ]
    },
    {
        "instruction": "",
        "id": "q12475",
        "input": "write image warp function python",
        "output": "",
        "rule": [
            "d12475"
        ]
    },
    {
        "instruction": "",
        "id": "q12476",
        "input": "python code to retrieve all the collections in the database of mongodb using pyhon",
        "output": "",
        "rule": [
            "d12476"
        ]
    },
    {
        "instruction": "",
        "id": "q12477",
        "input": "write json object to a file in python",
        "output": "",
        "rule": [
            "d12477"
        ]
    },
    {
        "instruction": "",
        "id": "q12478",
        "input": "python coding how to get month",
        "output": "",
        "rule": [
            "d12478"
        ]
    },
    {
        "instruction": "",
        "id": "q12479",
        "input": "writing single comment line to yaml in python",
        "output": "",
        "rule": [
            "d12479"
        ]
    },
    {
        "instruction": "",
        "id": "q12480",
        "input": "python colormap use only 20 colorls",
        "output": "",
        "rule": [
            "d12480"
        ]
    },
    {
        "instruction": "",
        "id": "q12481",
        "input": "writing test fro object equality python",
        "output": "",
        "rule": [
            "d12481"
        ]
    },
    {
        "instruction": "",
        "id": "q12482",
        "input": "python combobox action value",
        "output": "",
        "rule": [
            "d12482"
        ]
    },
    {
        "instruction": "",
        "id": "q12483",
        "input": "wsdl to python dict",
        "output": "",
        "rule": [
            "d12483"
        ]
    },
    {
        "instruction": "",
        "id": "q12484",
        "input": "python compare each characters of two string",
        "output": "",
        "rule": [
            "d12484"
        ]
    },
    {
        "instruction": "",
        "id": "q12485",
        "input": "wxpython can not close a window",
        "output": "",
        "rule": [
            "d12485"
        ]
    },
    {
        "instruction": "",
        "id": "q12486",
        "input": "python compare is instance",
        "output": "",
        "rule": [
            "d12486"
        ]
    },
    {
        "instruction": "",
        "id": "q12487",
        "input": "wxpython close panel on event",
        "output": "",
        "rule": [
            "d12487"
        ]
    },
    {
        "instruction": "",
        "id": "q12488",
        "input": "python comparison float int",
        "output": "",
        "rule": [
            "d12488"
        ]
    },
    {
        "instruction": "",
        "id": "q12489",
        "input": "wxpython discard event during disable",
        "output": "",
        "rule": [
            "d12489"
        ]
    },
    {
        "instruction": "",
        "id": "q12490",
        "input": "python compile regex with flag",
        "output": "",
        "rule": [
            "d12490"
        ]
    },
    {
        "instruction": "",
        "id": "q12491",
        "input": "wxpython no close window",
        "output": "",
        "rule": [
            "d12491"
        ]
    },
    {
        "instruction": "",
        "id": "q12492",
        "input": "python compute hash of file",
        "output": "",
        "rule": [
            "d12492"
        ]
    },
    {
        "instruction": "",
        "id": "q12493",
        "input": "x for x in python means",
        "output": "",
        "rule": [
            "d12493"
        ]
    },
    {
        "instruction": "",
        "id": "q12494",
        "input": "python concat file name to file extension with wildcard",
        "output": "",
        "rule": [
            "d12494"
        ]
    },
    {
        "instruction": "",
        "id": "q12495",
        "input": "xml wellform check python",
        "output": "",
        "rule": [
            "d12495"
        ]
    },
    {
        "instruction": "",
        "id": "q12496",
        "input": "python connect to heroku postgres database",
        "output": "",
        "rule": [
            "d12496"
        ]
    },
    {
        "instruction": "",
        "id": "q12497",
        "input": "yaml load file python",
        "output": "",
        "rule": [
            "d12497"
        ]
    },
    {
        "instruction": "",
        "id": "q12498",
        "input": "python construct string with multiple query",
        "output": "",
        "rule": [
            "d12498"
        ]
    },
    {
        "instruction": "",
        "id": "q12499",
        "input": "zlib python compress pickle",
        "output": "",
        "rule": [
            "d12499"
        ]
    },
    {
        "instruction": "",
        "id": "q12500",
        "input": "python consumer java string deserializer",
        "output": "",
        "rule": [
            "d12500"
        ]
    },
    {
        "instruction": "",
        "id": "q12501",
        "input": "python context manager scope",
        "output": "",
        "rule": [
            "d12501"
        ]
    },
    {
        "instruction": "",
        "id": "q12502",
        "input": "python ctypes pointer and pointer",
        "output": "",
        "rule": [
            "d12502"
        ]
    },
    {
        "instruction": "",
        "id": "q12503",
        "input": "\"tensorflow has no attribute python\"",
        "output": "",
        "rule": [
            "d12503"
        ]
    },
    {
        "instruction": "",
        "id": "q12504",
        "input": "python cumsum part of list",
        "output": "",
        "rule": [
            "d12504"
        ]
    },
    {
        "instruction": "",
        "id": "q12505",
        "input": "boolean \"is\" command list for python",
        "output": "",
        "rule": [
            "d12505"
        ]
    },
    {
        "instruction": "",
        "id": "q12506",
        "input": "python custom crop on image",
        "output": "",
        "rule": [
            "d12506"
        ]
    },
    {
        "instruction": "",
        "id": "q12507",
        "input": "how to \"print at\" on screen in python",
        "output": "",
        "rule": [
            "d12507"
        ]
    },
    {
        "instruction": "",
        "id": "q12508",
        "input": "python cut string by len",
        "output": "",
        "rule": [
            "d12508"
        ]
    },
    {
        "instruction": "",
        "id": "q12509",
        "input": "python \"standardize\" different date string formats",
        "output": "",
        "rule": [
            "d12509"
        ]
    },
    {
        "instruction": "",
        "id": "q12510",
        "input": "python cv2 open all images in dir",
        "output": "",
        "rule": [
            "d12510"
        ]
    },
    {
        "instruction": "",
        "id": "q12511",
        "input": "python sphinx remove \"created by sphinx\"",
        "output": "",
        "rule": [
            "d12511"
        ]
    },
    {
        "instruction": "",
        "id": "q12512",
        "input": "python data frame join",
        "output": "",
        "rule": [
            "d12512"
        ]
    },
    {
        "instruction": "",
        "id": "q12513",
        "input": "what python code allows me to hit \"enter\" to exit",
        "output": "",
        "rule": [
            "d12513"
        ]
    },
    {
        "instruction": "",
        "id": "q12514",
        "input": "python data structures no duplicates",
        "output": "",
        "rule": [
            "d12514"
        ]
    },
    {
        "instruction": "",
        "id": "q12515",
        "input": "%f decimal trncating string formatting python",
        "output": "",
        "rule": [
            "d12515"
        ]
    },
    {
        "instruction": "",
        "id": "q12516",
        "input": "python database connection automatic close",
        "output": "",
        "rule": [
            "d12516"
        ]
    },
    {
        "instruction": "",
        "id": "q12517",
        "input": "'bytes' object has no attribute 'read' + python",
        "output": "",
        "rule": [
            "d12517"
        ]
    },
    {
        "instruction": "",
        "id": "q12518",
        "input": "python datatime to iso offset",
        "output": "",
        "rule": [
            "d12518"
        ]
    },
    {
        "instruction": "",
        "id": "q12519",
        "input": "'int' object is not callable range funtion python",
        "output": "",
        "rule": [
            "d12519"
        ]
    },
    {
        "instruction": "",
        "id": "q12520",
        "input": "python date parsing for month",
        "output": "",
        "rule": [
            "d12520"
        ]
    },
    {
        "instruction": "",
        "id": "q12521",
        "input": "2d convolution in python using scipy",
        "output": "",
        "rule": [
            "d12521"
        ]
    },
    {
        "instruction": "",
        "id": "q12522",
        "input": "python date to unix timestamp",
        "output": "",
        "rule": [
            "d12522"
        ]
    },
    {
        "instruction": "",
        "id": "q12523",
        "input": "3 dimensional matrix to 1 dimensional matrix images python",
        "output": "",
        "rule": [
            "d12523"
        ]
    },
    {
        "instruction": "",
        "id": "q12524",
        "input": "python datetime add tzaware",
        "output": "",
        "rule": [
            "d12524"
        ]
    },
    {
        "instruction": "",
        "id": "q12525",
        "input": "a python program that determines if word is palindrome",
        "output": "",
        "rule": [
            "d12525"
        ]
    },
    {
        "instruction": "",
        "id": "q12526",
        "input": "python datetime choose median datetime",
        "output": "",
        "rule": [
            "d12526"
        ]
    },
    {
        "instruction": "",
        "id": "q12527",
        "input": "access a variable dynamically via python",
        "output": "",
        "rule": [
            "d12527"
        ]
    },
    {
        "instruction": "",
        "id": "q12528",
        "input": "python datetime from string timezone",
        "output": "",
        "rule": [
            "d12528"
        ]
    },
    {
        "instruction": "",
        "id": "q12529",
        "input": "add 1 year to datetime in python",
        "output": "",
        "rule": [
            "d12529"
        ]
    },
    {
        "instruction": "",
        "id": "q12530",
        "input": "add custom op in tensorflow python",
        "output": "",
        "rule": [
            "d12530"
        ]
    },
    {
        "instruction": "",
        "id": "q12531",
        "input": "python datetime now utc",
        "output": "",
        "rule": [
            "d12531"
        ]
    },
    {
        "instruction": "",
        "id": "q12532",
        "input": "add gauss noise python",
        "output": "",
        "rule": [
            "d12532"
        ]
    },
    {
        "instruction": "",
        "id": "q12533",
        "input": "python datetime remove milliseconds",
        "output": "",
        "rule": [
            "d12533"
        ]
    },
    {
        "instruction": "",
        "id": "q12534",
        "input": "add horizontal line python",
        "output": "",
        "rule": [
            "d12534"
        ]
    },
    {
        "instruction": "",
        "id": "q12535",
        "input": "python datetime round to hour",
        "output": "",
        "rule": [
            "d12535"
        ]
    },
    {
        "instruction": "",
        "id": "q12536",
        "input": "add is not working in activation python",
        "output": "",
        "rule": [
            "d12536"
        ]
    },
    {
        "instruction": "",
        "id": "q12537",
        "input": "python datetime to seconds since epoch",
        "output": "",
        "rule": [
            "d12537"
        ]
    },
    {
        "instruction": "",
        "id": "q12538",
        "input": "add noise to image python",
        "output": "",
        "rule": [
            "d12538"
        ]
    },
    {
        "instruction": "",
        "id": "q12539",
        "input": "python datetime value to string",
        "output": "",
        "rule": [
            "d12539"
        ]
    },
    {
        "instruction": "",
        "id": "q12540",
        "input": "add noise to images python",
        "output": "",
        "rule": [
            "d12540"
        ]
    },
    {
        "instruction": "",
        "id": "q12541",
        "input": "python declaring max and mins for a chart",
        "output": "",
        "rule": [
            "d12541"
        ]
    },
    {
        "instruction": "",
        "id": "q12542",
        "input": "add tensorflow to python path",
        "output": "",
        "rule": [
            "d12542"
        ]
    },
    {
        "instruction": "",
        "id": "q12543",
        "input": "python dectect active window",
        "output": "",
        "rule": [
            "d12543"
        ]
    },
    {
        "instruction": "",
        "id": "q12544",
        "input": "add two polynomials using function in python",
        "output": "",
        "rule": [
            "d12544"
        ]
    },
    {
        "instruction": "",
        "id": "q12545",
        "input": "python default dict with default dict",
        "output": "",
        "rule": [
            "d12545"
        ]
    },
    {
        "instruction": "",
        "id": "q12546",
        "input": "adding color to strings in python",
        "output": "",
        "rule": [
            "d12546"
        ]
    },
    {
        "instruction": "",
        "id": "q12547",
        "input": "python default encoding on windows",
        "output": "",
        "rule": [
            "d12547"
        ]
    },
    {
        "instruction": "",
        "id": "q12548",
        "input": "adding noise to an image python",
        "output": "",
        "rule": [
            "d12548"
        ]
    },
    {
        "instruction": "",
        "id": "q12549",
        "input": "adding python and conda to anaconda",
        "output": "",
        "rule": [
            "d12549"
        ]
    },
    {
        "instruction": "",
        "id": "q12550",
        "input": "python delete an environment",
        "output": "",
        "rule": [
            "d12550"
        ]
    },
    {
        "instruction": "",
        "id": "q12551",
        "input": "addition of polynomials in python",
        "output": "",
        "rule": [
            "d12551"
        ]
    },
    {
        "instruction": "",
        "id": "q12552",
        "input": "python delete attributes from instance",
        "output": "",
        "rule": [
            "d12552"
        ]
    },
    {
        "instruction": "",
        "id": "q12553",
        "input": "algorithm to enumerate n choose k python",
        "output": "",
        "rule": [
            "d12553"
        ]
    },
    {
        "instruction": "",
        "id": "q12554",
        "input": "python delete dictionary entry if exists",
        "output": "",
        "rule": [
            "d12554"
        ]
    },
    {
        "instruction": "",
        "id": "q12555",
        "input": "all any at least in list python",
        "output": "",
        "rule": [
            "d12555"
        ]
    },
    {
        "instruction": "",
        "id": "q12556",
        "input": "python delete duplicate elements in list",
        "output": "",
        "rule": [
            "d12556"
        ]
    },
    {
        "instruction": "",
        "id": "q12557",
        "input": "all root to leaf path in python",
        "output": "",
        "rule": [
            "d12557"
        ]
    },
    {
        "instruction": "",
        "id": "q12558",
        "input": "python delete folders or files",
        "output": "",
        "rule": [
            "d12558"
        ]
    },
    {
        "instruction": "",
        "id": "q12559",
        "input": "angle between 2 vectors python",
        "output": "",
        "rule": [
            "d12559"
        ]
    },
    {
        "instruction": "",
        "id": "q12560",
        "input": "python delete keys from a dict",
        "output": "",
        "rule": [
            "d12560"
        ]
    },
    {
        "instruction": "",
        "id": "q12561",
        "input": "any funtion to check equivalence in python",
        "output": "",
        "rule": [
            "d12561"
        ]
    },
    {
        "instruction": "",
        "id": "q12562",
        "input": "python delete last element of the stack",
        "output": "",
        "rule": [
            "d12562"
        ]
    },
    {
        "instruction": "",
        "id": "q12563",
        "input": "anytree python with functions",
        "output": "",
        "rule": [
            "d12563"
        ]
    },
    {
        "instruction": "",
        "id": "q12564",
        "input": "python delete variable from globals",
        "output": "",
        "rule": [
            "d12564"
        ]
    },
    {
        "instruction": "",
        "id": "q12565",
        "input": "append data frame fill na python",
        "output": "",
        "rule": [
            "d12565"
        ]
    },
    {
        "instruction": "",
        "id": "q12566",
        "input": "python dend print to file",
        "output": "",
        "rule": [
            "d12566"
        ]
    },
    {
        "instruction": "",
        "id": "q12567",
        "input": "appium python scroll element into view",
        "output": "",
        "rule": [
            "d12567"
        ]
    },
    {
        "instruction": "",
        "id": "q12568",
        "input": "python detect file name",
        "output": "",
        "rule": [
            "d12568"
        ]
    },
    {
        "instruction": "",
        "id": "q12569",
        "input": "apply functions to each column python",
        "output": "",
        "rule": [
            "d12569"
        ]
    },
    {
        "instruction": "",
        "id": "q12570",
        "input": "python detect if a tab is closed",
        "output": "",
        "rule": [
            "d12570"
        ]
    },
    {
        "instruction": "",
        "id": "q12571",
        "input": "apply lower dimensional mask to data scipy python",
        "output": "",
        "rule": [
            "d12571"
        ]
    },
    {
        "instruction": "",
        "id": "q12572",
        "input": "python detect screen width",
        "output": "",
        "rule": [
            "d12572"
        ]
    },
    {
        "instruction": "",
        "id": "q12573",
        "input": "applying brightness and contrast to an image in python",
        "output": "",
        "rule": [
            "d12573"
        ]
    },
    {
        "instruction": "",
        "id": "q12574",
        "input": "python detect stdin pressed",
        "output": "",
        "rule": [
            "d12574"
        ]
    },
    {
        "instruction": "",
        "id": "q12575",
        "input": "array list to json string python",
        "output": "",
        "rule": [
            "d12575"
        ]
    },
    {
        "instruction": "",
        "id": "q12576",
        "input": "python detect type of namedtuple",
        "output": "",
        "rule": [
            "d12576"
        ]
    },
    {
        "instruction": "",
        "id": "q12577",
        "input": "arrays to string python",
        "output": "",
        "rule": [
            "d12577"
        ]
    },
    {
        "instruction": "",
        "id": "q12578",
        "input": "python determine datatype function",
        "output": "",
        "rule": [
            "d12578"
        ]
    },
    {
        "instruction": "",
        "id": "q12579",
        "input": "asigning color to text in python",
        "output": "",
        "rule": [
            "d12579"
        ]
    },
    {
        "instruction": "",
        "id": "q12580",
        "input": "python determine function name",
        "output": "",
        "rule": [
            "d12580"
        ]
    },
    {
        "instruction": "",
        "id": "q12581",
        "input": "asyncio python blocking functions",
        "output": "",
        "rule": [
            "d12581"
        ]
    },
    {
        "instruction": "",
        "id": "q12582",
        "input": "python determine if a file is executable",
        "output": "",
        "rule": [
            "d12582"
        ]
    },
    {
        "instruction": "",
        "id": "q12583",
        "input": "asyncio python lock queue",
        "output": "",
        "rule": [
            "d12583"
        ]
    },
    {
        "instruction": "",
        "id": "q12584",
        "input": "python determine if process is running",
        "output": "",
        "rule": [
            "d12584"
        ]
    },
    {
        "instruction": "",
        "id": "q12585",
        "input": "automate url status check using python",
        "output": "",
        "rule": [
            "d12585"
        ]
    },
    {
        "instruction": "",
        "id": "q12586",
        "input": "python df get index values for group of rows",
        "output": "",
        "rule": [
            "d12586"
        ]
    },
    {
        "instruction": "",
        "id": "q12587",
        "input": "automatic indentation function def python",
        "output": "",
        "rule": [
            "d12587"
        ]
    },
    {
        "instruction": "",
        "id": "q12588",
        "input": "python dialog box select folder",
        "output": "",
        "rule": [
            "d12588"
        ]
    },
    {
        "instruction": "",
        "id": "q12589",
        "input": "average over python list of dicts",
        "output": "",
        "rule": [
            "d12589"
        ]
    },
    {
        "instruction": "",
        "id": "q12590",
        "input": "python dict get of default",
        "output": "",
        "rule": [
            "d12590"
        ]
    },
    {
        "instruction": "",
        "id": "q12591",
        "input": "aws lambda python anaconda",
        "output": "",
        "rule": [
            "d12591"
        ]
    },
    {
        "instruction": "",
        "id": "q12592",
        "input": "python dict merge deep",
        "output": "",
        "rule": [
            "d12592"
        ]
    },
    {
        "instruction": "",
        "id": "q12593",
        "input": "python dictionary dot notation",
        "output": "",
        "rule": [
            "d12593"
        ]
    },
    {
        "instruction": "",
        "id": "q12594",
        "input": "best way to flush a file python",
        "output": "",
        "rule": [
            "d12594"
        ]
    },
    {
        "instruction": "",
        "id": "q12595",
        "input": "python dictionary exclude key",
        "output": "",
        "rule": [
            "d12595"
        ]
    },
    {
        "instruction": "",
        "id": "q12596",
        "input": "best way to stringify python objecct",
        "output": "",
        "rule": [
            "d12596"
        ]
    },
    {
        "instruction": "",
        "id": "q12597",
        "input": "python dictionary in html for key, value",
        "output": "",
        "rule": [
            "d12597"
        ]
    },
    {
        "instruction": "",
        "id": "q12598",
        "input": "bin edges to be integers python",
        "output": "",
        "rule": [
            "d12598"
        ]
    },
    {
        "instruction": "",
        "id": "q12599",
        "input": "python dictionary key reference",
        "output": "",
        "rule": [
            "d12599"
        ]
    },
    {
        "instruction": "",
        "id": "q12600",
        "input": "python dictionary only returningone element python",
        "output": "",
        "rule": [
            "d12600"
        ]
    },
    {
        "instruction": "",
        "id": "q12601",
        "input": "build function name dynamically python",
        "output": "",
        "rule": [
            "d12601"
        ]
    },
    {
        "instruction": "",
        "id": "q12602",
        "input": "python dictionary select and graph feature",
        "output": "",
        "rule": [
            "d12602"
        ]
    },
    {
        "instruction": "",
        "id": "q12603",
        "input": "bytes to string utf8, python",
        "output": "",
        "rule": [
            "d12603"
        ]
    },
    {
        "instruction": "",
        "id": "q12604",
        "input": "python dictionary, remove key",
        "output": "",
        "rule": [
            "d12604"
        ]
    },
    {
        "instruction": "",
        "id": "q12605",
        "input": "c++ calll python build",
        "output": "",
        "rule": [
            "d12605"
        ]
    },
    {
        "instruction": "",
        "id": "q12606",
        "input": "python dictonary to string to dict",
        "output": "",
        "rule": [
            "d12606"
        ]
    },
    {
        "instruction": "",
        "id": "q12607",
        "input": "caculating seconds from number of days using datetime in python",
        "output": "",
        "rule": [
            "d12607"
        ]
    },
    {
        "instruction": "",
        "id": "q12608",
        "input": "python diffrent deltatime minutes",
        "output": "",
        "rule": [
            "d12608"
        ]
    },
    {
        "instruction": "",
        "id": "q12609",
        "input": "cahng to str type python",
        "output": "",
        "rule": [
            "d12609"
        ]
    },
    {
        "instruction": "",
        "id": "q12610",
        "input": "python dir doc command",
        "output": "",
        "rule": [
            "d12610"
        ]
    },
    {
        "instruction": "",
        "id": "q12611",
        "input": "calc a log distribution in python",
        "output": "",
        "rule": [
            "d12611"
        ]
    },
    {
        "instruction": "",
        "id": "q12612",
        "input": "calculate angle between two vectors python",
        "output": "",
        "rule": [
            "d12612"
        ]
    },
    {
        "instruction": "",
        "id": "q12613",
        "input": "python dir mkdir permissions",
        "output": "",
        "rule": [
            "d12613"
        ]
    },
    {
        "instruction": "",
        "id": "q12614",
        "input": "calculate distance between two geo locations python",
        "output": "",
        "rule": [
            "d12614"
        ]
    },
    {
        "instruction": "",
        "id": "q12615",
        "input": "calculate number of nodes in all subtrees python",
        "output": "",
        "rule": [
            "d12615"
        ]
    },
    {
        "instruction": "",
        "id": "q12616",
        "input": "python discord join voice channel bot",
        "output": "",
        "rule": [
            "d12616"
        ]
    },
    {
        "instruction": "",
        "id": "q12617",
        "input": "calculate table columns width python",
        "output": "",
        "rule": [
            "d12617"
        ]
    },
    {
        "instruction": "",
        "id": "q12618",
        "input": "python disk based convolution",
        "output": "",
        "rule": [
            "d12618"
        ]
    },
    {
        "instruction": "",
        "id": "q12619",
        "input": "python display array in a table",
        "output": "",
        "rule": [
            "d12619"
        ]
    },
    {
        "instruction": "",
        "id": "q12620",
        "input": "calculate the average word length in a sentence python",
        "output": "",
        "rule": [
            "d12620"
        ]
    },
    {
        "instruction": "",
        "id": "q12621",
        "input": "python distance between two 2d vector",
        "output": "",
        "rule": [
            "d12621"
        ]
    },
    {
        "instruction": "",
        "id": "q12622",
        "input": "calculating sin in angle python",
        "output": "",
        "rule": [
            "d12622"
        ]
    },
    {
        "instruction": "",
        "id": "q12623",
        "input": "python distance similary matrices text",
        "output": "",
        "rule": [
            "d12623"
        ]
    },
    {
        "instruction": "",
        "id": "q12624",
        "input": "python django date past queryset today",
        "output": "",
        "rule": [
            "d12624"
        ]
    },
    {
        "instruction": "",
        "id": "q12625",
        "input": "call nth column of array in python",
        "output": "",
        "rule": [
            "d12625"
        ]
    },
    {
        "instruction": "",
        "id": "q12626",
        "input": "python docstring enum members",
        "output": "",
        "rule": [
            "d12626"
        ]
    },
    {
        "instruction": "",
        "id": "q12627",
        "input": "call unittest from a script python",
        "output": "",
        "rule": [
            "d12627"
        ]
    },
    {
        "instruction": "",
        "id": "q12628",
        "input": "python docx add section to each page",
        "output": "",
        "rule": [
            "d12628"
        ]
    },
    {
        "instruction": "",
        "id": "q12629",
        "input": "calling replace in python multiple times",
        "output": "",
        "rule": [
            "d12629"
        ]
    },
    {
        "instruction": "",
        "id": "q12630",
        "input": "python docx number a section",
        "output": "",
        "rule": [
            "d12630"
        ]
    },
    {
        "instruction": "",
        "id": "q12631",
        "input": "camel naming convention for python",
        "output": "",
        "rule": [
            "d12631"
        ]
    },
    {
        "instruction": "",
        "id": "q12632",
        "input": "python don't save history",
        "output": "",
        "rule": [
            "d12632"
        ]
    },
    {
        "instruction": "",
        "id": "q12633",
        "input": "can i compile python cod",
        "output": "",
        "rule": [
            "d12633"
        ]
    },
    {
        "instruction": "",
        "id": "q12634",
        "input": "python dot product implementation",
        "output": "",
        "rule": [
            "d12634"
        ]
    },
    {
        "instruction": "",
        "id": "q12635",
        "input": "can i grab each letter in a string python",
        "output": "",
        "rule": [
            "d12635"
        ]
    },
    {
        "instruction": "",
        "id": "q12636",
        "input": "python downsize image antialias",
        "output": "",
        "rule": [
            "d12636"
        ]
    },
    {
        "instruction": "",
        "id": "q12637",
        "input": "can lists can be nested arbitrarily deep in python",
        "output": "",
        "rule": [
            "d12637"
        ]
    },
    {
        "instruction": "",
        "id": "q12638",
        "input": "python draw line chart from array",
        "output": "",
        "rule": [
            "d12638"
        ]
    },
    {
        "instruction": "",
        "id": "q12639",
        "input": "can you open an excel file that python is writing too",
        "output": "",
        "rule": [
            "d12639"
        ]
    },
    {
        "instruction": "",
        "id": "q12640",
        "input": "can you open and parse xml files in python",
        "output": "",
        "rule": [
            "d12640"
        ]
    },
    {
        "instruction": "",
        "id": "q12641",
        "input": "python drop rows containing empty cells",
        "output": "",
        "rule": [
            "d12641"
        ]
    },
    {
        "instruction": "",
        "id": "q12642",
        "input": "can you remove keys from a dictionary in python",
        "output": "",
        "rule": [
            "d12642"
        ]
    },
    {
        "instruction": "",
        "id": "q12643",
        "input": "python dump json with custom encoder",
        "output": "",
        "rule": [
            "d12643"
        ]
    },
    {
        "instruction": "",
        "id": "q12644",
        "input": "can you return value from python row number and column name",
        "output": "",
        "rule": [
            "d12644"
        ]
    },
    {
        "instruction": "",
        "id": "q12645",
        "input": "python dump ndarray as json",
        "output": "",
        "rule": [
            "d12645"
        ]
    },
    {
        "instruction": "",
        "id": "q12646",
        "input": "can you right align and center text on python",
        "output": "",
        "rule": [
            "d12646"
        ]
    },
    {
        "instruction": "",
        "id": "q12647",
        "input": "python dynamic or static typing recomendation",
        "output": "",
        "rule": [
            "d12647"
        ]
    },
    {
        "instruction": "",
        "id": "q12648",
        "input": "can you set a list to a certain size python",
        "output": "",
        "rule": [
            "d12648"
        ]
    },
    {
        "instruction": "",
        "id": "q12649",
        "input": "python dynamically populating dropdown based upon another dropdown selection",
        "output": "",
        "rule": [
            "d12649"
        ]
    },
    {
        "instruction": "",
        "id": "q12650",
        "input": "cannont compare tz naive and tz aware timestamps python",
        "output": "",
        "rule": [
            "d12650"
        ]
    },
    {
        "instruction": "",
        "id": "q12651",
        "input": "cant compare date to none type python",
        "output": "",
        "rule": [
            "d12651"
        ]
    },
    {
        "instruction": "",
        "id": "q12652",
        "input": "python each element in the array",
        "output": "",
        "rule": [
            "d12652"
        ]
    },
    {
        "instruction": "",
        "id": "q12653",
        "input": "cant covert string to int or float in python",
        "output": "",
        "rule": [
            "d12653"
        ]
    },
    {
        "instruction": "",
        "id": "q12654",
        "input": "python edit pdf access permissions",
        "output": "",
        "rule": [
            "d12654"
        ]
    },
    {
        "instruction": "",
        "id": "q12655",
        "input": "capitalize element in list function python",
        "output": "",
        "rule": [
            "d12655"
        ]
    },
    {
        "instruction": "",
        "id": "q12656",
        "input": "python edit pf access permissions",
        "output": "",
        "rule": [
            "d12656"
        ]
    },
    {
        "instruction": "",
        "id": "q12657",
        "input": "python elasticsearch bucket limited to 10",
        "output": "",
        "rule": [
            "d12657"
        ]
    },
    {
        "instruction": "",
        "id": "q12658",
        "input": "cartesian product of huge array python",
        "output": "",
        "rule": [
            "d12658"
        ]
    },
    {
        "instruction": "",
        "id": "q12659",
        "input": "python elasticsearch index update",
        "output": "",
        "rule": [
            "d12659"
        ]
    },
    {
        "instruction": "",
        "id": "q12660",
        "input": "casat a list of dictionaries to a numpy array python",
        "output": "",
        "rule": [
            "d12660"
        ]
    },
    {
        "instruction": "",
        "id": "q12661",
        "input": "python elasticsearch put multiple index",
        "output": "",
        "rule": [
            "d12661"
        ]
    },
    {
        "instruction": "",
        "id": "q12662",
        "input": "python elasticsearch querybuilder range",
        "output": "",
        "rule": [
            "d12662"
        ]
    },
    {
        "instruction": "",
        "id": "q12663",
        "input": "cast something as datetime python",
        "output": "",
        "rule": [
            "d12663"
        ]
    },
    {
        "instruction": "",
        "id": "q12664",
        "input": "python element wise min",
        "output": "",
        "rule": [
            "d12664"
        ]
    },
    {
        "instruction": "",
        "id": "q12665",
        "input": "cast string to bytes python",
        "output": "",
        "rule": [
            "d12665"
        ]
    },
    {
        "instruction": "",
        "id": "q12666",
        "input": "python empty list population is confusing",
        "output": "",
        "rule": [
            "d12666"
        ]
    },
    {
        "instruction": "",
        "id": "q12667",
        "input": "python encoding a string as binary",
        "output": "",
        "rule": [
            "d12667"
        ]
    },
    {
        "instruction": "",
        "id": "q12668",
        "input": "chained call in python indentation",
        "output": "",
        "rule": [
            "d12668"
        ]
    },
    {
        "instruction": "",
        "id": "q12669",
        "input": "python ensure utf 8 encoding",
        "output": "",
        "rule": [
            "d12669"
        ]
    },
    {
        "instruction": "",
        "id": "q12670",
        "input": "change array to float python",
        "output": "",
        "rule": [
            "d12670"
        ]
    },
    {
        "instruction": "",
        "id": "q12671",
        "input": "python enum check type",
        "output": "",
        "rule": [
            "d12671"
        ]
    },
    {
        "instruction": "",
        "id": "q12672",
        "input": "change comma separated string to list python",
        "output": "",
        "rule": [
            "d12672"
        ]
    },
    {
        "instruction": "",
        "id": "q12673",
        "input": "python epec xyz to lat lon alt",
        "output": "",
        "rule": [
            "d12673"
        ]
    },
    {
        "instruction": "",
        "id": "q12674",
        "input": "change data type to int python",
        "output": "",
        "rule": [
            "d12674"
        ]
    },
    {
        "instruction": "",
        "id": "q12675",
        "input": "python epoch to iso",
        "output": "",
        "rule": [
            "d12675"
        ]
    },
    {
        "instruction": "",
        "id": "q12676",
        "input": "change font height in python",
        "output": "",
        "rule": [
            "d12676"
        ]
    },
    {
        "instruction": "",
        "id": "q12677",
        "input": "python equivalent to not in",
        "output": "",
        "rule": [
            "d12677"
        ]
    },
    {
        "instruction": "",
        "id": "q12678",
        "input": "change image to grayscale python cv2",
        "output": "",
        "rule": [
            "d12678"
        ]
    },
    {
        "instruction": "",
        "id": "q12679",
        "input": "python escape binary string",
        "output": "",
        "rule": [
            "d12679"
        ]
    },
    {
        "instruction": "",
        "id": "q12680",
        "input": "change precision of number python",
        "output": "",
        "rule": [
            "d12680"
        ]
    },
    {
        "instruction": "",
        "id": "q12681",
        "input": "python escape postgres sql string",
        "output": "",
        "rule": [
            "d12681"
        ]
    },
    {
        "instruction": "",
        "id": "q12682",
        "input": "change scale on python plot",
        "output": "",
        "rule": [
            "d12682"
        ]
    },
    {
        "instruction": "",
        "id": "q12683",
        "input": "python et create an object based on a dictionary",
        "output": "",
        "rule": [
            "d12683"
        ]
    },
    {
        "instruction": "",
        "id": "q12684",
        "input": "change shape of list python",
        "output": "",
        "rule": [
            "d12684"
        ]
    },
    {
        "instruction": "",
        "id": "q12685",
        "input": "python evaluate truth of a list of boolean",
        "output": "",
        "rule": [
            "d12685"
        ]
    },
    {
        "instruction": "",
        "id": "q12686",
        "input": "change string of number to int python",
        "output": "",
        "rule": [
            "d12686"
        ]
    },
    {
        "instruction": "",
        "id": "q12687",
        "input": "python execute a code after exiting program",
        "output": "",
        "rule": [
            "d12687"
        ]
    },
    {
        "instruction": "",
        "id": "q12688",
        "input": "python exit a function without returning",
        "output": "",
        "rule": [
            "d12688"
        ]
    },
    {
        "instruction": "",
        "id": "q12689",
        "input": "changing scale in graph python",
        "output": "",
        "rule": [
            "d12689"
        ]
    },
    {
        "instruction": "",
        "id": "q12690",
        "input": "python exit message to screen",
        "output": "",
        "rule": [
            "d12690"
        ]
    },
    {
        "instruction": "",
        "id": "q12691",
        "input": "changing tokens to lower case in python tokenizer",
        "output": "",
        "rule": [
            "d12691"
        ]
    },
    {
        "instruction": "",
        "id": "q12692",
        "input": "check element of array in python",
        "output": "",
        "rule": [
            "d12692"
        ]
    },
    {
        "instruction": "",
        "id": "q12693",
        "input": "python experencing an indenting block",
        "output": "",
        "rule": [
            "d12693"
        ]
    },
    {
        "instruction": "",
        "id": "q12694",
        "input": "check for iterable that's not a string python",
        "output": "",
        "rule": [
            "d12694"
        ]
    },
    {
        "instruction": "",
        "id": "q12695",
        "input": "python extension c++ gcc flag",
        "output": "",
        "rule": [
            "d12695"
        ]
    },
    {
        "instruction": "",
        "id": "q12696",
        "input": "python extract all numbers from string",
        "output": "",
        "rule": [
            "d12696"
        ]
    },
    {
        "instruction": "",
        "id": "q12697",
        "input": "check if a python object is a number",
        "output": "",
        "rule": [
            "d12697"
        ]
    },
    {
        "instruction": "",
        "id": "q12698",
        "input": "python extract elements from a list by name",
        "output": "",
        "rule": [
            "d12698"
        ]
    },
    {
        "instruction": "",
        "id": "q12699",
        "input": "check if a string start with a prefix in python",
        "output": "",
        "rule": [
            "d12699"
        ]
    },
    {
        "instruction": "",
        "id": "q12700",
        "input": "python extract feature words",
        "output": "",
        "rule": [
            "d12700"
        ]
    },
    {
        "instruction": "",
        "id": "q12701",
        "input": "python extract params from url string",
        "output": "",
        "rule": [
            "d12701"
        ]
    },
    {
        "instruction": "",
        "id": "q12702",
        "input": "check if all elements in list are equal python",
        "output": "",
        "rule": [
            "d12702"
        ]
    },
    {
        "instruction": "",
        "id": "q12703",
        "input": "python f format string float rounding",
        "output": "",
        "rule": [
            "d12703"
        ]
    },
    {
        "instruction": "",
        "id": "q12704",
        "input": "check if numeric python issinstance",
        "output": "",
        "rule": [
            "d12704"
        ]
    },
    {
        "instruction": "",
        "id": "q12705",
        "input": "python fast way to get image width and height",
        "output": "",
        "rule": [
            "d12705"
        ]
    },
    {
        "instruction": "",
        "id": "q12706",
        "input": "check if object is number python",
        "output": "",
        "rule": [
            "d12706"
        ]
    },
    {
        "instruction": "",
        "id": "q12707",
        "input": "python fastest way to decompress",
        "output": "",
        "rule": [
            "d12707"
        ]
    },
    {
        "instruction": "",
        "id": "q12708",
        "input": "check if punctuation in string python",
        "output": "",
        "rule": [
            "d12708"
        ]
    },
    {
        "instruction": "",
        "id": "q12709",
        "input": "python fft remove peak",
        "output": "",
        "rule": [
            "d12709"
        ]
    },
    {
        "instruction": "",
        "id": "q12710",
        "input": "check if pythons string is non null",
        "output": "",
        "rule": [
            "d12710"
        ]
    },
    {
        "instruction": "",
        "id": "q12711",
        "input": "check if stdout ready for reading python",
        "output": "",
        "rule": [
            "d12711"
        ]
    },
    {
        "instruction": "",
        "id": "q12712",
        "input": "python figure left margin",
        "output": "",
        "rule": [
            "d12712"
        ]
    },
    {
        "instruction": "",
        "id": "q12713",
        "input": "check if two images are the same python",
        "output": "",
        "rule": [
            "d12713"
        ]
    },
    {
        "instruction": "",
        "id": "q12714",
        "input": "python figure no axes",
        "output": "",
        "rule": [
            "d12714"
        ]
    },
    {
        "instruction": "",
        "id": "q12715",
        "input": "check is byte string python",
        "output": "",
        "rule": [
            "d12715"
        ]
    },
    {
        "instruction": "",
        "id": "q12716",
        "input": "python file reading an efficient block size",
        "output": "",
        "rule": [
            "d12716"
        ]
    },
    {
        "instruction": "",
        "id": "q12717",
        "input": "check row of 2d list python",
        "output": "",
        "rule": [
            "d12717"
        ]
    },
    {
        "instruction": "",
        "id": "q12718",
        "input": "python file to ipynb",
        "output": "",
        "rule": [
            "d12718"
        ]
    },
    {
        "instruction": "",
        "id": "q12719",
        "input": "check runtime memory of a function in python",
        "output": "",
        "rule": [
            "d12719"
        ]
    },
    {
        "instruction": "",
        "id": "q12720",
        "input": "python filter based on list index",
        "output": "",
        "rule": [
            "d12720"
        ]
    },
    {
        "instruction": "",
        "id": "q12721",
        "input": "check that type is numeric in python",
        "output": "",
        "rule": [
            "d12721"
        ]
    },
    {
        "instruction": "",
        "id": "q12722",
        "input": "python filter column isin",
        "output": "",
        "rule": [
            "d12722"
        ]
    },
    {
        "instruction": "",
        "id": "q12723",
        "input": "check the paranthesis in python",
        "output": "",
        "rule": [
            "d12723"
        ]
    },
    {
        "instruction": "",
        "id": "q12724",
        "input": "python filter object has no attribute append",
        "output": "",
        "rule": [
            "d12724"
        ]
    },
    {
        "instruction": "",
        "id": "q12725",
        "input": "check the variable datatype in python",
        "output": "",
        "rule": [
            "d12725"
        ]
    },
    {
        "instruction": "",
        "id": "q12726",
        "input": "python finding own ip",
        "output": "",
        "rule": [
            "d12726"
        ]
    },
    {
        "instruction": "",
        "id": "q12727",
        "input": "check valid regex python",
        "output": "",
        "rule": [
            "d12727"
        ]
    },
    {
        "instruction": "",
        "id": "q12728",
        "input": "python finding the lowest integer in a group of numbers",
        "output": "",
        "rule": [
            "d12728"
        ]
    },
    {
        "instruction": "",
        "id": "q12729",
        "input": "check what libraries are loaded in python",
        "output": "",
        "rule": [
            "d12729"
        ]
    },
    {
        "instruction": "",
        "id": "q12730",
        "input": "python fit exponential decay",
        "output": "",
        "rule": [
            "d12730"
        ]
    },
    {
        "instruction": "",
        "id": "q12731",
        "input": "check whether a given string is a path python",
        "output": "",
        "rule": [
            "d12731"
        ]
    },
    {
        "instruction": "",
        "id": "q12732",
        "input": "python fit linear regression and plot",
        "output": "",
        "rule": [
            "d12732"
        ]
    },
    {
        "instruction": "",
        "id": "q12733",
        "input": "checking for equivalence in python",
        "output": "",
        "rule": [
            "d12733"
        ]
    },
    {
        "instruction": "",
        "id": "q12734",
        "input": "python fitting 2d gaussian",
        "output": "",
        "rule": [
            "d12734"
        ]
    },
    {
        "instruction": "",
        "id": "q12735",
        "input": "checking for python cached",
        "output": "",
        "rule": [
            "d12735"
        ]
    },
    {
        "instruction": "",
        "id": "q12736",
        "input": "python fitting gaussian data wieghts",
        "output": "",
        "rule": [
            "d12736"
        ]
    },
    {
        "instruction": "",
        "id": "q12737",
        "input": "clean foreign language characters python text",
        "output": "",
        "rule": [
            "d12737"
        ]
    },
    {
        "instruction": "",
        "id": "q12738",
        "input": "python fix the size of qwidget",
        "output": "",
        "rule": [
            "d12738"
        ]
    },
    {
        "instruction": "",
        "id": "q12739",
        "input": "click a checkbox in webpage python",
        "output": "",
        "rule": [
            "d12739"
        ]
    },
    {
        "instruction": "",
        "id": "q12740",
        "input": "python flask close database after reques",
        "output": "",
        "rule": [
            "d12740"
        ]
    },
    {
        "instruction": "",
        "id": "q12741",
        "input": "cmake python include path windows",
        "output": "",
        "rule": [
            "d12741"
        ]
    },
    {
        "instruction": "",
        "id": "q12742",
        "input": "code 400, message bad request syntax python flask",
        "output": "",
        "rule": [
            "d12742"
        ]
    },
    {
        "instruction": "",
        "id": "q12743",
        "input": "python flask redirect to inde",
        "output": "",
        "rule": [
            "d12743"
        ]
    },
    {
        "instruction": "",
        "id": "q12744",
        "input": "python flask redirect to login page",
        "output": "",
        "rule": [
            "d12744"
        ]
    },
    {
        "instruction": "",
        "id": "q12745",
        "input": "codes to count average of length of words in a given text using python",
        "output": "",
        "rule": [
            "d12745"
        ]
    },
    {
        "instruction": "",
        "id": "q12746",
        "input": "python flask return 401 response",
        "output": "",
        "rule": [
            "d12746"
        ]
    },
    {
        "instruction": "",
        "id": "q12747",
        "input": "coerce to string dictionary value python",
        "output": "",
        "rule": [
            "d12747"
        ]
    },
    {
        "instruction": "",
        "id": "q12748",
        "input": "python flask static directory",
        "output": "",
        "rule": [
            "d12748"
        ]
    },
    {
        "instruction": "",
        "id": "q12749",
        "input": "colorbar to a colormesh python",
        "output": "",
        "rule": [
            "d12749"
        ]
    },
    {
        "instruction": "",
        "id": "q12750",
        "input": "python flask static folder location on other location",
        "output": "",
        "rule": [
            "d12750"
        ]
    },
    {
        "instruction": "",
        "id": "q12751",
        "input": "colormap based on values python",
        "output": "",
        "rule": [
            "d12751"
        ]
    },
    {
        "instruction": "",
        "id": "q12752",
        "input": "combine image to pdf python",
        "output": "",
        "rule": [
            "d12752"
        ]
    },
    {
        "instruction": "",
        "id": "q12753",
        "input": "python flat nested list",
        "output": "",
        "rule": [
            "d12753"
        ]
    },
    {
        "instruction": "",
        "id": "q12754",
        "input": "command to hide a window in python",
        "output": "",
        "rule": [
            "d12754"
        ]
    },
    {
        "instruction": "",
        "id": "q12755",
        "input": "python flatten a nested list",
        "output": "",
        "rule": [
            "d12755"
        ]
    },
    {
        "instruction": "",
        "id": "q12756",
        "input": "communicating with serial devices in python",
        "output": "",
        "rule": [
            "d12756"
        ]
    },
    {
        "instruction": "",
        "id": "q12757",
        "input": "python flatten nested doublylinkedlist recursively",
        "output": "",
        "rule": [
            "d12757"
        ]
    },
    {
        "instruction": "",
        "id": "q12758",
        "input": "comobject get item by id python",
        "output": "",
        "rule": [
            "d12758"
        ]
    },
    {
        "instruction": "",
        "id": "q12759",
        "input": "python flattening nested list",
        "output": "",
        "rule": [
            "d12759"
        ]
    },
    {
        "instruction": "",
        "id": "q12760",
        "input": "compile(pattern [, flags]) python",
        "output": "",
        "rule": [
            "d12760"
        ]
    },
    {
        "instruction": "",
        "id": "q12761",
        "input": "python float to specific number of significant digits",
        "output": "",
        "rule": [
            "d12761"
        ]
    },
    {
        "instruction": "",
        "id": "q12762",
        "input": "compress multiple white space to single python",
        "output": "",
        "rule": [
            "d12762"
        ]
    },
    {
        "instruction": "",
        "id": "q12763",
        "input": "python for images to pdf",
        "output": "",
        "rule": [
            "d12763"
        ]
    },
    {
        "instruction": "",
        "id": "q12764",
        "input": "compute correlation for x and y in python",
        "output": "",
        "rule": [
            "d12764"
        ]
    },
    {
        "instruction": "",
        "id": "q12765",
        "input": "python for index scope",
        "output": "",
        "rule": [
            "d12765"
        ]
    },
    {
        "instruction": "",
        "id": "q12766",
        "input": "python force print to flush",
        "output": "",
        "rule": [
            "d12766"
        ]
    },
    {
        "instruction": "",
        "id": "q12767",
        "input": "concat two objects in python",
        "output": "",
        "rule": [
            "d12767"
        ]
    },
    {
        "instruction": "",
        "id": "q12768",
        "input": "python force variabel to type string",
        "output": "",
        "rule": [
            "d12768"
        ]
    },
    {
        "instruction": "",
        "id": "q12769",
        "input": "confidence interval on predict regression in python",
        "output": "",
        "rule": [
            "d12769"
        ]
    },
    {
        "instruction": "",
        "id": "q12770",
        "input": "python format string with named args",
        "output": "",
        "rule": [
            "d12770"
        ]
    },
    {
        "instruction": "",
        "id": "q12771",
        "input": "connect python to frontend",
        "output": "",
        "rule": [
            "d12771"
        ]
    },
    {
        "instruction": "",
        "id": "q12772",
        "input": "python formatting round to 2 decimals fixed",
        "output": "",
        "rule": [
            "d12772"
        ]
    },
    {
        "instruction": "",
        "id": "q12773",
        "input": "contains method of list in python",
        "output": "",
        "rule": [
            "d12773"
        ]
    },
    {
        "instruction": "",
        "id": "q12774",
        "input": "python formula for median of even numbered list",
        "output": "",
        "rule": [
            "d12774"
        ]
    },
    {
        "instruction": "",
        "id": "q12775",
        "input": "convertir a list into string python",
        "output": "",
        "rule": [
            "d12775"
        ]
    },
    {
        "instruction": "",
        "id": "q12776",
        "input": "python frame based energy",
        "output": "",
        "rule": [
            "d12776"
        ]
    },
    {
        "instruction": "",
        "id": "q12777",
        "input": "convolve 2d gaussian python",
        "output": "",
        "rule": [
            "d12777"
        ]
    },
    {
        "instruction": "",
        "id": "q12778",
        "input": "python from cursor to list",
        "output": "",
        "rule": [
            "d12778"
        ]
    },
    {
        "instruction": "",
        "id": "q12779",
        "input": "copy python numpy array poooooaaaaa1",
        "output": "",
        "rule": [
            "d12779"
        ]
    },
    {
        "instruction": "",
        "id": "q12780",
        "input": "python ftplib check whether file exists",
        "output": "",
        "rule": [
            "d12780"
        ]
    },
    {
        "instruction": "",
        "id": "q12781",
        "input": "corotine with thread asyncio python",
        "output": "",
        "rule": [
            "d12781"
        ]
    },
    {
        "instruction": "",
        "id": "q12782",
        "input": "correlation matrix with respect to python",
        "output": "",
        "rule": [
            "d12782"
        ]
    },
    {
        "instruction": "",
        "id": "q12783",
        "input": "python function array type",
        "output": "",
        "rule": [
            "d12783"
        ]
    },
    {
        "instruction": "",
        "id": "q12784",
        "input": "count nans in matrix python",
        "output": "",
        "rule": [
            "d12784"
        ]
    },
    {
        "instruction": "",
        "id": "q12785",
        "input": "python function for logaritthms",
        "output": "",
        "rule": [
            "d12785"
        ]
    },
    {
        "instruction": "",
        "id": "q12786",
        "input": "count number of overlaps in two python nested lists",
        "output": "",
        "rule": [
            "d12786"
        ]
    },
    {
        "instruction": "",
        "id": "q12787",
        "input": "python function for printing all characters in binary",
        "output": "",
        "rule": [
            "d12787"
        ]
    },
    {
        "instruction": "",
        "id": "q12788",
        "input": "count unique values in a list in python",
        "output": "",
        "rule": [
            "d12788"
        ]
    },
    {
        "instruction": "",
        "id": "q12789",
        "input": "python function lowercase variable name",
        "output": "",
        "rule": [
            "d12789"
        ]
    },
    {
        "instruction": "",
        "id": "q12790",
        "input": "coverage python and unit tests",
        "output": "",
        "rule": [
            "d12790"
        ]
    },
    {
        "instruction": "",
        "id": "q12791",
        "input": "python function return datatype",
        "output": "",
        "rule": [
            "d12791"
        ]
    },
    {
        "instruction": "",
        "id": "q12792",
        "input": "cpmvertarray to string python 3",
        "output": "",
        "rule": [
            "d12792"
        ]
    },
    {
        "instruction": "",
        "id": "q12793",
        "input": "python function that check for elements appearing twice in a list",
        "output": "",
        "rule": [
            "d12793"
        ]
    },
    {
        "instruction": "",
        "id": "q12794",
        "input": "create a bound python",
        "output": "",
        "rule": [
            "d12794"
        ]
    },
    {
        "instruction": "",
        "id": "q12795",
        "input": "python function that cleans up name",
        "output": "",
        "rule": [
            "d12795"
        ]
    },
    {
        "instruction": "",
        "id": "q12796",
        "input": "create a list of frequencies python",
        "output": "",
        "rule": [
            "d12796"
        ]
    },
    {
        "instruction": "",
        "id": "q12797",
        "input": "python function to determine whether a leap year or not",
        "output": "",
        "rule": [
            "d12797"
        ]
    },
    {
        "instruction": "",
        "id": "q12798",
        "input": "create a list of words from a sentence python",
        "output": "",
        "rule": [
            "d12798"
        ]
    },
    {
        "instruction": "",
        "id": "q12799",
        "input": "python function to round to variable number of digits",
        "output": "",
        "rule": [
            "d12799"
        ]
    },
    {
        "instruction": "",
        "id": "q12800",
        "input": "create an ec2 instance from my ami python",
        "output": "",
        "rule": [
            "d12800"
        ]
    },
    {
        "instruction": "",
        "id": "q12801",
        "input": "python function undefinied inputs",
        "output": "",
        "rule": [
            "d12801"
        ]
    },
    {
        "instruction": "",
        "id": "q12802",
        "input": "create an object tree from a text file in python",
        "output": "",
        "rule": [
            "d12802"
        ]
    },
    {
        "instruction": "",
        "id": "q12803",
        "input": "python function's arguements from cmd",
        "output": "",
        "rule": [
            "d12803"
        ]
    },
    {
        "instruction": "",
        "id": "q12804",
        "input": "create an ordered dictionary from unordered dictionary python",
        "output": "",
        "rule": [
            "d12804"
        ]
    },
    {
        "instruction": "",
        "id": "q12805",
        "input": "python functional style passing array slices",
        "output": "",
        "rule": [
            "d12805"
        ]
    },
    {
        "instruction": "",
        "id": "q12806",
        "input": "create comma separated list from list python",
        "output": "",
        "rule": [
            "d12806"
        ]
    },
    {
        "instruction": "",
        "id": "q12807",
        "input": "python fwrite string to file",
        "output": "",
        "rule": [
            "d12807"
        ]
    },
    {
        "instruction": "",
        "id": "q12808",
        "input": "create conda env in python",
        "output": "",
        "rule": [
            "d12808"
        ]
    },
    {
        "instruction": "",
        "id": "q12809",
        "input": "python generate numpy array of zeros",
        "output": "",
        "rule": [
            "d12809"
        ]
    },
    {
        "instruction": "",
        "id": "q12810",
        "input": "python generate random x,y points",
        "output": "",
        "rule": [
            "d12810"
        ]
    },
    {
        "instruction": "",
        "id": "q12811",
        "input": "create dictionary using list comprehension in python sample",
        "output": "",
        "rule": [
            "d12811"
        ]
    },
    {
        "instruction": "",
        "id": "q12812",
        "input": "python generating random variables from a mixture of normal distributions",
        "output": "",
        "rule": [
            "d12812"
        ]
    },
    {
        "instruction": "",
        "id": "q12813",
        "input": "create directory recursive in python",
        "output": "",
        "rule": [
            "d12813"
        ]
    },
    {
        "instruction": "",
        "id": "q12814",
        "input": "python genereate random string",
        "output": "",
        "rule": [
            "d12814"
        ]
    },
    {
        "instruction": "",
        "id": "q12815",
        "input": "create exponential function in python",
        "output": "",
        "rule": [
            "d12815"
        ]
    },
    {
        "instruction": "",
        "id": "q12816",
        "input": "python get a list of the files from a directory",
        "output": "",
        "rule": [
            "d12816"
        ]
    },
    {
        "instruction": "",
        "id": "q12817",
        "input": "create mongodb index using python",
        "output": "",
        "rule": [
            "d12817"
        ]
    },
    {
        "instruction": "",
        "id": "q12818",
        "input": "python get a range of time",
        "output": "",
        "rule": [
            "d12818"
        ]
    },
    {
        "instruction": "",
        "id": "q12819",
        "input": "create skew symmetric matrix from a vector python",
        "output": "",
        "rule": [
            "d12819"
        ]
    },
    {
        "instruction": "",
        "id": "q12820",
        "input": "python get a specific node",
        "output": "",
        "rule": [
            "d12820"
        ]
    },
    {
        "instruction": "",
        "id": "q12821",
        "input": "create valiable name by concatinate strings in python",
        "output": "",
        "rule": [
            "d12821"
        ]
    },
    {
        "instruction": "",
        "id": "q12822",
        "input": "python get absolute path name",
        "output": "",
        "rule": [
            "d12822"
        ]
    },
    {
        "instruction": "",
        "id": "q12823",
        "input": "creating a database engine python posgres",
        "output": "",
        "rule": [
            "d12823"
        ]
    },
    {
        "instruction": "",
        "id": "q12824",
        "input": "python get active window url and replace it",
        "output": "",
        "rule": [
            "d12824"
        ]
    },
    {
        "instruction": "",
        "id": "q12825",
        "input": "creating a list in python without numpy",
        "output": "",
        "rule": [
            "d12825"
        ]
    },
    {
        "instruction": "",
        "id": "q12826",
        "input": "python get all unique strings of list",
        "output": "",
        "rule": [
            "d12826"
        ]
    },
    {
        "instruction": "",
        "id": "q12827",
        "input": "creating an image in python from a byte array",
        "output": "",
        "rule": [
            "d12827"
        ]
    },
    {
        "instruction": "",
        "id": "q12828",
        "input": "python get all values of enum",
        "output": "",
        "rule": [
            "d12828"
        ]
    },
    {
        "instruction": "",
        "id": "q12829",
        "input": "python get amount of ram in computer",
        "output": "",
        "rule": [
            "d12829"
        ]
    },
    {
        "instruction": "",
        "id": "q12830",
        "input": "custom hash function python",
        "output": "",
        "rule": [
            "d12830"
        ]
    },
    {
        "instruction": "",
        "id": "q12831",
        "input": "python get basename url",
        "output": "",
        "rule": [
            "d12831"
        ]
    },
    {
        "instruction": "",
        "id": "q12832",
        "input": "python get boolean from json object",
        "output": "",
        "rule": [
            "d12832"
        ]
    },
    {
        "instruction": "",
        "id": "q12833",
        "input": "custom validator python flaskform",
        "output": "",
        "rule": [
            "d12833"
        ]
    },
    {
        "instruction": "",
        "id": "q12834",
        "input": "python get camel case for text",
        "output": "",
        "rule": [
            "d12834"
        ]
    },
    {
        "instruction": "",
        "id": "q12835",
        "input": "custom week start day for python weekday",
        "output": "",
        "rule": [
            "d12835"
        ]
    },
    {
        "instruction": "",
        "id": "q12836",
        "input": "python get clipboard data",
        "output": "",
        "rule": [
            "d12836"
        ]
    },
    {
        "instruction": "",
        "id": "q12837",
        "input": "customize the output of a decision tree in python",
        "output": "",
        "rule": [
            "d12837"
        ]
    },
    {
        "instruction": "",
        "id": "q12838",
        "input": "python get column from a matrix",
        "output": "",
        "rule": [
            "d12838"
        ]
    },
    {
        "instruction": "",
        "id": "q12839",
        "input": "data folder path python",
        "output": "",
        "rule": [
            "d12839"
        ]
    },
    {
        "instruction": "",
        "id": "q12840",
        "input": "python get computer ram usage",
        "output": "",
        "rule": [
            "d12840"
        ]
    },
    {
        "instruction": "",
        "id": "q12841",
        "input": "datetime python get seconds from epoch",
        "output": "",
        "rule": [
            "d12841"
        ]
    },
    {
        "instruction": "",
        "id": "q12842",
        "input": "datetime python time to utc",
        "output": "",
        "rule": [
            "d12842"
        ]
    },
    {
        "instruction": "",
        "id": "q12843",
        "input": "python get current git commit",
        "output": "",
        "rule": [
            "d12843"
        ]
    },
    {
        "instruction": "",
        "id": "q12844",
        "input": "datetime python3 removing the microseconds",
        "output": "",
        "rule": [
            "d12844"
        ]
    },
    {
        "instruction": "",
        "id": "q12845",
        "input": "datetime to quarter and year python",
        "output": "",
        "rule": [
            "d12845"
        ]
    },
    {
        "instruction": "",
        "id": "q12846",
        "input": "python get datetime from timestamp",
        "output": "",
        "rule": [
            "d12846"
        ]
    },
    {
        "instruction": "",
        "id": "q12847",
        "input": "python get default encoding",
        "output": "",
        "rule": [
            "d12847"
        ]
    },
    {
        "instruction": "",
        "id": "q12848",
        "input": "default value for all keys in a dict python",
        "output": "",
        "rule": [
            "d12848"
        ]
    },
    {
        "instruction": "",
        "id": "q12849",
        "input": "python get domain from url",
        "output": "",
        "rule": [
            "d12849"
        ]
    },
    {
        "instruction": "",
        "id": "q12850",
        "input": "defining constructor of dict in python",
        "output": "",
        "rule": [
            "d12850"
        ]
    },
    {
        "instruction": "",
        "id": "q12851",
        "input": "python get file icon from extension",
        "output": "",
        "rule": [
            "d12851"
        ]
    },
    {
        "instruction": "",
        "id": "q12852",
        "input": "delete any file in folder in python",
        "output": "",
        "rule": [
            "d12852"
        ]
    },
    {
        "instruction": "",
        "id": "q12853",
        "input": "delete columns from data frame in python",
        "output": "",
        "rule": [
            "d12853"
        ]
    },
    {
        "instruction": "",
        "id": "q12854",
        "input": "python get file mime type",
        "output": "",
        "rule": [
            "d12854"
        ]
    },
    {
        "instruction": "",
        "id": "q12855",
        "input": "python get filename according url",
        "output": "",
        "rule": [
            "d12855"
        ]
    },
    {
        "instruction": "",
        "id": "q12856",
        "input": "delete variables from globals python",
        "output": "",
        "rule": [
            "d12856"
        ]
    },
    {
        "instruction": "",
        "id": "q12857",
        "input": "deleting keys in python dictionaries",
        "output": "",
        "rule": [
            "d12857"
        ]
    },
    {
        "instruction": "",
        "id": "q12858",
        "input": "python get id of windows",
        "output": "",
        "rule": [
            "d12858"
        ]
    },
    {
        "instruction": "",
        "id": "q12859",
        "input": "delimeted string to tuple in python",
        "output": "",
        "rule": [
            "d12859"
        ]
    },
    {
        "instruction": "",
        "id": "q12860",
        "input": "detect all empty column python",
        "output": "",
        "rule": [
            "d12860"
        ]
    },
    {
        "instruction": "",
        "id": "q12861",
        "input": "python get instance property by name",
        "output": "",
        "rule": [
            "d12861"
        ]
    },
    {
        "instruction": "",
        "id": "q12862",
        "input": "detect any key press python",
        "output": "",
        "rule": [
            "d12862"
        ]
    },
    {
        "instruction": "",
        "id": "q12863",
        "input": "python get item at an index",
        "output": "",
        "rule": [
            "d12863"
        ]
    },
    {
        "instruction": "",
        "id": "q12864",
        "input": "determine probability distribution of data python",
        "output": "",
        "rule": [
            "d12864"
        ]
    },
    {
        "instruction": "",
        "id": "q12865",
        "input": "python get last file modified",
        "output": "",
        "rule": [
            "d12865"
        ]
    },
    {
        "instruction": "",
        "id": "q12866",
        "input": "determine variable value multi value regression python",
        "output": "",
        "rule": [
            "d12866"
        ]
    },
    {
        "instruction": "",
        "id": "q12867",
        "input": "python get last line of varable",
        "output": "",
        "rule": [
            "d12867"
        ]
    },
    {
        "instruction": "",
        "id": "q12868",
        "input": "determining if something is a callable python",
        "output": "",
        "rule": [
            "d12868"
        ]
    },
    {
        "instruction": "",
        "id": "q12869",
        "input": "python get last modification time of a file",
        "output": "",
        "rule": [
            "d12869"
        ]
    },
    {
        "instruction": "",
        "id": "q12870",
        "input": "determining time complexity in python",
        "output": "",
        "rule": [
            "d12870"
        ]
    },
    {
        "instruction": "",
        "id": "q12871",
        "input": "python get last modified directory",
        "output": "",
        "rule": [
            "d12871"
        ]
    },
    {
        "instruction": "",
        "id": "q12872",
        "input": "devide elements in a list by a number python",
        "output": "",
        "rule": [
            "d12872"
        ]
    },
    {
        "instruction": "",
        "id": "q12873",
        "input": "python get last month datetime",
        "output": "",
        "rule": [
            "d12873"
        ]
    },
    {
        "instruction": "",
        "id": "q12874",
        "input": "different dtypes in array python",
        "output": "",
        "rule": [
            "d12874"
        ]
    },
    {
        "instruction": "",
        "id": "q12875",
        "input": "python get last of month current year",
        "output": "",
        "rule": [
            "d12875"
        ]
    },
    {
        "instruction": "",
        "id": "q12876",
        "input": "differentiation between name and entity using python",
        "output": "",
        "rule": [
            "d12876"
        ]
    },
    {
        "instruction": "",
        "id": "q12877",
        "input": "python get list of dictionary keys sorted by value",
        "output": "",
        "rule": [
            "d12877"
        ]
    },
    {
        "instruction": "",
        "id": "q12878",
        "input": "differnce between read, readline, in python",
        "output": "",
        "rule": [
            "d12878"
        ]
    },
    {
        "instruction": "",
        "id": "q12879",
        "input": "python get list of prime factors",
        "output": "",
        "rule": [
            "d12879"
        ]
    },
    {
        "instruction": "",
        "id": "q12880",
        "input": "dimension a tensor in python",
        "output": "",
        "rule": [
            "d12880"
        ]
    },
    {
        "instruction": "",
        "id": "q12881",
        "input": "python get magnitude of multidimensional vector",
        "output": "",
        "rule": [
            "d12881"
        ]
    },
    {
        "instruction": "",
        "id": "q12882",
        "input": "disable python requests logging",
        "output": "",
        "rule": [
            "d12882"
        ]
    },
    {
        "instruction": "",
        "id": "q12883",
        "input": "python get max column lengh in a csv file column",
        "output": "",
        "rule": [
            "d12883"
        ]
    },
    {
        "instruction": "",
        "id": "q12884",
        "input": "disable ssl certificate check python",
        "output": "",
        "rule": [
            "d12884"
        ]
    },
    {
        "instruction": "",
        "id": "q12885",
        "input": "python get memory usage of a process on windows",
        "output": "",
        "rule": [
            "d12885"
        ]
    },
    {
        "instruction": "",
        "id": "q12886",
        "input": "disable xaxis tickmarks python",
        "output": "",
        "rule": [
            "d12886"
        ]
    },
    {
        "instruction": "",
        "id": "q12887",
        "input": "python get method name as string",
        "output": "",
        "rule": [
            "d12887"
        ]
    },
    {
        "instruction": "",
        "id": "q12888",
        "input": "discarding owned python object not allowed without gil",
        "output": "",
        "rule": [
            "d12888"
        ]
    },
    {
        "instruction": "",
        "id": "q12889",
        "input": "discord bot python delete message",
        "output": "",
        "rule": [
            "d12889"
        ]
    },
    {
        "instruction": "",
        "id": "q12890",
        "input": "python get name for a month",
        "output": "",
        "rule": [
            "d12890"
        ]
    },
    {
        "instruction": "",
        "id": "q12891",
        "input": "display root folder name in python",
        "output": "",
        "rule": [
            "d12891"
        ]
    },
    {
        "instruction": "",
        "id": "q12892",
        "input": "python get notification of clipboard paste",
        "output": "",
        "rule": [
            "d12892"
        ]
    },
    {
        "instruction": "",
        "id": "q12893",
        "input": "divide data into equal segments in python",
        "output": "",
        "rule": [
            "d12893"
        ]
    },
    {
        "instruction": "",
        "id": "q12894",
        "input": "python get nth element from array",
        "output": "",
        "rule": [
            "d12894"
        ]
    },
    {
        "instruction": "",
        "id": "q12895",
        "input": "django python json dump",
        "output": "",
        "rule": [
            "d12895"
        ]
    },
    {
        "instruction": "",
        "id": "q12896",
        "input": "python get pairwise distances",
        "output": "",
        "rule": [
            "d12896"
        ]
    },
    {
        "instruction": "",
        "id": "q12897",
        "input": "do global python objects get deleted after program exits",
        "output": "",
        "rule": [
            "d12897"
        ]
    },
    {
        "instruction": "",
        "id": "q12898",
        "input": "python get png from url",
        "output": "",
        "rule": [
            "d12898"
        ]
    },
    {
        "instruction": "",
        "id": "q12899",
        "input": "do something on program exit python",
        "output": "",
        "rule": [
            "d12899"
        ]
    },
    {
        "instruction": "",
        "id": "q12900",
        "input": "python get post content type",
        "output": "",
        "rule": [
            "d12900"
        ]
    },
    {
        "instruction": "",
        "id": "q12901",
        "input": "python get properties of pdf file",
        "output": "",
        "rule": [
            "d12901"
        ]
    },
    {
        "instruction": "",
        "id": "q12902",
        "input": "does hash in python guarantee that uniqueness for string",
        "output": "",
        "rule": [
            "d12902"
        ]
    },
    {
        "instruction": "",
        "id": "q12903",
        "input": "python get propery by name",
        "output": "",
        "rule": [
            "d12903"
        ]
    },
    {
        "instruction": "",
        "id": "q12904",
        "input": "does python allow for missing function args like r",
        "output": "",
        "rule": [
            "d12904"
        ]
    },
    {
        "instruction": "",
        "id": "q12905",
        "input": "python get recursion depth",
        "output": "",
        "rule": [
            "d12905"
        ]
    },
    {
        "instruction": "",
        "id": "q12906",
        "input": "does tensorflow work with language other than python",
        "output": "",
        "rule": [
            "d12906"
        ]
    },
    {
        "instruction": "",
        "id": "q12907",
        "input": "python get screen dimensions",
        "output": "",
        "rule": [
            "d12907"
        ]
    },
    {
        "instruction": "",
        "id": "q12908",
        "input": "dot product using for loop in python",
        "output": "",
        "rule": [
            "d12908"
        ]
    },
    {
        "instruction": "",
        "id": "q12909",
        "input": "python get shape of list of lists",
        "output": "",
        "rule": [
            "d12909"
        ]
    },
    {
        "instruction": "",
        "id": "q12910",
        "input": "downsampling 2d python array",
        "output": "",
        "rule": [
            "d12910"
        ]
    },
    {
        "instruction": "",
        "id": "q12911",
        "input": "python get ssl wrapped socket",
        "output": "",
        "rule": [
            "d12911"
        ]
    },
    {
        "instruction": "",
        "id": "q12912",
        "input": "draw a line in python",
        "output": "",
        "rule": [
            "d12912"
        ]
    },
    {
        "instruction": "",
        "id": "q12913",
        "input": "python get stacktrace from sys",
        "output": "",
        "rule": [
            "d12913"
        ]
    },
    {
        "instruction": "",
        "id": "q12914",
        "input": "drawing image with python in latex",
        "output": "",
        "rule": [
            "d12914"
        ]
    },
    {
        "instruction": "",
        "id": "q12915",
        "input": "python get text of response",
        "output": "",
        "rule": [
            "d12915"
        ]
    },
    {
        "instruction": "",
        "id": "q12916",
        "input": "dropping columns with wild card in column name from python data frame",
        "output": "",
        "rule": [
            "d12916"
        ]
    },
    {
        "instruction": "",
        "id": "q12917",
        "input": "python get the first day of current month",
        "output": "",
        "rule": [
            "d12917"
        ]
    },
    {
        "instruction": "",
        "id": "q12918",
        "input": "dynamically create documents python mongoegine",
        "output": "",
        "rule": [
            "d12918"
        ]
    },
    {
        "instruction": "",
        "id": "q12919",
        "input": "each input in an array, python",
        "output": "",
        "rule": [
            "d12919"
        ]
    },
    {
        "instruction": "",
        "id": "q12920",
        "input": "python get the last n from array",
        "output": "",
        "rule": [
            "d12920"
        ]
    },
    {
        "instruction": "",
        "id": "q12921",
        "input": "early stopping use keras lstm in python",
        "output": "",
        "rule": [
            "d12921"
        ]
    },
    {
        "instruction": "",
        "id": "q12922",
        "input": "python get the stdout from external command",
        "output": "",
        "rule": [
            "d12922"
        ]
    },
    {
        "instruction": "",
        "id": "q12923",
        "input": "easiest way to create matrix in python",
        "output": "",
        "rule": [
            "d12923"
        ]
    },
    {
        "instruction": "",
        "id": "q12924",
        "input": "python get timezone offset for eastern",
        "output": "",
        "rule": [
            "d12924"
        ]
    },
    {
        "instruction": "",
        "id": "q12925",
        "input": "elasticsearch python tokenize results",
        "output": "",
        "rule": [
            "d12925"
        ]
    },
    {
        "instruction": "",
        "id": "q12926",
        "input": "python get today's date utc",
        "output": "",
        "rule": [
            "d12926"
        ]
    },
    {
        "instruction": "",
        "id": "q12927",
        "input": "eliminating spaces in strings python",
        "output": "",
        "rule": [
            "d12927"
        ]
    },
    {
        "instruction": "",
        "id": "q12928",
        "input": "python get true positives from confusion matrix",
        "output": "",
        "rule": [
            "d12928"
        ]
    },
    {
        "instruction": "",
        "id": "q12929",
        "input": "encoding a string to binary in python",
        "output": "",
        "rule": [
            "d12929"
        ]
    },
    {
        "instruction": "",
        "id": "q12930",
        "input": "python get value from dictionary by key with default value",
        "output": "",
        "rule": [
            "d12930"
        ]
    },
    {
        "instruction": "",
        "id": "q12931",
        "input": "enum contructor sample python code",
        "output": "",
        "rule": [
            "d12931"
        ]
    },
    {
        "instruction": "",
        "id": "q12932",
        "input": "environment variables are not recognized in docker entrypoint python file",
        "output": "",
        "rule": [
            "d12932"
        ]
    },
    {
        "instruction": "",
        "id": "q12933",
        "input": "python get variable from another method",
        "output": "",
        "rule": [
            "d12933"
        ]
    },
    {
        "instruction": "",
        "id": "q12934",
        "input": "epoch converter python specific zone",
        "output": "",
        "rule": [
            "d12934"
        ]
    },
    {
        "instruction": "",
        "id": "q12935",
        "input": "python git all branches",
        "output": "",
        "rule": [
            "d12935"
        ]
    },
    {
        "instruction": "",
        "id": "q12936",
        "input": "epython example of sorted key",
        "output": "",
        "rule": [
            "d12936"
        ]
    },
    {
        "instruction": "",
        "id": "q12937",
        "input": "python githum change string to lower case",
        "output": "",
        "rule": [
            "d12937"
        ]
    },
    {
        "instruction": "",
        "id": "q12938",
        "input": "euclidean distance of nd array algorithm python",
        "output": "",
        "rule": [
            "d12938"
        ]
    },
    {
        "instruction": "",
        "id": "q12939",
        "input": "python given seconds (int) calculate hours minutes and seconds",
        "output": "",
        "rule": [
            "d12939"
        ]
    },
    {
        "instruction": "",
        "id": "q12940",
        "input": "euclidean distance python function",
        "output": "",
        "rule": [
            "d12940"
        ]
    },
    {
        "instruction": "",
        "id": "q12941",
        "input": "python global variable reseting to original value",
        "output": "",
        "rule": [
            "d12941"
        ]
    },
    {
        "instruction": "",
        "id": "q12942",
        "input": "examble of static methods in python",
        "output": "",
        "rule": [
            "d12942"
        ]
    },
    {
        "instruction": "",
        "id": "q12943",
        "input": "execute a stored procedure in python",
        "output": "",
        "rule": [
            "d12943"
        ]
    },
    {
        "instruction": "",
        "id": "q12944",
        "input": "python graphviz not found",
        "output": "",
        "rule": [
            "d12944"
        ]
    },
    {
        "instruction": "",
        "id": "q12945",
        "input": "execute python files simultaneously from a single python file",
        "output": "",
        "rule": [
            "d12945"
        ]
    },
    {
        "instruction": "",
        "id": "q12946",
        "input": "python gridtablebase column width",
        "output": "",
        "rule": [
            "d12946"
        ]
    },
    {
        "instruction": "",
        "id": "q12947",
        "input": "export a graph python to a file",
        "output": "",
        "rule": [
            "d12947"
        ]
    },
    {
        "instruction": "",
        "id": "q12948",
        "input": "python gtk get parent window of a widget",
        "output": "",
        "rule": [
            "d12948"
        ]
    },
    {
        "instruction": "",
        "id": "q12949",
        "input": "extract date from string python with strpfromat",
        "output": "",
        "rule": [
            "d12949"
        ]
    },
    {
        "instruction": "",
        "id": "q12950",
        "input": "python gui move window location",
        "output": "",
        "rule": [
            "d12950"
        ]
    },
    {
        "instruction": "",
        "id": "q12951",
        "input": "extract even fourier components from an image python",
        "output": "",
        "rule": [
            "d12951"
        ]
    },
    {
        "instruction": "",
        "id": "q12952",
        "input": "python gzip test if a gzip file is valid",
        "output": "",
        "rule": [
            "d12952"
        ]
    },
    {
        "instruction": "",
        "id": "q12953",
        "input": "extract only words from topics without probability in topic modeling in python",
        "output": "",
        "rule": [
            "d12953"
        ]
    },
    {
        "instruction": "",
        "id": "q12954",
        "input": "python h5py check if file is open",
        "output": "",
        "rule": [
            "d12954"
        ]
    },
    {
        "instruction": "",
        "id": "q12955",
        "input": "fasta file parsing biopython to get sequence only",
        "output": "",
        "rule": [
            "d12955"
        ]
    },
    {
        "instruction": "",
        "id": "q12956",
        "input": "python h5py open not closing",
        "output": "",
        "rule": [
            "d12956"
        ]
    },
    {
        "instruction": "",
        "id": "q12957",
        "input": "fastest way to render dynamic bitmap graphics python",
        "output": "",
        "rule": [
            "d12957"
        ]
    },
    {
        "instruction": "",
        "id": "q12958",
        "input": "python hamming distance between columns of strings",
        "output": "",
        "rule": [
            "d12958"
        ]
    },
    {
        "instruction": "",
        "id": "q12959",
        "input": "ffmpeg not working with python",
        "output": "",
        "rule": [
            "d12959"
        ]
    },
    {
        "instruction": "",
        "id": "q12960",
        "input": "python hamming distance string",
        "output": "",
        "rule": [
            "d12960"
        ]
    },
    {
        "instruction": "",
        "id": "q12961",
        "input": "fft python irregular spaced data",
        "output": "",
        "rule": [
            "d12961"
        ]
    },
    {
        "instruction": "",
        "id": "q12962",
        "input": "field default with python",
        "output": "",
        "rule": [
            "d12962"
        ]
    },
    {
        "instruction": "",
        "id": "q12963",
        "input": "python hdfs detect file exist",
        "output": "",
        "rule": [
            "d12963"
        ]
    },
    {
        "instruction": "",
        "id": "q12964",
        "input": "figure out data type of an object python",
        "output": "",
        "rule": [
            "d12964"
        ]
    },
    {
        "instruction": "",
        "id": "q12965",
        "input": "python histogram get data with in bin",
        "output": "",
        "rule": [
            "d12965"
        ]
    },
    {
        "instruction": "",
        "id": "q12966",
        "input": "file path username case sensitivity python",
        "output": "",
        "rule": [
            "d12966"
        ]
    },
    {
        "instruction": "",
        "id": "q12967",
        "input": "python how do i get a stacked widget height",
        "output": "",
        "rule": [
            "d12967"
        ]
    },
    {
        "instruction": "",
        "id": "q12968",
        "input": "file permissions python write",
        "output": "",
        "rule": [
            "d12968"
        ]
    },
    {
        "instruction": "",
        "id": "q12969",
        "input": "python how do i get the image size",
        "output": "",
        "rule": [
            "d12969"
        ]
    },
    {
        "instruction": "",
        "id": "q12970",
        "input": "filer the values of a table in python based upon variable",
        "output": "",
        "rule": [
            "d12970"
        ]
    },
    {
        "instruction": "",
        "id": "q12971",
        "input": "python how do you check the array attribute",
        "output": "",
        "rule": [
            "d12971"
        ]
    },
    {
        "instruction": "",
        "id": "q12972",
        "input": "python how do you split a dictionary into evenly sized chunks",
        "output": "",
        "rule": [
            "d12972"
        ]
    },
    {
        "instruction": "",
        "id": "q12973",
        "input": "filling around an image with white python",
        "output": "",
        "rule": [
            "d12973"
        ]
    },
    {
        "instruction": "",
        "id": "q12974",
        "input": "python how not to close the window after running",
        "output": "",
        "rule": [
            "d12974"
        ]
    },
    {
        "instruction": "",
        "id": "q12975",
        "input": "python how to add builtin",
        "output": "",
        "rule": [
            "d12975"
        ]
    },
    {
        "instruction": "",
        "id": "q12976",
        "input": "filter dictionary python with certain keys",
        "output": "",
        "rule": [
            "d12976"
        ]
    },
    {
        "instruction": "",
        "id": "q12977",
        "input": "python how to apply label encoder all all columns",
        "output": "",
        "rule": [
            "d12977"
        ]
    },
    {
        "instruction": "",
        "id": "q12978",
        "input": "filter twitter user tweepy python",
        "output": "",
        "rule": [
            "d12978"
        ]
    },
    {
        "instruction": "",
        "id": "q12979",
        "input": "python how to apply round in list value",
        "output": "",
        "rule": [
            "d12979"
        ]
    },
    {
        "instruction": "",
        "id": "q12980",
        "input": "finding index of a specific element in a list python",
        "output": "",
        "rule": [
            "d12980"
        ]
    },
    {
        "instruction": "",
        "id": "q12981",
        "input": "python how to bind paramters to function",
        "output": "",
        "rule": [
            "d12981"
        ]
    },
    {
        "instruction": "",
        "id": "q12982",
        "input": "finding nearest numbers in python",
        "output": "",
        "rule": [
            "d12982"
        ]
    },
    {
        "instruction": "",
        "id": "q12983",
        "input": "finding patterns in python string",
        "output": "",
        "rule": [
            "d12983"
        ]
    },
    {
        "instruction": "",
        "id": "q12984",
        "input": "python how to check if environment defined",
        "output": "",
        "rule": [
            "d12984"
        ]
    },
    {
        "instruction": "",
        "id": "q12985",
        "input": "finding sets of consecutive numbers in a list python",
        "output": "",
        "rule": [
            "d12985"
        ]
    },
    {
        "instruction": "",
        "id": "q12986",
        "input": "python how to check list or array",
        "output": "",
        "rule": [
            "d12986"
        ]
    },
    {
        "instruction": "",
        "id": "q12987",
        "input": "finding the most recent date before a given date python",
        "output": "",
        "rule": [
            "d12987"
        ]
    },
    {
        "instruction": "",
        "id": "q12988",
        "input": "finding the two closest values in an array python",
        "output": "",
        "rule": [
            "d12988"
        ]
    },
    {
        "instruction": "",
        "id": "q12989",
        "input": "python how to clear memory",
        "output": "",
        "rule": [
            "d12989"
        ]
    },
    {
        "instruction": "",
        "id": "q12990",
        "input": "fins max in array python",
        "output": "",
        "rule": [
            "d12990"
        ]
    },
    {
        "instruction": "",
        "id": "q12991",
        "input": "python how to compare strings without case",
        "output": "",
        "rule": [
            "d12991"
        ]
    },
    {
        "instruction": "",
        "id": "q12992",
        "input": "fitting a gaussian in python direct method",
        "output": "",
        "rule": [
            "d12992"
        ]
    },
    {
        "instruction": "",
        "id": "q12993",
        "input": "python how to compute chi square",
        "output": "",
        "rule": [
            "d12993"
        ]
    },
    {
        "instruction": "",
        "id": "q12994",
        "input": "flask jinja if get python",
        "output": "",
        "rule": [
            "d12994"
        ]
    },
    {
        "instruction": "",
        "id": "q12995",
        "input": "python how to covert binary to byte arry",
        "output": "",
        "rule": [
            "d12995"
        ]
    },
    {
        "instruction": "",
        "id": "q12996",
        "input": "flexibility for barwidth in python matplotlib barplot",
        "output": "",
        "rule": [
            "d12996"
        ]
    },
    {
        "instruction": "",
        "id": "q12997",
        "input": "python how to decorate for both instance methods",
        "output": "",
        "rule": [
            "d12997"
        ]
    },
    {
        "instruction": "",
        "id": "q12998",
        "input": "flip image using python",
        "output": "",
        "rule": [
            "d12998"
        ]
    },
    {
        "instruction": "",
        "id": "q12999",
        "input": "python how to delete files on local disk",
        "output": "",
        "rule": [
            "d12999"
        ]
    },
    {
        "instruction": "",
        "id": "q13000",
        "input": "flush standard output python",
        "output": "",
        "rule": [
            "d13000"
        ]
    },
    {
        "instruction": "",
        "id": "q13001",
        "input": "python how to determine if linux or windows",
        "output": "",
        "rule": [
            "d13001"
        ]
    },
    {
        "instruction": "",
        "id": "q13002",
        "input": "follow redirection to get actual link in python",
        "output": "",
        "rule": [
            "d13002"
        ]
    },
    {
        "instruction": "",
        "id": "q13003",
        "input": "python how to do a boxplot",
        "output": "",
        "rule": [
            "d13003"
        ]
    },
    {
        "instruction": "",
        "id": "q13004",
        "input": "for in python unhashable type list",
        "output": "",
        "rule": [
            "d13004"
        ]
    },
    {
        "instruction": "",
        "id": "q13005",
        "input": "python how to do tangent",
        "output": "",
        "rule": [
            "d13005"
        ]
    },
    {
        "instruction": "",
        "id": "q13006",
        "input": "fourier transform audio file python",
        "output": "",
        "rule": [
            "d13006"
        ]
    },
    {
        "instruction": "",
        "id": "q13007",
        "input": "python how to enumerate serial ports in linux usb hub",
        "output": "",
        "rule": [
            "d13007"
        ]
    },
    {
        "instruction": "",
        "id": "q13008",
        "input": "fraction and whole number string to float python",
        "output": "",
        "rule": [
            "d13008"
        ]
    },
    {
        "instruction": "",
        "id": "q13009",
        "input": "python how to exit a project",
        "output": "",
        "rule": [
            "d13009"
        ]
    },
    {
        "instruction": "",
        "id": "q13010",
        "input": "free servers for testing ftp in python",
        "output": "",
        "rule": [
            "d13010"
        ]
    },
    {
        "instruction": "",
        "id": "q13011",
        "input": "python how to format a duration in seconds",
        "output": "",
        "rule": [
            "d13011"
        ]
    },
    {
        "instruction": "",
        "id": "q13012",
        "input": "from polar to lat lon python",
        "output": "",
        "rule": [
            "d13012"
        ]
    },
    {
        "instruction": "",
        "id": "q13013",
        "input": "python how to get a decimal range",
        "output": "",
        "rule": [
            "d13013"
        ]
    },
    {
        "instruction": "",
        "id": "q13014",
        "input": "from python json to bytes",
        "output": "",
        "rule": [
            "d13014"
        ]
    },
    {
        "instruction": "",
        "id": "q13015",
        "input": "python how to get number of cores on computer",
        "output": "",
        "rule": [
            "d13015"
        ]
    },
    {
        "instruction": "",
        "id": "q13016",
        "input": "function for width of table in python",
        "output": "",
        "rule": [
            "d13016"
        ]
    },
    {
        "instruction": "",
        "id": "q13017",
        "input": "python how to get parent of self",
        "output": "",
        "rule": [
            "d13017"
        ]
    },
    {
        "instruction": "",
        "id": "q13018",
        "input": "function name to string python",
        "output": "",
        "rule": [
            "d13018"
        ]
    },
    {
        "instruction": "",
        "id": "q13019",
        "input": "python how to get the names of columns in data frame",
        "output": "",
        "rule": [
            "d13019"
        ]
    },
    {
        "instruction": "",
        "id": "q13020",
        "input": "function python several lists to one list",
        "output": "",
        "rule": [
            "d13020"
        ]
    },
    {
        "instruction": "",
        "id": "q13021",
        "input": "python how to get the number of rows of a data frame",
        "output": "",
        "rule": [
            "d13021"
        ]
    },
    {
        "instruction": "",
        "id": "q13022",
        "input": "python how to get the progress of celery task",
        "output": "",
        "rule": [
            "d13022"
        ]
    },
    {
        "instruction": "",
        "id": "q13023",
        "input": "function to check file existence in python",
        "output": "",
        "rule": [
            "d13023"
        ]
    },
    {
        "instruction": "",
        "id": "q13024",
        "input": "python how to get tree object",
        "output": "",
        "rule": [
            "d13024"
        ]
    },
    {
        "instruction": "",
        "id": "q13025",
        "input": "function to repeat process in python 3",
        "output": "",
        "rule": [
            "d13025"
        ]
    },
    {
        "instruction": "",
        "id": "q13026",
        "input": "python how to hash tuple",
        "output": "",
        "rule": [
            "d13026"
        ]
    },
    {
        "instruction": "",
        "id": "q13027",
        "input": "gaussian distribution code in python",
        "output": "",
        "rule": [
            "d13027"
        ]
    },
    {
        "instruction": "",
        "id": "q13028",
        "input": "python how to implement one to many association",
        "output": "",
        "rule": [
            "d13028"
        ]
    },
    {
        "instruction": "",
        "id": "q13029",
        "input": "gaussian kernel python with sigma and width",
        "output": "",
        "rule": [
            "d13029"
        ]
    },
    {
        "instruction": "",
        "id": "q13030",
        "input": "python how to jump to next loop",
        "output": "",
        "rule": [
            "d13030"
        ]
    },
    {
        "instruction": "",
        "id": "q13031",
        "input": "generate arbitrary ascii identifier in python",
        "output": "",
        "rule": [
            "d13031"
        ]
    },
    {
        "instruction": "",
        "id": "q13032",
        "input": "python how to keep every 3rd element of array",
        "output": "",
        "rule": [
            "d13032"
        ]
    },
    {
        "instruction": "",
        "id": "q13033",
        "input": "generate json to python queryset object",
        "output": "",
        "rule": [
            "d13033"
        ]
    },
    {
        "instruction": "",
        "id": "q13034",
        "input": "python how to limit the rate of http request",
        "output": "",
        "rule": [
            "d13034"
        ]
    },
    {
        "instruction": "",
        "id": "q13035",
        "input": "generate random unitary matrix in python",
        "output": "",
        "rule": [
            "d13035"
        ]
    },
    {
        "instruction": "",
        "id": "q13036",
        "input": "python how to make a list of prime numbers",
        "output": "",
        "rule": [
            "d13036"
        ]
    },
    {
        "instruction": "",
        "id": "q13037",
        "input": "python how to make dot charcter",
        "output": "",
        "rule": [
            "d13037"
        ]
    },
    {
        "instruction": "",
        "id": "q13038",
        "input": "get a range of dates python",
        "output": "",
        "rule": [
            "d13038"
        ]
    },
    {
        "instruction": "",
        "id": "q13039",
        "input": "python how to make kivy scrollview be at the end",
        "output": "",
        "rule": [
            "d13039"
        ]
    },
    {
        "instruction": "",
        "id": "q13040",
        "input": "get active window title python",
        "output": "",
        "rule": [
            "d13040"
        ]
    },
    {
        "instruction": "",
        "id": "q13041",
        "input": "python how to make something restart",
        "output": "",
        "rule": [
            "d13041"
        ]
    },
    {
        "instruction": "",
        "id": "q13042",
        "input": "get all column names in a dataset in python",
        "output": "",
        "rule": [
            "d13042"
        ]
    },
    {
        "instruction": "",
        "id": "q13043",
        "input": "python how to mask a numpy array",
        "output": "",
        "rule": [
            "d13043"
        ]
    },
    {
        "instruction": "",
        "id": "q13044",
        "input": "get all text inside xml python",
        "output": "",
        "rule": [
            "d13044"
        ]
    },
    {
        "instruction": "",
        "id": "q13045",
        "input": "python how to merge into locals",
        "output": "",
        "rule": [
            "d13045"
        ]
    },
    {
        "instruction": "",
        "id": "q13046",
        "input": "get attribute type from python",
        "output": "",
        "rule": [
            "d13046"
        ]
    },
    {
        "instruction": "",
        "id": "q13047",
        "input": "python how to normalize an array",
        "output": "",
        "rule": [
            "d13047"
        ]
    },
    {
        "instruction": "",
        "id": "q13048",
        "input": "get axis size python",
        "output": "",
        "rule": [
            "d13048"
        ]
    },
    {
        "instruction": "",
        "id": "q13049",
        "input": "python how to normalize text values",
        "output": "",
        "rule": [
            "d13049"
        ]
    },
    {
        "instruction": "",
        "id": "q13050",
        "input": "get boolean matrix similar python",
        "output": "",
        "rule": [
            "d13050"
        ]
    },
    {
        "instruction": "",
        "id": "q13051",
        "input": "python how to open a file in relative path",
        "output": "",
        "rule": [
            "d13051"
        ]
    },
    {
        "instruction": "",
        "id": "q13052",
        "input": "get bytes size of array python",
        "output": "",
        "rule": [
            "d13052"
        ]
    },
    {
        "instruction": "",
        "id": "q13053",
        "input": "python how to preserve a connection i",
        "output": "",
        "rule": [
            "d13053"
        ]
    },
    {
        "instruction": "",
        "id": "q13054",
        "input": "get clipboard data with python on linux",
        "output": "",
        "rule": [
            "d13054"
        ]
    },
    {
        "instruction": "",
        "id": "q13055",
        "input": "python how to preserve a connection in",
        "output": "",
        "rule": [
            "d13055"
        ]
    },
    {
        "instruction": "",
        "id": "q13056",
        "input": "get date from epoch timestamp python",
        "output": "",
        "rule": [
            "d13056"
        ]
    },
    {
        "instruction": "",
        "id": "q13057",
        "input": "python how to print code as its executed",
        "output": "",
        "rule": [
            "d13057"
        ]
    },
    {
        "instruction": "",
        "id": "q13058",
        "input": "get date from timedelta64 python",
        "output": "",
        "rule": [
            "d13058"
        ]
    },
    {
        "instruction": "",
        "id": "q13059",
        "input": "python how to print enum key",
        "output": "",
        "rule": [
            "d13059"
        ]
    },
    {
        "instruction": "",
        "id": "q13060",
        "input": "get depth of tree node python elementree",
        "output": "",
        "rule": [
            "d13060"
        ]
    },
    {
        "instruction": "",
        "id": "q13061",
        "input": "python how to print information about functions methods",
        "output": "",
        "rule": [
            "d13061"
        ]
    },
    {
        "instruction": "",
        "id": "q13062",
        "input": "get dimensions of python list",
        "output": "",
        "rule": [
            "d13062"
        ]
    },
    {
        "instruction": "",
        "id": "q13063",
        "input": "python how to random pick a few elemts",
        "output": "",
        "rule": [
            "d13063"
        ]
    },
    {
        "instruction": "",
        "id": "q13064",
        "input": "get epoch of a date in python",
        "output": "",
        "rule": [
            "d13064"
        ]
    },
    {
        "instruction": "",
        "id": "q13065",
        "input": "python how to remove from an index",
        "output": "",
        "rule": [
            "d13065"
        ]
    },
    {
        "instruction": "",
        "id": "q13066",
        "input": "get first element in queue python",
        "output": "",
        "rule": [
            "d13066"
        ]
    },
    {
        "instruction": "",
        "id": "q13067",
        "input": "python how to remove punctuation from a text",
        "output": "",
        "rule": [
            "d13067"
        ]
    },
    {
        "instruction": "",
        "id": "q13068",
        "input": "get full name of path in python",
        "output": "",
        "rule": [
            "d13068"
        ]
    },
    {
        "instruction": "",
        "id": "q13069",
        "input": "python how to remove punctuation marks in a dictionary",
        "output": "",
        "rule": [
            "d13069"
        ]
    },
    {
        "instruction": "",
        "id": "q13070",
        "input": "get function name python",
        "output": "",
        "rule": [
            "d13070"
        ]
    },
    {
        "instruction": "",
        "id": "q13071",
        "input": "python how to represent unique set",
        "output": "",
        "rule": [
            "d13071"
        ]
    },
    {
        "instruction": "",
        "id": "q13072",
        "input": "get gradient of rbf interpolation python",
        "output": "",
        "rule": [
            "d13072"
        ]
    },
    {
        "instruction": "",
        "id": "q13073",
        "input": "python how to restructure the index on a data frame",
        "output": "",
        "rule": [
            "d13073"
        ]
    },
    {
        "instruction": "",
        "id": "q13074",
        "input": "get hue value from hsv image python",
        "output": "",
        "rule": [
            "d13074"
        ]
    },
    {
        "instruction": "",
        "id": "q13075",
        "input": "python how to say is type positive integer",
        "output": "",
        "rule": [
            "d13075"
        ]
    },
    {
        "instruction": "",
        "id": "q13076",
        "input": "get index of unique elements in list python",
        "output": "",
        "rule": [
            "d13076"
        ]
    },
    {
        "instruction": "",
        "id": "q13077",
        "input": "python how to see if string is an exact match to list of patterns",
        "output": "",
        "rule": [
            "d13077"
        ]
    },
    {
        "instruction": "",
        "id": "q13078",
        "input": "get key of certain value in python",
        "output": "",
        "rule": [
            "d13078"
        ]
    },
    {
        "instruction": "",
        "id": "q13079",
        "input": "python how to simulate mouse click move cursor",
        "output": "",
        "rule": [
            "d13079"
        ]
    },
    {
        "instruction": "",
        "id": "q13080",
        "input": "python how to standardize numpy array",
        "output": "",
        "rule": [
            "d13080"
        ]
    },
    {
        "instruction": "",
        "id": "q13081",
        "input": "get list of files from a folder in python",
        "output": "",
        "rule": [
            "d13081"
        ]
    },
    {
        "instruction": "",
        "id": "q13082",
        "input": "python how to tell if an object is a collectio",
        "output": "",
        "rule": [
            "d13082"
        ]
    },
    {
        "instruction": "",
        "id": "q13083",
        "input": "get matrix of random floating values python",
        "output": "",
        "rule": [
            "d13083"
        ]
    },
    {
        "instruction": "",
        "id": "q13084",
        "input": "python how to tell if string or array",
        "output": "",
        "rule": [
            "d13084"
        ]
    },
    {
        "instruction": "",
        "id": "q13085",
        "input": "get multiple fields from model python",
        "output": "",
        "rule": [
            "d13085"
        ]
    },
    {
        "instruction": "",
        "id": "q13086",
        "input": "python how to tell type checker something is callable",
        "output": "",
        "rule": [
            "d13086"
        ]
    },
    {
        "instruction": "",
        "id": "q13087",
        "input": "get next day date python",
        "output": "",
        "rule": [
            "d13087"
        ]
    },
    {
        "instruction": "",
        "id": "q13088",
        "input": "python how to unlock a locked file",
        "output": "",
        "rule": [
            "d13088"
        ]
    },
    {
        "instruction": "",
        "id": "q13089",
        "input": "get number of lines in file python enumerate",
        "output": "",
        "rule": [
            "d13089"
        ]
    },
    {
        "instruction": "",
        "id": "q13090",
        "input": "python how to use session to access other urls from same page",
        "output": "",
        "rule": [
            "d13090"
        ]
    },
    {
        "instruction": "",
        "id": "q13091",
        "input": "get number of rows in a prettytable python",
        "output": "",
        "rule": [
            "d13091"
        ]
    },
    {
        "instruction": "",
        "id": "q13092",
        "input": "python howto modify file create time",
        "output": "",
        "rule": [
            "d13092"
        ]
    },
    {
        "instruction": "",
        "id": "q13093",
        "input": "get parent node python",
        "output": "",
        "rule": [
            "d13093"
        ]
    },
    {
        "instruction": "",
        "id": "q13094",
        "input": "python html iframe contents",
        "output": "",
        "rule": [
            "d13094"
        ]
    },
    {
        "instruction": "",
        "id": "q13095",
        "input": "get parent path python",
        "output": "",
        "rule": [
            "d13095"
        ]
    },
    {
        "instruction": "",
        "id": "q13096",
        "input": "python html response gzip",
        "output": "",
        "rule": [
            "d13096"
        ]
    },
    {
        "instruction": "",
        "id": "q13097",
        "input": "get part after regex match in python",
        "output": "",
        "rule": [
            "d13097"
        ]
    },
    {
        "instruction": "",
        "id": "q13098",
        "input": "python html safe text",
        "output": "",
        "rule": [
            "d13098"
        ]
    },
    {
        "instruction": "",
        "id": "q13099",
        "input": "get python dicitonary keys as list",
        "output": "",
        "rule": [
            "d13099"
        ]
    },
    {
        "instruction": "",
        "id": "q13100",
        "input": "python http get response header",
        "output": "",
        "rule": [
            "d13100"
        ]
    },
    {
        "instruction": "",
        "id": "q13101",
        "input": "get quarter from datetime python",
        "output": "",
        "rule": [
            "d13101"
        ]
    },
    {
        "instruction": "",
        "id": "q13102",
        "input": "python http server, determine if file requested exists",
        "output": "",
        "rule": [
            "d13102"
        ]
    },
    {
        "instruction": "",
        "id": "q13103",
        "input": "get query string from url python",
        "output": "",
        "rule": [
            "d13103"
        ]
    },
    {
        "instruction": "",
        "id": "q13104",
        "input": "python identify gzipped files",
        "output": "",
        "rule": [
            "d13104"
        ]
    },
    {
        "instruction": "",
        "id": "q13105",
        "input": "get rid of duplicates in python list",
        "output": "",
        "rule": [
            "d13105"
        ]
    },
    {
        "instruction": "",
        "id": "q13106",
        "input": "python identify maximum integer in array",
        "output": "",
        "rule": [
            "d13106"
        ]
    },
    {
        "instruction": "",
        "id": "q13107",
        "input": "get size of array in python",
        "output": "",
        "rule": [
            "d13107"
        ]
    },
    {
        "instruction": "",
        "id": "q13108",
        "input": "python identify nearest value in array",
        "output": "",
        "rule": [
            "d13108"
        ]
    },
    {
        "instruction": "",
        "id": "q13109",
        "input": "get text from a page python",
        "output": "",
        "rule": [
            "d13109"
        ]
    },
    {
        "instruction": "",
        "id": "q13110",
        "input": "python if in array object not iterable",
        "output": "",
        "rule": [
            "d13110"
        ]
    },
    {
        "instruction": "",
        "id": "q13111",
        "input": "get the column name as legend python",
        "output": "",
        "rule": [
            "d13111"
        ]
    },
    {
        "instruction": "",
        "id": "q13112",
        "input": "get the data type of a column in python",
        "output": "",
        "rule": [
            "d13112"
        ]
    },
    {
        "instruction": "",
        "id": "q13113",
        "input": "python if something is list",
        "output": "",
        "rule": [
            "d13113"
        ]
    },
    {
        "instruction": "",
        "id": "q13114",
        "input": "python if text file type",
        "output": "",
        "rule": [
            "d13114"
        ]
    },
    {
        "instruction": "",
        "id": "q13115",
        "input": "get the index of second occurance of an element in list python",
        "output": "",
        "rule": [
            "d13115"
        ]
    },
    {
        "instruction": "",
        "id": "q13116",
        "input": "python image get the distance of two shape",
        "output": "",
        "rule": [
            "d13116"
        ]
    },
    {
        "instruction": "",
        "id": "q13117",
        "input": "get the size of a data set in python bytes",
        "output": "",
        "rule": [
            "d13117"
        ]
    },
    {
        "instruction": "",
        "id": "q13118",
        "input": "python img int8 change to int24",
        "output": "",
        "rule": [
            "d13118"
        ]
    },
    {
        "instruction": "",
        "id": "q13119",
        "input": "get the text value of an xml element python",
        "output": "",
        "rule": [
            "d13119"
        ]
    },
    {
        "instruction": "",
        "id": "q13120",
        "input": "get the time created of a file python",
        "output": "",
        "rule": [
            "d13120"
        ]
    },
    {
        "instruction": "",
        "id": "q13121",
        "input": "python implement stack on array",
        "output": "",
        "rule": [
            "d13121"
        ]
    },
    {
        "instruction": "",
        "id": "q13122",
        "input": "get theaverage in a list in python",
        "output": "",
        "rule": [
            "d13122"
        ]
    },
    {
        "instruction": "",
        "id": "q13123",
        "input": "python impute nan is not in list",
        "output": "",
        "rule": [
            "d13123"
        ]
    },
    {
        "instruction": "",
        "id": "q13124",
        "input": "get timestamp of files in directories in python",
        "output": "",
        "rule": [
            "d13124"
        ]
    },
    {
        "instruction": "",
        "id": "q13125",
        "input": "python imuting missing categorical value",
        "output": "",
        "rule": [
            "d13125"
        ]
    },
    {
        "instruction": "",
        "id": "q13126",
        "input": "get unique elements of python list",
        "output": "",
        "rule": [
            "d13126"
        ]
    },
    {
        "instruction": "",
        "id": "q13127",
        "input": "python include functions in folder",
        "output": "",
        "rule": [
            "d13127"
        ]
    },
    {
        "instruction": "",
        "id": "q13128",
        "input": "get utc offset datetime python",
        "output": "",
        "rule": [
            "d13128"
        ]
    },
    {
        "instruction": "",
        "id": "q13129",
        "input": "python indent block of stetaments",
        "output": "",
        "rule": [
            "d13129"
        ]
    },
    {
        "instruction": "",
        "id": "q13130",
        "input": "get week end ing date in python",
        "output": "",
        "rule": [
            "d13130"
        ]
    },
    {
        "instruction": "",
        "id": "q13131",
        "input": "python init numpy with buffer",
        "output": "",
        "rule": [
            "d13131"
        ]
    },
    {
        "instruction": "",
        "id": "q13132",
        "input": "get white space out of files in python",
        "output": "",
        "rule": [
            "d13132"
        ]
    },
    {
        "instruction": "",
        "id": "q13133",
        "input": "python initialize pagerank vector",
        "output": "",
        "rule": [
            "d13133"
        ]
    },
    {
        "instruction": "",
        "id": "q13134",
        "input": "get width and height of string in python",
        "output": "",
        "rule": [
            "d13134"
        ]
    },
    {
        "instruction": "",
        "id": "q13135",
        "input": "python instance dictionary by dict or {}",
        "output": "",
        "rule": [
            "d13135"
        ]
    },
    {
        "instruction": "",
        "id": "q13136",
        "input": "glclearcolor not working python",
        "output": "",
        "rule": [
            "d13136"
        ]
    },
    {
        "instruction": "",
        "id": "q13137",
        "input": "python int ip to string",
        "output": "",
        "rule": [
            "d13137"
        ]
    },
    {
        "instruction": "",
        "id": "q13138",
        "input": "gps latitude longitude type in python",
        "output": "",
        "rule": [
            "d13138"
        ]
    },
    {
        "instruction": "",
        "id": "q13139",
        "input": "python int to ip",
        "output": "",
        "rule": [
            "d13139"
        ]
    },
    {
        "instruction": "",
        "id": "q13140",
        "input": "grab smallest value in an array of ints python",
        "output": "",
        "rule": [
            "d13140"
        ]
    },
    {
        "instruction": "",
        "id": "q13141",
        "input": "python integer partition all permutations of certain size",
        "output": "",
        "rule": [
            "d13141"
        ]
    },
    {
        "instruction": "",
        "id": "q13142",
        "input": "gradient and hessian function syntax in python",
        "output": "",
        "rule": [
            "d13142"
        ]
    },
    {
        "instruction": "",
        "id": "q13143",
        "input": "python interpolating function 3d",
        "output": "",
        "rule": [
            "d13143"
        ]
    },
    {
        "instruction": "",
        "id": "q13144",
        "input": "hash a dictionary python content",
        "output": "",
        "rule": [
            "d13144"
        ]
    },
    {
        "instruction": "",
        "id": "q13145",
        "input": "python invalid type typecast",
        "output": "",
        "rule": [
            "d13145"
        ]
    },
    {
        "instruction": "",
        "id": "q13146",
        "input": "hash contents of a file in python",
        "output": "",
        "rule": [
            "d13146"
        ]
    },
    {
        "instruction": "",
        "id": "q13147",
        "input": "python invoke process an get output",
        "output": "",
        "rule": [
            "d13147"
        ]
    },
    {
        "instruction": "",
        "id": "q13148",
        "input": "hashable data type python",
        "output": "",
        "rule": [
            "d13148"
        ]
    },
    {
        "instruction": "",
        "id": "q13149",
        "input": "python is a set empty",
        "output": "",
        "rule": [
            "d13149"
        ]
    },
    {
        "instruction": "",
        "id": "q13150",
        "input": "hashcode for a file python",
        "output": "",
        "rule": [
            "d13150"
        ]
    },
    {
        "instruction": "",
        "id": "q13151",
        "input": "python is not none and condition",
        "output": "",
        "rule": [
            "d13151"
        ]
    },
    {
        "instruction": "",
        "id": "q13152",
        "input": "hoe to get index of a element in a list in python",
        "output": "",
        "rule": [
            "d13152"
        ]
    },
    {
        "instruction": "",
        "id": "q13153",
        "input": "python is or not symlink",
        "output": "",
        "rule": [
            "d13153"
        ]
    },
    {
        "instruction": "",
        "id": "q13154",
        "input": "hot to include input validation in python flask",
        "output": "",
        "rule": [
            "d13154"
        ]
    },
    {
        "instruction": "",
        "id": "q13155",
        "input": "python isdir doesn't work",
        "output": "",
        "rule": [
            "d13155"
        ]
    },
    {
        "instruction": "",
        "id": "q13156",
        "input": "how call a function every 5 seconds python",
        "output": "",
        "rule": [
            "d13156"
        ]
    },
    {
        "instruction": "",
        "id": "q13157",
        "input": "python isinstance of a date",
        "output": "",
        "rule": [
            "d13157"
        ]
    },
    {
        "instruction": "",
        "id": "q13158",
        "input": "how can i can calculate the width and height of a image in pdf with python reportlab",
        "output": "",
        "rule": [
            "d13158"
        ]
    },
    {
        "instruction": "",
        "id": "q13159",
        "input": "python iter a pattern in string",
        "output": "",
        "rule": [
            "d13159"
        ]
    },
    {
        "instruction": "",
        "id": "q13160",
        "input": "how can i change the color of type in python",
        "output": "",
        "rule": [
            "d13160"
        ]
    },
    {
        "instruction": "",
        "id": "q13161",
        "input": "python iterate dictionary sorted by key",
        "output": "",
        "rule": [
            "d13161"
        ]
    },
    {
        "instruction": "",
        "id": "q13162",
        "input": "how can i get pdf page numbers python",
        "output": "",
        "rule": [
            "d13162"
        ]
    },
    {
        "instruction": "",
        "id": "q13163",
        "input": "python iterate through method call",
        "output": "",
        "rule": [
            "d13163"
        ]
    },
    {
        "instruction": "",
        "id": "q13164",
        "input": "how can i query with devices around the network with python",
        "output": "",
        "rule": [
            "d13164"
        ]
    },
    {
        "instruction": "",
        "id": "q13165",
        "input": "python iterating files in folder",
        "output": "",
        "rule": [
            "d13165"
        ]
    },
    {
        "instruction": "",
        "id": "q13166",
        "input": "how can i tell if i am in interactive mode in python",
        "output": "",
        "rule": [
            "d13166"
        ]
    },
    {
        "instruction": "",
        "id": "q13167",
        "input": "python iterator check next",
        "output": "",
        "rule": [
            "d13167"
        ]
    },
    {
        "instruction": "",
        "id": "q13168",
        "input": "how can we remove string in python",
        "output": "",
        "rule": [
            "d13168"
        ]
    },
    {
        "instruction": "",
        "id": "q13169",
        "input": "python iterator read file",
        "output": "",
        "rule": [
            "d13169"
        ]
    },
    {
        "instruction": "",
        "id": "q13170",
        "input": "how chnage the color of text in print in python",
        "output": "",
        "rule": [
            "d13170"
        ]
    },
    {
        "instruction": "",
        "id": "q13171",
        "input": "python iterator with conditional",
        "output": "",
        "rule": [
            "d13171"
        ]
    },
    {
        "instruction": "",
        "id": "q13172",
        "input": "python iterator with index",
        "output": "",
        "rule": [
            "d13172"
        ]
    },
    {
        "instruction": "",
        "id": "q13173",
        "input": "how do i compute greatest common divisor in python",
        "output": "",
        "rule": [
            "d13173"
        ]
    },
    {
        "instruction": "",
        "id": "q13174",
        "input": "python join list to string with delimiter",
        "output": "",
        "rule": [
            "d13174"
        ]
    },
    {
        "instruction": "",
        "id": "q13175",
        "input": "how do i make a function in python that counts the frequency of a letter in a text",
        "output": "",
        "rule": [
            "d13175"
        ]
    },
    {
        "instruction": "",
        "id": "q13176",
        "input": "python jsengine eval call",
        "output": "",
        "rule": [
            "d13176"
        ]
    },
    {
        "instruction": "",
        "id": "q13177",
        "input": "how do i set a proxy in python",
        "output": "",
        "rule": [
            "d13177"
        ]
    },
    {
        "instruction": "",
        "id": "q13178",
        "input": "python json decode boolean",
        "output": "",
        "rule": [
            "d13178"
        ]
    },
    {
        "instruction": "",
        "id": "q13179",
        "input": "how do i time the amount of time it takes to run an operation in python",
        "output": "",
        "rule": [
            "d13179"
        ]
    },
    {
        "instruction": "",
        "id": "q13180",
        "input": "python json element exists",
        "output": "",
        "rule": [
            "d13180"
        ]
    },
    {
        "instruction": "",
        "id": "q13181",
        "input": "how do i turn many one colum matixes into one matrix in python",
        "output": "",
        "rule": [
            "d13181"
        ]
    },
    {
        "instruction": "",
        "id": "q13182",
        "input": "python json encode string to python type",
        "output": "",
        "rule": [
            "d13182"
        ]
    },
    {
        "instruction": "",
        "id": "q13183",
        "input": "python json grep file contents",
        "output": "",
        "rule": [
            "d13183"
        ]
    },
    {
        "instruction": "",
        "id": "q13184",
        "input": "how do python names letters in word",
        "output": "",
        "rule": [
            "d13184"
        ]
    },
    {
        "instruction": "",
        "id": "q13185",
        "input": "how do we disable \\assertions in python",
        "output": "",
        "rule": [
            "d13185"
        ]
    },
    {
        "instruction": "",
        "id": "q13186",
        "input": "python json load utf 8 file",
        "output": "",
        "rule": [
            "d13186"
        ]
    },
    {
        "instruction": "",
        "id": "q13187",
        "input": "how do you calculate distance between two lines in python",
        "output": "",
        "rule": [
            "d13187"
        ]
    },
    {
        "instruction": "",
        "id": "q13188",
        "input": "python json loads enforce ascii",
        "output": "",
        "rule": [
            "d13188"
        ]
    },
    {
        "instruction": "",
        "id": "q13189",
        "input": "how do you close the program in python shell",
        "output": "",
        "rule": [
            "d13189"
        ]
    },
    {
        "instruction": "",
        "id": "q13190",
        "input": "python json open utf8",
        "output": "",
        "rule": [
            "d13190"
        ]
    },
    {
        "instruction": "",
        "id": "q13191",
        "input": "how do you create a wrapper for api python",
        "output": "",
        "rule": [
            "d13191"
        ]
    },
    {
        "instruction": "",
        "id": "q13192",
        "input": "python json parse numbers as string",
        "output": "",
        "rule": [
            "d13192"
        ]
    },
    {
        "instruction": "",
        "id": "q13193",
        "input": "how do you make a method not accessible in python",
        "output": "",
        "rule": [
            "d13193"
        ]
    },
    {
        "instruction": "",
        "id": "q13194",
        "input": "python json store boolean",
        "output": "",
        "rule": [
            "d13194"
        ]
    },
    {
        "instruction": "",
        "id": "q13195",
        "input": "how do you set limts in python",
        "output": "",
        "rule": [
            "d13195"
        ]
    },
    {
        "instruction": "",
        "id": "q13196",
        "input": "python jsonresponse int not callable",
        "output": "",
        "rule": [
            "d13196"
        ]
    },
    {
        "instruction": "",
        "id": "q13197",
        "input": "how does python determine two objects are equal",
        "output": "",
        "rule": [
            "d13197"
        ]
    },
    {
        "instruction": "",
        "id": "q13198",
        "input": "how does python interpolate a matrix",
        "output": "",
        "rule": [
            "d13198"
        ]
    },
    {
        "instruction": "",
        "id": "q13199",
        "input": "python judge an object iterable",
        "output": "",
        "rule": [
            "d13199"
        ]
    },
    {
        "instruction": "",
        "id": "q13200",
        "input": "how i encode url in python",
        "output": "",
        "rule": [
            "d13200"
        ]
    },
    {
        "instruction": "",
        "id": "q13201",
        "input": "python judge bool all false",
        "output": "",
        "rule": [
            "d13201"
        ]
    },
    {
        "instruction": "",
        "id": "q13202",
        "input": "how remove the spaces from a string python",
        "output": "",
        "rule": [
            "d13202"
        ]
    },
    {
        "instruction": "",
        "id": "q13203",
        "input": "python keep list unique and sorted",
        "output": "",
        "rule": [
            "d13203"
        ]
    },
    {
        "instruction": "",
        "id": "q13204",
        "input": "how to add an attribute to an object in python",
        "output": "",
        "rule": [
            "d13204"
        ]
    },
    {
        "instruction": "",
        "id": "q13205",
        "input": "python keep player from going off screen",
        "output": "",
        "rule": [
            "d13205"
        ]
    },
    {
        "instruction": "",
        "id": "q13206",
        "input": "how to add cookie to requests session in python3",
        "output": "",
        "rule": [
            "d13206"
        ]
    },
    {
        "instruction": "",
        "id": "q13207",
        "input": "how to add each value in array to average python",
        "output": "",
        "rule": [
            "d13207"
        ]
    },
    {
        "instruction": "",
        "id": "q13208",
        "input": "python kill chrome process",
        "output": "",
        "rule": [
            "d13208"
        ]
    },
    {
        "instruction": "",
        "id": "q13209",
        "input": "how to add table styling in python",
        "output": "",
        "rule": [
            "d13209"
        ]
    },
    {
        "instruction": "",
        "id": "q13210",
        "input": "python kmeans distance to the centroid",
        "output": "",
        "rule": [
            "d13210"
        ]
    },
    {
        "instruction": "",
        "id": "q13211",
        "input": "how to add tensorflow to python",
        "output": "",
        "rule": [
            "d13211"
        ]
    },
    {
        "instruction": "",
        "id": "q13212",
        "input": "python lambda nested tuple",
        "output": "",
        "rule": [
            "d13212"
        ]
    },
    {
        "instruction": "",
        "id": "q13213",
        "input": "how to add tensorflow to pythonpath after downloading directory",
        "output": "",
        "rule": [
            "d13213"
        ]
    },
    {
        "instruction": "",
        "id": "q13214",
        "input": "python lambda to return len of longest element",
        "output": "",
        "rule": [
            "d13214"
        ]
    },
    {
        "instruction": "",
        "id": "q13215",
        "input": "how to add vectors in python with ctypes structure",
        "output": "",
        "rule": [
            "d13215"
        ]
    },
    {
        "instruction": "",
        "id": "q13216",
        "input": "python lat lon local cartesian",
        "output": "",
        "rule": [
            "d13216"
        ]
    },
    {
        "instruction": "",
        "id": "q13217",
        "input": "how to append a line at top of file in python",
        "output": "",
        "rule": [
            "d13217"
        ]
    },
    {
        "instruction": "",
        "id": "q13218",
        "input": "python ldap filter or condition",
        "output": "",
        "rule": [
            "d13218"
        ]
    },
    {
        "instruction": "",
        "id": "q13219",
        "input": "how to apply the strip function for a column names in python",
        "output": "",
        "rule": [
            "d13219"
        ]
    },
    {
        "instruction": "",
        "id": "q13220",
        "input": "how to average the values in an array in python",
        "output": "",
        "rule": [
            "d13220"
        ]
    },
    {
        "instruction": "",
        "id": "q13221",
        "input": "python left pad with spaces",
        "output": "",
        "rule": [
            "d13221"
        ]
    },
    {
        "instruction": "",
        "id": "q13222",
        "input": "how to beautify print python",
        "output": "",
        "rule": [
            "d13222"
        ]
    },
    {
        "instruction": "",
        "id": "q13223",
        "input": "python len(ob stack overflowject, /)",
        "output": "",
        "rule": [
            "d13223"
        ]
    },
    {
        "instruction": "",
        "id": "q13224",
        "input": "how to build up a dictionary using two lists python3",
        "output": "",
        "rule": [
            "d13224"
        ]
    },
    {
        "instruction": "",
        "id": "q13225",
        "input": "python limits both x and y xylim",
        "output": "",
        "rule": [
            "d13225"
        ]
    },
    {
        "instruction": "",
        "id": "q13226",
        "input": "how to cache a response python",
        "output": "",
        "rule": [
            "d13226"
        ]
    },
    {
        "instruction": "",
        "id": "q13227",
        "input": "python linear model with categorical variables",
        "output": "",
        "rule": [
            "d13227"
        ]
    },
    {
        "instruction": "",
        "id": "q13228",
        "input": "how to calculate gradient with derivatives in python",
        "output": "",
        "rule": [
            "d13228"
        ]
    },
    {
        "instruction": "",
        "id": "q13229",
        "input": "python list all child",
        "output": "",
        "rule": [
            "d13229"
        ]
    },
    {
        "instruction": "",
        "id": "q13230",
        "input": "python list all linux processes with pids",
        "output": "",
        "rule": [
            "d13230"
        ]
    },
    {
        "instruction": "",
        "id": "q13231",
        "input": "how to calculate number of spaces in string using python",
        "output": "",
        "rule": [
            "d13231"
        ]
    },
    {
        "instruction": "",
        "id": "q13232",
        "input": "python list devide into fix size",
        "output": "",
        "rule": [
            "d13232"
        ]
    },
    {
        "instruction": "",
        "id": "q13233",
        "input": "how to calculate the distance of a example from each cluster centroid for kmeans in python",
        "output": "",
        "rule": [
            "d13233"
        ]
    },
    {
        "instruction": "",
        "id": "q13234",
        "input": "python list of dictionaries get unique keys",
        "output": "",
        "rule": [
            "d13234"
        ]
    },
    {
        "instruction": "",
        "id": "q13235",
        "input": "how to calculate the gradient image in python",
        "output": "",
        "rule": [
            "d13235"
        ]
    },
    {
        "instruction": "",
        "id": "q13236",
        "input": "python list of filenaes in a folder",
        "output": "",
        "rule": [
            "d13236"
        ]
    },
    {
        "instruction": "",
        "id": "q13237",
        "input": "how to calculate zscore from str list in python",
        "output": "",
        "rule": [
            "d13237"
        ]
    },
    {
        "instruction": "",
        "id": "q13238",
        "input": "python list of lists to dictionary",
        "output": "",
        "rule": [
            "d13238"
        ]
    },
    {
        "instruction": "",
        "id": "q13239",
        "input": "how to call a bash script from within python",
        "output": "",
        "rule": [
            "d13239"
        ]
    },
    {
        "instruction": "",
        "id": "q13240",
        "input": "python list of tuple to dict",
        "output": "",
        "rule": [
            "d13240"
        ]
    },
    {
        "instruction": "",
        "id": "q13241",
        "input": "how to call a function after time lapse python",
        "output": "",
        "rule": [
            "d13241"
        ]
    },
    {
        "instruction": "",
        "id": "q13242",
        "input": "python list remove duplicate elements",
        "output": "",
        "rule": [
            "d13242"
        ]
    },
    {
        "instruction": "",
        "id": "q13243",
        "input": "how to call a last index in a matrix in python",
        "output": "",
        "rule": [
            "d13243"
        ]
    },
    {
        "instruction": "",
        "id": "q13244",
        "input": "how to call a string object in print python",
        "output": "",
        "rule": [
            "d13244"
        ]
    },
    {
        "instruction": "",
        "id": "q13245",
        "input": "python list that removes one letter everytime from a string",
        "output": "",
        "rule": [
            "d13245"
        ]
    },
    {
        "instruction": "",
        "id": "q13246",
        "input": "how to call next on iterator python",
        "output": "",
        "rule": [
            "d13246"
        ]
    },
    {
        "instruction": "",
        "id": "q13247",
        "input": "python list to comma delimited string",
        "output": "",
        "rule": [
            "d13247"
        ]
    },
    {
        "instruction": "",
        "id": "q13248",
        "input": "how to capitalize first letter of string python",
        "output": "",
        "rule": [
            "d13248"
        ]
    },
    {
        "instruction": "",
        "id": "q13249",
        "input": "python listview context after changed",
        "output": "",
        "rule": [
            "d13249"
        ]
    },
    {
        "instruction": "",
        "id": "q13250",
        "input": "how to capitalize words in string after a period python",
        "output": "",
        "rule": [
            "d13250"
        ]
    },
    {
        "instruction": "",
        "id": "q13251",
        "input": "python load json from filename",
        "output": "",
        "rule": [
            "d13251"
        ]
    },
    {
        "instruction": "",
        "id": "q13252",
        "input": "how to capture failure in behave python",
        "output": "",
        "rule": [
            "d13252"
        ]
    },
    {
        "instruction": "",
        "id": "q13253",
        "input": "python load jsonlines file to object",
        "output": "",
        "rule": [
            "d13253"
        ]
    },
    {
        "instruction": "",
        "id": "q13254",
        "input": "how to caste an int to a string in python",
        "output": "",
        "rule": [
            "d13254"
        ]
    },
    {
        "instruction": "",
        "id": "q13255",
        "input": "python load rds file",
        "output": "",
        "rule": [
            "d13255"
        ]
    },
    {
        "instruction": "",
        "id": "q13256",
        "input": "how to center text on print in python",
        "output": "",
        "rule": [
            "d13256"
        ]
    },
    {
        "instruction": "",
        "id": "q13257",
        "input": "python locate tuple in list",
        "output": "",
        "rule": [
            "d13257"
        ]
    },
    {
        "instruction": "",
        "id": "q13258",
        "input": "how to change a specific column name python",
        "output": "",
        "rule": [
            "d13258"
        ]
    },
    {
        "instruction": "",
        "id": "q13259",
        "input": "python location of substring in string",
        "output": "",
        "rule": [
            "d13259"
        ]
    },
    {
        "instruction": "",
        "id": "q13260",
        "input": "how to change backslash to forward slash in python os path",
        "output": "",
        "rule": [
            "d13260"
        ]
    },
    {
        "instruction": "",
        "id": "q13261",
        "input": "python lock file delete",
        "output": "",
        "rule": [
            "d13261"
        ]
    },
    {
        "instruction": "",
        "id": "q13262",
        "input": "how to change color of string in python",
        "output": "",
        "rule": [
            "d13262"
        ]
    },
    {
        "instruction": "",
        "id": "q13263",
        "input": "python lock on a variable access",
        "output": "",
        "rule": [
            "d13263"
        ]
    },
    {
        "instruction": "",
        "id": "q13264",
        "input": "how to change spaces to underscores python",
        "output": "",
        "rule": [
            "d13264"
        ]
    },
    {
        "instruction": "",
        "id": "q13265",
        "input": "python logging add blank lines",
        "output": "",
        "rule": [
            "d13265"
        ]
    },
    {
        "instruction": "",
        "id": "q13266",
        "input": "how to change str to int in python",
        "output": "",
        "rule": [
            "d13266"
        ]
    },
    {
        "instruction": "",
        "id": "q13267",
        "input": "how to change text print color in python",
        "output": "",
        "rule": [
            "d13267"
        ]
    },
    {
        "instruction": "",
        "id": "q13268",
        "input": "how to change the mime type of a file programmatically in python",
        "output": "",
        "rule": [
            "d13268"
        ]
    },
    {
        "instruction": "",
        "id": "q13269",
        "input": "python logging formatter color",
        "output": "",
        "rule": [
            "d13269"
        ]
    },
    {
        "instruction": "",
        "id": "q13270",
        "input": "how to change time zone of a column to ist in python",
        "output": "",
        "rule": [
            "d13270"
        ]
    },
    {
        "instruction": "",
        "id": "q13271",
        "input": "python logging get file handler name",
        "output": "",
        "rule": [
            "d13271"
        ]
    },
    {
        "instruction": "",
        "id": "q13272",
        "input": "how to change window title python",
        "output": "",
        "rule": [
            "d13272"
        ]
    },
    {
        "instruction": "",
        "id": "q13273",
        "input": "python logging not print immediately",
        "output": "",
        "rule": [
            "d13273"
        ]
    },
    {
        "instruction": "",
        "id": "q13274",
        "input": "how to change y axis limits on python",
        "output": "",
        "rule": [
            "d13274"
        ]
    },
    {
        "instruction": "",
        "id": "q13275",
        "input": "python logging nothing after delete log file",
        "output": "",
        "rule": [
            "d13275"
        ]
    },
    {
        "instruction": "",
        "id": "q13276",
        "input": "how to check all dependencies of a python script",
        "output": "",
        "rule": [
            "d13276"
        ]
    },
    {
        "instruction": "",
        "id": "q13277",
        "input": "python logging rotatingfilehandler windows",
        "output": "",
        "rule": [
            "d13277"
        ]
    },
    {
        "instruction": "",
        "id": "q13278",
        "input": "how to check column types in python",
        "output": "",
        "rule": [
            "d13278"
        ]
    },
    {
        "instruction": "",
        "id": "q13279",
        "input": "how to check content of a file is empty or not in python",
        "output": "",
        "rule": [
            "d13279"
        ]
    },
    {
        "instruction": "",
        "id": "q13280",
        "input": "python lookup value based on key",
        "output": "",
        "rule": [
            "d13280"
        ]
    },
    {
        "instruction": "",
        "id": "q13281",
        "input": "how to check count of null values in python",
        "output": "",
        "rule": [
            "d13281"
        ]
    },
    {
        "instruction": "",
        "id": "q13282",
        "input": "python loop to restart service",
        "output": "",
        "rule": [
            "d13282"
        ]
    },
    {
        "instruction": "",
        "id": "q13283",
        "input": "how to check datattypes in python",
        "output": "",
        "rule": [
            "d13283"
        ]
    },
    {
        "instruction": "",
        "id": "q13284",
        "input": "python lower each dict key",
        "output": "",
        "rule": [
            "d13284"
        ]
    },
    {
        "instruction": "",
        "id": "q13285",
        "input": "how to check email is valid or not? in python",
        "output": "",
        "rule": [
            "d13285"
        ]
    },
    {
        "instruction": "",
        "id": "q13286",
        "input": "python magic guess extension",
        "output": "",
        "rule": [
            "d13286"
        ]
    },
    {
        "instruction": "",
        "id": "q13287",
        "input": "how to check if a element is empty is xml python",
        "output": "",
        "rule": [
            "d13287"
        ]
    },
    {
        "instruction": "",
        "id": "q13288",
        "input": "how to check if a line contains any string from a list of strings python and what the string is",
        "output": "",
        "rule": [
            "d13288"
        ]
    },
    {
        "instruction": "",
        "id": "q13289",
        "input": "python make a str to a list",
        "output": "",
        "rule": [
            "d13289"
        ]
    },
    {
        "instruction": "",
        "id": "q13290",
        "input": "how to check if a list is in ascending order in python",
        "output": "",
        "rule": [
            "d13290"
        ]
    },
    {
        "instruction": "",
        "id": "q13291",
        "input": "python make pypi trusted site",
        "output": "",
        "rule": [
            "d13291"
        ]
    },
    {
        "instruction": "",
        "id": "q13292",
        "input": "how to check if a python service is running",
        "output": "",
        "rule": [
            "d13292"
        ]
    },
    {
        "instruction": "",
        "id": "q13293",
        "input": "python make sine wave",
        "output": "",
        "rule": [
            "d13293"
        ]
    },
    {
        "instruction": "",
        "id": "q13294",
        "input": "how to check if a string is prefix of other string in python",
        "output": "",
        "rule": [
            "d13294"
        ]
    },
    {
        "instruction": "",
        "id": "q13295",
        "input": "python manually garbage collect",
        "output": "",
        "rule": [
            "d13295"
        ]
    },
    {
        "instruction": "",
        "id": "q13296",
        "input": "how to check if a value is a string in python",
        "output": "",
        "rule": [
            "d13296"
        ]
    },
    {
        "instruction": "",
        "id": "q13297",
        "input": "python map colorbar to bar plot",
        "output": "",
        "rule": [
            "d13297"
        ]
    },
    {
        "instruction": "",
        "id": "q13298",
        "input": "how to check if a value is in an array python",
        "output": "",
        "rule": [
            "d13298"
        ]
    },
    {
        "instruction": "",
        "id": "q13299",
        "input": "python map function with multiple inputs",
        "output": "",
        "rule": [
            "d13299"
        ]
    },
    {
        "instruction": "",
        "id": "q13300",
        "input": "how to check if a variable exists in python argparse",
        "output": "",
        "rule": [
            "d13300"
        ]
    },
    {
        "instruction": "",
        "id": "q13301",
        "input": "python map mouse click lat lon",
        "output": "",
        "rule": [
            "d13301"
        ]
    },
    {
        "instruction": "",
        "id": "q13302",
        "input": "how to check if a website is updated python",
        "output": "",
        "rule": [
            "d13302"
        ]
    },
    {
        "instruction": "",
        "id": "q13303",
        "input": "how to check if an element in python is of number datatype",
        "output": "",
        "rule": [
            "d13303"
        ]
    },
    {
        "instruction": "",
        "id": "q13304",
        "input": "python matplotlib reduce text and marker spacing in legend box",
        "output": "",
        "rule": [
            "d13304"
        ]
    },
    {
        "instruction": "",
        "id": "q13305",
        "input": "how to check if services are running in linux python",
        "output": "",
        "rule": [
            "d13305"
        ]
    },
    {
        "instruction": "",
        "id": "q13306",
        "input": "python matrix element not callable",
        "output": "",
        "rule": [
            "d13306"
        ]
    },
    {
        "instruction": "",
        "id": "q13307",
        "input": "how to check if two arrays are equal in python",
        "output": "",
        "rule": [
            "d13307"
        ]
    },
    {
        "instruction": "",
        "id": "q13308",
        "input": "python max heap and doubly linked list",
        "output": "",
        "rule": [
            "d13308"
        ]
    },
    {
        "instruction": "",
        "id": "q13309",
        "input": "how to check if urlopen fails python",
        "output": "",
        "rule": [
            "d13309"
        ]
    },
    {
        "instruction": "",
        "id": "q13310",
        "input": "python max heap input spilt",
        "output": "",
        "rule": [
            "d13310"
        ]
    },
    {
        "instruction": "",
        "id": "q13311",
        "input": "how to check if variable does not exist python",
        "output": "",
        "rule": [
            "d13311"
        ]
    },
    {
        "instruction": "",
        "id": "q13312",
        "input": "python max min average value in array",
        "output": "",
        "rule": [
            "d13312"
        ]
    },
    {
        "instruction": "",
        "id": "q13313",
        "input": "how to check is date in python",
        "output": "",
        "rule": [
            "d13313"
        ]
    },
    {
        "instruction": "",
        "id": "q13314",
        "input": "python max with none",
        "output": "",
        "rule": [
            "d13314"
        ]
    },
    {
        "instruction": "",
        "id": "q13315",
        "input": "how to check list in astring in python",
        "output": "",
        "rule": [
            "d13315"
        ]
    },
    {
        "instruction": "",
        "id": "q13316",
        "input": "python maya pymel how can i call functions from another script",
        "output": "",
        "rule": [
            "d13316"
        ]
    },
    {
        "instruction": "",
        "id": "q13317",
        "input": "how to check my python path",
        "output": "",
        "rule": [
            "d13317"
        ]
    },
    {
        "instruction": "",
        "id": "q13318",
        "input": "python md5 file contents",
        "output": "",
        "rule": [
            "d13318"
        ]
    },
    {
        "instruction": "",
        "id": "q13319",
        "input": "python measure time for each function",
        "output": "",
        "rule": [
            "d13319"
        ]
    },
    {
        "instruction": "",
        "id": "q13320",
        "input": "how to check services in python",
        "output": "",
        "rule": [
            "d13320"
        ]
    },
    {
        "instruction": "",
        "id": "q13321",
        "input": "python member property getter",
        "output": "",
        "rule": [
            "d13321"
        ]
    },
    {
        "instruction": "",
        "id": "q13322",
        "input": "how to check type of object is numeric python",
        "output": "",
        "rule": [
            "d13322"
        ]
    },
    {
        "instruction": "",
        "id": "q13323",
        "input": "python menu clicked signal/slot",
        "output": "",
        "rule": [
            "d13323"
        ]
    },
    {
        "instruction": "",
        "id": "q13324",
        "input": "python merge 2 dict",
        "output": "",
        "rule": [
            "d13324"
        ]
    },
    {
        "instruction": "",
        "id": "q13325",
        "input": "how to check what python libraries i have",
        "output": "",
        "rule": [
            "d13325"
        ]
    },
    {
        "instruction": "",
        "id": "q13326",
        "input": "python merge two set in single dict",
        "output": "",
        "rule": [
            "d13326"
        ]
    },
    {
        "instruction": "",
        "id": "q13327",
        "input": "how to civert stings seprated by comma into list in python",
        "output": "",
        "rule": [
            "d13327"
        ]
    },
    {
        "instruction": "",
        "id": "q13328",
        "input": "python method accept enum type",
        "output": "",
        "rule": [
            "d13328"
        ]
    },
    {
        "instruction": "",
        "id": "q13329",
        "input": "python method chaining return self",
        "output": "",
        "rule": [
            "d13329"
        ]
    },
    {
        "instruction": "",
        "id": "q13330",
        "input": "how to clear the element in deque python",
        "output": "",
        "rule": [
            "d13330"
        ]
    },
    {
        "instruction": "",
        "id": "q13331",
        "input": "python method to remove entry from dictionary",
        "output": "",
        "rule": [
            "d13331"
        ]
    },
    {
        "instruction": "",
        "id": "q13332",
        "input": "how to click next page using python",
        "output": "",
        "rule": [
            "d13332"
        ]
    },
    {
        "instruction": "",
        "id": "q13333",
        "input": "python millisecond to timedelta",
        "output": "",
        "rule": [
            "d13333"
        ]
    },
    {
        "instruction": "",
        "id": "q13334",
        "input": "how to combine two number strings in python",
        "output": "",
        "rule": [
            "d13334"
        ]
    },
    {
        "instruction": "",
        "id": "q13335",
        "input": "python min distance two line segments",
        "output": "",
        "rule": [
            "d13335"
        ]
    },
    {
        "instruction": "",
        "id": "q13336",
        "input": "how to compare without case in python",
        "output": "",
        "rule": [
            "d13336"
        ]
    },
    {
        "instruction": "",
        "id": "q13337",
        "input": "python minidom get comments",
        "output": "",
        "rule": [
            "d13337"
        ]
    },
    {
        "instruction": "",
        "id": "q13338",
        "input": "python mock call original function",
        "output": "",
        "rule": [
            "d13338"
        ]
    },
    {
        "instruction": "",
        "id": "q13339",
        "input": "how to concatenate strings into a column in python",
        "output": "",
        "rule": [
            "d13339"
        ]
    },
    {
        "instruction": "",
        "id": "q13340",
        "input": "python mock test rest api example",
        "output": "",
        "rule": [
            "d13340"
        ]
    },
    {
        "instruction": "",
        "id": "q13341",
        "input": "how to configure python script to tensorflow gpu",
        "output": "",
        "rule": [
            "d13341"
        ]
    },
    {
        "instruction": "",
        "id": "q13342",
        "input": "python model gaussian curve",
        "output": "",
        "rule": [
            "d13342"
        ]
    },
    {
        "instruction": "",
        "id": "q13343",
        "input": "how to continue to the next line in python comment",
        "output": "",
        "rule": [
            "d13343"
        ]
    },
    {
        "instruction": "",
        "id": "q13344",
        "input": "python model get if exists",
        "output": "",
        "rule": [
            "d13344"
        ]
    },
    {
        "instruction": "",
        "id": "q13345",
        "input": "how to copy the shape of an array in python",
        "output": "",
        "rule": [
            "d13345"
        ]
    },
    {
        "instruction": "",
        "id": "q13346",
        "input": "python modles have execute access to root and not user in linux",
        "output": "",
        "rule": [
            "d13346"
        ]
    },
    {
        "instruction": "",
        "id": "q13347",
        "input": "how to correctly add two functions in python",
        "output": "",
        "rule": [
            "d13347"
        ]
    },
    {
        "instruction": "",
        "id": "q13348",
        "input": "python modular inverse matrix",
        "output": "",
        "rule": [
            "d13348"
        ]
    },
    {
        "instruction": "",
        "id": "q13349",
        "input": "how to count frequency of every element present in a string in python",
        "output": "",
        "rule": [
            "d13349"
        ]
    },
    {
        "instruction": "",
        "id": "q13350",
        "input": "python mongodb update a nested field",
        "output": "",
        "rule": [
            "d13350"
        ]
    },
    {
        "instruction": "",
        "id": "q13351",
        "input": "how to count the number of lines in a file in python",
        "output": "",
        "rule": [
            "d13351"
        ]
    },
    {
        "instruction": "",
        "id": "q13352",
        "input": "python most efficient way to get size of all files in a directory",
        "output": "",
        "rule": [
            "d13352"
        ]
    },
    {
        "instruction": "",
        "id": "q13353",
        "input": "how to crate a list of a certain size in python",
        "output": "",
        "rule": [
            "d13353"
        ]
    },
    {
        "instruction": "",
        "id": "q13354",
        "input": "python move a line",
        "output": "",
        "rule": [
            "d13354"
        ]
    },
    {
        "instruction": "",
        "id": "q13355",
        "input": "how to creat objects from a list python",
        "output": "",
        "rule": [
            "d13355"
        ]
    },
    {
        "instruction": "",
        "id": "q13356",
        "input": "python move on once mouse clicked",
        "output": "",
        "rule": [
            "d13356"
        ]
    },
    {
        "instruction": "",
        "id": "q13357",
        "input": "how to create a data frame from a dictionary python",
        "output": "",
        "rule": [
            "d13357"
        ]
    },
    {
        "instruction": "",
        "id": "q13358",
        "input": "python multi query execute",
        "output": "",
        "rule": [
            "d13358"
        ]
    },
    {
        "instruction": "",
        "id": "q13359",
        "input": "how to create a dictionary from a file in python",
        "output": "",
        "rule": [
            "d13359"
        ]
    },
    {
        "instruction": "",
        "id": "q13360",
        "input": "python multiprocess file lock",
        "output": "",
        "rule": [
            "d13360"
        ]
    },
    {
        "instruction": "",
        "id": "q13361",
        "input": "how to create a dictionary from a file python",
        "output": "",
        "rule": [
            "d13361"
        ]
    },
    {
        "instruction": "",
        "id": "q13362",
        "input": "python multiprocessing get cpu usage",
        "output": "",
        "rule": [
            "d13362"
        ]
    },
    {
        "instruction": "",
        "id": "q13363",
        "input": "how to create a file in python",
        "output": "",
        "rule": [
            "d13363"
        ]
    },
    {
        "instruction": "",
        "id": "q13364",
        "input": "python multiprocessing pool apply arg",
        "output": "",
        "rule": [
            "d13364"
        ]
    },
    {
        "instruction": "",
        "id": "q13365",
        "input": "how to create a list in python with no duplicate",
        "output": "",
        "rule": [
            "d13365"
        ]
    },
    {
        "instruction": "",
        "id": "q13366",
        "input": "python multiprocessing start a pool of processes",
        "output": "",
        "rule": [
            "d13366"
        ]
    },
    {
        "instruction": "",
        "id": "q13367",
        "input": "how to create a percent in python formatrix result",
        "output": "",
        "rule": [
            "d13367"
        ]
    },
    {
        "instruction": "",
        "id": "q13368",
        "input": "python mutiple many to one relationship",
        "output": "",
        "rule": [
            "d13368"
        ]
    },
    {
        "instruction": "",
        "id": "q13369",
        "input": "python mygui set title of window",
        "output": "",
        "rule": [
            "d13369"
        ]
    },
    {
        "instruction": "",
        "id": "q13370",
        "input": "how to create a yes or no response in python",
        "output": "",
        "rule": [
            "d13370"
        ]
    },
    {
        "instruction": "",
        "id": "q13371",
        "input": "python mysql get last id",
        "output": "",
        "rule": [
            "d13371"
        ]
    },
    {
        "instruction": "",
        "id": "q13372",
        "input": "how to create an object from a dictionary key in python",
        "output": "",
        "rule": [
            "d13372"
        ]
    },
    {
        "instruction": "",
        "id": "q13373",
        "input": "python mysql result as dict",
        "output": "",
        "rule": [
            "d13373"
        ]
    },
    {
        "instruction": "",
        "id": "q13374",
        "input": "how to create empty node python",
        "output": "",
        "rule": [
            "d13374"
        ]
    },
    {
        "instruction": "",
        "id": "q13375",
        "input": "python nearest value in a list",
        "output": "",
        "rule": [
            "d13375"
        ]
    },
    {
        "instruction": "",
        "id": "q13376",
        "input": "how to create matrix in python 10?10 all ones",
        "output": "",
        "rule": [
            "d13376"
        ]
    },
    {
        "instruction": "",
        "id": "q13377",
        "input": "python nested list flatten",
        "output": "",
        "rule": [
            "d13377"
        ]
    },
    {
        "instruction": "",
        "id": "q13378",
        "input": "how to create nested argparse in python",
        "output": "",
        "rule": [
            "d13378"
        ]
    },
    {
        "instruction": "",
        "id": "q13379",
        "input": "python networkx check edge attribute exist",
        "output": "",
        "rule": [
            "d13379"
        ]
    },
    {
        "instruction": "",
        "id": "q13380",
        "input": "python next item in loop",
        "output": "",
        "rule": [
            "d13380"
        ]
    },
    {
        "instruction": "",
        "id": "q13381",
        "input": "how to define an enum in python",
        "output": "",
        "rule": [
            "d13381"
        ]
    },
    {
        "instruction": "",
        "id": "q13382",
        "input": "python no duplicate in list",
        "output": "",
        "rule": [
            "d13382"
        ]
    },
    {
        "instruction": "",
        "id": "q13383",
        "input": "how to define object equality python",
        "output": "",
        "rule": [
            "d13383"
        ]
    },
    {
        "instruction": "",
        "id": "q13384",
        "input": "python nonetype in a if",
        "output": "",
        "rule": [
            "d13384"
        ]
    },
    {
        "instruction": "",
        "id": "q13385",
        "input": "python nonetype' object is not iterable",
        "output": "",
        "rule": [
            "d13385"
        ]
    },
    {
        "instruction": "",
        "id": "q13386",
        "input": "how to delete all python files on my computer windows 10",
        "output": "",
        "rule": [
            "d13386"
        ]
    },
    {
        "instruction": "",
        "id": "q13387",
        "input": "python normal distribution scipy",
        "output": "",
        "rule": [
            "d13387"
        ]
    },
    {
        "instruction": "",
        "id": "q13388",
        "input": "how to delete directory if exists in python",
        "output": "",
        "rule": [
            "d13388"
        ]
    },
    {
        "instruction": "",
        "id": "q13389",
        "input": "python normalise image array",
        "output": "",
        "rule": [
            "d13389"
        ]
    },
    {
        "instruction": "",
        "id": "q13390",
        "input": "how to delete item at indice python",
        "output": "",
        "rule": [
            "d13390"
        ]
    },
    {
        "instruction": "",
        "id": "q13391",
        "input": "python normalize grayscale image",
        "output": "",
        "rule": [
            "d13391"
        ]
    },
    {
        "instruction": "",
        "id": "q13392",
        "input": "how to delete objects in python",
        "output": "",
        "rule": [
            "d13392"
        ]
    },
    {
        "instruction": "",
        "id": "q13393",
        "input": "python normalize matrix column",
        "output": "",
        "rule": [
            "d13393"
        ]
    },
    {
        "instruction": "",
        "id": "q13394",
        "input": "how to delete one environment in python",
        "output": "",
        "rule": [
            "d13394"
        ]
    },
    {
        "instruction": "",
        "id": "q13395",
        "input": "python nose start context",
        "output": "",
        "rule": [
            "d13395"
        ]
    },
    {
        "instruction": "",
        "id": "q13396",
        "input": "how to delete self file in python",
        "output": "",
        "rule": [
            "d13396"
        ]
    },
    {
        "instruction": "",
        "id": "q13397",
        "input": "python not sending requests",
        "output": "",
        "rule": [
            "d13397"
        ]
    },
    {
        "instruction": "",
        "id": "q13398",
        "input": "how to detect the output of random function in python",
        "output": "",
        "rule": [
            "d13398"
        ]
    },
    {
        "instruction": "",
        "id": "q13399",
        "input": "python not with multiple conditions",
        "output": "",
        "rule": [
            "d13399"
        ]
    },
    {
        "instruction": "",
        "id": "q13400",
        "input": "how to determine data types in python",
        "output": "",
        "rule": [
            "d13400"
        ]
    },
    {
        "instruction": "",
        "id": "q13401",
        "input": "python np array get min values",
        "output": "",
        "rule": [
            "d13401"
        ]
    },
    {
        "instruction": "",
        "id": "q13402",
        "input": "how to determine language for python libraries",
        "output": "",
        "rule": [
            "d13402"
        ]
    },
    {
        "instruction": "",
        "id": "q13403",
        "input": "python np image scale",
        "output": "",
        "rule": [
            "d13403"
        ]
    },
    {
        "instruction": "",
        "id": "q13404",
        "input": "python numpy arrary with same space",
        "output": "",
        "rule": [
            "d13404"
        ]
    },
    {
        "instruction": "",
        "id": "q13405",
        "input": "how to disable a test in python",
        "output": "",
        "rule": [
            "d13405"
        ]
    },
    {
        "instruction": "",
        "id": "q13406",
        "input": "how to display the data type python",
        "output": "",
        "rule": [
            "d13406"
        ]
    },
    {
        "instruction": "",
        "id": "q13407",
        "input": "python numpy array how to select column",
        "output": "",
        "rule": [
            "d13407"
        ]
    },
    {
        "instruction": "",
        "id": "q13408",
        "input": "how to do a logriithmic scale graph in python",
        "output": "",
        "rule": [
            "d13408"
        ]
    },
    {
        "instruction": "",
        "id": "q13409",
        "input": "python numpy array two dim list",
        "output": "",
        "rule": [
            "d13409"
        ]
    },
    {
        "instruction": "",
        "id": "q13410",
        "input": "how to do an assert to check for none in python",
        "output": "",
        "rule": [
            "d13410"
        ]
    },
    {
        "instruction": "",
        "id": "q13411",
        "input": "python numpy flatten reshape",
        "output": "",
        "rule": [
            "d13411"
        ]
    },
    {
        "instruction": "",
        "id": "q13412",
        "input": "how to do an exponential fit in python",
        "output": "",
        "rule": [
            "d13412"
        ]
    },
    {
        "instruction": "",
        "id": "q13413",
        "input": "python numpy log of float array",
        "output": "",
        "rule": [
            "d13413"
        ]
    },
    {
        "instruction": "",
        "id": "q13414",
        "input": "how to do lowercase in python",
        "output": "",
        "rule": [
            "d13414"
        ]
    },
    {
        "instruction": "",
        "id": "q13415",
        "input": "python numpy minimum value of array",
        "output": "",
        "rule": [
            "d13415"
        ]
    },
    {
        "instruction": "",
        "id": "q13416",
        "input": "how to do lowercase on python",
        "output": "",
        "rule": [
            "d13416"
        ]
    },
    {
        "instruction": "",
        "id": "q13417",
        "input": "python oauth2 authentication for twitter",
        "output": "",
        "rule": [
            "d13417"
        ]
    },
    {
        "instruction": "",
        "id": "q13418",
        "input": "how to do tabs in a python string",
        "output": "",
        "rule": [
            "d13418"
        ]
    },
    {
        "instruction": "",
        "id": "q13419",
        "input": "python object into json",
        "output": "",
        "rule": [
            "d13419"
        ]
    },
    {
        "instruction": "",
        "id": "q13420",
        "input": "how to do things after a set amount of time in python",
        "output": "",
        "rule": [
            "d13420"
        ]
    },
    {
        "instruction": "",
        "id": "q13421",
        "input": "python one liner union of two dicts",
        "output": "",
        "rule": [
            "d13421"
        ]
    },
    {
        "instruction": "",
        "id": "q13422",
        "input": "how to draw a line in python screen",
        "output": "",
        "rule": [
            "d13422"
        ]
    },
    {
        "instruction": "",
        "id": "q13423",
        "input": "python only write file if doesn't already have contents",
        "output": "",
        "rule": [
            "d13423"
        ]
    },
    {
        "instruction": "",
        "id": "q13424",
        "input": "how to draw the straight line in python",
        "output": "",
        "rule": [
            "d13424"
        ]
    },
    {
        "instruction": "",
        "id": "q13425",
        "input": "python open serial port on windows",
        "output": "",
        "rule": [
            "d13425"
        ]
    },
    {
        "instruction": "",
        "id": "q13426",
        "input": "how to edit a fie in python without permission",
        "output": "",
        "rule": [
            "d13426"
        ]
    },
    {
        "instruction": "",
        "id": "q13427",
        "input": "python open wipe out a file",
        "output": "",
        "rule": [
            "d13427"
        ]
    },
    {
        "instruction": "",
        "id": "q13428",
        "input": "how to enable float values in python",
        "output": "",
        "rule": [
            "d13428"
        ]
    },
    {
        "instruction": "",
        "id": "q13429",
        "input": "python openclipboard access is denied win32clipboard",
        "output": "",
        "rule": [
            "d13429"
        ]
    },
    {
        "instruction": "",
        "id": "q13430",
        "input": "how to extract username and password from password file in python",
        "output": "",
        "rule": [
            "d13430"
        ]
    },
    {
        "instruction": "",
        "id": "q13431",
        "input": "python opencv apply 2d mask to 3 band image",
        "output": "",
        "rule": [
            "d13431"
        ]
    },
    {
        "instruction": "",
        "id": "q13432",
        "input": "how to figure out bounds in python",
        "output": "",
        "rule": [
            "d13432"
        ]
    },
    {
        "instruction": "",
        "id": "q13433",
        "input": "python opencv black screen",
        "output": "",
        "rule": [
            "d13433"
        ]
    },
    {
        "instruction": "",
        "id": "q13434",
        "input": "how to fill na with values in a data frame in python",
        "output": "",
        "rule": [
            "d13434"
        ]
    },
    {
        "instruction": "",
        "id": "q13435",
        "input": "python opencv camera default resolution",
        "output": "",
        "rule": [
            "d13435"
        ]
    },
    {
        "instruction": "",
        "id": "q13436",
        "input": "how to filter numbers based on list of indices in python",
        "output": "",
        "rule": [
            "d13436"
        ]
    },
    {
        "instruction": "",
        "id": "q13437",
        "input": "python opencv load image to numpy",
        "output": "",
        "rule": [
            "d13437"
        ]
    },
    {
        "instruction": "",
        "id": "q13438",
        "input": "how to filter through dict python",
        "output": "",
        "rule": [
            "d13438"
        ]
    },
    {
        "instruction": "",
        "id": "q13439",
        "input": "python opencv not reading image from full path",
        "output": "",
        "rule": [
            "d13439"
        ]
    },
    {
        "instruction": "",
        "id": "q13440",
        "input": "how to filter value from a table in python",
        "output": "",
        "rule": [
            "d13440"
        ]
    },
    {
        "instruction": "",
        "id": "q13441",
        "input": "python openpyxl remain style",
        "output": "",
        "rule": [
            "d13441"
        ]
    },
    {
        "instruction": "",
        "id": "q13442",
        "input": "how to fit a gaussian in python",
        "output": "",
        "rule": [
            "d13442"
        ]
    },
    {
        "instruction": "",
        "id": "q13443",
        "input": "python oracle truncate a table",
        "output": "",
        "rule": [
            "d13443"
        ]
    },
    {
        "instruction": "",
        "id": "q13444",
        "input": "how to format python array in a string",
        "output": "",
        "rule": [
            "d13444"
        ]
    },
    {
        "instruction": "",
        "id": "q13445",
        "input": "python order a dictionary alphabetically",
        "output": "",
        "rule": [
            "d13445"
        ]
    },
    {
        "instruction": "",
        "id": "q13446",
        "input": "how to generate a unique id each program run python",
        "output": "",
        "rule": [
            "d13446"
        ]
    },
    {
        "instruction": "",
        "id": "q13447",
        "input": "python os check if an item is a directory",
        "output": "",
        "rule": [
            "d13447"
        ]
    },
    {
        "instruction": "",
        "id": "q13448",
        "input": "how to generate random gaussian matrix in python",
        "output": "",
        "rule": [
            "d13448"
        ]
    },
    {
        "instruction": "",
        "id": "q13449",
        "input": "python output automatic wrap long line",
        "output": "",
        "rule": [
            "d13449"
        ]
    },
    {
        "instruction": "",
        "id": "q13450",
        "input": "how to generate random numbers multiple of 5 in python",
        "output": "",
        "rule": [
            "d13450"
        ]
    },
    {
        "instruction": "",
        "id": "q13451",
        "input": "python output dictionary as yml",
        "output": "",
        "rule": [
            "d13451"
        ]
    },
    {
        "instruction": "",
        "id": "q13452",
        "input": "python oversampling for each column",
        "output": "",
        "rule": [
            "d13452"
        ]
    },
    {
        "instruction": "",
        "id": "q13453",
        "input": "how to get a mouse position in python",
        "output": "",
        "rule": [
            "d13453"
        ]
    },
    {
        "instruction": "",
        "id": "q13454",
        "input": "python pad with front zeros",
        "output": "",
        "rule": [
            "d13454"
        ]
    },
    {
        "instruction": "",
        "id": "q13455",
        "input": "how to get all dates between two dates in python",
        "output": "",
        "rule": [
            "d13455"
        ]
    },
    {
        "instruction": "",
        "id": "q13456",
        "input": "python panda strip white space in list",
        "output": "",
        "rule": [
            "d13456"
        ]
    },
    {
        "instruction": "",
        "id": "q13457",
        "input": "python panda top border",
        "output": "",
        "rule": [
            "d13457"
        ]
    },
    {
        "instruction": "",
        "id": "q13458",
        "input": "how to get all properties of object python",
        "output": "",
        "rule": [
            "d13458"
        ]
    },
    {
        "instruction": "",
        "id": "q13459",
        "input": "python parent clas name",
        "output": "",
        "rule": [
            "d13459"
        ]
    },
    {
        "instruction": "",
        "id": "q13460",
        "input": "how to get back to parent directory python",
        "output": "",
        "rule": [
            "d13460"
        ]
    },
    {
        "instruction": "",
        "id": "q13461",
        "input": "python parent of an object",
        "output": "",
        "rule": [
            "d13461"
        ]
    },
    {
        "instruction": "",
        "id": "q13462",
        "input": "how to get char array from c to python",
        "output": "",
        "rule": [
            "d13462"
        ]
    },
    {
        "instruction": "",
        "id": "q13463",
        "input": "python parse sql query string",
        "output": "",
        "rule": [
            "d13463"
        ]
    },
    {
        "instruction": "",
        "id": "q13464",
        "input": "how to get column names with data types in python",
        "output": "",
        "rule": [
            "d13464"
        ]
    },
    {
        "instruction": "",
        "id": "q13465",
        "input": "python parsing thousands of files parallel",
        "output": "",
        "rule": [
            "d13465"
        ]
    },
    {
        "instruction": "",
        "id": "q13466",
        "input": "how to get coordinates of windows in python",
        "output": "",
        "rule": [
            "d13466"
        ]
    },
    {
        "instruction": "",
        "id": "q13467",
        "input": "python pass args to next function without *",
        "output": "",
        "rule": [
            "d13467"
        ]
    },
    {
        "instruction": "",
        "id": "q13468",
        "input": "how to get days in a month in python",
        "output": "",
        "rule": [
            "d13468"
        ]
    },
    {
        "instruction": "",
        "id": "q13469",
        "input": "python pass pointer of array to ctypes",
        "output": "",
        "rule": [
            "d13469"
        ]
    },
    {
        "instruction": "",
        "id": "q13470",
        "input": "how to get depth of the node for binary tree in python",
        "output": "",
        "rule": [
            "d13470"
        ]
    },
    {
        "instruction": "",
        "id": "q13471",
        "input": "python path expand envvar",
        "output": "",
        "rule": [
            "d13471"
        ]
    },
    {
        "instruction": "",
        "id": "q13472",
        "input": "how to get gid of a group python",
        "output": "",
        "rule": [
            "d13472"
        ]
    },
    {
        "instruction": "",
        "id": "q13473",
        "input": "python pathlib how to iterate over directories and subdirectories",
        "output": "",
        "rule": [
            "d13473"
        ]
    },
    {
        "instruction": "",
        "id": "q13474",
        "input": "how to get help function in python",
        "output": "",
        "rule": [
            "d13474"
        ]
    },
    {
        "instruction": "",
        "id": "q13475",
        "input": "how to get index from parent as a child python",
        "output": "",
        "rule": [
            "d13475"
        ]
    },
    {
        "instruction": "",
        "id": "q13476",
        "input": "python pattern match tuple",
        "output": "",
        "rule": [
            "d13476"
        ]
    },
    {
        "instruction": "",
        "id": "q13477",
        "input": "how to get index of lines in file using python",
        "output": "",
        "rule": [
            "d13477"
        ]
    },
    {
        "instruction": "",
        "id": "q13478",
        "input": "python pd normalize multiple columns",
        "output": "",
        "rule": [
            "d13478"
        ]
    },
    {
        "instruction": "",
        "id": "q13479",
        "input": "how to get indexes of a value in an array in python",
        "output": "",
        "rule": [
            "d13479"
        ]
    },
    {
        "instruction": "",
        "id": "q13480",
        "input": "python pdfminer size of page",
        "output": "",
        "rule": [
            "d13480"
        ]
    },
    {
        "instruction": "",
        "id": "q13481",
        "input": "how to get into multyindex python",
        "output": "",
        "rule": [
            "d13481"
        ]
    },
    {
        "instruction": "",
        "id": "q13482",
        "input": "python percent % in string",
        "output": "",
        "rule": [
            "d13482"
        ]
    },
    {
        "instruction": "",
        "id": "q13483",
        "input": "how to get last element of an2d array in python",
        "output": "",
        "rule": [
            "d13483"
        ]
    },
    {
        "instruction": "",
        "id": "q13484",
        "input": "python pickle load return object",
        "output": "",
        "rule": [
            "d13484"
        ]
    },
    {
        "instruction": "",
        "id": "q13485",
        "input": "how to get list of previous command in python",
        "output": "",
        "rule": [
            "d13485"
        ]
    },
    {
        "instruction": "",
        "id": "q13486",
        "input": "python pickle non type is not callable",
        "output": "",
        "rule": [
            "d13486"
        ]
    },
    {
        "instruction": "",
        "id": "q13487",
        "input": "how to get location python",
        "output": "",
        "rule": [
            "d13487"
        ]
    },
    {
        "instruction": "",
        "id": "q13488",
        "input": "how to get matrix as input in python",
        "output": "",
        "rule": [
            "d13488"
        ]
    },
    {
        "instruction": "",
        "id": "q13489",
        "input": "python pil images looks like a negative",
        "output": "",
        "rule": [
            "d13489"
        ]
    },
    {
        "instruction": "",
        "id": "q13490",
        "input": "how to get maximum in counter function in python",
        "output": "",
        "rule": [
            "d13490"
        ]
    },
    {
        "instruction": "",
        "id": "q13491",
        "input": "python plot use default yaxis limits",
        "output": "",
        "rule": [
            "d13491"
        ]
    },
    {
        "instruction": "",
        "id": "q13492",
        "input": "how to get number of rows from data frame in python",
        "output": "",
        "rule": [
            "d13492"
        ]
    },
    {
        "instruction": "",
        "id": "q13493",
        "input": "python pngs to animation gif",
        "output": "",
        "rule": [
            "d13493"
        ]
    },
    {
        "instruction": "",
        "id": "q13494",
        "input": "how to get python location",
        "output": "",
        "rule": [
            "d13494"
        ]
    },
    {
        "instruction": "",
        "id": "q13495",
        "input": "how to get python script return value in javascript",
        "output": "",
        "rule": [
            "d13495"
        ]
    },
    {
        "instruction": "",
        "id": "q13496",
        "input": "python pool map with lambda function",
        "output": "",
        "rule": [
            "d13496"
        ]
    },
    {
        "instruction": "",
        "id": "q13497",
        "input": "how to get size of a byte string python",
        "output": "",
        "rule": [
            "d13497"
        ]
    },
    {
        "instruction": "",
        "id": "q13498",
        "input": "python pop without remove",
        "output": "",
        "rule": [
            "d13498"
        ]
    },
    {
        "instruction": "",
        "id": "q13499",
        "input": "how to get stack trace in python pdb",
        "output": "",
        "rule": [
            "d13499"
        ]
    },
    {
        "instruction": "",
        "id": "q13500",
        "input": "python posting table to html",
        "output": "",
        "rule": [
            "d13500"
        ]
    },
    {
        "instruction": "",
        "id": "q13501",
        "input": "how to get tensorflow for python3",
        "output": "",
        "rule": [
            "d13501"
        ]
    },
    {
        "instruction": "",
        "id": "q13502",
        "input": "python pretty xml with namespace",
        "output": "",
        "rule": [
            "d13502"
        ]
    },
    {
        "instruction": "",
        "id": "q13503",
        "input": "how to get the average of values in an array in python",
        "output": "",
        "rule": [
            "d13503"
        ]
    },
    {
        "instruction": "",
        "id": "q13504",
        "input": "python prettytable to csv",
        "output": "",
        "rule": [
            "d13504"
        ]
    },
    {
        "instruction": "",
        "id": "q13505",
        "input": "how to get the column names in python dataset",
        "output": "",
        "rule": [
            "d13505"
        ]
    },
    {
        "instruction": "",
        "id": "q13506",
        "input": "python print contents of a tree object",
        "output": "",
        "rule": [
            "d13506"
        ]
    },
    {
        "instruction": "",
        "id": "q13507",
        "input": "how to get the datatype python",
        "output": "",
        "rule": [
            "d13507"
        ]
    },
    {
        "instruction": "",
        "id": "q13508",
        "input": "python print format string fixed width",
        "output": "",
        "rule": [
            "d13508"
        ]
    },
    {
        "instruction": "",
        "id": "q13509",
        "input": "how to get the last element in linked list in python",
        "output": "",
        "rule": [
            "d13509"
        ]
    },
    {
        "instruction": "",
        "id": "q13510",
        "input": "python print in fixed width",
        "output": "",
        "rule": [
            "d13510"
        ]
    },
    {
        "instruction": "",
        "id": "q13511",
        "input": "how to get the number of cores on pc using python code",
        "output": "",
        "rule": [
            "d13511"
        ]
    },
    {
        "instruction": "",
        "id": "q13512",
        "input": "python print keep precision",
        "output": "",
        "rule": [
            "d13512"
        ]
    },
    {
        "instruction": "",
        "id": "q13513",
        "input": "how to get the original directory of the python file",
        "output": "",
        "rule": [
            "d13513"
        ]
    },
    {
        "instruction": "",
        "id": "q13514",
        "input": "python print method code",
        "output": "",
        "rule": [
            "d13514"
        ]
    },
    {
        "instruction": "",
        "id": "q13515",
        "input": "how to get the root using python",
        "output": "",
        "rule": [
            "d13515"
        ]
    },
    {
        "instruction": "",
        "id": "q13516",
        "input": "python print multiple lines in str function",
        "output": "",
        "rule": [
            "d13516"
        ]
    },
    {
        "instruction": "",
        "id": "q13517",
        "input": "how to get the smallest value in a list in python",
        "output": "",
        "rule": [
            "d13517"
        ]
    },
    {
        "instruction": "",
        "id": "q13518",
        "input": "python print stack trace extception",
        "output": "",
        "rule": [
            "d13518"
        ]
    },
    {
        "instruction": "",
        "id": "q13519",
        "input": "how to get the type of a variable python",
        "output": "",
        "rule": [
            "d13519"
        ]
    },
    {
        "instruction": "",
        "id": "q13520",
        "input": "python print string to a varaible",
        "output": "",
        "rule": [
            "d13520"
        ]
    },
    {
        "instruction": "",
        "id": "q13521",
        "input": "how to get the width of the stdout area in python",
        "output": "",
        "rule": [
            "d13521"
        ]
    },
    {
        "instruction": "",
        "id": "q13522",
        "input": "python process force exit",
        "output": "",
        "rule": [
            "d13522"
        ]
    },
    {
        "instruction": "",
        "id": "q13523",
        "input": "how to get to python env var on windows",
        "output": "",
        "rule": [
            "d13523"
        ]
    },
    {
        "instruction": "",
        "id": "q13524",
        "input": "python progressbar change color",
        "output": "",
        "rule": [
            "d13524"
        ]
    },
    {
        "instruction": "",
        "id": "q13525",
        "input": "how to get tuple from text file using python",
        "output": "",
        "rule": [
            "d13525"
        ]
    },
    {
        "instruction": "",
        "id": "q13526",
        "input": "python prompt user for confirmation",
        "output": "",
        "rule": [
            "d13526"
        ]
    },
    {
        "instruction": "",
        "id": "q13527",
        "input": "how to get value for a key in python key values",
        "output": "",
        "rule": [
            "d13527"
        ]
    },
    {
        "instruction": "",
        "id": "q13528",
        "input": "python property without setter",
        "output": "",
        "rule": [
            "d13528"
        ]
    },
    {
        "instruction": "",
        "id": "q13529",
        "input": "how to get values from base to super in python",
        "output": "",
        "rule": [
            "d13529"
        ]
    },
    {
        "instruction": "",
        "id": "q13530",
        "input": "python protobuf get enum text",
        "output": "",
        "rule": [
            "d13530"
        ]
    },
    {
        "instruction": "",
        "id": "q13531",
        "input": "how to give admin rights to python",
        "output": "",
        "rule": [
            "d13531"
        ]
    },
    {
        "instruction": "",
        "id": "q13532",
        "input": "python protobuf get enum value as text",
        "output": "",
        "rule": [
            "d13532"
        ]
    },
    {
        "instruction": "",
        "id": "q13533",
        "input": "how to give comment line in python",
        "output": "",
        "rule": [
            "d13533"
        ]
    },
    {
        "instruction": "",
        "id": "q13534",
        "input": "python putting a function on a timer",
        "output": "",
        "rule": [
            "d13534"
        ]
    },
    {
        "instruction": "",
        "id": "q13535",
        "input": "how to grab a range from a string python",
        "output": "",
        "rule": [
            "d13535"
        ]
    },
    {
        "instruction": "",
        "id": "q13536",
        "input": "python pytest global variable",
        "output": "",
        "rule": [
            "d13536"
        ]
    },
    {
        "instruction": "",
        "id": "q13537",
        "input": "how to have pi in label in python plot",
        "output": "",
        "rule": [
            "d13537"
        ]
    },
    {
        "instruction": "",
        "id": "q13538",
        "input": "python query result into df",
        "output": "",
        "rule": [
            "d13538"
        ]
    },
    {
        "instruction": "",
        "id": "q13539",
        "input": "how to identify the closest match in a list python",
        "output": "",
        "rule": [
            "d13539"
        ]
    },
    {
        "instruction": "",
        "id": "q13540",
        "input": "python queue get pop",
        "output": "",
        "rule": [
            "d13540"
        ]
    },
    {
        "instruction": "",
        "id": "q13541",
        "input": "how to impute missing data in python",
        "output": "",
        "rule": [
            "d13541"
        ]
    },
    {
        "instruction": "",
        "id": "q13542",
        "input": "python quickest way to display image",
        "output": "",
        "rule": [
            "d13542"
        ]
    },
    {
        "instruction": "",
        "id": "q13543",
        "input": "how to impute missing values in python",
        "output": "",
        "rule": [
            "d13543"
        ]
    },
    {
        "instruction": "",
        "id": "q13544",
        "input": "python quote in a string",
        "output": "",
        "rule": [
            "d13544"
        ]
    },
    {
        "instruction": "",
        "id": "q13545",
        "input": "how to include def files in python",
        "output": "",
        "rule": [
            "d13545"
        ]
    },
    {
        "instruction": "",
        "id": "q13546",
        "input": "python range multiply a constant",
        "output": "",
        "rule": [
            "d13546"
        ]
    },
    {
        "instruction": "",
        "id": "q13547",
        "input": "how to increase boxplot width python",
        "output": "",
        "rule": [
            "d13547"
        ]
    },
    {
        "instruction": "",
        "id": "q13548",
        "input": "python range of int with left fill",
        "output": "",
        "rule": [
            "d13548"
        ]
    },
    {
        "instruction": "",
        "id": "q13549",
        "input": "how to input lowest and highest range on python",
        "output": "",
        "rule": [
            "d13549"
        ]
    },
    {
        "instruction": "",
        "id": "q13550",
        "input": "python re findall lazy iterator",
        "output": "",
        "rule": [
            "d13550"
        ]
    },
    {
        "instruction": "",
        "id": "q13551",
        "input": "how to input tuples into a function python",
        "output": "",
        "rule": [
            "d13551"
        ]
    },
    {
        "instruction": "",
        "id": "q13552",
        "input": "python re sub multiple replacements",
        "output": "",
        "rule": [
            "d13552"
        ]
    },
    {
        "instruction": "",
        "id": "q13553",
        "input": "how to instantiate a time object from a timestamp in python",
        "output": "",
        "rule": [
            "d13553"
        ]
    },
    {
        "instruction": "",
        "id": "q13554",
        "input": "python read and cache file in memory",
        "output": "",
        "rule": [
            "d13554"
        ]
    },
    {
        "instruction": "",
        "id": "q13555",
        "input": "how to instantiate an object for each item in a list in python",
        "output": "",
        "rule": [
            "d13555"
        ]
    },
    {
        "instruction": "",
        "id": "q13556",
        "input": "python read credentials from text file",
        "output": "",
        "rule": [
            "d13556"
        ]
    },
    {
        "instruction": "",
        "id": "q13557",
        "input": "how to iterate every other element in python",
        "output": "",
        "rule": [
            "d13557"
        ]
    },
    {
        "instruction": "",
        "id": "q13558",
        "input": "python read file guess encoding example chardet",
        "output": "",
        "rule": [
            "d13558"
        ]
    },
    {
        "instruction": "",
        "id": "q13559",
        "input": "how to iterate through replace python",
        "output": "",
        "rule": [
            "d13559"
        ]
    },
    {
        "instruction": "",
        "id": "q13560",
        "input": "python read preference shard",
        "output": "",
        "rule": [
            "d13560"
        ]
    },
    {
        "instruction": "",
        "id": "q13561",
        "input": "how to iterate through tree nodes in python",
        "output": "",
        "rule": [
            "d13561"
        ]
    },
    {
        "instruction": "",
        "id": "q13562",
        "input": "python read stream of input",
        "output": "",
        "rule": [
            "d13562"
        ]
    },
    {
        "instruction": "",
        "id": "q13563",
        "input": "how to keep going after an error in python",
        "output": "",
        "rule": [
            "d13563"
        ]
    },
    {
        "instruction": "",
        "id": "q13564",
        "input": "python read the first 10 lines in a file and print each line",
        "output": "",
        "rule": [
            "d13564"
        ]
    },
    {
        "instruction": "",
        "id": "q13565",
        "input": "how to keep interactive mode running not script for python",
        "output": "",
        "rule": [
            "d13565"
        ]
    },
    {
        "instruction": "",
        "id": "q13566",
        "input": "python read xx/xx/xxxx datetime from string",
        "output": "",
        "rule": [
            "d13566"
        ]
    },
    {
        "instruction": "",
        "id": "q13567",
        "input": "how to kill process daemon in python from the same function",
        "output": "",
        "rule": [
            "d13567"
        ]
    },
    {
        "instruction": "",
        "id": "q13568",
        "input": "python read yaml file deserialize",
        "output": "",
        "rule": [
            "d13568"
        ]
    },
    {
        "instruction": "",
        "id": "q13569",
        "input": "how to know mouse pointer position in python",
        "output": "",
        "rule": [
            "d13569"
        ]
    },
    {
        "instruction": "",
        "id": "q13570",
        "input": "python record function runtime",
        "output": "",
        "rule": [
            "d13570"
        ]
    },
    {
        "instruction": "",
        "id": "q13571",
        "input": "how to know path of python",
        "output": "",
        "rule": [
            "d13571"
        ]
    },
    {
        "instruction": "",
        "id": "q13572",
        "input": "python recursion on nested list to tuple",
        "output": "",
        "rule": [
            "d13572"
        ]
    },
    {
        "instruction": "",
        "id": "q13573",
        "input": "how to know the data type for each column python",
        "output": "",
        "rule": [
            "d13573"
        ]
    },
    {
        "instruction": "",
        "id": "q13574",
        "input": "how to know the size of numpy array in python",
        "output": "",
        "rule": [
            "d13574"
        ]
    },
    {
        "instruction": "",
        "id": "q13575",
        "input": "python redis get all values",
        "output": "",
        "rule": [
            "d13575"
        ]
    },
    {
        "instruction": "",
        "id": "q13576",
        "input": "how to limit size of a list in python",
        "output": "",
        "rule": [
            "d13576"
        ]
    },
    {
        "instruction": "",
        "id": "q13577",
        "input": "python redis pubsub has no data",
        "output": "",
        "rule": [
            "d13577"
        ]
    },
    {
        "instruction": "",
        "id": "q13578",
        "input": "how to load a file with pickle python",
        "output": "",
        "rule": [
            "d13578"
        ]
    },
    {
        "instruction": "",
        "id": "q13579",
        "input": "python redis rpush list",
        "output": "",
        "rule": [
            "d13579"
        ]
    },
    {
        "instruction": "",
        "id": "q13580",
        "input": "how to load h5 data sets in python",
        "output": "",
        "rule": [
            "d13580"
        ]
    },
    {
        "instruction": "",
        "id": "q13581",
        "input": "python regex on folder of filenames",
        "output": "",
        "rule": [
            "d13581"
        ]
    },
    {
        "instruction": "",
        "id": "q13582",
        "input": "how to load npy in python",
        "output": "",
        "rule": [
            "d13582"
        ]
    },
    {
        "instruction": "",
        "id": "q13583",
        "input": "python regex remove c comments",
        "output": "",
        "rule": [
            "d13583"
        ]
    },
    {
        "instruction": "",
        "id": "q13584",
        "input": "how to load weight file in python",
        "output": "",
        "rule": [
            "d13584"
        ]
    },
    {
        "instruction": "",
        "id": "q13585",
        "input": "python regex return value as int",
        "output": "",
        "rule": [
            "d13585"
        ]
    },
    {
        "instruction": "",
        "id": "q13586",
        "input": "how to locate the location of a file in python",
        "output": "",
        "rule": [
            "d13586"
        ]
    },
    {
        "instruction": "",
        "id": "q13587",
        "input": "python regular expression to check validity",
        "output": "",
        "rule": [
            "d13587"
        ]
    },
    {
        "instruction": "",
        "id": "q13588",
        "input": "python remaining blanks spaces from list",
        "output": "",
        "rule": [
            "d13588"
        ]
    },
    {
        "instruction": "",
        "id": "q13589",
        "input": "how to lowercase all caps in a sentence python",
        "output": "",
        "rule": [
            "d13589"
        ]
    },
    {
        "instruction": "",
        "id": "q13590",
        "input": "python remove an index",
        "output": "",
        "rule": [
            "d13590"
        ]
    },
    {
        "instruction": "",
        "id": "q13591",
        "input": "how to maitain decimals in division python",
        "output": "",
        "rule": [
            "d13591"
        ]
    },
    {
        "instruction": "",
        "id": "q13592",
        "input": "python remove commas and spaces in list",
        "output": "",
        "rule": [
            "d13592"
        ]
    },
    {
        "instruction": "",
        "id": "q13593",
        "input": "how to make a gaussian filter kernal python",
        "output": "",
        "rule": [
            "d13593"
        ]
    },
    {
        "instruction": "",
        "id": "q13594",
        "input": "how to make a graph in python without an addon",
        "output": "",
        "rule": [
            "d13594"
        ]
    },
    {
        "instruction": "",
        "id": "q13595",
        "input": "python remove duplicated list",
        "output": "",
        "rule": [
            "d13595"
        ]
    },
    {
        "instruction": "",
        "id": "q13596",
        "input": "how to make a list not a none type in python",
        "output": "",
        "rule": [
            "d13596"
        ]
    },
    {
        "instruction": "",
        "id": "q13597",
        "input": "python remove html string",
        "output": "",
        "rule": [
            "d13597"
        ]
    },
    {
        "instruction": "",
        "id": "q13598",
        "input": "how to make a python execute using icon",
        "output": "",
        "rule": [
            "d13598"
        ]
    },
    {
        "instruction": "",
        "id": "q13599",
        "input": "python remove last element from array",
        "output": "",
        "rule": [
            "d13599"
        ]
    },
    {
        "instruction": "",
        "id": "q13600",
        "input": "how to make a python header",
        "output": "",
        "rule": [
            "d13600"
        ]
    },
    {
        "instruction": "",
        "id": "q13601",
        "input": "python remove last item in array",
        "output": "",
        "rule": [
            "d13601"
        ]
    },
    {
        "instruction": "",
        "id": "q13602",
        "input": "how to make a str an int in python",
        "output": "",
        "rule": [
            "d13602"
        ]
    },
    {
        "instruction": "",
        "id": "q13603",
        "input": "python remove letters from file name",
        "output": "",
        "rule": [
            "d13603"
        ]
    },
    {
        "instruction": "",
        "id": "q13604",
        "input": "how to make an integer a boolean python",
        "output": "",
        "rule": [
            "d13604"
        ]
    },
    {
        "instruction": "",
        "id": "q13605",
        "input": "python remove microsecond from datetime",
        "output": "",
        "rule": [
            "d13605"
        ]
    },
    {
        "instruction": "",
        "id": "q13606",
        "input": "how to make array iterable python",
        "output": "",
        "rule": [
            "d13606"
        ]
    },
    {
        "instruction": "",
        "id": "q13607",
        "input": "python remove non alphabet character",
        "output": "",
        "rule": [
            "d13607"
        ]
    },
    {
        "instruction": "",
        "id": "q13608",
        "input": "how to make every capital letter lowercase python",
        "output": "",
        "rule": [
            "d13608"
        ]
    },
    {
        "instruction": "",
        "id": "q13609",
        "input": "python remove non alphanumeric characters from string",
        "output": "",
        "rule": [
            "d13609"
        ]
    },
    {
        "instruction": "",
        "id": "q13610",
        "input": "how to make linspace integer in python",
        "output": "",
        "rule": [
            "d13610"
        ]
    },
    {
        "instruction": "",
        "id": "q13611",
        "input": "python remove outer list from nested list",
        "output": "",
        "rule": [
            "d13611"
        ]
    },
    {
        "instruction": "",
        "id": "q13612",
        "input": "python remove pause in audio",
        "output": "",
        "rule": [
            "d13612"
        ]
    },
    {
        "instruction": "",
        "id": "q13613",
        "input": "how to make python range inclusive",
        "output": "",
        "rule": [
            "d13613"
        ]
    },
    {
        "instruction": "",
        "id": "q13614",
        "input": "python remove spaces around string",
        "output": "",
        "rule": [
            "d13614"
        ]
    },
    {
        "instruction": "",
        "id": "q13615",
        "input": "how to make strings upper in python 3",
        "output": "",
        "rule": [
            "d13615"
        ]
    },
    {
        "instruction": "",
        "id": "q13616",
        "input": "python remove urls in twitter",
        "output": "",
        "rule": [
            "d13616"
        ]
    },
    {
        "instruction": "",
        "id": "q13617",
        "input": "how to mask the image in white python",
        "output": "",
        "rule": [
            "d13617"
        ]
    },
    {
        "instruction": "",
        "id": "q13618",
        "input": "python removin instances from memory",
        "output": "",
        "rule": [
            "d13618"
        ]
    },
    {
        "instruction": "",
        "id": "q13619",
        "input": "how to match a number of string pattern on in python list",
        "output": "",
        "rule": [
            "d13619"
        ]
    },
    {
        "instruction": "",
        "id": "q13620",
        "input": "python removing empty literals dict keys",
        "output": "",
        "rule": [
            "d13620"
        ]
    },
    {
        "instruction": "",
        "id": "q13621",
        "input": "how to match patterns in filenames using re in python",
        "output": "",
        "rule": [
            "d13621"
        ]
    },
    {
        "instruction": "",
        "id": "q13622",
        "input": "python replace all values in dictionary",
        "output": "",
        "rule": [
            "d13622"
        ]
    },
    {
        "instruction": "",
        "id": "q13623",
        "input": "python replace missing valumes with na",
        "output": "",
        "rule": [
            "d13623"
        ]
    },
    {
        "instruction": "",
        "id": "q13624",
        "input": "how to move file pointer to specific offset after a line in python",
        "output": "",
        "rule": [
            "d13624"
        ]
    },
    {
        "instruction": "",
        "id": "q13625",
        "input": "python replace property with attribute",
        "output": "",
        "rule": [
            "d13625"
        ]
    },
    {
        "instruction": "",
        "id": "q13626",
        "input": "how to move to next iterattion python",
        "output": "",
        "rule": [
            "d13626"
        ]
    },
    {
        "instruction": "",
        "id": "q13627",
        "input": "python replace spaces and tabs",
        "output": "",
        "rule": [
            "d13627"
        ]
    },
    {
        "instruction": "",
        "id": "q13628",
        "input": "how to normalize a ndarray in python",
        "output": "",
        "rule": [
            "d13628"
        ]
    },
    {
        "instruction": "",
        "id": "q13629",
        "input": "python replace string using nested for loop",
        "output": "",
        "rule": [
            "d13629"
        ]
    },
    {
        "instruction": "",
        "id": "q13630",
        "input": "how to normalize a set of data python",
        "output": "",
        "rule": [
            "d13630"
        ]
    },
    {
        "instruction": "",
        "id": "q13631",
        "input": "python repr to compare objects",
        "output": "",
        "rule": [
            "d13631"
        ]
    },
    {
        "instruction": "",
        "id": "q13632",
        "input": "how to normalize an array in python without using the normalize function",
        "output": "",
        "rule": [
            "d13632"
        ]
    },
    {
        "instruction": "",
        "id": "q13633",
        "input": "how to not auto end a python program",
        "output": "",
        "rule": [
            "d13633"
        ]
    },
    {
        "instruction": "",
        "id": "q13634",
        "input": "how to obtain unique characters in a string python",
        "output": "",
        "rule": [
            "d13634"
        ]
    },
    {
        "instruction": "",
        "id": "q13635",
        "input": "python requests response code and body",
        "output": "",
        "rule": [
            "d13635"
        ]
    },
    {
        "instruction": "",
        "id": "q13636",
        "input": "how to one hot encode labels made of tuples python",
        "output": "",
        "rule": [
            "d13636"
        ]
    },
    {
        "instruction": "",
        "id": "q13637",
        "input": "python requests session requestcookiejar persist",
        "output": "",
        "rule": [
            "d13637"
        ]
    },
    {
        "instruction": "",
        "id": "q13638",
        "input": "python reshape flat list to 2d",
        "output": "",
        "rule": [
            "d13638"
        ]
    },
    {
        "instruction": "",
        "id": "q13639",
        "input": "how to open a serial port in python",
        "output": "",
        "rule": [
            "d13639"
        ]
    },
    {
        "instruction": "",
        "id": "q13640",
        "input": "python restart bot discord",
        "output": "",
        "rule": [
            "d13640"
        ]
    },
    {
        "instruction": "",
        "id": "q13641",
        "input": "how to open image in python and covert to a numpy array",
        "output": "",
        "rule": [
            "d13641"
        ]
    },
    {
        "instruction": "",
        "id": "q13642",
        "input": "python restart iterator from same spot",
        "output": "",
        "rule": [
            "d13642"
        ]
    },
    {
        "instruction": "",
        "id": "q13643",
        "input": "how to open the serial port in python",
        "output": "",
        "rule": [
            "d13643"
        ]
    },
    {
        "instruction": "",
        "id": "q13644",
        "input": "python retreive earlier project date",
        "output": "",
        "rule": [
            "d13644"
        ]
    },
    {
        "instruction": "",
        "id": "q13645",
        "input": "how to output an object attribute in python",
        "output": "",
        "rule": [
            "d13645"
        ]
    },
    {
        "instruction": "",
        "id": "q13646",
        "input": "python retrieving from a url query string",
        "output": "",
        "rule": [
            "d13646"
        ]
    },
    {
        "instruction": "",
        "id": "q13647",
        "input": "how to pad an image python",
        "output": "",
        "rule": [
            "d13647"
        ]
    },
    {
        "instruction": "",
        "id": "q13648",
        "input": "python return cursor as list",
        "output": "",
        "rule": [
            "d13648"
        ]
    },
    {
        "instruction": "",
        "id": "q13649",
        "input": "how to parse a python file",
        "output": "",
        "rule": [
            "d13649"
        ]
    },
    {
        "instruction": "",
        "id": "q13650",
        "input": "python return fig 'figure' object",
        "output": "",
        "rule": [
            "d13650"
        ]
    },
    {
        "instruction": "",
        "id": "q13651",
        "input": "how to pause a python loop",
        "output": "",
        "rule": [
            "d13651"
        ]
    },
    {
        "instruction": "",
        "id": "q13652",
        "input": "python returns a function that returns the next fibonacci number",
        "output": "",
        "rule": [
            "d13652"
        ]
    },
    {
        "instruction": "",
        "id": "q13653",
        "input": "how to pick random elemtns from python list",
        "output": "",
        "rule": [
            "d13653"
        ]
    },
    {
        "instruction": "",
        "id": "q13654",
        "input": "how to plot from a definition python",
        "output": "",
        "rule": [
            "d13654"
        ]
    },
    {
        "instruction": "",
        "id": "q13655",
        "input": "python rgb tuple to colormap",
        "output": "",
        "rule": [
            "d13655"
        ]
    },
    {
        "instruction": "",
        "id": "q13656",
        "input": "python rotate image by angle",
        "output": "",
        "rule": [
            "d13656"
        ]
    },
    {
        "instruction": "",
        "id": "q13657",
        "input": "how to print a list in python in the print funvtion",
        "output": "",
        "rule": [
            "d13657"
        ]
    },
    {
        "instruction": "",
        "id": "q13658",
        "input": "python round a float to n decimals",
        "output": "",
        "rule": [
            "d13658"
        ]
    },
    {
        "instruction": "",
        "id": "q13659",
        "input": "how to print error from python flask",
        "output": "",
        "rule": [
            "d13659"
        ]
    },
    {
        "instruction": "",
        "id": "q13660",
        "input": "how to print error messages python",
        "output": "",
        "rule": [
            "d13660"
        ]
    },
    {
        "instruction": "",
        "id": "q13661",
        "input": "python round to 2 significant figures",
        "output": "",
        "rule": [
            "d13661"
        ]
    },
    {
        "instruction": "",
        "id": "q13662",
        "input": "how to print fields of a line in python",
        "output": "",
        "rule": [
            "d13662"
        ]
    },
    {
        "instruction": "",
        "id": "q13663",
        "input": "python round to precision",
        "output": "",
        "rule": [
            "d13663"
        ]
    },
    {
        "instruction": "",
        "id": "q13664",
        "input": "how to print rdd size in python",
        "output": "",
        "rule": [
            "d13664"
        ]
    },
    {
        "instruction": "",
        "id": "q13665",
        "input": "python run commands as admin",
        "output": "",
        "rule": [
            "d13665"
        ]
    },
    {
        "instruction": "",
        "id": "q13666",
        "input": "how to process a string into date object python",
        "output": "",
        "rule": [
            "d13666"
        ]
    },
    {
        "instruction": "",
        "id": "q13667",
        "input": "python runserver auto refresh browser",
        "output": "",
        "rule": [
            "d13667"
        ]
    },
    {
        "instruction": "",
        "id": "q13668",
        "input": "how to produce product of numbers in list python",
        "output": "",
        "rule": [
            "d13668"
        ]
    },
    {
        "instruction": "",
        "id": "q13669",
        "input": "python runserver set envrionemnt",
        "output": "",
        "rule": [
            "d13669"
        ]
    },
    {
        "instruction": "",
        "id": "q13670",
        "input": "how to produce title case python",
        "output": "",
        "rule": [
            "d13670"
        ]
    },
    {
        "instruction": "",
        "id": "q13671",
        "input": "python safe path name",
        "output": "",
        "rule": [
            "d13671"
        ]
    },
    {
        "instruction": "",
        "id": "q13672",
        "input": "how to prompt an input in python",
        "output": "",
        "rule": [
            "d13672"
        ]
    },
    {
        "instruction": "",
        "id": "q13673",
        "input": "python safe symlink function",
        "output": "",
        "rule": [
            "d13673"
        ]
    },
    {
        "instruction": "",
        "id": "q13674",
        "input": "how to put every character in array string python",
        "output": "",
        "rule": [
            "d13674"
        ]
    },
    {
        "instruction": "",
        "id": "q13675",
        "input": "python saving a variable to a text file",
        "output": "",
        "rule": [
            "d13675"
        ]
    },
    {
        "instruction": "",
        "id": "q13676",
        "input": "how to put python libraries in the path of user",
        "output": "",
        "rule": [
            "d13676"
        ]
    },
    {
        "instruction": "",
        "id": "q13677",
        "input": "python saving graph to image file",
        "output": "",
        "rule": [
            "d13677"
        ]
    },
    {
        "instruction": "",
        "id": "q13678",
        "input": "how to quit python",
        "output": "",
        "rule": [
            "d13678"
        ]
    },
    {
        "instruction": "",
        "id": "q13679",
        "input": "python scipy standard deviation",
        "output": "",
        "rule": [
            "d13679"
        ]
    },
    {
        "instruction": "",
        "id": "q13680",
        "input": "how to raise a python",
        "output": "",
        "rule": [
            "d13680"
        ]
    },
    {
        "instruction": "",
        "id": "q13681",
        "input": "python script arguents in vs",
        "output": "",
        "rule": [
            "d13681"
        ]
    },
    {
        "instruction": "",
        "id": "q13682",
        "input": "python script mode bug interactive mode work",
        "output": "",
        "rule": [
            "d13682"
        ]
    },
    {
        "instruction": "",
        "id": "q13683",
        "input": "how to randomly generate elements in python",
        "output": "",
        "rule": [
            "d13683"
        ]
    },
    {
        "instruction": "",
        "id": "q13684",
        "input": "python script to compile c++ program",
        "output": "",
        "rule": [
            "d13684"
        ]
    },
    {
        "instruction": "",
        "id": "q13685",
        "input": "how to read a text file and return a dictionary in python",
        "output": "",
        "rule": [
            "d13685"
        ]
    },
    {
        "instruction": "",
        "id": "q13686",
        "input": "python script to replace c++ comment line",
        "output": "",
        "rule": [
            "d13686"
        ]
    },
    {
        "instruction": "",
        "id": "q13687",
        "input": "how to read a text file in as a dictionary python",
        "output": "",
        "rule": [
            "d13687"
        ]
    },
    {
        "instruction": "",
        "id": "q13688",
        "input": "python scripts incorporate credentials",
        "output": "",
        "rule": [
            "d13688"
        ]
    },
    {
        "instruction": "",
        "id": "q13689",
        "input": "how to read a text file into a dictionary in python",
        "output": "",
        "rule": [
            "d13689"
        ]
    },
    {
        "instruction": "",
        "id": "q13690",
        "input": "python seconds elapsed to timespan",
        "output": "",
        "rule": [
            "d13690"
        ]
    },
    {
        "instruction": "",
        "id": "q13691",
        "input": "how to read compiled python",
        "output": "",
        "rule": [
            "d13691"
        ]
    },
    {
        "instruction": "",
        "id": "q13692",
        "input": "python select at least one column not null",
        "output": "",
        "rule": [
            "d13692"
        ]
    },
    {
        "instruction": "",
        "id": "q13693",
        "input": "python select cases that are not null",
        "output": "",
        "rule": [
            "d13693"
        ]
    },
    {
        "instruction": "",
        "id": "q13694",
        "input": "how to read s3 files in python with access keys",
        "output": "",
        "rule": [
            "d13694"
        ]
    },
    {
        "instruction": "",
        "id": "q13695",
        "input": "python select column not in",
        "output": "",
        "rule": [
            "d13695"
        ]
    },
    {
        "instruction": "",
        "id": "q13696",
        "input": "how to read the file from internet in python",
        "output": "",
        "rule": [
            "d13696"
        ]
    },
    {
        "instruction": "",
        "id": "q13697",
        "input": "python select last row in mysql",
        "output": "",
        "rule": [
            "d13697"
        ]
    },
    {
        "instruction": "",
        "id": "q13698",
        "input": "how to read what the active window is currently with python",
        "output": "",
        "rule": [
            "d13698"
        ]
    },
    {
        "instruction": "",
        "id": "q13699",
        "input": "python select random date between two dates",
        "output": "",
        "rule": [
            "d13699"
        ]
    },
    {
        "instruction": "",
        "id": "q13700",
        "input": "how to read yaml file in python",
        "output": "",
        "rule": [
            "d13700"
        ]
    },
    {
        "instruction": "",
        "id": "q13701",
        "input": "python select random items from sample",
        "output": "",
        "rule": [
            "d13701"
        ]
    },
    {
        "instruction": "",
        "id": "q13702",
        "input": "how to record each itteration of an event in python",
        "output": "",
        "rule": [
            "d13702"
        ]
    },
    {
        "instruction": "",
        "id": "q13703",
        "input": "python select rows isin not",
        "output": "",
        "rule": [
            "d13703"
        ]
    },
    {
        "instruction": "",
        "id": "q13704",
        "input": "how to redirect stdout to a file in python",
        "output": "",
        "rule": [
            "d13704"
        ]
    },
    {
        "instruction": "",
        "id": "q13705",
        "input": "python send a signal to a process",
        "output": "",
        "rule": [
            "d13705"
        ]
    },
    {
        "instruction": "",
        "id": "q13706",
        "input": "how to reduce file size with pdfpages in python",
        "output": "",
        "rule": [
            "d13706"
        ]
    },
    {
        "instruction": "",
        "id": "q13707",
        "input": "python send data to statsd",
        "output": "",
        "rule": [
            "d13707"
        ]
    },
    {
        "instruction": "",
        "id": "q13708",
        "input": "how to refer to specific types in python",
        "output": "",
        "rule": [
            "d13708"
        ]
    },
    {
        "instruction": "",
        "id": "q13709",
        "input": "python send input to subprocess",
        "output": "",
        "rule": [
            "d13709"
        ]
    },
    {
        "instruction": "",
        "id": "q13710",
        "input": "how to remove all html tags from text in [python",
        "output": "",
        "rule": [
            "d13710"
        ]
    },
    {
        "instruction": "",
        "id": "q13711",
        "input": "python send post request without response",
        "output": "",
        "rule": [
            "d13711"
        ]
    },
    {
        "instruction": "",
        "id": "q13712",
        "input": "how to remove all repetition in list python",
        "output": "",
        "rule": [
            "d13712"
        ]
    },
    {
        "instruction": "",
        "id": "q13713",
        "input": "python serialize aws event data",
        "output": "",
        "rule": [
            "d13713"
        ]
    },
    {
        "instruction": "",
        "id": "q13714",
        "input": "how to remove all zeros from a list python",
        "output": "",
        "rule": [
            "d13714"
        ]
    },
    {
        "instruction": "",
        "id": "q13715",
        "input": "python service stop event",
        "output": "",
        "rule": [
            "d13715"
        ]
    },
    {
        "instruction": "",
        "id": "q13716",
        "input": "how to remove an object from list python",
        "output": "",
        "rule": [
            "d13716"
        ]
    },
    {
        "instruction": "",
        "id": "q13717",
        "input": "python set flask session variable",
        "output": "",
        "rule": [
            "d13717"
        ]
    },
    {
        "instruction": "",
        "id": "q13718",
        "input": "python set json value as variable",
        "output": "",
        "rule": [
            "d13718"
        ]
    },
    {
        "instruction": "",
        "id": "q13719",
        "input": "how to remove nan from columns in python",
        "output": "",
        "rule": [
            "d13719"
        ]
    },
    {
        "instruction": "",
        "id": "q13720",
        "input": "python set tab spacing",
        "output": "",
        "rule": [
            "d13720"
        ]
    },
    {
        "instruction": "",
        "id": "q13721",
        "input": "how to remove words and create acronyms using python",
        "output": "",
        "rule": [
            "d13721"
        ]
    },
    {
        "instruction": "",
        "id": "q13722",
        "input": "python set to rangeindex",
        "output": "",
        "rule": [
            "d13722"
        ]
    },
    {
        "instruction": "",
        "id": "q13723",
        "input": "how to replace a line in a file using python matching string",
        "output": "",
        "rule": [
            "d13723"
        ]
    },
    {
        "instruction": "",
        "id": "q13724",
        "input": "python set top most window",
        "output": "",
        "rule": [
            "d13724"
        ]
    },
    {
        "instruction": "",
        "id": "q13725",
        "input": "how to replace a specific word in python file handling",
        "output": "",
        "rule": [
            "d13725"
        ]
    },
    {
        "instruction": "",
        "id": "q13726",
        "input": "python set year for datetime object",
        "output": "",
        "rule": [
            "d13726"
        ]
    },
    {
        "instruction": "",
        "id": "q13727",
        "input": "how to replace database call of a function in python mock",
        "output": "",
        "rule": [
            "d13727"
        ]
    },
    {
        "instruction": "",
        "id": "q13728",
        "input": "how to replace string python",
        "output": "",
        "rule": [
            "d13728"
        ]
    },
    {
        "instruction": "",
        "id": "q13729",
        "input": "python setting a max and min value",
        "output": "",
        "rule": [
            "d13729"
        ]
    },
    {
        "instruction": "",
        "id": "q13730",
        "input": "how to replace values with na in python",
        "output": "",
        "rule": [
            "d13730"
        ]
    },
    {
        "instruction": "",
        "id": "q13731",
        "input": "python setting array elemnt as a sequence tensorflow",
        "output": "",
        "rule": [
            "d13731"
        ]
    },
    {
        "instruction": "",
        "id": "q13732",
        "input": "how to rerun a program due to user imput python",
        "output": "",
        "rule": [
            "d13732"
        ]
    },
    {
        "instruction": "",
        "id": "q13733",
        "input": "python setuptools single core",
        "output": "",
        "rule": [
            "d13733"
        ]
    },
    {
        "instruction": "",
        "id": "q13734",
        "input": "how to rescale 0 to 255 to gray scale image in python",
        "output": "",
        "rule": [
            "d13734"
        ]
    },
    {
        "instruction": "",
        "id": "q13735",
        "input": "python shapely line string",
        "output": "",
        "rule": [
            "d13735"
        ]
    },
    {
        "instruction": "",
        "id": "q13736",
        "input": "how to reset an iterator python",
        "output": "",
        "rule": [
            "d13736"
        ]
    },
    {
        "instruction": "",
        "id": "q13737",
        "input": "python should you flush before closing a file",
        "output": "",
        "rule": [
            "d13737"
        ]
    },
    {
        "instruction": "",
        "id": "q13738",
        "input": "how to reset iteratable python",
        "output": "",
        "rule": [
            "d13738"
        ]
    },
    {
        "instruction": "",
        "id": "q13739",
        "input": "python show all the uniques",
        "output": "",
        "rule": [
            "d13739"
        ]
    },
    {
        "instruction": "",
        "id": "q13740",
        "input": "how to reset python setting to default",
        "output": "",
        "rule": [
            "d13740"
        ]
    },
    {
        "instruction": "",
        "id": "q13741",
        "input": "python show message from subprocess",
        "output": "",
        "rule": [
            "d13741"
        ]
    },
    {
        "instruction": "",
        "id": "q13742",
        "input": "how to resize to 300 dpi in pixels python",
        "output": "",
        "rule": [
            "d13742"
        ]
    },
    {
        "instruction": "",
        "id": "q13743",
        "input": "python signal handling kill",
        "output": "",
        "rule": [
            "d13743"
        ]
    },
    {
        "instruction": "",
        "id": "q13744",
        "input": "how to resolve a variable inside a string in python",
        "output": "",
        "rule": [
            "d13744"
        ]
    },
    {
        "instruction": "",
        "id": "q13745",
        "input": "python signed int from bytes",
        "output": "",
        "rule": [
            "d13745"
        ]
    },
    {
        "instruction": "",
        "id": "q13746",
        "input": "how to restrict a multi dimensional array output to 3 significant figures in python numpy",
        "output": "",
        "rule": [
            "d13746"
        ]
    },
    {
        "instruction": "",
        "id": "q13747",
        "input": "python simplehttpserver 404 page",
        "output": "",
        "rule": [
            "d13747"
        ]
    },
    {
        "instruction": "",
        "id": "q13748",
        "input": "how to retrieve index file python",
        "output": "",
        "rule": [
            "d13748"
        ]
    },
    {
        "instruction": "",
        "id": "q13749",
        "input": "python simplest way to connect to server",
        "output": "",
        "rule": [
            "d13749"
        ]
    },
    {
        "instruction": "",
        "id": "q13750",
        "input": "how to return a key given value in python",
        "output": "",
        "rule": [
            "d13750"
        ]
    },
    {
        "instruction": "",
        "id": "q13751",
        "input": "python singleton instance none",
        "output": "",
        "rule": [
            "d13751"
        ]
    },
    {
        "instruction": "",
        "id": "q13752",
        "input": "how to return a rectangle in python",
        "output": "",
        "rule": [
            "d13752"
        ]
    },
    {
        "instruction": "",
        "id": "q13753",
        "input": "python singleton several instances",
        "output": "",
        "rule": [
            "d13753"
        ]
    },
    {
        "instruction": "",
        "id": "q13754",
        "input": "how to return an index from a list location python",
        "output": "",
        "rule": [
            "d13754"
        ]
    },
    {
        "instruction": "",
        "id": "q13755",
        "input": "python skip next loop",
        "output": "",
        "rule": [
            "d13755"
        ]
    },
    {
        "instruction": "",
        "id": "q13756",
        "input": "how to return array inpython",
        "output": "",
        "rule": [
            "d13756"
        ]
    },
    {
        "instruction": "",
        "id": "q13757",
        "input": "python skip to beginning of next line in file",
        "output": "",
        "rule": [
            "d13757"
        ]
    },
    {
        "instruction": "",
        "id": "q13758",
        "input": "how to return capitalized letter in python",
        "output": "",
        "rule": [
            "d13758"
        ]
    },
    {
        "instruction": "",
        "id": "q13759",
        "input": "python sklearn calculate the euclidean distance between the two points of each pair",
        "output": "",
        "rule": [
            "d13759"
        ]
    },
    {
        "instruction": "",
        "id": "q13760",
        "input": "how to rotate a star in python",
        "output": "",
        "rule": [
            "d13760"
        ]
    },
    {
        "instruction": "",
        "id": "q13761",
        "input": "python sklearn kmeans transform cluster centers",
        "output": "",
        "rule": [
            "d13761"
        ]
    },
    {
        "instruction": "",
        "id": "q13762",
        "input": "how to round sig figs python",
        "output": "",
        "rule": [
            "d13762"
        ]
    },
    {
        "instruction": "",
        "id": "q13763",
        "input": "python slice numpy inverse",
        "output": "",
        "rule": [
            "d13763"
        ]
    },
    {
        "instruction": "",
        "id": "q13764",
        "input": "how to run a code line by line in python",
        "output": "",
        "rule": [
            "d13764"
        ]
    },
    {
        "instruction": "",
        "id": "q13765",
        "input": "python slice to visit list",
        "output": "",
        "rule": [
            "d13765"
        ]
    },
    {
        "instruction": "",
        "id": "q13766",
        "input": "how to run a local webserver useing python",
        "output": "",
        "rule": [
            "d13766"
        ]
    },
    {
        "instruction": "",
        "id": "q13767",
        "input": "python slug foreign view",
        "output": "",
        "rule": [
            "d13767"
        ]
    },
    {
        "instruction": "",
        "id": "q13768",
        "input": "how to run code line by line in python",
        "output": "",
        "rule": [
            "d13768"
        ]
    },
    {
        "instruction": "",
        "id": "q13769",
        "input": "python socket send without delay",
        "output": "",
        "rule": [
            "d13769"
        ]
    },
    {
        "instruction": "",
        "id": "q13770",
        "input": "how to run doctest python on cmd",
        "output": "",
        "rule": [
            "d13770"
        ]
    },
    {
        "instruction": "",
        "id": "q13771",
        "input": "python socket ssl set not verify",
        "output": "",
        "rule": [
            "d13771"
        ]
    },
    {
        "instruction": "",
        "id": "q13772",
        "input": "how to save a variable into a file in python",
        "output": "",
        "rule": [
            "d13772"
        ]
    },
    {
        "instruction": "",
        "id": "q13773",
        "input": "python sort a 2d array by first index",
        "output": "",
        "rule": [
            "d13773"
        ]
    },
    {
        "instruction": "",
        "id": "q13774",
        "input": "how to save an excel document from python",
        "output": "",
        "rule": [
            "d13774"
        ]
    },
    {
        "instruction": "",
        "id": "q13775",
        "input": "python sort by datekey column",
        "output": "",
        "rule": [
            "d13775"
        ]
    },
    {
        "instruction": "",
        "id": "q13776",
        "input": "how to save dictionary of object to file python",
        "output": "",
        "rule": [
            "d13776"
        ]
    },
    {
        "instruction": "",
        "id": "q13777",
        "input": "python sort list of dictionaryies duplicate",
        "output": "",
        "rule": [
            "d13777"
        ]
    },
    {
        "instruction": "",
        "id": "q13778",
        "input": "how to save query results to a file in python",
        "output": "",
        "rule": [
            "d13778"
        ]
    },
    {
        "instruction": "",
        "id": "q13779",
        "input": "python sort the same values",
        "output": "",
        "rule": [
            "d13779"
        ]
    },
    {
        "instruction": "",
        "id": "q13780",
        "input": "how to see all the fields of an object python",
        "output": "",
        "rule": [
            "d13780"
        ]
    },
    {
        "instruction": "",
        "id": "q13781",
        "input": "python sort x,y pair",
        "output": "",
        "rule": [
            "d13781"
        ]
    },
    {
        "instruction": "",
        "id": "q13782",
        "input": "how to see all the strings in a list that are unique in python",
        "output": "",
        "rule": [
            "d13782"
        ]
    },
    {
        "instruction": "",
        "id": "q13783",
        "input": "python sparse matrix derminate",
        "output": "",
        "rule": [
            "d13783"
        ]
    },
    {
        "instruction": "",
        "id": "q13784",
        "input": "how to see contents of filter object python",
        "output": "",
        "rule": [
            "d13784"
        ]
    },
    {
        "instruction": "",
        "id": "q13785",
        "input": "how to see if all items in a list are the same python",
        "output": "",
        "rule": [
            "d13785"
        ]
    },
    {
        "instruction": "",
        "id": "q13786",
        "input": "python split array into n parts",
        "output": "",
        "rule": [
            "d13786"
        ]
    },
    {
        "instruction": "",
        "id": "q13787",
        "input": "how to see whether a given folder exists or not, and if not exists create the folder in python",
        "output": "",
        "rule": [
            "d13787"
        ]
    },
    {
        "instruction": "",
        "id": "q13788",
        "input": "python split each string into a list",
        "output": "",
        "rule": [
            "d13788"
        ]
    },
    {
        "instruction": "",
        "id": "q13789",
        "input": "how to select subset of features from a dataset + python",
        "output": "",
        "rule": [
            "d13789"
        ]
    },
    {
        "instruction": "",
        "id": "q13790",
        "input": "python split each word in a list",
        "output": "",
        "rule": [
            "d13790"
        ]
    },
    {
        "instruction": "",
        "id": "q13791",
        "input": "how to send dns request message in python",
        "output": "",
        "rule": [
            "d13791"
        ]
    },
    {
        "instruction": "",
        "id": "q13792",
        "input": "python split regx token in parens",
        "output": "",
        "rule": [
            "d13792"
        ]
    },
    {
        "instruction": "",
        "id": "q13793",
        "input": "how to set a file pointer back to the beginning python",
        "output": "",
        "rule": [
            "d13793"
        ]
    },
    {
        "instruction": "",
        "id": "q13794",
        "input": "python split sentence into a list",
        "output": "",
        "rule": [
            "d13794"
        ]
    },
    {
        "instruction": "",
        "id": "q13795",
        "input": "how to set a webservice in python",
        "output": "",
        "rule": [
            "d13795"
        ]
    },
    {
        "instruction": "",
        "id": "q13796",
        "input": "how to set axis limits python",
        "output": "",
        "rule": [
            "d13796"
        ]
    },
    {
        "instruction": "",
        "id": "q13797",
        "input": "python split string to list empty separator",
        "output": "",
        "rule": [
            "d13797"
        ]
    },
    {
        "instruction": "",
        "id": "q13798",
        "input": "how to set cookies with same name in python",
        "output": "",
        "rule": [
            "d13798"
        ]
    },
    {
        "instruction": "",
        "id": "q13799",
        "input": "python sql bulk update",
        "output": "",
        "rule": [
            "d13799"
        ]
    },
    {
        "instruction": "",
        "id": "q13800",
        "input": "how to set the range for the x axis in python",
        "output": "",
        "rule": [
            "d13800"
        ]
    },
    {
        "instruction": "",
        "id": "q13801",
        "input": "python sql query to json",
        "output": "",
        "rule": [
            "d13801"
        ]
    },
    {
        "instruction": "",
        "id": "q13802",
        "input": "how to set width in python",
        "output": "",
        "rule": [
            "d13802"
        ]
    },
    {
        "instruction": "",
        "id": "q13803",
        "input": "python sql see if exists",
        "output": "",
        "rule": [
            "d13803"
        ]
    },
    {
        "instruction": "",
        "id": "q13804",
        "input": "how to set xlimits in python",
        "output": "",
        "rule": [
            "d13804"
        ]
    },
    {
        "instruction": "",
        "id": "q13805",
        "input": "python sql server pymssql connection to the database falled for an unknow reasion",
        "output": "",
        "rule": [
            "d13805"
        ]
    },
    {
        "instruction": "",
        "id": "q13806",
        "input": "how to show all libraries on python",
        "output": "",
        "rule": [
            "d13806"
        ]
    },
    {
        "instruction": "",
        "id": "q13807",
        "input": "python sqlalchemy batch size postgresql",
        "output": "",
        "rule": [
            "d13807"
        ]
    },
    {
        "instruction": "",
        "id": "q13808",
        "input": "how to show attribute of object in python",
        "output": "",
        "rule": [
            "d13808"
        ]
    },
    {
        "instruction": "",
        "id": "q13809",
        "input": "python sqlalchemy create tables",
        "output": "",
        "rule": [
            "d13809"
        ]
    },
    {
        "instruction": "",
        "id": "q13810",
        "input": "how to show csv output elegantly python",
        "output": "",
        "rule": [
            "d13810"
        ]
    },
    {
        "instruction": "",
        "id": "q13811",
        "input": "python sqlite get list of tables",
        "output": "",
        "rule": [
            "d13811"
        ]
    },
    {
        "instruction": "",
        "id": "q13812",
        "input": "how to show figures in python after plotting",
        "output": "",
        "rule": [
            "d13812"
        ]
    },
    {
        "instruction": "",
        "id": "q13813",
        "input": "how to show the toolbar in python",
        "output": "",
        "rule": [
            "d13813"
        ]
    },
    {
        "instruction": "",
        "id": "q13814",
        "input": "python sqlite3 query column names",
        "output": "",
        "rule": [
            "d13814"
        ]
    },
    {
        "instruction": "",
        "id": "q13815",
        "input": "how to sort a list of dates in python",
        "output": "",
        "rule": [
            "d13815"
        ]
    },
    {
        "instruction": "",
        "id": "q13816",
        "input": "python ssl context verify trusted certificate",
        "output": "",
        "rule": [
            "d13816"
        ]
    },
    {
        "instruction": "",
        "id": "q13817",
        "input": "how to sort a list of objects in python by a variable",
        "output": "",
        "rule": [
            "d13817"
        ]
    },
    {
        "instruction": "",
        "id": "q13818",
        "input": "python ssl wrapping urllib2 socket",
        "output": "",
        "rule": [
            "d13818"
        ]
    },
    {
        "instruction": "",
        "id": "q13819",
        "input": "how to sort date list in python",
        "output": "",
        "rule": [
            "d13819"
        ]
    },
    {
        "instruction": "",
        "id": "q13820",
        "input": "python static method call staticmethod",
        "output": "",
        "rule": [
            "d13820"
        ]
    },
    {
        "instruction": "",
        "id": "q13821",
        "input": "how to sort regardless of case python",
        "output": "",
        "rule": [
            "d13821"
        ]
    },
    {
        "instruction": "",
        "id": "q13822",
        "input": "python stdin nonblock readline",
        "output": "",
        "rule": [
            "d13822"
        ]
    },
    {
        "instruction": "",
        "id": "q13823",
        "input": "how to specify length of an array in python",
        "output": "",
        "rule": [
            "d13823"
        ]
    },
    {
        "instruction": "",
        "id": "q13824",
        "input": "python stdin read without echo",
        "output": "",
        "rule": [
            "d13824"
        ]
    },
    {
        "instruction": "",
        "id": "q13825",
        "input": "how to split a location python geolocator",
        "output": "",
        "rule": [
            "d13825"
        ]
    },
    {
        "instruction": "",
        "id": "q13826",
        "input": "python stdin to self",
        "output": "",
        "rule": [
            "d13826"
        ]
    },
    {
        "instruction": "",
        "id": "q13827",
        "input": "how to sstrip \\r\\n from list in python 3",
        "output": "",
        "rule": [
            "d13827"
        ]
    },
    {
        "instruction": "",
        "id": "q13828",
        "input": "python stdout new line",
        "output": "",
        "rule": [
            "d13828"
        ]
    },
    {
        "instruction": "",
        "id": "q13829",
        "input": "how to static variabl in python",
        "output": "",
        "rule": [
            "d13829"
        ]
    },
    {
        "instruction": "",
        "id": "q13830",
        "input": "python store array as a list",
        "output": "",
        "rule": [
            "d13830"
        ]
    },
    {
        "instruction": "",
        "id": "q13831",
        "input": "how to stop a runaway thread in python",
        "output": "",
        "rule": [
            "d13831"
        ]
    },
    {
        "instruction": "",
        "id": "q13832",
        "input": "python store function in variable",
        "output": "",
        "rule": [
            "d13832"
        ]
    },
    {
        "instruction": "",
        "id": "q13833",
        "input": "how to stop pdb python",
        "output": "",
        "rule": [
            "d13833"
        ]
    },
    {
        "instruction": "",
        "id": "q13834",
        "input": "python str to c++ char array",
        "output": "",
        "rule": [
            "d13834"
        ]
    },
    {
        "instruction": "",
        "id": "q13835",
        "input": "how to store python error log",
        "output": "",
        "rule": [
            "d13835"
        ]
    },
    {
        "instruction": "",
        "id": "q13836",
        "input": "python stream gzip file",
        "output": "",
        "rule": [
            "d13836"
        ]
    },
    {
        "instruction": "",
        "id": "q13837",
        "input": "how to strip alist of comma and bracket python",
        "output": "",
        "rule": [
            "d13837"
        ]
    },
    {
        "instruction": "",
        "id": "q13838",
        "input": "how to take certain range of elements in list python",
        "output": "",
        "rule": [
            "d13838"
        ]
    },
    {
        "instruction": "",
        "id": "q13839",
        "input": "python string function to add suffix",
        "output": "",
        "rule": [
            "d13839"
        ]
    },
    {
        "instruction": "",
        "id": "q13840",
        "input": "python string percent s %s",
        "output": "",
        "rule": [
            "d13840"
        ]
    },
    {
        "instruction": "",
        "id": "q13841",
        "input": "how to take transpose of a matrix in python",
        "output": "",
        "rule": [
            "d13841"
        ]
    },
    {
        "instruction": "",
        "id": "q13842",
        "input": "python string replace based on position",
        "output": "",
        "rule": [
            "d13842"
        ]
    },
    {
        "instruction": "",
        "id": "q13843",
        "input": "how to tell if a user is running as root python",
        "output": "",
        "rule": [
            "d13843"
        ]
    },
    {
        "instruction": "",
        "id": "q13844",
        "input": "python string slice special position",
        "output": "",
        "rule": [
            "d13844"
        ]
    },
    {
        "instruction": "",
        "id": "q13845",
        "input": "how to test a prediction model accuracy python",
        "output": "",
        "rule": [
            "d13845"
        ]
    },
    {
        "instruction": "",
        "id": "q13846",
        "input": "python string to list comma delimited",
        "output": "",
        "rule": [
            "d13846"
        ]
    },
    {
        "instruction": "",
        "id": "q13847",
        "input": "how to test for equality using python",
        "output": "",
        "rule": [
            "d13847"
        ]
    },
    {
        "instruction": "",
        "id": "q13848",
        "input": "python string to list exclude empty",
        "output": "",
        "rule": [
            "d13848"
        ]
    },
    {
        "instruction": "",
        "id": "q13849",
        "input": "how to test if a symbol is an int python",
        "output": "",
        "rule": [
            "d13849"
        ]
    },
    {
        "instruction": "",
        "id": "q13850",
        "input": "python strip , midline",
        "output": "",
        "rule": [
            "d13850"
        ]
    },
    {
        "instruction": "",
        "id": "q13851",
        "input": "how to test the first digit of a float number in python",
        "output": "",
        "rule": [
            "d13851"
        ]
    },
    {
        "instruction": "",
        "id": "q13852",
        "input": "python subprocess call in background",
        "output": "",
        "rule": [
            "d13852"
        ]
    },
    {
        "instruction": "",
        "id": "q13853",
        "input": "how to transform letters to underscores in python",
        "output": "",
        "rule": [
            "d13853"
        ]
    },
    {
        "instruction": "",
        "id": "q13854",
        "input": "how to trim a string in python",
        "output": "",
        "rule": [
            "d13854"
        ]
    },
    {
        "instruction": "",
        "id": "q13855",
        "input": "python subprocess stdin flush",
        "output": "",
        "rule": [
            "d13855"
        ]
    },
    {
        "instruction": "",
        "id": "q13856",
        "input": "how to turn a byte array into bits python",
        "output": "",
        "rule": [
            "d13856"
        ]
    },
    {
        "instruction": "",
        "id": "q13857",
        "input": "python sum values from field",
        "output": "",
        "rule": [
            "d13857"
        ]
    },
    {
        "instruction": "",
        "id": "q13858",
        "input": "how to turn a string into a list by blank space python",
        "output": "",
        "rule": [
            "d13858"
        ]
    },
    {
        "instruction": "",
        "id": "q13859",
        "input": "python suma an array axis",
        "output": "",
        "rule": [
            "d13859"
        ]
    },
    {
        "instruction": "",
        "id": "q13860",
        "input": "how to turn series into 2d array python",
        "output": "",
        "rule": [
            "d13860"
        ]
    },
    {
        "instruction": "",
        "id": "q13861",
        "input": "python table highest number in columb",
        "output": "",
        "rule": [
            "d13861"
        ]
    },
    {
        "instruction": "",
        "id": "q13862",
        "input": "how to turn string into a list in python",
        "output": "",
        "rule": [
            "d13862"
        ]
    },
    {
        "instruction": "",
        "id": "q13863",
        "input": "python tabulate without wrapping",
        "output": "",
        "rule": [
            "d13863"
        ]
    },
    {
        "instruction": "",
        "id": "q13864",
        "input": "how to typecast a list of strings python",
        "output": "",
        "rule": [
            "d13864"
        ]
    },
    {
        "instruction": "",
        "id": "q13865",
        "input": "how to un pickle a file python",
        "output": "",
        "rule": [
            "d13865"
        ]
    },
    {
        "instruction": "",
        "id": "q13866",
        "input": "python tensorflow custom convolution pooling",
        "output": "",
        "rule": [
            "d13866"
        ]
    },
    {
        "instruction": "",
        "id": "q13867",
        "input": "how to uniquely identify shape in an image using python",
        "output": "",
        "rule": [
            "d13867"
        ]
    },
    {
        "instruction": "",
        "id": "q13868",
        "input": "python tensorflow multithread validate",
        "output": "",
        "rule": [
            "d13868"
        ]
    },
    {
        "instruction": "",
        "id": "q13869",
        "input": "how to unpack python array",
        "output": "",
        "rule": [
            "d13869"
        ]
    },
    {
        "instruction": "",
        "id": "q13870",
        "input": "python tesing mock requests",
        "output": "",
        "rule": [
            "d13870"
        ]
    },
    {
        "instruction": "",
        "id": "q13871",
        "input": "how to unpickle a file python",
        "output": "",
        "rule": [
            "d13871"
        ]
    },
    {
        "instruction": "",
        "id": "q13872",
        "input": "python test a datetime object",
        "output": "",
        "rule": [
            "d13872"
        ]
    },
    {
        "instruction": "",
        "id": "q13873",
        "input": "how to use a dialog box to save a file in python",
        "output": "",
        "rule": [
            "d13873"
        ]
    },
    {
        "instruction": "",
        "id": "q13874",
        "input": "python test cases to run in jenkins",
        "output": "",
        "rule": [
            "d13874"
        ]
    },
    {
        "instruction": "",
        "id": "q13875",
        "input": "python test if a file is executable",
        "output": "",
        "rule": [
            "d13875"
        ]
    },
    {
        "instruction": "",
        "id": "q13876",
        "input": "how to use help in cmd to get docstring in python",
        "output": "",
        "rule": [
            "d13876"
        ]
    },
    {
        "instruction": "",
        "id": "q13877",
        "input": "python test if column exists",
        "output": "",
        "rule": [
            "d13877"
        ]
    },
    {
        "instruction": "",
        "id": "q13878",
        "input": "how to use python to list the files in a folder",
        "output": "",
        "rule": [
            "d13878"
        ]
    },
    {
        "instruction": "",
        "id": "q13879",
        "input": "python test if power of 2",
        "output": "",
        "rule": [
            "d13879"
        ]
    },
    {
        "instruction": "",
        "id": "q13880",
        "input": "how to use python to load an image",
        "output": "",
        "rule": [
            "d13880"
        ]
    },
    {
        "instruction": "",
        "id": "q13881",
        "input": "python test if there's a connection",
        "output": "",
        "rule": [
            "d13881"
        ]
    },
    {
        "instruction": "",
        "id": "q13882",
        "input": "how to use replace to replace many thing in string python",
        "output": "",
        "rule": [
            "d13882"
        ]
    },
    {
        "instruction": "",
        "id": "q13883",
        "input": "how to use set default dictionary in python",
        "output": "",
        "rule": [
            "d13883"
        ]
    },
    {
        "instruction": "",
        "id": "q13884",
        "input": "python test if var is array",
        "output": "",
        "rule": [
            "d13884"
        ]
    },
    {
        "instruction": "",
        "id": "q13885",
        "input": "how to use the join function python",
        "output": "",
        "rule": [
            "d13885"
        ]
    },
    {
        "instruction": "",
        "id": "q13886",
        "input": "python text color and styling",
        "output": "",
        "rule": [
            "d13886"
        ]
    },
    {
        "instruction": "",
        "id": "q13887",
        "input": "how to use variables for seperate unit tests python",
        "output": "",
        "rule": [
            "d13887"
        ]
    },
    {
        "instruction": "",
        "id": "q13888",
        "input": "python text to lower",
        "output": "",
        "rule": [
            "d13888"
        ]
    },
    {
        "instruction": "",
        "id": "q13889",
        "input": "how to view an rsa key in memory python",
        "output": "",
        "rule": [
            "d13889"
        ]
    },
    {
        "instruction": "",
        "id": "q13890",
        "input": "python the last line in a file",
        "output": "",
        "rule": [
            "d13890"
        ]
    },
    {
        "instruction": "",
        "id": "q13891",
        "input": "how to view the traceback error in python",
        "output": "",
        "rule": [
            "d13891"
        ]
    },
    {
        "instruction": "",
        "id": "q13892",
        "input": "python thread join it self",
        "output": "",
        "rule": [
            "d13892"
        ]
    },
    {
        "instruction": "",
        "id": "q13893",
        "input": "how to warp one image into another python",
        "output": "",
        "rule": [
            "d13893"
        ]
    },
    {
        "instruction": "",
        "id": "q13894",
        "input": "python threading not running concurrent join",
        "output": "",
        "rule": [
            "d13894"
        ]
    },
    {
        "instruction": "",
        "id": "q13895",
        "input": "how to write a function in python that returns a list of prime numbers",
        "output": "",
        "rule": [
            "d13895"
        ]
    },
    {
        "instruction": "",
        "id": "q13896",
        "input": "python threadpool dummy join",
        "output": "",
        "rule": [
            "d13896"
        ]
    },
    {
        "instruction": "",
        "id": "q13897",
        "input": "how to write a function that counts letters of a string in python",
        "output": "",
        "rule": [
            "d13897"
        ]
    },
    {
        "instruction": "",
        "id": "q13898",
        "input": "python time struct from timestamp",
        "output": "",
        "rule": [
            "d13898"
        ]
    },
    {
        "instruction": "",
        "id": "q13899",
        "input": "how to write a print without a space in python",
        "output": "",
        "rule": [
            "d13899"
        ]
    },
    {
        "instruction": "",
        "id": "q13900",
        "input": "python time to minutes",
        "output": "",
        "rule": [
            "d13900"
        ]
    },
    {
        "instruction": "",
        "id": "q13901",
        "input": "how to write code to calculate percentage in python",
        "output": "",
        "rule": [
            "d13901"
        ]
    },
    {
        "instruction": "",
        "id": "q13902",
        "input": "python timedelta to readable",
        "output": "",
        "rule": [
            "d13902"
        ]
    },
    {
        "instruction": "",
        "id": "q13903",
        "input": "how to write code to rot13 in python",
        "output": "",
        "rule": [
            "d13903"
        ]
    },
    {
        "instruction": "",
        "id": "q13904",
        "input": "python timestamp column change format",
        "output": "",
        "rule": [
            "d13904"
        ]
    },
    {
        "instruction": "",
        "id": "q13905",
        "input": "how to write sql queries with variables python",
        "output": "",
        "rule": [
            "d13905"
        ]
    },
    {
        "instruction": "",
        "id": "q13906",
        "input": "python timestamp with timezone to epoc",
        "output": "",
        "rule": [
            "d13906"
        ]
    },
    {
        "instruction": "",
        "id": "q13907",
        "input": "how to zoom in on a plot imshow python",
        "output": "",
        "rule": [
            "d13907"
        ]
    },
    {
        "instruction": "",
        "id": "q13908",
        "input": "python timezone name to offset",
        "output": "",
        "rule": [
            "d13908"
        ]
    },
    {
        "instruction": "",
        "id": "q13909",
        "input": "howto open a specific key python winreg",
        "output": "",
        "rule": [
            "d13909"
        ]
    },
    {
        "instruction": "",
        "id": "q13910",
        "input": "python tk treeview with scrollbar",
        "output": "",
        "rule": [
            "d13910"
        ]
    },
    {
        "instruction": "",
        "id": "q13911",
        "input": "html 2 text python",
        "output": "",
        "rule": [
            "d13911"
        ]
    },
    {
        "instruction": "",
        "id": "q13912",
        "input": "python tkinter align widgets in a row vertically",
        "output": "",
        "rule": [
            "d13912"
        ]
    },
    {
        "instruction": "",
        "id": "q13913",
        "input": "http url json parsing ijn python",
        "output": "",
        "rule": [
            "d13913"
        ]
    },
    {
        "instruction": "",
        "id": "q13914",
        "input": "python tkinter askopenfilenames dialog won't close",
        "output": "",
        "rule": [
            "d13914"
        ]
    },
    {
        "instruction": "",
        "id": "q13915",
        "input": "i have default args defined, how do i tell python to use default args",
        "output": "",
        "rule": [
            "d13915"
        ]
    },
    {
        "instruction": "",
        "id": "q13916",
        "input": "python tkinter choose folder",
        "output": "",
        "rule": [
            "d13916"
        ]
    },
    {
        "instruction": "",
        "id": "q13917",
        "input": "imitate the left function in python",
        "output": "",
        "rule": [
            "d13917"
        ]
    },
    {
        "instruction": "",
        "id": "q13918",
        "input": "python tkinter hide a window",
        "output": "",
        "rule": [
            "d13918"
        ]
    },
    {
        "instruction": "",
        "id": "q13919",
        "input": "implement manhattan distance for 8puzzle python",
        "output": "",
        "rule": [
            "d13919"
        ]
    },
    {
        "instruction": "",
        "id": "q13920",
        "input": "python tkinter on close window",
        "output": "",
        "rule": [
            "d13920"
        ]
    },
    {
        "instruction": "",
        "id": "q13921",
        "input": "imshow scaling cv2 python",
        "output": "",
        "rule": [
            "d13921"
        ]
    },
    {
        "instruction": "",
        "id": "q13922",
        "input": "python tkinter treeview deleate an item",
        "output": "",
        "rule": [
            "d13922"
        ]
    },
    {
        "instruction": "",
        "id": "q13923",
        "input": "in or contains method in python",
        "output": "",
        "rule": [
            "d13923"
        ]
    },
    {
        "instruction": "",
        "id": "q13924",
        "input": "python to check if file arrives",
        "output": "",
        "rule": [
            "d13924"
        ]
    },
    {
        "instruction": "",
        "id": "q13925",
        "input": "in python how to use a mouse position for rectangle",
        "output": "",
        "rule": [
            "d13925"
        ]
    },
    {
        "instruction": "",
        "id": "q13926",
        "input": "python to connect to s3",
        "output": "",
        "rule": [
            "d13926"
        ]
    },
    {
        "instruction": "",
        "id": "q13927",
        "input": "in python static method should be decorated with",
        "output": "",
        "rule": [
            "d13927"
        ]
    },
    {
        "instruction": "",
        "id": "q13928",
        "input": "in python who is responsible to change raw input to string",
        "output": "",
        "rule": [
            "d13928"
        ]
    },
    {
        "instruction": "",
        "id": "q13929",
        "input": "python top 5 row",
        "output": "",
        "rule": [
            "d13929"
        ]
    },
    {
        "instruction": "",
        "id": "q13930",
        "input": "include latex in python docstrings",
        "output": "",
        "rule": [
            "d13930"
        ]
    },
    {
        "instruction": "",
        "id": "q13931",
        "input": "python tornado rest set mimetype",
        "output": "",
        "rule": [
            "d13931"
        ]
    },
    {
        "instruction": "",
        "id": "q13932",
        "input": "incoporating html jsscript with python project",
        "output": "",
        "rule": [
            "d13932"
        ]
    },
    {
        "instruction": "",
        "id": "q13933",
        "input": "python trace function call",
        "output": "",
        "rule": [
            "d13933"
        ]
    },
    {
        "instruction": "",
        "id": "q13934",
        "input": "python treat json file as objects",
        "output": "",
        "rule": [
            "d13934"
        ]
    },
    {
        "instruction": "",
        "id": "q13935",
        "input": "increase width of columns panda python",
        "output": "",
        "rule": [
            "d13935"
        ]
    },
    {
        "instruction": "",
        "id": "q13936",
        "input": "python tree structure using indent",
        "output": "",
        "rule": [
            "d13936"
        ]
    },
    {
        "instruction": "",
        "id": "q13937",
        "input": "index of the val in list python",
        "output": "",
        "rule": [
            "d13937"
        ]
    },
    {
        "instruction": "",
        "id": "q13938",
        "input": "python treeview bind double click",
        "output": "",
        "rule": [
            "d13938"
        ]
    },
    {
        "instruction": "",
        "id": "q13939",
        "input": "infix to prefix in stack coding in python",
        "output": "",
        "rule": [
            "d13939"
        ]
    },
    {
        "instruction": "",
        "id": "q13940",
        "input": "python trim left side of a string",
        "output": "",
        "rule": [
            "d13940"
        ]
    },
    {
        "instruction": "",
        "id": "q13941",
        "input": "initializing a list of a certain size in python",
        "output": "",
        "rule": [
            "d13941"
        ]
    },
    {
        "instruction": "",
        "id": "q13942",
        "input": "python trim non word characters",
        "output": "",
        "rule": [
            "d13942"
        ]
    },
    {
        "instruction": "",
        "id": "q13943",
        "input": "inputting a python array in ctypes buffer",
        "output": "",
        "rule": [
            "d13943"
        ]
    },
    {
        "instruction": "",
        "id": "q13944",
        "input": "python truncate to significant digits",
        "output": "",
        "rule": [
            "d13944"
        ]
    },
    {
        "instruction": "",
        "id": "q13945",
        "input": "invalid token python for an array",
        "output": "",
        "rule": [
            "d13945"
        ]
    },
    {
        "instruction": "",
        "id": "q13946",
        "input": "python tuple with lists of objects show string representation",
        "output": "",
        "rule": [
            "d13946"
        ]
    },
    {
        "instruction": "",
        "id": "q13947",
        "input": "invalidate old session after authantification python flask",
        "output": "",
        "rule": [
            "d13947"
        ]
    },
    {
        "instruction": "",
        "id": "q13948",
        "input": "python turn an array into comma seperated string",
        "output": "",
        "rule": [
            "d13948"
        ]
    },
    {
        "instruction": "",
        "id": "q13949",
        "input": "inverse matrix in python without numpy",
        "output": "",
        "rule": [
            "d13949"
        ]
    },
    {
        "instruction": "",
        "id": "q13950",
        "input": "python turn callback to future",
        "output": "",
        "rule": [
            "d13950"
        ]
    },
    {
        "instruction": "",
        "id": "q13951",
        "input": "inverse of 3x3 matrix python",
        "output": "",
        "rule": [
            "d13951"
        ]
    },
    {
        "instruction": "",
        "id": "q13952",
        "input": "python turn list of list into a numpy array",
        "output": "",
        "rule": [
            "d13952"
        ]
    },
    {
        "instruction": "",
        "id": "q13953",
        "input": "inverse of matrix in python numpy",
        "output": "",
        "rule": [
            "d13953"
        ]
    },
    {
        "instruction": "",
        "id": "q13954",
        "input": "python turn list of strings into list of floats",
        "output": "",
        "rule": [
            "d13954"
        ]
    },
    {
        "instruction": "",
        "id": "q13955",
        "input": "ip adress of current machine in python",
        "output": "",
        "rule": [
            "d13955"
        ]
    },
    {
        "instruction": "",
        "id": "q13956",
        "input": "python turn range to array",
        "output": "",
        "rule": [
            "d13956"
        ]
    },
    {
        "instruction": "",
        "id": "q13957",
        "input": "is python logging async",
        "output": "",
        "rule": [
            "d13957"
        ]
    },
    {
        "instruction": "",
        "id": "q13958",
        "input": "iterating through queryset python",
        "output": "",
        "rule": [
            "d13958"
        ]
    },
    {
        "instruction": "",
        "id": "q13959",
        "input": "python type true or false",
        "output": "",
        "rule": [
            "d13959"
        ]
    },
    {
        "instruction": "",
        "id": "q13960",
        "input": "itertools python grouby multiple keys",
        "output": "",
        "rule": [
            "d13960"
        ]
    },
    {
        "instruction": "",
        "id": "q13961",
        "input": "python types check if coroutine'",
        "output": "",
        "rule": [
            "d13961"
        ]
    },
    {
        "instruction": "",
        "id": "q13962",
        "input": "jaccard similarity between two data sets python",
        "output": "",
        "rule": [
            "d13962"
        ]
    },
    {
        "instruction": "",
        "id": "q13963",
        "input": "python tzlocal not defined",
        "output": "",
        "rule": [
            "d13963"
        ]
    },
    {
        "instruction": "",
        "id": "q13964",
        "input": "jaro winkler distance in python",
        "output": "",
        "rule": [
            "d13964"
        ]
    },
    {
        "instruction": "",
        "id": "q13965",
        "input": "python udating init variable",
        "output": "",
        "rule": [
            "d13965"
        ]
    },
    {
        "instruction": "",
        "id": "q13966",
        "input": "json dump dictionary minus key python",
        "output": "",
        "rule": [
            "d13966"
        ]
    },
    {
        "instruction": "",
        "id": "q13967",
        "input": "python uint8 to double image",
        "output": "",
        "rule": [
            "d13967"
        ]
    },
    {
        "instruction": "",
        "id": "q13968",
        "input": "json dynamic template python",
        "output": "",
        "rule": [
            "d13968"
        ]
    },
    {
        "instruction": "",
        "id": "q13969",
        "input": "python unexpectd character after line continuation character",
        "output": "",
        "rule": [
            "d13969"
        ]
    },
    {
        "instruction": "",
        "id": "q13970",
        "input": "json supported timstamp in python",
        "output": "",
        "rule": [
            "d13970"
        ]
    },
    {
        "instruction": "",
        "id": "q13971",
        "input": "python unique lists of boolean values",
        "output": "",
        "rule": [
            "d13971"
        ]
    },
    {
        "instruction": "",
        "id": "q13972",
        "input": "kafka consumer python loop",
        "output": "",
        "rule": [
            "d13972"
        ]
    },
    {
        "instruction": "",
        "id": "q13973",
        "input": "python unittest assert msg",
        "output": "",
        "rule": [
            "d13973"
        ]
    },
    {
        "instruction": "",
        "id": "q13974",
        "input": "kafka python producer specify parittion",
        "output": "",
        "rule": [
            "d13974"
        ]
    },
    {
        "instruction": "",
        "id": "q13975",
        "input": "python unittest assert with message",
        "output": "",
        "rule": [
            "d13975"
        ]
    },
    {
        "instruction": "",
        "id": "q13976",
        "input": "keep only rows in a column matching a value in python",
        "output": "",
        "rule": [
            "d13976"
        ]
    },
    {
        "instruction": "",
        "id": "q13977",
        "input": "python unittests assert type",
        "output": "",
        "rule": [
            "d13977"
        ]
    },
    {
        "instruction": "",
        "id": "q13978",
        "input": "keep track of position read file python",
        "output": "",
        "rule": [
            "d13978"
        ]
    },
    {
        "instruction": "",
        "id": "q13979",
        "input": "python unmashable dict fix all columns",
        "output": "",
        "rule": [
            "d13979"
        ]
    },
    {
        "instruction": "",
        "id": "q13980",
        "input": "kubectl api for python",
        "output": "",
        "rule": [
            "d13980"
        ]
    },
    {
        "instruction": "",
        "id": "q13981",
        "input": "python unpack kwargs into dict",
        "output": "",
        "rule": [
            "d13981"
        ]
    },
    {
        "instruction": "",
        "id": "q13982",
        "input": "latex auto line wrap python display",
        "output": "",
        "rule": [
            "d13982"
        ]
    },
    {
        "instruction": "",
        "id": "q13983",
        "input": "python unsupported operand types for instance",
        "output": "",
        "rule": [
            "d13983"
        ]
    },
    {
        "instruction": "",
        "id": "q13984",
        "input": "python unzip all zip files recursively",
        "output": "",
        "rule": [
            "d13984"
        ]
    },
    {
        "instruction": "",
        "id": "q13985",
        "input": "limit invalid attempts in python 3",
        "output": "",
        "rule": [
            "d13985"
        ]
    },
    {
        "instruction": "",
        "id": "q13986",
        "input": "python update dictionary recursively",
        "output": "",
        "rule": [
            "d13986"
        ]
    },
    {
        "instruction": "",
        "id": "q13987",
        "input": "linearly interpolate between two points in 3d python",
        "output": "",
        "rule": [
            "d13987"
        ]
    },
    {
        "instruction": "",
        "id": "q13988",
        "input": "python update qprogressbar value",
        "output": "",
        "rule": [
            "d13988"
        ]
    },
    {
        "instruction": "",
        "id": "q13989",
        "input": "linkedlist with tail in python",
        "output": "",
        "rule": [
            "d13989"
        ]
    },
    {
        "instruction": "",
        "id": "q13990",
        "input": "python urllib is there a way to bypass the username and password page",
        "output": "",
        "rule": [
            "d13990"
        ]
    },
    {
        "instruction": "",
        "id": "q13991",
        "input": "linux copy pid of python script to a file at time of init",
        "output": "",
        "rule": [
            "d13991"
        ]
    },
    {
        "instruction": "",
        "id": "q13992",
        "input": "python urllib2 receive json",
        "output": "",
        "rule": [
            "d13992"
        ]
    },
    {
        "instruction": "",
        "id": "q13993",
        "input": "list all services of windows in python",
        "output": "",
        "rule": [
            "d13993"
        ]
    },
    {
        "instruction": "",
        "id": "q13994",
        "input": "python use key as object",
        "output": "",
        "rule": [
            "d13994"
        ]
    },
    {
        "instruction": "",
        "id": "q13995",
        "input": "list comprehension if else python multi line",
        "output": "",
        "rule": [
            "d13995"
        ]
    },
    {
        "instruction": "",
        "id": "q13996",
        "input": "python use split not enough values to unpack",
        "output": "",
        "rule": [
            "d13996"
        ]
    },
    {
        "instruction": "",
        "id": "q13997",
        "input": "load a json file onto variable python",
        "output": "",
        "rule": [
            "d13997"
        ]
    },
    {
        "instruction": "",
        "id": "q13998",
        "input": "python using element in addition",
        "output": "",
        "rule": [
            "d13998"
        ]
    },
    {
        "instruction": "",
        "id": "q13999",
        "input": "loading text file into python using load function",
        "output": "",
        "rule": [
            "d13999"
        ]
    },
    {
        "instruction": "",
        "id": "q14000",
        "input": "python using requests to get html from page",
        "output": "",
        "rule": [
            "d14000"
        ]
    },
    {
        "instruction": "",
        "id": "q14001",
        "input": "log file not saving python logging",
        "output": "",
        "rule": [
            "d14001"
        ]
    },
    {
        "instruction": "",
        "id": "q14002",
        "input": "python uuid 50 string",
        "output": "",
        "rule": [
            "d14002"
        ]
    },
    {
        "instruction": "",
        "id": "q14003",
        "input": "lower case for dictionary in python",
        "output": "",
        "rule": [
            "d14003"
        ]
    },
    {
        "instruction": "",
        "id": "q14004",
        "input": "python uuid without cash",
        "output": "",
        "rule": [
            "d14004"
        ]
    },
    {
        "instruction": "",
        "id": "q14005",
        "input": "lowercase a variable in python",
        "output": "",
        "rule": [
            "d14005"
        ]
    },
    {
        "instruction": "",
        "id": "q14006",
        "input": "python validate email regular expression",
        "output": "",
        "rule": [
            "d14006"
        ]
    },
    {
        "instruction": "",
        "id": "q14007",
        "input": "make a range into an array python",
        "output": "",
        "rule": [
            "d14007"
        ]
    },
    {
        "instruction": "",
        "id": "q14008",
        "input": "python validate proper email address",
        "output": "",
        "rule": [
            "d14008"
        ]
    },
    {
        "instruction": "",
        "id": "q14009",
        "input": "make an iterable python",
        "output": "",
        "rule": [
            "d14009"
        ]
    },
    {
        "instruction": "",
        "id": "q14010",
        "input": "python validate string as date",
        "output": "",
        "rule": [
            "d14010"
        ]
    },
    {
        "instruction": "",
        "id": "q14011",
        "input": "make jinja2 fast python",
        "output": "",
        "rule": [
            "d14011"
        ]
    },
    {
        "instruction": "",
        "id": "q14012",
        "input": "make response python constructor",
        "output": "",
        "rule": [
            "d14012"
        ]
    },
    {
        "instruction": "",
        "id": "q14013",
        "input": "python venv not found",
        "output": "",
        "rule": [
            "d14013"
        ]
    },
    {
        "instruction": "",
        "id": "q14014",
        "input": "make the key of a dict a string python",
        "output": "",
        "rule": [
            "d14014"
        ]
    },
    {
        "instruction": "",
        "id": "q14015",
        "input": "python verify text field in alert window",
        "output": "",
        "rule": [
            "d14015"
        ]
    },
    {
        "instruction": "",
        "id": "q14016",
        "input": "making a probability distribution in python",
        "output": "",
        "rule": [
            "d14016"
        ]
    },
    {
        "instruction": "",
        "id": "q14017",
        "input": "python view table with headers",
        "output": "",
        "rule": [
            "d14017"
        ]
    },
    {
        "instruction": "",
        "id": "q14018",
        "input": "making clickable text in python",
        "output": "",
        "rule": [
            "d14018"
        ]
    },
    {
        "instruction": "",
        "id": "q14019",
        "input": "python webdriver checkbox checked",
        "output": "",
        "rule": [
            "d14019"
        ]
    },
    {
        "instruction": "",
        "id": "q14020",
        "input": "manipulate timestamp datatype python",
        "output": "",
        "rule": [
            "d14020"
        ]
    },
    {
        "instruction": "",
        "id": "q14021",
        "input": "python webkit check element",
        "output": "",
        "rule": [
            "d14021"
        ]
    },
    {
        "instruction": "",
        "id": "q14022",
        "input": "map python 'function' object is not iterable",
        "output": "",
        "rule": [
            "d14022"
        ]
    },
    {
        "instruction": "",
        "id": "q14023",
        "input": "python websocket logout after send a message",
        "output": "",
        "rule": [
            "d14023"
        ]
    },
    {
        "instruction": "",
        "id": "q14024",
        "input": "mapping a set with a dictionary in python",
        "output": "",
        "rule": [
            "d14024"
        ]
    },
    {
        "instruction": "",
        "id": "q14025",
        "input": "python windows increase file handle limit",
        "output": "",
        "rule": [
            "d14025"
        ]
    },
    {
        "instruction": "",
        "id": "q14026",
        "input": "masked array to numpy array python",
        "output": "",
        "rule": [
            "d14026"
        ]
    },
    {
        "instruction": "",
        "id": "q14027",
        "input": "python windows lock file",
        "output": "",
        "rule": [
            "d14027"
        ]
    },
    {
        "instruction": "",
        "id": "q14028",
        "input": "matlab equivalent of python arange",
        "output": "",
        "rule": [
            "d14028"
        ]
    },
    {
        "instruction": "",
        "id": "q14029",
        "input": "python windows session logout check",
        "output": "",
        "rule": [
            "d14029"
        ]
    },
    {
        "instruction": "",
        "id": "q14030",
        "input": "matrix in python to check accurecy",
        "output": "",
        "rule": [
            "d14030"
        ]
    },
    {
        "instruction": "",
        "id": "q14031",
        "input": "python write a dictionary to file",
        "output": "",
        "rule": [
            "d14031"
        ]
    },
    {
        "instruction": "",
        "id": "q14032",
        "input": "max function for a list of strings in python",
        "output": "",
        "rule": [
            "d14032"
        ]
    },
    {
        "instruction": "",
        "id": "q14033",
        "input": "python write colored text to file",
        "output": "",
        "rule": [
            "d14033"
        ]
    },
    {
        "instruction": "",
        "id": "q14034",
        "input": "maximum 2 dimentional array python",
        "output": "",
        "rule": [
            "d14034"
        ]
    },
    {
        "instruction": "",
        "id": "q14035",
        "input": "python write fits header to another",
        "output": "",
        "rule": [
            "d14035"
        ]
    },
    {
        "instruction": "",
        "id": "q14036",
        "input": "md5 for python 3",
        "output": "",
        "rule": [
            "d14036"
        ]
    },
    {
        "instruction": "",
        "id": "q14037",
        "input": "python write or don't write bytecodes",
        "output": "",
        "rule": [
            "d14037"
        ]
    },
    {
        "instruction": "",
        "id": "q14038",
        "input": "md5 of a file python",
        "output": "",
        "rule": [
            "d14038"
        ]
    },
    {
        "instruction": "",
        "id": "q14039",
        "input": "python wx set icon",
        "output": "",
        "rule": [
            "d14039"
        ]
    },
    {
        "instruction": "",
        "id": "q14040",
        "input": "measure start of task in python",
        "output": "",
        "rule": [
            "d14040"
        ]
    },
    {
        "instruction": "",
        "id": "q14041",
        "input": "python x and y coordiante",
        "output": "",
        "rule": [
            "d14041"
        ]
    },
    {
        "instruction": "",
        "id": "q14042",
        "input": "merge objects without overwrite python",
        "output": "",
        "rule": [
            "d14042"
        ]
    },
    {
        "instruction": "",
        "id": "q14043",
        "input": "python xpath elements exist",
        "output": "",
        "rule": [
            "d14043"
        ]
    },
    {
        "instruction": "",
        "id": "q14044",
        "input": "merging two similar dictionaries in python",
        "output": "",
        "rule": [
            "d14044"
        ]
    },
    {
        "instruction": "",
        "id": "q14045",
        "input": "python yaml writ to json like file",
        "output": "",
        "rule": [
            "d14045"
        ]
    },
    {
        "instruction": "",
        "id": "q14046",
        "input": "minimum value of array numpy python",
        "output": "",
        "rule": [
            "d14046"
        ]
    },
    {
        "instruction": "",
        "id": "q14047",
        "input": "python, detect file name",
        "output": "",
        "rule": [
            "d14047"
        ]
    },
    {
        "instruction": "",
        "id": "q14048",
        "input": "mongodb cursor to json object python3",
        "output": "",
        "rule": [
            "d14048"
        ]
    },
    {
        "instruction": "",
        "id": "q14049",
        "input": "python, dict to html",
        "output": "",
        "rule": [
            "d14049"
        ]
    },
    {
        "instruction": "",
        "id": "q14050",
        "input": "most common item in list python",
        "output": "",
        "rule": [
            "d14050"
        ]
    },
    {
        "instruction": "",
        "id": "q14051",
        "input": "python, get function stack",
        "output": "",
        "rule": [
            "d14051"
        ]
    },
    {
        "instruction": "",
        "id": "q14052",
        "input": "most common value in an array python",
        "output": "",
        "rule": [
            "d14052"
        ]
    },
    {
        "instruction": "",
        "id": "q14053",
        "input": "python, how to apply astype function",
        "output": "",
        "rule": [
            "d14053"
        ]
    },
    {
        "instruction": "",
        "id": "q14054",
        "input": "most optimized way to merge 2 dictionaries in python",
        "output": "",
        "rule": [
            "d14054"
        ]
    },
    {
        "instruction": "",
        "id": "q14055",
        "input": "python, model saved in session",
        "output": "",
        "rule": [
            "d14055"
        ]
    },
    {
        "instruction": "",
        "id": "q14056",
        "input": "python, pdb, step out of function, shortcut",
        "output": "",
        "rule": [
            "d14056"
        ]
    },
    {
        "instruction": "",
        "id": "q14057",
        "input": "move cursor down line python",
        "output": "",
        "rule": [
            "d14057"
        ]
    },
    {
        "instruction": "",
        "id": "q14058",
        "input": "python, turn a string into a dict",
        "output": "",
        "rule": [
            "d14058"
        ]
    },
    {
        "instruction": "",
        "id": "q14059",
        "input": "move cursor up and to beginning of line python",
        "output": "",
        "rule": [
            "d14059"
        ]
    },
    {
        "instruction": "",
        "id": "q14060",
        "input": "python2 url parse query to dict",
        "output": "",
        "rule": [
            "d14060"
        ]
    },
    {
        "instruction": "",
        "id": "q14061",
        "input": "mxnet ndarray to python list",
        "output": "",
        "rule": [
            "d14061"
        ]
    },
    {
        "instruction": "",
        "id": "q14062",
        "input": "python3 2 list to dictionary",
        "output": "",
        "rule": [
            "d14062"
        ]
    },
    {
        "instruction": "",
        "id": "q14063",
        "input": "name 'python' is not defined tensorflow",
        "output": "",
        "rule": [
            "d14063"
        ]
    },
    {
        "instruction": "",
        "id": "q14064",
        "input": "python3 array to dict",
        "output": "",
        "rule": [
            "d14064"
        ]
    },
    {
        "instruction": "",
        "id": "q14065",
        "input": "natural log of array in python",
        "output": "",
        "rule": [
            "d14065"
        ]
    },
    {
        "instruction": "",
        "id": "q14066",
        "input": "python3 datetime to integer timestamp",
        "output": "",
        "rule": [
            "d14066"
        ]
    },
    {
        "instruction": "",
        "id": "q14067",
        "input": "negative log likelihood python code tobit regression",
        "output": "",
        "rule": [
            "d14067"
        ]
    },
    {
        "instruction": "",
        "id": "q14068",
        "input": "python3 file md5 hash",
        "output": "",
        "rule": [
            "d14068"
        ]
    },
    {
        "instruction": "",
        "id": "q14069",
        "input": "new array object that looks at the same data in python",
        "output": "",
        "rule": [
            "d14069"
        ]
    },
    {
        "instruction": "",
        "id": "q14070",
        "input": "python3 get function locals",
        "output": "",
        "rule": [
            "d14070"
        ]
    },
    {
        "instruction": "",
        "id": "q14071",
        "input": "python3 get last modified time",
        "output": "",
        "rule": [
            "d14071"
        ]
    },
    {
        "instruction": "",
        "id": "q14072",
        "input": "norm of a numpy array python",
        "output": "",
        "rule": [
            "d14072"
        ]
    },
    {
        "instruction": "",
        "id": "q14073",
        "input": "python3 get object id",
        "output": "",
        "rule": [
            "d14073"
        ]
    },
    {
        "instruction": "",
        "id": "q14074",
        "input": "normalize path address python",
        "output": "",
        "rule": [
            "d14074"
        ]
    },
    {
        "instruction": "",
        "id": "q14075",
        "input": "python3 gtk how to detect gui does not response",
        "output": "",
        "rule": [
            "d14075"
        ]
    },
    {
        "instruction": "",
        "id": "q14076",
        "input": "normalize vector python numpy",
        "output": "",
        "rule": [
            "d14076"
        ]
    },
    {
        "instruction": "",
        "id": "q14077",
        "input": "python3 how to print out sqlite table names",
        "output": "",
        "rule": [
            "d14077"
        ]
    },
    {
        "instruction": "",
        "id": "q14078",
        "input": "np array from list python",
        "output": "",
        "rule": [
            "d14078"
        ]
    },
    {
        "instruction": "",
        "id": "q14079",
        "input": "python3 inspect get local variable",
        "output": "",
        "rule": [
            "d14079"
        ]
    },
    {
        "instruction": "",
        "id": "q14080",
        "input": "number of bins in histogram python",
        "output": "",
        "rule": [
            "d14080"
        ]
    },
    {
        "instruction": "",
        "id": "q14081",
        "input": "python3 isdir check directory or symbol link",
        "output": "",
        "rule": [
            "d14081"
        ]
    },
    {
        "instruction": "",
        "id": "q14082",
        "input": "python3 merge two ranges",
        "output": "",
        "rule": [
            "d14082"
        ]
    },
    {
        "instruction": "",
        "id": "q14083",
        "input": "numerically solve exponential equations in python",
        "output": "",
        "rule": [
            "d14083"
        ]
    },
    {
        "instruction": "",
        "id": "q14084",
        "input": "python3 move a byte object to string",
        "output": "",
        "rule": [
            "d14084"
        ]
    },
    {
        "instruction": "",
        "id": "q14085",
        "input": "numpy array to string python",
        "output": "",
        "rule": [
            "d14085"
        ]
    },
    {
        "instruction": "",
        "id": "q14086",
        "input": "python3 numpy generate onehot vector",
        "output": "",
        "rule": [
            "d14086"
        ]
    },
    {
        "instruction": "",
        "id": "q14087",
        "input": "object of type bytes is not json serializable python",
        "output": "",
        "rule": [
            "d14087"
        ]
    },
    {
        "instruction": "",
        "id": "q14088",
        "input": "python3 numpy load bytes object has no attribute read",
        "output": "",
        "rule": [
            "d14088"
        ]
    },
    {
        "instruction": "",
        "id": "q14089",
        "input": "odoo python return domain",
        "output": "",
        "rule": [
            "d14089"
        ]
    },
    {
        "instruction": "",
        "id": "q14090",
        "input": "python3 raise keyboard interrupt programatically",
        "output": "",
        "rule": [
            "d14090"
        ]
    },
    {
        "instruction": "",
        "id": "q14091",
        "input": "only take certain type into def python",
        "output": "",
        "rule": [
            "d14091"
        ]
    },
    {
        "instruction": "",
        "id": "q14092",
        "input": "python3 stdin check if pending char",
        "output": "",
        "rule": [
            "d14092"
        ]
    },
    {
        "instruction": "",
        "id": "q14093",
        "input": "onvert list into array in python",
        "output": "",
        "rule": [
            "d14093"
        ]
    },
    {
        "instruction": "",
        "id": "q14094",
        "input": "python3 tkinter filedialog askopenfilename",
        "output": "",
        "rule": [
            "d14094"
        ]
    },
    {
        "instruction": "",
        "id": "q14095",
        "input": "open a file in r and w mode in python",
        "output": "",
        "rule": [
            "d14095"
        ]
    },
    {
        "instruction": "",
        "id": "q14096",
        "input": "python3 total number of seconds in timedelta",
        "output": "",
        "rule": [
            "d14096"
        ]
    },
    {
        "instruction": "",
        "id": "q14097",
        "input": "opening an image in python",
        "output": "",
        "rule": [
            "d14097"
        ]
    },
    {
        "instruction": "",
        "id": "q14098",
        "input": "python3 traceback remove raise code",
        "output": "",
        "rule": [
            "d14098"
        ]
    },
    {
        "instruction": "",
        "id": "q14099",
        "input": "opening an pickle file python",
        "output": "",
        "rule": [
            "d14099"
        ]
    },
    {
        "instruction": "",
        "id": "q14100",
        "input": "pythonrequests check if file exists",
        "output": "",
        "rule": [
            "d14100"
        ]
    },
    {
        "instruction": "",
        "id": "q14101",
        "input": "ordering names in lexiographical order python",
        "output": "",
        "rule": [
            "d14101"
        ]
    },
    {
        "instruction": "",
        "id": "q14102",
        "input": "quckiest way to insert something into a sorted list python",
        "output": "",
        "rule": [
            "d14102"
        ]
    },
    {
        "instruction": "",
        "id": "q14103",
        "input": "outer join without the intersection python",
        "output": "",
        "rule": [
            "d14103"
        ]
    },
    {
        "instruction": "",
        "id": "q14104",
        "input": "query result to a list mysql python",
        "output": "",
        "rule": [
            "d14104"
        ]
    },
    {
        "instruction": "",
        "id": "q14105",
        "input": "output the query to a excel file python",
        "output": "",
        "rule": [
            "d14105"
        ]
    },
    {
        "instruction": "",
        "id": "q14106",
        "input": "question 2what python function is used to perform a dns lookup",
        "output": "",
        "rule": [
            "d14106"
        ]
    },
    {
        "instruction": "",
        "id": "q14107",
        "input": "padding or spacing kivy python",
        "output": "",
        "rule": [
            "d14107"
        ]
    },
    {
        "instruction": "",
        "id": "q14108",
        "input": "quick sort recursion python",
        "output": "",
        "rule": [
            "d14108"
        ]
    },
    {
        "instruction": "",
        "id": "q14109",
        "input": "pass a list to json function python",
        "output": "",
        "rule": [
            "d14109"
        ]
    },
    {
        "instruction": "",
        "id": "q14110",
        "input": "quickly read wave files python",
        "output": "",
        "rule": [
            "d14110"
        ]
    },
    {
        "instruction": "",
        "id": "q14111",
        "input": "pass a slice of list in python as variable",
        "output": "",
        "rule": [
            "d14111"
        ]
    },
    {
        "instruction": "",
        "id": "q14112",
        "input": "random normal distribution in python",
        "output": "",
        "rule": [
            "d14112"
        ]
    },
    {
        "instruction": "",
        "id": "q14113",
        "input": "pdfpages python size page",
        "output": "",
        "rule": [
            "d14113"
        ]
    },
    {
        "instruction": "",
        "id": "q14114",
        "input": "range exponential function python",
        "output": "",
        "rule": [
            "d14114"
        ]
    },
    {
        "instruction": "",
        "id": "q14115",
        "input": "php equivalent of python hashlib",
        "output": "",
        "rule": [
            "d14115"
        ]
    },
    {
        "instruction": "",
        "id": "q14116",
        "input": "read a data matrix in python",
        "output": "",
        "rule": [
            "d14116"
        ]
    },
    {
        "instruction": "",
        "id": "q14117",
        "input": "pickle file load python",
        "output": "",
        "rule": [
            "d14117"
        ]
    },
    {
        "instruction": "",
        "id": "q14118",
        "input": "read entire file as a single string in python",
        "output": "",
        "rule": [
            "d14118"
        ]
    },
    {
        "instruction": "",
        "id": "q14119",
        "input": "plot a sine wave of given freq and aplitude in python",
        "output": "",
        "rule": [
            "d14119"
        ]
    },
    {
        "instruction": "",
        "id": "q14120",
        "input": "read file property value in python",
        "output": "",
        "rule": [
            "d14120"
        ]
    },
    {
        "instruction": "",
        "id": "q14121",
        "input": "plot histogram showing percentages in python",
        "output": "",
        "rule": [
            "d14121"
        ]
    },
    {
        "instruction": "",
        "id": "q14122",
        "input": "read file python until character",
        "output": "",
        "rule": [
            "d14122"
        ]
    },
    {
        "instruction": "",
        "id": "q14123",
        "input": "plot the magnitude of the fft in python",
        "output": "",
        "rule": [
            "d14123"
        ]
    },
    {
        "instruction": "",
        "id": "q14124",
        "input": "read hid device by python",
        "output": "",
        "rule": [
            "d14124"
        ]
    },
    {
        "instruction": "",
        "id": "q14125",
        "input": "plotting the confusion matrix in python",
        "output": "",
        "rule": [
            "d14125"
        ]
    },
    {
        "instruction": "",
        "id": "q14126",
        "input": "read in a text file python tuples",
        "output": "",
        "rule": [
            "d14126"
        ]
    },
    {
        "instruction": "",
        "id": "q14127",
        "input": "pop from list in python",
        "output": "",
        "rule": [
            "d14127"
        ]
    },
    {
        "instruction": "",
        "id": "q14128",
        "input": "read key otherwise default value python",
        "output": "",
        "rule": [
            "d14128"
        ]
    },
    {
        "instruction": "",
        "id": "q14129",
        "input": "print all local variables python",
        "output": "",
        "rule": [
            "d14129"
        ]
    },
    {
        "instruction": "",
        "id": "q14130",
        "input": "read mnist dataset python",
        "output": "",
        "rule": [
            "d14130"
        ]
    },
    {
        "instruction": "",
        "id": "q14131",
        "input": "print appended list python",
        "output": "",
        "rule": [
            "d14131"
        ]
    },
    {
        "instruction": "",
        "id": "q14132",
        "input": "read python object from string",
        "output": "",
        "rule": [
            "d14132"
        ]
    },
    {
        "instruction": "",
        "id": "q14133",
        "input": "print key by value in dict python",
        "output": "",
        "rule": [
            "d14133"
        ]
    },
    {
        "instruction": "",
        "id": "q14134",
        "input": "read stereo wav in python",
        "output": "",
        "rule": [
            "d14134"
        ]
    },
    {
        "instruction": "",
        "id": "q14135",
        "input": "print matrix diagonally python",
        "output": "",
        "rule": [
            "d14135"
        ]
    },
    {
        "instruction": "",
        "id": "q14136",
        "input": "read structure mat files python",
        "output": "",
        "rule": [
            "d14136"
        ]
    },
    {
        "instruction": "",
        "id": "q14137",
        "input": "print the min sec and microseconds in python",
        "output": "",
        "rule": [
            "d14137"
        ]
    },
    {
        "instruction": "",
        "id": "q14138",
        "input": "read tuple from file python",
        "output": "",
        "rule": [
            "d14138"
        ]
    },
    {
        "instruction": "",
        "id": "q14139",
        "input": "printing a def in an if function python",
        "output": "",
        "rule": [
            "d14139"
        ]
    },
    {
        "instruction": "",
        "id": "q14140",
        "input": "reading multilayered json in python",
        "output": "",
        "rule": [
            "d14140"
        ]
    },
    {
        "instruction": "",
        "id": "q14141",
        "input": "printing out an python enum text",
        "output": "",
        "rule": [
            "d14141"
        ]
    },
    {
        "instruction": "",
        "id": "q14142",
        "input": "recursively traverse through a dictionary and change keys python",
        "output": "",
        "rule": [
            "d14142"
        ]
    },
    {
        "instruction": "",
        "id": "q14143",
        "input": "printing out table python html server",
        "output": "",
        "rule": [
            "d14143"
        ]
    },
    {
        "instruction": "",
        "id": "q14144",
        "input": "redirect to same page flask python",
        "output": "",
        "rule": [
            "d14144"
        ]
    },
    {
        "instruction": "",
        "id": "q14145",
        "input": "printing the tail of a data frame python",
        "output": "",
        "rule": [
            "d14145"
        ]
    },
    {
        "instruction": "",
        "id": "q14146",
        "input": "redis is key exists in set python",
        "output": "",
        "rule": [
            "d14146"
        ]
    },
    {
        "instruction": "",
        "id": "q14147",
        "input": "programaticly add attributes to python object",
        "output": "",
        "rule": [
            "d14147"
        ]
    },
    {
        "instruction": "",
        "id": "q14148",
        "input": "redis python list pop",
        "output": "",
        "rule": [
            "d14148"
        ]
    },
    {
        "instruction": "",
        "id": "q14149",
        "input": "property return list python",
        "output": "",
        "rule": [
            "d14149"
        ]
    },
    {
        "instruction": "",
        "id": "q14150",
        "input": "protobu to json python",
        "output": "",
        "rule": [
            "d14150"
        ]
    },
    {
        "instruction": "",
        "id": "q14151",
        "input": "reduce margin python top and bottom matplotlib page",
        "output": "",
        "rule": [
            "d14151"
        ]
    },
    {
        "instruction": "",
        "id": "q14152",
        "input": "reindex series so index is continuous python",
        "output": "",
        "rule": [
            "d14152"
        ]
    },
    {
        "instruction": "",
        "id": "q14153",
        "input": "publisher ros python callback function",
        "output": "",
        "rule": [
            "d14153"
        ]
    },
    {
        "instruction": "",
        "id": "q14154",
        "input": "remove a file from aws bucket python",
        "output": "",
        "rule": [
            "d14154"
        ]
    },
    {
        "instruction": "",
        "id": "q14155",
        "input": "push item to top of stack python",
        "output": "",
        "rule": [
            "d14155"
        ]
    },
    {
        "instruction": "",
        "id": "q14156",
        "input": "remove a file in python files",
        "output": "",
        "rule": [
            "d14156"
        ]
    },
    {
        "instruction": "",
        "id": "q14157",
        "input": "put sql datetime into python datetime",
        "output": "",
        "rule": [
            "d14157"
        ]
    },
    {
        "instruction": "",
        "id": "q14158",
        "input": "remove all items from python list conatining",
        "output": "",
        "rule": [
            "d14158"
        ]
    },
    {
        "instruction": "",
        "id": "q14159",
        "input": "pyautogui python locate on screen",
        "output": "",
        "rule": [
            "d14159"
        ]
    },
    {
        "instruction": "",
        "id": "q14160",
        "input": "remove all of one type of char ferom sting python",
        "output": "",
        "rule": [
            "d14160"
        ]
    },
    {
        "instruction": "",
        "id": "q14161",
        "input": "python * left or right side",
        "output": "",
        "rule": [
            "d14161"
        ]
    },
    {
        "instruction": "",
        "id": "q14162",
        "input": "remove duplicate element in python list",
        "output": "",
        "rule": [
            "d14162"
        ]
    },
    {
        "instruction": "",
        "id": "q14163",
        "input": "python +starmap multiprocessing iterable",
        "output": "",
        "rule": [
            "d14163"
        ]
    },
    {
        "instruction": "",
        "id": "q14164",
        "input": "remove element form python est",
        "output": "",
        "rule": [
            "d14164"
        ]
    },
    {
        "instruction": "",
        "id": "q14165",
        "input": "python 2d arrwys functions",
        "output": "",
        "rule": [
            "d14165"
        ]
    },
    {
        "instruction": "",
        "id": "q14166",
        "input": "python 2d fft to power spectrum",
        "output": "",
        "rule": [
            "d14166"
        ]
    },
    {
        "instruction": "",
        "id": "q14167",
        "input": "remove html from string python",
        "output": "",
        "rule": [
            "d14167"
        ]
    },
    {
        "instruction": "",
        "id": "q14168",
        "input": "python 3 & distinguishe pinyin and english",
        "output": "",
        "rule": [
            "d14168"
        ]
    },
    {
        "instruction": "",
        "id": "q14169",
        "input": "remove item from heap python",
        "output": "",
        "rule": [
            "d14169"
        ]
    },
    {
        "instruction": "",
        "id": "q14170",
        "input": "python 3 case insensitive str match",
        "output": "",
        "rule": [
            "d14170"
        ]
    },
    {
        "instruction": "",
        "id": "q14171",
        "input": "remove leading zero in python",
        "output": "",
        "rule": [
            "d14171"
        ]
    },
    {
        "instruction": "",
        "id": "q14172",
        "input": "python 3 cast type to string",
        "output": "",
        "rule": [
            "d14172"
        ]
    },
    {
        "instruction": "",
        "id": "q14173",
        "input": "remove na's from datafram python",
        "output": "",
        "rule": [
            "d14173"
        ]
    },
    {
        "instruction": "",
        "id": "q14174",
        "input": "python 3 check if object is defined",
        "output": "",
        "rule": [
            "d14174"
        ]
    },
    {
        "instruction": "",
        "id": "q14175",
        "input": "remove node from bst python",
        "output": "",
        "rule": [
            "d14175"
        ]
    },
    {
        "instruction": "",
        "id": "q14176",
        "input": "python 3 check modified time stamp",
        "output": "",
        "rule": [
            "d14176"
        ]
    },
    {
        "instruction": "",
        "id": "q14177",
        "input": "remove non letter words string python",
        "output": "",
        "rule": [
            "d14177"
        ]
    },
    {
        "instruction": "",
        "id": "q14178",
        "input": "python 3 dict get with defaultvalue",
        "output": "",
        "rule": [
            "d14178"
        ]
    },
    {
        "instruction": "",
        "id": "q14179",
        "input": "remove non word characters python",
        "output": "",
        "rule": [
            "d14179"
        ]
    },
    {
        "instruction": "",
        "id": "q14180",
        "input": "python 3 filter object is not subscriptable",
        "output": "",
        "rule": [
            "d14180"
        ]
    },
    {
        "instruction": "",
        "id": "q14181",
        "input": "remove spaces in between strings python",
        "output": "",
        "rule": [
            "d14181"
        ]
    },
    {
        "instruction": "",
        "id": "q14182",
        "input": "python 3 flask get a file from static folder",
        "output": "",
        "rule": [
            "d14182"
        ]
    },
    {
        "instruction": "",
        "id": "q14183",
        "input": "remove stopwords in french python",
        "output": "",
        "rule": [
            "d14183"
        ]
    },
    {
        "instruction": "",
        "id": "q14184",
        "input": "python 3 gzip cant concat str to bytes",
        "output": "",
        "rule": [
            "d14184"
        ]
    },
    {
        "instruction": "",
        "id": "q14185",
        "input": "remove trailing whitespace python xml",
        "output": "",
        "rule": [
            "d14185"
        ]
    },
    {
        "instruction": "",
        "id": "q14186",
        "input": "python 3 how to return the number of characters in a string",
        "output": "",
        "rule": [
            "d14186"
        ]
    },
    {
        "instruction": "",
        "id": "q14187",
        "input": "remove value by key from dict python",
        "output": "",
        "rule": [
            "d14187"
        ]
    },
    {
        "instruction": "",
        "id": "q14188",
        "input": "python 3 remove element from series",
        "output": "",
        "rule": [
            "d14188"
        ]
    },
    {
        "instruction": "",
        "id": "q14189",
        "input": "removing filestream handler python logging",
        "output": "",
        "rule": [
            "d14189"
        ]
    },
    {
        "instruction": "",
        "id": "q14190",
        "input": "python 3 retrieve file from url",
        "output": "",
        "rule": [
            "d14190"
        ]
    },
    {
        "instruction": "",
        "id": "q14191",
        "input": "removing quotation, comma, fullstop from the texts in python",
        "output": "",
        "rule": [
            "d14191"
        ]
    },
    {
        "instruction": "",
        "id": "q14192",
        "input": "python 3 set contains subset",
        "output": "",
        "rule": [
            "d14192"
        ]
    },
    {
        "instruction": "",
        "id": "q14193",
        "input": "removing space from strings python",
        "output": "",
        "rule": [
            "d14193"
        ]
    },
    {
        "instruction": "",
        "id": "q14194",
        "input": "python 3 string encoding to byte",
        "output": "",
        "rule": [
            "d14194"
        ]
    },
    {
        "instruction": "",
        "id": "q14195",
        "input": "removug characters from string python",
        "output": "",
        "rule": [
            "d14195"
        ]
    },
    {
        "instruction": "",
        "id": "q14196",
        "input": "python 3 tkinter adding icons to guis",
        "output": "",
        "rule": [
            "d14196"
        ]
    },
    {
        "instruction": "",
        "id": "q14197",
        "input": "rempove duplicates in list in python",
        "output": "",
        "rule": [
            "d14197"
        ]
    },
    {
        "instruction": "",
        "id": "q14198",
        "input": "python 3 tkinter scrollbar doesn't control anything",
        "output": "",
        "rule": [
            "d14198"
        ]
    },
    {
        "instruction": "",
        "id": "q14199",
        "input": "remvoing the brackets in a list python",
        "output": "",
        "rule": [
            "d14199"
        ]
    },
    {
        "instruction": "",
        "id": "q14200",
        "input": "python 3 utc time to local time",
        "output": "",
        "rule": [
            "d14200"
        ]
    },
    {
        "instruction": "",
        "id": "q14201",
        "input": "rename columns in index python",
        "output": "",
        "rule": [
            "d14201"
        ]
    },
    {
        "instruction": "",
        "id": "q14202",
        "input": "python ]using fileinput to replace a word with another",
        "output": "",
        "rule": [
            "d14202"
        ]
    },
    {
        "instruction": "",
        "id": "q14203",
        "input": "reorder dimensions of a matrix python",
        "output": "",
        "rule": [
            "d14203"
        ]
    },
    {
        "instruction": "",
        "id": "q14204",
        "input": "python abstract property write",
        "output": "",
        "rule": [
            "d14204"
        ]
    },
    {
        "instruction": "",
        "id": "q14205",
        "input": "replace dictionary python regex",
        "output": "",
        "rule": [
            "d14205"
        ]
    },
    {
        "instruction": "",
        "id": "q14206",
        "input": "python access specific column of matrix",
        "output": "",
        "rule": [
            "d14206"
        ]
    },
    {
        "instruction": "",
        "id": "q14207",
        "input": "replace first n occurrences python",
        "output": "",
        "rule": [
            "d14207"
        ]
    },
    {
        "instruction": "",
        "id": "q14208",
        "input": "python add arbitrary attributes to object",
        "output": "",
        "rule": [
            "d14208"
        ]
    },
    {
        "instruction": "",
        "id": "q14209",
        "input": "crop black out of image python",
        "output": "",
        "rule": [
            "d14209"
        ]
    },
    {
        "instruction": "",
        "id": "q14210",
        "input": "python add attribute to mock",
        "output": "",
        "rule": [
            "d14210"
        ]
    },
    {
        "instruction": "",
        "id": "q14211",
        "input": "python add query params to url",
        "output": "",
        "rule": [
            "d14211"
        ]
    },
    {
        "instruction": "",
        "id": "q14212",
        "input": "replace new line in python string",
        "output": "",
        "rule": [
            "d14212"
        ]
    },
    {
        "instruction": "",
        "id": "q14213",
        "input": "python add random noise on image",
        "output": "",
        "rule": [
            "d14213"
        ]
    },
    {
        "instruction": "",
        "id": "q14214",
        "input": "replacing new line from string in python",
        "output": "",
        "rule": [
            "d14214"
        ]
    },
    {
        "instruction": "",
        "id": "q14215",
        "input": "replacing values in a colmn in python",
        "output": "",
        "rule": [
            "d14215"
        ]
    },
    {
        "instruction": "",
        "id": "q14216",
        "input": "python add symbolic link in windows",
        "output": "",
        "rule": [
            "d14216"
        ]
    },
    {
        "instruction": "",
        "id": "q14217",
        "input": "representing an object as a string python",
        "output": "",
        "rule": [
            "d14217"
        ]
    },
    {
        "instruction": "",
        "id": "q14218",
        "input": "python add timezone aware",
        "output": "",
        "rule": [
            "d14218"
        ]
    },
    {
        "instruction": "",
        "id": "q14219",
        "input": "requesting root permissions python programming",
        "output": "",
        "rule": [
            "d14219"
        ]
    },
    {
        "instruction": "",
        "id": "q14220",
        "input": "python add utomatically docstrings",
        "output": "",
        "rule": [
            "d14220"
        ]
    },
    {
        "instruction": "",
        "id": "q14221",
        "input": "reset password using flask python",
        "output": "",
        "rule": [
            "d14221"
        ]
    },
    {
        "instruction": "",
        "id": "q14222",
        "input": "python algorihtym to determine if text is question",
        "output": "",
        "rule": [
            "d14222"
        ]
    },
    {
        "instruction": "",
        "id": "q14223",
        "input": "restructured text docstrings python multiple return",
        "output": "",
        "rule": [
            "d14223"
        ]
    },
    {
        "instruction": "",
        "id": "q14224",
        "input": "python all files unzip except the first",
        "output": "",
        "rule": [
            "d14224"
        ]
    },
    {
        "instruction": "",
        "id": "q14225",
        "input": "retaining precision in decimal types python",
        "output": "",
        "rule": [
            "d14225"
        ]
    },
    {
        "instruction": "",
        "id": "q14226",
        "input": "python angle betwen two points",
        "output": "",
        "rule": [
            "d14226"
        ]
    },
    {
        "instruction": "",
        "id": "q14227",
        "input": "return global variable in python",
        "output": "",
        "rule": [
            "d14227"
        ]
    },
    {
        "instruction": "",
        "id": "q14228",
        "input": "python any functionm pass comparator",
        "output": "",
        "rule": [
            "d14228"
        ]
    },
    {
        "instruction": "",
        "id": "q14229",
        "input": "return httpresponse python django",
        "output": "",
        "rule": [
            "d14229"
        ]
    },
    {
        "instruction": "",
        "id": "q14230",
        "input": "python api converto string to latitude longitude",
        "output": "",
        "rule": [
            "d14230"
        ]
    },
    {
        "instruction": "",
        "id": "q14231",
        "input": "return second most common item in list python",
        "output": "",
        "rule": [
            "d14231"
        ]
    },
    {
        "instruction": "",
        "id": "q14232",
        "input": "python append to iterable",
        "output": "",
        "rule": [
            "d14232"
        ]
    },
    {
        "instruction": "",
        "id": "q14233",
        "input": "returning a string as list python",
        "output": "",
        "rule": [
            "d14233"
        ]
    },
    {
        "instruction": "",
        "id": "q14234",
        "input": "python are two ndarrays equal",
        "output": "",
        "rule": [
            "d14234"
        ]
    },
    {
        "instruction": "",
        "id": "q14235",
        "input": "returning counter results in python",
        "output": "",
        "rule": [
            "d14235"
        ]
    },
    {
        "instruction": "",
        "id": "q14236",
        "input": "python argparse add subparser to subparser",
        "output": "",
        "rule": [
            "d14236"
        ]
    },
    {
        "instruction": "",
        "id": "q14237",
        "input": "reverse iterate python ordereddict",
        "output": "",
        "rule": [
            "d14237"
        ]
    },
    {
        "instruction": "",
        "id": "q14238",
        "input": "python argparse custom action",
        "output": "",
        "rule": [
            "d14238"
        ]
    },
    {
        "instruction": "",
        "id": "q14239",
        "input": "rip and tear mp3 file for python",
        "output": "",
        "rule": [
            "d14239"
        ]
    },
    {
        "instruction": "",
        "id": "q14240",
        "input": "python argparse customize action",
        "output": "",
        "rule": [
            "d14240"
        ]
    },
    {
        "instruction": "",
        "id": "q14241",
        "input": "root of the current python file",
        "output": "",
        "rule": [
            "d14241"
        ]
    },
    {
        "instruction": "",
        "id": "q14242",
        "input": "round down float to int python",
        "output": "",
        "rule": [
            "d14242"
        ]
    },
    {
        "instruction": "",
        "id": "q14243",
        "input": "python array to bigendian",
        "output": "",
        "rule": [
            "d14243"
        ]
    },
    {
        "instruction": "",
        "id": "q14244",
        "input": "python array wrap ctype array",
        "output": "",
        "rule": [
            "d14244"
        ]
    },
    {
        "instruction": "",
        "id": "q14245",
        "input": "round to precision python",
        "output": "",
        "rule": [
            "d14245"
        ]
    },
    {
        "instruction": "",
        "id": "q14246",
        "input": "python asking forgiveness, not permission",
        "output": "",
        "rule": [
            "d14246"
        ]
    },
    {
        "instruction": "",
        "id": "q14247",
        "input": "run functions parrale flask python jinja2",
        "output": "",
        "rule": [
            "d14247"
        ]
    },
    {
        "instruction": "",
        "id": "q14248",
        "input": "run postgres and python on same docker image",
        "output": "",
        "rule": [
            "d14248"
        ]
    },
    {
        "instruction": "",
        "id": "q14249",
        "input": "python asyncio how to stop the loop",
        "output": "",
        "rule": [
            "d14249"
        ]
    },
    {
        "instruction": "",
        "id": "q14250",
        "input": "python asyncio task multipe",
        "output": "",
        "rule": [
            "d14250"
        ]
    },
    {
        "instruction": "",
        "id": "q14251",
        "input": "python asyncore to asyncio",
        "output": "",
        "rule": [
            "d14251"
        ]
    },
    {
        "instruction": "",
        "id": "q14252",
        "input": "save figure to pdf python",
        "output": "",
        "rule": [
            "d14252"
        ]
    },
    {
        "instruction": "",
        "id": "q14253",
        "input": "python attribute for file date created",
        "output": "",
        "rule": [
            "d14253"
        ]
    },
    {
        "instruction": "",
        "id": "q14254",
        "input": "savehttp response to a file python",
        "output": "",
        "rule": [
            "d14254"
        ]
    },
    {
        "instruction": "",
        "id": "q14255",
        "input": "python average of 2 function",
        "output": "",
        "rule": [
            "d14255"
        ]
    },
    {
        "instruction": "",
        "id": "q14256",
        "input": "saving figure as pdf python",
        "output": "",
        "rule": [
            "d14256"
        ]
    },
    {
        "instruction": "",
        "id": "q14257",
        "input": "python best way to delete directory",
        "output": "",
        "rule": [
            "d14257"
        ]
    },
    {
        "instruction": "",
        "id": "q14258",
        "input": "scope of variables in same function in python",
        "output": "",
        "rule": [
            "d14258"
        ]
    },
    {
        "instruction": "",
        "id": "q14259",
        "input": "python boto3 create containor",
        "output": "",
        "rule": [
            "d14259"
        ]
    },
    {
        "instruction": "",
        "id": "q14260",
        "input": "see if a list is null in python",
        "output": "",
        "rule": [
            "d14260"
        ]
    },
    {
        "instruction": "",
        "id": "q14261",
        "input": "python box plot value",
        "output": "",
        "rule": [
            "d14261"
        ]
    },
    {
        "instruction": "",
        "id": "q14262",
        "input": "select all components in array python numpy",
        "output": "",
        "rule": [
            "d14262"
        ]
    },
    {
        "instruction": "",
        "id": "q14263",
        "input": "python boxplot min max q1 median to number summary",
        "output": "",
        "rule": [
            "d14263"
        ]
    },
    {
        "instruction": "",
        "id": "q14264",
        "input": "select rows isin python notin",
        "output": "",
        "rule": [
            "d14264"
        ]
    },
    {
        "instruction": "",
        "id": "q14265",
        "input": "python boxplot not working",
        "output": "",
        "rule": [
            "d14265"
        ]
    },
    {
        "instruction": "",
        "id": "q14266",
        "input": "selenim uncheck box python",
        "output": "",
        "rule": [
            "d14266"
        ]
    },
    {
        "instruction": "",
        "id": "q14267",
        "input": "send python list as json django",
        "output": "",
        "rule": [
            "d14267"
        ]
    },
    {
        "instruction": "",
        "id": "q14268",
        "input": "python build comma separated list",
        "output": "",
        "rule": [
            "d14268"
        ]
    },
    {
        "instruction": "",
        "id": "q14269",
        "input": "send xmlrpc over python requests",
        "output": "",
        "rule": [
            "d14269"
        ]
    },
    {
        "instruction": "",
        "id": "q14270",
        "input": "python byte array slicing",
        "output": "",
        "rule": [
            "d14270"
        ]
    },
    {
        "instruction": "",
        "id": "q14271",
        "input": "serializer database model python model relation",
        "output": "",
        "rule": [
            "d14271"
        ]
    },
    {
        "instruction": "",
        "id": "q14272",
        "input": "python bytearray no init",
        "output": "",
        "rule": [
            "d14272"
        ]
    },
    {
        "instruction": "",
        "id": "q14273",
        "input": "python bytes to base64 \\n",
        "output": "",
        "rule": [
            "d14273"
        ]
    },
    {
        "instruction": "",
        "id": "q14274",
        "input": "set color for scatter plot in python",
        "output": "",
        "rule": [
            "d14274"
        ]
    },
    {
        "instruction": "",
        "id": "q14275",
        "input": "python c api parse string to number",
        "output": "",
        "rule": [
            "d14275"
        ]
    },
    {
        "instruction": "",
        "id": "q14276",
        "input": "set default for all key in dict python",
        "output": "",
        "rule": [
            "d14276"
        ]
    },
    {
        "instruction": "",
        "id": "q14277",
        "input": "python c structure to dict",
        "output": "",
        "rule": [
            "d14277"
        ]
    },
    {
        "instruction": "",
        "id": "q14278",
        "input": "set log scale axis labels ticks, python",
        "output": "",
        "rule": [
            "d14278"
        ]
    },
    {
        "instruction": "",
        "id": "q14279",
        "input": "python cache properties for an immutable object",
        "output": "",
        "rule": [
            "d14279"
        ]
    },
    {
        "instruction": "",
        "id": "q14280",
        "input": "python cache url calls",
        "output": "",
        "rule": [
            "d14280"
        ]
    },
    {
        "instruction": "",
        "id": "q14281",
        "input": "set x axis limits in python",
        "output": "",
        "rule": [
            "d14281"
        ]
    },
    {
        "instruction": "",
        "id": "q14282",
        "input": "python caching intermediate results",
        "output": "",
        "rule": [
            "d14282"
        ]
    },
    {
        "instruction": "",
        "id": "q14283",
        "input": "set xaxis limibts python",
        "output": "",
        "rule": [
            "d14283"
        ]
    },
    {
        "instruction": "",
        "id": "q14284",
        "input": "python calculate manhattan distance between two arrays",
        "output": "",
        "rule": [
            "d14284"
        ]
    },
    {
        "instruction": "",
        "id": "q14285",
        "input": "set xtick label incline python",
        "output": "",
        "rule": [
            "d14285"
        ]
    },
    {
        "instruction": "",
        "id": "q14286",
        "input": "python call model name",
        "output": "",
        "rule": [
            "d14286"
        ]
    },
    {
        "instruction": "",
        "id": "q14287",
        "input": "setdefault dictionary function python",
        "output": "",
        "rule": [
            "d14287"
        ]
    },
    {
        "instruction": "",
        "id": "q14288",
        "input": "python calling pytest from a python script",
        "output": "",
        "rule": [
            "d14288"
        ]
    },
    {
        "instruction": "",
        "id": "q14289",
        "input": "short time fourier transform python",
        "output": "",
        "rule": [
            "d14289"
        ]
    },
    {
        "instruction": "",
        "id": "q14290",
        "input": "python can i modify an iterator",
        "output": "",
        "rule": [
            "d14290"
        ]
    },
    {
        "instruction": "",
        "id": "q14291",
        "input": "show json tree python",
        "output": "",
        "rule": [
            "d14291"
        ]
    },
    {
        "instruction": "",
        "id": "q14292",
        "input": "python can you monkey patch methods on an object",
        "output": "",
        "rule": [
            "d14292"
        ]
    },
    {
        "instruction": "",
        "id": "q14293",
        "input": "similar match function in python",
        "output": "",
        "rule": [
            "d14293"
        ]
    },
    {
        "instruction": "",
        "id": "q14294",
        "input": "python capitalize function to capitalize the first letter",
        "output": "",
        "rule": [
            "d14294"
        ]
    },
    {
        "instruction": "",
        "id": "q14295",
        "input": "simple ldap query in python",
        "output": "",
        "rule": [
            "d14295"
        ]
    },
    {
        "instruction": "",
        "id": "q14296",
        "input": "python cartesian to spherical coordinate",
        "output": "",
        "rule": [
            "d14296"
        ]
    },
    {
        "instruction": "",
        "id": "q14297",
        "input": "simulate cutting a socket connection python",
        "output": "",
        "rule": [
            "d14297"
        ]
    },
    {
        "instruction": "",
        "id": "q14298",
        "input": "python cast signed int",
        "output": "",
        "rule": [
            "d14298"
        ]
    },
    {
        "instruction": "",
        "id": "q14299",
        "input": "skip to next line python",
        "output": "",
        "rule": [
            "d14299"
        ]
    },
    {
        "instruction": "",
        "id": "q14300",
        "input": "python cast str as bool",
        "output": "",
        "rule": [
            "d14300"
        ]
    },
    {
        "instruction": "",
        "id": "q14301",
        "input": "solving lwast squares of matrix in python",
        "output": "",
        "rule": [
            "d14301"
        ]
    },
    {
        "instruction": "",
        "id": "q14302",
        "input": "sort on x then y python",
        "output": "",
        "rule": [
            "d14302"
        ]
    },
    {
        "instruction": "",
        "id": "q14303",
        "input": "python casting a bool as a string",
        "output": "",
        "rule": [
            "d14303"
        ]
    },
    {
        "instruction": "",
        "id": "q14304",
        "input": "sort return index in python",
        "output": "",
        "rule": [
            "d14304"
        ]
    },
    {
        "instruction": "",
        "id": "q14305",
        "input": "python celery chain tasksk",
        "output": "",
        "rule": [
            "d14305"
        ]
    },
    {
        "instruction": "",
        "id": "q14306",
        "input": "sorting code in python based on name",
        "output": "",
        "rule": [
            "d14306"
        ]
    },
    {
        "instruction": "",
        "id": "q14307",
        "input": "python celery task start another task",
        "output": "",
        "rule": [
            "d14307"
        ]
    },
    {
        "instruction": "",
        "id": "q14308",
        "input": "sorting the data in python",
        "output": "",
        "rule": [
            "d14308"
        ]
    },
    {
        "instruction": "",
        "id": "q14309",
        "input": "python celery worker stop",
        "output": "",
        "rule": [
            "d14309"
        ]
    },
    {
        "instruction": "",
        "id": "q14310",
        "input": "spacy permission denied python 3",
        "output": "",
        "rule": [
            "d14310"
        ]
    },
    {
        "instruction": "",
        "id": "q14311",
        "input": "python cfunctype memory address",
        "output": "",
        "rule": [
            "d14311"
        ]
    },
    {
        "instruction": "",
        "id": "q14312",
        "input": "special character change to html encode after save python",
        "output": "",
        "rule": [
            "d14312"
        ]
    },
    {
        "instruction": "",
        "id": "q14313",
        "input": "python cgi fieldstorage none none ajax windows flask",
        "output": "",
        "rule": [
            "d14313"
        ]
    },
    {
        "instruction": "",
        "id": "q14314",
        "input": "specify bins in histogram python",
        "output": "",
        "rule": [
            "d14314"
        ]
    },
    {
        "instruction": "",
        "id": "q14315",
        "input": "python chage string color",
        "output": "",
        "rule": [
            "d14315"
        ]
    },
    {
        "instruction": "",
        "id": "q14316",
        "input": "sphinx proper way to document python function",
        "output": "",
        "rule": [
            "d14316"
        ]
    },
    {
        "instruction": "",
        "id": "q14317",
        "input": "python change array of datetime to integers",
        "output": "",
        "rule": [
            "d14317"
        ]
    },
    {
        "instruction": "",
        "id": "q14318",
        "input": "split python on many char",
        "output": "",
        "rule": [
            "d14318"
        ]
    },
    {
        "instruction": "",
        "id": "q14319",
        "input": "python change df column datatype",
        "output": "",
        "rule": [
            "d14319"
        ]
    },
    {
        "instruction": "",
        "id": "q14320",
        "input": "splitting messages based on number of characters in python",
        "output": "",
        "rule": [
            "d14320"
        ]
    },
    {
        "instruction": "",
        "id": "q14321",
        "input": "python change modified time file",
        "output": "",
        "rule": [
            "d14321"
        ]
    },
    {
        "instruction": "",
        "id": "q14322",
        "input": "splitting word in to letter in python",
        "output": "",
        "rule": [
            "d14322"
        ]
    },
    {
        "instruction": "",
        "id": "q14323",
        "input": "python change norm distribution to gauss",
        "output": "",
        "rule": [
            "d14323"
        ]
    },
    {
        "instruction": "",
        "id": "q14324",
        "input": "sql server bulk merge in python",
        "output": "",
        "rule": [
            "d14324"
        ]
    },
    {
        "instruction": "",
        "id": "q14325",
        "input": "python change permission of file",
        "output": "",
        "rule": [
            "d14325"
        ]
    },
    {
        "instruction": "",
        "id": "q14326",
        "input": "sqlalchemy python create database",
        "output": "",
        "rule": [
            "d14326"
        ]
    },
    {
        "instruction": "",
        "id": "q14327",
        "input": "python change specific column name",
        "output": "",
        "rule": [
            "d14327"
        ]
    },
    {
        "instruction": "",
        "id": "q14328",
        "input": "sqlalchemy python get integer from query result",
        "output": "",
        "rule": [
            "d14328"
        ]
    },
    {
        "instruction": "",
        "id": "q14329",
        "input": "python change the iterator",
        "output": "",
        "rule": [
            "d14329"
        ]
    },
    {
        "instruction": "",
        "id": "q14330",
        "input": "square matrix with a checkerboard pattern of 0's and 1's of any given size python",
        "output": "",
        "rule": [
            "d14330"
        ]
    },
    {
        "instruction": "",
        "id": "q14331",
        "input": "stackoverflow python logistic regression lasso",
        "output": "",
        "rule": [
            "d14331"
        ]
    },
    {
        "instruction": "",
        "id": "q14332",
        "input": "python change to forward slash",
        "output": "",
        "rule": [
            "d14332"
        ]
    },
    {
        "instruction": "",
        "id": "q14333",
        "input": "stackoverflow python print binary character as ascii equivalent",
        "output": "",
        "rule": [
            "d14333"
        ]
    },
    {
        "instruction": "",
        "id": "q14334",
        "input": "python change url path using urlparse/unparse",
        "output": "",
        "rule": [
            "d14334"
        ]
    },
    {
        "instruction": "",
        "id": "q14335",
        "input": "static method in python exmaple",
        "output": "",
        "rule": [
            "d14335"
        ]
    },
    {
        "instruction": "",
        "id": "q14336",
        "input": "python changing a list into a set",
        "output": "",
        "rule": [
            "d14336"
        ]
    },
    {
        "instruction": "",
        "id": "q14337",
        "input": "stop already running thread python",
        "output": "",
        "rule": [
            "d14337"
        ]
    },
    {
        "instruction": "",
        "id": "q14338",
        "input": "python check all dictionary keys for type",
        "output": "",
        "rule": [
            "d14338"
        ]
    },
    {
        "instruction": "",
        "id": "q14339",
        "input": "stop python running thread",
        "output": "",
        "rule": [
            "d14339"
        ]
    },
    {
        "instruction": "",
        "id": "q14340",
        "input": "stop python window from closing",
        "output": "",
        "rule": [
            "d14340"
        ]
    },
    {
        "instruction": "",
        "id": "q14341",
        "input": "python check current memory usage",
        "output": "",
        "rule": [
            "d14341"
        ]
    },
    {
        "instruction": "",
        "id": "q14342",
        "input": "stop the python shell from execution",
        "output": "",
        "rule": [
            "d14342"
        ]
    },
    {
        "instruction": "",
        "id": "q14343",
        "input": "python check exists of field",
        "output": "",
        "rule": [
            "d14343"
        ]
    },
    {
        "instruction": "",
        "id": "q14344",
        "input": "store dictionary as json file in python",
        "output": "",
        "rule": [
            "d14344"
        ]
    },
    {
        "instruction": "",
        "id": "q14345",
        "input": "python check for datetime object",
        "output": "",
        "rule": [
            "d14345"
        ]
    },
    {
        "instruction": "",
        "id": "q14346",
        "input": "str object is not callable in python",
        "output": "",
        "rule": [
            "d14346"
        ]
    },
    {
        "instruction": "",
        "id": "q14347",
        "input": "python check for datetime type",
        "output": "",
        "rule": [
            "d14347"
        ]
    },
    {
        "instruction": "",
        "id": "q14348",
        "input": "string format boolean python",
        "output": "",
        "rule": [
            "d14348"
        ]
    },
    {
        "instruction": "",
        "id": "q14349",
        "input": "python check for list of strings",
        "output": "",
        "rule": [
            "d14349"
        ]
    },
    {
        "instruction": "",
        "id": "q14350",
        "input": "string template substitute escape underscore in python",
        "output": "",
        "rule": [
            "d14350"
        ]
    },
    {
        "instruction": "",
        "id": "q14351",
        "input": "python check for numeric type",
        "output": "",
        "rule": [
            "d14351"
        ]
    },
    {
        "instruction": "",
        "id": "q14352",
        "input": "string to single letter hash table python",
        "output": "",
        "rule": [
            "d14352"
        ]
    },
    {
        "instruction": "",
        "id": "q14353",
        "input": "python check for valid value",
        "output": "",
        "rule": [
            "d14353"
        ]
    },
    {
        "instruction": "",
        "id": "q14354",
        "input": "string to upper case python3",
        "output": "",
        "rule": [
            "d14354"
        ]
    },
    {
        "instruction": "",
        "id": "q14355",
        "input": "python check has field",
        "output": "",
        "rule": [
            "d14355"
        ]
    },
    {
        "instruction": "",
        "id": "q14356",
        "input": "strip fqdn from url python flask",
        "output": "",
        "rule": [
            "d14356"
        ]
    },
    {
        "instruction": "",
        "id": "q14357",
        "input": "python check if a pid is running",
        "output": "",
        "rule": [
            "d14357"
        ]
    },
    {
        "instruction": "",
        "id": "q14358",
        "input": "subprocess python exitcode without communicate",
        "output": "",
        "rule": [
            "d14358"
        ]
    },
    {
        "instruction": "",
        "id": "q14359",
        "input": "python check if all items in a list are strings or floats",
        "output": "",
        "rule": [
            "d14359"
        ]
    },
    {
        "instruction": "",
        "id": "q14360",
        "input": "substracting weeks to date in python",
        "output": "",
        "rule": [
            "d14360"
        ]
    },
    {
        "instruction": "",
        "id": "q14361",
        "input": "python check if bytes",
        "output": "",
        "rule": [
            "d14361"
        ]
    },
    {
        "instruction": "",
        "id": "q14362",
        "input": "sum over a single axis python numpy",
        "output": "",
        "rule": [
            "d14362"
        ]
    },
    {
        "instruction": "",
        "id": "q14363",
        "input": "python check if close button has been pressed",
        "output": "",
        "rule": [
            "d14363"
        ]
    },
    {
        "instruction": "",
        "id": "q14364",
        "input": "suppress python print modulr",
        "output": "",
        "rule": [
            "d14364"
        ]
    },
    {
        "instruction": "",
        "id": "q14365",
        "input": "python check if column is a string",
        "output": "",
        "rule": [
            "d14365"
        ]
    },
    {
        "instruction": "",
        "id": "q14366",
        "input": "swapping bytes of data python",
        "output": "",
        "rule": [
            "d14366"
        ]
    },
    {
        "instruction": "",
        "id": "q14367",
        "input": "python check if executable exists in path",
        "output": "",
        "rule": [
            "d14367"
        ]
    },
    {
        "instruction": "",
        "id": "q14368",
        "input": "syntax for contains in python",
        "output": "",
        "rule": [
            "d14368"
        ]
    },
    {
        "instruction": "",
        "id": "q14369",
        "input": "t dimensions of alist in python",
        "output": "",
        "rule": [
            "d14369"
        ]
    },
    {
        "instruction": "",
        "id": "q14370",
        "input": "python check if file exists in path variable",
        "output": "",
        "rule": [
            "d14370"
        ]
    },
    {
        "instruction": "",
        "id": "q14371",
        "input": "take 25 and 75 percentile python",
        "output": "",
        "rule": [
            "d14371"
        ]
    },
    {
        "instruction": "",
        "id": "q14372",
        "input": "python check if file size is zero",
        "output": "",
        "rule": [
            "d14372"
        ]
    },
    {
        "instruction": "",
        "id": "q14373",
        "input": "python check if in interactive mode",
        "output": "",
        "rule": [
            "d14373"
        ]
    },
    {
        "instruction": "",
        "id": "q14374",
        "input": "take first element of multi dimensional array in python",
        "output": "",
        "rule": [
            "d14374"
        ]
    },
    {
        "instruction": "",
        "id": "q14375",
        "input": "python check if key in dect",
        "output": "",
        "rule": [
            "d14375"
        ]
    },
    {
        "instruction": "",
        "id": "q14376",
        "input": "python check if object has field",
        "output": "",
        "rule": [
            "d14376"
        ]
    },
    {
        "instruction": "",
        "id": "q14377",
        "input": "test if a regexp match fails in python",
        "output": "",
        "rule": [
            "d14377"
        ]
    },
    {
        "instruction": "",
        "id": "q14378",
        "input": "python check if pid exists",
        "output": "",
        "rule": [
            "d14378"
        ]
    },
    {
        "instruction": "",
        "id": "q14379",
        "input": "test if instance is list python",
        "output": "",
        "rule": [
            "d14379"
        ]
    },
    {
        "instruction": "",
        "id": "q14380",
        "input": "python check if stdout is readable",
        "output": "",
        "rule": [
            "d14380"
        ]
    },
    {
        "instruction": "",
        "id": "q14381",
        "input": "test to see if a character is non ascii in python",
        "output": "",
        "rule": [
            "d14381"
        ]
    },
    {
        "instruction": "",
        "id": "q14382",
        "input": "python check if string is hex value",
        "output": "",
        "rule": [
            "d14382"
        ]
    },
    {
        "instruction": "",
        "id": "q14383",
        "input": "test whether python object is iterable",
        "output": "",
        "rule": [
            "d14383"
        ]
    },
    {
        "instruction": "",
        "id": "q14384",
        "input": "python check if user in group",
        "output": "",
        "rule": [
            "d14384"
        ]
    },
    {
        "instruction": "",
        "id": "q14385",
        "input": "testing whether a string is ascii in python",
        "output": "",
        "rule": [
            "d14385"
        ]
    },
    {
        "instruction": "",
        "id": "q14386",
        "input": "text wrap on python with raw input",
        "output": "",
        "rule": [
            "d14386"
        ]
    },
    {
        "instruction": "",
        "id": "q14387",
        "input": "python check if virtualenv is activated",
        "output": "",
        "rule": [
            "d14387"
        ]
    },
    {
        "instruction": "",
        "id": "q14388",
        "input": "textwrapping examples using python",
        "output": "",
        "rule": [
            "d14388"
        ]
    },
    {
        "instruction": "",
        "id": "q14389",
        "input": "python check index of a substring",
        "output": "",
        "rule": [
            "d14389"
        ]
    },
    {
        "instruction": "",
        "id": "q14390",
        "input": "tf have no attribute python",
        "output": "",
        "rule": [
            "d14390"
        ]
    },
    {
        "instruction": "",
        "id": "q14391",
        "input": "python check relation is symmetric",
        "output": "",
        "rule": [
            "d14391"
        ]
    },
    {
        "instruction": "",
        "id": "q14392",
        "input": "the function of the percent symbol in python",
        "output": "",
        "rule": [
            "d14392"
        ]
    },
    {
        "instruction": "",
        "id": "q14393",
        "input": "python check status of linux service",
        "output": "",
        "rule": [
            "d14393"
        ]
    },
    {
        "instruction": "",
        "id": "q14394",
        "input": "time since epoch in seconds python",
        "output": "",
        "rule": [
            "d14394"
        ]
    },
    {
        "instruction": "",
        "id": "q14395",
        "input": "python check string is hex",
        "output": "",
        "rule": [
            "d14395"
        ]
    },
    {
        "instruction": "",
        "id": "q14396",
        "input": "timezone python central time zone",
        "output": "",
        "rule": [
            "d14396"
        ]
    },
    {
        "instruction": "",
        "id": "q14397",
        "input": "python check string is path",
        "output": "",
        "rule": [
            "d14397"
        ]
    },
    {
        "instruction": "",
        "id": "q14398",
        "input": "tkinter folder chooser python",
        "output": "",
        "rule": [
            "d14398"
        ]
    },
    {
        "instruction": "",
        "id": "q14399",
        "input": "python check string match without letter case",
        "output": "",
        "rule": [
            "d14399"
        ]
    },
    {
        "instruction": "",
        "id": "q14400",
        "input": "tkinter python gui exit button not working",
        "output": "",
        "rule": [
            "d14400"
        ]
    },
    {
        "instruction": "",
        "id": "q14401",
        "input": "to test if the connection is made to python",
        "output": "",
        "rule": [
            "d14401"
        ]
    },
    {
        "instruction": "",
        "id": "q14402",
        "input": "python check type equals datetime",
        "output": "",
        "rule": [
            "d14402"
        ]
    },
    {
        "instruction": "",
        "id": "q14403",
        "input": "tokenize sentence python and count the words",
        "output": "",
        "rule": [
            "d14403"
        ]
    },
    {
        "instruction": "",
        "id": "q14404",
        "input": "python check type of object in method",
        "output": "",
        "rule": [
            "d14404"
        ]
    },
    {
        "instruction": "",
        "id": "q14405",
        "input": "python check valid email",
        "output": "",
        "rule": [
            "d14405"
        ]
    },
    {
        "instruction": "",
        "id": "q14406",
        "input": "transform types in array python",
        "output": "",
        "rule": [
            "d14406"
        ]
    },
    {
        "instruction": "",
        "id": "q14407",
        "input": "python check whether a file is an image",
        "output": "",
        "rule": [
            "d14407"
        ]
    },
    {
        "instruction": "",
        "id": "q14408",
        "input": "transforma each frame of gif into jpg python",
        "output": "",
        "rule": [
            "d14408"
        ]
    },
    {
        "instruction": "",
        "id": "q14409",
        "input": "python checking if zip file is open",
        "output": "",
        "rule": [
            "d14409"
        ]
    },
    {
        "instruction": "",
        "id": "q14410",
        "input": "tree get number of nodes python",
        "output": "",
        "rule": [
            "d14410"
        ]
    },
    {
        "instruction": "",
        "id": "q14411",
        "input": "python checking virtualenv location",
        "output": "",
        "rule": [
            "d14411"
        ]
    },
    {
        "instruction": "",
        "id": "q14412",
        "input": "truncate list size python",
        "output": "",
        "rule": [
            "d14412"
        ]
    },
    {
        "instruction": "",
        "id": "q14413",
        "input": "python chekc duplicate columns in dataset",
        "output": "",
        "rule": [
            "d14413"
        ]
    },
    {
        "instruction": "",
        "id": "q14414",
        "input": "turn a list of characters into a string python",
        "output": "",
        "rule": [
            "d14414"
        ]
    },
    {
        "instruction": "",
        "id": "q14415",
        "input": "python chekcing if file is an image",
        "output": "",
        "rule": [
            "d14415"
        ]
    },
    {
        "instruction": "",
        "id": "q14416",
        "input": "turn a list of list into dictionary python",
        "output": "",
        "rule": [
            "d14416"
        ]
    },
    {
        "instruction": "",
        "id": "q14417",
        "input": "turn seconds into hours minutes python",
        "output": "",
        "rule": [
            "d14417"
        ]
    },
    {
        "instruction": "",
        "id": "q14418",
        "input": "python close database connection",
        "output": "",
        "rule": [
            "d14418"
        ]
    },
    {
        "instruction": "",
        "id": "q14419",
        "input": "turning python files into executables",
        "output": "",
        "rule": [
            "d14419"
        ]
    },
    {
        "instruction": "",
        "id": "q14420",
        "input": "python close flush object",
        "output": "",
        "rule": [
            "d14420"
        ]
    },
    {
        "instruction": "",
        "id": "q14421",
        "input": "typehint param python multiple types",
        "output": "",
        "rule": [
            "d14421"
        ]
    },
    {
        "instruction": "",
        "id": "q14422",
        "input": "python closing socket connection early",
        "output": "",
        "rule": [
            "d14422"
        ]
    },
    {
        "instruction": "",
        "id": "q14423",
        "input": "ubuntu python local ip",
        "output": "",
        "rule": [
            "d14423"
        ]
    },
    {
        "instruction": "",
        "id": "q14424",
        "input": "python co2 concentertion interpolate exmple",
        "output": "",
        "rule": [
            "d14424"
        ]
    },
    {
        "instruction": "",
        "id": "q14425",
        "input": "uncheck checkbox python tkinter",
        "output": "",
        "rule": [
            "d14425"
        ]
    },
    {
        "instruction": "",
        "id": "q14426",
        "input": "python code for median from even numbered list",
        "output": "",
        "rule": [
            "d14426"
        ]
    },
    {
        "instruction": "",
        "id": "q14427",
        "input": "unit test to disable python",
        "output": "",
        "rule": [
            "d14427"
        ]
    },
    {
        "instruction": "",
        "id": "q14428",
        "input": "python code for moving cursor without user intervention",
        "output": "",
        "rule": [
            "d14428"
        ]
    },
    {
        "instruction": "",
        "id": "q14429",
        "input": "unittest python3 run a single test",
        "output": "",
        "rule": [
            "d14429"
        ]
    },
    {
        "instruction": "",
        "id": "q14430",
        "input": "python code for selection list s",
        "output": "",
        "rule": [
            "d14430"
        ]
    },
    {
        "instruction": "",
        "id": "q14431",
        "input": "unittesting python assert a function is called",
        "output": "",
        "rule": [
            "d14431"
        ]
    },
    {
        "instruction": "",
        "id": "q14432",
        "input": "python code to access an excel file and write to it",
        "output": "",
        "rule": [
            "d14432"
        ]
    },
    {
        "instruction": "",
        "id": "q14433",
        "input": "update global vars in def python",
        "output": "",
        "rule": [
            "d14433"
        ]
    },
    {
        "instruction": "",
        "id": "q14434",
        "input": "python code to check if file doesnot exisits",
        "output": "",
        "rule": [
            "d14434"
        ]
    },
    {
        "instruction": "",
        "id": "q14435",
        "input": "update the value inside json python",
        "output": "",
        "rule": [
            "d14435"
        ]
    },
    {
        "instruction": "",
        "id": "q14436",
        "input": "python code to check if first sentence contains pronoun tag",
        "output": "",
        "rule": [
            "d14436"
        ]
    },
    {
        "instruction": "",
        "id": "q14437",
        "input": "uploading a file with python http put",
        "output": "",
        "rule": [
            "d14437"
        ]
    },
    {
        "instruction": "",
        "id": "q14438",
        "input": "python code to compute the probability of even using pmf",
        "output": "",
        "rule": [
            "d14438"
        ]
    },
    {
        "instruction": "",
        "id": "q14439",
        "input": "urlopen get status code python3 getcode",
        "output": "",
        "rule": [
            "d14439"
        ]
    },
    {
        "instruction": "",
        "id": "q14440",
        "input": "python code to extract float number from given string",
        "output": "",
        "rule": [
            "d14440"
        ]
    },
    {
        "instruction": "",
        "id": "q14441",
        "input": "use array 1 to compare to array 2 in python",
        "output": "",
        "rule": [
            "d14441"
        ]
    },
    {
        "instruction": "",
        "id": "q14442",
        "input": "python code to flip an image vertically",
        "output": "",
        "rule": [
            "d14442"
        ]
    },
    {
        "instruction": "",
        "id": "q14443",
        "input": "use function from outer scope in inner scope python",
        "output": "",
        "rule": [
            "d14443"
        ]
    },
    {
        "instruction": "",
        "id": "q14444",
        "input": "python code to get the date of creation of file",
        "output": "",
        "rule": [
            "d14444"
        ]
    },
    {
        "instruction": "",
        "id": "q14445",
        "input": "use function return values to fill array in python",
        "output": "",
        "rule": [
            "d14445"
        ]
    },
    {
        "instruction": "",
        "id": "q14446",
        "input": "python code to test tensorflow",
        "output": "",
        "rule": [
            "d14446"
        ]
    },
    {
        "instruction": "",
        "id": "q14447",
        "input": "use lambda function in python for sorting",
        "output": "",
        "rule": [
            "d14447"
        ]
    },
    {
        "instruction": "",
        "id": "q14448",
        "input": "python color maps for matlab",
        "output": "",
        "rule": [
            "d14448"
        ]
    },
    {
        "instruction": "",
        "id": "q14449",
        "input": "use len in python flask template",
        "output": "",
        "rule": [
            "d14449"
        ]
    },
    {
        "instruction": "",
        "id": "q14450",
        "input": "python color theme dont change after calling color pallete",
        "output": "",
        "rule": [
            "d14450"
        ]
    },
    {
        "instruction": "",
        "id": "q14451",
        "input": "use list to draw lines python",
        "output": "",
        "rule": [
            "d14451"
        ]
    },
    {
        "instruction": "",
        "id": "q14452",
        "input": "python colorama back and foreground color",
        "output": "",
        "rule": [
            "d14452"
        ]
    },
    {
        "instruction": "",
        "id": "q14453",
        "input": "use product of one funtion in another python",
        "output": "",
        "rule": [
            "d14453"
        ]
    },
    {
        "instruction": "",
        "id": "q14454",
        "input": "python compare ints in sets",
        "output": "",
        "rule": [
            "d14454"
        ]
    },
    {
        "instruction": "",
        "id": "q14455",
        "input": "use python to display column names in database",
        "output": "",
        "rule": [
            "d14455"
        ]
    },
    {
        "instruction": "",
        "id": "q14456",
        "input": "python compare optional strings case insensitive",
        "output": "",
        "rule": [
            "d14456"
        ]
    },
    {
        "instruction": "",
        "id": "q14457",
        "input": "use tuple pattern matching in python",
        "output": "",
        "rule": [
            "d14457"
        ]
    },
    {
        "instruction": "",
        "id": "q14458",
        "input": "python compare string is similar to another one",
        "output": "",
        "rule": [
            "d14458"
        ]
    },
    {
        "instruction": "",
        "id": "q14459",
        "input": "using a factors of a range as a dictionary index in python",
        "output": "",
        "rule": [
            "d14459"
        ]
    },
    {
        "instruction": "",
        "id": "q14460",
        "input": "python compare string regardless upper",
        "output": "",
        "rule": [
            "d14460"
        ]
    },
    {
        "instruction": "",
        "id": "q14461",
        "input": "using argparser change date format from csv file in python",
        "output": "",
        "rule": [
            "d14461"
        ]
    },
    {
        "instruction": "",
        "id": "q14462",
        "input": "python compare two dicts and get diff",
        "output": "",
        "rule": [
            "d14462"
        ]
    },
    {
        "instruction": "",
        "id": "q14463",
        "input": "using assert with lists python",
        "output": "",
        "rule": [
            "d14463"
        ]
    },
    {
        "instruction": "",
        "id": "q14464",
        "input": "python compare two strings for characters in common",
        "output": "",
        "rule": [
            "d14464"
        ]
    },
    {
        "instruction": "",
        "id": "q14465",
        "input": "using latex with python",
        "output": "",
        "rule": [
            "d14465"
        ]
    },
    {
        "instruction": "",
        "id": "q14466",
        "input": "python compare two strings for percent similarity",
        "output": "",
        "rule": [
            "d14466"
        ]
    },
    {
        "instruction": "",
        "id": "q14467",
        "input": "python complex object is not subscriptable",
        "output": "",
        "rule": [
            "d14467"
        ]
    },
    {
        "instruction": "",
        "id": "q14468",
        "input": "using textract python with a pdf file",
        "output": "",
        "rule": [
            "d14468"
        ]
    },
    {
        "instruction": "",
        "id": "q14469",
        "input": "python compute pdf percentile",
        "output": "",
        "rule": [
            "d14469"
        ]
    },
    {
        "instruction": "",
        "id": "q14470",
        "input": "validate credit card number using string input in python",
        "output": "",
        "rule": [
            "d14470"
        ]
    },
    {
        "instruction": "",
        "id": "q14471",
        "input": "python configparser get all keys in a section",
        "output": "",
        "rule": [
            "d14471"
        ]
    },
    {
        "instruction": "",
        "id": "q14472",
        "input": "validate email using python 3",
        "output": "",
        "rule": [
            "d14472"
        ]
    },
    {
        "instruction": "",
        "id": "q14473",
        "input": "validate file name not working in python",
        "output": "",
        "rule": [
            "d14473"
        ]
    },
    {
        "instruction": "",
        "id": "q14474",
        "input": "python connect to redis on windows",
        "output": "",
        "rule": [
            "d14474"
        ]
    },
    {
        "instruction": "",
        "id": "q14475",
        "input": "validate file path in python",
        "output": "",
        "rule": [
            "d14475"
        ]
    },
    {
        "instruction": "",
        "id": "q14476",
        "input": "python constantly readstdin without enter",
        "output": "",
        "rule": [
            "d14476"
        ]
    },
    {
        "instruction": "",
        "id": "q14477",
        "input": "vectorizing a function python",
        "output": "",
        "rule": [
            "d14477"
        ]
    },
    {
        "instruction": "",
        "id": "q14478",
        "input": "python consume json feed",
        "output": "",
        "rule": [
            "d14478"
        ]
    },
    {
        "instruction": "",
        "id": "q14479",
        "input": "view compiled code of python",
        "output": "",
        "rule": [
            "d14479"
        ]
    },
    {
        "instruction": "",
        "id": "q14480",
        "input": "python conver dic to string",
        "output": "",
        "rule": [
            "d14480"
        ]
    },
    {
        "instruction": "",
        "id": "q14481",
        "input": "visualize json nest tree in python",
        "output": "",
        "rule": [
            "d14481"
        ]
    },
    {
        "instruction": "",
        "id": "q14482",
        "input": "python conver mongo number long to int",
        "output": "",
        "rule": [
            "d14482"
        ]
    },
    {
        "instruction": "",
        "id": "q14483",
        "input": "python convern int to bool",
        "output": "",
        "rule": [
            "d14483"
        ]
    },
    {
        "instruction": "",
        "id": "q14484",
        "input": "warp perspective cv2 python",
        "output": "",
        "rule": [
            "d14484"
        ]
    },
    {
        "instruction": "",
        "id": "q14485",
        "input": "python count common items between lists",
        "output": "",
        "rule": [
            "d14485"
        ]
    },
    {
        "instruction": "",
        "id": "q14486",
        "input": "what extensions do python files use",
        "output": "",
        "rule": [
            "d14486"
        ]
    },
    {
        "instruction": "",
        "id": "q14487",
        "input": "python count non zeros in matrix",
        "output": "",
        "rule": [
            "d14487"
        ]
    },
    {
        "instruction": "",
        "id": "q14488",
        "input": "what function goes through the letters in a string? python",
        "output": "",
        "rule": [
            "d14488"
        ]
    },
    {
        "instruction": "",
        "id": "q14489",
        "input": "python count number of nan in numpy array",
        "output": "",
        "rule": [
            "d14489"
        ]
    },
    {
        "instruction": "",
        "id": "q14490",
        "input": "what glm to model lognormal distribution python",
        "output": "",
        "rule": [
            "d14490"
        ]
    },
    {
        "instruction": "",
        "id": "q14491",
        "input": "what python object has the attribute 'splitlines'",
        "output": "",
        "rule": [
            "d14491"
        ]
    },
    {
        "instruction": "",
        "id": "q14492",
        "input": "python coverage report html",
        "output": "",
        "rule": [
            "d14492"
        ]
    },
    {
        "instruction": "",
        "id": "q14493",
        "input": "what variable to use to quit a program in python",
        "output": "",
        "rule": [
            "d14493"
        ]
    },
    {
        "instruction": "",
        "id": "q14494",
        "input": "python covert markdown to html with highlight",
        "output": "",
        "rule": [
            "d14494"
        ]
    },
    {
        "instruction": "",
        "id": "q14495",
        "input": "windows path from unix path python",
        "output": "",
        "rule": [
            "d14495"
        ]
    },
    {
        "instruction": "",
        "id": "q14496",
        "input": "python create a ordered dict",
        "output": "",
        "rule": [
            "d14496"
        ]
    },
    {
        "instruction": "",
        "id": "q14497",
        "input": "windows python kill firefox",
        "output": "",
        "rule": [
            "d14497"
        ]
    },
    {
        "instruction": "",
        "id": "q14498",
        "input": "wrap python sys exit",
        "output": "",
        "rule": [
            "d14498"
        ]
    },
    {
        "instruction": "",
        "id": "q14499",
        "input": "python create matrix from 2 matrices",
        "output": "",
        "rule": [
            "d14499"
        ]
    },
    {
        "instruction": "",
        "id": "q14500",
        "input": "write a function that converts integer to string in roman notation python",
        "output": "",
        "rule": [
            "d14500"
        ]
    },
    {
        "instruction": "",
        "id": "q14501",
        "input": "python create matrix from angle axis rotation",
        "output": "",
        "rule": [
            "d14501"
        ]
    },
    {
        "instruction": "",
        "id": "q14502",
        "input": "write a python function to seprate a name without array",
        "output": "",
        "rule": [
            "d14502"
        ]
    },
    {
        "instruction": "",
        "id": "q14503",
        "input": "python create opject from string",
        "output": "",
        "rule": [
            "d14503"
        ]
    },
    {
        "instruction": "",
        "id": "q14504",
        "input": "python create scipy sparse matrix",
        "output": "",
        "rule": [
            "d14504"
        ]
    },
    {
        "instruction": "",
        "id": "q14505",
        "input": "writing a python service",
        "output": "",
        "rule": [
            "d14505"
        ]
    },
    {
        "instruction": "",
        "id": "q14506",
        "input": "python croniter sign question",
        "output": "",
        "rule": [
            "d14506"
        ]
    },
    {
        "instruction": "",
        "id": "q14507",
        "input": "python crop black out of image",
        "output": "",
        "rule": [
            "d14507"
        ]
    },
    {
        "instruction": "",
        "id": "q14508",
        "input": "wxpython destroy function called frame not disappear immediately",
        "output": "",
        "rule": [
            "d14508"
        ]
    },
    {
        "instruction": "",
        "id": "q14509",
        "input": "python cross validation average accuracy intepretation",
        "output": "",
        "rule": [
            "d14509"
        ]
    },
    {
        "instruction": "",
        "id": "q14510",
        "input": "xcode compile python source",
        "output": "",
        "rule": [
            "d14510"
        ]
    },
    {
        "instruction": "",
        "id": "q14511",
        "input": "python ctype paste clipboard",
        "output": "",
        "rule": [
            "d14511"
        ]
    },
    {
        "instruction": "",
        "id": "q14512",
        "input": "yaml python object parse into",
        "output": "",
        "rule": [
            "d14512"
        ]
    },
    {
        "instruction": "",
        "id": "q14513",
        "input": "python ctypes callback instance method",
        "output": "",
        "rule": [
            "d14513"
        ]
    },
    {
        "instruction": "",
        "id": "q14514",
        "input": "zipfiles within zipfiles in python",
        "output": "",
        "rule": [
            "d14514"
        ]
    },
    {
        "instruction": "",
        "id": "q14515",
        "input": "python ctypes cast char array to pointer",
        "output": "",
        "rule": [
            "d14515"
        ]
    },
    {
        "instruction": "",
        "id": "q14516",
        "input": "zmq context python hang on",
        "output": "",
        "rule": [
            "d14516"
        ]
    },
    {
        "instruction": "",
        "id": "q14517",
        "input": "python ctypes how to create pointer pointer to uint var",
        "output": "",
        "rule": [
            "d14517"
        ]
    },
    {
        "instruction": "",
        "id": "q14518",
        "input": "python ctypes pass int array into fnction",
        "output": "",
        "rule": [
            "d14518"
        ]
    },
    {
        "instruction": "",
        "id": "q14519",
        "input": "python ctypes pass null pointer",
        "output": "",
        "rule": [
            "d14519"
        ]
    },
    {
        "instruction": "",
        "id": "q14520",
        "input": "python check if variable is instantiated",
        "output": "",
        "rule": [
            "d14520"
        ]
    },
    {
        "instruction": "",
        "id": "q14521",
        "input": "\"how to validate a python model\"",
        "output": "",
        "rule": [
            "d14521"
        ]
    },
    {
        "instruction": "",
        "id": "q14522",
        "input": "python check if variable is list or float",
        "output": "",
        "rule": [
            "d14522"
        ]
    },
    {
        "instruction": "",
        "id": "q14523",
        "input": "\"multi dimensional\" indexes to linear indexes python",
        "output": "",
        "rule": [
            "d14523"
        ]
    },
    {
        "instruction": "",
        "id": "q14524",
        "input": "python check instance of date",
        "output": "",
        "rule": [
            "d14524"
        ]
    },
    {
        "instruction": "",
        "id": "q14525",
        "input": "python 3 \"not in\"",
        "output": "",
        "rule": [
            "d14525"
        ]
    },
    {
        "instruction": "",
        "id": "q14526",
        "input": "python check is the key in the dictionary",
        "output": "",
        "rule": [
            "d14526"
        ]
    },
    {
        "instruction": "",
        "id": "q14527",
        "input": "python confidence interval \"failure rate\"",
        "output": "",
        "rule": [
            "d14527"
        ]
    },
    {
        "instruction": "",
        "id": "q14528",
        "input": "python check modified time of file",
        "output": "",
        "rule": [
            "d14528"
        ]
    },
    {
        "instruction": "",
        "id": "q14529",
        "input": "python sqlalchemy \"create table\"",
        "output": "",
        "rule": [
            "d14529"
        ]
    },
    {
        "instruction": "",
        "id": "q14530",
        "input": "python check password strength regex",
        "output": "",
        "rule": [
            "d14530"
        ]
    },
    {
        "instruction": "",
        "id": "q14531",
        "input": "reindex in python \"not in index\"",
        "output": "",
        "rule": [
            "d14531"
        ]
    },
    {
        "instruction": "",
        "id": "q14532",
        "input": "python check port network connection",
        "output": "",
        "rule": [
            "d14532"
        ]
    },
    {
        "instruction": "",
        "id": "q14533",
        "input": "'collection' object is not iterable python",
        "output": "",
        "rule": [
            "d14533"
        ]
    },
    {
        "instruction": "",
        "id": "q14534",
        "input": "python check power of 2",
        "output": "",
        "rule": [
            "d14534"
        ]
    },
    {
        "instruction": "",
        "id": "q14535",
        "input": "25 and 75 percentile in python",
        "output": "",
        "rule": [
            "d14535"
        ]
    },
    {
        "instruction": "",
        "id": "q14536",
        "input": "python check the contents of two file are the same",
        "output": "",
        "rule": [
            "d14536"
        ]
    },
    {
        "instruction": "",
        "id": "q14537",
        "input": "2d rotatation matrix python",
        "output": "",
        "rule": [
            "d14537"
        ]
    },
    {
        "instruction": "",
        "id": "q14538",
        "input": "python check to see if browser is present",
        "output": "",
        "rule": [
            "d14538"
        ]
    },
    {
        "instruction": "",
        "id": "q14539",
        "input": "3d linear interpolation python based on two points",
        "output": "",
        "rule": [
            "d14539"
        ]
    },
    {
        "instruction": "",
        "id": "q14540",
        "input": "python check utf8 support",
        "output": "",
        "rule": [
            "d14540"
        ]
    },
    {
        "instruction": "",
        "id": "q14541",
        "input": "access azure logs in python",
        "output": "",
        "rule": [
            "d14541"
        ]
    },
    {
        "instruction": "",
        "id": "q14542",
        "input": "python check value a valid item in enum",
        "output": "",
        "rule": [
            "d14542"
        ]
    },
    {
        "instruction": "",
        "id": "q14543",
        "input": "accuracy of computation in python",
        "output": "",
        "rule": [
            "d14543"
        ]
    },
    {
        "instruction": "",
        "id": "q14544",
        "input": "python check values in column and mark true if in list",
        "output": "",
        "rule": [
            "d14544"
        ]
    },
    {
        "instruction": "",
        "id": "q14545",
        "input": "add dots to python graph",
        "output": "",
        "rule": [
            "d14545"
        ]
    },
    {
        "instruction": "",
        "id": "q14546",
        "input": "python check variable enum",
        "output": "",
        "rule": [
            "d14546"
        ]
    },
    {
        "instruction": "",
        "id": "q14547",
        "input": "add padding to image python 3d effect",
        "output": "",
        "rule": [
            "d14547"
        ]
    },
    {
        "instruction": "",
        "id": "q14548",
        "input": "python check web page element exists",
        "output": "",
        "rule": [
            "d14548"
        ]
    },
    {
        "instruction": "",
        "id": "q14549",
        "input": "add sleep timer in loop python",
        "output": "",
        "rule": [
            "d14549"
        ]
    },
    {
        "instruction": "",
        "id": "q14550",
        "input": "python check whether an object contains an attirbute",
        "output": "",
        "rule": [
            "d14550"
        ]
    },
    {
        "instruction": "",
        "id": "q14551",
        "input": "add update merge two dictionaries python",
        "output": "",
        "rule": [
            "d14551"
        ]
    },
    {
        "instruction": "",
        "id": "q14552",
        "input": "python checking if a url is valid",
        "output": "",
        "rule": [
            "d14552"
        ]
    },
    {
        "instruction": "",
        "id": "q14553",
        "input": "adding block comments in python",
        "output": "",
        "rule": [
            "d14553"
        ]
    },
    {
        "instruction": "",
        "id": "q14554",
        "input": "python clear all variables",
        "output": "",
        "rule": [
            "d14554"
        ]
    },
    {
        "instruction": "",
        "id": "q14555",
        "input": "adding suffix to name python",
        "output": "",
        "rule": [
            "d14555"
        ]
    },
    {
        "instruction": "",
        "id": "q14556",
        "input": "python clearing a vriable",
        "output": "",
        "rule": [
            "d14556"
        ]
    },
    {
        "instruction": "",
        "id": "q14557",
        "input": "adjacency matrix algorithm python",
        "output": "",
        "rule": [
            "d14557"
        ]
    },
    {
        "instruction": "",
        "id": "q14558",
        "input": "python clipboard contents linux",
        "output": "",
        "rule": [
            "d14558"
        ]
    },
    {
        "instruction": "",
        "id": "q14559",
        "input": "adjacency matrix of a data in python",
        "output": "",
        "rule": [
            "d14559"
        ]
    },
    {
        "instruction": "",
        "id": "q14560",
        "input": "python clone object from another object",
        "output": "",
        "rule": [
            "d14560"
        ]
    },
    {
        "instruction": "",
        "id": "q14561",
        "input": "admin to generate python django",
        "output": "",
        "rule": [
            "d14561"
        ]
    },
    {
        "instruction": "",
        "id": "q14562",
        "input": "python clone object in initiator",
        "output": "",
        "rule": [
            "d14562"
        ]
    },
    {
        "instruction": "",
        "id": "q14563",
        "input": "ansi color escape sequences python",
        "output": "",
        "rule": [
            "d14563"
        ]
    },
    {
        "instruction": "",
        "id": "q14564",
        "input": "python close a file if it is open",
        "output": "",
        "rule": [
            "d14564"
        ]
    },
    {
        "instruction": "",
        "id": "q14565",
        "input": "apache python mime type",
        "output": "",
        "rule": [
            "d14565"
        ]
    },
    {
        "instruction": "",
        "id": "q14566",
        "input": "python closing broken socket",
        "output": "",
        "rule": [
            "d14566"
        ]
    },
    {
        "instruction": "",
        "id": "q14567",
        "input": "apply a function ona series column python",
        "output": "",
        "rule": [
            "d14567"
        ]
    },
    {
        "instruction": "",
        "id": "q14568",
        "input": "python code for finding magnitude of a vector",
        "output": "",
        "rule": [
            "d14568"
        ]
    },
    {
        "instruction": "",
        "id": "q14569",
        "input": "apply a function to a vector in python",
        "output": "",
        "rule": [
            "d14569"
        ]
    },
    {
        "instruction": "",
        "id": "q14570",
        "input": "python code generate hash using random",
        "output": "",
        "rule": [
            "d14570"
        ]
    },
    {
        "instruction": "",
        "id": "q14571",
        "input": "apply a function to a vector python",
        "output": "",
        "rule": [
            "d14571"
        ]
    },
    {
        "instruction": "",
        "id": "q14572",
        "input": "python code that calculate angle between two points",
        "output": "",
        "rule": [
            "d14572"
        ]
    },
    {
        "instruction": "",
        "id": "q14573",
        "input": "apply function to each row of data frame python",
        "output": "",
        "rule": [
            "d14573"
        ]
    },
    {
        "instruction": "",
        "id": "q14574",
        "input": "python code to check every line of a list",
        "output": "",
        "rule": [
            "d14574"
        ]
    },
    {
        "instruction": "",
        "id": "q14575",
        "input": "apply styling on individual elements of a particular column in python",
        "output": "",
        "rule": [
            "d14575"
        ]
    },
    {
        "instruction": "",
        "id": "q14576",
        "input": "python code to clean up and exit",
        "output": "",
        "rule": [
            "d14576"
        ]
    },
    {
        "instruction": "",
        "id": "q14577",
        "input": "array of arrays python min",
        "output": "",
        "rule": [
            "d14577"
        ]
    },
    {
        "instruction": "",
        "id": "q14578",
        "input": "python code to generate a guid",
        "output": "",
        "rule": [
            "d14578"
        ]
    },
    {
        "instruction": "",
        "id": "q14579",
        "input": "asign all id's the max value python",
        "output": "",
        "rule": [
            "d14579"
        ]
    },
    {
        "instruction": "",
        "id": "q14580",
        "input": "python code to join between multiple data frames without using panda",
        "output": "",
        "rule": [
            "d14580"
        ]
    },
    {
        "instruction": "",
        "id": "q14581",
        "input": "auto filter delete user sqlalchemy python",
        "output": "",
        "rule": [
            "d14581"
        ]
    },
    {
        "instruction": "",
        "id": "q14582",
        "input": "python code to modify source code",
        "output": "",
        "rule": [
            "d14582"
        ]
    },
    {
        "instruction": "",
        "id": "q14583",
        "input": "average length of words in a string python",
        "output": "",
        "rule": [
            "d14583"
        ]
    },
    {
        "instruction": "",
        "id": "q14584",
        "input": "python code to read a file and tokenize it",
        "output": "",
        "rule": [
            "d14584"
        ]
    },
    {
        "instruction": "",
        "id": "q14585",
        "input": "average of elements in the list in python",
        "output": "",
        "rule": [
            "d14585"
        ]
    },
    {
        "instruction": "",
        "id": "q14586",
        "input": "python codecs decode encoding",
        "output": "",
        "rule": [
            "d14586"
        ]
    },
    {
        "instruction": "",
        "id": "q14587",
        "input": "aws lambda python access oracle",
        "output": "",
        "rule": [
            "d14587"
        ]
    },
    {
        "instruction": "",
        "id": "q14588",
        "input": "python codnitionally edit values of a column",
        "output": "",
        "rule": [
            "d14588"
        ]
    },
    {
        "instruction": "",
        "id": "q14589",
        "input": "aws lambda script to call python frtom a3",
        "output": "",
        "rule": [
            "d14589"
        ]
    },
    {
        "instruction": "",
        "id": "q14590",
        "input": "python color not in tuple",
        "output": "",
        "rule": [
            "d14590"
        ]
    },
    {
        "instruction": "",
        "id": "q14591",
        "input": "aws python boto3 dynamodb get all items",
        "output": "",
        "rule": [
            "d14591"
        ]
    },
    {
        "instruction": "",
        "id": "q14592",
        "input": "python colors converter cmyk",
        "output": "",
        "rule": [
            "d14592"
        ]
    },
    {
        "instruction": "",
        "id": "q14593",
        "input": "aws python gzip fails lambda",
        "output": "",
        "rule": [
            "d14593"
        ]
    },
    {
        "instruction": "",
        "id": "q14594",
        "input": "python combine multiple html table into one html page",
        "output": "",
        "rule": [
            "d14594"
        ]
    },
    {
        "instruction": "",
        "id": "q14595",
        "input": "base64 works for python2 but not python3",
        "output": "",
        "rule": [
            "d14595"
        ]
    },
    {
        "instruction": "",
        "id": "q14596",
        "input": "python combine multiple models",
        "output": "",
        "rule": [
            "d14596"
        ]
    },
    {
        "instruction": "",
        "id": "q14597",
        "input": "python combobox change value update",
        "output": "",
        "rule": [
            "d14597"
        ]
    },
    {
        "instruction": "",
        "id": "q14598",
        "input": "best way to pop many elements from python dict",
        "output": "",
        "rule": [
            "d14598"
        ]
    },
    {
        "instruction": "",
        "id": "q14599",
        "input": "python combobox update onclick",
        "output": "",
        "rule": [
            "d14599"
        ]
    },
    {
        "instruction": "",
        "id": "q14600",
        "input": "black cursor block python",
        "output": "",
        "rule": [
            "d14600"
        ]
    },
    {
        "instruction": "",
        "id": "q14601",
        "input": "python compress all whitespace",
        "output": "",
        "rule": [
            "d14601"
        ]
    },
    {
        "instruction": "",
        "id": "q14602",
        "input": "boost python define c++ functions",
        "output": "",
        "rule": [
            "d14602"
        ]
    },
    {
        "instruction": "",
        "id": "q14603",
        "input": "python compress whitespace from string",
        "output": "",
        "rule": [
            "d14603"
        ]
    },
    {
        "instruction": "",
        "id": "q14604",
        "input": "breaking a python string into a tuple",
        "output": "",
        "rule": [
            "d14604"
        ]
    },
    {
        "instruction": "",
        "id": "q14605",
        "input": "python compute euclidean distance between two vectors",
        "output": "",
        "rule": [
            "d14605"
        ]
    },
    {
        "instruction": "",
        "id": "q14606",
        "input": "buffer from c++ to python",
        "output": "",
        "rule": [
            "d14606"
        ]
    },
    {
        "instruction": "",
        "id": "q14607",
        "input": "python concatenate string to all items in a list",
        "output": "",
        "rule": [
            "d14607"
        ]
    },
    {
        "instruction": "",
        "id": "q14608",
        "input": "byte indices must be integers or slices, not str python",
        "output": "",
        "rule": [
            "d14608"
        ]
    },
    {
        "instruction": "",
        "id": "q14609",
        "input": "python configparser to tict",
        "output": "",
        "rule": [
            "d14609"
        ]
    },
    {
        "instruction": "",
        "id": "q14610",
        "input": "bytes file to byte array python",
        "output": "",
        "rule": [
            "d14610"
        ]
    },
    {
        "instruction": "",
        "id": "q14611",
        "input": "python construct a dictionary from string",
        "output": "",
        "rule": [
            "d14611"
        ]
    },
    {
        "instruction": "",
        "id": "q14612",
        "input": "calculate dot product of two vectors in python",
        "output": "",
        "rule": [
            "d14612"
        ]
    },
    {
        "instruction": "",
        "id": "q14613",
        "input": "python constructor taking iterable",
        "output": "",
        "rule": [
            "d14613"
        ]
    },
    {
        "instruction": "",
        "id": "q14614",
        "input": "calculate dot product of two vectorsin python",
        "output": "",
        "rule": [
            "d14614"
        ]
    },
    {
        "instruction": "",
        "id": "q14615",
        "input": "python conver seconds into hours minutes seconds",
        "output": "",
        "rule": [
            "d14615"
        ]
    },
    {
        "instruction": "",
        "id": "q14616",
        "input": "calculate log normal distribution in python with only a column variable",
        "output": "",
        "rule": [
            "d14616"
        ]
    },
    {
        "instruction": "",
        "id": "q14617",
        "input": "python converst list of str to float",
        "output": "",
        "rule": [
            "d14617"
        ]
    },
    {
        "instruction": "",
        "id": "q14618",
        "input": "calculate md5 of string in python",
        "output": "",
        "rule": [
            "d14618"
        ]
    },
    {
        "instruction": "",
        "id": "q14619",
        "input": "python convolution with gaussian function",
        "output": "",
        "rule": [
            "d14619"
        ]
    },
    {
        "instruction": "",
        "id": "q14620",
        "input": "calculate n choose k python",
        "output": "",
        "rule": [
            "d14620"
        ]
    },
    {
        "instruction": "",
        "id": "q14621",
        "input": "python copy a self in method",
        "output": "",
        "rule": [
            "d14621"
        ]
    },
    {
        "instruction": "",
        "id": "q14622",
        "input": "calculate standard deviation in python ignoring null",
        "output": "",
        "rule": [
            "d14622"
        ]
    },
    {
        "instruction": "",
        "id": "q14623",
        "input": "python correcting incorrect timezone datetime",
        "output": "",
        "rule": [
            "d14623"
        ]
    },
    {
        "instruction": "",
        "id": "q14624",
        "input": "python covariance of two array",
        "output": "",
        "rule": [
            "d14624"
        ]
    },
    {
        "instruction": "",
        "id": "q14625",
        "input": "calculating transformation matrix affine python",
        "output": "",
        "rule": [
            "d14625"
        ]
    },
    {
        "instruction": "",
        "id": "q14626",
        "input": "python covariance of two arrays",
        "output": "",
        "rule": [
            "d14626"
        ]
    },
    {
        "instruction": "",
        "id": "q14627",
        "input": "call function with exit in python3",
        "output": "",
        "rule": [
            "d14627"
        ]
    },
    {
        "instruction": "",
        "id": "q14628",
        "input": "python create a argparse",
        "output": "",
        "rule": [
            "d14628"
        ]
    },
    {
        "instruction": "",
        "id": "q14629",
        "input": "can i access a zipped folder in python",
        "output": "",
        "rule": [
            "d14629"
        ]
    },
    {
        "instruction": "",
        "id": "q14630",
        "input": "python create a array of datetime",
        "output": "",
        "rule": [
            "d14630"
        ]
    },
    {
        "instruction": "",
        "id": "q14631",
        "input": "can i execute python expression in gdb command line",
        "output": "",
        "rule": [
            "d14631"
        ]
    },
    {
        "instruction": "",
        "id": "q14632",
        "input": "python create a discord bot tthat pings someone",
        "output": "",
        "rule": [
            "d14632"
        ]
    },
    {
        "instruction": "",
        "id": "q14633",
        "input": "can i put python in latex",
        "output": "",
        "rule": [
            "d14633"
        ]
    },
    {
        "instruction": "",
        "id": "q14634",
        "input": "python create a hash from string",
        "output": "",
        "rule": [
            "d14634"
        ]
    },
    {
        "instruction": "",
        "id": "q14635",
        "input": "can i use python with javascript",
        "output": "",
        "rule": [
            "d14635"
        ]
    },
    {
        "instruction": "",
        "id": "q14636",
        "input": "python create an iterable",
        "output": "",
        "rule": [
            "d14636"
        ]
    },
    {
        "instruction": "",
        "id": "q14637",
        "input": "can python play sounds",
        "output": "",
        "rule": [
            "d14637"
        ]
    },
    {
        "instruction": "",
        "id": "q14638",
        "input": "python create array out of matrix",
        "output": "",
        "rule": [
            "d14638"
        ]
    },
    {
        "instruction": "",
        "id": "q14639",
        "input": "can retrieve command ftp python calculate transfertime",
        "output": "",
        "rule": [
            "d14639"
        ]
    },
    {
        "instruction": "",
        "id": "q14640",
        "input": "python create data frame from query results",
        "output": "",
        "rule": [
            "d14640"
        ]
    },
    {
        "instruction": "",
        "id": "q14641",
        "input": "can we auto restart a python program",
        "output": "",
        "rule": [
            "d14641"
        ]
    },
    {
        "instruction": "",
        "id": "q14642",
        "input": "can you add anything to a python map",
        "output": "",
        "rule": [
            "d14642"
        ]
    },
    {
        "instruction": "",
        "id": "q14643",
        "input": "python create instance from type intance",
        "output": "",
        "rule": [
            "d14643"
        ]
    },
    {
        "instruction": "",
        "id": "q14644",
        "input": "can you change fonts in a python buttons",
        "output": "",
        "rule": [
            "d14644"
        ]
    },
    {
        "instruction": "",
        "id": "q14645",
        "input": "python create list from commas delimited string",
        "output": "",
        "rule": [
            "d14645"
        ]
    },
    {
        "instruction": "",
        "id": "q14646",
        "input": "can you use a numpy array as bins in a python histogram",
        "output": "",
        "rule": [
            "d14646"
        ]
    },
    {
        "instruction": "",
        "id": "q14647",
        "input": "python create multipage pdf file",
        "output": "",
        "rule": [
            "d14647"
        ]
    },
    {
        "instruction": "",
        "id": "q14648",
        "input": "can you vectorize in python",
        "output": "",
        "rule": [
            "d14648"
        ]
    },
    {
        "instruction": "",
        "id": "q14649",
        "input": "python create object instance from string",
        "output": "",
        "rule": [
            "d14649"
        ]
    },
    {
        "instruction": "",
        "id": "q14650",
        "input": "cant access python bottle",
        "output": "",
        "rule": [
            "d14650"
        ]
    },
    {
        "instruction": "",
        "id": "q14651",
        "input": "python create png from raw bytes",
        "output": "",
        "rule": [
            "d14651"
        ]
    },
    {
        "instruction": "",
        "id": "q14652",
        "input": "cant access python bottle server",
        "output": "",
        "rule": [
            "d14652"
        ]
    },
    {
        "instruction": "",
        "id": "q14653",
        "input": "python create type from string",
        "output": "",
        "rule": [
            "d14653"
        ]
    },
    {
        "instruction": "",
        "id": "q14654",
        "input": "cant set attribute python",
        "output": "",
        "rule": [
            "d14654"
        ]
    },
    {
        "instruction": "",
        "id": "q14655",
        "input": "python creating your own colormap",
        "output": "",
        "rule": [
            "d14655"
        ]
    },
    {
        "instruction": "",
        "id": "q14656",
        "input": "capital to highercase converter in python",
        "output": "",
        "rule": [
            "d14656"
        ]
    },
    {
        "instruction": "",
        "id": "q14657",
        "input": "python csv to data frame tab delimeter",
        "output": "",
        "rule": [
            "d14657"
        ]
    },
    {
        "instruction": "",
        "id": "q14658",
        "input": "capitalize all caps python",
        "output": "",
        "rule": [
            "d14658"
        ]
    },
    {
        "instruction": "",
        "id": "q14659",
        "input": "python ctype array to int",
        "output": "",
        "rule": [
            "d14659"
        ]
    },
    {
        "instruction": "",
        "id": "q14660",
        "input": "cartesian product of lists in python",
        "output": "",
        "rule": [
            "d14660"
        ]
    },
    {
        "instruction": "",
        "id": "q14661",
        "input": "python ctypes array to list",
        "output": "",
        "rule": [
            "d14661"
        ]
    },
    {
        "instruction": "",
        "id": "q14662",
        "input": "case insensitive response in python",
        "output": "",
        "rule": [
            "d14662"
        ]
    },
    {
        "instruction": "",
        "id": "q14663",
        "input": "python ctypes delete dynamic memory",
        "output": "",
        "rule": [
            "d14663"
        ]
    },
    {
        "instruction": "",
        "id": "q14664",
        "input": "cast array as double python",
        "output": "",
        "rule": [
            "d14664"
        ]
    },
    {
        "instruction": "",
        "id": "q14665",
        "input": "python ctypes pointer of pointer",
        "output": "",
        "rule": [
            "d14665"
        ]
    },
    {
        "instruction": "",
        "id": "q14666",
        "input": "casting a list as an array python",
        "output": "",
        "rule": [
            "d14666"
        ]
    },
    {
        "instruction": "",
        "id": "q14667",
        "input": "python ctypes structure pointer to pointer(self)",
        "output": "",
        "rule": [
            "d14667"
        ]
    },
    {
        "instruction": "",
        "id": "q14668",
        "input": "catch the matched comment in regex in python",
        "output": "",
        "rule": [
            "d14668"
        ]
    },
    {
        "instruction": "",
        "id": "q14669",
        "input": "python cut a circle out of an image",
        "output": "",
        "rule": [
            "d14669"
        ]
    },
    {
        "instruction": "",
        "id": "q14670",
        "input": "cffi c struct to python dictionary",
        "output": "",
        "rule": [
            "d14670"
        ]
    },
    {
        "instruction": "",
        "id": "q14671",
        "input": "python data frame set value at iat",
        "output": "",
        "rule": [
            "d14671"
        ]
    },
    {
        "instruction": "",
        "id": "q14672",
        "input": "change caps string to proper string + python",
        "output": "",
        "rule": [
            "d14672"
        ]
    },
    {
        "instruction": "",
        "id": "q14673",
        "input": "python date time string to date",
        "output": "",
        "rule": [
            "d14673"
        ]
    },
    {
        "instruction": "",
        "id": "q14674",
        "input": "change certain cols dtype in python",
        "output": "",
        "rule": [
            "d14674"
        ]
    },
    {
        "instruction": "",
        "id": "q14675",
        "input": "python date time string to epoch",
        "output": "",
        "rule": [
            "d14675"
        ]
    },
    {
        "instruction": "",
        "id": "q14676",
        "input": "change encoding of json file python",
        "output": "",
        "rule": [
            "d14676"
        ]
    },
    {
        "instruction": "",
        "id": "q14677",
        "input": "python date to iso datetime",
        "output": "",
        "rule": [
            "d14677"
        ]
    },
    {
        "instruction": "",
        "id": "q14678",
        "input": "change from object to string in python",
        "output": "",
        "rule": [
            "d14678"
        ]
    },
    {
        "instruction": "",
        "id": "q14679",
        "input": "python datetime add weekdays",
        "output": "",
        "rule": [
            "d14679"
        ]
    },
    {
        "instruction": "",
        "id": "q14680",
        "input": "change letters from a name python",
        "output": "",
        "rule": [
            "d14680"
        ]
    },
    {
        "instruction": "",
        "id": "q14681",
        "input": "python datetime datetime now utc",
        "output": "",
        "rule": [
            "d14681"
        ]
    },
    {
        "instruction": "",
        "id": "q14682",
        "input": "change order of columns with index python",
        "output": "",
        "rule": [
            "d14682"
        ]
    },
    {
        "instruction": "",
        "id": "q14683",
        "input": "python datetime get friday for this week",
        "output": "",
        "rule": [
            "d14683"
        ]
    },
    {
        "instruction": "",
        "id": "q14684",
        "input": "change pixel color in hsv format opencv python",
        "output": "",
        "rule": [
            "d14684"
        ]
    },
    {
        "instruction": "",
        "id": "q14685",
        "input": "python datetime isotime to localtime",
        "output": "",
        "rule": [
            "d14685"
        ]
    },
    {
        "instruction": "",
        "id": "q14686",
        "input": "change progressbar color python",
        "output": "",
        "rule": [
            "d14686"
        ]
    },
    {
        "instruction": "",
        "id": "q14687",
        "input": "python datetime make timezone aware",
        "output": "",
        "rule": [
            "d14687"
        ]
    },
    {
        "instruction": "",
        "id": "q14688",
        "input": "change prompt in python shell",
        "output": "",
        "rule": [
            "d14688"
        ]
    },
    {
        "instruction": "",
        "id": "q14689",
        "input": "python datetime naive object",
        "output": "",
        "rule": [
            "d14689"
        ]
    },
    {
        "instruction": "",
        "id": "q14690",
        "input": "change the axis subplot python",
        "output": "",
        "rule": [
            "d14690"
        ]
    },
    {
        "instruction": "",
        "id": "q14691",
        "input": "python datetime parsing format timezone",
        "output": "",
        "rule": [
            "d14691"
        ]
    },
    {
        "instruction": "",
        "id": "q14692",
        "input": "change the format of a date python",
        "output": "",
        "rule": [
            "d14692"
        ]
    },
    {
        "instruction": "",
        "id": "q14693",
        "input": "python datetime start date and end date of that month",
        "output": "",
        "rule": [
            "d14693"
        ]
    },
    {
        "instruction": "",
        "id": "q14694",
        "input": "change the index after selection python",
        "output": "",
        "rule": [
            "d14694"
        ]
    },
    {
        "instruction": "",
        "id": "q14695",
        "input": "python datetime strp date",
        "output": "",
        "rule": [
            "d14695"
        ]
    },
    {
        "instruction": "",
        "id": "q14696",
        "input": "change to signed number python",
        "output": "",
        "rule": [
            "d14696"
        ]
    },
    {
        "instruction": "",
        "id": "q14697",
        "input": "change type from float to integer python",
        "output": "",
        "rule": [
            "d14697"
        ]
    },
    {
        "instruction": "",
        "id": "q14698",
        "input": "python datetime utcfromtimestamp time zone",
        "output": "",
        "rule": [
            "d14698"
        ]
    },
    {
        "instruction": "",
        "id": "q14699",
        "input": "change type of string in python",
        "output": "",
        "rule": [
            "d14699"
        ]
    },
    {
        "instruction": "",
        "id": "q14700",
        "input": "python datetime with only year and month",
        "output": "",
        "rule": [
            "d14700"
        ]
    },
    {
        "instruction": "",
        "id": "q14701",
        "input": "change y axis to log scale python",
        "output": "",
        "rule": [
            "d14701"
        ]
    },
    {
        "instruction": "",
        "id": "q14702",
        "input": "changing a string to a float python",
        "output": "",
        "rule": [
            "d14702"
        ]
    },
    {
        "instruction": "",
        "id": "q14703",
        "input": "python decrease pdf file size",
        "output": "",
        "rule": [
            "d14703"
        ]
    },
    {
        "instruction": "",
        "id": "q14704",
        "input": "changing file permissions in python",
        "output": "",
        "rule": [
            "d14704"
        ]
    },
    {
        "instruction": "",
        "id": "q14705",
        "input": "python def wrapper(*args, **kwargs)",
        "output": "",
        "rule": [
            "d14705"
        ]
    },
    {
        "instruction": "",
        "id": "q14706",
        "input": "changing stdout color in python",
        "output": "",
        "rule": [
            "d14706"
        ]
    },
    {
        "instruction": "",
        "id": "q14707",
        "input": "python default dict set default value",
        "output": "",
        "rule": [
            "d14707"
        ]
    },
    {
        "instruction": "",
        "id": "q14708",
        "input": "check a num is int python",
        "output": "",
        "rule": [
            "d14708"
        ]
    },
    {
        "instruction": "",
        "id": "q14709",
        "input": "python defeine set range",
        "output": "",
        "rule": [
            "d14709"
        ]
    },
    {
        "instruction": "",
        "id": "q14710",
        "input": "check context free grammar for python",
        "output": "",
        "rule": [
            "d14710"
        ]
    },
    {
        "instruction": "",
        "id": "q14711",
        "input": "python define x axis from colum of subplot",
        "output": "",
        "rule": [
            "d14711"
        ]
    },
    {
        "instruction": "",
        "id": "q14712",
        "input": "check datatype of column python",
        "output": "",
        "rule": [
            "d14712"
        ]
    },
    {
        "instruction": "",
        "id": "q14713",
        "input": "python del vars defined",
        "output": "",
        "rule": [
            "d14713"
        ]
    },
    {
        "instruction": "",
        "id": "q14714",
        "input": "check date type in python",
        "output": "",
        "rule": [
            "d14714"
        ]
    },
    {
        "instruction": "",
        "id": "q14715",
        "input": "python delay between loop",
        "output": "",
        "rule": [
            "d14715"
        ]
    },
    {
        "instruction": "",
        "id": "q14716",
        "input": "check disk active time python",
        "output": "",
        "rule": [
            "d14716"
        ]
    },
    {
        "instruction": "",
        "id": "q14717",
        "input": "python delete an object if it exists",
        "output": "",
        "rule": [
            "d14717"
        ]
    },
    {
        "instruction": "",
        "id": "q14718",
        "input": "python delete matplotlib frame",
        "output": "",
        "rule": [
            "d14718"
        ]
    },
    {
        "instruction": "",
        "id": "q14719",
        "input": "check for empty frame python",
        "output": "",
        "rule": [
            "d14719"
        ]
    },
    {
        "instruction": "",
        "id": "q14720",
        "input": "python delete not empty directory",
        "output": "",
        "rule": [
            "d14720"
        ]
    },
    {
        "instruction": "",
        "id": "q14721",
        "input": "check if a matrix in singular python",
        "output": "",
        "rule": [
            "d14721"
        ]
    },
    {
        "instruction": "",
        "id": "q14722",
        "input": "python delete variable remove from memory",
        "output": "",
        "rule": [
            "d14722"
        ]
    },
    {
        "instruction": "",
        "id": "q14723",
        "input": "check if argumnets are blank python",
        "output": "",
        "rule": [
            "d14723"
        ]
    },
    {
        "instruction": "",
        "id": "q14724",
        "input": "python deleting printout from the command window",
        "output": "",
        "rule": [
            "d14724"
        ]
    },
    {
        "instruction": "",
        "id": "q14725",
        "input": "check if input is int python",
        "output": "",
        "rule": [
            "d14725"
        ]
    },
    {
        "instruction": "",
        "id": "q14726",
        "input": "python deleting spaces in string",
        "output": "",
        "rule": [
            "d14726"
        ]
    },
    {
        "instruction": "",
        "id": "q14727",
        "input": "check if item is folder or file in python",
        "output": "",
        "rule": [
            "d14727"
        ]
    },
    {
        "instruction": "",
        "id": "q14728",
        "input": "python deserialize json to object",
        "output": "",
        "rule": [
            "d14728"
        ]
    },
    {
        "instruction": "",
        "id": "q14729",
        "input": "check if key in dictionary either case python",
        "output": "",
        "rule": [
            "d14729"
        ]
    },
    {
        "instruction": "",
        "id": "q14730",
        "input": "python destructor database connections",
        "output": "",
        "rule": [
            "d14730"
        ]
    },
    {
        "instruction": "",
        "id": "q14731",
        "input": "check if python object isiterable",
        "output": "",
        "rule": [
            "d14731"
        ]
    },
    {
        "instruction": "",
        "id": "q14732",
        "input": "python detect file is locked",
        "output": "",
        "rule": [
            "d14732"
        ]
    },
    {
        "instruction": "",
        "id": "q14733",
        "input": "check if row is none python",
        "output": "",
        "rule": [
            "d14733"
        ]
    },
    {
        "instruction": "",
        "id": "q14734",
        "input": "check if stdin is provided python",
        "output": "",
        "rule": [
            "d14734"
        ]
    },
    {
        "instruction": "",
        "id": "q14735",
        "input": "check if string is a valid url python",
        "output": "",
        "rule": [
            "d14735"
        ]
    },
    {
        "instruction": "",
        "id": "q14736",
        "input": "python determine if list is nested",
        "output": "",
        "rule": [
            "d14736"
        ]
    },
    {
        "instruction": "",
        "id": "q14737",
        "input": "check if the row name has some kind of string in python",
        "output": "",
        "rule": [
            "d14737"
        ]
    },
    {
        "instruction": "",
        "id": "q14738",
        "input": "python determine if list numbers are sequence",
        "output": "",
        "rule": [
            "d14738"
        ]
    },
    {
        "instruction": "",
        "id": "q14739",
        "input": "python determining lowpass filter cutoff",
        "output": "",
        "rule": [
            "d14739"
        ]
    },
    {
        "instruction": "",
        "id": "q14740",
        "input": "check if two strings have any words in common python",
        "output": "",
        "rule": [
            "d14740"
        ]
    },
    {
        "instruction": "",
        "id": "q14741",
        "input": "check if value is an instance of float python",
        "output": "",
        "rule": [
            "d14741"
        ]
    },
    {
        "instruction": "",
        "id": "q14742",
        "input": "python dict change values with dict comprehension",
        "output": "",
        "rule": [
            "d14742"
        ]
    },
    {
        "instruction": "",
        "id": "q14743",
        "input": "check number of rows in data frame python",
        "output": "",
        "rule": [
            "d14743"
        ]
    },
    {
        "instruction": "",
        "id": "q14744",
        "input": "python dict exclude values",
        "output": "",
        "rule": [
            "d14744"
        ]
    },
    {
        "instruction": "",
        "id": "q14745",
        "input": "check python server is working or not",
        "output": "",
        "rule": [
            "d14745"
        ]
    },
    {
        "instruction": "",
        "id": "q14746",
        "input": "python dict output pretty without quote",
        "output": "",
        "rule": [
            "d14746"
        ]
    },
    {
        "instruction": "",
        "id": "q14747",
        "input": "check size of a file python",
        "output": "",
        "rule": [
            "d14747"
        ]
    },
    {
        "instruction": "",
        "id": "q14748",
        "input": "python dict pop key item",
        "output": "",
        "rule": [
            "d14748"
        ]
    },
    {
        "instruction": "",
        "id": "q14749",
        "input": "check the file existing and delete in python",
        "output": "",
        "rule": [
            "d14749"
        ]
    },
    {
        "instruction": "",
        "id": "q14750",
        "input": "python dict remove null",
        "output": "",
        "rule": [
            "d14750"
        ]
    },
    {
        "instruction": "",
        "id": "q14751",
        "input": "check time elapsed in function python",
        "output": "",
        "rule": [
            "d14751"
        ]
    },
    {
        "instruction": "",
        "id": "q14752",
        "input": "python dict remove null values",
        "output": "",
        "rule": [
            "d14752"
        ]
    },
    {
        "instruction": "",
        "id": "q14753",
        "input": "check time gap between retries python",
        "output": "",
        "rule": [
            "d14753"
        ]
    },
    {
        "instruction": "",
        "id": "q14754",
        "input": "check to see if a file exists in python",
        "output": "",
        "rule": [
            "d14754"
        ]
    },
    {
        "instruction": "",
        "id": "q14755",
        "input": "python dictionary example with multiple objects",
        "output": "",
        "rule": [
            "d14755"
        ]
    },
    {
        "instruction": "",
        "id": "q14756",
        "input": "check valid dictionary key python",
        "output": "",
        "rule": [
            "d14756"
        ]
    },
    {
        "instruction": "",
        "id": "q14757",
        "input": "python dictionary key with no value",
        "output": "",
        "rule": [
            "d14757"
        ]
    },
    {
        "instruction": "",
        "id": "q14758",
        "input": "check websocket is closed python",
        "output": "",
        "rule": [
            "d14758"
        ]
    },
    {
        "instruction": "",
        "id": "q14759",
        "input": "python dijkstra using adjacency matrix",
        "output": "",
        "rule": [
            "d14759"
        ]
    },
    {
        "instruction": "",
        "id": "q14760",
        "input": "check whether a string contains something python",
        "output": "",
        "rule": [
            "d14760"
        ]
    },
    {
        "instruction": "",
        "id": "q14761",
        "input": "python distinguish string float and string string",
        "output": "",
        "rule": [
            "d14761"
        ]
    },
    {
        "instruction": "",
        "id": "q14762",
        "input": "check whether the string is empty in python",
        "output": "",
        "rule": [
            "d14762"
        ]
    },
    {
        "instruction": "",
        "id": "q14763",
        "input": "python django contenttype serializer",
        "output": "",
        "rule": [
            "d14763"
        ]
    },
    {
        "instruction": "",
        "id": "q14764",
        "input": "checking for equality python",
        "output": "",
        "rule": [
            "d14764"
        ]
    },
    {
        "instruction": "",
        "id": "q14765",
        "input": "python django get unique values",
        "output": "",
        "rule": [
            "d14765"
        ]
    },
    {
        "instruction": "",
        "id": "q14766",
        "input": "checking if a file is in a folder python",
        "output": "",
        "rule": [
            "d14766"
        ]
    },
    {
        "instruction": "",
        "id": "q14767",
        "input": "python django models booleanfield default",
        "output": "",
        "rule": [
            "d14767"
        ]
    },
    {
        "instruction": "",
        "id": "q14768",
        "input": "checking if field is empty python",
        "output": "",
        "rule": [
            "d14768"
        ]
    },
    {
        "instruction": "",
        "id": "q14769",
        "input": "python django render page with param",
        "output": "",
        "rule": [
            "d14769"
        ]
    },
    {
        "instruction": "",
        "id": "q14770",
        "input": "checking if punctuation is in python string",
        "output": "",
        "rule": [
            "d14770"
        ]
    },
    {
        "instruction": "",
        "id": "q14771",
        "input": "python django {% load static%}",
        "output": "",
        "rule": [
            "d14771"
        ]
    },
    {
        "instruction": "",
        "id": "q14772",
        "input": "chmod for windows pythong",
        "output": "",
        "rule": [
            "d14772"
        ]
    },
    {
        "instruction": "",
        "id": "q14773",
        "input": "python docs tag for methods",
        "output": "",
        "rule": [
            "d14773"
        ]
    },
    {
        "instruction": "",
        "id": "q14774",
        "input": "clang python function boundary",
        "output": "",
        "rule": [
            "d14774"
        ]
    },
    {
        "instruction": "",
        "id": "q14775",
        "input": "close all figures in python matplotlib",
        "output": "",
        "rule": [
            "d14775"
        ]
    },
    {
        "instruction": "",
        "id": "q14776",
        "input": "python does add and remove element to dictionary increase the cost",
        "output": "",
        "rule": [
            "d14776"
        ]
    },
    {
        "instruction": "",
        "id": "q14777",
        "input": "close database connecting python",
        "output": "",
        "rule": [
            "d14777"
        ]
    },
    {
        "instruction": "",
        "id": "q14778",
        "input": "python does readline flush the buffer",
        "output": "",
        "rule": [
            "d14778"
        ]
    },
    {
        "instruction": "",
        "id": "q14779",
        "input": "close serial port python after time",
        "output": "",
        "rule": [
            "d14779"
        ]
    },
    {
        "instruction": "",
        "id": "q14780",
        "input": "python dot derivative string",
        "output": "",
        "rule": [
            "d14780"
        ]
    },
    {
        "instruction": "",
        "id": "q14781",
        "input": "closest time value before an index python",
        "output": "",
        "rule": [
            "d14781"
        ]
    },
    {
        "instruction": "",
        "id": "q14782",
        "input": "python dot on two array of vectors",
        "output": "",
        "rule": [
            "d14782"
        ]
    },
    {
        "instruction": "",
        "id": "q14783",
        "input": "cls clear screen python windows",
        "output": "",
        "rule": [
            "d14783"
        ]
    },
    {
        "instruction": "",
        "id": "q14784",
        "input": "python downsample based on each group",
        "output": "",
        "rule": [
            "d14784"
        ]
    },
    {
        "instruction": "",
        "id": "q14785",
        "input": "code python add entity function",
        "output": "",
        "rule": [
            "d14785"
        ]
    },
    {
        "instruction": "",
        "id": "q14786",
        "input": "python draw line through 2d array",
        "output": "",
        "rule": [
            "d14786"
        ]
    },
    {
        "instruction": "",
        "id": "q14787",
        "input": "code to go to the next key without for loop python",
        "output": "",
        "rule": [
            "d14787"
        ]
    },
    {
        "instruction": "",
        "id": "q14788",
        "input": "python dump dict yaml not",
        "output": "",
        "rule": [
            "d14788"
        ]
    },
    {
        "instruction": "",
        "id": "q14789",
        "input": "combine python lists into a new list",
        "output": "",
        "rule": [
            "d14789"
        ]
    },
    {
        "instruction": "",
        "id": "q14790",
        "input": "python dynamic image display",
        "output": "",
        "rule": [
            "d14790"
        ]
    },
    {
        "instruction": "",
        "id": "q14791",
        "input": "combine raw and docstring in python",
        "output": "",
        "rule": [
            "d14791"
        ]
    },
    {
        "instruction": "",
        "id": "q14792",
        "input": "python dynamicly load a method from another python file",
        "output": "",
        "rule": [
            "d14792"
        ]
    },
    {
        "instruction": "",
        "id": "q14793",
        "input": "common double underscore methods in python",
        "output": "",
        "rule": [
            "d14793"
        ]
    },
    {
        "instruction": "",
        "id": "q14794",
        "input": "python dynamo output list of lists",
        "output": "",
        "rule": [
            "d14794"
        ]
    },
    {
        "instruction": "",
        "id": "q14795",
        "input": "compare single words for similarity python",
        "output": "",
        "rule": [
            "d14795"
        ]
    },
    {
        "instruction": "",
        "id": "q14796",
        "input": "python elapsed time using datetime in minutes",
        "output": "",
        "rule": [
            "d14796"
        ]
    },
    {
        "instruction": "",
        "id": "q14797",
        "input": "comparing identical keys between 2 dictionarys python then returning results",
        "output": "",
        "rule": [
            "d14797"
        ]
    },
    {
        "instruction": "",
        "id": "q14798",
        "input": "python elasticsearch change index setting",
        "output": "",
        "rule": [
            "d14798"
        ]
    },
    {
        "instruction": "",
        "id": "q14799",
        "input": "comparing multiple strings in python",
        "output": "",
        "rule": [
            "d14799"
        ]
    },
    {
        "instruction": "",
        "id": "q14800",
        "input": "python elasticsearch list indexes",
        "output": "",
        "rule": [
            "d14800"
        ]
    },
    {
        "instruction": "",
        "id": "q14801",
        "input": "comparing string and int in python",
        "output": "",
        "rule": [
            "d14801"
        ]
    },
    {
        "instruction": "",
        "id": "q14802",
        "input": "python elasticsearch return hits",
        "output": "",
        "rule": [
            "d14802"
        ]
    },
    {
        "instruction": "",
        "id": "q14803",
        "input": "comparison of two image using python sse",
        "output": "",
        "rule": [
            "d14803"
        ]
    },
    {
        "instruction": "",
        "id": "q14804",
        "input": "compute average color value in python",
        "output": "",
        "rule": [
            "d14804"
        ]
    },
    {
        "instruction": "",
        "id": "q14805",
        "input": "python enable strict mode",
        "output": "",
        "rule": [
            "d14805"
        ]
    },
    {
        "instruction": "",
        "id": "q14806",
        "input": "compute dissimilarity matrix for categorical data python",
        "output": "",
        "rule": [
            "d14806"
        ]
    },
    {
        "instruction": "",
        "id": "q14807",
        "input": "python enum get name",
        "output": "",
        "rule": [
            "d14807"
        ]
    },
    {
        "instruction": "",
        "id": "q14808",
        "input": "compute distance from centroid in python",
        "output": "",
        "rule": [
            "d14808"
        ]
    },
    {
        "instruction": "",
        "id": "q14809",
        "input": "python enum get names",
        "output": "",
        "rule": [
            "d14809"
        ]
    },
    {
        "instruction": "",
        "id": "q14810",
        "input": "confusion matrix doesn't match accuracy python",
        "output": "",
        "rule": [
            "d14810"
        ]
    },
    {
        "instruction": "",
        "id": "q14811",
        "input": "python enum get value by name",
        "output": "",
        "rule": [
            "d14811"
        ]
    },
    {
        "instruction": "",
        "id": "q14812",
        "input": "confusion matrix example code in python",
        "output": "",
        "rule": [
            "d14812"
        ]
    },
    {
        "instruction": "",
        "id": "q14813",
        "input": "python enum value to enumerator",
        "output": "",
        "rule": [
            "d14813"
        ]
    },
    {
        "instruction": "",
        "id": "q14814",
        "input": "confusion matrix visualization python",
        "output": "",
        "rule": [
            "d14814"
        ]
    },
    {
        "instruction": "",
        "id": "q14815",
        "input": "python environment location directory is not empty",
        "output": "",
        "rule": [
            "d14815"
        ]
    },
    {
        "instruction": "",
        "id": "q14816",
        "input": "connexion get instance python",
        "output": "",
        "rule": [
            "d14816"
        ]
    },
    {
        "instruction": "",
        "id": "q14817",
        "input": "python errno already in use",
        "output": "",
        "rule": [
            "d14817"
        ]
    },
    {
        "instruction": "",
        "id": "q14818",
        "input": "construct string with list python",
        "output": "",
        "rule": [
            "d14818"
        ]
    },
    {
        "instruction": "",
        "id": "q14819",
        "input": "python escape percent symbol in format",
        "output": "",
        "rule": [
            "d14819"
        ]
    },
    {
        "instruction": "",
        "id": "q14820",
        "input": "continue in try excpet python",
        "output": "",
        "rule": [
            "d14820"
        ]
    },
    {
        "instruction": "",
        "id": "q14821",
        "input": "python event loop synchronous call",
        "output": "",
        "rule": [
            "d14821"
        ]
    },
    {
        "instruction": "",
        "id": "q14822",
        "input": "converts a string into a number in python",
        "output": "",
        "rule": [
            "d14822"
        ]
    },
    {
        "instruction": "",
        "id": "q14823",
        "input": "python expandvars non defined",
        "output": "",
        "rule": [
            "d14823"
        ]
    },
    {
        "instruction": "",
        "id": "q14824",
        "input": "converty str to bytes python",
        "output": "",
        "rule": [
            "d14824"
        ]
    },
    {
        "instruction": "",
        "id": "q14825",
        "input": "python expect indent block",
        "output": "",
        "rule": [
            "d14825"
        ]
    },
    {
        "instruction": "",
        "id": "q14826",
        "input": "copy without referencing python",
        "output": "",
        "rule": [
            "d14826"
        ]
    },
    {
        "instruction": "",
        "id": "q14827",
        "input": "python export graphviz generate graph",
        "output": "",
        "rule": [
            "d14827"
        ]
    },
    {
        "instruction": "",
        "id": "q14828",
        "input": "cosine similarity python between users",
        "output": "",
        "rule": [
            "d14828"
        ]
    },
    {
        "instruction": "",
        "id": "q14829",
        "input": "python extend dictionary with other dictionary",
        "output": "",
        "rule": [
            "d14829"
        ]
    },
    {
        "instruction": "",
        "id": "q14830",
        "input": "count empty spaces in a line python",
        "output": "",
        "rule": [
            "d14830"
        ]
    },
    {
        "instruction": "",
        "id": "q14831",
        "input": "python extending dict using list comprehension",
        "output": "",
        "rule": [
            "d14831"
        ]
    },
    {
        "instruction": "",
        "id": "q14832",
        "input": "count node and children in tree python",
        "output": "",
        "rule": [
            "d14832"
        ]
    },
    {
        "instruction": "",
        "id": "q14833",
        "input": "python extract 5 pages at a time from pdf",
        "output": "",
        "rule": [
            "d14833"
        ]
    },
    {
        "instruction": "",
        "id": "q14834",
        "input": "count unique values in a list python",
        "output": "",
        "rule": [
            "d14834"
        ]
    },
    {
        "instruction": "",
        "id": "q14835",
        "input": "python extract text from all child nodes",
        "output": "",
        "rule": [
            "d14835"
        ]
    },
    {
        "instruction": "",
        "id": "q14836",
        "input": "counting the highest number in coloumn using python",
        "output": "",
        "rule": [
            "d14836"
        ]
    },
    {
        "instruction": "",
        "id": "q14837",
        "input": "python fast jaccard similarity",
        "output": "",
        "rule": [
            "d14837"
        ]
    },
    {
        "instruction": "",
        "id": "q14838",
        "input": "couting length of list in python",
        "output": "",
        "rule": [
            "d14838"
        ]
    },
    {
        "instruction": "",
        "id": "q14839",
        "input": "python fft from real data",
        "output": "",
        "rule": [
            "d14839"
        ]
    },
    {
        "instruction": "",
        "id": "q14840",
        "input": "covariance matrix between two vectors in python",
        "output": "",
        "rule": [
            "d14840"
        ]
    },
    {
        "instruction": "",
        "id": "q14841",
        "input": "python figure whole page",
        "output": "",
        "rule": [
            "d14841"
        ]
    },
    {
        "instruction": "",
        "id": "q14842",
        "input": "covert type of list python",
        "output": "",
        "rule": [
            "d14842"
        ]
    },
    {
        "instruction": "",
        "id": "q14843",
        "input": "python file chmod permission",
        "output": "",
        "rule": [
            "d14843"
        ]
    },
    {
        "instruction": "",
        "id": "q14844",
        "input": "craete empty python set",
        "output": "",
        "rule": [
            "d14844"
        ]
    },
    {
        "instruction": "",
        "id": "q14845",
        "input": "python file flush api",
        "output": "",
        "rule": [
            "d14845"
        ]
    },
    {
        "instruction": "",
        "id": "q14846",
        "input": "create a deepcopy of self in python",
        "output": "",
        "rule": [
            "d14846"
        ]
    },
    {
        "instruction": "",
        "id": "q14847",
        "input": "python file get index of the line",
        "output": "",
        "rule": [
            "d14847"
        ]
    },
    {
        "instruction": "",
        "id": "q14848",
        "input": "create a dir in python",
        "output": "",
        "rule": [
            "d14848"
        ]
    },
    {
        "instruction": "",
        "id": "q14849",
        "input": "python file modified time datetime",
        "output": "",
        "rule": [
            "d14849"
        ]
    },
    {
        "instruction": "",
        "id": "q14850",
        "input": "create a file and write a string to it in python",
        "output": "",
        "rule": [
            "d14850"
        ]
    },
    {
        "instruction": "",
        "id": "q14851",
        "input": "python file not running with permissions set to 644",
        "output": "",
        "rule": [
            "d14851"
        ]
    },
    {
        "instruction": "",
        "id": "q14852",
        "input": "create a function for the normal distrubution pdf python",
        "output": "",
        "rule": [
            "d14852"
        ]
    },
    {
        "instruction": "",
        "id": "q14853",
        "input": "python file open and close",
        "output": "",
        "rule": [
            "d14853"
        ]
    },
    {
        "instruction": "",
        "id": "q14854",
        "input": "create a list to a dictionary python",
        "output": "",
        "rule": [
            "d14854"
        ]
    },
    {
        "instruction": "",
        "id": "q14855",
        "input": "python file with comments",
        "output": "",
        "rule": [
            "d14855"
        ]
    },
    {
        "instruction": "",
        "id": "q14856",
        "input": "create a normal distribution in python",
        "output": "",
        "rule": [
            "d14856"
        ]
    },
    {
        "instruction": "",
        "id": "q14857",
        "input": "python fill and replace list",
        "output": "",
        "rule": [
            "d14857"
        ]
    },
    {
        "instruction": "",
        "id": "q14858",
        "input": "create an iterable in python",
        "output": "",
        "rule": [
            "d14858"
        ]
    },
    {
        "instruction": "",
        "id": "q14859",
        "input": "python fill missing values in two columns",
        "output": "",
        "rule": [
            "d14859"
        ]
    },
    {
        "instruction": "",
        "id": "q14860",
        "input": "create custom iterable python 3",
        "output": "",
        "rule": [
            "d14860"
        ]
    },
    {
        "instruction": "",
        "id": "q14861",
        "input": "python filter a dict by condition on key",
        "output": "",
        "rule": [
            "d14861"
        ]
    },
    {
        "instruction": "",
        "id": "q14862",
        "input": "create matrix using for python",
        "output": "",
        "rule": [
            "d14862"
        ]
    },
    {
        "instruction": "",
        "id": "q14863",
        "input": "python filter integer from string",
        "output": "",
        "rule": [
            "d14863"
        ]
    },
    {
        "instruction": "",
        "id": "q14864",
        "input": "create random sparse matrix python",
        "output": "",
        "rule": [
            "d14864"
        ]
    },
    {
        "instruction": "",
        "id": "q14865",
        "input": "python filtering keys in dict",
        "output": "",
        "rule": [
            "d14865"
        ]
    },
    {
        "instruction": "",
        "id": "q14866",
        "input": "python finditer match multiple patterns",
        "output": "",
        "rule": [
            "d14866"
        ]
    },
    {
        "instruction": "",
        "id": "q14867",
        "input": "creating a dictionary python with keys and outer dictionary",
        "output": "",
        "rule": [
            "d14867"
        ]
    },
    {
        "instruction": "",
        "id": "q14868",
        "input": "python first n elements from iterable",
        "output": "",
        "rule": [
            "d14868"
        ]
    },
    {
        "instruction": "",
        "id": "q14869",
        "input": "creating a low pass filter in python",
        "output": "",
        "rule": [
            "d14869"
        ]
    },
    {
        "instruction": "",
        "id": "q14870",
        "input": "python fits add a column",
        "output": "",
        "rule": [
            "d14870"
        ]
    },
    {
        "instruction": "",
        "id": "q14871",
        "input": "creating a python list from file with comments",
        "output": "",
        "rule": [
            "d14871"
        ]
    },
    {
        "instruction": "",
        "id": "q14872",
        "input": "python flask css background relative path",
        "output": "",
        "rule": [
            "d14872"
        ]
    },
    {
        "instruction": "",
        "id": "q14873",
        "input": "creating a python object with datetime variables",
        "output": "",
        "rule": [
            "d14873"
        ]
    },
    {
        "instruction": "",
        "id": "q14874",
        "input": "python flask for production",
        "output": "",
        "rule": [
            "d14874"
        ]
    },
    {
        "instruction": "",
        "id": "q14875",
        "input": "creating object from json in python",
        "output": "",
        "rule": [
            "d14875"
        ]
    },
    {
        "instruction": "",
        "id": "q14876",
        "input": "python flask how to clear session data and cookies",
        "output": "",
        "rule": [
            "d14876"
        ]
    },
    {
        "instruction": "",
        "id": "q14877",
        "input": "cron to restart python killed",
        "output": "",
        "rule": [
            "d14877"
        ]
    },
    {
        "instruction": "",
        "id": "q14878",
        "input": "python flask how to return 404",
        "output": "",
        "rule": [
            "d14878"
        ]
    },
    {
        "instruction": "",
        "id": "q14879",
        "input": "cuda get memory address of variable python",
        "output": "",
        "rule": [
            "d14879"
        ]
    },
    {
        "instruction": "",
        "id": "q14880",
        "input": "python flask if and else jinja",
        "output": "",
        "rule": [
            "d14880"
        ]
    },
    {
        "instruction": "",
        "id": "q14881",
        "input": "cumulative product of a list in python",
        "output": "",
        "rule": [
            "d14881"
        ]
    },
    {
        "instruction": "",
        "id": "q14882",
        "input": "python flask if method is post",
        "output": "",
        "rule": [
            "d14882"
        ]
    },
    {
        "instruction": "",
        "id": "q14883",
        "input": "cv2 python imshow gray screen",
        "output": "",
        "rule": [
            "d14883"
        ]
    },
    {
        "instruction": "",
        "id": "q14884",
        "input": "python flask init py file",
        "output": "",
        "rule": [
            "d14884"
        ]
    },
    {
        "instruction": "",
        "id": "q14885",
        "input": "python flask parse immutablemultidict",
        "output": "",
        "rule": [
            "d14885"
        ]
    },
    {
        "instruction": "",
        "id": "q14886",
        "input": "data frame merge outer join python",
        "output": "",
        "rule": [
            "d14886"
        ]
    },
    {
        "instruction": "",
        "id": "q14887",
        "input": "python flask print all request message",
        "output": "",
        "rule": [
            "d14887"
        ]
    },
    {
        "instruction": "",
        "id": "q14888",
        "input": "data frame with duplicate index values python",
        "output": "",
        "rule": [
            "d14888"
        ]
    },
    {
        "instruction": "",
        "id": "q14889",
        "input": "datastructure to hold coordinates in python",
        "output": "",
        "rule": [
            "d14889"
        ]
    },
    {
        "instruction": "",
        "id": "q14890",
        "input": "python flask restart programmatically",
        "output": "",
        "rule": [
            "d14890"
        ]
    },
    {
        "instruction": "",
        "id": "q14891",
        "input": "date extract from string in python",
        "output": "",
        "rule": [
            "d14891"
        ]
    },
    {
        "instruction": "",
        "id": "q14892",
        "input": "python flask return mimetype",
        "output": "",
        "rule": [
            "d14892"
        ]
    },
    {
        "instruction": "",
        "id": "q14893",
        "input": "date parse method python",
        "output": "",
        "rule": [
            "d14893"
        ]
    },
    {
        "instruction": "",
        "id": "q14894",
        "input": "python flask serve static files",
        "output": "",
        "rule": [
            "d14894"
        ]
    },
    {
        "instruction": "",
        "id": "q14895",
        "input": "date string from epoch python",
        "output": "",
        "rule": [
            "d14895"
        ]
    },
    {
        "instruction": "",
        "id": "q14896",
        "input": "python flask static files server",
        "output": "",
        "rule": [
            "d14896"
        ]
    },
    {
        "instruction": "",
        "id": "q14897",
        "input": "datetime obeject to date python",
        "output": "",
        "rule": [
            "d14897"
        ]
    },
    {
        "instruction": "",
        "id": "q14898",
        "input": "python flask static sub folder",
        "output": "",
        "rule": [
            "d14898"
        ]
    },
    {
        "instruction": "",
        "id": "q14899",
        "input": "datetime to timestamp milisecond python",
        "output": "",
        "rule": [
            "d14899"
        ]
    },
    {
        "instruction": "",
        "id": "q14900",
        "input": "python flatten a list numpy",
        "output": "",
        "rule": [
            "d14900"
        ]
    },
    {
        "instruction": "",
        "id": "q14901",
        "input": "days to end of the quarter python",
        "output": "",
        "rule": [
            "d14901"
        ]
    },
    {
        "instruction": "",
        "id": "q14902",
        "input": "python fonconfig font properties",
        "output": "",
        "rule": [
            "d14902"
        ]
    },
    {
        "instruction": "",
        "id": "q14903",
        "input": "dct to an array in python",
        "output": "",
        "rule": [
            "d14903"
        ]
    },
    {
        "instruction": "",
        "id": "q14904",
        "input": "python font in figure not editable",
        "output": "",
        "rule": [
            "d14904"
        ]
    },
    {
        "instruction": "",
        "id": "q14905",
        "input": "decision tree graph in python",
        "output": "",
        "rule": [
            "d14905"
        ]
    },
    {
        "instruction": "",
        "id": "q14906",
        "input": "python for dictionary of dictonaries how to know the levels",
        "output": "",
        "rule": [
            "d14906"
        ]
    },
    {
        "instruction": "",
        "id": "q14907",
        "input": "declaring custom type list in python",
        "output": "",
        "rule": [
            "d14907"
        ]
    },
    {
        "instruction": "",
        "id": "q14908",
        "input": "python force destroy object",
        "output": "",
        "rule": [
            "d14908"
        ]
    },
    {
        "instruction": "",
        "id": "q14909",
        "input": "python force output to be printer",
        "output": "",
        "rule": [
            "d14909"
        ]
    },
    {
        "instruction": "",
        "id": "q14910",
        "input": "decreasing the contrast of an image using python",
        "output": "",
        "rule": [
            "d14910"
        ]
    },
    {
        "instruction": "",
        "id": "q14911",
        "input": "python format amount commas no decimals",
        "output": "",
        "rule": [
            "d14911"
        ]
    },
    {
        "instruction": "",
        "id": "q14912",
        "input": "default string encoding python",
        "output": "",
        "rule": [
            "d14912"
        ]
    },
    {
        "instruction": "",
        "id": "q14913",
        "input": "python format float string negative parenthesis",
        "output": "",
        "rule": [
            "d14913"
        ]
    },
    {
        "instruction": "",
        "id": "q14914",
        "input": "define a boolen in python",
        "output": "",
        "rule": [
            "d14914"
        ]
    },
    {
        "instruction": "",
        "id": "q14915",
        "input": "python format minutes seconds print",
        "output": "",
        "rule": [
            "d14915"
        ]
    },
    {
        "instruction": "",
        "id": "q14916",
        "input": "delete a cache automatically python",
        "output": "",
        "rule": [
            "d14916"
        ]
    },
    {
        "instruction": "",
        "id": "q14917",
        "input": "python format to width",
        "output": "",
        "rule": [
            "d14917"
        ]
    },
    {
        "instruction": "",
        "id": "q14918",
        "input": "delete a node in link list in python",
        "output": "",
        "rule": [
            "d14918"
        ]
    },
    {
        "instruction": "",
        "id": "q14919",
        "input": "python from rotation vector to quatemiond",
        "output": "",
        "rule": [
            "d14919"
        ]
    },
    {
        "instruction": "",
        "id": "q14920",
        "input": "delete a python virtual environment",
        "output": "",
        "rule": [
            "d14920"
        ]
    },
    {
        "instruction": "",
        "id": "q14921",
        "input": "python fromtimestamp with timezone",
        "output": "",
        "rule": [
            "d14921"
        ]
    },
    {
        "instruction": "",
        "id": "q14922",
        "input": "delete all element dictionary in python",
        "output": "",
        "rule": [
            "d14922"
        ]
    },
    {
        "instruction": "",
        "id": "q14923",
        "input": "python ftp can not finish",
        "output": "",
        "rule": [
            "d14923"
        ]
    },
    {
        "instruction": "",
        "id": "q14924",
        "input": "delete an existing file in python",
        "output": "",
        "rule": [
            "d14924"
        ]
    },
    {
        "instruction": "",
        "id": "q14925",
        "input": "delete an item from directory python",
        "output": "",
        "rule": [
            "d14925"
        ]
    },
    {
        "instruction": "",
        "id": "q14926",
        "input": "python function for manhattan distance",
        "output": "",
        "rule": [
            "d14926"
        ]
    },
    {
        "instruction": "",
        "id": "q14927",
        "input": "delete file from s3 bucket python",
        "output": "",
        "rule": [
            "d14927"
        ]
    },
    {
        "instruction": "",
        "id": "q14928",
        "input": "python function for unique in string",
        "output": "",
        "rule": [
            "d14928"
        ]
    },
    {
        "instruction": "",
        "id": "q14929",
        "input": "delete file if exist in python",
        "output": "",
        "rule": [
            "d14929"
        ]
    },
    {
        "instruction": "",
        "id": "q14930",
        "input": "delete object python to release memory",
        "output": "",
        "rule": [
            "d14930"
        ]
    },
    {
        "instruction": "",
        "id": "q14931",
        "input": "python function outer scope",
        "output": "",
        "rule": [
            "d14931"
        ]
    },
    {
        "instruction": "",
        "id": "q14932",
        "input": "delete whitespace from a string python",
        "output": "",
        "rule": [
            "d14932"
        ]
    },
    {
        "instruction": "",
        "id": "q14933",
        "input": "python function to check if something exists",
        "output": "",
        "rule": [
            "d14933"
        ]
    },
    {
        "instruction": "",
        "id": "q14934",
        "input": "deleting a key from a python shelve file",
        "output": "",
        "rule": [
            "d14934"
        ]
    },
    {
        "instruction": "",
        "id": "q14935",
        "input": "python gaussian probability distribution",
        "output": "",
        "rule": [
            "d14935"
        ]
    },
    {
        "instruction": "",
        "id": "q14936",
        "input": "deserialize object list from json in python",
        "output": "",
        "rule": [
            "d14936"
        ]
    },
    {
        "instruction": "",
        "id": "q14937",
        "input": "python generate a random file name",
        "output": "",
        "rule": [
            "d14937"
        ]
    },
    {
        "instruction": "",
        "id": "q14938",
        "input": "determine if a number is an integer python",
        "output": "",
        "rule": [
            "d14938"
        ]
    },
    {
        "instruction": "",
        "id": "q14939",
        "input": "python get a list item with default",
        "output": "",
        "rule": [
            "d14939"
        ]
    },
    {
        "instruction": "",
        "id": "q14940",
        "input": "determine time complexity of my python program",
        "output": "",
        "rule": [
            "d14940"
        ]
    },
    {
        "instruction": "",
        "id": "q14941",
        "input": "python get all column names with a string in it",
        "output": "",
        "rule": [
            "d14941"
        ]
    },
    {
        "instruction": "",
        "id": "q14942",
        "input": "determine whether a shape is square or not python",
        "output": "",
        "rule": [
            "d14942"
        ]
    },
    {
        "instruction": "",
        "id": "q14943",
        "input": "python get all followers in twitter by twitter api",
        "output": "",
        "rule": [
            "d14943"
        ]
    },
    {
        "instruction": "",
        "id": "q14944",
        "input": "determine whether or not a string is hex python",
        "output": "",
        "rule": [
            "d14944"
        ]
    },
    {
        "instruction": "",
        "id": "q14945",
        "input": "python get all headers of data frame",
        "output": "",
        "rule": [
            "d14945"
        ]
    },
    {
        "instruction": "",
        "id": "q14946",
        "input": "dictionary in python comoared to array",
        "output": "",
        "rule": [
            "d14946"
        ]
    },
    {
        "instruction": "",
        "id": "q14947",
        "input": "python get all local variables",
        "output": "",
        "rule": [
            "d14947"
        ]
    },
    {
        "instruction": "",
        "id": "q14948",
        "input": "dictionary pop python multiple keys",
        "output": "",
        "rule": [
            "d14948"
        ]
    },
    {
        "instruction": "",
        "id": "q14949",
        "input": "python get all staticmethod",
        "output": "",
        "rule": [
            "d14949"
        ]
    },
    {
        "instruction": "",
        "id": "q14950",
        "input": "dimensions of a variable in python",
        "output": "",
        "rule": [
            "d14950"
        ]
    },
    {
        "instruction": "",
        "id": "q14951",
        "input": "python get all table sqlite",
        "output": "",
        "rule": [
            "d14951"
        ]
    },
    {
        "instruction": "",
        "id": "q14952",
        "input": "discord bot python get user",
        "output": "",
        "rule": [
            "d14952"
        ]
    },
    {
        "instruction": "",
        "id": "q14953",
        "input": "python get amount of ram",
        "output": "",
        "rule": [
            "d14953"
        ]
    },
    {
        "instruction": "",
        "id": "q14954",
        "input": "discord python api get userid",
        "output": "",
        "rule": [
            "d14954"
        ]
    },
    {
        "instruction": "",
        "id": "q14955",
        "input": "display doctest results in python",
        "output": "",
        "rule": [
            "d14955"
        ]
    },
    {
        "instruction": "",
        "id": "q14956",
        "input": "python get barcode encoding type",
        "output": "",
        "rule": [
            "d14956"
        ]
    },
    {
        "instruction": "",
        "id": "q14957",
        "input": "display traceback in try catch python",
        "output": "",
        "rule": [
            "d14957"
        ]
    },
    {
        "instruction": "",
        "id": "q14958",
        "input": "python get clipboard contents",
        "output": "",
        "rule": [
            "d14958"
        ]
    },
    {
        "instruction": "",
        "id": "q14959",
        "input": "displaying confirm message in python",
        "output": "",
        "rule": [
            "d14959"
        ]
    },
    {
        "instruction": "",
        "id": "q14960",
        "input": "python get dict hash",
        "output": "",
        "rule": [
            "d14960"
        ]
    },
    {
        "instruction": "",
        "id": "q14961",
        "input": "distance of values in matrix python function",
        "output": "",
        "rule": [
            "d14961"
        ]
    },
    {
        "instruction": "",
        "id": "q14962",
        "input": "python get dictionary hash",
        "output": "",
        "rule": [
            "d14962"
        ]
    },
    {
        "instruction": "",
        "id": "q14963",
        "input": "django call python method views",
        "output": "",
        "rule": [
            "d14963"
        ]
    },
    {
        "instruction": "",
        "id": "q14964",
        "input": "python get distance 2 points",
        "output": "",
        "rule": [
            "d14964"
        ]
    },
    {
        "instruction": "",
        "id": "q14965",
        "input": "django python clone object",
        "output": "",
        "rule": [
            "d14965"
        ]
    },
    {
        "instruction": "",
        "id": "q14966",
        "input": "python get element from dict or default",
        "output": "",
        "rule": [
            "d14966"
        ]
    },
    {
        "instruction": "",
        "id": "q14967",
        "input": "django python load once",
        "output": "",
        "rule": [
            "d14967"
        ]
    },
    {
        "instruction": "",
        "id": "q14968",
        "input": "do you have to close a database in python",
        "output": "",
        "rule": [
            "d14968"
        ]
    },
    {
        "instruction": "",
        "id": "q14969",
        "input": "python get file parent path nane",
        "output": "",
        "rule": [
            "d14969"
        ]
    },
    {
        "instruction": "",
        "id": "q14970",
        "input": "does an xml element have a beginning property python",
        "output": "",
        "rule": [
            "d14970"
        ]
    },
    {
        "instruction": "",
        "id": "q14971",
        "input": "python get index from set of ranges",
        "output": "",
        "rule": [
            "d14971"
        ]
    },
    {
        "instruction": "",
        "id": "q14972",
        "input": "does indexing return a string or an int python",
        "output": "",
        "rule": [
            "d14972"
        ]
    },
    {
        "instruction": "",
        "id": "q14973",
        "input": "python get index of element from back",
        "output": "",
        "rule": [
            "d14973"
        ]
    },
    {
        "instruction": "",
        "id": "q14974",
        "input": "does python cap the amount of ram it uses",
        "output": "",
        "rule": [
            "d14974"
        ]
    },
    {
        "instruction": "",
        "id": "q14975",
        "input": "python get indices of char in string",
        "output": "",
        "rule": [
            "d14975"
        ]
    },
    {
        "instruction": "",
        "id": "q14976",
        "input": "does python have a char type",
        "output": "",
        "rule": [
            "d14976"
        ]
    },
    {
        "instruction": "",
        "id": "q14977",
        "input": "python get int from bytes",
        "output": "",
        "rule": [
            "d14977"
        ]
    },
    {
        "instruction": "",
        "id": "q14978",
        "input": "does python have a top of page",
        "output": "",
        "rule": [
            "d14978"
        ]
    },
    {
        "instruction": "",
        "id": "q14979",
        "input": "python get item in list by name",
        "output": "",
        "rule": [
            "d14979"
        ]
    },
    {
        "instruction": "",
        "id": "q14980",
        "input": "dot file parser python",
        "output": "",
        "rule": [
            "d14980"
        ]
    },
    {
        "instruction": "",
        "id": "q14981",
        "input": "python get item in namespace",
        "output": "",
        "rule": [
            "d14981"
        ]
    },
    {
        "instruction": "",
        "id": "q14982",
        "input": "dot product of 3d vector python",
        "output": "",
        "rule": [
            "d14982"
        ]
    },
    {
        "instruction": "",
        "id": "q14983",
        "input": "python get kwargs of a function",
        "output": "",
        "rule": [
            "d14983"
        ]
    },
    {
        "instruction": "",
        "id": "q14984",
        "input": "dot structure for python",
        "output": "",
        "rule": [
            "d14984"
        ]
    },
    {
        "instruction": "",
        "id": "q14985",
        "input": "python get last monday date",
        "output": "",
        "rule": [
            "d14985"
        ]
    },
    {
        "instruction": "",
        "id": "q14986",
        "input": "draw circle in python open gl",
        "output": "",
        "rule": [
            "d14986"
        ]
    },
    {
        "instruction": "",
        "id": "q14987",
        "input": "python get last n rows",
        "output": "",
        "rule": [
            "d14987"
        ]
    },
    {
        "instruction": "",
        "id": "q14988",
        "input": "duplicate a list in python basic",
        "output": "",
        "rule": [
            "d14988"
        ]
    },
    {
        "instruction": "",
        "id": "q14989",
        "input": "python get list of tables in database",
        "output": "",
        "rule": [
            "d14989"
        ]
    },
    {
        "instruction": "",
        "id": "q14990",
        "input": "dynamic bins histogram python",
        "output": "",
        "rule": [
            "d14990"
        ]
    },
    {
        "instruction": "",
        "id": "q14991",
        "input": "python get local language",
        "output": "",
        "rule": [
            "d14991"
        ]
    },
    {
        "instruction": "",
        "id": "q14992",
        "input": "easy way to compare two xml python",
        "output": "",
        "rule": [
            "d14992"
        ]
    },
    {
        "instruction": "",
        "id": "q14993",
        "input": "efficent way to fetch many records from database in python",
        "output": "",
        "rule": [
            "d14993"
        ]
    },
    {
        "instruction": "",
        "id": "q14994",
        "input": "python get max value from table",
        "output": "",
        "rule": [
            "d14994"
        ]
    },
    {
        "instruction": "",
        "id": "q14995",
        "input": "elasticsearch dsl python bulk delete",
        "output": "",
        "rule": [
            "d14995"
        ]
    },
    {
        "instruction": "",
        "id": "q14996",
        "input": "python get memory used",
        "output": "",
        "rule": [
            "d14996"
        ]
    },
    {
        "instruction": "",
        "id": "q14997",
        "input": "element wise multiplication matrix and vector python",
        "output": "",
        "rule": [
            "d14997"
        ]
    },
    {
        "instruction": "",
        "id": "q14998",
        "input": "eliminate space between strings python",
        "output": "",
        "rule": [
            "d14998"
        ]
    },
    {
        "instruction": "",
        "id": "q14999",
        "input": "python get most recently modified file",
        "output": "",
        "rule": [
            "d14999"
        ]
    },
    {
        "instruction": "",
        "id": "q15000",
        "input": "email validation in python with sql",
        "output": "",
        "rule": [
            "d15000"
        ]
    },
    {
        "instruction": "",
        "id": "q15001",
        "input": "python get name of model",
        "output": "",
        "rule": [
            "d15001"
        ]
    },
    {
        "instruction": "",
        "id": "q15002",
        "input": "encoding of a python file",
        "output": "",
        "rule": [
            "d15002"
        ]
    },
    {
        "instruction": "",
        "id": "q15003",
        "input": "python get now time local isoformat",
        "output": "",
        "rule": [
            "d15003"
        ]
    },
    {
        "instruction": "",
        "id": "q15004",
        "input": "epoch to timezone python",
        "output": "",
        "rule": [
            "d15004"
        ]
    },
    {
        "instruction": "",
        "id": "q15005",
        "input": "python get pdf page size",
        "output": "",
        "rule": [
            "d15005"
        ]
    },
    {
        "instruction": "",
        "id": "q15006",
        "input": "equivalent of python docstrings for js",
        "output": "",
        "rule": [
            "d15006"
        ]
    },
    {
        "instruction": "",
        "id": "q15007",
        "input": "python get rgb values from hex value",
        "output": "",
        "rule": [
            "d15007"
        ]
    },
    {
        "instruction": "",
        "id": "q15008",
        "input": "escaping delimiters in python mysql query",
        "output": "",
        "rule": [
            "d15008"
        ]
    },
    {
        "instruction": "",
        "id": "q15009",
        "input": "python get rid off file extend name",
        "output": "",
        "rule": [
            "d15009"
        ]
    },
    {
        "instruction": "",
        "id": "q15010",
        "input": "evaluate evaluate cdf for uniform distribution in python",
        "output": "",
        "rule": [
            "d15010"
        ]
    },
    {
        "instruction": "",
        "id": "q15011",
        "input": "python get shell encoding",
        "output": "",
        "rule": [
            "d15011"
        ]
    },
    {
        "instruction": "",
        "id": "q15012",
        "input": "evalulate equivalency of 2 objects python",
        "output": "",
        "rule": [
            "d15012"
        ]
    },
    {
        "instruction": "",
        "id": "q15013",
        "input": "python get size of all objects",
        "output": "",
        "rule": [
            "d15013"
        ]
    },
    {
        "instruction": "",
        "id": "q15014",
        "input": "event loop already running in python",
        "output": "",
        "rule": [
            "d15014"
        ]
    },
    {
        "instruction": "",
        "id": "q15015",
        "input": "python get the first and last day of month given year",
        "output": "",
        "rule": [
            "d15015"
        ]
    },
    {
        "instruction": "",
        "id": "q15016",
        "input": "exact quarter from the date column python",
        "output": "",
        "rule": [
            "d15016"
        ]
    },
    {
        "instruction": "",
        "id": "q15017",
        "input": "python get the first object in a list",
        "output": "",
        "rule": [
            "d15017"
        ]
    },
    {
        "instruction": "",
        "id": "q15018",
        "input": "exclude python test from project",
        "output": "",
        "rule": [
            "d15018"
        ]
    },
    {
        "instruction": "",
        "id": "q15019",
        "input": "python get the index at that position",
        "output": "",
        "rule": [
            "d15019"
        ]
    },
    {
        "instruction": "",
        "id": "q15020",
        "input": "expord a data frame from python",
        "output": "",
        "rule": [
            "d15020"
        ]
    },
    {
        "instruction": "",
        "id": "q15021",
        "input": "python get the index of an iteratable",
        "output": "",
        "rule": [
            "d15021"
        ]
    },
    {
        "instruction": "",
        "id": "q15022",
        "input": "extract a date from date and time python",
        "output": "",
        "rule": [
            "d15022"
        ]
    },
    {
        "instruction": "",
        "id": "q15023",
        "input": "python get the key of specific value in dictionary",
        "output": "",
        "rule": [
            "d15023"
        ]
    },
    {
        "instruction": "",
        "id": "q15024",
        "input": "extract day from epoch timestamp python",
        "output": "",
        "rule": [
            "d15024"
        ]
    },
    {
        "instruction": "",
        "id": "q15025",
        "input": "python get timestamp seconds since epoch",
        "output": "",
        "rule": [
            "d15025"
        ]
    },
    {
        "instruction": "",
        "id": "q15026",
        "input": "extract range from string python",
        "output": "",
        "rule": [
            "d15026"
        ]
    },
    {
        "instruction": "",
        "id": "q15027",
        "input": "python get timezone gmt utc offset",
        "output": "",
        "rule": [
            "d15027"
        ]
    },
    {
        "instruction": "",
        "id": "q15028",
        "input": "extract tokens from a coulmns text of a file in python",
        "output": "",
        "rule": [
            "d15028"
        ]
    },
    {
        "instruction": "",
        "id": "q15029",
        "input": "python get tty echo content",
        "output": "",
        "rule": [
            "d15029"
        ]
    },
    {
        "instruction": "",
        "id": "q15030",
        "input": "extracting ipynb source using python code",
        "output": "",
        "rule": [
            "d15030"
        ]
    },
    {
        "instruction": "",
        "id": "q15031",
        "input": "python get unique id",
        "output": "",
        "rule": [
            "d15031"
        ]
    },
    {
        "instruction": "",
        "id": "q15032",
        "input": "factorial evens function python loop",
        "output": "",
        "rule": [
            "d15032"
        ]
    },
    {
        "instruction": "",
        "id": "q15033",
        "input": "python get url return code",
        "output": "",
        "rule": [
            "d15033"
        ]
    },
    {
        "instruction": "",
        "id": "q15034",
        "input": "fetch mnist dataset python",
        "output": "",
        "rule": [
            "d15034"
        ]
    },
    {
        "instruction": "",
        "id": "q15035",
        "input": "python get value by key with default",
        "output": "",
        "rule": [
            "d15035"
        ]
    },
    {
        "instruction": "",
        "id": "q15036",
        "input": "ffi python string c string",
        "output": "",
        "rule": [
            "d15036"
        ]
    },
    {
        "instruction": "",
        "id": "q15037",
        "input": "python get x,y indexes of certain elements",
        "output": "",
        "rule": [
            "d15037"
        ]
    },
    {
        "instruction": "",
        "id": "q15038",
        "input": "fibonacci sequence in python for n terms",
        "output": "",
        "rule": [
            "d15038"
        ]
    },
    {
        "instruction": "",
        "id": "q15039",
        "input": "python getsizeof greater than memory size",
        "output": "",
        "rule": [
            "d15039"
        ]
    },
    {
        "instruction": "",
        "id": "q15040",
        "input": "file opening mode in python",
        "output": "",
        "rule": [
            "d15040"
        ]
    },
    {
        "instruction": "",
        "id": "q15041",
        "input": "python graphviz export pdf",
        "output": "",
        "rule": [
            "d15041"
        ]
    },
    {
        "instruction": "",
        "id": "q15042",
        "input": "file utf8 not read python",
        "output": "",
        "rule": [
            "d15042"
        ]
    },
    {
        "instruction": "",
        "id": "q15043",
        "input": "python grid columnconfigure minsize",
        "output": "",
        "rule": [
            "d15043"
        ]
    },
    {
        "instruction": "",
        "id": "q15044",
        "input": "fill null values in df with 0 python",
        "output": "",
        "rule": [
            "d15044"
        ]
    },
    {
        "instruction": "",
        "id": "q15045",
        "input": "python gtk not refreshing",
        "output": "",
        "rule": [
            "d15045"
        ]
    },
    {
        "instruction": "",
        "id": "q15046",
        "input": "fill space with underscore in a string in python",
        "output": "",
        "rule": [
            "d15046"
        ]
    },
    {
        "instruction": "",
        "id": "q15047",
        "input": "python hash of numpy array",
        "output": "",
        "rule": [
            "d15047"
        ]
    },
    {
        "instruction": "",
        "id": "q15048",
        "input": "finding an element in an tuple list python",
        "output": "",
        "rule": [
            "d15048"
        ]
    },
    {
        "instruction": "",
        "id": "q15049",
        "input": "python head table output",
        "output": "",
        "rule": [
            "d15049"
        ]
    },
    {
        "instruction": "",
        "id": "q15050",
        "input": "finding an index in a list in python",
        "output": "",
        "rule": [
            "d15050"
        ]
    },
    {
        "instruction": "",
        "id": "q15051",
        "input": "finding index of boolean passed through array python",
        "output": "",
        "rule": [
            "d15051"
        ]
    },
    {
        "instruction": "",
        "id": "q15052",
        "input": "python helpers bulk load data elasticsearch",
        "output": "",
        "rule": [
            "d15052"
        ]
    },
    {
        "instruction": "",
        "id": "q15053",
        "input": "finding index of number in list python",
        "output": "",
        "rule": [
            "d15053"
        ]
    },
    {
        "instruction": "",
        "id": "q15054",
        "input": "python hide tkinter window",
        "output": "",
        "rule": [
            "d15054"
        ]
    },
    {
        "instruction": "",
        "id": "q15055",
        "input": "finding local maxima in image python",
        "output": "",
        "rule": [
            "d15055"
        ]
    },
    {
        "instruction": "",
        "id": "q15056",
        "input": "python hold a plot",
        "output": "",
        "rule": [
            "d15056"
        ]
    },
    {
        "instruction": "",
        "id": "q15057",
        "input": "finding number of factors of a number in python",
        "output": "",
        "rule": [
            "d15057"
        ]
    },
    {
        "instruction": "",
        "id": "q15058",
        "input": "python how do i reference an object by its id number",
        "output": "",
        "rule": [
            "d15058"
        ]
    },
    {
        "instruction": "",
        "id": "q15059",
        "input": "finding oldest file using python",
        "output": "",
        "rule": [
            "d15059"
        ]
    },
    {
        "instruction": "",
        "id": "q15060",
        "input": "python how to access next line text",
        "output": "",
        "rule": [
            "d15060"
        ]
    },
    {
        "instruction": "",
        "id": "q15061",
        "input": "finding overlapping sets in python",
        "output": "",
        "rule": [
            "d15061"
        ]
    },
    {
        "instruction": "",
        "id": "q15062",
        "input": "python how to activate virtual environment",
        "output": "",
        "rule": [
            "d15062"
        ]
    },
    {
        "instruction": "",
        "id": "q15063",
        "input": "finding the index in a python list",
        "output": "",
        "rule": [
            "d15063"
        ]
    },
    {
        "instruction": "",
        "id": "q15064",
        "input": "python how to avoid hitting api limit",
        "output": "",
        "rule": [
            "d15064"
        ]
    },
    {
        "instruction": "",
        "id": "q15065",
        "input": "finding the similarity between 2 images in python",
        "output": "",
        "rule": [
            "d15065"
        ]
    },
    {
        "instruction": "",
        "id": "q15066",
        "input": "python how to avoid sparse matrix",
        "output": "",
        "rule": [
            "d15066"
        ]
    },
    {
        "instruction": "",
        "id": "q15067",
        "input": "python how to calculate manhattan distance",
        "output": "",
        "rule": [
            "d15067"
        ]
    },
    {
        "instruction": "",
        "id": "q15068",
        "input": "fit gaussian curve in python",
        "output": "",
        "rule": [
            "d15068"
        ]
    },
    {
        "instruction": "",
        "id": "q15069",
        "input": "python how to cast bytes into string",
        "output": "",
        "rule": [
            "d15069"
        ]
    },
    {
        "instruction": "",
        "id": "q15070",
        "input": "fitting data with self defined function python",
        "output": "",
        "rule": [
            "d15070"
        ]
    },
    {
        "instruction": "",
        "id": "q15071",
        "input": "python how to chang edirectory to parent",
        "output": "",
        "rule": [
            "d15071"
        ]
    },
    {
        "instruction": "",
        "id": "q15072",
        "input": "fixed lenth string padding python",
        "output": "",
        "rule": [
            "d15072"
        ]
    },
    {
        "instruction": "",
        "id": "q15073",
        "input": "python how to change a string to a list of words",
        "output": "",
        "rule": [
            "d15073"
        ]
    },
    {
        "instruction": "",
        "id": "q15074",
        "input": "fixed width text in python",
        "output": "",
        "rule": [
            "d15074"
        ]
    },
    {
        "instruction": "",
        "id": "q15075",
        "input": "python how to change file extension nicely",
        "output": "",
        "rule": [
            "d15075"
        ]
    },
    {
        "instruction": "",
        "id": "q15076",
        "input": "flatten by nesting depth python",
        "output": "",
        "rule": [
            "d15076"
        ]
    },
    {
        "instruction": "",
        "id": "q15077",
        "input": "python how to check a url is validate",
        "output": "",
        "rule": [
            "d15077"
        ]
    },
    {
        "instruction": "",
        "id": "q15078",
        "input": "flushing the print queue in python multiprocessing",
        "output": "",
        "rule": [
            "d15078"
        ]
    },
    {
        "instruction": "",
        "id": "q15079",
        "input": "python how to check for the smallest item in a list",
        "output": "",
        "rule": [
            "d15079"
        ]
    },
    {
        "instruction": "",
        "id": "q15080",
        "input": "for line python deletes spaces",
        "output": "",
        "rule": [
            "d15080"
        ]
    },
    {
        "instruction": "",
        "id": "q15081",
        "input": "python how to check if at least one item overlaps in two lists",
        "output": "",
        "rule": [
            "d15081"
        ]
    },
    {
        "instruction": "",
        "id": "q15082",
        "input": "for loop python progress bar",
        "output": "",
        "rule": [
            "d15082"
        ]
    },
    {
        "instruction": "",
        "id": "q15083",
        "input": "python how to check if attribute exist",
        "output": "",
        "rule": [
            "d15083"
        ]
    },
    {
        "instruction": "",
        "id": "q15084",
        "input": "for loop with two iterators python",
        "output": "",
        "rule": [
            "d15084"
        ]
    },
    {
        "instruction": "",
        "id": "q15085",
        "input": "python how to check if object is seriniable",
        "output": "",
        "rule": [
            "d15085"
        ]
    },
    {
        "instruction": "",
        "id": "q15086",
        "input": "force removing a file python",
        "output": "",
        "rule": [
            "d15086"
        ]
    },
    {
        "instruction": "",
        "id": "q15087",
        "input": "python how to clear the shell",
        "output": "",
        "rule": [
            "d15087"
        ]
    },
    {
        "instruction": "",
        "id": "q15088",
        "input": "forcing python rest api for authentication to create django session",
        "output": "",
        "rule": [
            "d15088"
        ]
    },
    {
        "instruction": "",
        "id": "q15089",
        "input": "python how to clone object",
        "output": "",
        "rule": [
            "d15089"
        ]
    },
    {
        "instruction": "",
        "id": "q15090",
        "input": "form a date column in python using existing year month columns",
        "output": "",
        "rule": [
            "d15090"
        ]
    },
    {
        "instruction": "",
        "id": "q15091",
        "input": "python how to combine sparce matrix with other features",
        "output": "",
        "rule": [
            "d15091"
        ]
    },
    {
        "instruction": "",
        "id": "q15092",
        "input": "format float with two decimals python",
        "output": "",
        "rule": [
            "d15092"
        ]
    },
    {
        "instruction": "",
        "id": "q15093",
        "input": "python how to copy protobuf",
        "output": "",
        "rule": [
            "d15093"
        ]
    },
    {
        "instruction": "",
        "id": "q15094",
        "input": "format function to make table python",
        "output": "",
        "rule": [
            "d15094"
        ]
    },
    {
        "instruction": "",
        "id": "q15095",
        "input": "python how to determine whether i am on windows",
        "output": "",
        "rule": [
            "d15095"
        ]
    },
    {
        "instruction": "",
        "id": "q15096",
        "input": "formula for latitude and longtitude x y coordinate python",
        "output": "",
        "rule": [
            "d15096"
        ]
    },
    {
        "instruction": "",
        "id": "q15097",
        "input": "function for raise to in python",
        "output": "",
        "rule": [
            "d15097"
        ]
    },
    {
        "instruction": "",
        "id": "q15098",
        "input": "python how to fft",
        "output": "",
        "rule": [
            "d15098"
        ]
    },
    {
        "instruction": "",
        "id": "q15099",
        "input": "function in python to strip spaces",
        "output": "",
        "rule": [
            "d15099"
        ]
    },
    {
        "instruction": "",
        "id": "q15100",
        "input": "python how to for different key set different session timeout",
        "output": "",
        "rule": [
            "d15100"
        ]
    },
    {
        "instruction": "",
        "id": "q15101",
        "input": "function to take user input in python3",
        "output": "",
        "rule": [
            "d15101"
        ]
    },
    {
        "instruction": "",
        "id": "q15102",
        "input": "python how to format print into columns and rows",
        "output": "",
        "rule": [
            "d15102"
        ]
    },
    {
        "instruction": "",
        "id": "q15103",
        "input": "function used to get user input in python3",
        "output": "",
        "rule": [
            "d15103"
        ]
    },
    {
        "instruction": "",
        "id": "q15104",
        "input": "python how to ftp a file",
        "output": "",
        "rule": [
            "d15104"
        ]
    },
    {
        "instruction": "",
        "id": "q15105",
        "input": "function with multiple returns python",
        "output": "",
        "rule": [
            "d15105"
        ]
    },
    {
        "instruction": "",
        "id": "q15106",
        "input": "python how to generate a file",
        "output": "",
        "rule": [
            "d15106"
        ]
    },
    {
        "instruction": "",
        "id": "q15107",
        "input": "gaussian filter from 2d gaussian function in python",
        "output": "",
        "rule": [
            "d15107"
        ]
    },
    {
        "instruction": "",
        "id": "q15108",
        "input": "python how to generate brown noise",
        "output": "",
        "rule": [
            "d15108"
        ]
    },
    {
        "instruction": "",
        "id": "q15109",
        "input": "generate 100 unique random numbers in python",
        "output": "",
        "rule": [
            "d15109"
        ]
    },
    {
        "instruction": "",
        "id": "q15110",
        "input": "python how to get a variable's name",
        "output": "",
        "rule": [
            "d15110"
        ]
    },
    {
        "instruction": "",
        "id": "q15111",
        "input": "generate a range of date python datetime",
        "output": "",
        "rule": [
            "d15111"
        ]
    },
    {
        "instruction": "",
        "id": "q15112",
        "input": "python how to get file property",
        "output": "",
        "rule": [
            "d15112"
        ]
    },
    {
        "instruction": "",
        "id": "q15113",
        "input": "generate c++ with python",
        "output": "",
        "rule": [
            "d15113"
        ]
    },
    {
        "instruction": "",
        "id": "q15114",
        "input": "python how to get utc offset from a datetime object",
        "output": "",
        "rule": [
            "d15114"
        ]
    },
    {
        "instruction": "",
        "id": "q15115",
        "input": "generate random float between 1 and 15 python",
        "output": "",
        "rule": [
            "d15115"
        ]
    },
    {
        "instruction": "",
        "id": "q15116",
        "input": "python how to make a list of strings unique",
        "output": "",
        "rule": [
            "d15116"
        ]
    },
    {
        "instruction": "",
        "id": "q15117",
        "input": "generate random guid in python",
        "output": "",
        "rule": [
            "d15117"
        ]
    },
    {
        "instruction": "",
        "id": "q15118",
        "input": "python how to make a masked array",
        "output": "",
        "rule": [
            "d15118"
        ]
    },
    {
        "instruction": "",
        "id": "q15119",
        "input": "generate sha1 from string python",
        "output": "",
        "rule": [
            "d15119"
        ]
    },
    {
        "instruction": "",
        "id": "q15120",
        "input": "python how to make of random list with different weights",
        "output": "",
        "rule": [
            "d15120"
        ]
    },
    {
        "instruction": "",
        "id": "q15121",
        "input": "generating key in a nested dictionary in python 3",
        "output": "",
        "rule": [
            "d15121"
        ]
    },
    {
        "instruction": "",
        "id": "q15122",
        "input": "python how to move a column to the end",
        "output": "",
        "rule": [
            "d15122"
        ]
    },
    {
        "instruction": "",
        "id": "q15123",
        "input": "get a list of all aws workspaces python",
        "output": "",
        "rule": [
            "d15123"
        ]
    },
    {
        "instruction": "",
        "id": "q15124",
        "input": "python how to normalize array",
        "output": "",
        "rule": [
            "d15124"
        ]
    },
    {
        "instruction": "",
        "id": "q15125",
        "input": "get a list of all files changed by git in python",
        "output": "",
        "rule": [
            "d15125"
        ]
    },
    {
        "instruction": "",
        "id": "q15126",
        "input": "python how to print dict as json",
        "output": "",
        "rule": [
            "d15126"
        ]
    },
    {
        "instruction": "",
        "id": "q15127",
        "input": "get a state from a string python",
        "output": "",
        "rule": [
            "d15127"
        ]
    },
    {
        "instruction": "",
        "id": "q15128",
        "input": "python how to reference colummn name",
        "output": "",
        "rule": [
            "d15128"
        ]
    },
    {
        "instruction": "",
        "id": "q15129",
        "input": "get all table names in python",
        "output": "",
        "rule": [
            "d15129"
        ]
    },
    {
        "instruction": "",
        "id": "q15130",
        "input": "python how to reload automatic",
        "output": "",
        "rule": [
            "d15130"
        ]
    },
    {
        "instruction": "",
        "id": "q15131",
        "input": "get commits by branch python",
        "output": "",
        "rule": [
            "d15131"
        ]
    },
    {
        "instruction": "",
        "id": "q15132",
        "input": "python how to replace line breaks in string",
        "output": "",
        "rule": [
            "d15132"
        ]
    },
    {
        "instruction": "",
        "id": "q15133",
        "input": "get dimensions of python variable",
        "output": "",
        "rule": [
            "d15133"
        ]
    },
    {
        "instruction": "",
        "id": "q15134",
        "input": "python how to run unittest",
        "output": "",
        "rule": [
            "d15134"
        ]
    },
    {
        "instruction": "",
        "id": "q15135",
        "input": "get distinct list in python",
        "output": "",
        "rule": [
            "d15135"
        ]
    },
    {
        "instruction": "",
        "id": "q15136",
        "input": "python how to scale a plot to a specific range",
        "output": "",
        "rule": [
            "d15136"
        ]
    },
    {
        "instruction": "",
        "id": "q15137",
        "input": "get dpi of image in python",
        "output": "",
        "rule": [
            "d15137"
        ]
    },
    {
        "instruction": "",
        "id": "q15138",
        "input": "python how to select a list index object",
        "output": "",
        "rule": [
            "d15138"
        ]
    },
    {
        "instruction": "",
        "id": "q15139",
        "input": "get file extension python",
        "output": "",
        "rule": [
            "d15139"
        ]
    },
    {
        "instruction": "",
        "id": "q15140",
        "input": "python how to show environment variables",
        "output": "",
        "rule": [
            "d15140"
        ]
    },
    {
        "instruction": "",
        "id": "q15141",
        "input": "get file size after opening python",
        "output": "",
        "rule": [
            "d15141"
        ]
    },
    {
        "instruction": "",
        "id": "q15142",
        "input": "python how to sum across an axis",
        "output": "",
        "rule": [
            "d15142"
        ]
    },
    {
        "instruction": "",
        "id": "q15143",
        "input": "get function from dll python ctypes",
        "output": "",
        "rule": [
            "d15143"
        ]
    },
    {
        "instruction": "",
        "id": "q15144",
        "input": "python how to tell if array empty",
        "output": "",
        "rule": [
            "d15144"
        ]
    },
    {
        "instruction": "",
        "id": "q15145",
        "input": "get group name based off gid python",
        "output": "",
        "rule": [
            "d15145"
        ]
    },
    {
        "instruction": "",
        "id": "q15146",
        "input": "python how to terminate a thrad",
        "output": "",
        "rule": [
            "d15146"
        ]
    },
    {
        "instruction": "",
        "id": "q15147",
        "input": "get html elements by id python requests",
        "output": "",
        "rule": [
            "d15147"
        ]
    },
    {
        "instruction": "",
        "id": "q15148",
        "input": "python how to test two dictionary identical",
        "output": "",
        "rule": [
            "d15148"
        ]
    },
    {
        "instruction": "",
        "id": "q15149",
        "input": "get index in series python",
        "output": "",
        "rule": [
            "d15149"
        ]
    },
    {
        "instruction": "",
        "id": "q15150",
        "input": "python how to view all attributes of an object",
        "output": "",
        "rule": [
            "d15150"
        ]
    },
    {
        "instruction": "",
        "id": "q15151",
        "input": "get index of line containing substring python",
        "output": "",
        "rule": [
            "d15151"
        ]
    },
    {
        "instruction": "",
        "id": "q15152",
        "input": "python html get by id",
        "output": "",
        "rule": [
            "d15152"
        ]
    },
    {
        "instruction": "",
        "id": "q15153",
        "input": "get indices of all substring in string python",
        "output": "",
        "rule": [
            "d15153"
        ]
    },
    {
        "instruction": "",
        "id": "q15154",
        "input": "python http get without redirect",
        "output": "",
        "rule": [
            "d15154"
        ]
    },
    {
        "instruction": "",
        "id": "q15155",
        "input": "get last insert id mysql python",
        "output": "",
        "rule": [
            "d15155"
        ]
    },
    {
        "instruction": "",
        "id": "q15156",
        "input": "python hyphen and apostrophe in string",
        "output": "",
        "rule": [
            "d15156"
        ]
    },
    {
        "instruction": "",
        "id": "q15157",
        "input": "get last n row in python",
        "output": "",
        "rule": [
            "d15157"
        ]
    },
    {
        "instruction": "",
        "id": "q15158",
        "input": "python i opened a file for writing but erased it",
        "output": "",
        "rule": [
            "d15158"
        ]
    },
    {
        "instruction": "",
        "id": "q15159",
        "input": "get methods present in object python",
        "output": "",
        "rule": [
            "d15159"
        ]
    },
    {
        "instruction": "",
        "id": "q15160",
        "input": "python i2c send 2 bytes",
        "output": "",
        "rule": [
            "d15160"
        ]
    },
    {
        "instruction": "",
        "id": "q15161",
        "input": "get object fields in a dict in python",
        "output": "",
        "rule": [
            "d15161"
        ]
    },
    {
        "instruction": "",
        "id": "q15162",
        "input": "python if a field exist",
        "output": "",
        "rule": [
            "d15162"
        ]
    },
    {
        "instruction": "",
        "id": "q15163",
        "input": "get output of stdout subprocess python",
        "output": "",
        "rule": [
            "d15163"
        ]
    },
    {
        "instruction": "",
        "id": "q15164",
        "input": "python if is not a dict key",
        "output": "",
        "rule": [
            "d15164"
        ]
    },
    {
        "instruction": "",
        "id": "q15165",
        "input": "get path of libary python",
        "output": "",
        "rule": [
            "d15165"
        ]
    },
    {
        "instruction": "",
        "id": "q15166",
        "input": "python if matches text",
        "output": "",
        "rule": [
            "d15166"
        ]
    },
    {
        "instruction": "",
        "id": "q15167",
        "input": "get process list using python linux",
        "output": "",
        "rule": [
            "d15167"
        ]
    },
    {
        "instruction": "",
        "id": "q15168",
        "input": "python if no file is found",
        "output": "",
        "rule": [
            "d15168"
        ]
    },
    {
        "instruction": "",
        "id": "q15169",
        "input": "get proto type name python",
        "output": "",
        "rule": [
            "d15169"
        ]
    },
    {
        "instruction": "",
        "id": "q15170",
        "input": "python if string has prefix",
        "output": "",
        "rule": [
            "d15170"
        ]
    },
    {
        "instruction": "",
        "id": "q15171",
        "input": "get python config dir",
        "output": "",
        "rule": [
            "d15171"
        ]
    },
    {
        "instruction": "",
        "id": "q15172",
        "input": "python if string in enum",
        "output": "",
        "rule": [
            "d15172"
        ]
    },
    {
        "instruction": "",
        "id": "q15173",
        "input": "get rid of indices in python list",
        "output": "",
        "rule": [
            "d15173"
        ]
    },
    {
        "instruction": "",
        "id": "q15174",
        "input": "python if value is string or number",
        "output": "",
        "rule": [
            "d15174"
        ]
    },
    {
        "instruction": "",
        "id": "q15175",
        "input": "get samplerate from wav file in python",
        "output": "",
        "rule": [
            "d15175"
        ]
    },
    {
        "instruction": "",
        "id": "q15176",
        "input": "python image buffer save",
        "output": "",
        "rule": [
            "d15176"
        ]
    },
    {
        "instruction": "",
        "id": "q15177",
        "input": "get screen resolution in python",
        "output": "",
        "rule": [
            "d15177"
        ]
    },
    {
        "instruction": "",
        "id": "q15178",
        "input": "python image determine if two images are equivalent",
        "output": "",
        "rule": [
            "d15178"
        ]
    },
    {
        "instruction": "",
        "id": "q15179",
        "input": "get sorted keys with python dictionary",
        "output": "",
        "rule": [
            "d15179"
        ]
    },
    {
        "instruction": "",
        "id": "q15180",
        "input": "python image segment overlay",
        "output": "",
        "rule": [
            "d15180"
        ]
    },
    {
        "instruction": "",
        "id": "q15181",
        "input": "get spectrogram from wav python",
        "output": "",
        "rule": [
            "d15181"
        ]
    },
    {
        "instruction": "",
        "id": "q15182",
        "input": "python include file from a super directory",
        "output": "",
        "rule": [
            "d15182"
        ]
    },
    {
        "instruction": "",
        "id": "q15183",
        "input": "get text from url python",
        "output": "",
        "rule": [
            "d15183"
        ]
    },
    {
        "instruction": "",
        "id": "q15184",
        "input": "python include file in super directory",
        "output": "",
        "rule": [
            "d15184"
        ]
    },
    {
        "instruction": "",
        "id": "q15185",
        "input": "get the average in a list using python",
        "output": "",
        "rule": [
            "d15185"
        ]
    },
    {
        "instruction": "",
        "id": "q15186",
        "input": "python include files in other folders",
        "output": "",
        "rule": [
            "d15186"
        ]
    },
    {
        "instruction": "",
        "id": "q15187",
        "input": "get the first day of the month in python",
        "output": "",
        "rule": [
            "d15187"
        ]
    },
    {
        "instruction": "",
        "id": "q15188",
        "input": "python indentation after append",
        "output": "",
        "rule": [
            "d15188"
        ]
    },
    {
        "instruction": "",
        "id": "q15189",
        "input": "get the index of the minimum value in an array python",
        "output": "",
        "rule": [
            "d15189"
        ]
    },
    {
        "instruction": "",
        "id": "q15190",
        "input": "python indentation string next line",
        "output": "",
        "rule": [
            "d15190"
        ]
    },
    {
        "instruction": "",
        "id": "q15191",
        "input": "get the index while sorting array python descending",
        "output": "",
        "rule": [
            "d15191"
        ]
    },
    {
        "instruction": "",
        "id": "q15192",
        "input": "python index object has no attribute remove",
        "output": "",
        "rule": [
            "d15192"
        ]
    },
    {
        "instruction": "",
        "id": "q15193",
        "input": "get the length of dictioanry key python",
        "output": "",
        "rule": [
            "d15193"
        ]
    },
    {
        "instruction": "",
        "id": "q15194",
        "input": "python index of first match",
        "output": "",
        "rule": [
            "d15194"
        ]
    },
    {
        "instruction": "",
        "id": "q15195",
        "input": "get the name of a column python",
        "output": "",
        "rule": [
            "d15195"
        ]
    },
    {
        "instruction": "",
        "id": "q15196",
        "input": "python initialize array of 10 size",
        "output": "",
        "rule": [
            "d15196"
        ]
    },
    {
        "instruction": "",
        "id": "q15197",
        "input": "get the next 3 months date for a date column in python",
        "output": "",
        "rule": [
            "d15197"
        ]
    },
    {
        "instruction": "",
        "id": "q15198",
        "input": "get tokens of textfile in python",
        "output": "",
        "rule": [
            "d15198"
        ]
    },
    {
        "instruction": "",
        "id": "q15199",
        "input": "python inner functions and scope",
        "output": "",
        "rule": [
            "d15199"
        ]
    },
    {
        "instruction": "",
        "id": "q15200",
        "input": "get unique items from list in python",
        "output": "",
        "rule": [
            "d15200"
        ]
    },
    {
        "instruction": "",
        "id": "q15201",
        "input": "python insert a line to beginning of a file",
        "output": "",
        "rule": [
            "d15201"
        ]
    },
    {
        "instruction": "",
        "id": "q15202",
        "input": "get usb device id python",
        "output": "",
        "rule": [
            "d15202"
        ]
    },
    {
        "instruction": "",
        "id": "q15203",
        "input": "python insert parent child",
        "output": "",
        "rule": [
            "d15203"
        ]
    },
    {
        "instruction": "",
        "id": "q15204",
        "input": "gettting none with printing a function python",
        "output": "",
        "rule": [
            "d15204"
        ]
    },
    {
        "instruction": "",
        "id": "q15205",
        "input": "python inserting noise into independent variables",
        "output": "",
        "rule": [
            "d15205"
        ]
    },
    {
        "instruction": "",
        "id": "q15206",
        "input": "give other color to scatter plot python",
        "output": "",
        "rule": [
            "d15206"
        ]
    },
    {
        "instruction": "",
        "id": "q15207",
        "input": "python inspect functions args",
        "output": "",
        "rule": [
            "d15207"
        ]
    },
    {
        "instruction": "",
        "id": "q15208",
        "input": "given a list of ranges in python check if number",
        "output": "",
        "rule": [
            "d15208"
        ]
    },
    {
        "instruction": "",
        "id": "q15209",
        "input": "python inspect properties of an object",
        "output": "",
        "rule": [
            "d15209"
        ]
    },
    {
        "instruction": "",
        "id": "q15210",
        "input": "given number format striptime into hours and minutes python",
        "output": "",
        "rule": [
            "d15210"
        ]
    },
    {
        "instruction": "",
        "id": "q15211",
        "input": "python inspect variables from calling frame",
        "output": "",
        "rule": [
            "d15211"
        ]
    },
    {
        "instruction": "",
        "id": "q15212",
        "input": "globally set encoding python",
        "output": "",
        "rule": [
            "d15212"
        ]
    },
    {
        "instruction": "",
        "id": "q15213",
        "input": "python instence object from dict",
        "output": "",
        "rule": [
            "d15213"
        ]
    },
    {
        "instruction": "",
        "id": "q15214",
        "input": "go to a parent directory python",
        "output": "",
        "rule": [
            "d15214"
        ]
    },
    {
        "instruction": "",
        "id": "q15215",
        "input": "python interpolate datetime index",
        "output": "",
        "rule": [
            "d15215"
        ]
    },
    {
        "instruction": "",
        "id": "q15216",
        "input": "googletrans to translate one column to a new column in english python",
        "output": "",
        "rule": [
            "d15216"
        ]
    },
    {
        "instruction": "",
        "id": "q15217",
        "input": "python inverse matrix function",
        "output": "",
        "rule": [
            "d15217"
        ]
    },
    {
        "instruction": "",
        "id": "q15218",
        "input": "grab local machine ip in python",
        "output": "",
        "rule": [
            "d15218"
        ]
    },
    {
        "instruction": "",
        "id": "q15219",
        "input": "python invoke variable of other function",
        "output": "",
        "rule": [
            "d15219"
        ]
    },
    {
        "instruction": "",
        "id": "q15220",
        "input": "gradient of the l2 norm in python",
        "output": "",
        "rule": [
            "d15220"
        ]
    },
    {
        "instruction": "",
        "id": "q15221",
        "input": "python is not none or not is none",
        "output": "",
        "rule": [
            "d15221"
        ]
    },
    {
        "instruction": "",
        "id": "q15222",
        "input": "graph undirected is connected python",
        "output": "",
        "rule": [
            "d15222"
        ]
    },
    {
        "instruction": "",
        "id": "q15223",
        "input": "python is text a url",
        "output": "",
        "rule": [
            "d15223"
        ]
    },
    {
        "instruction": "",
        "id": "q15224",
        "input": "graphy not display in python",
        "output": "",
        "rule": [
            "d15224"
        ]
    },
    {
        "instruction": "",
        "id": "q15225",
        "input": "python isdigit saying undefined",
        "output": "",
        "rule": [
            "d15225"
        ]
    },
    {
        "instruction": "",
        "id": "q15226",
        "input": "grep all python files",
        "output": "",
        "rule": [
            "d15226"
        ]
    },
    {
        "instruction": "",
        "id": "q15227",
        "input": "python isn't running in cygwin",
        "output": "",
        "rule": [
            "d15227"
        ]
    },
    {
        "instruction": "",
        "id": "q15228",
        "input": "handling single quote in string using python",
        "output": "",
        "rule": [
            "d15228"
        ]
    },
    {
        "instruction": "",
        "id": "q15229",
        "input": "python iso8601 timezone format",
        "output": "",
        "rule": [
            "d15229"
        ]
    },
    {
        "instruction": "",
        "id": "q15230",
        "input": "how add table to header doc python",
        "output": "",
        "rule": [
            "d15230"
        ]
    },
    {
        "instruction": "",
        "id": "q15231",
        "input": "python iterate over immediate children",
        "output": "",
        "rule": [
            "d15231"
        ]
    },
    {
        "instruction": "",
        "id": "q15232",
        "input": "how can i check if a character is in python",
        "output": "",
        "rule": [
            "d15232"
        ]
    },
    {
        "instruction": "",
        "id": "q15233",
        "input": "how can i export result to excel python toxlsx",
        "output": "",
        "rule": [
            "d15233"
        ]
    },
    {
        "instruction": "",
        "id": "q15234",
        "input": "python iterate through file skip",
        "output": "",
        "rule": [
            "d15234"
        ]
    },
    {
        "instruction": "",
        "id": "q15235",
        "input": "how can i fix the width of bar in bargraph matplotlib python",
        "output": "",
        "rule": [
            "d15235"
        ]
    },
    {
        "instruction": "",
        "id": "q15236",
        "input": "python iterate through json line by line",
        "output": "",
        "rule": [
            "d15236"
        ]
    },
    {
        "instruction": "",
        "id": "q15237",
        "input": "how can i remove name titles in python",
        "output": "",
        "rule": [
            "d15237"
        ]
    },
    {
        "instruction": "",
        "id": "q15238",
        "input": "python iterator group by",
        "output": "",
        "rule": [
            "d15238"
        ]
    },
    {
        "instruction": "",
        "id": "q15239",
        "input": "how can i round decimals in python",
        "output": "",
        "rule": [
            "d15239"
        ]
    },
    {
        "instruction": "",
        "id": "q15240",
        "input": "python iterator not empty",
        "output": "",
        "rule": [
            "d15240"
        ]
    },
    {
        "instruction": "",
        "id": "q15241",
        "input": "how can i use cheang round to float in python",
        "output": "",
        "rule": [
            "d15241"
        ]
    },
    {
        "instruction": "",
        "id": "q15242",
        "input": "python iterator object support deletion",
        "output": "",
        "rule": [
            "d15242"
        ]
    },
    {
        "instruction": "",
        "id": "q15243",
        "input": "how can run python script with web",
        "output": "",
        "rule": [
            "d15243"
        ]
    },
    {
        "instruction": "",
        "id": "q15244",
        "input": "python iterator returns triplet i want just one of the elements",
        "output": "",
        "rule": [
            "d15244"
        ]
    },
    {
        "instruction": "",
        "id": "q15245",
        "input": "how conveter 1 to boolean python",
        "output": "",
        "rule": [
            "d15245"
        ]
    },
    {
        "instruction": "",
        "id": "q15246",
        "input": "python iterator set back to beginning",
        "output": "",
        "rule": [
            "d15246"
        ]
    },
    {
        "instruction": "",
        "id": "q15247",
        "input": "how do i acess the text of xml using python",
        "output": "",
        "rule": [
            "d15247"
        ]
    },
    {
        "instruction": "",
        "id": "q15248",
        "input": "python iterparse parse tag",
        "output": "",
        "rule": [
            "d15248"
        ]
    },
    {
        "instruction": "",
        "id": "q15249",
        "input": "how do i check the encoding format of file python",
        "output": "",
        "rule": [
            "d15249"
        ]
    },
    {
        "instruction": "",
        "id": "q15250",
        "input": "python itertools last values",
        "output": "",
        "rule": [
            "d15250"
        ]
    },
    {
        "instruction": "",
        "id": "q15251",
        "input": "how do i create a dict type in python programmatically",
        "output": "",
        "rule": [
            "d15251"
        ]
    },
    {
        "instruction": "",
        "id": "q15252",
        "input": "python iunittest assert data type",
        "output": "",
        "rule": [
            "d15252"
        ]
    },
    {
        "instruction": "",
        "id": "q15253",
        "input": "how do i get help for methods in python",
        "output": "",
        "rule": [
            "d15253"
        ]
    },
    {
        "instruction": "",
        "id": "q15254",
        "input": "python jinja templates from string",
        "output": "",
        "rule": [
            "d15254"
        ]
    },
    {
        "instruction": "",
        "id": "q15255",
        "input": "how do i make relative directory name in python",
        "output": "",
        "rule": [
            "d15255"
        ]
    },
    {
        "instruction": "",
        "id": "q15256",
        "input": "python jinja2 for index",
        "output": "",
        "rule": [
            "d15256"
        ]
    },
    {
        "instruction": "",
        "id": "q15257",
        "input": "how do you compile a text file in python",
        "output": "",
        "rule": [
            "d15257"
        ]
    },
    {
        "instruction": "",
        "id": "q15258",
        "input": "python join a discord server",
        "output": "",
        "rule": [
            "d15258"
        ]
    },
    {
        "instruction": "",
        "id": "q15259",
        "input": "how do you determine the probability from a gaussian model in python",
        "output": "",
        "rule": [
            "d15259"
        ]
    },
    {
        "instruction": "",
        "id": "q15260",
        "input": "python join a string list with grammar",
        "output": "",
        "rule": [
            "d15260"
        ]
    },
    {
        "instruction": "",
        "id": "q15261",
        "input": "how do you exit from python code",
        "output": "",
        "rule": [
            "d15261"
        ]
    },
    {
        "instruction": "",
        "id": "q15262",
        "input": "python join for dict",
        "output": "",
        "rule": [
            "d15262"
        ]
    },
    {
        "instruction": "",
        "id": "q15263",
        "input": "how do you get unique values of index python",
        "output": "",
        "rule": [
            "d15263"
        ]
    },
    {
        "instruction": "",
        "id": "q15264",
        "input": "python join items in dict",
        "output": "",
        "rule": [
            "d15264"
        ]
    },
    {
        "instruction": "",
        "id": "q15265",
        "input": "how do you tell python to take a sum of a list",
        "output": "",
        "rule": [
            "d15265"
        ]
    },
    {
        "instruction": "",
        "id": "q15266",
        "input": "python join list only recongnize one seprator",
        "output": "",
        "rule": [
            "d15266"
        ]
    },
    {
        "instruction": "",
        "id": "q15267",
        "input": "how do you turn blocks of code to comments in python",
        "output": "",
        "rule": [
            "d15267"
        ]
    },
    {
        "instruction": "",
        "id": "q15268",
        "input": "python json back to type",
        "output": "",
        "rule": [
            "d15268"
        ]
    },
    {
        "instruction": "",
        "id": "q15269",
        "input": "how does python set avoid duplicates",
        "output": "",
        "rule": [
            "d15269"
        ]
    },
    {
        "instruction": "",
        "id": "q15270",
        "input": "python json dump in order",
        "output": "",
        "rule": [
            "d15270"
        ]
    },
    {
        "instruction": "",
        "id": "q15271",
        "input": "how join lists and strings in python",
        "output": "",
        "rule": [
            "d15271"
        ]
    },
    {
        "instruction": "",
        "id": "q15272",
        "input": "python json dump nesting",
        "output": "",
        "rule": [
            "d15272"
        ]
    },
    {
        "instruction": "",
        "id": "q15273",
        "input": "how kill a python execution windows",
        "output": "",
        "rule": [
            "d15273"
        ]
    },
    {
        "instruction": "",
        "id": "q15274",
        "input": "python json dumps without encoding",
        "output": "",
        "rule": [
            "d15274"
        ]
    },
    {
        "instruction": "",
        "id": "q15275",
        "input": "how to access an object using its id python",
        "output": "",
        "rule": [
            "d15275"
        ]
    },
    {
        "instruction": "",
        "id": "q15276",
        "input": "python json file parse comment jstyleson",
        "output": "",
        "rule": [
            "d15276"
        ]
    },
    {
        "instruction": "",
        "id": "q15277",
        "input": "how to access array of arrays in python",
        "output": "",
        "rule": [
            "d15277"
        ]
    },
    {
        "instruction": "",
        "id": "q15278",
        "input": "python json loads expects string or buffer",
        "output": "",
        "rule": [
            "d15278"
        ]
    },
    {
        "instruction": "",
        "id": "q15279",
        "input": "how to account for reading a file and the line is empty in python",
        "output": "",
        "rule": [
            "d15279"
        ]
    },
    {
        "instruction": "",
        "id": "q15280",
        "input": "python json stringify datetime",
        "output": "",
        "rule": [
            "d15280"
        ]
    },
    {
        "instruction": "",
        "id": "q15281",
        "input": "how to activate a pin in python",
        "output": "",
        "rule": [
            "d15281"
        ]
    },
    {
        "instruction": "",
        "id": "q15282",
        "input": "python json try element exists",
        "output": "",
        "rule": [
            "d15282"
        ]
    },
    {
        "instruction": "",
        "id": "q15283",
        "input": "how to add a background color to python code",
        "output": "",
        "rule": [
            "d15283"
        ]
    },
    {
        "instruction": "",
        "id": "q15284",
        "input": "python jsonschema how to list all schema errors",
        "output": "",
        "rule": [
            "d15284"
        ]
    },
    {
        "instruction": "",
        "id": "q15285",
        "input": "how to add a little noise to data in python",
        "output": "",
        "rule": [
            "d15285"
        ]
    },
    {
        "instruction": "",
        "id": "q15286",
        "input": "python jump to line number",
        "output": "",
        "rule": [
            "d15286"
        ]
    },
    {
        "instruction": "",
        "id": "q15287",
        "input": "how to add ansii font to python",
        "output": "",
        "rule": [
            "d15287"
        ]
    },
    {
        "instruction": "",
        "id": "q15288",
        "input": "python keep trailing zero",
        "output": "",
        "rule": [
            "d15288"
        ]
    },
    {
        "instruction": "",
        "id": "q15289",
        "input": "how to add five days on today's date in python",
        "output": "",
        "rule": [
            "d15289"
        ]
    },
    {
        "instruction": "",
        "id": "q15290",
        "input": "python kill all child process of parent",
        "output": "",
        "rule": [
            "d15290"
        ]
    },
    {
        "instruction": "",
        "id": "q15291",
        "input": "how to add fonts in python",
        "output": "",
        "rule": [
            "d15291"
        ]
    },
    {
        "instruction": "",
        "id": "q15292",
        "input": "python kill pid on remote server thru pexpect",
        "output": "",
        "rule": [
            "d15292"
        ]
    },
    {
        "instruction": "",
        "id": "q15293",
        "input": "how to add log file name in stream handler in python",
        "output": "",
        "rule": [
            "d15293"
        ]
    },
    {
        "instruction": "",
        "id": "q15294",
        "input": "python kill process by inode",
        "output": "",
        "rule": [
            "d15294"
        ]
    },
    {
        "instruction": "",
        "id": "q15295",
        "input": "how to add postgres libraries to python",
        "output": "",
        "rule": [
            "d15295"
        ]
    },
    {
        "instruction": "",
        "id": "q15296",
        "input": "python l1 norm between vectors",
        "output": "",
        "rule": [
            "d15296"
        ]
    },
    {
        "instruction": "",
        "id": "q15297",
        "input": "how to add scrollbar to frame in python",
        "output": "",
        "rule": [
            "d15297"
        ]
    },
    {
        "instruction": "",
        "id": "q15298",
        "input": "python l2 norm of vector",
        "output": "",
        "rule": [
            "d15298"
        ]
    },
    {
        "instruction": "",
        "id": "q15299",
        "input": "how to add something to a text file in python",
        "output": "",
        "rule": [
            "d15299"
        ]
    },
    {
        "instruction": "",
        "id": "q15300",
        "input": "python lambda boto3 get file from filename from s3",
        "output": "",
        "rule": [
            "d15300"
        ]
    },
    {
        "instruction": "",
        "id": "q15301",
        "input": "how to allign something to the middle in python",
        "output": "",
        "rule": [
            "d15301"
        ]
    },
    {
        "instruction": "",
        "id": "q15302",
        "input": "python lambda functions two paramaters",
        "output": "",
        "rule": [
            "d15302"
        ]
    },
    {
        "instruction": "",
        "id": "q15303",
        "input": "how to allow integer to except decimal as input python",
        "output": "",
        "rule": [
            "d15303"
        ]
    },
    {
        "instruction": "",
        "id": "q15304",
        "input": "python last elements head",
        "output": "",
        "rule": [
            "d15304"
        ]
    },
    {
        "instruction": "",
        "id": "q15305",
        "input": "how to append the prediction to the inference set python panda",
        "output": "",
        "rule": [
            "d15305"
        ]
    },
    {
        "instruction": "",
        "id": "q15306",
        "input": "python last item in index",
        "output": "",
        "rule": [
            "d15306"
        ]
    },
    {
        "instruction": "",
        "id": "q15307",
        "input": "how to append to list in python at front!",
        "output": "",
        "rule": [
            "d15307"
        ]
    },
    {
        "instruction": "",
        "id": "q15308",
        "input": "python lat lng to xy",
        "output": "",
        "rule": [
            "d15308"
        ]
    },
    {
        "instruction": "",
        "id": "q15309",
        "input": "how to apply filter to image in python",
        "output": "",
        "rule": [
            "d15309"
        ]
    },
    {
        "instruction": "",
        "id": "q15310",
        "input": "python lat long coordinates to dictionary",
        "output": "",
        "rule": [
            "d15310"
        ]
    },
    {
        "instruction": "",
        "id": "q15311",
        "input": "how to apply multiple dictionaries python",
        "output": "",
        "rule": [
            "d15311"
        ]
    },
    {
        "instruction": "",
        "id": "q15312",
        "input": "python leaf values predict",
        "output": "",
        "rule": [
            "d15312"
        ]
    },
    {
        "instruction": "",
        "id": "q15313",
        "input": "how to automatically execute python files",
        "output": "",
        "rule": [
            "d15313"
        ]
    },
    {
        "instruction": "",
        "id": "q15314",
        "input": "python limit x y z range",
        "output": "",
        "rule": [
            "d15314"
        ]
    },
    {
        "instruction": "",
        "id": "q15315",
        "input": "how to automatically save a download in python",
        "output": "",
        "rule": [
            "d15315"
        ]
    },
    {
        "instruction": "",
        "id": "q15316",
        "input": "python linux kill process by pid",
        "output": "",
        "rule": [
            "d15316"
        ]
    },
    {
        "instruction": "",
        "id": "q15317",
        "input": "how to average values of an array python",
        "output": "",
        "rule": [
            "d15317"
        ]
    },
    {
        "instruction": "",
        "id": "q15318",
        "input": "python list drop duplicate and keep the original sequence",
        "output": "",
        "rule": [
            "d15318"
        ]
    },
    {
        "instruction": "",
        "id": "q15319",
        "input": "how to build sorting on object in python",
        "output": "",
        "rule": [
            "d15319"
        ]
    },
    {
        "instruction": "",
        "id": "q15320",
        "input": "python list element access by name",
        "output": "",
        "rule": [
            "d15320"
        ]
    },
    {
        "instruction": "",
        "id": "q15321",
        "input": "how to bypass a nonetype error in python",
        "output": "",
        "rule": [
            "d15321"
        ]
    },
    {
        "instruction": "",
        "id": "q15322",
        "input": "how to calculate distance between two lat long in python",
        "output": "",
        "rule": [
            "d15322"
        ]
    },
    {
        "instruction": "",
        "id": "q15323",
        "input": "python list of enum values",
        "output": "",
        "rule": [
            "d15323"
        ]
    },
    {
        "instruction": "",
        "id": "q15324",
        "input": "how to calculate dot product of two vectors in python",
        "output": "",
        "rule": [
            "d15324"
        ]
    },
    {
        "instruction": "",
        "id": "q15325",
        "input": "python list of json to list of objects",
        "output": "",
        "rule": [
            "d15325"
        ]
    },
    {
        "instruction": "",
        "id": "q15326",
        "input": "how to calculate eigenvalues eigen vector function in python",
        "output": "",
        "rule": [
            "d15326"
        ]
    },
    {
        "instruction": "",
        "id": "q15327",
        "input": "python list of prime factors",
        "output": "",
        "rule": [
            "d15327"
        ]
    },
    {
        "instruction": "",
        "id": "q15328",
        "input": "how to calculate euclidean distance between 2 points in python",
        "output": "",
        "rule": [
            "d15328"
        ]
    },
    {
        "instruction": "",
        "id": "q15329",
        "input": "python list populated with n lists",
        "output": "",
        "rule": [
            "d15329"
        ]
    },
    {
        "instruction": "",
        "id": "q15330",
        "input": "how to calculate the magnitude of a vector inpython with numpy",
        "output": "",
        "rule": [
            "d15330"
        ]
    },
    {
        "instruction": "",
        "id": "q15331",
        "input": "python list to nparray",
        "output": "",
        "rule": [
            "d15331"
        ]
    },
    {
        "instruction": "",
        "id": "q15332",
        "input": "how to call a javascript variable in html with python",
        "output": "",
        "rule": [
            "d15332"
        ]
    },
    {
        "instruction": "",
        "id": "q15333",
        "input": "python list to string without using join",
        "output": "",
        "rule": [
            "d15333"
        ]
    },
    {
        "instruction": "",
        "id": "q15334",
        "input": "how to call multiple functions with one set of args in python",
        "output": "",
        "rule": [
            "d15334"
        ]
    },
    {
        "instruction": "",
        "id": "q15335",
        "input": "python load a string as json",
        "output": "",
        "rule": [
            "d15335"
        ]
    },
    {
        "instruction": "",
        "id": "q15336",
        "input": "how to call python script server side method from javascript",
        "output": "",
        "rule": [
            "d15336"
        ]
    },
    {
        "instruction": "",
        "id": "q15337",
        "input": "python load argparser from json",
        "output": "",
        "rule": [
            "d15337"
        ]
    },
    {
        "instruction": "",
        "id": "q15338",
        "input": "how to call the minimum value of apython array",
        "output": "",
        "rule": [
            "d15338"
        ]
    },
    {
        "instruction": "",
        "id": "q15339",
        "input": "python load default value based on type",
        "output": "",
        "rule": [
            "d15339"
        ]
    },
    {
        "instruction": "",
        "id": "q15340",
        "input": "how to campare date from string in python",
        "output": "",
        "rule": [
            "d15340"
        ]
    },
    {
        "instruction": "",
        "id": "q15341",
        "input": "python load json data from file",
        "output": "",
        "rule": [
            "d15341"
        ]
    },
    {
        "instruction": "",
        "id": "q15342",
        "input": "how to capitalize every letter in a word in a sentence in python",
        "output": "",
        "rule": [
            "d15342"
        ]
    },
    {
        "instruction": "",
        "id": "q15343",
        "input": "python load json from file mac",
        "output": "",
        "rule": [
            "d15343"
        ]
    },
    {
        "instruction": "",
        "id": "q15344",
        "input": "how to capitalize first letter in string in python",
        "output": "",
        "rule": [
            "d15344"
        ]
    },
    {
        "instruction": "",
        "id": "q15345",
        "input": "python loadr rds file",
        "output": "",
        "rule": [
            "d15345"
        ]
    },
    {
        "instruction": "",
        "id": "q15346",
        "input": "how to capitalize first word in python",
        "output": "",
        "rule": [
            "d15346"
        ]
    },
    {
        "instruction": "",
        "id": "q15347",
        "input": "python loadrawdata by relative path",
        "output": "",
        "rule": [
            "d15347"
        ]
    },
    {
        "instruction": "",
        "id": "q15348",
        "input": "how to capitalize one word in a string python",
        "output": "",
        "rule": [
            "d15348"
        ]
    },
    {
        "instruction": "",
        "id": "q15349",
        "input": "python locate index of list elements in list",
        "output": "",
        "rule": [
            "d15349"
        ]
    },
    {
        "instruction": "",
        "id": "q15350",
        "input": "how to cast a string to bytes in python",
        "output": "",
        "rule": [
            "d15350"
        ]
    },
    {
        "instruction": "",
        "id": "q15351",
        "input": "python logging check if handler exist",
        "output": "",
        "rule": [
            "d15351"
        ]
    },
    {
        "instruction": "",
        "id": "q15352",
        "input": "how to cast as datetime python",
        "output": "",
        "rule": [
            "d15352"
        ]
    },
    {
        "instruction": "",
        "id": "q15353",
        "input": "python logging filter self",
        "output": "",
        "rule": [
            "d15353"
        ]
    },
    {
        "instruction": "",
        "id": "q15354",
        "input": "how to change attributes python objects",
        "output": "",
        "rule": [
            "d15354"
        ]
    },
    {
        "instruction": "",
        "id": "q15355",
        "input": "python logging format center justify",
        "output": "",
        "rule": [
            "d15355"
        ]
    },
    {
        "instruction": "",
        "id": "q15356",
        "input": "how to change boolean indexer to numerical in python",
        "output": "",
        "rule": [
            "d15356"
        ]
    },
    {
        "instruction": "",
        "id": "q15357",
        "input": "python logging format example",
        "output": "",
        "rule": [
            "d15357"
        ]
    },
    {
        "instruction": "",
        "id": "q15358",
        "input": "how to change columng data type to int or float in python",
        "output": "",
        "rule": [
            "d15358"
        ]
    },
    {
        "instruction": "",
        "id": "q15359",
        "input": "python logging get all child loggers",
        "output": "",
        "rule": [
            "d15359"
        ]
    },
    {
        "instruction": "",
        "id": "q15360",
        "input": "python logging no file generated",
        "output": "",
        "rule": [
            "d15360"
        ]
    },
    {
        "instruction": "",
        "id": "q15361",
        "input": "how to change format of time on python",
        "output": "",
        "rule": [
            "d15361"
        ]
    },
    {
        "instruction": "",
        "id": "q15362",
        "input": "python logging param in string",
        "output": "",
        "rule": [
            "d15362"
        ]
    },
    {
        "instruction": "",
        "id": "q15363",
        "input": "how to change from list to tuple in python",
        "output": "",
        "rule": [
            "d15363"
        ]
    },
    {
        "instruction": "",
        "id": "q15364",
        "input": "python logical boolean numpy arrays",
        "output": "",
        "rule": [
            "d15364"
        ]
    },
    {
        "instruction": "",
        "id": "q15365",
        "input": "how to change index of data frame python",
        "output": "",
        "rule": [
            "d15365"
        ]
    },
    {
        "instruction": "",
        "id": "q15366",
        "input": "how to change isexecutable using python",
        "output": "",
        "rule": [
            "d15366"
        ]
    },
    {
        "instruction": "",
        "id": "q15367",
        "input": "python lookup memory of a object",
        "output": "",
        "rule": [
            "d15367"
        ]
    },
    {
        "instruction": "",
        "id": "q15368",
        "input": "how to change position for turtle python",
        "output": "",
        "rule": [
            "d15368"
        ]
    },
    {
        "instruction": "",
        "id": "q15369",
        "input": "python loop through array and dynamically plot line",
        "output": "",
        "rule": [
            "d15369"
        ]
    },
    {
        "instruction": "",
        "id": "q15370",
        "input": "how to change python tuple into rdd",
        "output": "",
        "rule": [
            "d15370"
        ]
    },
    {
        "instruction": "",
        "id": "q15371",
        "input": "python magicmock any args",
        "output": "",
        "rule": [
            "d15371"
        ]
    },
    {
        "instruction": "",
        "id": "q15372",
        "input": "how to change screen resolution python",
        "output": "",
        "rule": [
            "d15372"
        ]
    },
    {
        "instruction": "",
        "id": "q15373",
        "input": "python mail subject decode",
        "output": "",
        "rule": [
            "d15373"
        ]
    },
    {
        "instruction": "",
        "id": "q15374",
        "input": "how to change string into list in python",
        "output": "",
        "rule": [
            "d15374"
        ]
    },
    {
        "instruction": "",
        "id": "q15375",
        "input": "python make a list flat",
        "output": "",
        "rule": [
            "d15375"
        ]
    },
    {
        "instruction": "",
        "id": "q15376",
        "input": "how to change string type using python",
        "output": "",
        "rule": [
            "d15376"
        ]
    },
    {
        "instruction": "",
        "id": "q15377",
        "input": "python make blocking function to async",
        "output": "",
        "rule": [
            "d15377"
        ]
    },
    {
        "instruction": "",
        "id": "q15378",
        "input": "how to change the background to an image in python",
        "output": "",
        "rule": [
            "d15378"
        ]
    },
    {
        "instruction": "",
        "id": "q15379",
        "input": "python make dict hashable",
        "output": "",
        "rule": [
            "d15379"
        ]
    },
    {
        "instruction": "",
        "id": "q15380",
        "input": "how to change to string to date format python",
        "output": "",
        "rule": [
            "d15380"
        ]
    },
    {
        "instruction": "",
        "id": "q15381",
        "input": "python make list into dictionary",
        "output": "",
        "rule": [
            "d15381"
        ]
    },
    {
        "instruction": "",
        "id": "q15382",
        "input": "how to chck if exists python",
        "output": "",
        "rule": [
            "d15382"
        ]
    },
    {
        "instruction": "",
        "id": "q15383",
        "input": "python make list without element without removing",
        "output": "",
        "rule": [
            "d15383"
        ]
    },
    {
        "instruction": "",
        "id": "q15384",
        "input": "how to check all the column names in table in python",
        "output": "",
        "rule": [
            "d15384"
        ]
    },
    {
        "instruction": "",
        "id": "q15385",
        "input": "python make naive datetime aware",
        "output": "",
        "rule": [
            "d15385"
        ]
    },
    {
        "instruction": "",
        "id": "q15386",
        "input": "how to check character ascii in python",
        "output": "",
        "rule": [
            "d15386"
        ]
    },
    {
        "instruction": "",
        "id": "q15387",
        "input": "python makedir if necessary",
        "output": "",
        "rule": [
            "d15387"
        ]
    },
    {
        "instruction": "",
        "id": "q15388",
        "input": "how to check column type in dataset using python",
        "output": "",
        "rule": [
            "d15388"
        ]
    },
    {
        "instruction": "",
        "id": "q15389",
        "input": "python map a 2d list to table",
        "output": "",
        "rule": [
            "d15389"
        ]
    },
    {
        "instruction": "",
        "id": "q15390",
        "input": "python map append new item",
        "output": "",
        "rule": [
            "d15390"
        ]
    },
    {
        "instruction": "",
        "id": "q15391",
        "input": "how to check dimensions python",
        "output": "",
        "rule": [
            "d15391"
        ]
    },
    {
        "instruction": "",
        "id": "q15392",
        "input": "python match parentheses regex",
        "output": "",
        "rule": [
            "d15392"
        ]
    },
    {
        "instruction": "",
        "id": "q15393",
        "input": "how to check equality python",
        "output": "",
        "rule": [
            "d15393"
        ]
    },
    {
        "instruction": "",
        "id": "q15394",
        "input": "python match wildcard filenames",
        "output": "",
        "rule": [
            "d15394"
        ]
    },
    {
        "instruction": "",
        "id": "q15395",
        "input": "how to check file extension in python",
        "output": "",
        "rule": [
            "d15395"
        ]
    },
    {
        "instruction": "",
        "id": "q15396",
        "input": "python matlibplot set axis title",
        "output": "",
        "rule": [
            "d15396"
        ]
    },
    {
        "instruction": "",
        "id": "q15397",
        "input": "how to check for inbuilt string functions + python",
        "output": "",
        "rule": [
            "d15397"
        ]
    },
    {
        "instruction": "",
        "id": "q15398",
        "input": "python matplotlib add regression line",
        "output": "",
        "rule": [
            "d15398"
        ]
    },
    {
        "instruction": "",
        "id": "q15399",
        "input": "python returning a wrapped function",
        "output": "",
        "rule": [
            "d15399"
        ]
    },
    {
        "instruction": "",
        "id": "q15400",
        "input": "python matplotlib clear axes",
        "output": "",
        "rule": [
            "d15400"
        ]
    },
    {
        "instruction": "",
        "id": "q15401",
        "input": "how to check if a a variable is iterable in python",
        "output": "",
        "rule": [
            "d15401"
        ]
    },
    {
        "instruction": "",
        "id": "q15402",
        "input": "python matplotlib combining list of figures into a single figure",
        "output": "",
        "rule": [
            "d15402"
        ]
    },
    {
        "instruction": "",
        "id": "q15403",
        "input": "how to check if a checkbox is checked python",
        "output": "",
        "rule": [
            "d15403"
        ]
    },
    {
        "instruction": "",
        "id": "q15404",
        "input": "python matplotlib hide window",
        "output": "",
        "rule": [
            "d15404"
        ]
    },
    {
        "instruction": "",
        "id": "q15405",
        "input": "how to check if a python script is running idle window",
        "output": "",
        "rule": [
            "d15405"
        ]
    },
    {
        "instruction": "",
        "id": "q15406",
        "input": "python matplotlib imshow center to extents",
        "output": "",
        "rule": [
            "d15406"
        ]
    },
    {
        "instruction": "",
        "id": "q15407",
        "input": "how to check if a remote path exists using sftp in python",
        "output": "",
        "rule": [
            "d15407"
        ]
    },
    {
        "instruction": "",
        "id": "q15408",
        "input": "python matplotlib performance plot",
        "output": "",
        "rule": [
            "d15408"
        ]
    },
    {
        "instruction": "",
        "id": "q15409",
        "input": "how to check if attribute exists python",
        "output": "",
        "rule": [
            "d15409"
        ]
    },
    {
        "instruction": "",
        "id": "q15410",
        "input": "python matplotlib set ylim",
        "output": "",
        "rule": [
            "d15410"
        ]
    },
    {
        "instruction": "",
        "id": "q15411",
        "input": "how to check if dictionaries are the same python",
        "output": "",
        "rule": [
            "d15411"
        ]
    },
    {
        "instruction": "",
        "id": "q15412",
        "input": "python matrix of all ones",
        "output": "",
        "rule": [
            "d15412"
        ]
    },
    {
        "instruction": "",
        "id": "q15413",
        "input": "how to check if polygons intersect in python",
        "output": "",
        "rule": [
            "d15413"
        ]
    },
    {
        "instruction": "",
        "id": "q15414",
        "input": "python memap numpy everything in memory",
        "output": "",
        "rule": [
            "d15414"
        ]
    },
    {
        "instruction": "",
        "id": "q15415",
        "input": "how to check if python variable is iterable",
        "output": "",
        "rule": [
            "d15415"
        ]
    },
    {
        "instruction": "",
        "id": "q15416",
        "input": "python memory cpu inspect",
        "output": "",
        "rule": [
            "d15416"
        ]
    },
    {
        "instruction": "",
        "id": "q15417",
        "input": "how to check if the data type of a value is a string in python",
        "output": "",
        "rule": [
            "d15417"
        ]
    },
    {
        "instruction": "",
        "id": "q15418",
        "input": "python method definition with default values to params",
        "output": "",
        "rule": [
            "d15418"
        ]
    },
    {
        "instruction": "",
        "id": "q15419",
        "input": "how to check if two words are the same in python regardless of case",
        "output": "",
        "rule": [
            "d15419"
        ]
    },
    {
        "instruction": "",
        "id": "q15420",
        "input": "python mime type from file name",
        "output": "",
        "rule": [
            "d15420"
        ]
    },
    {
        "instruction": "",
        "id": "q15421",
        "input": "how to check if variable is datetime python",
        "output": "",
        "rule": [
            "d15421"
        ]
    },
    {
        "instruction": "",
        "id": "q15422",
        "input": "python mongo update not working",
        "output": "",
        "rule": [
            "d15422"
        ]
    },
    {
        "instruction": "",
        "id": "q15423",
        "input": "how to check if you have reached the end of a file in python",
        "output": "",
        "rule": [
            "d15423"
        ]
    },
    {
        "instruction": "",
        "id": "q15424",
        "input": "python month range for from mm/yyyy and to mm/yyyy",
        "output": "",
        "rule": [
            "d15424"
        ]
    },
    {
        "instruction": "",
        "id": "q15425",
        "input": "how to check is a image is readable in python",
        "output": "",
        "rule": [
            "d15425"
        ]
    },
    {
        "instruction": "",
        "id": "q15426",
        "input": "python move cursor up n lines",
        "output": "",
        "rule": [
            "d15426"
        ]
    },
    {
        "instruction": "",
        "id": "q15427",
        "input": "how to check permission of directory using python",
        "output": "",
        "rule": [
            "d15427"
        ]
    },
    {
        "instruction": "",
        "id": "q15428",
        "input": "python moving average of a series",
        "output": "",
        "rule": [
            "d15428"
        ]
    },
    {
        "instruction": "",
        "id": "q15429",
        "input": "how to check python memory",
        "output": "",
        "rule": [
            "d15429"
        ]
    },
    {
        "instruction": "",
        "id": "q15430",
        "input": "python multidimensional array argmin",
        "output": "",
        "rule": [
            "d15430"
        ]
    },
    {
        "instruction": "",
        "id": "q15431",
        "input": "how to check python update",
        "output": "",
        "rule": [
            "d15431"
        ]
    },
    {
        "instruction": "",
        "id": "q15432",
        "input": "python multiprocess proxy list",
        "output": "",
        "rule": [
            "d15432"
        ]
    },
    {
        "instruction": "",
        "id": "q15433",
        "input": "how to check python verion using prompt",
        "output": "",
        "rule": [
            "d15433"
        ]
    },
    {
        "instruction": "",
        "id": "q15434",
        "input": "python multiprocessing lock pool",
        "output": "",
        "rule": [
            "d15434"
        ]
    },
    {
        "instruction": "",
        "id": "q15435",
        "input": "how to check the current date in python",
        "output": "",
        "rule": [
            "d15435"
        ]
    },
    {
        "instruction": "",
        "id": "q15436",
        "input": "python multiprocessing terminate child process",
        "output": "",
        "rule": [
            "d15436"
        ]
    },
    {
        "instruction": "",
        "id": "q15437",
        "input": "how to check the type of a users input python",
        "output": "",
        "rule": [
            "d15437"
        ]
    },
    {
        "instruction": "",
        "id": "q15438",
        "input": "python multithreading code to run code then kill it after a certain period of time",
        "output": "",
        "rule": [
            "d15438"
        ]
    },
    {
        "instruction": "",
        "id": "q15439",
        "input": "how to check two lists for any common terms in python",
        "output": "",
        "rule": [
            "d15439"
        ]
    },
    {
        "instruction": "",
        "id": "q15440",
        "input": "python musicbox play pause",
        "output": "",
        "rule": [
            "d15440"
        ]
    },
    {
        "instruction": "",
        "id": "q15441",
        "input": "how to check varible data type in python",
        "output": "",
        "rule": [
            "d15441"
        ]
    },
    {
        "instruction": "",
        "id": "q15442",
        "input": "python must be a mapping, not str",
        "output": "",
        "rule": [
            "d15442"
        ]
    },
    {
        "instruction": "",
        "id": "q15443",
        "input": "how to check what type of data i have in python",
        "output": "",
        "rule": [
            "d15443"
        ]
    },
    {
        "instruction": "",
        "id": "q15444",
        "input": "python must be str, not nonetype",
        "output": "",
        "rule": [
            "d15444"
        ]
    },
    {
        "instruction": "",
        "id": "q15445",
        "input": "how to chmod in python for entire directory",
        "output": "",
        "rule": [
            "d15445"
        ]
    },
    {
        "instruction": "",
        "id": "q15446",
        "input": "python mysql get field as dict",
        "output": "",
        "rule": [
            "d15446"
        ]
    },
    {
        "instruction": "",
        "id": "q15447",
        "input": "how to choose a random element from a set in python",
        "output": "",
        "rule": [
            "d15447"
        ]
    },
    {
        "instruction": "",
        "id": "q15448",
        "input": "python mysqldb result as dict",
        "output": "",
        "rule": [
            "d15448"
        ]
    },
    {
        "instruction": "",
        "id": "q15449",
        "input": "how to choose unique character from a string in python",
        "output": "",
        "rule": [
            "d15449"
        ]
    },
    {
        "instruction": "",
        "id": "q15450",
        "input": "python name object by input",
        "output": "",
        "rule": [
            "d15450"
        ]
    },
    {
        "instruction": "",
        "id": "q15451",
        "input": "how to clear a printed line in python",
        "output": "",
        "rule": [
            "d15451"
        ]
    },
    {
        "instruction": "",
        "id": "q15452",
        "input": "python namedtuple to dict",
        "output": "",
        "rule": [
            "d15452"
        ]
    },
    {
        "instruction": "",
        "id": "q15453",
        "input": "how to clear buffer in python3",
        "output": "",
        "rule": [
            "d15453"
        ]
    },
    {
        "instruction": "",
        "id": "q15454",
        "input": "python nearest pixel value image",
        "output": "",
        "rule": [
            "d15454"
        ]
    },
    {
        "instruction": "",
        "id": "q15455",
        "input": "how to clear figure from window python",
        "output": "",
        "rule": [
            "d15455"
        ]
    },
    {
        "instruction": "",
        "id": "q15456",
        "input": "python new instance from dict",
        "output": "",
        "rule": [
            "d15456"
        ]
    },
    {
        "instruction": "",
        "id": "q15457",
        "input": "how to clear python canvas after 5 seconds",
        "output": "",
        "rule": [
            "d15457"
        ]
    },
    {
        "instruction": "",
        "id": "q15458",
        "input": "python nfs cant open file permissions",
        "output": "",
        "rule": [
            "d15458"
        ]
    },
    {
        "instruction": "",
        "id": "q15459",
        "input": "python normal distribution function",
        "output": "",
        "rule": [
            "d15459"
        ]
    },
    {
        "instruction": "",
        "id": "q15460",
        "input": "how to clear shell screen in python",
        "output": "",
        "rule": [
            "d15460"
        ]
    },
    {
        "instruction": "",
        "id": "q15461",
        "input": "how to click on the next page using python",
        "output": "",
        "rule": [
            "d15461"
        ]
    },
    {
        "instruction": "",
        "id": "q15462",
        "input": "python normalize an entire image",
        "output": "",
        "rule": [
            "d15462"
        ]
    },
    {
        "instruction": "",
        "id": "q15463",
        "input": "how to close all connections python mongo",
        "output": "",
        "rule": [
            "d15463"
        ]
    },
    {
        "instruction": "",
        "id": "q15464",
        "input": "python normalize between zero and 255",
        "output": "",
        "rule": [
            "d15464"
        ]
    },
    {
        "instruction": "",
        "id": "q15465",
        "input": "how to close the connection in createengine in python",
        "output": "",
        "rule": [
            "d15465"
        ]
    },
    {
        "instruction": "",
        "id": "q15466",
        "input": "python normalize list of dicts",
        "output": "",
        "rule": [
            "d15466"
        ]
    },
    {
        "instruction": "",
        "id": "q15467",
        "input": "how to code n rows of the pascal triangle in python",
        "output": "",
        "rule": [
            "d15467"
        ]
    },
    {
        "instruction": "",
        "id": "q15468",
        "input": "python nose fail first test",
        "output": "",
        "rule": [
            "d15468"
        ]
    },
    {
        "instruction": "",
        "id": "q15469",
        "input": "how to combine multiple python canvas objects as one",
        "output": "",
        "rule": [
            "d15469"
        ]
    },
    {
        "instruction": "",
        "id": "q15470",
        "input": "python nose not finding tests",
        "output": "",
        "rule": [
            "d15470"
        ]
    },
    {
        "instruction": "",
        "id": "q15471",
        "input": "how to combine several dictory into one in python",
        "output": "",
        "rule": [
            "d15471"
        ]
    },
    {
        "instruction": "",
        "id": "q15472",
        "input": "python not exiting after thread ends",
        "output": "",
        "rule": [
            "d15472"
        ]
    },
    {
        "instruction": "",
        "id": "q15473",
        "input": "how to compare objects in python",
        "output": "",
        "rule": [
            "d15473"
        ]
    },
    {
        "instruction": "",
        "id": "q15474",
        "input": "python nparray to float pointer",
        "output": "",
        "rule": [
            "d15474"
        ]
    },
    {
        "instruction": "",
        "id": "q15475",
        "input": "how to compute euclidean distance in 3 space in python",
        "output": "",
        "rule": [
            "d15475"
        ]
    },
    {
        "instruction": "",
        "id": "q15476",
        "input": "python number of edges in a set of nodes",
        "output": "",
        "rule": [
            "d15476"
        ]
    },
    {
        "instruction": "",
        "id": "q15477",
        "input": "how to compute memory size used by an array python",
        "output": "",
        "rule": [
            "d15477"
        ]
    },
    {
        "instruction": "",
        "id": "q15478",
        "input": "python number of non nan elements in array",
        "output": "",
        "rule": [
            "d15478"
        ]
    },
    {
        "instruction": "",
        "id": "q15479",
        "input": "how to concatonate characters in a list python 3",
        "output": "",
        "rule": [
            "d15479"
        ]
    },
    {
        "instruction": "",
        "id": "q15480",
        "input": "python numpy array every nth element",
        "output": "",
        "rule": [
            "d15480"
        ]
    },
    {
        "instruction": "",
        "id": "q15481",
        "input": "how to connect a string to a float in python",
        "output": "",
        "rule": [
            "d15481"
        ]
    },
    {
        "instruction": "",
        "id": "q15482",
        "input": "python numpy array of arrays flatten",
        "output": "",
        "rule": [
            "d15482"
        ]
    },
    {
        "instruction": "",
        "id": "q15483",
        "input": "how to connect python to user interfaaces",
        "output": "",
        "rule": [
            "d15483"
        ]
    },
    {
        "instruction": "",
        "id": "q15484",
        "input": "how to connect to flask socketio from python script",
        "output": "",
        "rule": [
            "d15484"
        ]
    },
    {
        "instruction": "",
        "id": "q15485",
        "input": "python numpy define 2 dimensional list",
        "output": "",
        "rule": [
            "d15485"
        ]
    },
    {
        "instruction": "",
        "id": "q15486",
        "input": "how to convertthe date format in python",
        "output": "",
        "rule": [
            "d15486"
        ]
    },
    {
        "instruction": "",
        "id": "q15487",
        "input": "python numpy index of nearest value",
        "output": "",
        "rule": [
            "d15487"
        ]
    },
    {
        "instruction": "",
        "id": "q15488",
        "input": "python numpy magnitude of vector",
        "output": "",
        "rule": [
            "d15488"
        ]
    },
    {
        "instruction": "",
        "id": "q15489",
        "input": "how to count masked values in masked array python",
        "output": "",
        "rule": [
            "d15489"
        ]
    },
    {
        "instruction": "",
        "id": "q15490",
        "input": "python numpy max demension",
        "output": "",
        "rule": [
            "d15490"
        ]
    },
    {
        "instruction": "",
        "id": "q15491",
        "input": "how to count number of lines in a files in python",
        "output": "",
        "rule": [
            "d15491"
        ]
    },
    {
        "instruction": "",
        "id": "q15492",
        "input": "python numpy save to json",
        "output": "",
        "rule": [
            "d15492"
        ]
    },
    {
        "instruction": "",
        "id": "q15493",
        "input": "how to count the frequency of a string in a text file python",
        "output": "",
        "rule": [
            "d15493"
        ]
    },
    {
        "instruction": "",
        "id": "q15494",
        "input": "python obfuscate base64 codecs eval",
        "output": "",
        "rule": [
            "d15494"
        ]
    },
    {
        "instruction": "",
        "id": "q15495",
        "input": "how to count the noofrows in table using python",
        "output": "",
        "rule": [
            "d15495"
        ]
    },
    {
        "instruction": "",
        "id": "q15496",
        "input": "python open a text file as a list",
        "output": "",
        "rule": [
            "d15496"
        ]
    },
    {
        "instruction": "",
        "id": "q15497",
        "input": "how to create a sequence of points in python",
        "output": "",
        "rule": [
            "d15497"
        ]
    },
    {
        "instruction": "",
        "id": "q15498",
        "input": "how to create a temporary text file from a string python",
        "output": "",
        "rule": [
            "d15498"
        ]
    },
    {
        "instruction": "",
        "id": "q15499",
        "input": "python opengl render text",
        "output": "",
        "rule": [
            "d15499"
        ]
    },
    {
        "instruction": "",
        "id": "q15500",
        "input": "how to create an automated test in python to check if an integer is part of a random function",
        "output": "",
        "rule": [
            "d15500"
        ]
    },
    {
        "instruction": "",
        "id": "q15501",
        "input": "python optionparser print usage",
        "output": "",
        "rule": [
            "d15501"
        ]
    },
    {
        "instruction": "",
        "id": "q15502",
        "input": "how to create an image gradient in python",
        "output": "",
        "rule": [
            "d15502"
        ]
    },
    {
        "instruction": "",
        "id": "q15503",
        "input": "python or perl scripting 2017",
        "output": "",
        "rule": [
            "d15503"
        ]
    },
    {
        "instruction": "",
        "id": "q15504",
        "input": "how to create an indent in python",
        "output": "",
        "rule": [
            "d15504"
        ]
    },
    {
        "instruction": "",
        "id": "q15505",
        "input": "python output graph without graphviz",
        "output": "",
        "rule": [
            "d15505"
        ]
    },
    {
        "instruction": "",
        "id": "q15506",
        "input": "how to create header in python",
        "output": "",
        "rule": [
            "d15506"
        ]
    },
    {
        "instruction": "",
        "id": "q15507",
        "input": "python pad image boundary with 0",
        "output": "",
        "rule": [
            "d15507"
        ]
    },
    {
        "instruction": "",
        "id": "q15508",
        "input": "how to create interfaces python",
        "output": "",
        "rule": [
            "d15508"
        ]
    },
    {
        "instruction": "",
        "id": "q15509",
        "input": "python pad symmetrical matrix",
        "output": "",
        "rule": [
            "d15509"
        ]
    },
    {
        "instruction": "",
        "id": "q15510",
        "input": "how to cut a list into groups of 10 python",
        "output": "",
        "rule": [
            "d15510"
        ]
    },
    {
        "instruction": "",
        "id": "q15511",
        "input": "python panda how to column counts and turn them into a df",
        "output": "",
        "rule": [
            "d15511"
        ]
    },
    {
        "instruction": "",
        "id": "q15512",
        "input": "how to decleare an empty dictinoary in python",
        "output": "",
        "rule": [
            "d15512"
        ]
    },
    {
        "instruction": "",
        "id": "q15513",
        "input": "python panedwindow is not defined",
        "output": "",
        "rule": [
            "d15513"
        ]
    },
    {
        "instruction": "",
        "id": "q15514",
        "input": "how to decompile python pyd file",
        "output": "",
        "rule": [
            "d15514"
        ]
    },
    {
        "instruction": "",
        "id": "q15515",
        "input": "python parallel load different files",
        "output": "",
        "rule": [
            "d15515"
        ]
    },
    {
        "instruction": "",
        "id": "q15516",
        "input": "how to dectect spaces in string python",
        "output": "",
        "rule": [
            "d15516"
        ]
    },
    {
        "instruction": "",
        "id": "q15517",
        "input": "python parse enviornment variables",
        "output": "",
        "rule": [
            "d15517"
        ]
    },
    {
        "instruction": "",
        "id": "q15518",
        "input": "how to define a binomial coeffecient function python",
        "output": "",
        "rule": [
            "d15518"
        ]
    },
    {
        "instruction": "",
        "id": "q15519",
        "input": "python parse local protobuf",
        "output": "",
        "rule": [
            "d15519"
        ]
    },
    {
        "instruction": "",
        "id": "q15520",
        "input": "how to define length of a new table in python",
        "output": "",
        "rule": [
            "d15520"
        ]
    },
    {
        "instruction": "",
        "id": "q15521",
        "input": "python parse log file example",
        "output": "",
        "rule": [
            "d15521"
        ]
    },
    {
        "instruction": "",
        "id": "q15522",
        "input": "how to delay for loop in python",
        "output": "",
        "rule": [
            "d15522"
        ]
    },
    {
        "instruction": "",
        "id": "q15523",
        "input": "python parse query string",
        "output": "",
        "rule": [
            "d15523"
        ]
    },
    {
        "instruction": "",
        "id": "q15524",
        "input": "how to delete a file after reading in python script",
        "output": "",
        "rule": [
            "d15524"
        ]
    },
    {
        "instruction": "",
        "id": "q15525",
        "input": "python parse rpc response",
        "output": "",
        "rule": [
            "d15525"
        ]
    },
    {
        "instruction": "",
        "id": "q15526",
        "input": "how to delete all empty values in dictionary python",
        "output": "",
        "rule": [
            "d15526"
        ]
    },
    {
        "instruction": "",
        "id": "q15527",
        "input": "python parse xml string to dict",
        "output": "",
        "rule": [
            "d15527"
        ]
    },
    {
        "instruction": "",
        "id": "q15528",
        "input": "how to delete all old python on ubuntu",
        "output": "",
        "rule": [
            "d15528"
        ]
    },
    {
        "instruction": "",
        "id": "q15529",
        "input": "python pass object to format",
        "output": "",
        "rule": [
            "d15529"
        ]
    },
    {
        "instruction": "",
        "id": "q15530",
        "input": "how to delete the elements of one list from another python without duplicates",
        "output": "",
        "rule": [
            "d15530"
        ]
    },
    {
        "instruction": "",
        "id": "q15531",
        "input": "python passing instance method to api",
        "output": "",
        "rule": [
            "d15531"
        ]
    },
    {
        "instruction": "",
        "id": "q15532",
        "input": "how to denote the total width of a line in python",
        "output": "",
        "rule": [
            "d15532"
        ]
    },
    {
        "instruction": "",
        "id": "q15533",
        "input": "python path parent's parent",
        "output": "",
        "rule": [
            "d15533"
        ]
    },
    {
        "instruction": "",
        "id": "q15534",
        "input": "how to detect encoding of a character python",
        "output": "",
        "rule": [
            "d15534"
        ]
    },
    {
        "instruction": "",
        "id": "q15535",
        "input": "python pathlib path get file size",
        "output": "",
        "rule": [
            "d15535"
        ]
    },
    {
        "instruction": "",
        "id": "q15536",
        "input": "how to detect files with specific extensions python",
        "output": "",
        "rule": [
            "d15536"
        ]
    },
    {
        "instruction": "",
        "id": "q15537",
        "input": "python pause in a loop",
        "output": "",
        "rule": [
            "d15537"
        ]
    },
    {
        "instruction": "",
        "id": "q15538",
        "input": "how to detect segments in an image python",
        "output": "",
        "rule": [
            "d15538"
        ]
    },
    {
        "instruction": "",
        "id": "q15539",
        "input": "python pdb stack frame",
        "output": "",
        "rule": [
            "d15539"
        ]
    },
    {
        "instruction": "",
        "id": "q15540",
        "input": "how to detect similarities in lists in python",
        "output": "",
        "rule": [
            "d15540"
        ]
    },
    {
        "instruction": "",
        "id": "q15541",
        "input": "python pickle failing to load old pickle file",
        "output": "",
        "rule": [
            "d15541"
        ]
    },
    {
        "instruction": "",
        "id": "q15542",
        "input": "how to deterine if a string is in a list python",
        "output": "",
        "rule": [
            "d15542"
        ]
    },
    {
        "instruction": "",
        "id": "q15543",
        "input": "python pickle load return value",
        "output": "",
        "rule": [
            "d15543"
        ]
    },
    {
        "instruction": "",
        "id": "q15544",
        "input": "how to determine font of a string in python",
        "output": "",
        "rule": [
            "d15544"
        ]
    },
    {
        "instruction": "",
        "id": "q15545",
        "input": "python pillow datetime timezone offset",
        "output": "",
        "rule": [
            "d15545"
        ]
    },
    {
        "instruction": "",
        "id": "q15546",
        "input": "how to determine that path at runtime on any machine from python program",
        "output": "",
        "rule": [
            "d15546"
        ]
    },
    {
        "instruction": "",
        "id": "q15547",
        "input": "python plot custom colormap",
        "output": "",
        "rule": [
            "d15547"
        ]
    },
    {
        "instruction": "",
        "id": "q15548",
        "input": "how to disable ssl certificate verification in python",
        "output": "",
        "rule": [
            "d15548"
        ]
    },
    {
        "instruction": "",
        "id": "q15549",
        "input": "python plot decision tree in sklearn",
        "output": "",
        "rule": [
            "d15549"
        ]
    },
    {
        "instruction": "",
        "id": "q15550",
        "input": "how to display a list of images in python",
        "output": "",
        "rule": [
            "d15550"
        ]
    },
    {
        "instruction": "",
        "id": "q15551",
        "input": "python plot fft of signal",
        "output": "",
        "rule": [
            "d15551"
        ]
    },
    {
        "instruction": "",
        "id": "q15552",
        "input": "how to display unique rows in python data frame",
        "output": "",
        "rule": [
            "d15552"
        ]
    },
    {
        "instruction": "",
        "id": "q15553",
        "input": "python pop dictionary iteration",
        "output": "",
        "rule": [
            "d15553"
        ]
    },
    {
        "instruction": "",
        "id": "q15554",
        "input": "how to do factorials using 4 loops in python",
        "output": "",
        "rule": [
            "d15554"
        ]
    },
    {
        "instruction": "",
        "id": "q15555",
        "input": "python post auth token requests",
        "output": "",
        "rule": [
            "d15555"
        ]
    },
    {
        "instruction": "",
        "id": "q15556",
        "input": "how to do multiline comments in python",
        "output": "",
        "rule": [
            "d15556"
        ]
    },
    {
        "instruction": "",
        "id": "q15557",
        "input": "python postgres print query results",
        "output": "",
        "rule": [
            "d15557"
        ]
    },
    {
        "instruction": "",
        "id": "q15558",
        "input": "how to download a file with python requests",
        "output": "",
        "rule": [
            "d15558"
        ]
    },
    {
        "instruction": "",
        "id": "q15559",
        "input": "python postgres query result as dictionary",
        "output": "",
        "rule": [
            "d15559"
        ]
    },
    {
        "instruction": "",
        "id": "q15560",
        "input": "how to draw a vertcile line in python on a graph",
        "output": "",
        "rule": [
            "d15560"
        ]
    },
    {
        "instruction": "",
        "id": "q15561",
        "input": "python pre exit handle",
        "output": "",
        "rule": [
            "d15561"
        ]
    },
    {
        "instruction": "",
        "id": "q15562",
        "input": "how to drop a table in python",
        "output": "",
        "rule": [
            "d15562"
        ]
    },
    {
        "instruction": "",
        "id": "q15563",
        "input": "python predict method is returning a list while only one number is given as input",
        "output": "",
        "rule": [
            "d15563"
        ]
    },
    {
        "instruction": "",
        "id": "q15564",
        "input": "how to elevate permissions in python",
        "output": "",
        "rule": [
            "d15564"
        ]
    },
    {
        "instruction": "",
        "id": "q15565",
        "input": "python pretty json string",
        "output": "",
        "rule": [
            "d15565"
        ]
    },
    {
        "instruction": "",
        "id": "q15566",
        "input": "how to eliminate white spaces in strings in python",
        "output": "",
        "rule": [
            "d15566"
        ]
    },
    {
        "instruction": "",
        "id": "q15567",
        "input": "python prettyprint custom objects",
        "output": "",
        "rule": [
            "d15567"
        ]
    },
    {
        "instruction": "",
        "id": "q15568",
        "input": "how to encode html into python",
        "output": "",
        "rule": [
            "d15568"
        ]
    },
    {
        "instruction": "",
        "id": "q15569",
        "input": "python previous date from row above",
        "output": "",
        "rule": [
            "d15569"
        ]
    },
    {
        "instruction": "",
        "id": "q15570",
        "input": "how to enter a new line into python",
        "output": "",
        "rule": [
            "d15570"
        ]
    },
    {
        "instruction": "",
        "id": "q15571",
        "input": "python print fields in a object",
        "output": "",
        "rule": [
            "d15571"
        ]
    },
    {
        "instruction": "",
        "id": "q15572",
        "input": "how to enter to a new line in python",
        "output": "",
        "rule": [
            "d15572"
        ]
    },
    {
        "instruction": "",
        "id": "q15573",
        "input": "python print from character to end of line",
        "output": "",
        "rule": [
            "d15573"
        ]
    },
    {
        "instruction": "",
        "id": "q15574",
        "input": "how to evaluate list of booleans python",
        "output": "",
        "rule": [
            "d15574"
        ]
    },
    {
        "instruction": "",
        "id": "q15575",
        "input": "python print function column limit",
        "output": "",
        "rule": [
            "d15575"
        ]
    },
    {
        "instruction": "",
        "id": "q15576",
        "input": "python print only one return value from function",
        "output": "",
        "rule": [
            "d15576"
        ]
    },
    {
        "instruction": "",
        "id": "q15577",
        "input": "how to exit the logger in python",
        "output": "",
        "rule": [
            "d15577"
        ]
    },
    {
        "instruction": "",
        "id": "q15578",
        "input": "python print time cost",
        "output": "",
        "rule": [
            "d15578"
        ]
    },
    {
        "instruction": "",
        "id": "q15579",
        "input": "how to expand pythons",
        "output": "",
        "rule": [
            "d15579"
        ]
    },
    {
        "instruction": "",
        "id": "q15580",
        "input": "python print time format from timestamp",
        "output": "",
        "rule": [
            "d15580"
        ]
    },
    {
        "instruction": "",
        "id": "q15581",
        "input": "how to express if something exist in python",
        "output": "",
        "rule": [
            "d15581"
        ]
    },
    {
        "instruction": "",
        "id": "q15582",
        "input": "python print to stdout or logger",
        "output": "",
        "rule": [
            "d15582"
        ]
    },
    {
        "instruction": "",
        "id": "q15583",
        "input": "how to extract tables of a sql database in python",
        "output": "",
        "rule": [
            "d15583"
        ]
    },
    {
        "instruction": "",
        "id": "q15584",
        "input": "python print tree recursion",
        "output": "",
        "rule": [
            "d15584"
        ]
    },
    {
        "instruction": "",
        "id": "q15585",
        "input": "how to finda key uisng a vlue in python dict",
        "output": "",
        "rule": [
            "d15585"
        ]
    },
    {
        "instruction": "",
        "id": "q15586",
        "input": "python program adjustable sigmoid functions",
        "output": "",
        "rule": [
            "d15586"
        ]
    },
    {
        "instruction": "",
        "id": "q15587",
        "input": "how to flatten a set python",
        "output": "",
        "rule": [
            "d15587"
        ]
    },
    {
        "instruction": "",
        "id": "q15588",
        "input": "python program for longest run of a number in a list",
        "output": "",
        "rule": [
            "d15588"
        ]
    },
    {
        "instruction": "",
        "id": "q15589",
        "input": "how to flip a matrix python",
        "output": "",
        "rule": [
            "d15589"
        ]
    },
    {
        "instruction": "",
        "id": "q15590",
        "input": "python program to print document in a specific folder",
        "output": "",
        "rule": [
            "d15590"
        ]
    },
    {
        "instruction": "",
        "id": "q15591",
        "input": "how to force a particular order of list in python",
        "output": "",
        "rule": [
            "d15591"
        ]
    },
    {
        "instruction": "",
        "id": "q15592",
        "input": "python progress bar for file upload",
        "output": "",
        "rule": [
            "d15592"
        ]
    },
    {
        "instruction": "",
        "id": "q15593",
        "input": "how to force integer type input in python",
        "output": "",
        "rule": [
            "d15593"
        ]
    },
    {
        "instruction": "",
        "id": "q15594",
        "input": "python project root folder",
        "output": "",
        "rule": [
            "d15594"
        ]
    },
    {
        "instruction": "",
        "id": "q15595",
        "input": "how to generate hash of tuple python",
        "output": "",
        "rule": [
            "d15595"
        ]
    },
    {
        "instruction": "",
        "id": "q15596",
        "input": "python prompt input invisible",
        "output": "",
        "rule": [
            "d15596"
        ]
    },
    {
        "instruction": "",
        "id": "q15597",
        "input": "how to generate md5 hash python",
        "output": "",
        "rule": [
            "d15597"
        ]
    },
    {
        "instruction": "",
        "id": "q15598",
        "input": "python property setter not callable",
        "output": "",
        "rule": [
            "d15598"
        ]
    },
    {
        "instruction": "",
        "id": "q15599",
        "input": "how to generate random datetime in python",
        "output": "",
        "rule": [
            "d15599"
        ]
    },
    {
        "instruction": "",
        "id": "q15600",
        "input": "python protobuf parse from string",
        "output": "",
        "rule": [
            "d15600"
        ]
    },
    {
        "instruction": "",
        "id": "q15601",
        "input": "how to generate unique identifier python",
        "output": "",
        "rule": [
            "d15601"
        ]
    },
    {
        "instruction": "",
        "id": "q15602",
        "input": "python put bins into array",
        "output": "",
        "rule": [
            "d15602"
        ]
    },
    {
        "instruction": "",
        "id": "q15603",
        "input": "how to generate unique random numbers in python",
        "output": "",
        "rule": [
            "d15603"
        ]
    },
    {
        "instruction": "",
        "id": "q15604",
        "input": "python pylab draw arrow on x and y axis",
        "output": "",
        "rule": [
            "d15604"
        ]
    },
    {
        "instruction": "",
        "id": "q15605",
        "input": "how to get 25th and 75th percentile + python",
        "output": "",
        "rule": [
            "d15605"
        ]
    },
    {
        "instruction": "",
        "id": "q15606",
        "input": "python pylint how to write a function doctring",
        "output": "",
        "rule": [
            "d15606"
        ]
    },
    {
        "instruction": "",
        "id": "q15607",
        "input": "how to get a dict out of a string in python",
        "output": "",
        "rule": [
            "d15607"
        ]
    },
    {
        "instruction": "",
        "id": "q15608",
        "input": "python pylint variable overwrite",
        "output": "",
        "rule": [
            "d15608"
        ]
    },
    {
        "instruction": "",
        "id": "q15609",
        "input": "how to get a file from web in python",
        "output": "",
        "rule": [
            "d15609"
        ]
    },
    {
        "instruction": "",
        "id": "q15610",
        "input": "python pymongo update field based on other field",
        "output": "",
        "rule": [
            "d15610"
        ]
    },
    {
        "instruction": "",
        "id": "q15611",
        "input": "how to get a function in python to apply to a changes number of variables",
        "output": "",
        "rule": [
            "d15611"
        ]
    },
    {
        "instruction": "",
        "id": "q15612",
        "input": "python pymysql converts mysqldatetime to python datetime",
        "output": "",
        "rule": [
            "d15612"
        ]
    },
    {
        "instruction": "",
        "id": "q15613",
        "input": "how to get a list of files in directory in python",
        "output": "",
        "rule": [
            "d15613"
        ]
    },
    {
        "instruction": "",
        "id": "q15614",
        "input": "python pytest jenkins coverage report",
        "output": "",
        "rule": [
            "d15614"
        ]
    },
    {
        "instruction": "",
        "id": "q15615",
        "input": "how to get a list of fonts in python",
        "output": "",
        "rule": [
            "d15615"
        ]
    },
    {
        "instruction": "",
        "id": "q15616",
        "input": "python pytest with files",
        "output": "",
        "rule": [
            "d15616"
        ]
    },
    {
        "instruction": "",
        "id": "q15617",
        "input": "how to get a random float between 0 and 1 in python",
        "output": "",
        "rule": [
            "d15617"
        ]
    },
    {
        "instruction": "",
        "id": "q15618",
        "input": "python qmenu popup size 1",
        "output": "",
        "rule": [
            "d15618"
        ]
    },
    {
        "instruction": "",
        "id": "q15619",
        "input": "how to get block device information python linux",
        "output": "",
        "rule": [
            "d15619"
        ]
    },
    {
        "instruction": "",
        "id": "q15620",
        "input": "python query remove element",
        "output": "",
        "rule": [
            "d15620"
        ]
    },
    {
        "instruction": "",
        "id": "q15621",
        "input": "how to get combinations of list in python",
        "output": "",
        "rule": [
            "d15621"
        ]
    },
    {
        "instruction": "",
        "id": "q15622",
        "input": "how to get combobox box in python by self method",
        "output": "",
        "rule": [
            "d15622"
        ]
    },
    {
        "instruction": "",
        "id": "q15623",
        "input": "python queue how to remove an item",
        "output": "",
        "rule": [
            "d15623"
        ]
    },
    {
        "instruction": "",
        "id": "q15624",
        "input": "how to get cookie from request in python",
        "output": "",
        "rule": [
            "d15624"
        ]
    },
    {
        "instruction": "",
        "id": "q15625",
        "input": "python rand with min max",
        "output": "",
        "rule": [
            "d15625"
        ]
    },
    {
        "instruction": "",
        "id": "q15626",
        "input": "how to get correlation coefficient matrix in python numpy",
        "output": "",
        "rule": [
            "d15626"
        ]
    },
    {
        "instruction": "",
        "id": "q15627",
        "input": "python random filename string",
        "output": "",
        "rule": [
            "d15627"
        ]
    },
    {
        "instruction": "",
        "id": "q15628",
        "input": "how to get dataset dimenion in python",
        "output": "",
        "rule": [
            "d15628"
        ]
    },
    {
        "instruction": "",
        "id": "q15629",
        "input": "python random number generation normal distribution",
        "output": "",
        "rule": [
            "d15629"
        ]
    },
    {
        "instruction": "",
        "id": "q15630",
        "input": "how to get dynamic file name in python",
        "output": "",
        "rule": [
            "d15630"
        ]
    },
    {
        "instruction": "",
        "id": "q15631",
        "input": "python random truncated gaussian",
        "output": "",
        "rule": [
            "d15631"
        ]
    },
    {
        "instruction": "",
        "id": "q15632",
        "input": "how to get first child only python",
        "output": "",
        "rule": [
            "d15632"
        ]
    },
    {
        "instruction": "",
        "id": "q15633",
        "input": "python randomize items in a list",
        "output": "",
        "rule": [
            "d15633"
        ]
    },
    {
        "instruction": "",
        "id": "q15634",
        "input": "how to get kafka topics python",
        "output": "",
        "rule": [
            "d15634"
        ]
    },
    {
        "instruction": "",
        "id": "q15635",
        "input": "python range on a string",
        "output": "",
        "rule": [
            "d15635"
        ]
    },
    {
        "instruction": "",
        "id": "q15636",
        "input": "how to get location of python",
        "output": "",
        "rule": [
            "d15636"
        ]
    },
    {
        "instruction": "",
        "id": "q15637",
        "input": "python rangefunction to include even the higher limit",
        "output": "",
        "rule": [
            "d15637"
        ]
    },
    {
        "instruction": "",
        "id": "q15638",
        "input": "how to get most recently added file in directory python",
        "output": "",
        "rule": [
            "d15638"
        ]
    },
    {
        "instruction": "",
        "id": "q15639",
        "input": "python re compile case sensitive",
        "output": "",
        "rule": [
            "d15639"
        ]
    },
    {
        "instruction": "",
        "id": "q15640",
        "input": "how to get output from a code line multiple times in python",
        "output": "",
        "rule": [
            "d15640"
        ]
    },
    {
        "instruction": "",
        "id": "q15641",
        "input": "python read binary file as utf8",
        "output": "",
        "rule": [
            "d15641"
        ]
    },
    {
        "instruction": "",
        "id": "q15642",
        "input": "how to get output of bash command in python",
        "output": "",
        "rule": [
            "d15642"
        ]
    },
    {
        "instruction": "",
        "id": "q15643",
        "input": "python read file and replace string according the match",
        "output": "",
        "rule": [
            "d15643"
        ]
    },
    {
        "instruction": "",
        "id": "q15644",
        "input": "how to get python to read javascript",
        "output": "",
        "rule": [
            "d15644"
        ]
    },
    {
        "instruction": "",
        "id": "q15645",
        "input": "python read file as giant string",
        "output": "",
        "rule": [
            "d15645"
        ]
    },
    {
        "instruction": "",
        "id": "q15646",
        "input": "how to get rid of repeats list python",
        "output": "",
        "rule": [
            "d15646"
        ]
    },
    {
        "instruction": "",
        "id": "q15647",
        "input": "python read in a java serialized object as a string",
        "output": "",
        "rule": [
            "d15647"
        ]
    },
    {
        "instruction": "",
        "id": "q15648",
        "input": "how to get shell command results in python",
        "output": "",
        "rule": [
            "d15648"
        ]
    },
    {
        "instruction": "",
        "id": "q15649",
        "input": "python read in a text file with comments into a list",
        "output": "",
        "rule": [
            "d15649"
        ]
    },
    {
        "instruction": "",
        "id": "q15650",
        "input": "how to get size of directory in python",
        "output": "",
        "rule": [
            "d15650"
        ]
    },
    {
        "instruction": "",
        "id": "q15651",
        "input": "python read lines of text from standard input",
        "output": "",
        "rule": [
            "d15651"
        ]
    },
    {
        "instruction": "",
        "id": "q15652",
        "input": "how to get string from open file python",
        "output": "",
        "rule": [
            "d15652"
        ]
    },
    {
        "instruction": "",
        "id": "q15653",
        "input": "python read rsa public key",
        "output": "",
        "rule": [
            "d15653"
        ]
    },
    {
        "instruction": "",
        "id": "q15654",
        "input": "how to get the accuracy of a model in python",
        "output": "",
        "rule": [
            "d15654"
        ]
    },
    {
        "instruction": "",
        "id": "q15655",
        "input": "python reading in underscore problem",
        "output": "",
        "rule": [
            "d15655"
        ]
    },
    {
        "instruction": "",
        "id": "q15656",
        "input": "how to get the eigen values of an image in python",
        "output": "",
        "rule": [
            "d15656"
        ]
    },
    {
        "instruction": "",
        "id": "q15657",
        "input": "python recursive dictionary tree update",
        "output": "",
        "rule": [
            "d15657"
        ]
    },
    {
        "instruction": "",
        "id": "q15658",
        "input": "how to get the lexcial diversity in a strings using python",
        "output": "",
        "rule": [
            "d15658"
        ]
    },
    {
        "instruction": "",
        "id": "q15659",
        "input": "python redis create connection pool",
        "output": "",
        "rule": [
            "d15659"
        ]
    },
    {
        "instruction": "",
        "id": "q15660",
        "input": "how to get the span from a match python re",
        "output": "",
        "rule": [
            "d15660"
        ]
    },
    {
        "instruction": "",
        "id": "q15661",
        "input": "python redis exists key",
        "output": "",
        "rule": [
            "d15661"
        ]
    },
    {
        "instruction": "",
        "id": "q15662",
        "input": "how to get the type of an object in python",
        "output": "",
        "rule": [
            "d15662"
        ]
    },
    {
        "instruction": "",
        "id": "q15663",
        "input": "python redis how to get all keys",
        "output": "",
        "rule": [
            "d15663"
        ]
    },
    {
        "instruction": "",
        "id": "q15664",
        "input": "python redis set return value",
        "output": "",
        "rule": [
            "d15664"
        ]
    },
    {
        "instruction": "",
        "id": "q15665",
        "input": "how to get unique id using python",
        "output": "",
        "rule": [
            "d15665"
        ]
    },
    {
        "instruction": "",
        "id": "q15666",
        "input": "python redis write set",
        "output": "",
        "rule": [
            "d15666"
        ]
    },
    {
        "instruction": "",
        "id": "q15667",
        "input": "how to get weekending date in python",
        "output": "",
        "rule": [
            "d15667"
        ]
    },
    {
        "instruction": "",
        "id": "q15668",
        "input": "python refer to object as string representation",
        "output": "",
        "rule": [
            "d15668"
        ]
    },
    {
        "instruction": "",
        "id": "q15669",
        "input": "how to give default value if key does not exist in dictionary python",
        "output": "",
        "rule": [
            "d15669"
        ]
    },
    {
        "instruction": "",
        "id": "q15670",
        "input": "python reg expression replace apostrophe",
        "output": "",
        "rule": [
            "d15670"
        ]
    },
    {
        "instruction": "",
        "id": "q15671",
        "input": "how to give python validation in input",
        "output": "",
        "rule": [
            "d15671"
        ]
    },
    {
        "instruction": "",
        "id": "q15672",
        "input": "python regex contains case insensitive",
        "output": "",
        "rule": [
            "d15672"
        ]
    },
    {
        "instruction": "",
        "id": "q15673",
        "input": "python regex get all integers",
        "output": "",
        "rule": [
            "d15673"
        ]
    },
    {
        "instruction": "",
        "id": "q15674",
        "input": "how to grab current time in python 3",
        "output": "",
        "rule": [
            "d15674"
        ]
    },
    {
        "instruction": "",
        "id": "q15675",
        "input": "python regexp case insensitive",
        "output": "",
        "rule": [
            "d15675"
        ]
    },
    {
        "instruction": "",
        "id": "q15676",
        "input": "how to hash multiple lines in python",
        "output": "",
        "rule": [
            "d15676"
        ]
    },
    {
        "instruction": "",
        "id": "q15677",
        "input": "python regkey get name of key",
        "output": "",
        "rule": [
            "d15677"
        ]
    },
    {
        "instruction": "",
        "id": "q15678",
        "input": "how to have a string for a function input in python",
        "output": "",
        "rule": [
            "d15678"
        ]
    },
    {
        "instruction": "",
        "id": "q15679",
        "input": "python regular expression for finding an integer from a string",
        "output": "",
        "rule": [
            "d15679"
        ]
    },
    {
        "instruction": "",
        "id": "q15680",
        "input": "how to hidden controls of frame in python",
        "output": "",
        "rule": [
            "d15680"
        ]
    },
    {
        "instruction": "",
        "id": "q15681",
        "input": "python release memory after function call",
        "output": "",
        "rule": [
            "d15681"
        ]
    },
    {
        "instruction": "",
        "id": "q15682",
        "input": "how to hide comment in python",
        "output": "",
        "rule": [
            "d15682"
        ]
    },
    {
        "instruction": "",
        "id": "q15683",
        "input": "python remove all element in dictionary whose",
        "output": "",
        "rule": [
            "d15683"
        ]
    },
    {
        "instruction": "",
        "id": "q15684",
        "input": "how to identify columsn with missing data in python 3",
        "output": "",
        "rule": [
            "d15684"
        ]
    },
    {
        "instruction": "",
        "id": "q15685",
        "input": "python remove all files not in a list",
        "output": "",
        "rule": [
            "d15685"
        ]
    },
    {
        "instruction": "",
        "id": "q15686",
        "input": "how to increase coverage in unit testing python",
        "output": "",
        "rule": [
            "d15686"
        ]
    },
    {
        "instruction": "",
        "id": "q15687",
        "input": "python remove all zeros from a list",
        "output": "",
        "rule": [
            "d15687"
        ]
    },
    {
        "instruction": "",
        "id": "q15688",
        "input": "how to inspect a function python",
        "output": "",
        "rule": [
            "d15688"
        ]
    },
    {
        "instruction": "",
        "id": "q15689",
        "input": "python remove any white spaces from string",
        "output": "",
        "rule": [
            "d15689"
        ]
    },
    {
        "instruction": "",
        "id": "q15690",
        "input": "how to interpolate logarithmic in python",
        "output": "",
        "rule": [
            "d15690"
        ]
    },
    {
        "instruction": "",
        "id": "q15691",
        "input": "python remove comma from list",
        "output": "",
        "rule": [
            "d15691"
        ]
    },
    {
        "instruction": "",
        "id": "q15692",
        "input": "how to keep prompt in python",
        "output": "",
        "rule": [
            "d15692"
        ]
    },
    {
        "instruction": "",
        "id": "q15693",
        "input": "python remove commas from list string",
        "output": "",
        "rule": [
            "d15693"
        ]
    },
    {
        "instruction": "",
        "id": "q15694",
        "input": "how to limit a float in python",
        "output": "",
        "rule": [
            "d15694"
        ]
    },
    {
        "instruction": "",
        "id": "q15695",
        "input": "python remove dictionary element",
        "output": "",
        "rule": [
            "d15695"
        ]
    },
    {
        "instruction": "",
        "id": "q15696",
        "input": "how to limit the decimals in python",
        "output": "",
        "rule": [
            "d15696"
        ]
    },
    {
        "instruction": "",
        "id": "q15697",
        "input": "python remove dictionary object if has attribute",
        "output": "",
        "rule": [
            "d15697"
        ]
    },
    {
        "instruction": "",
        "id": "q15698",
        "input": "how to linear fit in python for some points",
        "output": "",
        "rule": [
            "d15698"
        ]
    },
    {
        "instruction": "",
        "id": "q15699",
        "input": "python remove files by extension",
        "output": "",
        "rule": [
            "d15699"
        ]
    },
    {
        "instruction": "",
        "id": "q15700",
        "input": "how to list the properties of a variable in python",
        "output": "",
        "rule": [
            "d15700"
        ]
    },
    {
        "instruction": "",
        "id": "q15701",
        "input": "python remove first n item",
        "output": "",
        "rule": [
            "d15701"
        ]
    },
    {
        "instruction": "",
        "id": "q15702",
        "input": "how to load a dot max file into python",
        "output": "",
        "rule": [
            "d15702"
        ]
    },
    {
        "instruction": "",
        "id": "q15703",
        "input": "python remove html from string",
        "output": "",
        "rule": [
            "d15703"
        ]
    },
    {
        "instruction": "",
        "id": "q15704",
        "input": "python remove item from heap",
        "output": "",
        "rule": [
            "d15704"
        ]
    },
    {
        "instruction": "",
        "id": "q15705",
        "input": "python remove legend from plot",
        "output": "",
        "rule": [
            "d15705"
        ]
    },
    {
        "instruction": "",
        "id": "q15706",
        "input": "how to log errors in python",
        "output": "",
        "rule": [
            "d15706"
        ]
    },
    {
        "instruction": "",
        "id": "q15707",
        "input": "python remove linebreak inside string",
        "output": "",
        "rule": [
            "d15707"
        ]
    },
    {
        "instruction": "",
        "id": "q15708",
        "input": "how to loop through python iterator without stopiteration error",
        "output": "",
        "rule": [
            "d15708"
        ]
    },
    {
        "instruction": "",
        "id": "q15709",
        "input": "python remove new line character from string\\",
        "output": "",
        "rule": [
            "d15709"
        ]
    },
    {
        "instruction": "",
        "id": "q15710",
        "input": "how to make a character in dot format python",
        "output": "",
        "rule": [
            "d15710"
        ]
    },
    {
        "instruction": "",
        "id": "q15711",
        "input": "python remove non english letter",
        "output": "",
        "rule": [
            "d15711"
        ]
    },
    {
        "instruction": "",
        "id": "q15712",
        "input": "how to make a histogram in python multiple datasets",
        "output": "",
        "rule": [
            "d15712"
        ]
    },
    {
        "instruction": "",
        "id": "q15713",
        "input": "python remove space multiple",
        "output": "",
        "rule": [
            "d15713"
        ]
    },
    {
        "instruction": "",
        "id": "q15714",
        "input": "how to make a max heap in python heapq",
        "output": "",
        "rule": [
            "d15714"
        ]
    },
    {
        "instruction": "",
        "id": "q15715",
        "input": "python remove stopwords from a dictionary",
        "output": "",
        "rule": [
            "d15715"
        ]
    },
    {
        "instruction": "",
        "id": "q15716",
        "input": "how to make a range of weekly dates in python",
        "output": "",
        "rule": [
            "d15716"
        ]
    },
    {
        "instruction": "",
        "id": "q15717",
        "input": "python remove whitespace line",
        "output": "",
        "rule": [
            "d15717"
        ]
    },
    {
        "instruction": "",
        "id": "q15718",
        "input": "how to make a scrollbar in python tkinter",
        "output": "",
        "rule": [
            "d15718"
        ]
    },
    {
        "instruction": "",
        "id": "q15719",
        "input": "python repalce all backslash characters",
        "output": "",
        "rule": [
            "d15719"
        ]
    },
    {
        "instruction": "",
        "id": "q15720",
        "input": "python repeat try catch block",
        "output": "",
        "rule": [
            "d15720"
        ]
    },
    {
        "instruction": "",
        "id": "q15721",
        "input": "python replace keyword in input file",
        "output": "",
        "rule": [
            "d15721"
        ]
    },
    {
        "instruction": "",
        "id": "q15722",
        "input": "how to make a str an int python",
        "output": "",
        "rule": [
            "d15722"
        ]
    },
    {
        "instruction": "",
        "id": "q15723",
        "input": "python replace multiple occurancew of text",
        "output": "",
        "rule": [
            "d15723"
        ]
    },
    {
        "instruction": "",
        "id": "q15724",
        "input": "how to make a string into a dictionary in python",
        "output": "",
        "rule": [
            "d15724"
        ]
    },
    {
        "instruction": "",
        "id": "q15725",
        "input": "python replace nan with missing value",
        "output": "",
        "rule": [
            "d15725"
        ]
    },
    {
        "instruction": "",
        "id": "q15726",
        "input": "how to make a table in python with given columns",
        "output": "",
        "rule": [
            "d15726"
        ]
    },
    {
        "instruction": "",
        "id": "q15727",
        "input": "python request information from usb",
        "output": "",
        "rule": [
            "d15727"
        ]
    },
    {
        "instruction": "",
        "id": "q15728",
        "input": "how to make arraybuffer from bytes in python",
        "output": "",
        "rule": [
            "d15728"
        ]
    },
    {
        "instruction": "",
        "id": "q15729",
        "input": "python requests check if url exists",
        "output": "",
        "rule": [
            "d15729"
        ]
    },
    {
        "instruction": "",
        "id": "q15730",
        "input": "how to make csv as table in python",
        "output": "",
        "rule": [
            "d15730"
        ]
    },
    {
        "instruction": "",
        "id": "q15731",
        "input": "python requests disable ssl checks",
        "output": "",
        "rule": [
            "d15731"
        ]
    },
    {
        "instruction": "",
        "id": "q15732",
        "input": "how to make functions static in python",
        "output": "",
        "rule": [
            "d15732"
        ]
    },
    {
        "instruction": "",
        "id": "q15733",
        "input": "python requests passing json payload",
        "output": "",
        "rule": [
            "d15733"
        ]
    },
    {
        "instruction": "",
        "id": "q15734",
        "input": "python requests session auth basic access",
        "output": "",
        "rule": [
            "d15734"
        ]
    },
    {
        "instruction": "",
        "id": "q15735",
        "input": "how to make image height and width equal in python",
        "output": "",
        "rule": [
            "d15735"
        ]
    },
    {
        "instruction": "",
        "id": "q15736",
        "input": "python requests session mount",
        "output": "",
        "rule": [
            "d15736"
        ]
    },
    {
        "instruction": "",
        "id": "q15737",
        "input": "how to make parts of word lowercase in python",
        "output": "",
        "rule": [
            "d15737"
        ]
    },
    {
        "instruction": "",
        "id": "q15738",
        "input": "python reset all variables to initial values",
        "output": "",
        "rule": [
            "d15738"
        ]
    },
    {
        "instruction": "",
        "id": "q15739",
        "input": "how to make post requst in python",
        "output": "",
        "rule": [
            "d15739"
        ]
    },
    {
        "instruction": "",
        "id": "q15740",
        "input": "python reshape array into single array",
        "output": "",
        "rule": [
            "d15740"
        ]
    },
    {
        "instruction": "",
        "id": "q15741",
        "input": "how to make python display maximum and minimum number",
        "output": "",
        "rule": [
            "d15741"
        ]
    },
    {
        "instruction": "",
        "id": "q15742",
        "input": "python reshape multiple columns",
        "output": "",
        "rule": [
            "d15742"
        ]
    },
    {
        "instruction": "",
        "id": "q15743",
        "input": "how to make python give out a random integer",
        "output": "",
        "rule": [
            "d15743"
        ]
    },
    {
        "instruction": "",
        "id": "q15744",
        "input": "python retrieve func name",
        "output": "",
        "rule": [
            "d15744"
        ]
    },
    {
        "instruction": "",
        "id": "q15745",
        "input": "how to make raise custom errors in python",
        "output": "",
        "rule": [
            "d15745"
        ]
    },
    {
        "instruction": "",
        "id": "q15746",
        "input": "python return a list with one item removed",
        "output": "",
        "rule": [
            "d15746"
        ]
    },
    {
        "instruction": "",
        "id": "q15747",
        "input": "how to measure the execute time in python",
        "output": "",
        "rule": [
            "d15747"
        ]
    },
    {
        "instruction": "",
        "id": "q15748",
        "input": "python return location of substring",
        "output": "",
        "rule": [
            "d15748"
        ]
    },
    {
        "instruction": "",
        "id": "q15749",
        "input": "python return only letters from string",
        "output": "",
        "rule": [
            "d15749"
        ]
    },
    {
        "instruction": "",
        "id": "q15750",
        "input": "how to move a sprite in python 3",
        "output": "",
        "rule": [
            "d15750"
        ]
    },
    {
        "instruction": "",
        "id": "q15751",
        "input": "python return the index of an element in a list",
        "output": "",
        "rule": [
            "d15751"
        ]
    },
    {
        "instruction": "",
        "id": "q15752",
        "input": "how to move an item in a list to front python",
        "output": "",
        "rule": [
            "d15752"
        ]
    },
    {
        "instruction": "",
        "id": "q15753",
        "input": "python return the index of the minimum value in an numpy array",
        "output": "",
        "rule": [
            "d15753"
        ]
    },
    {
        "instruction": "",
        "id": "q15754",
        "input": "how to multiply object in list python",
        "output": "",
        "rule": [
            "d15754"
        ]
    },
    {
        "instruction": "",
        "id": "q15755",
        "input": "python return the two closest numbers to a value in an array",
        "output": "",
        "rule": [
            "d15755"
        ]
    },
    {
        "instruction": "",
        "id": "q15756",
        "input": "how to normalise a matrix in python'",
        "output": "",
        "rule": [
            "d15756"
        ]
    },
    {
        "instruction": "",
        "id": "q15757",
        "input": "python reverse map dict",
        "output": "",
        "rule": [
            "d15757"
        ]
    },
    {
        "instruction": "",
        "id": "q15758",
        "input": "how to open a pkl file in python",
        "output": "",
        "rule": [
            "d15758"
        ]
    },
    {
        "instruction": "",
        "id": "q15759",
        "input": "python rotation matrix 2 euler",
        "output": "",
        "rule": [
            "d15759"
        ]
    },
    {
        "instruction": "",
        "id": "q15760",
        "input": "how to open file only as ascii in python",
        "output": "",
        "rule": [
            "d15760"
        ]
    },
    {
        "instruction": "",
        "id": "q15761",
        "input": "python round not showing correct number of decimal places",
        "output": "",
        "rule": [
            "d15761"
        ]
    },
    {
        "instruction": "",
        "id": "q15762",
        "input": "how to open gz files in python",
        "output": "",
        "rule": [
            "d15762"
        ]
    },
    {
        "instruction": "",
        "id": "q15763",
        "input": "python round number ndarray",
        "output": "",
        "rule": [
            "d15763"
        ]
    },
    {
        "instruction": "",
        "id": "q15764",
        "input": "how to output symbols in python",
        "output": "",
        "rule": [
            "d15764"
        ]
    },
    {
        "instruction": "",
        "id": "q15765",
        "input": "python round to int numpy",
        "output": "",
        "rule": [
            "d15765"
        ]
    },
    {
        "instruction": "",
        "id": "q15766",
        "input": "how to output the number of characters in something in python",
        "output": "",
        "rule": [
            "d15766"
        ]
    },
    {
        "instruction": "",
        "id": "q15767",
        "input": "python rounding decimals places",
        "output": "",
        "rule": [
            "d15767"
        ]
    },
    {
        "instruction": "",
        "id": "q15768",
        "input": "how to overlay an image on a background in python",
        "output": "",
        "rule": [
            "d15768"
        ]
    },
    {
        "instruction": "",
        "id": "q15769",
        "input": "python rows to columns but not transpose",
        "output": "",
        "rule": [
            "d15769"
        ]
    },
    {
        "instruction": "",
        "id": "q15770",
        "input": "how to overwrite print function python",
        "output": "",
        "rule": [
            "d15770"
        ]
    },
    {
        "instruction": "",
        "id": "q15771",
        "input": "python s3 remove bucket policy",
        "output": "",
        "rule": [
            "d15771"
        ]
    },
    {
        "instruction": "",
        "id": "q15772",
        "input": "how to pad an image in python",
        "output": "",
        "rule": [
            "d15772"
        ]
    },
    {
        "instruction": "",
        "id": "q15773",
        "input": "python s3 save string",
        "output": "",
        "rule": [
            "d15773"
        ]
    },
    {
        "instruction": "",
        "id": "q15774",
        "input": "how to pass the variables between functions in python with multiple args",
        "output": "",
        "rule": [
            "d15774"
        ]
    },
    {
        "instruction": "",
        "id": "q15775",
        "input": "python save base64 string to image",
        "output": "",
        "rule": [
            "d15775"
        ]
    },
    {
        "instruction": "",
        "id": "q15776",
        "input": "how to plot various charts on a single figure python",
        "output": "",
        "rule": [
            "d15776"
        ]
    },
    {
        "instruction": "",
        "id": "q15777",
        "input": "python save networkx file",
        "output": "",
        "rule": [
            "d15777"
        ]
    },
    {
        "instruction": "",
        "id": "q15778",
        "input": "how to print 1st ten lines of an npy file python",
        "output": "",
        "rule": [
            "d15778"
        ]
    },
    {
        "instruction": "",
        "id": "q15779",
        "input": "python scapy is ssl packet",
        "output": "",
        "rule": [
            "d15779"
        ]
    },
    {
        "instruction": "",
        "id": "q15780",
        "input": "how to print a python doc",
        "output": "",
        "rule": [
            "d15780"
        ]
    },
    {
        "instruction": "",
        "id": "q15781",
        "input": "python scatter specify marker and color",
        "output": "",
        "rule": [
            "d15781"
        ]
    },
    {
        "instruction": "",
        "id": "q15782",
        "input": "how to print all values in dictionary python",
        "output": "",
        "rule": [
            "d15782"
        ]
    },
    {
        "instruction": "",
        "id": "q15783",
        "input": "python scipy optimize constraint example",
        "output": "",
        "rule": [
            "d15783"
        ]
    },
    {
        "instruction": "",
        "id": "q15784",
        "input": "how to print data in table format python csv",
        "output": "",
        "rule": [
            "d15784"
        ]
    },
    {
        "instruction": "",
        "id": "q15785",
        "input": "python scope of variable in function",
        "output": "",
        "rule": [
            "d15785"
        ]
    },
    {
        "instruction": "",
        "id": "q15786",
        "input": "how to print each value in dictionary python",
        "output": "",
        "rule": [
            "d15786"
        ]
    },
    {
        "instruction": "",
        "id": "q15787",
        "input": "python scrapy do not print log",
        "output": "",
        "rule": [
            "d15787"
        ]
    },
    {
        "instruction": "",
        "id": "q15788",
        "input": "how to print out the index of a line in python",
        "output": "",
        "rule": [
            "d15788"
        ]
    },
    {
        "instruction": "",
        "id": "q15789",
        "input": "how to print text in color in python",
        "output": "",
        "rule": [
            "d15789"
        ]
    },
    {
        "instruction": "",
        "id": "q15790",
        "input": "python seconds to hours minutes seconds",
        "output": "",
        "rule": [
            "d15790"
        ]
    },
    {
        "instruction": "",
        "id": "q15791",
        "input": "how to print traceback error in python",
        "output": "",
        "rule": [
            "d15791"
        ]
    },
    {
        "instruction": "",
        "id": "q15792",
        "input": "python secure json server wrappedsocet",
        "output": "",
        "rule": [
            "d15792"
        ]
    },
    {
        "instruction": "",
        "id": "q15793",
        "input": "how to program mouse clicks and movments with python",
        "output": "",
        "rule": [
            "d15793"
        ]
    },
    {
        "instruction": "",
        "id": "q15794",
        "input": "python see if a file exists",
        "output": "",
        "rule": [
            "d15794"
        ]
    },
    {
        "instruction": "",
        "id": "q15795",
        "input": "how to put the legend box outside the graph matplotlib python",
        "output": "",
        "rule": [
            "d15795"
        ]
    },
    {
        "instruction": "",
        "id": "q15796",
        "input": "python see if a string has punctuation",
        "output": "",
        "rule": [
            "d15796"
        ]
    },
    {
        "instruction": "",
        "id": "q15797",
        "input": "how to quickly add hashtag to python",
        "output": "",
        "rule": [
            "d15797"
        ]
    },
    {
        "instruction": "",
        "id": "q15798",
        "input": "python see if queue is empty",
        "output": "",
        "rule": [
            "d15798"
        ]
    },
    {
        "instruction": "",
        "id": "q15799",
        "input": "how to randomize someones input in a list in python",
        "output": "",
        "rule": [
            "d15799"
        ]
    },
    {
        "instruction": "",
        "id": "q15800",
        "input": "python select row by boolen",
        "output": "",
        "rule": [
            "d15800"
        ]
    },
    {
        "instruction": "",
        "id": "q15801",
        "input": "how to randomly select indices in array python",
        "output": "",
        "rule": [
            "d15801"
        ]
    },
    {
        "instruction": "",
        "id": "q15802",
        "input": "python serialize and save a numpy array",
        "output": "",
        "rule": [
            "d15802"
        ]
    },
    {
        "instruction": "",
        "id": "q15803",
        "input": "how to read a binary file into numpy python",
        "output": "",
        "rule": [
            "d15803"
        ]
    },
    {
        "instruction": "",
        "id": "q15804",
        "input": "python series index to array",
        "output": "",
        "rule": [
            "d15804"
        ]
    },
    {
        "instruction": "",
        "id": "q15805",
        "input": "how to read a tif as a matrix in python",
        "output": "",
        "rule": [
            "d15805"
        ]
    },
    {
        "instruction": "",
        "id": "q15806",
        "input": "python series unique value and corresponding index",
        "output": "",
        "rule": [
            "d15806"
        ]
    },
    {
        "instruction": "",
        "id": "q15807",
        "input": "how to read file content in numpy python",
        "output": "",
        "rule": [
            "d15807"
        ]
    },
    {
        "instruction": "",
        "id": "q15808",
        "input": "python service manager, register",
        "output": "",
        "rule": [
            "d15808"
        ]
    },
    {
        "instruction": "",
        "id": "q15809",
        "input": "how to read in a text file as list python",
        "output": "",
        "rule": [
            "d15809"
        ]
    },
    {
        "instruction": "",
        "id": "q15810",
        "input": "python set case sensitive",
        "output": "",
        "rule": [
            "d15810"
        ]
    },
    {
        "instruction": "",
        "id": "q15811",
        "input": "how to read in file as list python",
        "output": "",
        "rule": [
            "d15811"
        ]
    },
    {
        "instruction": "",
        "id": "q15812",
        "input": "python set list no duplicates",
        "output": "",
        "rule": [
            "d15812"
        ]
    },
    {
        "instruction": "",
        "id": "q15813",
        "input": "how to read matrix in python",
        "output": "",
        "rule": [
            "d15813"
        ]
    },
    {
        "instruction": "",
        "id": "q15814",
        "input": "python set list with not duplicates",
        "output": "",
        "rule": [
            "d15814"
        ]
    },
    {
        "instruction": "",
        "id": "q15815",
        "input": "how to read the lowest value out of a set of values in python",
        "output": "",
        "rule": [
            "d15815"
        ]
    },
    {
        "instruction": "",
        "id": "q15816",
        "input": "python set pixel in matplotlib figure",
        "output": "",
        "rule": [
            "d15816"
        ]
    },
    {
        "instruction": "",
        "id": "q15817",
        "input": "how to reduce noise in an image python",
        "output": "",
        "rule": [
            "d15817"
        ]
    },
    {
        "instruction": "",
        "id": "q15818",
        "input": "python set random state",
        "output": "",
        "rule": [
            "d15818"
        ]
    },
    {
        "instruction": "",
        "id": "q15819",
        "input": "how to reduce significant digits in python",
        "output": "",
        "rule": [
            "d15819"
        ]
    },
    {
        "instruction": "",
        "id": "q15820",
        "input": "python set subtract another set",
        "output": "",
        "rule": [
            "d15820"
        ]
    },
    {
        "instruction": "",
        "id": "q15821",
        "input": "how to refer coordinate's tuple in python",
        "output": "",
        "rule": [
            "d15821"
        ]
    },
    {
        "instruction": "",
        "id": "q15822",
        "input": "python set text size",
        "output": "",
        "rule": [
            "d15822"
        ]
    },
    {
        "instruction": "",
        "id": "q15823",
        "input": "how to refresh win in graphics python",
        "output": "",
        "rule": [
            "d15823"
        ]
    },
    {
        "instruction": "",
        "id": "q15824",
        "input": "how to remove a file extension in python",
        "output": "",
        "rule": [
            "d15824"
        ]
    },
    {
        "instruction": "",
        "id": "q15825",
        "input": "how to remove all alphabets in a string in python",
        "output": "",
        "rule": [
            "d15825"
        ]
    },
    {
        "instruction": "",
        "id": "q15826",
        "input": "python setuptools undefined distutils defines",
        "output": "",
        "rule": [
            "d15826"
        ]
    },
    {
        "instruction": "",
        "id": "q15827",
        "input": "how to remove all non alophatcial characters from string python",
        "output": "",
        "rule": [
            "d15827"
        ]
    },
    {
        "instruction": "",
        "id": "q15828",
        "input": "python seurch closest in the list",
        "output": "",
        "rule": [
            "d15828"
        ]
    },
    {
        "instruction": "",
        "id": "q15829",
        "input": "how to remove all of one character from a string python",
        "output": "",
        "rule": [
            "d15829"
        ]
    },
    {
        "instruction": "",
        "id": "q15830",
        "input": "python show only distinct elements in a list",
        "output": "",
        "rule": [
            "d15830"
        ]
    },
    {
        "instruction": "",
        "id": "q15831",
        "input": "how to remove and then insert item from list python",
        "output": "",
        "rule": [
            "d15831"
        ]
    },
    {
        "instruction": "",
        "id": "q15832",
        "input": "python shutil rmtree [errno 39] directory not empty",
        "output": "",
        "rule": [
            "d15832"
        ]
    },
    {
        "instruction": "",
        "id": "q15833",
        "input": "python signal handler quit",
        "output": "",
        "rule": [
            "d15833"
        ]
    },
    {
        "instruction": "",
        "id": "q15834",
        "input": "how to remove blank lines of text file with python",
        "output": "",
        "rule": [
            "d15834"
        ]
    },
    {
        "instruction": "",
        "id": "q15835",
        "input": "python simple way to remove duplicates",
        "output": "",
        "rule": [
            "d15835"
        ]
    },
    {
        "instruction": "",
        "id": "q15836",
        "input": "how to remove cache python",
        "output": "",
        "rule": [
            "d15836"
        ]
    },
    {
        "instruction": "",
        "id": "q15837",
        "input": "python sklearn fit several versions of a model with different features",
        "output": "",
        "rule": [
            "d15837"
        ]
    },
    {
        "instruction": "",
        "id": "q15838",
        "input": "how to remove comma in a string python",
        "output": "",
        "rule": [
            "d15838"
        ]
    },
    {
        "instruction": "",
        "id": "q15839",
        "input": "python slice array beginning",
        "output": "",
        "rule": [
            "d15839"
        ]
    },
    {
        "instruction": "",
        "id": "q15840",
        "input": "how to remove empty dictionaries in python",
        "output": "",
        "rule": [
            "d15840"
        ]
    },
    {
        "instruction": "",
        "id": "q15841",
        "input": "python slice array without copy",
        "output": "",
        "rule": [
            "d15841"
        ]
    },
    {
        "instruction": "",
        "id": "q15842",
        "input": "how to remove letters in python data frame",
        "output": "",
        "rule": [
            "d15842"
        ]
    },
    {
        "instruction": "",
        "id": "q15843",
        "input": "python slice list in unequal lengths",
        "output": "",
        "rule": [
            "d15843"
        ]
    },
    {
        "instruction": "",
        "id": "q15844",
        "input": "how to remove space string from a list in python",
        "output": "",
        "rule": [
            "d15844"
        ]
    },
    {
        "instruction": "",
        "id": "q15845",
        "input": "python slice notation iteables",
        "output": "",
        "rule": [
            "d15845"
        ]
    },
    {
        "instruction": "",
        "id": "q15846",
        "input": "how to repeat a try in python",
        "output": "",
        "rule": [
            "d15846"
        ]
    },
    {
        "instruction": "",
        "id": "q15847",
        "input": "python small unique id",
        "output": "",
        "rule": [
            "d15847"
        ]
    },
    {
        "instruction": "",
        "id": "q15848",
        "input": "how to replace a letter in python",
        "output": "",
        "rule": [
            "d15848"
        ]
    },
    {
        "instruction": "",
        "id": "q15849",
        "input": "python smooth a matrix",
        "output": "",
        "rule": [
            "d15849"
        ]
    },
    {
        "instruction": "",
        "id": "q15850",
        "input": "how to replace a phrase with underscore in python",
        "output": "",
        "rule": [
            "d15850"
        ]
    },
    {
        "instruction": "",
        "id": "q15851",
        "input": "python solve exponential function",
        "output": "",
        "rule": [
            "d15851"
        ]
    },
    {
        "instruction": "",
        "id": "q15852",
        "input": "how to replace a string in a file python",
        "output": "",
        "rule": [
            "d15852"
        ]
    },
    {
        "instruction": "",
        "id": "q15853",
        "input": "python some stdout to screen",
        "output": "",
        "rule": [
            "d15853"
        ]
    },
    {
        "instruction": "",
        "id": "q15854",
        "input": "how to replace infinity in python with 0",
        "output": "",
        "rule": [
            "d15854"
        ]
    },
    {
        "instruction": "",
        "id": "q15855",
        "input": "python sort an object by a value",
        "output": "",
        "rule": [
            "d15855"
        ]
    },
    {
        "instruction": "",
        "id": "q15856",
        "input": "how to replace remove spaces in input python",
        "output": "",
        "rule": [
            "d15856"
        ]
    },
    {
        "instruction": "",
        "id": "q15857",
        "input": "python sort dictionary list by key",
        "output": "",
        "rule": [
            "d15857"
        ]
    },
    {
        "instruction": "",
        "id": "q15858",
        "input": "how to replace the value in python by fillna",
        "output": "",
        "rule": [
            "d15858"
        ]
    },
    {
        "instruction": "",
        "id": "q15859",
        "input": "python sort filenames like windows",
        "output": "",
        "rule": [
            "d15859"
        ]
    },
    {
        "instruction": "",
        "id": "q15860",
        "input": "how to reset a input python",
        "output": "",
        "rule": [
            "d15860"
        ]
    },
    {
        "instruction": "",
        "id": "q15861",
        "input": "python specify precision of number",
        "output": "",
        "rule": [
            "d15861"
        ]
    },
    {
        "instruction": "",
        "id": "q15862",
        "input": "how to reset multi index python",
        "output": "",
        "rule": [
            "d15862"
        ]
    },
    {
        "instruction": "",
        "id": "q15863",
        "input": "python specify type in signature",
        "output": "",
        "rule": [
            "d15863"
        ]
    },
    {
        "instruction": "",
        "id": "q15864",
        "input": "how to reshape a 3d matrix to 2d python",
        "output": "",
        "rule": [
            "d15864"
        ]
    },
    {
        "instruction": "",
        "id": "q15865",
        "input": "python sphere fit huge radius",
        "output": "",
        "rule": [
            "d15865"
        ]
    },
    {
        "instruction": "",
        "id": "q15866",
        "input": "how to reshape an image into a 1 dimensional array on python",
        "output": "",
        "rule": [
            "d15866"
        ]
    },
    {
        "instruction": "",
        "id": "q15867",
        "input": "python sphinx attribute docstrings",
        "output": "",
        "rule": [
            "d15867"
        ]
    },
    {
        "instruction": "",
        "id": "q15868",
        "input": "how to retrieve pieces of an http code in python",
        "output": "",
        "rule": [
            "d15868"
        ]
    },
    {
        "instruction": "",
        "id": "q15869",
        "input": "python split a iterable to equal parts",
        "output": "",
        "rule": [
            "d15869"
        ]
    },
    {
        "instruction": "",
        "id": "q15870",
        "input": "how to return a json response in python",
        "output": "",
        "rule": [
            "d15870"
        ]
    },
    {
        "instruction": "",
        "id": "q15871",
        "input": "python split a list into multiple lists of size 3",
        "output": "",
        "rule": [
            "d15871"
        ]
    },
    {
        "instruction": "",
        "id": "q15872",
        "input": "how to return a y/n question in python using if then",
        "output": "",
        "rule": [
            "d15872"
        ]
    },
    {
        "instruction": "",
        "id": "q15873",
        "input": "python split line by space ignoring multiple",
        "output": "",
        "rule": [
            "d15873"
        ]
    },
    {
        "instruction": "",
        "id": "q15874",
        "input": "how to return path of a file in python",
        "output": "",
        "rule": [
            "d15874"
        ]
    },
    {
        "instruction": "",
        "id": "q15875",
        "input": "python split string into list of strings of length n",
        "output": "",
        "rule": [
            "d15875"
        ]
    },
    {
        "instruction": "",
        "id": "q15876",
        "input": "python sql conmmands whre clause",
        "output": "",
        "rule": [
            "d15876"
        ]
    },
    {
        "instruction": "",
        "id": "q15877",
        "input": "how to rotate a square through its origin in python",
        "output": "",
        "rule": [
            "d15877"
        ]
    },
    {
        "instruction": "",
        "id": "q15878",
        "input": "python sql server bulk update",
        "output": "",
        "rule": [
            "d15878"
        ]
    },
    {
        "instruction": "",
        "id": "q15879",
        "input": "python sslconnection reset by peer",
        "output": "",
        "rule": [
            "d15879"
        ]
    },
    {
        "instruction": "",
        "id": "q15880",
        "input": "how to rotate an image clockwise in python",
        "output": "",
        "rule": [
            "d15880"
        ]
    },
    {
        "instruction": "",
        "id": "q15881",
        "input": "python stack multiple datasets together",
        "output": "",
        "rule": [
            "d15881"
        ]
    },
    {
        "instruction": "",
        "id": "q15882",
        "input": "how to round significant figures in python",
        "output": "",
        "rule": [
            "d15882"
        ]
    },
    {
        "instruction": "",
        "id": "q15883",
        "input": "python start bottle server in background",
        "output": "",
        "rule": [
            "d15883"
        ]
    },
    {
        "instruction": "",
        "id": "q15884",
        "input": "how to round to certain number of sig figs in python",
        "output": "",
        "rule": [
            "d15884"
        ]
    },
    {
        "instruction": "",
        "id": "q15885",
        "input": "python stop a function from calling twice",
        "output": "",
        "rule": [
            "d15885"
        ]
    },
    {
        "instruction": "",
        "id": "q15886",
        "input": "how to run 2to3 on python",
        "output": "",
        "rule": [
            "d15886"
        ]
    },
    {
        "instruction": "",
        "id": "q15887",
        "input": "python store a function as variable",
        "output": "",
        "rule": [
            "d15887"
        ]
    },
    {
        "instruction": "",
        "id": "q15888",
        "input": "how to run a python compiled file",
        "output": "",
        "rule": [
            "d15888"
        ]
    },
    {
        "instruction": "",
        "id": "q15889",
        "input": "python storing session based information",
        "output": "",
        "rule": [
            "d15889"
        ]
    },
    {
        "instruction": "",
        "id": "q15890",
        "input": "how to run python unittests",
        "output": "",
        "rule": [
            "d15890"
        ]
    },
    {
        "instruction": "",
        "id": "q15891",
        "input": "python str object not callable",
        "output": "",
        "rule": [
            "d15891"
        ]
    },
    {
        "instruction": "",
        "id": "q15892",
        "input": "how to save a corpus in python",
        "output": "",
        "rule": [
            "d15892"
        ]
    },
    {
        "instruction": "",
        "id": "q15893",
        "input": "python str pass to shell lost quote",
        "output": "",
        "rule": [
            "d15893"
        ]
    },
    {
        "instruction": "",
        "id": "q15894",
        "input": "how to save a keras model in python",
        "output": "",
        "rule": [
            "d15894"
        ]
    },
    {
        "instruction": "",
        "id": "q15895",
        "input": "python str remove all non allowed character",
        "output": "",
        "rule": [
            "d15895"
        ]
    },
    {
        "instruction": "",
        "id": "q15896",
        "input": "how to save a python variable as a text file",
        "output": "",
        "rule": [
            "d15896"
        ]
    },
    {
        "instruction": "",
        "id": "q15897",
        "input": "how to save an image back into file python",
        "output": "",
        "rule": [
            "d15897"
        ]
    },
    {
        "instruction": "",
        "id": "q15898",
        "input": "python string converts dict",
        "output": "",
        "rule": [
            "d15898"
        ]
    },
    {
        "instruction": "",
        "id": "q15899",
        "input": "how to see if a value exists in python fcache",
        "output": "",
        "rule": [
            "d15899"
        ]
    },
    {
        "instruction": "",
        "id": "q15900",
        "input": "python string formatting null or float",
        "output": "",
        "rule": [
            "d15900"
        ]
    },
    {
        "instruction": "",
        "id": "q15901",
        "input": "how to see python code in spyder",
        "output": "",
        "rule": [
            "d15901"
        ]
    },
    {
        "instruction": "",
        "id": "q15902",
        "input": "python string last match index",
        "output": "",
        "rule": [
            "d15902"
        ]
    },
    {
        "instruction": "",
        "id": "q15903",
        "input": "python string md5 hashing",
        "output": "",
        "rule": [
            "d15903"
        ]
    },
    {
        "instruction": "",
        "id": "q15904",
        "input": "how to select unique elements froma list in python",
        "output": "",
        "rule": [
            "d15904"
        ]
    },
    {
        "instruction": "",
        "id": "q15905",
        "input": "python string method to count whitespace",
        "output": "",
        "rule": [
            "d15905"
        ]
    },
    {
        "instruction": "",
        "id": "q15906",
        "input": "how to self close process in python",
        "output": "",
        "rule": [
            "d15906"
        ]
    },
    {
        "instruction": "",
        "id": "q15907",
        "input": "python string to float or nan",
        "output": "",
        "rule": [
            "d15907"
        ]
    },
    {
        "instruction": "",
        "id": "q15908",
        "input": "how to send a javascript object to python",
        "output": "",
        "rule": [
            "d15908"
        ]
    },
    {
        "instruction": "",
        "id": "q15909",
        "input": "python string to interpolation",
        "output": "",
        "rule": [
            "d15909"
        ]
    },
    {
        "instruction": "",
        "id": "q15910",
        "input": "how to send signal to kill a process in python",
        "output": "",
        "rule": [
            "d15910"
        ]
    },
    {
        "instruction": "",
        "id": "q15911",
        "input": "python string uppercase first letter",
        "output": "",
        "rule": [
            "d15911"
        ]
    },
    {
        "instruction": "",
        "id": "q15912",
        "input": "how to session log in python",
        "output": "",
        "rule": [
            "d15912"
        ]
    },
    {
        "instruction": "",
        "id": "q15913",
        "input": "how to set a exit in python",
        "output": "",
        "rule": [
            "d15913"
        ]
    },
    {
        "instruction": "",
        "id": "q15914",
        "input": "python strip non space whitespace",
        "output": "",
        "rule": [
            "d15914"
        ]
    },
    {
        "instruction": "",
        "id": "q15915",
        "input": "how to set axis range in python plot",
        "output": "",
        "rule": [
            "d15915"
        ]
    },
    {
        "instruction": "",
        "id": "q15916",
        "input": "python strip single quote from string output",
        "output": "",
        "rule": [
            "d15916"
        ]
    },
    {
        "instruction": "",
        "id": "q15917",
        "input": "how to set axis range on graphs in python",
        "output": "",
        "rule": [
            "d15917"
        ]
    },
    {
        "instruction": "",
        "id": "q15918",
        "input": "python style multiline array",
        "output": "",
        "rule": [
            "d15918"
        ]
    },
    {
        "instruction": "",
        "id": "q15919",
        "input": "how to set clipping thresholds automatcally python",
        "output": "",
        "rule": [
            "d15919"
        ]
    },
    {
        "instruction": "",
        "id": "q15920",
        "input": "python subplot no padding for xticks",
        "output": "",
        "rule": [
            "d15920"
        ]
    },
    {
        "instruction": "",
        "id": "q15921",
        "input": "how to set connection timeout in python",
        "output": "",
        "rule": [
            "d15921"
        ]
    },
    {
        "instruction": "",
        "id": "q15922",
        "input": "python subprocess kill all the processes",
        "output": "",
        "rule": [
            "d15922"
        ]
    },
    {
        "instruction": "",
        "id": "q15923",
        "input": "how to set cursor location in python",
        "output": "",
        "rule": [
            "d15923"
        ]
    },
    {
        "instruction": "",
        "id": "q15924",
        "input": "python subprocess open can not kill",
        "output": "",
        "rule": [
            "d15924"
        ]
    },
    {
        "instruction": "",
        "id": "q15925",
        "input": "how to set limits on axis in python",
        "output": "",
        "rule": [
            "d15925"
        ]
    },
    {
        "instruction": "",
        "id": "q15926",
        "input": "python subsample replaced with strides",
        "output": "",
        "rule": [
            "d15926"
        ]
    },
    {
        "instruction": "",
        "id": "q15927",
        "input": "how to set path of a file in python",
        "output": "",
        "rule": [
            "d15927"
        ]
    },
    {
        "instruction": "",
        "id": "q15928",
        "input": "python subset of a column not missing values and not zero",
        "output": "",
        "rule": [
            "d15928"
        ]
    },
    {
        "instruction": "",
        "id": "q15929",
        "input": "how to set python libary path on linux",
        "output": "",
        "rule": [
            "d15929"
        ]
    },
    {
        "instruction": "",
        "id": "q15930",
        "input": "python super get parent attribute",
        "output": "",
        "rule": [
            "d15930"
        ]
    },
    {
        "instruction": "",
        "id": "q15931",
        "input": "how to set title of window in python in windows 10",
        "output": "",
        "rule": [
            "d15931"
        ]
    },
    {
        "instruction": "",
        "id": "q15932",
        "input": "python suppress subprocess stor dont print",
        "output": "",
        "rule": [
            "d15932"
        ]
    },
    {
        "instruction": "",
        "id": "q15933",
        "input": "how to sort a list of datetime in python",
        "output": "",
        "rule": [
            "d15933"
        ]
    },
    {
        "instruction": "",
        "id": "q15934",
        "input": "python svd failing because of numpy dependcies",
        "output": "",
        "rule": [
            "d15934"
        ]
    },
    {
        "instruction": "",
        "id": "q15935",
        "input": "how to sort data within a column python",
        "output": "",
        "rule": [
            "d15935"
        ]
    },
    {
        "instruction": "",
        "id": "q15936",
        "input": "python syas im running win32",
        "output": "",
        "rule": [
            "d15936"
        ]
    },
    {
        "instruction": "",
        "id": "q15937",
        "input": "how to specify a float number python",
        "output": "",
        "rule": [
            "d15937"
        ]
    },
    {
        "instruction": "",
        "id": "q15938",
        "input": "python symbols and what do they do",
        "output": "",
        "rule": [
            "d15938"
        ]
    },
    {
        "instruction": "",
        "id": "q15939",
        "input": "how to split list into words in python",
        "output": "",
        "rule": [
            "d15939"
        ]
    },
    {
        "instruction": "",
        "id": "q15940",
        "input": "python take absolute value of array",
        "output": "",
        "rule": [
            "d15940"
        ]
    },
    {
        "instruction": "",
        "id": "q15941",
        "input": "how to split multiple lines of strings in python",
        "output": "",
        "rule": [
            "d15941"
        ]
    },
    {
        "instruction": "",
        "id": "q15942",
        "input": "python tensorflow suppress logging",
        "output": "",
        "rule": [
            "d15942"
        ]
    },
    {
        "instruction": "",
        "id": "q15943",
        "input": "how to stack column arrays in python",
        "output": "",
        "rule": [
            "d15943"
        ]
    },
    {
        "instruction": "",
        "id": "q15944",
        "input": "python testing the type of an object instance",
        "output": "",
        "rule": [
            "d15944"
        ]
    },
    {
        "instruction": "",
        "id": "q15945",
        "input": "how to start django in python",
        "output": "",
        "rule": [
            "d15945"
        ]
    },
    {
        "instruction": "",
        "id": "q15946",
        "input": "python testing to see if a directory is writeable",
        "output": "",
        "rule": [
            "d15946"
        ]
    },
    {
        "instruction": "",
        "id": "q15947",
        "input": "how to stop running a infinite loop without closing program python",
        "output": "",
        "rule": [
            "d15947"
        ]
    },
    {
        "instruction": "",
        "id": "q15948",
        "input": "python thread list won't clear",
        "output": "",
        "rule": [
            "d15948"
        ]
    },
    {
        "instruction": "",
        "id": "q15949",
        "input": "how to store a list slice as a varable python numpy",
        "output": "",
        "rule": [
            "d15949"
        ]
    },
    {
        "instruction": "",
        "id": "q15950",
        "input": "python time adjust timezone",
        "output": "",
        "rule": [
            "d15950"
        ]
    },
    {
        "instruction": "",
        "id": "q15951",
        "input": "how to store all my python errors in a log file",
        "output": "",
        "rule": [
            "d15951"
        ]
    },
    {
        "instruction": "",
        "id": "q15952",
        "input": "python time get the previous monday",
        "output": "",
        "rule": [
            "d15952"
        ]
    },
    {
        "instruction": "",
        "id": "q15953",
        "input": "how to store list of arrays in python",
        "output": "",
        "rule": [
            "d15953"
        ]
    },
    {
        "instruction": "",
        "id": "q15954",
        "input": "python time limit to kill the process",
        "output": "",
        "rule": [
            "d15954"
        ]
    },
    {
        "instruction": "",
        "id": "q15955",
        "input": "how to strip non alphanumeric characters python",
        "output": "",
        "rule": [
            "d15955"
        ]
    },
    {
        "instruction": "",
        "id": "q15956",
        "input": "python time struct to unix time",
        "output": "",
        "rule": [
            "d15956"
        ]
    },
    {
        "instruction": "",
        "id": "q15957",
        "input": "how to strip single quote python",
        "output": "",
        "rule": [
            "d15957"
        ]
    },
    {
        "instruction": "",
        "id": "q15958",
        "input": "python time zone offset",
        "output": "",
        "rule": [
            "d15958"
        ]
    },
    {
        "instruction": "",
        "id": "q15959",
        "input": "how to strip spaces from string python",
        "output": "",
        "rule": [
            "d15959"
        ]
    },
    {
        "instruction": "",
        "id": "q15960",
        "input": "python tkinter does trace call in another trace",
        "output": "",
        "rule": [
            "d15960"
        ]
    },
    {
        "instruction": "",
        "id": "q15961",
        "input": "how to swap letter cases in python",
        "output": "",
        "rule": [
            "d15961"
        ]
    },
    {
        "instruction": "",
        "id": "q15962",
        "input": "python tkinter event keyrelease",
        "output": "",
        "rule": [
            "d15962"
        ]
    },
    {
        "instruction": "",
        "id": "q15963",
        "input": "how to swap rows and columns of a matrix in python",
        "output": "",
        "rule": [
            "d15963"
        ]
    },
    {
        "instruction": "",
        "id": "q15964",
        "input": "how to switch the python prompt",
        "output": "",
        "rule": [
            "d15964"
        ]
    },
    {
        "instruction": "",
        "id": "q15965",
        "input": "python tkinter open file dialog",
        "output": "",
        "rule": [
            "d15965"
        ]
    },
    {
        "instruction": "",
        "id": "q15966",
        "input": "how to take date as array in python",
        "output": "",
        "rule": [
            "d15966"
        ]
    },
    {
        "instruction": "",
        "id": "q15967",
        "input": "python tkinter prevent text wrapping",
        "output": "",
        "rule": [
            "d15967"
        ]
    },
    {
        "instruction": "",
        "id": "q15968",
        "input": "how to take the inverse of a list in python",
        "output": "",
        "rule": [
            "d15968"
        ]
    },
    {
        "instruction": "",
        "id": "q15969",
        "input": "python tkinter prevent window update",
        "output": "",
        "rule": [
            "d15969"
        ]
    },
    {
        "instruction": "",
        "id": "q15970",
        "input": "how to tell turtle python to move and draw",
        "output": "",
        "rule": [
            "d15970"
        ]
    },
    {
        "instruction": "",
        "id": "q15971",
        "input": "python tkinter remove all existing widgets without destroying window",
        "output": "",
        "rule": [
            "d15971"
        ]
    },
    {
        "instruction": "",
        "id": "q15972",
        "input": "how to terminate whole program in python from middle",
        "output": "",
        "rule": [
            "d15972"
        ]
    },
    {
        "instruction": "",
        "id": "q15973",
        "input": "python tkinter scrollbar listbox grid",
        "output": "",
        "rule": [
            "d15973"
        ]
    },
    {
        "instruction": "",
        "id": "q15974",
        "input": "python tkinter set default combobox value",
        "output": "",
        "rule": [
            "d15974"
        ]
    },
    {
        "instruction": "",
        "id": "q15975",
        "input": "how to test not equal list in python",
        "output": "",
        "rule": [
            "d15975"
        ]
    },
    {
        "instruction": "",
        "id": "q15976",
        "input": "python to check device power state",
        "output": "",
        "rule": [
            "d15976"
        ]
    },
    {
        "instruction": "",
        "id": "q15977",
        "input": "how to time function execution in python",
        "output": "",
        "rule": [
            "d15977"
        ]
    },
    {
        "instruction": "",
        "id": "q15978",
        "input": "python to known whether an image is valid",
        "output": "",
        "rule": [
            "d15978"
        ]
    },
    {
        "instruction": "",
        "id": "q15979",
        "input": "how to transform list of words to sentences in python",
        "output": "",
        "rule": [
            "d15979"
        ]
    },
    {
        "instruction": "",
        "id": "q15980",
        "input": "python to match names",
        "output": "",
        "rule": [
            "d15980"
        ]
    },
    {
        "instruction": "",
        "id": "q15981",
        "input": "how to turn a json dictionary into a python dictionary",
        "output": "",
        "rule": [
            "d15981"
        ]
    },
    {
        "instruction": "",
        "id": "q15982",
        "input": "python to opengl texture",
        "output": "",
        "rule": [
            "d15982"
        ]
    },
    {
        "instruction": "",
        "id": "q15983",
        "input": "how to get traceback error info python",
        "output": "",
        "rule": [
            "d15983"
        ]
    },
    {
        "instruction": "",
        "id": "q15984",
        "input": "python track mouse location",
        "output": "",
        "rule": [
            "d15984"
        ]
    },
    {
        "instruction": "",
        "id": "q15985",
        "input": "how to turn a list into a dictionary python",
        "output": "",
        "rule": [
            "d15985"
        ]
    },
    {
        "instruction": "",
        "id": "q15986",
        "input": "python transfer a string to a list",
        "output": "",
        "rule": [
            "d15986"
        ]
    },
    {
        "instruction": "",
        "id": "q15987",
        "input": "how to turn a string into a dict python",
        "output": "",
        "rule": [
            "d15987"
        ]
    },
    {
        "instruction": "",
        "id": "q15988",
        "input": "python translate enum values to",
        "output": "",
        "rule": [
            "d15988"
        ]
    },
    {
        "instruction": "",
        "id": "q15989",
        "input": "how to turn a string list into a float python",
        "output": "",
        "rule": [
            "d15989"
        ]
    },
    {
        "instruction": "",
        "id": "q15990",
        "input": "python transpose axis example",
        "output": "",
        "rule": [
            "d15990"
        ]
    },
    {
        "instruction": "",
        "id": "q15991",
        "input": "how to turn bytes string into bytes in python3",
        "output": "",
        "rule": [
            "d15991"
        ]
    },
    {
        "instruction": "",
        "id": "q15992",
        "input": "python transpose dict to column array",
        "output": "",
        "rule": [
            "d15992"
        ]
    },
    {
        "instruction": "",
        "id": "q15993",
        "input": "how to turn ints to binary python",
        "output": "",
        "rule": [
            "d15993"
        ]
    },
    {
        "instruction": "",
        "id": "q15994",
        "input": "python tree count total",
        "output": "",
        "rule": [
            "d15994"
        ]
    },
    {
        "instruction": "",
        "id": "q15995",
        "input": "how to turn logging off, python",
        "output": "",
        "rule": [
            "d15995"
        ]
    },
    {
        "instruction": "",
        "id": "q15996",
        "input": "python trim spaces in xml",
        "output": "",
        "rule": [
            "d15996"
        ]
    },
    {
        "instruction": "",
        "id": "q15997",
        "input": "how to turn output into a list python",
        "output": "",
        "rule": [
            "d15997"
        ]
    },
    {
        "instruction": "",
        "id": "q15998",
        "input": "python trim zeros from list",
        "output": "",
        "rule": [
            "d15998"
        ]
    },
    {
        "instruction": "",
        "id": "q15999",
        "input": "how to type out negative infinity in python",
        "output": "",
        "rule": [
            "d15999"
        ]
    },
    {
        "instruction": "",
        "id": "q16000",
        "input": "python try again in a function",
        "output": "",
        "rule": [
            "d16000"
        ]
    },
    {
        "instruction": "",
        "id": "q16001",
        "input": "how to union two set types in python",
        "output": "",
        "rule": [
            "d16001"
        ]
    },
    {
        "instruction": "",
        "id": "q16002",
        "input": "python ttk scrollbar change disabled color",
        "output": "",
        "rule": [
            "d16002"
        ]
    },
    {
        "instruction": "",
        "id": "q16003",
        "input": "how to unzip file from url using python",
        "output": "",
        "rule": [
            "d16003"
        ]
    },
    {
        "instruction": "",
        "id": "q16004",
        "input": "python tuple must be str, not tuple shape",
        "output": "",
        "rule": [
            "d16004"
        ]
    },
    {
        "instruction": "",
        "id": "q16005",
        "input": "how to use a code to use python's range function without using range",
        "output": "",
        "rule": [
            "d16005"
        ]
    },
    {
        "instruction": "",
        "id": "q16006",
        "input": "python turn a text file into a markdown fiel",
        "output": "",
        "rule": [
            "d16006"
        ]
    },
    {
        "instruction": "",
        "id": "q16007",
        "input": "how to use a tensorflow model in python",
        "output": "",
        "rule": [
            "d16007"
        ]
    },
    {
        "instruction": "",
        "id": "q16008",
        "input": "python turn resylts of query to dictionary",
        "output": "",
        "rule": [
            "d16008"
        ]
    },
    {
        "instruction": "",
        "id": "q16009",
        "input": "how to use dictionary to replace in python",
        "output": "",
        "rule": [
            "d16009"
        ]
    },
    {
        "instruction": "",
        "id": "q16010",
        "input": "python turn string into uri format",
        "output": "",
        "rule": [
            "d16010"
        ]
    },
    {
        "instruction": "",
        "id": "q16011",
        "input": "how to use help function on method in python",
        "output": "",
        "rule": [
            "d16011"
        ]
    },
    {
        "instruction": "",
        "id": "q16012",
        "input": "python tweepy get users tweets",
        "output": "",
        "rule": [
            "d16012"
        ]
    },
    {
        "instruction": "",
        "id": "q16013",
        "input": "how to use input fuction in strings in python",
        "output": "",
        "rule": [
            "d16013"
        ]
    },
    {
        "instruction": "",
        "id": "q16014",
        "input": "python type casting into strng",
        "output": "",
        "rule": [
            "d16014"
        ]
    },
    {
        "instruction": "",
        "id": "q16015",
        "input": "how to use isdigit to pick out numbers in a string python",
        "output": "",
        "rule": [
            "d16015"
        ]
    },
    {
        "instruction": "",
        "id": "q16016",
        "input": "python type hinting optional value",
        "output": "",
        "rule": [
            "d16016"
        ]
    },
    {
        "instruction": "",
        "id": "q16017",
        "input": "how to use isin and notin in python",
        "output": "",
        "rule": [
            "d16017"
        ]
    },
    {
        "instruction": "",
        "id": "q16018",
        "input": "python type is not datetime",
        "output": "",
        "rule": [
            "d16018"
        ]
    },
    {
        "instruction": "",
        "id": "q16019",
        "input": "how to use python request for 401 error",
        "output": "",
        "rule": [
            "d16019"
        ]
    },
    {
        "instruction": "",
        "id": "q16020",
        "input": "python unable to add handler",
        "output": "",
        "rule": [
            "d16020"
        ]
    },
    {
        "instruction": "",
        "id": "q16021",
        "input": "how to use requests in python to get the text of a page",
        "output": "",
        "rule": [
            "d16021"
        ]
    },
    {
        "instruction": "",
        "id": "q16022",
        "input": "python unboundfield bind to form",
        "output": "",
        "rule": [
            "d16022"
        ]
    },
    {
        "instruction": "",
        "id": "q16023",
        "input": "how to use scrollbar in canvas using python",
        "output": "",
        "rule": [
            "d16023"
        ]
    },
    {
        "instruction": "",
        "id": "q16024",
        "input": "python union of nonoverlapping intervals",
        "output": "",
        "rule": [
            "d16024"
        ]
    },
    {
        "instruction": "",
        "id": "q16025",
        "input": "how to write ''or'' sympole in python",
        "output": "",
        "rule": [
            "d16025"
        ]
    },
    {
        "instruction": "",
        "id": "q16026",
        "input": "python union table concat",
        "output": "",
        "rule": [
            "d16026"
        ]
    },
    {
        "instruction": "",
        "id": "q16027",
        "input": "how to write a comment block in python",
        "output": "",
        "rule": [
            "d16027"
        ]
    },
    {
        "instruction": "",
        "id": "q16028",
        "input": "python unit test assert html response",
        "output": "",
        "rule": [
            "d16028"
        ]
    },
    {
        "instruction": "",
        "id": "q16029",
        "input": "how to write a default value in python",
        "output": "",
        "rule": [
            "d16029"
        ]
    },
    {
        "instruction": "",
        "id": "q16030",
        "input": "python unit test set pythonpath",
        "output": "",
        "rule": [
            "d16030"
        ]
    },
    {
        "instruction": "",
        "id": "q16031",
        "input": "how to write a repr function in python for a board",
        "output": "",
        "rule": [
            "d16031"
        ]
    },
    {
        "instruction": "",
        "id": "q16032",
        "input": "how to write a string to a file in python 2",
        "output": "",
        "rule": [
            "d16032"
        ]
    },
    {
        "instruction": "",
        "id": "q16033",
        "input": "python unittest redirect assert failure",
        "output": "",
        "rule": [
            "d16033"
        ]
    },
    {
        "instruction": "",
        "id": "q16034",
        "input": "how to write on a new line in pythone",
        "output": "",
        "rule": [
            "d16034"
        ]
    },
    {
        "instruction": "",
        "id": "q16035",
        "input": "python unixpath names on windows",
        "output": "",
        "rule": [
            "d16035"
        ]
    },
    {
        "instruction": "",
        "id": "q16036",
        "input": "how to zip files in python",
        "output": "",
        "rule": [
            "d16036"
        ]
    },
    {
        "instruction": "",
        "id": "q16037",
        "input": "python unpack bytes to numpy",
        "output": "",
        "rule": [
            "d16037"
        ]
    },
    {
        "instruction": "",
        "id": "q16038",
        "input": "how we can save python out put in excel file",
        "output": "",
        "rule": [
            "d16038"
        ]
    },
    {
        "instruction": "",
        "id": "q16039",
        "input": "python upcase entire dictionary",
        "output": "",
        "rule": [
            "d16039"
        ]
    },
    {
        "instruction": "",
        "id": "q16040",
        "input": "html table borders using python",
        "output": "",
        "rule": [
            "d16040"
        ]
    },
    {
        "instruction": "",
        "id": "q16041",
        "input": "python update a global variable from a def",
        "output": "",
        "rule": [
            "d16041"
        ]
    },
    {
        "instruction": "",
        "id": "q16042",
        "input": "hwo to return 400 in python flask",
        "output": "",
        "rule": [
            "d16042"
        ]
    },
    {
        "instruction": "",
        "id": "q16043",
        "input": "python update context with a dict",
        "output": "",
        "rule": [
            "d16043"
        ]
    },
    {
        "instruction": "",
        "id": "q16044",
        "input": "identify encoding type python",
        "output": "",
        "rule": [
            "d16044"
        ]
    },
    {
        "instruction": "",
        "id": "q16045",
        "input": "python urlparse query paramters",
        "output": "",
        "rule": [
            "d16045"
        ]
    },
    {
        "instruction": "",
        "id": "q16046",
        "input": "if a value in python is empty",
        "output": "",
        "rule": [
            "d16046"
        ]
    },
    {
        "instruction": "",
        "id": "q16047",
        "input": "python urlretrieve file name",
        "output": "",
        "rule": [
            "d16047"
        ]
    },
    {
        "instruction": "",
        "id": "q16048",
        "input": "if table exists python",
        "output": "",
        "rule": [
            "d16048"
        ]
    },
    {
        "instruction": "",
        "id": "q16049",
        "input": "python use a function to fill a list",
        "output": "",
        "rule": [
            "d16049"
        ]
    },
    {
        "instruction": "",
        "id": "q16050",
        "input": "if type is str python",
        "output": "",
        "rule": [
            "d16050"
        ]
    },
    {
        "instruction": "",
        "id": "q16051",
        "input": "python use format string with list",
        "output": "",
        "rule": [
            "d16051"
        ]
    },
    {
        "instruction": "",
        "id": "q16052",
        "input": "image calculate the gradient value python",
        "output": "",
        "rule": [
            "d16052"
        ]
    },
    {
        "instruction": "",
        "id": "q16053",
        "input": "python use numpy array as list in code",
        "output": "",
        "rule": [
            "d16053"
        ]
    },
    {
        "instruction": "",
        "id": "q16054",
        "input": "implement dfs recursive python",
        "output": "",
        "rule": [
            "d16054"
        ]
    },
    {
        "instruction": "",
        "id": "q16055",
        "input": "python useless super delegation in method",
        "output": "",
        "rule": [
            "d16055"
        ]
    },
    {
        "instruction": "",
        "id": "q16056",
        "input": "imshow bounding box python",
        "output": "",
        "rule": [
            "d16056"
        ]
    },
    {
        "instruction": "",
        "id": "q16057",
        "input": "python user meaningful prompts",
        "output": "",
        "rule": [
            "d16057"
        ]
    },
    {
        "instruction": "",
        "id": "q16058",
        "input": "in mongodb to retrieve from particular document using python",
        "output": "",
        "rule": [
            "d16058"
        ]
    },
    {
        "instruction": "",
        "id": "q16059",
        "input": "python using uuid as user token",
        "output": "",
        "rule": [
            "d16059"
        ]
    },
    {
        "instruction": "",
        "id": "q16060",
        "input": "in python fit an exponential",
        "output": "",
        "rule": [
            "d16060"
        ]
    },
    {
        "instruction": "",
        "id": "q16061",
        "input": "python uuid fixed length",
        "output": "",
        "rule": [
            "d16061"
        ]
    },
    {
        "instruction": "",
        "id": "q16062",
        "input": "in python for loop include the last item",
        "output": "",
        "rule": [
            "d16062"
        ]
    },
    {
        "instruction": "",
        "id": "q16063",
        "input": "python validate boolean string",
        "output": "",
        "rule": [
            "d16063"
        ]
    },
    {
        "instruction": "",
        "id": "q16064",
        "input": "include single quotes in string python",
        "output": "",
        "rule": [
            "d16064"
        ]
    },
    {
        "instruction": "",
        "id": "q16065",
        "input": "python validate dict is json",
        "output": "",
        "rule": [
            "d16065"
        ]
    },
    {
        "instruction": "",
        "id": "q16066",
        "input": "increase number of axis ticks python",
        "output": "",
        "rule": [
            "d16066"
        ]
    },
    {
        "instruction": "",
        "id": "q16067",
        "input": "python variable for format length",
        "output": "",
        "rule": [
            "d16067"
        ]
    },
    {
        "instruction": "",
        "id": "q16068",
        "input": "increase page num python",
        "output": "",
        "rule": [
            "d16068"
        ]
    },
    {
        "instruction": "",
        "id": "q16069",
        "input": "python venv no directory created",
        "output": "",
        "rule": [
            "d16069"
        ]
    },
    {
        "instruction": "",
        "id": "q16070",
        "input": "initialize logger on start up python",
        "output": "",
        "rule": [
            "d16070"
        ]
    },
    {
        "instruction": "",
        "id": "q16071",
        "input": "python virtualenv production how to activate",
        "output": "",
        "rule": [
            "d16071"
        ]
    },
    {
        "instruction": "",
        "id": "q16072",
        "input": "inner join on str in python",
        "output": "",
        "rule": [
            "d16072"
        ]
    },
    {
        "instruction": "",
        "id": "q16073",
        "input": "python way to sort based on object dictionary",
        "output": "",
        "rule": [
            "d16073"
        ]
    },
    {
        "instruction": "",
        "id": "q16074",
        "input": "insert a key to file in python",
        "output": "",
        "rule": [
            "d16074"
        ]
    },
    {
        "instruction": "",
        "id": "q16075",
        "input": "python webdriver ie unexpectedly exited 2",
        "output": "",
        "rule": [
            "d16075"
        ]
    },
    {
        "instruction": "",
        "id": "q16076",
        "input": "insert a line at the beginning of a file python",
        "output": "",
        "rule": [
            "d16076"
        ]
    },
    {
        "instruction": "",
        "id": "q16077",
        "input": "python webdriver kill the command shell",
        "output": "",
        "rule": [
            "d16077"
        ]
    },
    {
        "instruction": "",
        "id": "q16078",
        "input": "insert python code in markdown",
        "output": "",
        "rule": [
            "d16078"
        ]
    },
    {
        "instruction": "",
        "id": "q16079",
        "input": "python webelement checkbox ischecked",
        "output": "",
        "rule": [
            "d16079"
        ]
    },
    {
        "instruction": "",
        "id": "q16080",
        "input": "ironpython python script global name not defined",
        "output": "",
        "rule": [
            "d16080"
        ]
    },
    {
        "instruction": "",
        "id": "q16081",
        "input": "python widget maximum dimensions",
        "output": "",
        "rule": [
            "d16081"
        ]
    },
    {
        "instruction": "",
        "id": "q16082",
        "input": "is there a select distinct in python",
        "output": "",
        "rule": [
            "d16082"
        ]
    },
    {
        "instruction": "",
        "id": "q16083",
        "input": "python widgets dont expand in grid",
        "output": "",
        "rule": [
            "d16083"
        ]
    },
    {
        "instruction": "",
        "id": "q16084",
        "input": "is there a unit test runner in python",
        "output": "",
        "rule": [
            "d16084"
        ]
    },
    {
        "instruction": "",
        "id": "q16085",
        "input": "python will the for loop keep going after the try excpetion",
        "output": "",
        "rule": [
            "d16085"
        ]
    },
    {
        "instruction": "",
        "id": "q16086",
        "input": "is there a way in python to check that 2 numpy arrays are identical",
        "output": "",
        "rule": [
            "d16086"
        ]
    },
    {
        "instruction": "",
        "id": "q16087",
        "input": "python windows stdin encoding",
        "output": "",
        "rule": [
            "d16087"
        ]
    },
    {
        "instruction": "",
        "id": "q16088",
        "input": "is there an alert like in javascript in python",
        "output": "",
        "rule": [
            "d16088"
        ]
    },
    {
        "instruction": "",
        "id": "q16089",
        "input": "python write header to fits file",
        "output": "",
        "rule": [
            "d16089"
        ]
    },
    {
        "instruction": "",
        "id": "q16090",
        "input": "iterate all the images in a directory + python + opencv",
        "output": "",
        "rule": [
            "d16090"
        ]
    },
    {
        "instruction": "",
        "id": "q16091",
        "input": "python writing a dict to a file",
        "output": "",
        "rule": [
            "d16091"
        ]
    },
    {
        "instruction": "",
        "id": "q16092",
        "input": "iterate distance over list of points python",
        "output": "",
        "rule": [
            "d16092"
        ]
    },
    {
        "instruction": "",
        "id": "q16093",
        "input": "python xl number of entries in a column",
        "output": "",
        "rule": [
            "d16093"
        ]
    },
    {
        "instruction": "",
        "id": "q16094",
        "input": "iterate over words in text line python",
        "output": "",
        "rule": [
            "d16094"
        ]
    },
    {
        "instruction": "",
        "id": "q16095",
        "input": "python xml elements as a list",
        "output": "",
        "rule": [
            "d16095"
        ]
    },
    {
        "instruction": "",
        "id": "q16096",
        "input": "iterator inpython has next next",
        "output": "",
        "rule": [
            "d16096"
        ]
    },
    {
        "instruction": "",
        "id": "q16097",
        "input": "python xml elementtree to string",
        "output": "",
        "rule": [
            "d16097"
        ]
    },
    {
        "instruction": "",
        "id": "q16098",
        "input": "itertools groupby in python list of dicts by key",
        "output": "",
        "rule": [
            "d16098"
        ]
    },
    {
        "instruction": "",
        "id": "q16099",
        "input": "python xml get value in tag",
        "output": "",
        "rule": [
            "d16099"
        ]
    },
    {
        "instruction": "",
        "id": "q16100",
        "input": "jacquard similarity using python",
        "output": "",
        "rule": [
            "d16100"
        ]
    },
    {
        "instruction": "",
        "id": "q16101",
        "input": "python xml parser check attribute",
        "output": "",
        "rule": [
            "d16101"
        ]
    },
    {
        "instruction": "",
        "id": "q16102",
        "input": "python xml to dictionary",
        "output": "",
        "rule": [
            "d16102"
        ]
    },
    {
        "instruction": "",
        "id": "q16103",
        "input": "kafka python producer not sending message",
        "output": "",
        "rule": [
            "d16103"
        ]
    },
    {
        "instruction": "",
        "id": "q16104",
        "input": "python xmlnode get parent",
        "output": "",
        "rule": [
            "d16104"
        ]
    },
    {
        "instruction": "",
        "id": "q16105",
        "input": "keep track of 5 largest values in python",
        "output": "",
        "rule": [
            "d16105"
        ]
    },
    {
        "instruction": "",
        "id": "q16106",
        "input": "python xmlrpc doesn't work over a network",
        "output": "",
        "rule": [
            "d16106"
        ]
    },
    {
        "instruction": "",
        "id": "q16107",
        "input": "keras python sequential predict batch size one one input",
        "output": "",
        "rule": [
            "d16107"
        ]
    },
    {
        "instruction": "",
        "id": "q16108",
        "input": "python xor two strings of binary code",
        "output": "",
        "rule": [
            "d16108"
        ]
    },
    {
        "instruction": "",
        "id": "q16109",
        "input": "kill a python process in linux",
        "output": "",
        "rule": [
            "d16109"
        ]
    },
    {
        "instruction": "",
        "id": "q16110",
        "input": "python yaml as object attributes",
        "output": "",
        "rule": [
            "d16110"
        ]
    },
    {
        "instruction": "",
        "id": "q16111",
        "input": "kill a python program after a time limit",
        "output": "",
        "rule": [
            "d16111"
        ]
    },
    {
        "instruction": "",
        "id": "q16112",
        "input": "python yaml load multiple documents",
        "output": "",
        "rule": [
            "d16112"
        ]
    },
    {
        "instruction": "",
        "id": "q16113",
        "input": "kill a thread python after a specified time",
        "output": "",
        "rule": [
            "d16113"
        ]
    },
    {
        "instruction": "",
        "id": "q16114",
        "input": "python yaml special dict representation",
        "output": "",
        "rule": [
            "d16114"
        ]
    },
    {
        "instruction": "",
        "id": "q16115",
        "input": "kill command for python",
        "output": "",
        "rule": [
            "d16115"
        ]
    },
    {
        "instruction": "",
        "id": "q16116",
        "input": "python yaml store as dict",
        "output": "",
        "rule": [
            "d16116"
        ]
    },
    {
        "instruction": "",
        "id": "q16117",
        "input": "killing logging handlers in python",
        "output": "",
        "rule": [
            "d16117"
        ]
    },
    {
        "instruction": "",
        "id": "q16118",
        "input": "python yield catch except",
        "output": "",
        "rule": [
            "d16118"
        ]
    },
    {
        "instruction": "",
        "id": "q16119",
        "input": "least common element in a list python",
        "output": "",
        "rule": [
            "d16119"
        ]
    },
    {
        "instruction": "",
        "id": "q16120",
        "input": "python yield from memory leak",
        "output": "",
        "rule": [
            "d16120"
        ]
    },
    {
        "instruction": "",
        "id": "q16121",
        "input": "left right function in python",
        "output": "",
        "rule": [
            "d16121"
        ]
    },
    {
        "instruction": "",
        "id": "q16122",
        "input": "python yield how to know the function is finish",
        "output": "",
        "rule": [
            "d16122"
        ]
    },
    {
        "instruction": "",
        "id": "q16123",
        "input": "limit character length on print python",
        "output": "",
        "rule": [
            "d16123"
        ]
    },
    {
        "instruction": "",
        "id": "q16124",
        "input": "python zipfile unzip to folder",
        "output": "",
        "rule": [
            "d16124"
        ]
    },
    {
        "instruction": "",
        "id": "q16125",
        "input": "limit x and y python",
        "output": "",
        "rule": [
            "d16125"
        ]
    },
    {
        "instruction": "",
        "id": "q16126",
        "input": "limiting a floating number range python",
        "output": "",
        "rule": [
            "d16126"
        ]
    },
    {
        "instruction": "",
        "id": "q16127",
        "input": "python zmq fork new connection",
        "output": "",
        "rule": [
            "d16127"
        ]
    },
    {
        "instruction": "",
        "id": "q16128",
        "input": "line edit changed signal python",
        "output": "",
        "rule": [
            "d16128"
        ]
    },
    {
        "instruction": "",
        "id": "q16129",
        "input": "python zmq get queue length",
        "output": "",
        "rule": [
            "d16129"
        ]
    },
    {
        "instruction": "",
        "id": "q16130",
        "input": "linear interpolation of 3 arrays in python",
        "output": "",
        "rule": [
            "d16130"
        ]
    },
    {
        "instruction": "",
        "id": "q16131",
        "input": "python, accepting a string input as upper or lower case",
        "output": "",
        "rule": [
            "d16131"
        ]
    },
    {
        "instruction": "",
        "id": "q16132",
        "input": "linux python3 stack trace",
        "output": "",
        "rule": [
            "d16132"
        ]
    },
    {
        "instruction": "",
        "id": "q16133",
        "input": "python, get the size of the queue",
        "output": "",
        "rule": [
            "d16133"
        ]
    },
    {
        "instruction": "",
        "id": "q16134",
        "input": "list following months entered in python",
        "output": "",
        "rule": [
            "d16134"
        ]
    },
    {
        "instruction": "",
        "id": "q16135",
        "input": "python, reshape a list to array",
        "output": "",
        "rule": [
            "d16135"
        ]
    },
    {
        "instruction": "",
        "id": "q16136",
        "input": "list of a list of tokens python",
        "output": "",
        "rule": [
            "d16136"
        ]
    },
    {
        "instruction": "",
        "id": "q16137",
        "input": "python, time to milliseconds",
        "output": "",
        "rule": [
            "d16137"
        ]
    },
    {
        "instruction": "",
        "id": "q16138",
        "input": "list of prefixes and show as headers python",
        "output": "",
        "rule": [
            "d16138"
        ]
    },
    {
        "instruction": "",
        "id": "q16139",
        "input": "python3 create random unique identifier",
        "output": "",
        "rule": [
            "d16139"
        ]
    },
    {
        "instruction": "",
        "id": "q16140",
        "input": "list or nd array type check python",
        "output": "",
        "rule": [
            "d16140"
        ]
    },
    {
        "instruction": "",
        "id": "q16141",
        "input": "python3 ctypes pointer of array",
        "output": "",
        "rule": [
            "d16141"
        ]
    },
    {
        "instruction": "",
        "id": "q16142",
        "input": "list python numpy flatten",
        "output": "",
        "rule": [
            "d16142"
        ]
    },
    {
        "instruction": "",
        "id": "q16143",
        "input": "python3 get file md5",
        "output": "",
        "rule": [
            "d16143"
        ]
    },
    {
        "instruction": "",
        "id": "q16144",
        "input": "list spefic file extension python",
        "output": "",
        "rule": [
            "d16144"
        ]
    },
    {
        "instruction": "",
        "id": "q16145",
        "input": "python3 how read a stream buffer without eof",
        "output": "",
        "rule": [
            "d16145"
        ]
    },
    {
        "instruction": "",
        "id": "q16146",
        "input": "list the constants in a python file dynamically",
        "output": "",
        "rule": [
            "d16146"
        ]
    },
    {
        "instruction": "",
        "id": "q16147",
        "input": "python3 how to remove multiple items from a list",
        "output": "",
        "rule": [
            "d16147"
        ]
    },
    {
        "instruction": "",
        "id": "q16148",
        "input": "list to np array in python without add additional dimension",
        "output": "",
        "rule": [
            "d16148"
        ]
    },
    {
        "instruction": "",
        "id": "q16149",
        "input": "python3 ip expand cidr notations",
        "output": "",
        "rule": [
            "d16149"
        ]
    },
    {
        "instruction": "",
        "id": "q16150",
        "input": "load in data as bytearray python",
        "output": "",
        "rule": [
            "d16150"
        ]
    },
    {
        "instruction": "",
        "id": "q16151",
        "input": "python3 not equal string",
        "output": "",
        "rule": [
            "d16151"
        ]
    },
    {
        "instruction": "",
        "id": "q16152",
        "input": "load javascript file in python",
        "output": "",
        "rule": [
            "d16152"
        ]
    },
    {
        "instruction": "",
        "id": "q16153",
        "input": "python3 read linux clipboard",
        "output": "",
        "rule": [
            "d16153"
        ]
    },
    {
        "instruction": "",
        "id": "q16154",
        "input": "loading a file in python",
        "output": "",
        "rule": [
            "d16154"
        ]
    },
    {
        "instruction": "",
        "id": "q16155",
        "input": "python3 round comparison float",
        "output": "",
        "rule": [
            "d16155"
        ]
    },
    {
        "instruction": "",
        "id": "q16156",
        "input": "loading yaml file in python",
        "output": "",
        "rule": [
            "d16156"
        ]
    },
    {
        "instruction": "",
        "id": "q16157",
        "input": "python3 select all text in a text document and delete text",
        "output": "",
        "rule": [
            "d16157"
        ]
    },
    {
        "instruction": "",
        "id": "q16158",
        "input": "lock the file python",
        "output": "",
        "rule": [
            "d16158"
        ]
    },
    {
        "instruction": "",
        "id": "q16159",
        "input": "python3 string byte enciode",
        "output": "",
        "rule": [
            "d16159"
        ]
    },
    {
        "instruction": "",
        "id": "q16160",
        "input": "log normal distribution in python",
        "output": "",
        "rule": [
            "d16160"
        ]
    },
    {
        "instruction": "",
        "id": "q16161",
        "input": "python3 subprocess get stdout text",
        "output": "",
        "rule": [
            "d16161"
        ]
    },
    {
        "instruction": "",
        "id": "q16162",
        "input": "logistic regression lasso python",
        "output": "",
        "rule": [
            "d16162"
        ]
    },
    {
        "instruction": "",
        "id": "q16163",
        "input": "python3 syntax for deletin g duplicate entries",
        "output": "",
        "rule": [
            "d16163"
        ]
    },
    {
        "instruction": "",
        "id": "q16164",
        "input": "logistic regression overflow python",
        "output": "",
        "rule": [
            "d16164"
        ]
    },
    {
        "instruction": "",
        "id": "q16165",
        "input": "pythone code to make first and last letter of string capital",
        "output": "",
        "rule": [
            "d16165"
        ]
    },
    {
        "instruction": "",
        "id": "q16166",
        "input": "longest non decreasing subsequence python",
        "output": "",
        "rule": [
            "d16166"
        ]
    },
    {
        "instruction": "",
        "id": "q16167",
        "input": "pythong mysql how to get column names",
        "output": "",
        "rule": [
            "d16167"
        ]
    },
    {
        "instruction": "",
        "id": "q16168",
        "input": "loooping through a string with white spaces python",
        "output": "",
        "rule": [
            "d16168"
        ]
    },
    {
        "instruction": "",
        "id": "q16169",
        "input": "pythonic way to check if a string is empty",
        "output": "",
        "rule": [
            "d16169"
        ]
    },
    {
        "instruction": "",
        "id": "q16170",
        "input": "loop through queryset python",
        "output": "",
        "rule": [
            "d16170"
        ]
    },
    {
        "instruction": "",
        "id": "q16171",
        "input": "qbytearray to python str",
        "output": "",
        "rule": [
            "d16171"
        ]
    },
    {
        "instruction": "",
        "id": "q16172",
        "input": "loops through the last n elements python",
        "output": "",
        "rule": [
            "d16172"
        ]
    },
    {
        "instruction": "",
        "id": "q16173",
        "input": "mac python clean clipboard",
        "output": "",
        "rule": [
            "d16173"
        ]
    },
    {
        "instruction": "",
        "id": "q16174",
        "input": "querystring to url python",
        "output": "",
        "rule": [
            "d16174"
        ]
    },
    {
        "instruction": "",
        "id": "q16175",
        "input": "magnitude of matrix exponential python",
        "output": "",
        "rule": [
            "d16175"
        ]
    },
    {
        "instruction": "",
        "id": "q16176",
        "input": "quick way to make a python array with sequence without forloop",
        "output": "",
        "rule": [
            "d16176"
        ]
    },
    {
        "instruction": "",
        "id": "q16177",
        "input": "maintaining an aspect ration in gridspec python",
        "output": "",
        "rule": [
            "d16177"
        ]
    },
    {
        "instruction": "",
        "id": "q16178",
        "input": "random int except a number python",
        "output": "",
        "rule": [
            "d16178"
        ]
    },
    {
        "instruction": "",
        "id": "q16179",
        "input": "make a dict a string python",
        "output": "",
        "rule": [
            "d16179"
        ]
    },
    {
        "instruction": "",
        "id": "q16180",
        "input": "random number of a given range python",
        "output": "",
        "rule": [
            "d16180"
        ]
    },
    {
        "instruction": "",
        "id": "q16181",
        "input": "make a dictionary a string in python",
        "output": "",
        "rule": [
            "d16181"
        ]
    },
    {
        "instruction": "",
        "id": "q16182",
        "input": "range object is not callable python filter",
        "output": "",
        "rule": [
            "d16182"
        ]
    },
    {
        "instruction": "",
        "id": "q16183",
        "input": "make a value of var infinity in python",
        "output": "",
        "rule": [
            "d16183"
        ]
    },
    {
        "instruction": "",
        "id": "q16184",
        "input": "read a json file and load python",
        "output": "",
        "rule": [
            "d16184"
        ]
    },
    {
        "instruction": "",
        "id": "q16185",
        "input": "make boolean string in python",
        "output": "",
        "rule": [
            "d16185"
        ]
    },
    {
        "instruction": "",
        "id": "q16186",
        "input": "read binary data byte array python",
        "output": "",
        "rule": [
            "d16186"
        ]
    },
    {
        "instruction": "",
        "id": "q16187",
        "input": "make date vairable from string python",
        "output": "",
        "rule": [
            "d16187"
        ]
    },
    {
        "instruction": "",
        "id": "q16188",
        "input": "read file into python with numpy",
        "output": "",
        "rule": [
            "d16188"
        ]
    },
    {
        "instruction": "",
        "id": "q16189",
        "input": "make image clear with python",
        "output": "",
        "rule": [
            "d16189"
        ]
    },
    {
        "instruction": "",
        "id": "q16190",
        "input": "read private key rsa python",
        "output": "",
        "rule": [
            "d16190"
        ]
    },
    {
        "instruction": "",
        "id": "q16191",
        "input": "make mouse move in python",
        "output": "",
        "rule": [
            "d16191"
        ]
    },
    {
        "instruction": "",
        "id": "q16192",
        "input": "read s3 object python",
        "output": "",
        "rule": [
            "d16192"
        ]
    },
    {
        "instruction": "",
        "id": "q16193",
        "input": "make python read csv and represent as matrix",
        "output": "",
        "rule": [
            "d16193"
        ]
    },
    {
        "instruction": "",
        "id": "q16194",
        "input": "read until end of file bytes python",
        "output": "",
        "rule": [
            "d16194"
        ]
    },
    {
        "instruction": "",
        "id": "q16195",
        "input": "make python secret key urandom",
        "output": "",
        "rule": [
            "d16195"
        ]
    },
    {
        "instruction": "",
        "id": "q16196",
        "input": "read yaml file in python",
        "output": "",
        "rule": [
            "d16196"
        ]
    },
    {
        "instruction": "",
        "id": "q16197",
        "input": "make the first letter lower case python",
        "output": "",
        "rule": [
            "d16197"
        ]
    },
    {
        "instruction": "",
        "id": "q16198",
        "input": "reading a text file into a dictionary python",
        "output": "",
        "rule": [
            "d16198"
        ]
    },
    {
        "instruction": "",
        "id": "q16199",
        "input": "make translucent color python",
        "output": "",
        "rule": [
            "d16199"
        ]
    },
    {
        "instruction": "",
        "id": "q16200",
        "input": "reading json from url in python",
        "output": "",
        "rule": [
            "d16200"
        ]
    },
    {
        "instruction": "",
        "id": "q16201",
        "input": "makeing a frequency list python",
        "output": "",
        "rule": [
            "d16201"
        ]
    },
    {
        "instruction": "",
        "id": "q16202",
        "input": "redis set key python dict",
        "output": "",
        "rule": [
            "d16202"
        ]
    },
    {
        "instruction": "",
        "id": "q16203",
        "input": "referring to a key in python",
        "output": "",
        "rule": [
            "d16203"
        ]
    },
    {
        "instruction": "",
        "id": "q16204",
        "input": "making an alias list in python",
        "output": "",
        "rule": [
            "d16204"
        ]
    },
    {
        "instruction": "",
        "id": "q16205",
        "input": "registration time stored in python",
        "output": "",
        "rule": [
            "d16205"
        ]
    },
    {
        "instruction": "",
        "id": "q16206",
        "input": "max heap with double link list python",
        "output": "",
        "rule": [
            "d16206"
        ]
    },
    {
        "instruction": "",
        "id": "q16207",
        "input": "regula expression for specific string in comma separated strings python",
        "output": "",
        "rule": [
            "d16207"
        ]
    },
    {
        "instruction": "",
        "id": "q16208",
        "input": "maximum number of characters per line in python",
        "output": "",
        "rule": [
            "d16208"
        ]
    },
    {
        "instruction": "",
        "id": "q16209",
        "input": "relative path to config file in python",
        "output": "",
        "rule": [
            "d16209"
        ]
    },
    {
        "instruction": "",
        "id": "q16210",
        "input": "maya python create shader",
        "output": "",
        "rule": [
            "d16210"
        ]
    },
    {
        "instruction": "",
        "id": "q16211",
        "input": "relu activation function python",
        "output": "",
        "rule": [
            "d16211"
        ]
    },
    {
        "instruction": "",
        "id": "q16212",
        "input": "remotely access file in python",
        "output": "",
        "rule": [
            "d16212"
        ]
    },
    {
        "instruction": "",
        "id": "q16213",
        "input": "measure length of object in python",
        "output": "",
        "rule": [
            "d16213"
        ]
    },
    {
        "instruction": "",
        "id": "q16214",
        "input": "remove all blanks from list python",
        "output": "",
        "rule": [
            "d16214"
        ]
    },
    {
        "instruction": "",
        "id": "q16215",
        "input": "memory size of an array python",
        "output": "",
        "rule": [
            "d16215"
        ]
    },
    {
        "instruction": "",
        "id": "q16216",
        "input": "remove all empty elements from list python",
        "output": "",
        "rule": [
            "d16216"
        ]
    },
    {
        "instruction": "",
        "id": "q16217",
        "input": "merge data frames with 2 columns and inner join in python",
        "output": "",
        "rule": [
            "d16217"
        ]
    },
    {
        "instruction": "",
        "id": "q16218",
        "input": "remove all non alphabet characters python",
        "output": "",
        "rule": [
            "d16218"
        ]
    },
    {
        "instruction": "",
        "id": "q16219",
        "input": "mimetext is not defined python examples",
        "output": "",
        "rule": [
            "d16219"
        ]
    },
    {
        "instruction": "",
        "id": "q16220",
        "input": "remove all punctuations from text python",
        "output": "",
        "rule": [
            "d16220"
        ]
    },
    {
        "instruction": "",
        "id": "q16221",
        "input": "min function on an array python",
        "output": "",
        "rule": [
            "d16221"
        ]
    },
    {
        "instruction": "",
        "id": "q16222",
        "input": "remove blanks from the list python",
        "output": "",
        "rule": [
            "d16222"
        ]
    },
    {
        "instruction": "",
        "id": "q16223",
        "input": "modifying values of a dictionary python",
        "output": "",
        "rule": [
            "d16223"
        ]
    },
    {
        "instruction": "",
        "id": "q16224",
        "input": "remove comma in a string python",
        "output": "",
        "rule": [
            "d16224"
        ]
    },
    {
        "instruction": "",
        "id": "q16225",
        "input": "mongodb objectid to python int",
        "output": "",
        "rule": [
            "d16225"
        ]
    },
    {
        "instruction": "",
        "id": "q16226",
        "input": "remove commas seperating characters in list python",
        "output": "",
        "rule": [
            "d16226"
        ]
    },
    {
        "instruction": "",
        "id": "q16227",
        "input": "most common element in a list python",
        "output": "",
        "rule": [
            "d16227"
        ]
    },
    {
        "instruction": "",
        "id": "q16228",
        "input": "remove commas string python list",
        "output": "",
        "rule": [
            "d16228"
        ]
    },
    {
        "instruction": "",
        "id": "q16229",
        "input": "most common element in list python",
        "output": "",
        "rule": [
            "d16229"
        ]
    },
    {
        "instruction": "",
        "id": "q16230",
        "input": "remove dtype nparray python",
        "output": "",
        "rule": [
            "d16230"
        ]
    },
    {
        "instruction": "",
        "id": "q16231",
        "input": "moving average array python",
        "output": "",
        "rule": [
            "d16231"
        ]
    },
    {
        "instruction": "",
        "id": "q16232",
        "input": "remove duplicates without changing porder python",
        "output": "",
        "rule": [
            "d16232"
        ]
    },
    {
        "instruction": "",
        "id": "q16233",
        "input": "multiline strings without newline python",
        "output": "",
        "rule": [
            "d16233"
        ]
    },
    {
        "instruction": "",
        "id": "q16234",
        "input": "remove element by id in python",
        "output": "",
        "rule": [
            "d16234"
        ]
    },
    {
        "instruction": "",
        "id": "q16235",
        "input": "multiple sql query python",
        "output": "",
        "rule": [
            "d16235"
        ]
    },
    {
        "instruction": "",
        "id": "q16236",
        "input": "remove element from series python",
        "output": "",
        "rule": [
            "d16236"
        ]
    },
    {
        "instruction": "",
        "id": "q16237",
        "input": "multiply each element of a matrix python",
        "output": "",
        "rule": [
            "d16237"
        ]
    },
    {
        "instruction": "",
        "id": "q16238",
        "input": "remove empty element in list python",
        "output": "",
        "rule": [
            "d16238"
        ]
    },
    {
        "instruction": "",
        "id": "q16239",
        "input": "multiply in python using built in function",
        "output": "",
        "rule": [
            "d16239"
        ]
    },
    {
        "instruction": "",
        "id": "q16240",
        "input": "remove files in directory python",
        "output": "",
        "rule": [
            "d16240"
        ]
    },
    {
        "instruction": "",
        "id": "q16241",
        "input": "must be str not list python",
        "output": "",
        "rule": [
            "d16241"
        ]
    },
    {
        "instruction": "",
        "id": "q16242",
        "input": "remove letters from string python for loop",
        "output": "",
        "rule": [
            "d16242"
        ]
    },
    {
        "instruction": "",
        "id": "q16243",
        "input": "mysql python how to close the connection",
        "output": "",
        "rule": [
            "d16243"
        ]
    },
    {
        "instruction": "",
        "id": "q16244",
        "input": "remove multiple \\n from text python",
        "output": "",
        "rule": [
            "d16244"
        ]
    },
    {
        "instruction": "",
        "id": "q16245",
        "input": "name a file from url python",
        "output": "",
        "rule": [
            "d16245"
        ]
    },
    {
        "instruction": "",
        "id": "q16246",
        "input": "remove not letters python",
        "output": "",
        "rule": [
            "d16246"
        ]
    },
    {
        "instruction": "",
        "id": "q16247",
        "input": "ndarray object definition python",
        "output": "",
        "rule": [
            "d16247"
        ]
    },
    {
        "instruction": "",
        "id": "q16248",
        "input": "remove row with empty cell python",
        "output": "",
        "rule": [
            "d16248"
        ]
    },
    {
        "instruction": "",
        "id": "q16249",
        "input": "nearest index value array python",
        "output": "",
        "rule": [
            "d16249"
        ]
    },
    {
        "instruction": "",
        "id": "q16250",
        "input": "remove something from a dictionary python",
        "output": "",
        "rule": [
            "d16250"
        ]
    },
    {
        "instruction": "",
        "id": "q16251",
        "input": "nearest integer numpy array python",
        "output": "",
        "rule": [
            "d16251"
        ]
    },
    {
        "instruction": "",
        "id": "q16252",
        "input": "new fibonacci function in python",
        "output": "",
        "rule": [
            "d16252"
        ]
    },
    {
        "instruction": "",
        "id": "q16253",
        "input": "remove whitespace after xml closing tag python",
        "output": "",
        "rule": [
            "d16253"
        ]
    },
    {
        "instruction": "",
        "id": "q16254",
        "input": "no gradients provided for any variable tf python help",
        "output": "",
        "rule": [
            "d16254"
        ]
    },
    {
        "instruction": "",
        "id": "q16255",
        "input": "remove whitespaces from string python",
        "output": "",
        "rule": [
            "d16255"
        ]
    },
    {
        "instruction": "",
        "id": "q16256",
        "input": "no of dimensions in python list",
        "output": "",
        "rule": [
            "d16256"
        ]
    },
    {
        "instruction": "",
        "id": "q16257",
        "input": "remove zeros from list python",
        "output": "",
        "rule": [
            "d16257"
        ]
    },
    {
        "instruction": "",
        "id": "q16258",
        "input": "non blocking input python",
        "output": "",
        "rule": [
            "d16258"
        ]
    },
    {
        "instruction": "",
        "id": "q16259",
        "input": "removing a symbol from a string in python",
        "output": "",
        "rule": [
            "d16259"
        ]
    },
    {
        "instruction": "",
        "id": "q16260",
        "input": "normalize a sparse matrix python",
        "output": "",
        "rule": [
            "d16260"
        ]
    },
    {
        "instruction": "",
        "id": "q16261",
        "input": "removing items separated by comma from a list python",
        "output": "",
        "rule": [
            "d16261"
        ]
    },
    {
        "instruction": "",
        "id": "q16262",
        "input": "npss signal auto correction python",
        "output": "",
        "rule": [
            "d16262"
        ]
    },
    {
        "instruction": "",
        "id": "q16263",
        "input": "removing stop words in python without ntlk",
        "output": "",
        "rule": [
            "d16263"
        ]
    },
    {
        "instruction": "",
        "id": "q16264",
        "input": "number of rows in a series python",
        "output": "",
        "rule": [
            "d16264"
        ]
    },
    {
        "instruction": "",
        "id": "q16265",
        "input": "replace * in string in python",
        "output": "",
        "rule": [
            "d16265"
        ]
    },
    {
        "instruction": "",
        "id": "q16266",
        "input": "number of rows in a sheet python",
        "output": "",
        "rule": [
            "d16266"
        ]
    },
    {
        "instruction": "",
        "id": "q16267",
        "input": "replace all occurrence of a searched pattern in python",
        "output": "",
        "rule": [
            "d16267"
        ]
    },
    {
        "instruction": "",
        "id": "q16268",
        "input": "replace all zeros in array with nan python",
        "output": "",
        "rule": [
            "d16268"
        ]
    },
    {
        "instruction": "",
        "id": "q16269",
        "input": "numpy load from file in folder python",
        "output": "",
        "rule": [
            "d16269"
        ]
    },
    {
        "instruction": "",
        "id": "q16270",
        "input": "replace latex with python",
        "output": "",
        "rule": [
            "d16270"
        ]
    },
    {
        "instruction": "",
        "id": "q16271",
        "input": "numpy nearest pointin python",
        "output": "",
        "rule": [
            "d16271"
        ]
    },
    {
        "instruction": "",
        "id": "q16272",
        "input": "replace multiple patterns using re python",
        "output": "",
        "rule": [
            "d16272"
        ]
    },
    {
        "instruction": "",
        "id": "q16273",
        "input": "object as a list python",
        "output": "",
        "rule": [
            "d16273"
        ]
    },
    {
        "instruction": "",
        "id": "q16274",
        "input": "replace parantheses in string python",
        "output": "",
        "rule": [
            "d16274"
        ]
    },
    {
        "instruction": "",
        "id": "q16275",
        "input": "request param in python django",
        "output": "",
        "rule": [
            "d16275"
        ]
    },
    {
        "instruction": "",
        "id": "q16276",
        "input": "object of type 'listserializer' is not json serializable python",
        "output": "",
        "rule": [
            "d16276"
        ]
    },
    {
        "instruction": "",
        "id": "q16277",
        "input": "requests python json expecting value",
        "output": "",
        "rule": [
            "d16277"
        ]
    },
    {
        "instruction": "",
        "id": "q16278",
        "input": "odoo+python+add read only field",
        "output": "",
        "rule": [
            "d16278"
        ]
    },
    {
        "instruction": "",
        "id": "q16279",
        "input": "resample 2d lon lat grid python",
        "output": "",
        "rule": [
            "d16279"
        ]
    },
    {
        "instruction": "",
        "id": "q16280",
        "input": "only python base64 has leading b",
        "output": "",
        "rule": [
            "d16280"
        ]
    },
    {
        "instruction": "",
        "id": "q16281",
        "input": "resampling an array in python",
        "output": "",
        "rule": [
            "d16281"
        ]
    },
    {
        "instruction": "",
        "id": "q16282",
        "input": "onvert string to float in python",
        "output": "",
        "rule": [
            "d16282"
        ]
    },
    {
        "instruction": "",
        "id": "q16283",
        "input": "reshape a list as an array in python",
        "output": "",
        "rule": [
            "d16283"
        ]
    },
    {
        "instruction": "",
        "id": "q16284",
        "input": "open a file in python based on modified date",
        "output": "",
        "rule": [
            "d16284"
        ]
    },
    {
        "instruction": "",
        "id": "q16285",
        "input": "reshape array from 4 to 2 dimensions in n\\python",
        "output": "",
        "rule": [
            "d16285"
        ]
    },
    {
        "instruction": "",
        "id": "q16286",
        "input": "open a pickled file in python",
        "output": "",
        "rule": [
            "d16286"
        ]
    },
    {
        "instruction": "",
        "id": "q16287",
        "input": "reshape in python 3 dimenssionto 2 example",
        "output": "",
        "rule": [
            "d16287"
        ]
    },
    {
        "instruction": "",
        "id": "q16288",
        "input": "open an file for read or write python open",
        "output": "",
        "rule": [
            "d16288"
        ]
    },
    {
        "instruction": "",
        "id": "q16289",
        "input": "response object pythong content incomplete",
        "output": "",
        "rule": [
            "d16289"
        ]
    },
    {
        "instruction": "",
        "id": "q16290",
        "input": "open and read first line in a file python",
        "output": "",
        "rule": [
            "d16290"
        ]
    },
    {
        "instruction": "",
        "id": "q16291",
        "input": "restart discord bot with command python",
        "output": "",
        "rule": [
            "d16291"
        ]
    },
    {
        "instruction": "",
        "id": "q16292",
        "input": "open compiled python file",
        "output": "",
        "rule": [
            "d16292"
        ]
    },
    {
        "instruction": "",
        "id": "q16293",
        "input": "retrieve global variables from function python",
        "output": "",
        "rule": [
            "d16293"
        ]
    },
    {
        "instruction": "",
        "id": "q16294",
        "input": "open files in python without decoding",
        "output": "",
        "rule": [
            "d16294"
        ]
    },
    {
        "instruction": "",
        "id": "q16295",
        "input": "return a method from a method python",
        "output": "",
        "rule": [
            "d16295"
        ]
    },
    {
        "instruction": "",
        "id": "q16296",
        "input": "opencv python image not found",
        "output": "",
        "rule": [
            "d16296"
        ]
    },
    {
        "instruction": "",
        "id": "q16297",
        "input": "return all values in python enum in tuple",
        "output": "",
        "rule": [
            "d16297"
        ]
    },
    {
        "instruction": "",
        "id": "q16298",
        "input": "opening blank workbook using python openpyxl",
        "output": "",
        "rule": [
            "d16298"
        ]
    },
    {
        "instruction": "",
        "id": "q16299",
        "input": "return columns names python",
        "output": "",
        "rule": [
            "d16299"
        ]
    },
    {
        "instruction": "",
        "id": "q16300",
        "input": "order a number in a string python",
        "output": "",
        "rule": [
            "d16300"
        ]
    },
    {
        "instruction": "",
        "id": "q16301",
        "input": "return only the first column of an array python",
        "output": "",
        "rule": [
            "d16301"
        ]
    },
    {
        "instruction": "",
        "id": "q16302",
        "input": "orthonormalize 1 vector corresponding to another python",
        "output": "",
        "rule": [
            "d16302"
        ]
    },
    {
        "instruction": "",
        "id": "q16303",
        "input": "return the string after removing all alphabets python",
        "output": "",
        "rule": [
            "d16303"
        ]
    },
    {
        "instruction": "",
        "id": "q16304",
        "input": "output current timezone python",
        "output": "",
        "rule": [
            "d16304"
        ]
    },
    {
        "instruction": "",
        "id": "q16305",
        "input": "returning a value from a python try function",
        "output": "",
        "rule": [
            "d16305"
        ]
    },
    {
        "instruction": "",
        "id": "q16306",
        "input": "outputting pid to file linux python",
        "output": "",
        "rule": [
            "d16306"
        ]
    },
    {
        "instruction": "",
        "id": "q16307",
        "input": "reverse the dictionary in python",
        "output": "",
        "rule": [
            "d16307"
        ]
    },
    {
        "instruction": "",
        "id": "q16308",
        "input": "overlay segmentation onto image linux python",
        "output": "",
        "rule": [
            "d16308"
        ]
    },
    {
        "instruction": "",
        "id": "q16309",
        "input": "round a date to the nearest hour python",
        "output": "",
        "rule": [
            "d16309"
        ]
    },
    {
        "instruction": "",
        "id": "q16310",
        "input": "ow to make x and y in same dimension in python",
        "output": "",
        "rule": [
            "d16310"
        ]
    },
    {
        "instruction": "",
        "id": "q16311",
        "input": "round to nearest minute timestamp python",
        "output": "",
        "rule": [
            "d16311"
        ]
    },
    {
        "instruction": "",
        "id": "q16312",
        "input": "pad image to bounding box python",
        "output": "",
        "rule": [
            "d16312"
        ]
    },
    {
        "instruction": "",
        "id": "q16313",
        "input": "round up float to two decimal places in python 3",
        "output": "",
        "rule": [
            "d16313"
        ]
    },
    {
        "instruction": "",
        "id": "q16314",
        "input": "panda python parse datetime",
        "output": "",
        "rule": [
            "d16314"
        ]
    },
    {
        "instruction": "",
        "id": "q16315",
        "input": "route has get and post just return postpython service",
        "output": "",
        "rule": [
            "d16315"
        ]
    },
    {
        "instruction": "",
        "id": "q16316",
        "input": "parsing comments with python",
        "output": "",
        "rule": [
            "d16316"
        ]
    },
    {
        "instruction": "",
        "id": "q16317",
        "input": "row is not empty in python check",
        "output": "",
        "rule": [
            "d16317"
        ]
    },
    {
        "instruction": "",
        "id": "q16318",
        "input": "running a webserver with python",
        "output": "",
        "rule": [
            "d16318"
        ]
    },
    {
        "instruction": "",
        "id": "q16319",
        "input": "pass isfinite result to array python",
        "output": "",
        "rule": [
            "d16319"
        ]
    },
    {
        "instruction": "",
        "id": "q16320",
        "input": "running multiple event loops python",
        "output": "",
        "rule": [
            "d16320"
        ]
    },
    {
        "instruction": "",
        "id": "q16321",
        "input": "pass json paramater python",
        "output": "",
        "rule": [
            "d16321"
        ]
    },
    {
        "instruction": "",
        "id": "q16322",
        "input": "safely open and close a file in python 3",
        "output": "",
        "rule": [
            "d16322"
        ]
    },
    {
        "instruction": "",
        "id": "q16323",
        "input": "pass paramters to a function that calls another function python",
        "output": "",
        "rule": [
            "d16323"
        ]
    },
    {
        "instruction": "",
        "id": "q16324",
        "input": "same validation accuracy in python model",
        "output": "",
        "rule": [
            "d16324"
        ]
    },
    {
        "instruction": "",
        "id": "q16325",
        "input": "pearsons cooefficient between 2 matricess in python",
        "output": "",
        "rule": [
            "d16325"
        ]
    },
    {
        "instruction": "",
        "id": "q16326",
        "input": "saticlly type python lists",
        "output": "",
        "rule": [
            "d16326"
        ]
    },
    {
        "instruction": "",
        "id": "q16327",
        "input": "perform fft on data with python",
        "output": "",
        "rule": [
            "d16327"
        ]
    },
    {
        "instruction": "",
        "id": "q16328",
        "input": "save a pickle file for python 3 in python 2",
        "output": "",
        "rule": [
            "d16328"
        ]
    },
    {
        "instruction": "",
        "id": "q16329",
        "input": "perform string replace with string in list item python",
        "output": "",
        "rule": [
            "d16329"
        ]
    },
    {
        "instruction": "",
        "id": "q16330",
        "input": "save json to file in python",
        "output": "",
        "rule": [
            "d16330"
        ]
    },
    {
        "instruction": "",
        "id": "q16331",
        "input": "plot the decision boundary of a svm model in python",
        "output": "",
        "rule": [
            "d16331"
        ]
    },
    {
        "instruction": "",
        "id": "q16332",
        "input": "save plot in python without superimposing",
        "output": "",
        "rule": [
            "d16332"
        ]
    },
    {
        "instruction": "",
        "id": "q16333",
        "input": "posixpath to string python",
        "output": "",
        "rule": [
            "d16333"
        ]
    },
    {
        "instruction": "",
        "id": "q16334",
        "input": "save python graph to a flder",
        "output": "",
        "rule": [
            "d16334"
        ]
    },
    {
        "instruction": "",
        "id": "q16335",
        "input": "powershell json serialize deserialize python wcf datacontractjsonserializer",
        "output": "",
        "rule": [
            "d16335"
        ]
    },
    {
        "instruction": "",
        "id": "q16336",
        "input": "save yaml to file python",
        "output": "",
        "rule": [
            "d16336"
        ]
    },
    {
        "instruction": "",
        "id": "q16337",
        "input": "print binary tree as it is in tree format python",
        "output": "",
        "rule": [
            "d16337"
        ]
    },
    {
        "instruction": "",
        "id": "q16338",
        "input": "scaling your x axis to zoom in on a specific area python",
        "output": "",
        "rule": [
            "d16338"
        ]
    },
    {
        "instruction": "",
        "id": "q16339",
        "input": "print not displaying anything in python\\",
        "output": "",
        "rule": [
            "d16339"
        ]
    },
    {
        "instruction": "",
        "id": "q16340",
        "input": "scintillanet autocomplete and calltip for ironpython",
        "output": "",
        "rule": [
            "d16340"
        ]
    },
    {
        "instruction": "",
        "id": "q16341",
        "input": "print ordered dict python",
        "output": "",
        "rule": [
            "d16341"
        ]
    },
    {
        "instruction": "",
        "id": "q16342",
        "input": "scope of embedded python function",
        "output": "",
        "rule": [
            "d16342"
        ]
    },
    {
        "instruction": "",
        "id": "q16343",
        "input": "print original url before redirect python requests",
        "output": "",
        "rule": [
            "d16343"
        ]
    },
    {
        "instruction": "",
        "id": "q16344",
        "input": "seconds ago minus current python",
        "output": "",
        "rule": [
            "d16344"
        ]
    },
    {
        "instruction": "",
        "id": "q16345",
        "input": "print percent sign in format string python",
        "output": "",
        "rule": [
            "d16345"
        ]
    },
    {
        "instruction": "",
        "id": "q16346",
        "input": "select a certain number of cells in python sql access database",
        "output": "",
        "rule": [
            "d16346"
        ]
    },
    {
        "instruction": "",
        "id": "q16347",
        "input": "print the contents of an object in python",
        "output": "",
        "rule": [
            "d16347"
        ]
    },
    {
        "instruction": "",
        "id": "q16348",
        "input": "select a set of keys in a dictionary python",
        "output": "",
        "rule": [
            "d16348"
        ]
    },
    {
        "instruction": "",
        "id": "q16349",
        "input": "printing without ( in python 3",
        "output": "",
        "rule": [
            "d16349"
        ]
    },
    {
        "instruction": "",
        "id": "q16350",
        "input": "sending an email with python using jinja template",
        "output": "",
        "rule": [
            "d16350"
        ]
    },
    {
        "instruction": "",
        "id": "q16351",
        "input": "product of elements of a vector python",
        "output": "",
        "rule": [
            "d16351"
        ]
    },
    {
        "instruction": "",
        "id": "q16352",
        "input": "session get requests not working python",
        "output": "",
        "rule": [
            "d16352"
        ]
    },
    {
        "instruction": "",
        "id": "q16353",
        "input": "product of numbers in a list python",
        "output": "",
        "rule": [
            "d16353"
        ]
    },
    {
        "instruction": "",
        "id": "q16354",
        "input": "set aspect ratio of image python",
        "output": "",
        "rule": [
            "d16354"
        ]
    },
    {
        "instruction": "",
        "id": "q16355",
        "input": "prompt user input python3",
        "output": "",
        "rule": [
            "d16355"
        ]
    },
    {
        "instruction": "",
        "id": "q16356",
        "input": "set default encode python",
        "output": "",
        "rule": [
            "d16356"
        ]
    },
    {
        "instruction": "",
        "id": "q16357",
        "input": "protobuf python dictionary of dictionary",
        "output": "",
        "rule": [
            "d16357"
        ]
    },
    {
        "instruction": "",
        "id": "q16358",
        "input": "set pixels in a color in python",
        "output": "",
        "rule": [
            "d16358"
        ]
    },
    {
        "instruction": "",
        "id": "q16359",
        "input": "protobuf python get filed by name",
        "output": "",
        "rule": [
            "d16359"
        ]
    },
    {
        "instruction": "",
        "id": "q16360",
        "input": "set proxy tunnel for urllib python",
        "output": "",
        "rule": [
            "d16360"
        ]
    },
    {
        "instruction": "",
        "id": "q16361",
        "input": "protobuf python pass grpc dict",
        "output": "",
        "rule": [
            "d16361"
        ]
    },
    {
        "instruction": "",
        "id": "q16362",
        "input": "set tickhow to keep one of axes empty python",
        "output": "",
        "rule": [
            "d16362"
        ]
    },
    {
        "instruction": "",
        "id": "q16363",
        "input": "pulling most recent file from directory python",
        "output": "",
        "rule": [
            "d16363"
        ]
    },
    {
        "instruction": "",
        "id": "q16364",
        "input": "setattr in python using kwargs",
        "output": "",
        "rule": [
            "d16364"
        ]
    },
    {
        "instruction": "",
        "id": "q16365",
        "input": "putting a hashtag on each line in python",
        "output": "",
        "rule": [
            "d16365"
        ]
    },
    {
        "instruction": "",
        "id": "q16366",
        "input": "shaded rectangle in lines in python",
        "output": "",
        "rule": [
            "d16366"
        ]
    },
    {
        "instruction": "",
        "id": "q16367",
        "input": "putting a string into a set number of characters in python",
        "output": "",
        "rule": [
            "d16367"
        ]
    },
    {
        "instruction": "",
        "id": "q16368",
        "input": "show attributes of python object",
        "output": "",
        "rule": [
            "d16368"
        ]
    },
    {
        "instruction": "",
        "id": "q16369",
        "input": "pybind11 get address of c++ object from python",
        "output": "",
        "rule": [
            "d16369"
        ]
    },
    {
        "instruction": "",
        "id": "q16370",
        "input": "show legend for matplotlib in python",
        "output": "",
        "rule": [
            "d16370"
        ]
    },
    {
        "instruction": "",
        "id": "q16371",
        "input": "pypdf2 reading all pdf pages python",
        "output": "",
        "rule": [
            "d16371"
        ]
    },
    {
        "instruction": "",
        "id": "q16372",
        "input": "signed angle between vectors python",
        "output": "",
        "rule": [
            "d16372"
        ]
    },
    {
        "instruction": "",
        "id": "q16373",
        "input": "pyside python close event",
        "output": "",
        "rule": [
            "d16373"
        ]
    },
    {
        "instruction": "",
        "id": "q16374",
        "input": "simplest way to calculate l2 distance between two points in python",
        "output": "",
        "rule": [
            "d16374"
        ]
    },
    {
        "instruction": "",
        "id": "q16375",
        "input": "python 'jsonify' is not defined",
        "output": "",
        "rule": [
            "d16375"
        ]
    },
    {
        "instruction": "",
        "id": "q16376",
        "input": "sine wave with python",
        "output": "",
        "rule": [
            "d16376"
        ]
    },
    {
        "instruction": "",
        "id": "q16377",
        "input": "python 'prompt' is not defined",
        "output": "",
        "rule": [
            "d16377"
        ]
    },
    {
        "instruction": "",
        "id": "q16378",
        "input": "singular matrixsingular matrix in python",
        "output": "",
        "rule": [
            "d16378"
        ]
    },
    {
        "instruction": "",
        "id": "q16379",
        "input": "python 'symbol' object is not subscriptable",
        "output": "",
        "rule": [
            "d16379"
        ]
    },
    {
        "instruction": "",
        "id": "q16380",
        "input": "size dimension of list python",
        "output": "",
        "rule": [
            "d16380"
        ]
    },
    {
        "instruction": "",
        "id": "q16381",
        "input": "python 1 element array to scalar",
        "output": "",
        "rule": [
            "d16381"
        ]
    },
    {
        "instruction": "",
        "id": "q16382",
        "input": "size limit of a function python",
        "output": "",
        "rule": [
            "d16382"
        ]
    },
    {
        "instruction": "",
        "id": "q16383",
        "input": "python 2 dimensional array access with an array",
        "output": "",
        "rule": [
            "d16383"
        ]
    },
    {
        "instruction": "",
        "id": "q16384",
        "input": "slicing in 2d list python",
        "output": "",
        "rule": [
            "d16384"
        ]
    },
    {
        "instruction": "",
        "id": "q16385",
        "input": "python 2 round float",
        "output": "",
        "rule": [
            "d16385"
        ]
    },
    {
        "instruction": "",
        "id": "q16386",
        "input": "solve power matrix function python",
        "output": "",
        "rule": [
            "d16386"
        ]
    },
    {
        "instruction": "",
        "id": "q16387",
        "input": "python 2 round up float",
        "output": "",
        "rule": [
            "d16387"
        ]
    },
    {
        "instruction": "",
        "id": "q16388",
        "input": "sort a number by its digits python",
        "output": "",
        "rule": [
            "d16388"
        ]
    },
    {
        "instruction": "",
        "id": "q16389",
        "input": "python 2d array to dict",
        "output": "",
        "rule": [
            "d16389"
        ]
    },
    {
        "instruction": "",
        "id": "q16390",
        "input": "sort and uniq list in python",
        "output": "",
        "rule": [
            "d16390"
        ]
    },
    {
        "instruction": "",
        "id": "q16391",
        "input": "python 2d vector rotate angle",
        "output": "",
        "rule": [
            "d16391"
        ]
    },
    {
        "instruction": "",
        "id": "q16392",
        "input": "sort digits in an integer by digit in python",
        "output": "",
        "rule": [
            "d16392"
        ]
    },
    {
        "instruction": "",
        "id": "q16393",
        "input": "sort digits in an integer in python",
        "output": "",
        "rule": [
            "d16393"
        ]
    },
    {
        "instruction": "",
        "id": "q16394",
        "input": "python 3 cast bytes to str",
        "output": "",
        "rule": [
            "d16394"
        ]
    },
    {
        "instruction": "",
        "id": "q16395",
        "input": "sort list by name python",
        "output": "",
        "rule": [
            "d16395"
        ]
    },
    {
        "instruction": "",
        "id": "q16396",
        "input": "specify bins in python 2d histogram",
        "output": "",
        "rule": [
            "d16396"
        ]
    },
    {
        "instruction": "",
        "id": "q16397",
        "input": "python 3 close socket",
        "output": "",
        "rule": [
            "d16397"
        ]
    },
    {
        "instruction": "",
        "id": "q16398",
        "input": "split a string into 5 equal size chunks in python",
        "output": "",
        "rule": [
            "d16398"
        ]
    },
    {
        "instruction": "",
        "id": "q16399",
        "input": "python 3 cursor fetch data as dict",
        "output": "",
        "rule": [
            "d16399"
        ]
    },
    {
        "instruction": "",
        "id": "q16400",
        "input": "split based on multiple characters in python",
        "output": "",
        "rule": [
            "d16400"
        ]
    },
    {
        "instruction": "",
        "id": "q16401",
        "input": "python 3 determine mime type of file",
        "output": "",
        "rule": [
            "d16401"
        ]
    },
    {
        "instruction": "",
        "id": "q16402",
        "input": "split function in python for every character",
        "output": "",
        "rule": [
            "d16402"
        ]
    },
    {
        "instruction": "",
        "id": "q16403",
        "input": "python 3 get mouse position",
        "output": "",
        "rule": [
            "d16403"
        ]
    },
    {
        "instruction": "",
        "id": "q16404",
        "input": "split lines with no newlines character python",
        "output": "",
        "rule": [
            "d16404"
        ]
    },
    {
        "instruction": "",
        "id": "q16405",
        "input": "python 3 get user and password from a file",
        "output": "",
        "rule": [
            "d16405"
        ]
    },
    {
        "instruction": "",
        "id": "q16406",
        "input": "split the string into pairs python",
        "output": "",
        "rule": [
            "d16406"
        ]
    },
    {
        "instruction": "",
        "id": "q16407",
        "input": "python 3 how to return local variable to global stack",
        "output": "",
        "rule": [
            "d16407"
        ]
    },
    {
        "instruction": "",
        "id": "q16408",
        "input": "splitting an array in python into chunks",
        "output": "",
        "rule": [
            "d16408"
        ]
    },
    {
        "instruction": "",
        "id": "q16409",
        "input": "python 3 logging findcaller",
        "output": "",
        "rule": [
            "d16409"
        ]
    },
    {
        "instruction": "",
        "id": "q16410",
        "input": "sql server stored procedure python param out",
        "output": "",
        "rule": [
            "d16410"
        ]
    },
    {
        "instruction": "",
        "id": "q16411",
        "input": "python 3 make an iterable",
        "output": "",
        "rule": [
            "d16411"
        ]
    },
    {
        "instruction": "",
        "id": "q16412",
        "input": "sqlite python delete all rows",
        "output": "",
        "rule": [
            "d16412"
        ]
    },
    {
        "instruction": "",
        "id": "q16413",
        "input": "python 3 non blocking user input",
        "output": "",
        "rule": [
            "d16413"
        ]
    },
    {
        "instruction": "",
        "id": "q16414",
        "input": "sqlite python fetch as dict",
        "output": "",
        "rule": [
            "d16414"
        ]
    },
    {
        "instruction": "",
        "id": "q16415",
        "input": "python 3 object of type 'bytes' is not json serializable",
        "output": "",
        "rule": [
            "d16415"
        ]
    },
    {
        "instruction": "",
        "id": "q16416",
        "input": "stack and heap in python 3",
        "output": "",
        "rule": [
            "d16416"
        ]
    },
    {
        "instruction": "",
        "id": "q16417",
        "input": "python 3 remove commas in list",
        "output": "",
        "rule": [
            "d16417"
        ]
    },
    {
        "instruction": "",
        "id": "q16418",
        "input": "stack overflow python object to json",
        "output": "",
        "rule": [
            "d16418"
        ]
    },
    {
        "instruction": "",
        "id": "q16419",
        "input": "python 3 strip enclosing quotes from string",
        "output": "",
        "rule": [
            "d16419"
        ]
    },
    {
        "instruction": "",
        "id": "q16420",
        "input": "stackoverflow max value python list",
        "output": "",
        "rule": [
            "d16420"
        ]
    },
    {
        "instruction": "",
        "id": "q16421",
        "input": "python 3d plot set view to y and z",
        "output": "",
        "rule": [
            "d16421"
        ]
    },
    {
        "instruction": "",
        "id": "q16422",
        "input": "standard scaler without negative values python",
        "output": "",
        "rule": [
            "d16422"
        ]
    },
    {
        "instruction": "",
        "id": "q16423",
        "input": "python [ng to gif animation",
        "output": "",
        "rule": [
            "d16423"
        ]
    },
    {
        "instruction": "",
        "id": "q16424",
        "input": "stop a python process from inside if a condition is met",
        "output": "",
        "rule": [
            "d16424"
        ]
    },
    {
        "instruction": "",
        "id": "q16425",
        "input": "python a while loop instead of time sleep",
        "output": "",
        "rule": [
            "d16425"
        ]
    },
    {
        "instruction": "",
        "id": "q16426",
        "input": "stop logging python function name and",
        "output": "",
        "rule": [
            "d16426"
        ]
    },
    {
        "instruction": "",
        "id": "q16427",
        "input": "python access token oauth url get",
        "output": "",
        "rule": [
            "d16427"
        ]
    },
    {
        "instruction": "",
        "id": "q16428",
        "input": "stop window service python",
        "output": "",
        "rule": [
            "d16428"
        ]
    },
    {
        "instruction": "",
        "id": "q16429",
        "input": "python activate conda in cmd",
        "output": "",
        "rule": [
            "d16429"
        ]
    },
    {
        "instruction": "",
        "id": "q16430",
        "input": "storing keywords in dictionaires in python",
        "output": "",
        "rule": [
            "d16430"
        ]
    },
    {
        "instruction": "",
        "id": "q16431",
        "input": "python add a verbose mode",
        "output": "",
        "rule": [
            "d16431"
        ]
    },
    {
        "instruction": "",
        "id": "q16432",
        "input": "string def python spaces",
        "output": "",
        "rule": [
            "d16432"
        ]
    },
    {
        "instruction": "",
        "id": "q16433",
        "input": "python add custom field to logger formatter",
        "output": "",
        "rule": [
            "d16433"
        ]
    },
    {
        "instruction": "",
        "id": "q16434",
        "input": "string format boolean escape values python",
        "output": "",
        "rule": [
            "d16434"
        ]
    },
    {
        "instruction": "",
        "id": "q16435",
        "input": "python add element to map",
        "output": "",
        "rule": [
            "d16435"
        ]
    },
    {
        "instruction": "",
        "id": "q16436",
        "input": "string height and width in python",
        "output": "",
        "rule": [
            "d16436"
        ]
    },
    {
        "instruction": "",
        "id": "q16437",
        "input": "python add methods to builtin",
        "output": "",
        "rule": [
            "d16437"
        ]
    },
    {
        "instruction": "",
        "id": "q16438",
        "input": "string representation not printed in list python",
        "output": "",
        "rule": [
            "d16438"
        ]
    },
    {
        "instruction": "",
        "id": "q16439",
        "input": "python add to emtyp dict",
        "output": "",
        "rule": [
            "d16439"
        ]
    },
    {
        "instruction": "",
        "id": "q16440",
        "input": "string representing a category python",
        "output": "",
        "rule": [
            "d16440"
        ]
    },
    {
        "instruction": "",
        "id": "q16441",
        "input": "python adjacency matrix from edge list",
        "output": "",
        "rule": [
            "d16441"
        ]
    },
    {
        "instruction": "",
        "id": "q16442",
        "input": "string to float converter python",
        "output": "",
        "rule": [
            "d16442"
        ]
    },
    {
        "instruction": "",
        "id": "q16443",
        "input": "python all attributes for an object",
        "output": "",
        "rule": [
            "d16443"
        ]
    },
    {
        "instruction": "",
        "id": "q16444",
        "input": "strip dangerous tags python",
        "output": "",
        "rule": [
            "d16444"
        ]
    },
    {
        "instruction": "",
        "id": "q16445",
        "input": "python all the fields of a table database",
        "output": "",
        "rule": [
            "d16445"
        ]
    },
    {
        "instruction": "",
        "id": "q16446",
        "input": "strip white space in python string",
        "output": "",
        "rule": [
            "d16446"
        ]
    },
    {
        "instruction": "",
        "id": "q16447",
        "input": "python and an array of booleans",
        "output": "",
        "rule": [
            "d16447"
        ]
    },
    {
        "instruction": "",
        "id": "q16448",
        "input": "submit python code in pysopark",
        "output": "",
        "rule": [
            "d16448"
        ]
    },
    {
        "instruction": "",
        "id": "q16449",
        "input": "python angle between 3 points",
        "output": "",
        "rule": [
            "d16449"
        ]
    },
    {
        "instruction": "",
        "id": "q16450",
        "input": "subplot python matplotlib set title",
        "output": "",
        "rule": [
            "d16450"
        ]
    },
    {
        "instruction": "",
        "id": "q16451",
        "input": "python api docker login denied",
        "output": "",
        "rule": [
            "d16451"
        ]
    },
    {
        "instruction": "",
        "id": "q16452",
        "input": "subprocess python stdin write",
        "output": "",
        "rule": [
            "d16452"
        ]
    },
    {
        "instruction": "",
        "id": "q16453",
        "input": "python apply function all elements in dictonary",
        "output": "",
        "rule": [
            "d16453"
        ]
    },
    {
        "instruction": "",
        "id": "q16454",
        "input": "subset dictionary based on keys python",
        "output": "",
        "rule": [
            "d16454"
        ]
    },
    {
        "instruction": "",
        "id": "q16455",
        "input": "python apply function to dictionary",
        "output": "",
        "rule": [
            "d16455"
        ]
    },
    {
        "instruction": "",
        "id": "q16456",
        "input": "python apply function to iterable",
        "output": "",
        "rule": [
            "d16456"
        ]
    },
    {
        "instruction": "",
        "id": "q16457",
        "input": "syntax for a 303 redirect in python",
        "output": "",
        "rule": [
            "d16457"
        ]
    },
    {
        "instruction": "",
        "id": "q16458",
        "input": "python applying format to str in map(str",
        "output": "",
        "rule": [
            "d16458"
        ]
    },
    {
        "instruction": "",
        "id": "q16459",
        "input": "sys exc info python and traceback",
        "output": "",
        "rule": [
            "d16459"
        ]
    },
    {
        "instruction": "",
        "id": "q16460",
        "input": "python are lists implemented as array",
        "output": "",
        "rule": [
            "d16460"
        ]
    },
    {
        "instruction": "",
        "id": "q16461",
        "input": "take a string and form a dictionary python",
        "output": "",
        "rule": [
            "d16461"
        ]
    },
    {
        "instruction": "",
        "id": "q16462",
        "input": "python area given 3 points",
        "output": "",
        "rule": [
            "d16462"
        ]
    },
    {
        "instruction": "",
        "id": "q16463",
        "input": "taking datetimes and matching them to another column python",
        "output": "",
        "rule": [
            "d16463"
        ]
    },
    {
        "instruction": "",
        "id": "q16464",
        "input": "python argparse custom action parse file",
        "output": "",
        "rule": [
            "d16464"
        ]
    },
    {
        "instruction": "",
        "id": "q16465",
        "input": "taking out unique values from a python list",
        "output": "",
        "rule": [
            "d16465"
        ]
    },
    {
        "instruction": "",
        "id": "q16466",
        "input": "python argparse no help message",
        "output": "",
        "rule": [
            "d16466"
        ]
    },
    {
        "instruction": "",
        "id": "q16467",
        "input": "tell python function to expect tuple",
        "output": "",
        "rule": [
            "d16467"
        ]
    },
    {
        "instruction": "",
        "id": "q16468",
        "input": "python args kwargs to string",
        "output": "",
        "rule": [
            "d16468"
        ]
    },
    {
        "instruction": "",
        "id": "q16469",
        "input": "tell python to pause for secs before running script",
        "output": "",
        "rule": [
            "d16469"
        ]
    },
    {
        "instruction": "",
        "id": "q16470",
        "input": "python array get most common element",
        "output": "",
        "rule": [
            "d16470"
        ]
    },
    {
        "instruction": "",
        "id": "q16471",
        "input": "tensorflow has no attribute python",
        "output": "",
        "rule": [
            "d16471"
        ]
    },
    {
        "instruction": "",
        "id": "q16472",
        "input": "python assert lists are equal",
        "output": "",
        "rule": [
            "d16472"
        ]
    },
    {
        "instruction": "",
        "id": "q16473",
        "input": "tensorflow python cpu minilab",
        "output": "",
        "rule": [
            "d16473"
        ]
    },
    {
        "instruction": "",
        "id": "q16474",
        "input": "python assert object type",
        "output": "",
        "rule": [
            "d16474"
        ]
    },
    {
        "instruction": "",
        "id": "q16475",
        "input": "test datetime validity python",
        "output": "",
        "rule": [
            "d16475"
        ]
    },
    {
        "instruction": "",
        "id": "q16476",
        "input": "python astropy table np array",
        "output": "",
        "rule": [
            "d16476"
        ]
    },
    {
        "instruction": "",
        "id": "q16477",
        "input": "test whether a python object is iterable",
        "output": "",
        "rule": [
            "d16477"
        ]
    },
    {
        "instruction": "",
        "id": "q16478",
        "input": "python asyncio how to detect socket connection lost",
        "output": "",
        "rule": [
            "d16478"
        ]
    },
    {
        "instruction": "",
        "id": "q16479",
        "input": "text align to center in python3",
        "output": "",
        "rule": [
            "d16479"
        ]
    },
    {
        "instruction": "",
        "id": "q16480",
        "input": "python asyncio how to determine socket connection lost",
        "output": "",
        "rule": [
            "d16480"
        ]
    },
    {
        "instruction": "",
        "id": "q16481",
        "input": "the sum of all squares between 1 and 100 (inclusive python with for loop",
        "output": "",
        "rule": [
            "d16481"
        ]
    },
    {
        "instruction": "",
        "id": "q16482",
        "input": "python asyncio object is not subscriptable",
        "output": "",
        "rule": [
            "d16482"
        ]
    },
    {
        "instruction": "",
        "id": "q16483",
        "input": "timezone with z in python",
        "output": "",
        "rule": [
            "d16483"
        ]
    },
    {
        "instruction": "",
        "id": "q16484",
        "input": "python asyncio transport write example",
        "output": "",
        "rule": [
            "d16484"
        ]
    },
    {
        "instruction": "",
        "id": "q16485",
        "input": "tkinter python 3 treeview scrollbars windows",
        "output": "",
        "rule": [
            "d16485"
        ]
    },
    {
        "instruction": "",
        "id": "q16486",
        "input": "python autogenerate python documentation using pydoc",
        "output": "",
        "rule": [
            "d16486"
        ]
    },
    {
        "instruction": "",
        "id": "q16487",
        "input": "tkinter scroll two canvas python",
        "output": "",
        "rule": [
            "d16487"
        ]
    },
    {
        "instruction": "",
        "id": "q16488",
        "input": "python azimuth from lat and lon",
        "output": "",
        "rule": [
            "d16488"
        ]
    },
    {
        "instruction": "",
        "id": "q16489",
        "input": "tkmessagebox use in python syntax",
        "output": "",
        "rule": [
            "d16489"
        ]
    },
    {
        "instruction": "",
        "id": "q16490",
        "input": "python beautiful xml string",
        "output": "",
        "rule": [
            "d16490"
        ]
    },
    {
        "instruction": "",
        "id": "q16491",
        "input": "to compare set data in python",
        "output": "",
        "rule": [
            "d16491"
        ]
    },
    {
        "instruction": "",
        "id": "q16492",
        "input": "python best way to get csv header list from a file ussing dictreader",
        "output": "",
        "rule": [
            "d16492"
        ]
    },
    {
        "instruction": "",
        "id": "q16493",
        "input": "to print the results in the form of table in python",
        "output": "",
        "rule": [
            "d16493"
        ]
    },
    {
        "instruction": "",
        "id": "q16494",
        "input": "python best way to transform image to grayscale",
        "output": "",
        "rule": [
            "d16494"
        ]
    },
    {
        "instruction": "",
        "id": "q16495",
        "input": "to read xml files in python",
        "output": "",
        "rule": [
            "d16495"
        ]
    },
    {
        "instruction": "",
        "id": "q16496",
        "input": "python bin ranges not numpy",
        "output": "",
        "rule": [
            "d16496"
        ]
    },
    {
        "instruction": "",
        "id": "q16497",
        "input": "too long sentences in python",
        "output": "",
        "rule": [
            "d16497"
        ]
    },
    {
        "instruction": "",
        "id": "q16498",
        "input": "python bind focusin focusout",
        "output": "",
        "rule": [
            "d16498"
        ]
    },
    {
        "instruction": "",
        "id": "q16499",
        "input": "track location of mouse click python",
        "output": "",
        "rule": [
            "d16499"
        ]
    },
    {
        "instruction": "",
        "id": "q16500",
        "input": "transform array to dictionary python",
        "output": "",
        "rule": [
            "d16500"
        ]
    },
    {
        "instruction": "",
        "id": "q16501",
        "input": "python boto3 check if sts is expiration and renew",
        "output": "",
        "rule": [
            "d16501"
        ]
    },
    {
        "instruction": "",
        "id": "q16502",
        "input": "trim from left of python string",
        "output": "",
        "rule": [
            "d16502"
        ]
    },
    {
        "instruction": "",
        "id": "q16503",
        "input": "python boto3 delete file from s3 bucket",
        "output": "",
        "rule": [
            "d16503"
        ]
    },
    {
        "instruction": "",
        "id": "q16504",
        "input": "try updating a dictionary in python",
        "output": "",
        "rule": [
            "d16504"
        ]
    },
    {
        "instruction": "",
        "id": "q16505",
        "input": "python byte buffer as array",
        "output": "",
        "rule": [
            "d16505"
        ]
    },
    {
        "instruction": "",
        "id": "q16506",
        "input": "tshark command results in python",
        "output": "",
        "rule": [
            "d16506"
        ]
    },
    {
        "instruction": "",
        "id": "q16507",
        "input": "python byte indices must be integers or slices, not str",
        "output": "",
        "rule": [
            "d16507"
        ]
    },
    {
        "instruction": "",
        "id": "q16508",
        "input": "turn array of arrays to list python",
        "output": "",
        "rule": [
            "d16508"
        ]
    },
    {
        "instruction": "",
        "id": "q16509",
        "input": "python bytes auto detect",
        "output": "",
        "rule": [
            "d16509"
        ]
    },
    {
        "instruction": "",
        "id": "q16510",
        "input": "turn binary string into bytes object python",
        "output": "",
        "rule": [
            "d16510"
        ]
    },
    {
        "instruction": "",
        "id": "q16511",
        "input": "python bytes to signed int",
        "output": "",
        "rule": [
            "d16511"
        ]
    },
    {
        "instruction": "",
        "id": "q16512",
        "input": "turn string to binaryn string python",
        "output": "",
        "rule": [
            "d16512"
        ]
    },
    {
        "instruction": "",
        "id": "q16513",
        "input": "python bytestring to json",
        "output": "",
        "rule": [
            "d16513"
        ]
    },
    {
        "instruction": "",
        "id": "q16514",
        "input": "turn time return into seconds python",
        "output": "",
        "rule": [
            "d16514"
        ]
    },
    {
        "instruction": "",
        "id": "q16515",
        "input": "python c++ bindings clang",
        "output": "",
        "rule": [
            "d16515"
        ]
    },
    {
        "instruction": "",
        "id": "q16516",
        "input": "uniform variable [0,1] python",
        "output": "",
        "rule": [
            "d16516"
        ]
    },
    {
        "instruction": "",
        "id": "q16517",
        "input": "python cache json http response",
        "output": "",
        "rule": [
            "d16517"
        ]
    },
    {
        "instruction": "",
        "id": "q16518",
        "input": "uniqify a list preserve order+ python",
        "output": "",
        "rule": [
            "d16518"
        ]
    },
    {
        "instruction": "",
        "id": "q16519",
        "input": "python calculate latitude and longitude from distance",
        "output": "",
        "rule": [
            "d16519"
        ]
    },
    {
        "instruction": "",
        "id": "q16520",
        "input": "unique labels function in python",
        "output": "",
        "rule": [
            "d16520"
        ]
    },
    {
        "instruction": "",
        "id": "q16521",
        "input": "python calculate the area of several points",
        "output": "",
        "rule": [
            "d16521"
        ]
    },
    {
        "instruction": "",
        "id": "q16522",
        "input": "unique list of duplicates python",
        "output": "",
        "rule": [
            "d16522"
        ]
    },
    {
        "instruction": "",
        "id": "q16523",
        "input": "python calculate variance of a series end with 0",
        "output": "",
        "rule": [
            "d16523"
        ]
    },
    {
        "instruction": "",
        "id": "q16524",
        "input": "uniquify a list in python",
        "output": "",
        "rule": [
            "d16524"
        ]
    },
    {
        "instruction": "",
        "id": "q16525",
        "input": "python calculating sum molecular weight from protein sequence",
        "output": "",
        "rule": [
            "d16525"
        ]
    },
    {
        "instruction": "",
        "id": "q16526",
        "input": "unittest python assert not equal",
        "output": "",
        "rule": [
            "d16526"
        ]
    },
    {
        "instruction": "",
        "id": "q16527",
        "input": "python call a function that takes self",
        "output": "",
        "rule": [
            "d16527"
        ]
    },
    {
        "instruction": "",
        "id": "q16528",
        "input": "unix to windows paths python",
        "output": "",
        "rule": [
            "d16528"
        ]
    },
    {
        "instruction": "",
        "id": "q16529",
        "input": "python calling function with underscore",
        "output": "",
        "rule": [
            "d16529"
        ]
    },
    {
        "instruction": "",
        "id": "q16530",
        "input": "updating a canvas in python",
        "output": "",
        "rule": [
            "d16530"
        ]
    },
    {
        "instruction": "",
        "id": "q16531",
        "input": "python can none value be used outside variables",
        "output": "",
        "rule": [
            "d16531"
        ]
    },
    {
        "instruction": "",
        "id": "q16532",
        "input": "use credentials from a text file python",
        "output": "",
        "rule": [
            "d16532"
        ]
    },
    {
        "instruction": "",
        "id": "q16533",
        "input": "python can not pickle local objects",
        "output": "",
        "rule": [
            "d16533"
        ]
    },
    {
        "instruction": "",
        "id": "q16534",
        "input": "use maximum performance tensorflow gpu cuda a python",
        "output": "",
        "rule": [
            "d16534"
        ]
    },
    {
        "instruction": "",
        "id": "q16535",
        "input": "python can you get the shape of a npz",
        "output": "",
        "rule": [
            "d16535"
        ]
    },
    {
        "instruction": "",
        "id": "q16536",
        "input": "use of any to compare an array element with an int in python",
        "output": "",
        "rule": [
            "d16536"
        ]
    },
    {
        "instruction": "",
        "id": "q16537",
        "input": "python canvas remove image",
        "output": "",
        "rule": [
            "d16537"
        ]
    },
    {
        "instruction": "",
        "id": "q16538",
        "input": "use pickle to send data over socket python",
        "output": "",
        "rule": [
            "d16538"
        ]
    },
    {
        "instruction": "",
        "id": "q16539",
        "input": "python capitalize word after",
        "output": "",
        "rule": [
            "d16539"
        ]
    },
    {
        "instruction": "",
        "id": "q16540",
        "input": "use python to change bind dns record",
        "output": "",
        "rule": [
            "d16540"
        ]
    },
    {
        "instruction": "",
        "id": "q16541",
        "input": "python case insensitve string compare",
        "output": "",
        "rule": [
            "d16541"
        ]
    },
    {
        "instruction": "",
        "id": "q16542",
        "input": "use sparse matrices with agglomerativeclustering in python",
        "output": "",
        "rule": [
            "d16542"
        ]
    },
    {
        "instruction": "",
        "id": "q16543",
        "input": "python cast data as array",
        "output": "",
        "rule": [
            "d16543"
        ]
    },
    {
        "instruction": "",
        "id": "q16544",
        "input": "use the def function to ask a question in python",
        "output": "",
        "rule": [
            "d16544"
        ]
    },
    {
        "instruction": "",
        "id": "q16545",
        "input": "python change a specific column name",
        "output": "",
        "rule": [
            "d16545"
        ]
    },
    {
        "instruction": "",
        "id": "q16546",
        "input": "using ctypes to use c functions in python",
        "output": "",
        "rule": [
            "d16546"
        ]
    },
    {
        "instruction": "",
        "id": "q16547",
        "input": "python change column to datetime with different formats",
        "output": "",
        "rule": [
            "d16547"
        ]
    },
    {
        "instruction": "",
        "id": "q16548",
        "input": "using pickle to store numpy array python",
        "output": "",
        "rule": [
            "d16548"
        ]
    },
    {
        "instruction": "",
        "id": "q16549",
        "input": "python change datatype from object to int",
        "output": "",
        "rule": [
            "d16549"
        ]
    },
    {
        "instruction": "",
        "id": "q16550",
        "input": "using python 3 widget to terminate program",
        "output": "",
        "rule": [
            "d16550"
        ]
    },
    {
        "instruction": "",
        "id": "q16551",
        "input": "python change date format to day month year",
        "output": "",
        "rule": [
            "d16551"
        ]
    },
    {
        "instruction": "",
        "id": "q16552",
        "input": "using python print matrix equally spaced",
        "output": "",
        "rule": [
            "d16552"
        ]
    },
    {
        "instruction": "",
        "id": "q16553",
        "input": "python change default gui closing behavior",
        "output": "",
        "rule": [
            "d16553"
        ]
    },
    {
        "instruction": "",
        "id": "q16554",
        "input": "using python to extract c++ comments",
        "output": "",
        "rule": [
            "d16554"
        ]
    },
    {
        "instruction": "",
        "id": "q16555",
        "input": "python change mouse cursor for window",
        "output": "",
        "rule": [
            "d16555"
        ]
    },
    {
        "instruction": "",
        "id": "q16556",
        "input": "using python to remove duplicate files",
        "output": "",
        "rule": [
            "d16556"
        ]
    },
    {
        "instruction": "",
        "id": "q16557",
        "input": "python change mysql data to json",
        "output": "",
        "rule": [
            "d16557"
        ]
    },
    {
        "instruction": "",
        "id": "q16558",
        "input": "using replace in strings python",
        "output": "",
        "rule": [
            "d16558"
        ]
    },
    {
        "instruction": "",
        "id": "q16559",
        "input": "python change object to dict",
        "output": "",
        "rule": [
            "d16559"
        ]
    },
    {
        "instruction": "",
        "id": "q16560",
        "input": "using runpy with python unit tests",
        "output": "",
        "rule": [
            "d16560"
        ]
    },
    {
        "instruction": "",
        "id": "q16561",
        "input": "python changing y axis to log",
        "output": "",
        "rule": [
            "d16561"
        ]
    },
    {
        "instruction": "",
        "id": "q16562",
        "input": "validate json to swagger in python",
        "output": "",
        "rule": [
            "d16562"
        ]
    },
    {
        "instruction": "",
        "id": "q16563",
        "input": "python check all attributes of an object",
        "output": "",
        "rule": [
            "d16563"
        ]
    },
    {
        "instruction": "",
        "id": "q16564",
        "input": "value if a list is nan or is a string python",
        "output": "",
        "rule": [
            "d16564"
        ]
    },
    {
        "instruction": "",
        "id": "q16565",
        "input": "python check data type is datetime",
        "output": "",
        "rule": [
            "d16565"
        ]
    },
    {
        "instruction": "",
        "id": "q16566",
        "input": "verify a date it is last day of a month python",
        "output": "",
        "rule": [
            "d16566"
        ]
    },
    {
        "instruction": "",
        "id": "q16567",
        "input": "python check default optional arg in function",
        "output": "",
        "rule": [
            "d16567"
        ]
    },
    {
        "instruction": "",
        "id": "q16568",
        "input": "verify email format regex python",
        "output": "",
        "rule": [
            "d16568"
        ]
    },
    {
        "instruction": "",
        "id": "q16569",
        "input": "python check dictionary key starts with a certain letter",
        "output": "",
        "rule": [
            "d16569"
        ]
    },
    {
        "instruction": "",
        "id": "q16570",
        "input": "verify images if broken python",
        "output": "",
        "rule": [
            "d16570"
        ]
    },
    {
        "instruction": "",
        "id": "q16571",
        "input": "python check file is excuatable or not",
        "output": "",
        "rule": [
            "d16571"
        ]
    },
    {
        "instruction": "",
        "id": "q16572",
        "input": "visit last element python",
        "output": "",
        "rule": [
            "d16572"
        ]
    },
    {
        "instruction": "",
        "id": "q16573",
        "input": "vs code python live output",
        "output": "",
        "rule": [
            "d16573"
        ]
    },
    {
        "instruction": "",
        "id": "q16574",
        "input": "python check for existence of property in model",
        "output": "",
        "rule": [
            "d16574"
        ]
    },
    {
        "instruction": "",
        "id": "q16575",
        "input": "wav file to spectrogram python mathlab",
        "output": "",
        "rule": [
            "d16575"
        ]
    },
    {
        "instruction": "",
        "id": "q16576",
        "input": "python check for overlapping matches in string",
        "output": "",
        "rule": [
            "d16576"
        ]
    },
    {
        "instruction": "",
        "id": "q16577",
        "input": "way to tell if image is on screen python",
        "output": "",
        "rule": [
            "d16577"
        ]
    },
    {
        "instruction": "",
        "id": "q16578",
        "input": "python check for tab",
        "output": "",
        "rule": [
            "d16578"
        ]
    },
    {
        "instruction": "",
        "id": "q16579",
        "input": "webdriver python element input set value",
        "output": "",
        "rule": [
            "d16579"
        ]
    },
    {
        "instruction": "",
        "id": "q16580",
        "input": "python check if admin privliges",
        "output": "",
        "rule": [
            "d16580"
        ]
    },
    {
        "instruction": "",
        "id": "q16581",
        "input": "what can i store in dict python",
        "output": "",
        "rule": [
            "d16581"
        ]
    },
    {
        "instruction": "",
        "id": "q16582",
        "input": "python check if all elements in a list are equal",
        "output": "",
        "rule": [
            "d16582"
        ]
    },
    {
        "instruction": "",
        "id": "q16583",
        "input": "what does a dictionary return if empty python",
        "output": "",
        "rule": [
            "d16583"
        ]
    },
    {
        "instruction": "",
        "id": "q16584",
        "input": "python check if an item in a list is a string",
        "output": "",
        "rule": [
            "d16584"
        ]
    },
    {
        "instruction": "",
        "id": "q16585",
        "input": "wht the border of legend box is grey color in python plot",
        "output": "",
        "rule": [
            "d16585"
        ]
    },
    {
        "instruction": "",
        "id": "q16586",
        "input": "python check if an item is a directory",
        "output": "",
        "rule": [
            "d16586"
        ]
    },
    {
        "instruction": "",
        "id": "q16587",
        "input": "will my python kill my child",
        "output": "",
        "rule": [
            "d16587"
        ]
    },
    {
        "instruction": "",
        "id": "q16588",
        "input": "python check if any variable in list is type",
        "output": "",
        "rule": [
            "d16588"
        ]
    },
    {
        "instruction": "",
        "id": "q16589",
        "input": "word counts to dictionary in python",
        "output": "",
        "rule": [
            "d16589"
        ]
    },
    {
        "instruction": "",
        "id": "q16590",
        "input": "python check if edge not exists",
        "output": "",
        "rule": [
            "d16590"
        ]
    },
    {
        "instruction": "",
        "id": "q16591",
        "input": "working with fft in python",
        "output": "",
        "rule": [
            "d16591"
        ]
    },
    {
        "instruction": "",
        "id": "q16592",
        "input": "python check if file ends with any allowed extension",
        "output": "",
        "rule": [
            "d16592"
        ]
    },
    {
        "instruction": "",
        "id": "q16593",
        "input": "wrap c++ code to python code",
        "output": "",
        "rule": [
            "d16593"
        ]
    },
    {
        "instruction": "",
        "id": "q16594",
        "input": "python check if file has been modified hash",
        "output": "",
        "rule": [
            "d16594"
        ]
    },
    {
        "instruction": "",
        "id": "q16595",
        "input": "write a code in python to check the validity of a phone number",
        "output": "",
        "rule": [
            "d16595"
        ]
    },
    {
        "instruction": "",
        "id": "q16596",
        "input": "python check if file is in folder",
        "output": "",
        "rule": [
            "d16596"
        ]
    },
    {
        "instruction": "",
        "id": "q16597",
        "input": "write a function that flattens a list python",
        "output": "",
        "rule": [
            "d16597"
        ]
    },
    {
        "instruction": "",
        "id": "q16598",
        "input": "python check if i'm in virtualenv",
        "output": "",
        "rule": [
            "d16598"
        ]
    },
    {
        "instruction": "",
        "id": "q16599",
        "input": "write a function that outputs a table in python",
        "output": "",
        "rule": [
            "d16599"
        ]
    },
    {
        "instruction": "",
        "id": "q16600",
        "input": "python check if integer inside l ist",
        "output": "",
        "rule": [
            "d16600"
        ]
    },
    {
        "instruction": "",
        "id": "q16601",
        "input": "write a python function to check whether a string start with specified characters",
        "output": "",
        "rule": [
            "d16601"
        ]
    },
    {
        "instruction": "",
        "id": "q16602",
        "input": "python check if it's no punctuation",
        "output": "",
        "rule": [
            "d16602"
        ]
    },
    {
        "instruction": "",
        "id": "q16603",
        "input": "write a python matrix into csv",
        "output": "",
        "rule": [
            "d16603"
        ]
    },
    {
        "instruction": "",
        "id": "q16604",
        "input": "python check if key value is not in array of values",
        "output": "",
        "rule": [
            "d16604"
        ]
    },
    {
        "instruction": "",
        "id": "q16605",
        "input": "write a python script to build rpm",
        "output": "",
        "rule": [
            "d16605"
        ]
    },
    {
        "instruction": "",
        "id": "q16606",
        "input": "python check if list of string or one single string",
        "output": "",
        "rule": [
            "d16606"
        ]
    },
    {
        "instruction": "",
        "id": "q16607",
        "input": "python check if local port is on",
        "output": "",
        "rule": [
            "d16607"
        ]
    },
    {
        "instruction": "",
        "id": "q16608",
        "input": "write dict in json file python",
        "output": "",
        "rule": [
            "d16608"
        ]
    },
    {
        "instruction": "",
        "id": "q16609",
        "input": "python check if node is empty",
        "output": "",
        "rule": [
            "d16609"
        ]
    },
    {
        "instruction": "",
        "id": "q16610",
        "input": "write json object to file in python",
        "output": "",
        "rule": [
            "d16610"
        ]
    },
    {
        "instruction": "",
        "id": "q16611",
        "input": "python check if os is windows or linux",
        "output": "",
        "rule": [
            "d16611"
        ]
    },
    {
        "instruction": "",
        "id": "q16612",
        "input": "write regex to validate password python",
        "output": "",
        "rule": [
            "d16612"
        ]
    },
    {
        "instruction": "",
        "id": "q16613",
        "input": "python check if range of numbers in another range of numbers",
        "output": "",
        "rule": [
            "d16613"
        ]
    },
    {
        "instruction": "",
        "id": "q16614",
        "input": "wxpython close dialog manually",
        "output": "",
        "rule": [
            "d16614"
        ]
    },
    {
        "instruction": "",
        "id": "q16615",
        "input": "python check if stdin is tty",
        "output": "",
        "rule": [
            "d16615"
        ]
    },
    {
        "instruction": "",
        "id": "q16616",
        "input": "wxpython keeps scroll bar lastest",
        "output": "",
        "rule": [
            "d16616"
        ]
    },
    {
        "instruction": "",
        "id": "q16617",
        "input": "python check if super user",
        "output": "",
        "rule": [
            "d16617"
        ]
    },
    {
        "instruction": "",
        "id": "q16618",
        "input": "python check if there are missing values in an array",
        "output": "",
        "rule": [
            "d16618"
        ]
    },
    {
        "instruction": "",
        "id": "q16619",
        "input": "yield regex function python",
        "output": "",
        "rule": [
            "d16619"
        ]
    },
    {
        "instruction": "",
        "id": "q16620",
        "input": "python check if there is a valid data in a column",
        "output": "",
        "rule": [
            "d16620"
        ]
    },
    {
        "instruction": "",
        "id": "q16621",
        "input": "python check if user is in a group",
        "output": "",
        "rule": [
            "d16621"
        ]
    },
    {
        "instruction": "",
        "id": "q16622",
        "input": "python functional to check is number",
        "output": "",
        "rule": [
            "d16622"
        ]
    },
    {
        "instruction": "",
        "id": "q16623",
        "input": "python json specific string",
        "output": "",
        "rule": [
            "d16623"
        ]
    },
    {
        "instruction": "",
        "id": "q16624",
        "input": "how to fetch last month data in python",
        "output": "",
        "rule": [
            "d16624"
        ]
    },
    {
        "instruction": "",
        "id": "q16625",
        "input": "how to make dictionary values float in python",
        "output": "",
        "rule": [
            "d16625"
        ]
    },
    {
        "instruction": "",
        "id": "q16626",
        "input": "how to pass a function name in python",
        "output": "",
        "rule": [
            "d16626"
        ]
    },
    {
        "instruction": "",
        "id": "q16627",
        "input": "python how to get working days before",
        "output": "",
        "rule": [
            "d16627"
        ]
    },
    {
        "instruction": "",
        "id": "q16628",
        "input": "greater than string python",
        "output": "",
        "rule": [
            "d16628"
        ]
    },
    {
        "instruction": "",
        "id": "q16629",
        "input": "how to split sentences on punctuation python",
        "output": "",
        "rule": [
            "d16629"
        ]
    },
    {
        "instruction": "",
        "id": "q16630",
        "input": "turn a list into array python",
        "output": "",
        "rule": [
            "d16630"
        ]
    },
    {
        "instruction": "",
        "id": "q16631",
        "input": "get all the column names in python",
        "output": "",
        "rule": [
            "d16631"
        ]
    },
    {
        "instruction": "",
        "id": "q16632",
        "input": "recursion for depth of nested python lists",
        "output": "",
        "rule": [
            "d16632"
        ]
    },
    {
        "instruction": "",
        "id": "q16633",
        "input": "python get time zone information",
        "output": "",
        "rule": [
            "d16633"
        ]
    },
    {
        "instruction": "",
        "id": "q16634",
        "input": "how to create an inverse dictionary python",
        "output": "",
        "rule": [
            "d16634"
        ]
    },
    {
        "instruction": "",
        "id": "q16635",
        "input": "how to read contents from a file in python",
        "output": "",
        "rule": [
            "d16635"
        ]
    },
    {
        "instruction": "",
        "id": "q16636",
        "input": "python check if queue is empty",
        "output": "",
        "rule": [
            "d16636"
        ]
    },
    {
        "instruction": "",
        "id": "q16637",
        "input": "select top n python",
        "output": "",
        "rule": [
            "d16637"
        ]
    },
    {
        "instruction": "",
        "id": "q16638",
        "input": "python filter out text from a list of words",
        "output": "",
        "rule": [
            "d16638"
        ]
    },
    {
        "instruction": "",
        "id": "q16639",
        "input": "transition probability matrix for a random graph implementation in python",
        "output": "",
        "rule": [
            "d16639"
        ]
    },
    {
        "instruction": "",
        "id": "q16640",
        "input": "python flush request cache",
        "output": "",
        "rule": [
            "d16640"
        ]
    },
    {
        "instruction": "",
        "id": "q16641",
        "input": "python compare none with int",
        "output": "",
        "rule": [
            "d16641"
        ]
    },
    {
        "instruction": "",
        "id": "q16642",
        "input": "count of each token from a string in python",
        "output": "",
        "rule": [
            "d16642"
        ]
    },
    {
        "instruction": "",
        "id": "q16643",
        "input": "python 3 iterator has next",
        "output": "",
        "rule": [
            "d16643"
        ]
    },
    {
        "instruction": "",
        "id": "q16644",
        "input": "how to define the range with 5 margin in python",
        "output": "",
        "rule": [
            "d16644"
        ]
    },
    {
        "instruction": "",
        "id": "q16645",
        "input": "is a json file a python dictinary",
        "output": "",
        "rule": [
            "d16645"
        ]
    },
    {
        "instruction": "",
        "id": "q16646",
        "input": "how to check the first n bytes of a file in python",
        "output": "",
        "rule": [
            "d16646"
        ]
    },
    {
        "instruction": "",
        "id": "q16647",
        "input": "python sql executemany dictionary",
        "output": "",
        "rule": [
            "d16647"
        ]
    },
    {
        "instruction": "",
        "id": "q16648",
        "input": "how to get timezone in python",
        "output": "",
        "rule": [
            "d16648"
        ]
    },
    {
        "instruction": "",
        "id": "q16649",
        "input": "python round float to higher int",
        "output": "",
        "rule": [
            "d16649"
        ]
    },
    {
        "instruction": "",
        "id": "q16650",
        "input": "if value isinteger python",
        "output": "",
        "rule": [
            "d16650"
        ]
    },
    {
        "instruction": "",
        "id": "q16651",
        "input": "get the index of last occurance of a string in list python",
        "output": "",
        "rule": [
            "d16651"
        ]
    },
    {
        "instruction": "",
        "id": "q16652",
        "input": "python elementtree remove element",
        "output": "",
        "rule": [
            "d16652"
        ]
    },
    {
        "instruction": "",
        "id": "q16653",
        "input": "how to split sentence based on delimiter using python",
        "output": "",
        "rule": [
            "d16653"
        ]
    },
    {
        "instruction": "",
        "id": "q16654",
        "input": "remove multiple characters python",
        "output": "",
        "rule": [
            "d16654"
        ]
    },
    {
        "instruction": "",
        "id": "q16655",
        "input": "how to get index labels python",
        "output": "",
        "rule": [
            "d16655"
        ]
    },
    {
        "instruction": "",
        "id": "q16656",
        "input": "python how to check if a key doesnt exist",
        "output": "",
        "rule": [
            "d16656"
        ]
    },
    {
        "instruction": "",
        "id": "q16657",
        "input": "how to switch python version, spyder",
        "output": "",
        "rule": [
            "d16657"
        ]
    },
    {
        "instruction": "",
        "id": "q16658",
        "input": "telling python to skip next line",
        "output": "",
        "rule": [
            "d16658"
        ]
    },
    {
        "instruction": "",
        "id": "q16659",
        "input": "python sqlite open cursor with",
        "output": "",
        "rule": [
            "d16659"
        ]
    },
    {
        "instruction": "",
        "id": "q16660",
        "input": "finding the minimum of a certain dataset python",
        "output": "",
        "rule": [
            "d16660"
        ]
    },
    {
        "instruction": "",
        "id": "q16661",
        "input": "top three in list python",
        "output": "",
        "rule": [
            "d16661"
        ]
    },
    {
        "instruction": "",
        "id": "q16662",
        "input": "using map inside a for loop in python",
        "output": "",
        "rule": [
            "d16662"
        ]
    },
    {
        "instruction": "",
        "id": "q16663",
        "input": "python new dictionary from existing dictionary",
        "output": "",
        "rule": [
            "d16663"
        ]
    },
    {
        "instruction": "",
        "id": "q16664",
        "input": "check if valid date python",
        "output": "",
        "rule": [
            "d16664"
        ]
    },
    {
        "instruction": "",
        "id": "q16665",
        "input": "skipping empty lines in python",
        "output": "",
        "rule": [
            "d16665"
        ]
    },
    {
        "instruction": "",
        "id": "q16666",
        "input": "python3 string codec detect",
        "output": "",
        "rule": [
            "d16666"
        ]
    },
    {
        "instruction": "",
        "id": "q16667",
        "input": "python elementtree xml remove",
        "output": "",
        "rule": [
            "d16667"
        ]
    },
    {
        "instruction": "",
        "id": "q16668",
        "input": "how to evaluate if strings are equal python",
        "output": "",
        "rule": [
            "d16668"
        ]
    },
    {
        "instruction": "",
        "id": "q16669",
        "input": "python read file as one line",
        "output": "",
        "rule": [
            "d16669"
        ]
    },
    {
        "instruction": "",
        "id": "q16670",
        "input": "fastest way to take bitwise or python",
        "output": "",
        "rule": [
            "d16670"
        ]
    },
    {
        "instruction": "",
        "id": "q16671",
        "input": "if element is not in a list in python",
        "output": "",
        "rule": [
            "d16671"
        ]
    },
    {
        "instruction": "",
        "id": "q16672",
        "input": "return the string in all lowercase except the last character is uppercase python",
        "output": "",
        "rule": [
            "d16672"
        ]
    },
    {
        "instruction": "",
        "id": "q16673",
        "input": "check in python variable is str",
        "output": "",
        "rule": [
            "d16673"
        ]
    },
    {
        "instruction": "",
        "id": "q16674",
        "input": "how to give name validation from input python",
        "output": "",
        "rule": [
            "d16674"
        ]
    },
    {
        "instruction": "",
        "id": "q16675",
        "input": "python datetime isoformat layout",
        "output": "",
        "rule": [
            "d16675"
        ]
    },
    {
        "instruction": "",
        "id": "q16676",
        "input": "python how to check if something is not a str",
        "output": "",
        "rule": [
            "d16676"
        ]
    },
    {
        "instruction": "",
        "id": "q16677",
        "input": "lower all items in list python",
        "output": "",
        "rule": [
            "d16677"
        ]
    },
    {
        "instruction": "",
        "id": "q16678",
        "input": "how to load commits in order python from gitlog",
        "output": "",
        "rule": [
            "d16678"
        ]
    },
    {
        "instruction": "",
        "id": "q16679",
        "input": "how do i determine if two strings are equal in python",
        "output": "",
        "rule": [
            "d16679"
        ]
    },
    {
        "instruction": "",
        "id": "q16680",
        "input": "how to delete an entry in a python dictionary",
        "output": "",
        "rule": [
            "d16680"
        ]
    },
    {
        "instruction": "",
        "id": "q16681",
        "input": "local variables with underscore python",
        "output": "",
        "rule": [
            "d16681"
        ]
    },
    {
        "instruction": "",
        "id": "q16682",
        "input": "wordnet synsets implementation in python",
        "output": "",
        "rule": [
            "d16682"
        ]
    },
    {
        "instruction": "",
        "id": "q16683",
        "input": "how to conveert data type of a column using python",
        "output": "",
        "rule": [
            "d16683"
        ]
    },
    {
        "instruction": "",
        "id": "q16684",
        "input": "python join list to string comma separated",
        "output": "",
        "rule": [
            "d16684"
        ]
    },
    {
        "instruction": "",
        "id": "q16685",
        "input": "inner product of vectors in python",
        "output": "",
        "rule": [
            "d16685"
        ]
    },
    {
        "instruction": "",
        "id": "q16686",
        "input": "python lambda parsing arg",
        "output": "",
        "rule": [
            "d16686"
        ]
    },
    {
        "instruction": "",
        "id": "q16687",
        "input": "check all letters in a string in python",
        "output": "",
        "rule": [
            "d16687"
        ]
    },
    {
        "instruction": "",
        "id": "q16688",
        "input": "how to move curser using pywin32 in python code",
        "output": "",
        "rule": [
            "d16688"
        ]
    },
    {
        "instruction": "",
        "id": "q16689",
        "input": "python string deciaml to int",
        "output": "",
        "rule": [
            "d16689"
        ]
    },
    {
        "instruction": "",
        "id": "q16690",
        "input": "python how to invert a dictionary",
        "output": "",
        "rule": [
            "d16690"
        ]
    },
    {
        "instruction": "",
        "id": "q16691",
        "input": "python 3 none compare with int",
        "output": "",
        "rule": [
            "d16691"
        ]
    },
    {
        "instruction": "",
        "id": "q16692",
        "input": "python code to print out index of largest element in numpy array",
        "output": "",
        "rule": [
            "d16692"
        ]
    },
    {
        "instruction": "",
        "id": "q16693",
        "input": "length of a vector (1,1) in python",
        "output": "",
        "rule": [
            "d16693"
        ]
    },
    {
        "instruction": "",
        "id": "q16694",
        "input": "python string list to datetime",
        "output": "",
        "rule": [
            "d16694"
        ]
    },
    {
        "instruction": "",
        "id": "q16695",
        "input": "filter non nan numpy python",
        "output": "",
        "rule": [
            "d16695"
        ]
    },
    {
        "instruction": "",
        "id": "q16696",
        "input": "how do i ask if key exists python",
        "output": "",
        "rule": [
            "d16696"
        ]
    },
    {
        "instruction": "",
        "id": "q16697",
        "input": "how to make the secon character to capitalize in python",
        "output": "",
        "rule": [
            "d16697"
        ]
    },
    {
        "instruction": "",
        "id": "q16698",
        "input": "how to type in latex in python",
        "output": "",
        "rule": [
            "d16698"
        ]
    },
    {
        "instruction": "",
        "id": "q16699",
        "input": "check if object is empty python",
        "output": "",
        "rule": [
            "d16699"
        ]
    },
    {
        "instruction": "",
        "id": "q16700",
        "input": "python create a set containing all the unique characters in the string read from the text file",
        "output": "",
        "rule": [
            "d16700"
        ]
    },
    {
        "instruction": "",
        "id": "q16701",
        "input": "get max value from dictionary keys in python",
        "output": "",
        "rule": [
            "d16701"
        ]
    },
    {
        "instruction": "",
        "id": "q16702",
        "input": "see if 2 strings are equal python",
        "output": "",
        "rule": [
            "d16702"
        ]
    },
    {
        "instruction": "",
        "id": "q16703",
        "input": "create new dictionary from two dictionaries python",
        "output": "",
        "rule": [
            "d16703"
        ]
    },
    {
        "instruction": "",
        "id": "q16704",
        "input": "printing the month name from a month number in python",
        "output": "",
        "rule": [
            "d16704"
        ]
    },
    {
        "instruction": "",
        "id": "q16705",
        "input": "delete xml element python",
        "output": "",
        "rule": [
            "d16705"
        ]
    },
    {
        "instruction": "",
        "id": "q16706",
        "input": "python extend the same list in lower case",
        "output": "",
        "rule": [
            "d16706"
        ]
    },
    {
        "instruction": "",
        "id": "q16707",
        "input": "python 3 dictionary comprehension multiple iterators",
        "output": "",
        "rule": [
            "d16707"
        ]
    },
    {
        "instruction": "",
        "id": "q16708",
        "input": "python empty an existing data frame to keep the column names",
        "output": "",
        "rule": [
            "d16708"
        ]
    },
    {
        "instruction": "",
        "id": "q16709",
        "input": "area of a polygon in python",
        "output": "",
        "rule": [
            "d16709"
        ]
    },
    {
        "instruction": "",
        "id": "q16710",
        "input": "get name of day of week python",
        "output": "",
        "rule": [
            "d16710"
        ]
    },
    {
        "instruction": "",
        "id": "q16711",
        "input": "python list of words return a dictionary mapping each unique word to an index",
        "output": "",
        "rule": [
            "d16711"
        ]
    },
    {
        "instruction": "",
        "id": "q16712",
        "input": "accuracy and precision recall in python",
        "output": "",
        "rule": [
            "d16712"
        ]
    },
    {
        "instruction": "",
        "id": "q16713",
        "input": "list of objects, how to tell if none of them have a value python",
        "output": "",
        "rule": [
            "d16713"
        ]
    },
    {
        "instruction": "",
        "id": "q16714",
        "input": "spider python zoom out",
        "output": "",
        "rule": [
            "d16714"
        ]
    },
    {
        "instruction": "",
        "id": "q16715",
        "input": "how to write to a text file in python",
        "output": "",
        "rule": [
            "d16715"
        ]
    },
    {
        "instruction": "",
        "id": "q16716",
        "input": "how to check memory usage in python",
        "output": "",
        "rule": [
            "d16716"
        ]
    },
    {
        "instruction": "",
        "id": "q16717",
        "input": "python string replace last occurance",
        "output": "",
        "rule": [
            "d16717"
        ]
    },
    {
        "instruction": "",
        "id": "q16718",
        "input": "python matplotlib how to zoom out",
        "output": "",
        "rule": [
            "d16718"
        ]
    },
    {
        "instruction": "",
        "id": "q16719",
        "input": "python recursive print a tree networkx",
        "output": "",
        "rule": [
            "d16719"
        ]
    },
    {
        "instruction": "",
        "id": "q16720",
        "input": "python filter not none",
        "output": "",
        "rule": [
            "d16720"
        ]
    },
    {
        "instruction": "",
        "id": "q16721",
        "input": "string is camel python",
        "output": "",
        "rule": [
            "d16721"
        ]
    },
    {
        "instruction": "",
        "id": "q16722",
        "input": "python sqlalchemy different column different dtype",
        "output": "",
        "rule": [
            "d16722"
        ]
    },
    {
        "instruction": "",
        "id": "q16723",
        "input": "python get timezone info",
        "output": "",
        "rule": [
            "d16723"
        ]
    },
    {
        "instruction": "",
        "id": "q16724",
        "input": "how to pad zeros to string in python",
        "output": "",
        "rule": [
            "d16724"
        ]
    },
    {
        "instruction": "",
        "id": "q16725",
        "input": "python return most frequency of list",
        "output": "",
        "rule": [
            "d16725"
        ]
    },
    {
        "instruction": "",
        "id": "q16726",
        "input": "normalize percentage per row in python",
        "output": "",
        "rule": [
            "d16726"
        ]
    },
    {
        "instruction": "",
        "id": "q16727",
        "input": "get colunmn names in python",
        "output": "",
        "rule": [
            "d16727"
        ]
    },
    {
        "instruction": "",
        "id": "q16728",
        "input": "repeat every element of python n times",
        "output": "",
        "rule": [
            "d16728"
        ]
    },
    {
        "instruction": "",
        "id": "q16729",
        "input": "python asyncio 'bare yield'",
        "output": "",
        "rule": [
            "d16729"
        ]
    },
    {
        "instruction": "",
        "id": "q16730",
        "input": "how to keep leading zeroes in python",
        "output": "",
        "rule": [
            "d16730"
        ]
    },
    {
        "instruction": "",
        "id": "q16731",
        "input": "replace all occurences of char in a string python",
        "output": "",
        "rule": [
            "d16731"
        ]
    },
    {
        "instruction": "",
        "id": "q16732",
        "input": "how to determine what data type something is in python",
        "output": "",
        "rule": [
            "d16732"
        ]
    },
    {
        "instruction": "",
        "id": "q16733",
        "input": "python3 biopython bytes object expected",
        "output": "",
        "rule": [
            "d16733"
        ]
    },
    {
        "instruction": "",
        "id": "q16734",
        "input": "python property get with default",
        "output": "",
        "rule": [
            "d16734"
        ]
    },
    {
        "instruction": "",
        "id": "q16735",
        "input": "generate the hash values using perfect hash function in python",
        "output": "",
        "rule": [
            "d16735"
        ]
    },
    {
        "instruction": "",
        "id": "q16736",
        "input": "python largest index in array true",
        "output": "",
        "rule": [
            "d16736"
        ]
    },
    {
        "instruction": "",
        "id": "q16737",
        "input": "how to make a pie chart in python matplotlib",
        "output": "",
        "rule": [
            "d16737"
        ]
    },
    {
        "instruction": "",
        "id": "q16738",
        "input": "python turn list of str to int",
        "output": "",
        "rule": [
            "d16738"
        ]
    },
    {
        "instruction": "",
        "id": "q16739",
        "input": "python filter dictionary lambda key value",
        "output": "",
        "rule": [
            "d16739"
        ]
    },
    {
        "instruction": "",
        "id": "q16740",
        "input": "python check two file path equal",
        "output": "",
        "rule": [
            "d16740"
        ]
    },
    {
        "instruction": "",
        "id": "q16741",
        "input": "python json file reader",
        "output": "",
        "rule": [
            "d16741"
        ]
    },
    {
        "instruction": "",
        "id": "q16742",
        "input": "python downgrade got rid of spyder",
        "output": "",
        "rule": [
            "d16742"
        ]
    },
    {
        "instruction": "",
        "id": "q16743",
        "input": "how to read image in python uint8",
        "output": "",
        "rule": [
            "d16743"
        ]
    },
    {
        "instruction": "",
        "id": "q16744",
        "input": "python force stop event",
        "output": "",
        "rule": [
            "d16744"
        ]
    },
    {
        "instruction": "",
        "id": "q16745",
        "input": "python transform a vector to a tensor",
        "output": "",
        "rule": [
            "d16745"
        ]
    },
    {
        "instruction": "",
        "id": "q16746",
        "input": "get first 50 rows python",
        "output": "",
        "rule": [
            "d16746"
        ]
    },
    {
        "instruction": "",
        "id": "q16747",
        "input": "python format string for all entries in numpy array",
        "output": "",
        "rule": [
            "d16747"
        ]
    },
    {
        "instruction": "",
        "id": "q16748",
        "input": "python argparse call from function",
        "output": "",
        "rule": [
            "d16748"
        ]
    },
    {
        "instruction": "",
        "id": "q16749",
        "input": "get number of cpu cores used python 3",
        "output": "",
        "rule": [
            "d16749"
        ]
    },
    {
        "instruction": "",
        "id": "q16750",
        "input": "python pywin32 mouse events",
        "output": "",
        "rule": [
            "d16750"
        ]
    },
    {
        "instruction": "",
        "id": "q16751",
        "input": "numpy array to string with no bracket in python",
        "output": "",
        "rule": [
            "d16751"
        ]
    },
    {
        "instruction": "",
        "id": "q16752",
        "input": "make an array from iterator in python",
        "output": "",
        "rule": [
            "d16752"
        ]
    },
    {
        "instruction": "",
        "id": "q16753",
        "input": "python create new dict from two",
        "output": "",
        "rule": [
            "d16753"
        ]
    },
    {
        "instruction": "",
        "id": "q16754",
        "input": "python fetch file from s3",
        "output": "",
        "rule": [
            "d16754"
        ]
    },
    {
        "instruction": "",
        "id": "q16755",
        "input": "how to extract data from stream in python",
        "output": "",
        "rule": [
            "d16755"
        ]
    },
    {
        "instruction": "",
        "id": "q16756",
        "input": "python pysql send multiple queries",
        "output": "",
        "rule": [
            "d16756"
        ]
    },
    {
        "instruction": "",
        "id": "q16757",
        "input": "python 3 flatten list of lists with list comprehension",
        "output": "",
        "rule": [
            "d16757"
        ]
    },
    {
        "instruction": "",
        "id": "q16758",
        "input": "turn string into int in python",
        "output": "",
        "rule": [
            "d16758"
        ]
    },
    {
        "instruction": "",
        "id": "q16759",
        "input": "check if value in column is null python",
        "output": "",
        "rule": [
            "d16759"
        ]
    },
    {
        "instruction": "",
        "id": "q16760",
        "input": "python unblock lock acquire",
        "output": "",
        "rule": [
            "d16760"
        ]
    },
    {
        "instruction": "",
        "id": "q16761",
        "input": "any way to make all of the characters in a string uppercase? python",
        "output": "",
        "rule": [
            "d16761"
        ]
    },
    {
        "instruction": "",
        "id": "q16762",
        "input": "python memoryview contact buffer fragment",
        "output": "",
        "rule": [
            "d16762"
        ]
    },
    {
        "instruction": "",
        "id": "q16763",
        "input": "get minimum value of column python",
        "output": "",
        "rule": [
            "d16763"
        ]
    },
    {
        "instruction": "",
        "id": "q16764",
        "input": "how to return smallest magnitude vector in an array python",
        "output": "",
        "rule": [
            "d16764"
        ]
    },
    {
        "instruction": "",
        "id": "q16765",
        "input": "python formating the width of a column",
        "output": "",
        "rule": [
            "d16765"
        ]
    },
    {
        "instruction": "",
        "id": "q16766",
        "input": "how to tell if running 64 bit python",
        "output": "",
        "rule": [
            "d16766"
        ]
    },
    {
        "instruction": "",
        "id": "q16767",
        "input": "python key press exist",
        "output": "",
        "rule": [
            "d16767"
        ]
    },
    {
        "instruction": "",
        "id": "q16768",
        "input": "python range step of gaussian distribtuion",
        "output": "",
        "rule": [
            "d16768"
        ]
    },
    {
        "instruction": "",
        "id": "q16769",
        "input": "python tuple string element without quotation marks",
        "output": "",
        "rule": [
            "d16769"
        ]
    },
    {
        "instruction": "",
        "id": "q16770",
        "input": "how to get the year from a dat in python",
        "output": "",
        "rule": [
            "d16770"
        ]
    },
    {
        "instruction": "",
        "id": "q16771",
        "input": "python stop service windows",
        "output": "",
        "rule": [
            "d16771"
        ]
    },
    {
        "instruction": "",
        "id": "q16772",
        "input": "python translate a list of strings into int",
        "output": "",
        "rule": [
            "d16772"
        ]
    },
    {
        "instruction": "",
        "id": "q16773",
        "input": "python how to check a file for an empty line",
        "output": "",
        "rule": [
            "d16773"
        ]
    },
    {
        "instruction": "",
        "id": "q16774",
        "input": "how to obtain several matched strings from a single file in python",
        "output": "",
        "rule": [
            "d16774"
        ]
    },
    {
        "instruction": "",
        "id": "q16775",
        "input": "python check file newer than other file",
        "output": "",
        "rule": [
            "d16775"
        ]
    },
    {
        "instruction": "",
        "id": "q16776",
        "input": "substring or prefix in python",
        "output": "",
        "rule": [
            "d16776"
        ]
    },
    {
        "instruction": "",
        "id": "q16777",
        "input": "get environ varibles in python",
        "output": "",
        "rule": [
            "d16777"
        ]
    },
    {
        "instruction": "",
        "id": "q16778",
        "input": "python 3 check for keypress",
        "output": "",
        "rule": [
            "d16778"
        ]
    },
    {
        "instruction": "",
        "id": "q16779",
        "input": "python limit a string to have a max number of characters",
        "output": "",
        "rule": [
            "d16779"
        ]
    },
    {
        "instruction": "",
        "id": "q16780",
        "input": "how to select first 10 rows in python",
        "output": "",
        "rule": [
            "d16780"
        ]
    },
    {
        "instruction": "",
        "id": "q16781",
        "input": "python scaling image to zoom",
        "output": "",
        "rule": [
            "d16781"
        ]
    },
    {
        "instruction": "",
        "id": "q16782",
        "input": "instance of 'str' has no 'value' member python enum",
        "output": "",
        "rule": [
            "d16782"
        ]
    },
    {
        "instruction": "",
        "id": "q16783",
        "input": "get length of deque python",
        "output": "",
        "rule": [
            "d16783"
        ]
    },
    {
        "instruction": "",
        "id": "q16784",
        "input": "python asyncio executor example",
        "output": "",
        "rule": [
            "d16784"
        ]
    },
    {
        "instruction": "",
        "id": "q16785",
        "input": "python boolean flag true false test",
        "output": "",
        "rule": [
            "d16785"
        ]
    },
    {
        "instruction": "",
        "id": "q16786",
        "input": "get previous 24 month in python",
        "output": "",
        "rule": [
            "d16786"
        ]
    },
    {
        "instruction": "",
        "id": "q16787",
        "input": "most frequent value in a list python",
        "output": "",
        "rule": [
            "d16787"
        ]
    },
    {
        "instruction": "",
        "id": "q16788",
        "input": "cv2 resize not working python",
        "output": "",
        "rule": [
            "d16788"
        ]
    },
    {
        "instruction": "",
        "id": "q16789",
        "input": "check two strings are same in python",
        "output": "",
        "rule": [
            "d16789"
        ]
    },
    {
        "instruction": "",
        "id": "q16790",
        "input": "round to nearest provided value python",
        "output": "",
        "rule": [
            "d16790"
        ]
    },
    {
        "instruction": "",
        "id": "q16791",
        "input": "python normalize a distribution",
        "output": "",
        "rule": [
            "d16791"
        ]
    },
    {
        "instruction": "",
        "id": "q16792",
        "input": "first location of a char in a string python",
        "output": "",
        "rule": [
            "d16792"
        ]
    },
    {
        "instruction": "",
        "id": "q16793",
        "input": "how to grep a file in python",
        "output": "",
        "rule": [
            "d16793"
        ]
    },
    {
        "instruction": "",
        "id": "q16794",
        "input": "how to limit memory by python like jvm",
        "output": "",
        "rule": [
            "d16794"
        ]
    },
    {
        "instruction": "",
        "id": "q16795",
        "input": "python get last day of each month",
        "output": "",
        "rule": [
            "d16795"
        ]
    },
    {
        "instruction": "",
        "id": "q16796",
        "input": "python round number to limit",
        "output": "",
        "rule": [
            "d16796"
        ]
    },
    {
        "instruction": "",
        "id": "q16797",
        "input": "python sort key by lexigraphy",
        "output": "",
        "rule": [
            "d16797"
        ]
    },
    {
        "instruction": "",
        "id": "q16798",
        "input": "python how to evaluate if a float is null",
        "output": "",
        "rule": [
            "d16798"
        ]
    },
    {
        "instruction": "",
        "id": "q16799",
        "input": "python limit api call times",
        "output": "",
        "rule": [
            "d16799"
        ]
    },
    {
        "instruction": "",
        "id": "q16800",
        "input": "check if value is finite python",
        "output": "",
        "rule": [
            "d16800"
        ]
    },
    {
        "instruction": "",
        "id": "q16801",
        "input": "python get enum constructor from value",
        "output": "",
        "rule": [
            "d16801"
        ]
    },
    {
        "instruction": "",
        "id": "q16802",
        "input": "pythonic grep a file",
        "output": "",
        "rule": [
            "d16802"
        ]
    },
    {
        "instruction": "",
        "id": "q16803",
        "input": "how to check the datatype of the column python",
        "output": "",
        "rule": [
            "d16803"
        ]
    },
    {
        "instruction": "",
        "id": "q16804",
        "input": "python how to smooth an image skimage",
        "output": "",
        "rule": [
            "d16804"
        ]
    },
    {
        "instruction": "",
        "id": "q16805",
        "input": "python best way to see if file has changed",
        "output": "",
        "rule": [
            "d16805"
        ]
    },
    {
        "instruction": "",
        "id": "q16806",
        "input": "how to cast a tensor to float python",
        "output": "",
        "rule": [
            "d16806"
        ]
    },
    {
        "instruction": "",
        "id": "q16807",
        "input": "python numpy second largest value location",
        "output": "",
        "rule": [
            "d16807"
        ]
    },
    {
        "instruction": "",
        "id": "q16808",
        "input": "get file type from bytes python",
        "output": "",
        "rule": [
            "d16808"
        ]
    },
    {
        "instruction": "",
        "id": "q16809",
        "input": "python str number zero pad left",
        "output": "",
        "rule": [
            "d16809"
        ]
    },
    {
        "instruction": "",
        "id": "q16810",
        "input": "get the longest word using substrings from a string python",
        "output": "",
        "rule": [
            "d16810"
        ]
    },
    {
        "instruction": "",
        "id": "q16811",
        "input": "python iterator has next",
        "output": "",
        "rule": [
            "d16811"
        ]
    },
    {
        "instruction": "",
        "id": "q16812",
        "input": "python if last day of the month",
        "output": "",
        "rule": [
            "d16812"
        ]
    },
    {
        "instruction": "",
        "id": "q16813",
        "input": "how to get hostname with python",
        "output": "",
        "rule": [
            "d16813"
        ]
    },
    {
        "instruction": "",
        "id": "q16814",
        "input": "python is not negative",
        "output": "",
        "rule": [
            "d16814"
        ]
    },
    {
        "instruction": "",
        "id": "q16815",
        "input": "suppress shell output from python",
        "output": "",
        "rule": [
            "d16815"
        ]
    },
    {
        "instruction": "",
        "id": "q16816",
        "input": "python return hostname from url",
        "output": "",
        "rule": [
            "d16816"
        ]
    },
    {
        "instruction": "",
        "id": "q16817",
        "input": "does python readlines skip empty line",
        "output": "",
        "rule": [
            "d16817"
        ]
    },
    {
        "instruction": "",
        "id": "q16818",
        "input": "get the row with the max value in the series python from agg",
        "output": "",
        "rule": [
            "d16818"
        ]
    },
    {
        "instruction": "",
        "id": "q16819",
        "input": "python covert list of string to int",
        "output": "",
        "rule": [
            "d16819"
        ]
    },
    {
        "instruction": "",
        "id": "q16820",
        "input": "function name in python must be in lower case",
        "output": "",
        "rule": [
            "d16820"
        ]
    },
    {
        "instruction": "",
        "id": "q16821",
        "input": "mannually set legend python",
        "output": "",
        "rule": [
            "d16821"
        ]
    },
    {
        "instruction": "",
        "id": "q16822",
        "input": "'pythonunbuffered' is not recognized as an internal or external command",
        "output": "",
        "rule": [
            "d16822"
        ]
    },
    {
        "instruction": "",
        "id": "q16823",
        "input": "python split with wild card",
        "output": "",
        "rule": [
            "d16823"
        ]
    },
    {
        "instruction": "",
        "id": "q16824",
        "input": "how to tell that value is int or float python",
        "output": "",
        "rule": [
            "d16824"
        ]
    },
    {
        "instruction": "",
        "id": "q16825",
        "input": "how to get the first few rows in python",
        "output": "",
        "rule": [
            "d16825"
        ]
    },
    {
        "instruction": "",
        "id": "q16826",
        "input": "filter dictionary by values python",
        "output": "",
        "rule": [
            "d16826"
        ]
    },
    {
        "instruction": "",
        "id": "q16827",
        "input": "apply function over list of python strings",
        "output": "",
        "rule": [
            "d16827"
        ]
    },
    {
        "instruction": "",
        "id": "q16828",
        "input": "python list of int to space separated string",
        "output": "",
        "rule": [
            "d16828"
        ]
    },
    {
        "instruction": "",
        "id": "q16829",
        "input": "array of bytes into int python",
        "output": "",
        "rule": [
            "d16829"
        ]
    },
    {
        "instruction": "",
        "id": "q16830",
        "input": "print first 10 rows from sql dataset in python",
        "output": "",
        "rule": [
            "d16830"
        ]
    },
    {
        "instruction": "",
        "id": "q16831",
        "input": "problem in reading las file using liblas and laspy in python",
        "output": "",
        "rule": [
            "d16831"
        ]
    },
    {
        "instruction": "",
        "id": "q16832",
        "input": "python good hash function",
        "output": "",
        "rule": [
            "d16832"
        ]
    },
    {
        "instruction": "",
        "id": "q16833",
        "input": "python different behavior if python2 or 3",
        "output": "",
        "rule": [
            "d16833"
        ]
    },
    {
        "instruction": "",
        "id": "q16834",
        "input": "python reduce the number of decimals in a float",
        "output": "",
        "rule": [
            "d16834"
        ]
    },
    {
        "instruction": "",
        "id": "q16835",
        "input": "write a function that flattens lists python",
        "output": "",
        "rule": [
            "d16835"
        ]
    },
    {
        "instruction": "",
        "id": "q16836",
        "input": "remove columns from a data frame in python",
        "output": "",
        "rule": [
            "d16836"
        ]
    },
    {
        "instruction": "",
        "id": "q16837",
        "input": "python win32api move window",
        "output": "",
        "rule": [
            "d16837"
        ]
    },
    {
        "instruction": "",
        "id": "q16838",
        "input": "finding if a file has a line python",
        "output": "",
        "rule": [
            "d16838"
        ]
    },
    {
        "instruction": "",
        "id": "q16839",
        "input": "python split string with delimters into tuple",
        "output": "",
        "rule": [
            "d16839"
        ]
    },
    {
        "instruction": "",
        "id": "q16840",
        "input": "cast to bytestring python",
        "output": "",
        "rule": [
            "d16840"
        ]
    },
    {
        "instruction": "",
        "id": "q16841",
        "input": "python list filter all the empty element",
        "output": "",
        "rule": [
            "d16841"
        ]
    },
    {
        "instruction": "",
        "id": "q16842",
        "input": "python remove duplicate list not change",
        "output": "",
        "rule": [
            "d16842"
        ]
    },
    {
        "instruction": "",
        "id": "q16843",
        "input": "backslash json python string",
        "output": "",
        "rule": [
            "d16843"
        ]
    },
    {
        "instruction": "",
        "id": "q16844",
        "input": "python stop a function calling",
        "output": "",
        "rule": [
            "d16844"
        ]
    },
    {
        "instruction": "",
        "id": "q16845",
        "input": "python how to check if array row is 0",
        "output": "",
        "rule": [
            "d16845"
        ]
    },
    {
        "instruction": "",
        "id": "q16846",
        "input": "define array python dyanmic boolean values",
        "output": "",
        "rule": [
            "d16846"
        ]
    },
    {
        "instruction": "",
        "id": "q16847",
        "input": "check game won hangman python",
        "output": "",
        "rule": [
            "d16847"
        ]
    },
    {
        "instruction": "",
        "id": "q16848",
        "input": "how to iterate through files in documents in python",
        "output": "",
        "rule": [
            "d16848"
        ]
    },
    {
        "instruction": "",
        "id": "q16849",
        "input": "spell check handling in python",
        "output": "",
        "rule": [
            "d16849"
        ]
    },
    {
        "instruction": "",
        "id": "q16850",
        "input": "linear regression model in python tensorflow",
        "output": "",
        "rule": [
            "d16850"
        ]
    },
    {
        "instruction": "",
        "id": "q16851",
        "input": "python generate random binary number with certain number of bits",
        "output": "",
        "rule": [
            "d16851"
        ]
    },
    {
        "instruction": "",
        "id": "q16852",
        "input": "average multiple 2d arrays python",
        "output": "",
        "rule": [
            "d16852"
        ]
    },
    {
        "instruction": "",
        "id": "q16853",
        "input": "how to check if the process is running or not in unix using python",
        "output": "",
        "rule": [
            "d16853"
        ]
    },
    {
        "instruction": "",
        "id": "q16854",
        "input": "last item on a list in python",
        "output": "",
        "rule": [
            "d16854"
        ]
    },
    {
        "instruction": "",
        "id": "q16855",
        "input": "transfer string to int in python",
        "output": "",
        "rule": [
            "d16855"
        ]
    },
    {
        "instruction": "",
        "id": "q16856",
        "input": "cast python object to string",
        "output": "",
        "rule": [
            "d16856"
        ]
    },
    {
        "instruction": "",
        "id": "q16857",
        "input": "python3 how to tell if a set is a subset of another set",
        "output": "",
        "rule": [
            "d16857"
        ]
    },
    {
        "instruction": "",
        "id": "q16858",
        "input": "python celery dynamic rate limit",
        "output": "",
        "rule": [
            "d16858"
        ]
    },
    {
        "instruction": "",
        "id": "q16859",
        "input": "how to tell what encoding is used on a bytes object python3",
        "output": "",
        "rule": [
            "d16859"
        ]
    },
    {
        "instruction": "",
        "id": "q16860",
        "input": "python delimited string to list",
        "output": "",
        "rule": [
            "d16860"
        ]
    },
    {
        "instruction": "",
        "id": "q16861",
        "input": "concatenate list in python with no spaces",
        "output": "",
        "rule": [
            "d16861"
        ]
    },
    {
        "instruction": "",
        "id": "q16862",
        "input": "python check if float is not 0",
        "output": "",
        "rule": [
            "d16862"
        ]
    },
    {
        "instruction": "",
        "id": "q16863",
        "input": "flatten a dictionary python",
        "output": "",
        "rule": [
            "d16863"
        ]
    },
    {
        "instruction": "",
        "id": "q16864",
        "input": "python remove empty str",
        "output": "",
        "rule": [
            "d16864"
        ]
    },
    {
        "instruction": "",
        "id": "q16865",
        "input": "truncate floats to no decimals python",
        "output": "",
        "rule": [
            "d16865"
        ]
    },
    {
        "instruction": "",
        "id": "q16866",
        "input": "python add a number to a metric",
        "output": "",
        "rule": [
            "d16866"
        ]
    },
    {
        "instruction": "",
        "id": "q16867",
        "input": "how to check if a file is empty or not in python",
        "output": "",
        "rule": [
            "d16867"
        ]
    },
    {
        "instruction": "",
        "id": "q16868",
        "input": "python check name for illegal characters",
        "output": "",
        "rule": [
            "d16868"
        ]
    },
    {
        "instruction": "",
        "id": "q16869",
        "input": "python list comprehension flatten list",
        "output": "",
        "rule": [
            "d16869"
        ]
    },
    {
        "instruction": "",
        "id": "q16870",
        "input": "python async method \"self is not defined\"",
        "output": "",
        "rule": [
            "d16870"
        ]
    },
    {
        "instruction": "",
        "id": "q16871",
        "input": "python check if file update to date",
        "output": "",
        "rule": [
            "d16871"
        ]
    },
    {
        "instruction": "",
        "id": "q16872",
        "input": "python read whitespace until first non empty line",
        "output": "",
        "rule": [
            "d16872"
        ]
    },
    {
        "instruction": "",
        "id": "q16873",
        "input": "python datetime get last day in a month",
        "output": "",
        "rule": [
            "d16873"
        ]
    },
    {
        "instruction": "",
        "id": "q16874",
        "input": "python matrix multiplication symbol",
        "output": "",
        "rule": [
            "d16874"
        ]
    },
    {
        "instruction": "",
        "id": "q16875",
        "input": "python check if file is not empty",
        "output": "",
        "rule": [
            "d16875"
        ]
    },
    {
        "instruction": "",
        "id": "q16876",
        "input": "determine string encoding python 2",
        "output": "",
        "rule": [
            "d16876"
        ]
    },
    {
        "instruction": "",
        "id": "q16877",
        "input": "python parsing wordnet synsets",
        "output": "",
        "rule": [
            "d16877"
        ]
    },
    {
        "instruction": "",
        "id": "q16878",
        "input": "python read file ofset",
        "output": "",
        "rule": [
            "d16878"
        ]
    },
    {
        "instruction": "",
        "id": "q16879",
        "input": "python csv replacing nulls with empty string",
        "output": "",
        "rule": [
            "d16879"
        ]
    },
    {
        "instruction": "",
        "id": "q16880",
        "input": "commands to detect if a key is being pressed in python 3",
        "output": "",
        "rule": [
            "d16880"
        ]
    },
    {
        "instruction": "",
        "id": "q16881",
        "input": "filter empty string python",
        "output": "",
        "rule": [
            "d16881"
        ]
    },
    {
        "instruction": "",
        "id": "q16882",
        "input": "python 3 get list of windows drives",
        "output": "",
        "rule": [
            "d16882"
        ]
    },
    {
        "instruction": "",
        "id": "q16883",
        "input": "area of a polygon python",
        "output": "",
        "rule": [
            "d16883"
        ]
    },
    {
        "instruction": "",
        "id": "q16884",
        "input": "how to implement rate limit python",
        "output": "",
        "rule": [
            "d16884"
        ]
    },
    {
        "instruction": "",
        "id": "q16885",
        "input": "bytes to an array of int python",
        "output": "",
        "rule": [
            "d16885"
        ]
    },
    {
        "instruction": "",
        "id": "q16886",
        "input": "minimum value location python",
        "output": "",
        "rule": [
            "d16886"
        ]
    },
    {
        "instruction": "",
        "id": "q16887",
        "input": "how to rotate list in python",
        "output": "",
        "rule": [
            "d16887"
        ]
    },
    {
        "instruction": "",
        "id": "q16888",
        "input": "python 3 shortcut if",
        "output": "",
        "rule": [
            "d16888"
        ]
    },
    {
        "instruction": "",
        "id": "q16889",
        "input": "is it a float or an integer python",
        "output": "",
        "rule": [
            "d16889"
        ]
    },
    {
        "instruction": "",
        "id": "q16890",
        "input": "python how to split sentence by multiple delimiters",
        "output": "",
        "rule": [
            "d16890"
        ]
    },
    {
        "instruction": "",
        "id": "q16891",
        "input": "python filter non empty from list",
        "output": "",
        "rule": [
            "d16891"
        ]
    },
    {
        "instruction": "",
        "id": "q16892",
        "input": "changing dtype in python to int",
        "output": "",
        "rule": [
            "d16892"
        ]
    },
    {
        "instruction": "",
        "id": "q16893",
        "input": "python asyncio behave different in linux window",
        "output": "",
        "rule": [
            "d16893"
        ]
    },
    {
        "instruction": "",
        "id": "q16894",
        "input": "how to index with duplicate indexs python",
        "output": "",
        "rule": [
            "d16894"
        ]
    },
    {
        "instruction": "",
        "id": "q16895",
        "input": "python check if input in correct date format",
        "output": "",
        "rule": [
            "d16895"
        ]
    },
    {
        "instruction": "",
        "id": "q16896",
        "input": "python dialog choose directory",
        "output": "",
        "rule": [
            "d16896"
        ]
    },
    {
        "instruction": "",
        "id": "q16897",
        "input": "how to print timezone in python3",
        "output": "",
        "rule": [
            "d16897"
        ]
    },
    {
        "instruction": "",
        "id": "q16898",
        "input": "python binary data in 'decimal from signed 2's complement'",
        "output": "",
        "rule": [
            "d16898"
        ]
    },
    {
        "instruction": "",
        "id": "q16899",
        "input": "running shell command from a container in python",
        "output": "",
        "rule": [
            "d16899"
        ]
    },
    {
        "instruction": "",
        "id": "q16900",
        "input": "python using underscore as variable",
        "output": "",
        "rule": [
            "d16900"
        ]
    },
    {
        "instruction": "",
        "id": "q16901",
        "input": "python detect memory usage in subprocess",
        "output": "",
        "rule": [
            "d16901"
        ]
    },
    {
        "instruction": "",
        "id": "q16902",
        "input": "list of list in python access last eleemnt of each list",
        "output": "",
        "rule": [
            "d16902"
        ]
    },
    {
        "instruction": "",
        "id": "q16903",
        "input": "how to check if input is a natural number in python",
        "output": "",
        "rule": [
            "d16903"
        ]
    },
    {
        "instruction": "",
        "id": "q16904",
        "input": "python check if config file exists",
        "output": "",
        "rule": [
            "d16904"
        ]
    },
    {
        "instruction": "",
        "id": "q16905",
        "input": "python how large can an object be",
        "output": "",
        "rule": [
            "d16905"
        ]
    },
    {
        "instruction": "",
        "id": "q16906",
        "input": "python lock requests hang",
        "output": "",
        "rule": [
            "d16906"
        ]
    },
    {
        "instruction": "",
        "id": "q16907",
        "input": "delete an element from a set python",
        "output": "",
        "rule": [
            "d16907"
        ]
    },
    {
        "instruction": "",
        "id": "q16908",
        "input": "how to move grid to back of plot python",
        "output": "",
        "rule": [
            "d16908"
        ]
    },
    {
        "instruction": "",
        "id": "q16909",
        "input": "python last day of a month",
        "output": "",
        "rule": [
            "d16909"
        ]
    },
    {
        "instruction": "",
        "id": "q16910",
        "input": "python code to check duplicates in a list",
        "output": "",
        "rule": [
            "d16910"
        ]
    },
    {
        "instruction": "",
        "id": "q16911",
        "input": "python kivy set conditions on button background color",
        "output": "",
        "rule": [
            "d16911"
        ]
    },
    {
        "instruction": "",
        "id": "q16912",
        "input": "can you set a range on the sort function in python",
        "output": "",
        "rule": [
            "d16912"
        ]
    },
    {
        "instruction": "",
        "id": "q16913",
        "input": "python how to read csv into numpy array",
        "output": "",
        "rule": [
            "d16913"
        ]
    },
    {
        "instruction": "",
        "id": "q16914",
        "input": "how to delete an item from a set python",
        "output": "",
        "rule": [
            "d16914"
        ]
    },
    {
        "instruction": "",
        "id": "q16915",
        "input": "invertable hash function python",
        "output": "",
        "rule": [
            "d16915"
        ]
    },
    {
        "instruction": "",
        "id": "q16916",
        "input": "get the index of no zero entry in array python",
        "output": "",
        "rule": [
            "d16916"
        ]
    },
    {
        "instruction": "",
        "id": "q16917",
        "input": "python open file and skip to next line",
        "output": "",
        "rule": [
            "d16917"
        ]
    },
    {
        "instruction": "",
        "id": "q16918",
        "input": "python return all column names",
        "output": "",
        "rule": [
            "d16918"
        ]
    },
    {
        "instruction": "",
        "id": "q16919",
        "input": "python filter empty strings",
        "output": "",
        "rule": [
            "d16919"
        ]
    },
    {
        "instruction": "",
        "id": "q16920",
        "input": "check if value is number or string with number python",
        "output": "",
        "rule": [
            "d16920"
        ]
    },
    {
        "instruction": "",
        "id": "q16921",
        "input": "if string contains whitespace python",
        "output": "",
        "rule": [
            "d16921"
        ]
    },
    {
        "instruction": "",
        "id": "q16922",
        "input": "python filter nan from array",
        "output": "",
        "rule": [
            "d16922"
        ]
    },
    {
        "instruction": "",
        "id": "q16923",
        "input": "limit function python as close as 100",
        "output": "",
        "rule": [
            "d16923"
        ]
    },
    {
        "instruction": "",
        "id": "q16924",
        "input": "python dic minus value all",
        "output": "",
        "rule": [
            "d16924"
        ]
    },
    {
        "instruction": "",
        "id": "q16925",
        "input": "python3 pylint pylintrc path",
        "output": "",
        "rule": [
            "d16925"
        ]
    },
    {
        "instruction": "",
        "id": "q16926",
        "input": "passing variables to a print function in python",
        "output": "",
        "rule": [
            "d16926"
        ]
    },
    {
        "instruction": "",
        "id": "q16927",
        "input": "python readline skip blank lines",
        "output": "",
        "rule": [
            "d16927"
        ]
    },
    {
        "instruction": "",
        "id": "q16928",
        "input": "python to get hostname",
        "output": "",
        "rule": [
            "d16928"
        ]
    },
    {
        "instruction": "",
        "id": "q16929",
        "input": "how to check python versio",
        "output": "",
        "rule": [
            "d16929"
        ]
    },
    {
        "instruction": "",
        "id": "q16930",
        "input": "how to get memory used or time to run code in python",
        "output": "",
        "rule": [
            "d16930"
        ]
    },
    {
        "instruction": "",
        "id": "q16931",
        "input": "how to check for whitespace string in python",
        "output": "",
        "rule": [
            "d16931"
        ]
    },
    {
        "instruction": "",
        "id": "q16932",
        "input": "remove xml element tree python",
        "output": "",
        "rule": [
            "d16932"
        ]
    },
    {
        "instruction": "",
        "id": "q16933",
        "input": "how to get cursor position in python on mac os x",
        "output": "",
        "rule": [
            "d16933"
        ]
    },
    {
        "instruction": "",
        "id": "q16934",
        "input": "hoe to get a matching pattern in a file in python",
        "output": "",
        "rule": [
            "d16934"
        ]
    },
    {
        "instruction": "",
        "id": "q16935",
        "input": "tokenizing a column python",
        "output": "",
        "rule": [
            "d16935"
        ]
    },
    {
        "instruction": "",
        "id": "q16936",
        "input": "python check if file modified in last minute",
        "output": "",
        "rule": [
            "d16936"
        ]
    },
    {
        "instruction": "",
        "id": "q16937",
        "input": "how to return half of a string in python",
        "output": "",
        "rule": [
            "d16937"
        ]
    },
    {
        "instruction": "",
        "id": "q16938",
        "input": "python opencv check number of channels in mat",
        "output": "",
        "rule": [
            "d16938"
        ]
    },
    {
        "instruction": "",
        "id": "q16939",
        "input": "implement exponential backoff in python 3",
        "output": "",
        "rule": [
            "d16939"
        ]
    },
    {
        "instruction": "",
        "id": "q16940",
        "input": "how can i determine the encoding of bytes python3",
        "output": "",
        "rule": [
            "d16940"
        ]
    },
    {
        "instruction": "",
        "id": "q16941",
        "input": "python check if path is absolute path or relative path",
        "output": "",
        "rule": [
            "d16941"
        ]
    },
    {
        "instruction": "",
        "id": "q16942",
        "input": "how to combine asyncio python synchronize",
        "output": "",
        "rule": [
            "d16942"
        ]
    },
    {
        "instruction": "",
        "id": "q16943",
        "input": "python how to tell if there is at least one alpha character in a string",
        "output": "",
        "rule": [
            "d16943"
        ]
    },
    {
        "instruction": "",
        "id": "q16944",
        "input": "reversing key value into new dict python",
        "output": "",
        "rule": [
            "d16944"
        ]
    },
    {
        "instruction": "",
        "id": "q16945",
        "input": "python check if lists has same length",
        "output": "",
        "rule": [
            "d16945"
        ]
    },
    {
        "instruction": "",
        "id": "q16946",
        "input": "is python integer or float",
        "output": "",
        "rule": [
            "d16946"
        ]
    },
    {
        "instruction": "",
        "id": "q16947",
        "input": "bitwise operations not working in python",
        "output": "",
        "rule": [
            "d16947"
        ]
    },
    {
        "instruction": "",
        "id": "q16948",
        "input": "python fill zeroes in front of string",
        "output": "",
        "rule": [
            "d16948"
        ]
    },
    {
        "instruction": "",
        "id": "q16949",
        "input": "python determine dtype of object",
        "output": "",
        "rule": [
            "d16949"
        ]
    },
    {
        "instruction": "",
        "id": "q16950",
        "input": "method to check for any whitespace in python",
        "output": "",
        "rule": [
            "d16950"
        ]
    },
    {
        "instruction": "",
        "id": "q16951",
        "input": "list rotate function in python",
        "output": "",
        "rule": [
            "d16951"
        ]
    },
    {
        "instruction": "",
        "id": "q16952",
        "input": "recongnizing words in a sentence in python",
        "output": "",
        "rule": [
            "d16952"
        ]
    },
    {
        "instruction": "",
        "id": "q16953",
        "input": "python test if key exists in jso",
        "output": "",
        "rule": [
            "d16953"
        ]
    },
    {
        "instruction": "",
        "id": "q16954",
        "input": "python get last modified date of file http header lines",
        "output": "",
        "rule": [
            "d16954"
        ]
    },
    {
        "instruction": "",
        "id": "q16955",
        "input": "how to print out cache in python",
        "output": "",
        "rule": [
            "d16955"
        ]
    },
    {
        "instruction": "",
        "id": "q16956",
        "input": "python print list %s only certain length",
        "output": "",
        "rule": [
            "d16956"
        ]
    },
    {
        "instruction": "",
        "id": "q16957",
        "input": "creating a tree diagram in python",
        "output": "",
        "rule": [
            "d16957"
        ]
    },
    {
        "instruction": "",
        "id": "q16958",
        "input": "python concatenate np arrays",
        "output": "",
        "rule": [
            "d16958"
        ]
    },
    {
        "instruction": "",
        "id": "q16959",
        "input": "get 3 separate values froma tuple python",
        "output": "",
        "rule": [
            "d16959"
        ]
    },
    {
        "instruction": "",
        "id": "q16960",
        "input": "python 3 cast string to date",
        "output": "",
        "rule": [
            "d16960"
        ]
    },
    {
        "instruction": "",
        "id": "q16961",
        "input": "change a python value to uppercase",
        "output": "",
        "rule": [
            "d16961"
        ]
    },
    {
        "instruction": "",
        "id": "q16962",
        "input": "count function in python for list",
        "output": "",
        "rule": [
            "d16962"
        ]
    },
    {
        "instruction": "",
        "id": "q16963",
        "input": "strings inside lists inside a dictionary python",
        "output": "",
        "rule": [
            "d16963"
        ]
    },
    {
        "instruction": "",
        "id": "q16964",
        "input": "sort the given list without using sort function in python",
        "output": "",
        "rule": [
            "d16964"
        ]
    },
    {
        "instruction": "",
        "id": "q16965",
        "input": "python return the index of the minimum",
        "output": "",
        "rule": [
            "d16965"
        ]
    },
    {
        "instruction": "",
        "id": "q16966",
        "input": "how to create acronyms with removed words using python",
        "output": "",
        "rule": [
            "d16966"
        ]
    },
    {
        "instruction": "",
        "id": "q16967",
        "input": "python check list is sequential",
        "output": "",
        "rule": [
            "d16967"
        ]
    },
    {
        "instruction": "",
        "id": "q16968",
        "input": "nodejs equivalent of lock python",
        "output": "",
        "rule": [
            "d16968"
        ]
    },
    {
        "instruction": "",
        "id": "q16969",
        "input": "python filter value dict",
        "output": "",
        "rule": [
            "d16969"
        ]
    },
    {
        "instruction": "",
        "id": "q16970",
        "input": "numbers in a list to string python",
        "output": "",
        "rule": [
            "d16970"
        ]
    },
    {
        "instruction": "",
        "id": "q16971",
        "input": "is there a equivalent of a margin command in python",
        "output": "",
        "rule": [
            "d16971"
        ]
    },
    {
        "instruction": "",
        "id": "q16972",
        "input": "python get last of previous month",
        "output": "",
        "rule": [
            "d16972"
        ]
    },
    {
        "instruction": "",
        "id": "q16973",
        "input": "split a particular sentence in a list with a delimiter in python",
        "output": "",
        "rule": [
            "d16973"
        ]
    },
    {
        "instruction": "",
        "id": "q16974",
        "input": "python how to inverse a dictionary",
        "output": "",
        "rule": [
            "d16974"
        ]
    },
    {
        "instruction": "",
        "id": "q16975",
        "input": "iterable items from dict python",
        "output": "",
        "rule": [
            "d16975"
        ]
    },
    {
        "instruction": "",
        "id": "q16976",
        "input": "finding 2 closest items in 2 lists in python",
        "output": "",
        "rule": [
            "d16976"
        ]
    },
    {
        "instruction": "",
        "id": "q16977",
        "input": "check python flask running on server",
        "output": "",
        "rule": [
            "d16977"
        ]
    },
    {
        "instruction": "",
        "id": "q16978",
        "input": "how to fill an array with str in python",
        "output": "",
        "rule": [
            "d16978"
        ]
    },
    {
        "instruction": "",
        "id": "q16979",
        "input": "python detect if int",
        "output": "",
        "rule": [
            "d16979"
        ]
    },
    {
        "instruction": "",
        "id": "q16980",
        "input": "how to track ram usage in python",
        "output": "",
        "rule": [
            "d16980"
        ]
    },
    {
        "instruction": "",
        "id": "q16981",
        "input": "how to get string positions in python 3",
        "output": "",
        "rule": [
            "d16981"
        ]
    },
    {
        "instruction": "",
        "id": "q16982",
        "input": "how to change color of highlight variable in python",
        "output": "",
        "rule": [
            "d16982"
        ]
    },
    {
        "instruction": "",
        "id": "q16983",
        "input": "get the parent node of a node using python",
        "output": "",
        "rule": [
            "d16983"
        ]
    },
    {
        "instruction": "",
        "id": "q16984",
        "input": "python how to repeat a list a set amount of times",
        "output": "",
        "rule": [
            "d16984"
        ]
    },
    {
        "instruction": "",
        "id": "q16985",
        "input": "excel numeric dates to python timestamp",
        "output": "",
        "rule": [
            "d16985"
        ]
    },
    {
        "instruction": "",
        "id": "q16986",
        "input": "invalid callable given python",
        "output": "",
        "rule": [
            "d16986"
        ]
    },
    {
        "instruction": "",
        "id": "q16987",
        "input": "how efficient are python bitmasks",
        "output": "",
        "rule": [
            "d16987"
        ]
    },
    {
        "instruction": "",
        "id": "q16988",
        "input": "detect the last element in a python 'for' loop",
        "output": "",
        "rule": [
            "d16988"
        ]
    },
    {
        "instruction": "",
        "id": "q16989",
        "input": "long number of bits python",
        "output": "",
        "rule": [
            "d16989"
        ]
    },
    {
        "instruction": "",
        "id": "q16990",
        "input": "python datetime enter date in isoformat",
        "output": "",
        "rule": [
            "d16990"
        ]
    },
    {
        "instruction": "",
        "id": "q16991",
        "input": "how to print each item in a list until a certain limit is reached python",
        "output": "",
        "rule": [
            "d16991"
        ]
    },
    {
        "instruction": "",
        "id": "q16992",
        "input": "python get last months business day end",
        "output": "",
        "rule": [
            "d16992"
        ]
    },
    {
        "instruction": "",
        "id": "q16993",
        "input": "python truncate to number of decimals",
        "output": "",
        "rule": [
            "d16993"
        ]
    },
    {
        "instruction": "",
        "id": "q16994",
        "input": "python time a func timeit",
        "output": "",
        "rule": [
            "d16994"
        ]
    },
    {
        "instruction": "",
        "id": "q16995",
        "input": "python check the data type of a column",
        "output": "",
        "rule": [
            "d16995"
        ]
    },
    {
        "instruction": "",
        "id": "q16996",
        "input": "boto3 delete all item in table python",
        "output": "",
        "rule": [
            "d16996"
        ]
    },
    {
        "instruction": "",
        "id": "q16997",
        "input": "how to do capitalize strings in python",
        "output": "",
        "rule": [
            "d16997"
        ]
    },
    {
        "instruction": "",
        "id": "q16998",
        "input": "python from list make a string with separator",
        "output": "",
        "rule": [
            "d16998"
        ]
    },
    {
        "instruction": "",
        "id": "q16999",
        "input": "speicify directory for output file python",
        "output": "",
        "rule": [
            "d16999"
        ]
    },
    {
        "instruction": "",
        "id": "q17000",
        "input": "python check bytesio is empty",
        "output": "",
        "rule": [
            "d17000"
        ]
    },
    {
        "instruction": "",
        "id": "q17001",
        "input": "python3 str to byte string",
        "output": "",
        "rule": [
            "d17001"
        ]
    },
    {
        "instruction": "",
        "id": "q17002",
        "input": "how to check if a token is in a list python",
        "output": "",
        "rule": [
            "d17002"
        ]
    },
    {
        "instruction": "",
        "id": "q17003",
        "input": "extrac t model number from a string python",
        "output": "",
        "rule": [
            "d17003"
        ]
    },
    {
        "instruction": "",
        "id": "q17004",
        "input": "how to get columns for table in python",
        "output": "",
        "rule": [
            "d17004"
        ]
    },
    {
        "instruction": "",
        "id": "q17005",
        "input": "make variable all uppercase in python",
        "output": "",
        "rule": [
            "d17005"
        ]
    },
    {
        "instruction": "",
        "id": "q17006",
        "input": "check if line is not in text file in python",
        "output": "",
        "rule": [
            "d17006"
        ]
    },
    {
        "instruction": "",
        "id": "q17007",
        "input": "bin width in histogram python",
        "output": "",
        "rule": [
            "d17007"
        ]
    },
    {
        "instruction": "",
        "id": "q17008",
        "input": "python sqlalchemy column enum",
        "output": "",
        "rule": [
            "d17008"
        ]
    },
    {
        "instruction": "",
        "id": "q17009",
        "input": "python filter dictionary and output subset",
        "output": "",
        "rule": [
            "d17009"
        ]
    },
    {
        "instruction": "",
        "id": "q17010",
        "input": "how to return 10 most frequent occurances in a list with python",
        "output": "",
        "rule": [
            "d17010"
        ]
    },
    {
        "instruction": "",
        "id": "q17011",
        "input": "python best way to compare attributes of an object to other objects",
        "output": "",
        "rule": [
            "d17011"
        ]
    },
    {
        "instruction": "",
        "id": "q17012",
        "input": "python split on spaces but also tokenize punctuation",
        "output": "",
        "rule": [
            "d17012"
        ]
    },
    {
        "instruction": "",
        "id": "q17013",
        "input": "change dtype to int in python",
        "output": "",
        "rule": [
            "d17013"
        ]
    },
    {
        "instruction": "",
        "id": "q17014",
        "input": "python conver a string to a tup",
        "output": "",
        "rule": [
            "d17014"
        ]
    },
    {
        "instruction": "",
        "id": "q17015",
        "input": "python does read or readline return an empty string",
        "output": "",
        "rule": [
            "d17015"
        ]
    },
    {
        "instruction": "",
        "id": "q17016",
        "input": "python list of string to one string comma delimitted",
        "output": "",
        "rule": [
            "d17016"
        ]
    },
    {
        "instruction": "",
        "id": "q17017",
        "input": "python sqlalchemy execute store procedure",
        "output": "",
        "rule": [
            "d17017"
        ]
    },
    {
        "instruction": "",
        "id": "q17018",
        "input": "place the cursor on the next line after print python",
        "output": "",
        "rule": [
            "d17018"
        ]
    },
    {
        "instruction": "",
        "id": "q17019",
        "input": "python if key exist complexity",
        "output": "",
        "rule": [
            "d17019"
        ]
    },
    {
        "instruction": "",
        "id": "q17020",
        "input": "python 3 codecs decode",
        "output": "",
        "rule": [
            "d17020"
        ]
    },
    {
        "instruction": "",
        "id": "q17021",
        "input": "python is last day in month",
        "output": "",
        "rule": [
            "d17021"
        ]
    },
    {
        "instruction": "",
        "id": "q17022",
        "input": "python change string value in variable to lower case",
        "output": "",
        "rule": [
            "d17022"
        ]
    },
    {
        "instruction": "",
        "id": "q17023",
        "input": "how to get top 5 key values in python dictionary",
        "output": "",
        "rule": [
            "d17023"
        ]
    },
    {
        "instruction": "",
        "id": "q17024",
        "input": "how to check a variable is float in python",
        "output": "",
        "rule": [
            "d17024"
        ]
    },
    {
        "instruction": "",
        "id": "q17025",
        "input": "flatten python list of list",
        "output": "",
        "rule": [
            "d17025"
        ]
    },
    {
        "instruction": "",
        "id": "q17026",
        "input": "read python datetime from isoformat",
        "output": "",
        "rule": [
            "d17026"
        ]
    },
    {
        "instruction": "",
        "id": "q17027",
        "input": "domain specific language for python",
        "output": "",
        "rule": [
            "d17027"
        ]
    },
    {
        "instruction": "",
        "id": "q17028",
        "input": "how to return max value in column python",
        "output": "",
        "rule": [
            "d17028"
        ]
    },
    {
        "instruction": "",
        "id": "q17029",
        "input": "looking for similarity between 2 lists in python",
        "output": "",
        "rule": [
            "d17029"
        ]
    },
    {
        "instruction": "",
        "id": "q17030",
        "input": "how do do opposite mapping in python",
        "output": "",
        "rule": [
            "d17030"
        ]
    },
    {
        "instruction": "",
        "id": "q17031",
        "input": "python retry after 30 seconds",
        "output": "",
        "rule": [
            "d17031"
        ]
    },
    {
        "instruction": "",
        "id": "q17032",
        "input": "python load oracle database tabls in sql alchemy metadata",
        "output": "",
        "rule": [
            "d17032"
        ]
    },
    {
        "instruction": "",
        "id": "q17033",
        "input": "python remove all dictionary values equal to none",
        "output": "",
        "rule": [
            "d17033"
        ]
    },
    {
        "instruction": "",
        "id": "q17034",
        "input": "get datatype of columns in python",
        "output": "",
        "rule": [
            "d17034"
        ]
    },
    {
        "instruction": "",
        "id": "q17035",
        "input": "python is list or float",
        "output": "",
        "rule": [
            "d17035"
        ]
    },
    {
        "instruction": "",
        "id": "q17036",
        "input": "python flatten a dictionary of dictionaries",
        "output": "",
        "rule": [
            "d17036"
        ]
    },
    {
        "instruction": "",
        "id": "q17037",
        "input": "create enum object from value python",
        "output": "",
        "rule": [
            "d17037"
        ]
    },
    {
        "instruction": "",
        "id": "q17038",
        "input": "how to check if a matrix is hermitian python",
        "output": "",
        "rule": [
            "d17038"
        ]
    },
    {
        "instruction": "",
        "id": "q17039",
        "input": "python xml elementtree remove node",
        "output": "",
        "rule": [
            "d17039"
        ]
    },
    {
        "instruction": "",
        "id": "q17040",
        "input": "normal distribution with n samples python",
        "output": "",
        "rule": [
            "d17040"
        ]
    },
    {
        "instruction": "",
        "id": "q17041",
        "input": "how to quickly ad hash to python",
        "output": "",
        "rule": [
            "d17041"
        ]
    },
    {
        "instruction": "",
        "id": "q17042",
        "input": "reading a file into a set python",
        "output": "",
        "rule": [
            "d17042"
        ]
    },
    {
        "instruction": "",
        "id": "q17043",
        "input": "pass function variable in timeit python",
        "output": "",
        "rule": [
            "d17043"
        ]
    },
    {
        "instruction": "",
        "id": "q17044",
        "input": "convrt dtypes to int in python",
        "output": "",
        "rule": [
            "d17044"
        ]
    },
    {
        "instruction": "",
        "id": "q17045",
        "input": "python null value dictionary",
        "output": "",
        "rule": [
            "d17045"
        ]
    },
    {
        "instruction": "",
        "id": "q17046",
        "input": "how to remove columns from python data frame",
        "output": "",
        "rule": [
            "d17046"
        ]
    },
    {
        "instruction": "",
        "id": "q17047",
        "input": "update stale python 3 bytecode",
        "output": "",
        "rule": [
            "d17047"
        ]
    },
    {
        "instruction": "",
        "id": "q17048",
        "input": "finding all non alphanumeric characters in a string python",
        "output": "",
        "rule": [
            "d17048"
        ]
    },
    {
        "instruction": "",
        "id": "q17049",
        "input": "python read lines from file until next blank line",
        "output": "",
        "rule": [
            "d17049"
        ]
    },
    {
        "instruction": "",
        "id": "q17050",
        "input": "python check if path is valid",
        "output": "",
        "rule": [
            "d17050"
        ]
    },
    {
        "instruction": "",
        "id": "q17051",
        "input": "python pass argparse to main",
        "output": "",
        "rule": [
            "d17051"
        ]
    },
    {
        "instruction": "",
        "id": "q17052",
        "input": "setting bit fields with python",
        "output": "",
        "rule": [
            "d17052"
        ]
    },
    {
        "instruction": "",
        "id": "q17053",
        "input": "python if string matches return next lines",
        "output": "",
        "rule": [
            "d17053"
        ]
    },
    {
        "instruction": "",
        "id": "q17054",
        "input": "how to flatten a list in a list in python",
        "output": "",
        "rule": [
            "d17054"
        ]
    },
    {
        "instruction": "",
        "id": "q17055",
        "input": "python how to mark as deprecated",
        "output": "",
        "rule": [
            "d17055"
        ]
    },
    {
        "instruction": "",
        "id": "q17056",
        "input": "data type of python columns",
        "output": "",
        "rule": [
            "d17056"
        ]
    },
    {
        "instruction": "",
        "id": "q17057",
        "input": "return max length of string for list of strings python",
        "output": "",
        "rule": [
            "d17057"
        ]
    },
    {
        "instruction": "",
        "id": "q17058",
        "input": "max value in a series in python",
        "output": "",
        "rule": [
            "d17058"
        ]
    },
    {
        "instruction": "",
        "id": "q17059",
        "input": "to covert matrix to tensorflow in python",
        "output": "",
        "rule": [
            "d17059"
        ]
    },
    {
        "instruction": "",
        "id": "q17060",
        "input": "visualize dot file python",
        "output": "",
        "rule": [
            "d17060"
        ]
    },
    {
        "instruction": "",
        "id": "q17061",
        "input": "python check if a value is in an enum",
        "output": "",
        "rule": [
            "d17061"
        ]
    },
    {
        "instruction": "",
        "id": "q17062",
        "input": "how to get the last index of something python",
        "output": "",
        "rule": [
            "d17062"
        ]
    },
    {
        "instruction": "",
        "id": "q17063",
        "input": "how to manually skip a line in python",
        "output": "",
        "rule": [
            "d17063"
        ]
    },
    {
        "instruction": "",
        "id": "q17064",
        "input": "python call post api data dict data",
        "output": "",
        "rule": [
            "d17064"
        ]
    },
    {
        "instruction": "",
        "id": "q17065",
        "input": "how to go back to the previous line in python",
        "output": "",
        "rule": [
            "d17065"
        ]
    },
    {
        "instruction": "",
        "id": "q17066",
        "input": "python ndarray make zero array",
        "output": "",
        "rule": [
            "d17066"
        ]
    },
    {
        "instruction": "",
        "id": "q17067",
        "input": "python generate hash from list",
        "output": "",
        "rule": [
            "d17067"
        ]
    },
    {
        "instruction": "",
        "id": "q17068",
        "input": "array to tensor tf python",
        "output": "",
        "rule": [
            "d17068"
        ]
    },
    {
        "instruction": "",
        "id": "q17069",
        "input": "how do you check if a data frame has null values python",
        "output": "",
        "rule": [
            "d17069"
        ]
    },
    {
        "instruction": "",
        "id": "q17070",
        "input": "python main function argparse",
        "output": "",
        "rule": [
            "d17070"
        ]
    },
    {
        "instruction": "",
        "id": "q17071",
        "input": "python elementwise product vector and matrix",
        "output": "",
        "rule": [
            "d17071"
        ]
    },
    {
        "instruction": "",
        "id": "q17072",
        "input": "python split a string to a tuple",
        "output": "",
        "rule": [
            "d17072"
        ]
    },
    {
        "instruction": "",
        "id": "q17073",
        "input": "how i check dimensions image python",
        "output": "",
        "rule": [
            "d17073"
        ]
    },
    {
        "instruction": "",
        "id": "q17074",
        "input": "how to capitalize first item in list python",
        "output": "",
        "rule": [
            "d17074"
        ]
    },
    {
        "instruction": "",
        "id": "q17075",
        "input": "python how to determine file is pdf type",
        "output": "",
        "rule": [
            "d17075"
        ]
    },
    {
        "instruction": "",
        "id": "q17076",
        "input": "python change list of int to string",
        "output": "",
        "rule": [
            "d17076"
        ]
    },
    {
        "instruction": "",
        "id": "q17077",
        "input": "remove columns from df python",
        "output": "",
        "rule": [
            "d17077"
        ]
    },
    {
        "instruction": "",
        "id": "q17078",
        "input": "term frequency implementation in python",
        "output": "",
        "rule": [
            "d17078"
        ]
    },
    {
        "instruction": "",
        "id": "q17079",
        "input": "how to make a comma seprated list into a one string in python",
        "output": "",
        "rule": [
            "d17079"
        ]
    },
    {
        "instruction": "",
        "id": "q17080",
        "input": "using a for loop to evaluate the first index in a list python",
        "output": "",
        "rule": [
            "d17080"
        ]
    },
    {
        "instruction": "",
        "id": "q17081",
        "input": "how to check all items in an array python",
        "output": "",
        "rule": [
            "d17081"
        ]
    },
    {
        "instruction": "",
        "id": "q17082",
        "input": "python match single or double quoted strings",
        "output": "",
        "rule": [
            "d17082"
        ]
    },
    {
        "instruction": "",
        "id": "q17083",
        "input": "detect language to english python",
        "output": "",
        "rule": [
            "d17083"
        ]
    },
    {
        "instruction": "",
        "id": "q17084",
        "input": "python check a sting is all alpha",
        "output": "",
        "rule": [
            "d17084"
        ]
    },
    {
        "instruction": "",
        "id": "q17085",
        "input": "python get a specific format file name",
        "output": "",
        "rule": [
            "d17085"
        ]
    },
    {
        "instruction": "",
        "id": "q17086",
        "input": "python limit the execution time of the given functio",
        "output": "",
        "rule": [
            "d17086"
        ]
    },
    {
        "instruction": "",
        "id": "q17087",
        "input": "how to set conda and python path in windows",
        "output": "",
        "rule": [
            "d17087"
        ]
    },
    {
        "instruction": "",
        "id": "q17088",
        "input": "how to print something x amount of times in python on the same line",
        "output": "",
        "rule": [
            "d17088"
        ]
    },
    {
        "instruction": "",
        "id": "q17089",
        "input": "how to get accuracy percentage in python mlp",
        "output": "",
        "rule": [
            "d17089"
        ]
    },
    {
        "instruction": "",
        "id": "q17090",
        "input": "python build url with query string",
        "output": "",
        "rule": [
            "d17090"
        ]
    },
    {
        "instruction": "",
        "id": "q17091",
        "input": "how to open spyder 3 on python 3",
        "output": "",
        "rule": [
            "d17091"
        ]
    },
    {
        "instruction": "",
        "id": "q17092",
        "input": "check if 2 strings are same python",
        "output": "",
        "rule": [
            "d17092"
        ]
    },
    {
        "instruction": "",
        "id": "q17093",
        "input": "python finding the first location of a character in a string",
        "output": "",
        "rule": [
            "d17093"
        ]
    },
    {
        "instruction": "",
        "id": "q17094",
        "input": "python read csv to a numpy nd array",
        "output": "",
        "rule": [
            "d17094"
        ]
    },
    {
        "instruction": "",
        "id": "q17095",
        "input": "count occurrences in a list python",
        "output": "",
        "rule": [
            "d17095"
        ]
    },
    {
        "instruction": "",
        "id": "q17096",
        "input": "python 3 check if string is int",
        "output": "",
        "rule": [
            "d17096"
        ]
    },
    {
        "instruction": "",
        "id": "q17097",
        "input": "width of bins python histogram",
        "output": "",
        "rule": [
            "d17097"
        ]
    },
    {
        "instruction": "",
        "id": "q17098",
        "input": "10 largest values from dictionary python",
        "output": "",
        "rule": [
            "d17098"
        ]
    },
    {
        "instruction": "",
        "id": "q17099",
        "input": "python 3 create a set with size limit",
        "output": "",
        "rule": [
            "d17099"
        ]
    },
    {
        "instruction": "",
        "id": "q17100",
        "input": "cv2 python brightness hsv",
        "output": "",
        "rule": [
            "d17100"
        ]
    },
    {
        "instruction": "",
        "id": "q17101",
        "input": "python call post rest service",
        "output": "",
        "rule": [
            "d17101"
        ]
    },
    {
        "instruction": "",
        "id": "q17102",
        "input": "how to remove chinesse characters from a hypertext in a string python",
        "output": "",
        "rule": [
            "d17102"
        ]
    },
    {
        "instruction": "",
        "id": "q17103",
        "input": "python list feilds of json array]",
        "output": "",
        "rule": [
            "d17103"
        ]
    },
    {
        "instruction": "",
        "id": "q17104",
        "input": "patch a dictionary that values are method calls python",
        "output": "",
        "rule": [
            "d17104"
        ]
    },
    {
        "instruction": "",
        "id": "q17105",
        "input": "python test if file empty",
        "output": "",
        "rule": [
            "d17105"
        ]
    },
    {
        "instruction": "",
        "id": "q17106",
        "input": "python change to 64 bit",
        "output": "",
        "rule": [
            "d17106"
        ]
    },
    {
        "instruction": "",
        "id": "q17107",
        "input": "python generator' object has no attribute",
        "output": "",
        "rule": [
            "d17107"
        ]
    },
    {
        "instruction": "",
        "id": "q17108",
        "input": "python form validation numbers only",
        "output": "",
        "rule": [
            "d17108"
        ]
    },
    {
        "instruction": "",
        "id": "q17109",
        "input": "python iterating through delimited text file that has no line breaks",
        "output": "",
        "rule": [
            "d17109"
        ]
    },
    {
        "instruction": "",
        "id": "q17110",
        "input": "how to check if i have 32 or 64 bit python",
        "output": "",
        "rule": [
            "d17110"
        ]
    },
    {
        "instruction": "",
        "id": "q17111",
        "input": "python2 string to byte array",
        "output": "",
        "rule": [
            "d17111"
        ]
    },
    {
        "instruction": "",
        "id": "q17112",
        "input": "python skip current line",
        "output": "",
        "rule": [
            "d17112"
        ]
    },
    {
        "instruction": "",
        "id": "q17113",
        "input": "pythonconvert list of strings to int",
        "output": "",
        "rule": [
            "d17113"
        ]
    },
    {
        "instruction": "",
        "id": "q17114",
        "input": "python check if value is infinity",
        "output": "",
        "rule": [
            "d17114"
        ]
    },
    {
        "instruction": "",
        "id": "q17115",
        "input": "how to make a string of an object in python",
        "output": "",
        "rule": [
            "d17115"
        ]
    },
    {
        "instruction": "",
        "id": "q17116",
        "input": "python tensorflow read text file",
        "output": "",
        "rule": [
            "d17116"
        ]
    },
    {
        "instruction": "",
        "id": "q17117",
        "input": "hash function generates fixed length code in python",
        "output": "",
        "rule": [
            "d17117"
        ]
    },
    {
        "instruction": "",
        "id": "q17118",
        "input": "python 16bit list to bytearray",
        "output": "",
        "rule": [
            "d17118"
        ]
    },
    {
        "instruction": "",
        "id": "q17119",
        "input": "python detect keypress hardware",
        "output": "",
        "rule": [
            "d17119"
        ]
    },
    {
        "instruction": "",
        "id": "q17120",
        "input": "how to turn python list into an array",
        "output": "",
        "rule": [
            "d17120"
        ]
    },
    {
        "instruction": "",
        "id": "q17121",
        "input": "python sort the files according to the change time",
        "output": "",
        "rule": [
            "d17121"
        ]
    },
    {
        "instruction": "",
        "id": "q17122",
        "input": "to know curremt position of file cursor the function use in python",
        "output": "",
        "rule": [
            "d17122"
        ]
    },
    {
        "instruction": "",
        "id": "q17123",
        "input": "how to get pylint ot work for python 3",
        "output": "",
        "rule": [
            "d17123"
        ]
    },
    {
        "instruction": "",
        "id": "q17124",
        "input": "argparse run function python",
        "output": "",
        "rule": [
            "d17124"
        ]
    },
    {
        "instruction": "",
        "id": "q17125",
        "input": "read numpy array from csv file python",
        "output": "",
        "rule": [
            "d17125"
        ]
    },
    {
        "instruction": "",
        "id": "q17126",
        "input": "how to remove data columns in python",
        "output": "",
        "rule": [
            "d17126"
        ]
    },
    {
        "instruction": "",
        "id": "q17127",
        "input": "python check if path is directory or file",
        "output": "",
        "rule": [
            "d17127"
        ]
    },
    {
        "instruction": "",
        "id": "q17128",
        "input": "generation of random numbers with given mean, sd, min and max value python",
        "output": "",
        "rule": [
            "d17128"
        ]
    },
    {
        "instruction": "",
        "id": "q17129",
        "input": "split each sentence token and stoe in list using python",
        "output": "",
        "rule": [
            "d17129"
        ]
    },
    {
        "instruction": "",
        "id": "q17130",
        "input": "how to extract the number that appears the most frequently in a list in python",
        "output": "",
        "rule": [
            "d17130"
        ]
    },
    {
        "instruction": "",
        "id": "q17131",
        "input": "python delete glob files",
        "output": "",
        "rule": [
            "d17131"
        ]
    },
    {
        "instruction": "",
        "id": "q17132",
        "input": "how can i cast a string in int python",
        "output": "",
        "rule": [
            "d17132"
        ]
    },
    {
        "instruction": "",
        "id": "q17133",
        "input": "how to delete quotes in python so that the string will turn into a tuple",
        "output": "",
        "rule": [
            "d17133"
        ]
    },
    {
        "instruction": "",
        "id": "q17134",
        "input": "how toget all the column names in a database python",
        "output": "",
        "rule": [
            "d17134"
        ]
    },
    {
        "instruction": "",
        "id": "q17135",
        "input": "last weekday of month in python",
        "output": "",
        "rule": [
            "d17135"
        ]
    },
    {
        "instruction": "",
        "id": "q17136",
        "input": "python random number with gaussian distribution",
        "output": "",
        "rule": [
            "d17136"
        ]
    },
    {
        "instruction": "",
        "id": "q17137",
        "input": "extract first row froma table in python sql",
        "output": "",
        "rule": [
            "d17137"
        ]
    },
    {
        "instruction": "",
        "id": "q17138",
        "input": "python long tensor to float tensor",
        "output": "",
        "rule": [
            "d17138"
        ]
    },
    {
        "instruction": "",
        "id": "q17139",
        "input": "python write a list indent line",
        "output": "",
        "rule": [
            "d17139"
        ]
    },
    {
        "instruction": "",
        "id": "q17140",
        "input": "how to a truncate decimals in python",
        "output": "",
        "rule": [
            "d17140"
        ]
    },
    {
        "instruction": "",
        "id": "q17141",
        "input": "python new dictionary using old key",
        "output": "",
        "rule": [
            "d17141"
        ]
    },
    {
        "instruction": "",
        "id": "q17142",
        "input": "sort files based on modified time on python",
        "output": "",
        "rule": [
            "d17142"
        ]
    },
    {
        "instruction": "",
        "id": "q17143",
        "input": "python print tree values",
        "output": "",
        "rule": [
            "d17143"
        ]
    },
    {
        "instruction": "",
        "id": "q17144",
        "input": "max elemet in a column python",
        "output": "",
        "rule": [
            "d17144"
        ]
    },
    {
        "instruction": "",
        "id": "q17145",
        "input": "python underscore line above",
        "output": "",
        "rule": [
            "d17145"
        ]
    },
    {
        "instruction": "",
        "id": "q17146",
        "input": "python3 from str to bytes",
        "output": "",
        "rule": [
            "d17146"
        ]
    },
    {
        "instruction": "",
        "id": "q17147",
        "input": "python flask cap memory limit",
        "output": "",
        "rule": [
            "d17147"
        ]
    },
    {
        "instruction": "",
        "id": "q17148",
        "input": "substring string indices must be integers python",
        "output": "",
        "rule": [
            "d17148"
        ]
    },
    {
        "instruction": "",
        "id": "q17149",
        "input": "python test if array contains an element",
        "output": "",
        "rule": [
            "d17149"
        ]
    },
    {
        "instruction": "",
        "id": "q17150",
        "input": "python tuple dict key to nested dict",
        "output": "",
        "rule": [
            "d17150"
        ]
    },
    {
        "instruction": "",
        "id": "q17151",
        "input": "python detect alpha characters in string",
        "output": "",
        "rule": [
            "d17151"
        ]
    },
    {
        "instruction": "",
        "id": "q17152",
        "input": "how to check for invalid whitespace in python",
        "output": "",
        "rule": [
            "d17152"
        ]
    },
    {
        "instruction": "",
        "id": "q17153",
        "input": "how to generate random numbers on normal distribution with python",
        "output": "",
        "rule": [
            "d17153"
        ]
    },
    {
        "instruction": "",
        "id": "q17154",
        "input": "threading multiple asyncrous python threads in teststand",
        "output": "",
        "rule": [
            "d17154"
        ]
    },
    {
        "instruction": "",
        "id": "q17155",
        "input": "replace in for loop from a string using python",
        "output": "",
        "rule": [
            "d17155"
        ]
    },
    {
        "instruction": "",
        "id": "q17156",
        "input": "javascript equivalent of python string literal",
        "output": "",
        "rule": [
            "d17156"
        ]
    },
    {
        "instruction": "",
        "id": "q17157",
        "input": "how to get median in 2d array in python",
        "output": "",
        "rule": [
            "d17157"
        ]
    },
    {
        "instruction": "",
        "id": "q17158",
        "input": "how to add items to a set in python",
        "output": "",
        "rule": [
            "d17158"
        ]
    },
    {
        "instruction": "",
        "id": "q17159",
        "input": "compute points on a sphere python",
        "output": "",
        "rule": [
            "d17159"
        ]
    },
    {
        "instruction": "",
        "id": "q17160",
        "input": "python rate limit function",
        "output": "",
        "rule": [
            "d17160"
        ]
    },
    {
        "instruction": "",
        "id": "q17161",
        "input": "make empty array python without numpy",
        "output": "",
        "rule": [
            "d17161"
        ]
    },
    {
        "instruction": "",
        "id": "q17162",
        "input": "python check if float equals to int",
        "output": "",
        "rule": [
            "d17162"
        ]
    },
    {
        "instruction": "",
        "id": "q17163",
        "input": "how to get the number of columns in an matrix python",
        "output": "",
        "rule": [
            "d17163"
        ]
    },
    {
        "instruction": "",
        "id": "q17164",
        "input": "how to use timeit on a function in python",
        "output": "",
        "rule": [
            "d17164"
        ]
    },
    {
        "instruction": "",
        "id": "q17165",
        "input": "python bit shift on large values",
        "output": "",
        "rule": [
            "d17165"
        ]
    },
    {
        "instruction": "",
        "id": "q17166",
        "input": "python assert equals dict",
        "output": "",
        "rule": [
            "d17166"
        ]
    },
    {
        "instruction": "",
        "id": "q17167",
        "input": "untuple a tuple python",
        "output": "",
        "rule": [
            "d17167"
        ]
    },
    {
        "instruction": "",
        "id": "q17168",
        "input": "python get last index of",
        "output": "",
        "rule": [
            "d17168"
        ]
    },
    {
        "instruction": "",
        "id": "q17169",
        "input": "how to not read blank lines from file in python",
        "output": "",
        "rule": [
            "d17169"
        ]
    },
    {
        "instruction": "",
        "id": "q17170",
        "input": "python using \"0\" to quit",
        "output": "",
        "rule": [
            "d17170"
        ]
    },
    {
        "instruction": "",
        "id": "q17171",
        "input": "how to set width for cell with python openyxl",
        "output": "",
        "rule": [
            "d17171"
        ]
    },
    {
        "instruction": "",
        "id": "q17172",
        "input": "how to calculate product of two strings in python",
        "output": "",
        "rule": [
            "d17172"
        ]
    },
    {
        "instruction": "",
        "id": "q17173",
        "input": "selecting the max value in a column python",
        "output": "",
        "rule": [
            "d17173"
        ]
    },
    {
        "instruction": "",
        "id": "q17174",
        "input": "calculate mid of two points from lat long python",
        "output": "",
        "rule": [
            "d17174"
        ]
    },
    {
        "instruction": "",
        "id": "q17175",
        "input": "how to know the data type of an element in python",
        "output": "",
        "rule": [
            "d17175"
        ]
    },
    {
        "instruction": "",
        "id": "q17176",
        "input": "extract date object from a string in python",
        "output": "",
        "rule": [
            "d17176"
        ]
    },
    {
        "instruction": "",
        "id": "q17177",
        "input": "python file hash md5",
        "output": "",
        "rule": [
            "d17177"
        ]
    },
    {
        "instruction": "",
        "id": "q17178",
        "input": "python how to ndarray string to one string",
        "output": "",
        "rule": [
            "d17178"
        ]
    },
    {
        "instruction": "",
        "id": "q17179",
        "input": "python filter list not equal to space",
        "output": "",
        "rule": [
            "d17179"
        ]
    },
    {
        "instruction": "",
        "id": "q17180",
        "input": "python flask cache per request",
        "output": "",
        "rule": [
            "d17180"
        ]
    },
    {
        "instruction": "",
        "id": "q17181",
        "input": "python 3 unsignedchar 8bit data",
        "output": "",
        "rule": [
            "d17181"
        ]
    },
    {
        "instruction": "",
        "id": "q17182",
        "input": "how to make a flat list within list in python",
        "output": "",
        "rule": [
            "d17182"
        ]
    },
    {
        "instruction": "",
        "id": "q17183",
        "input": "detect string is camel python",
        "output": "",
        "rule": [
            "d17183"
        ]
    },
    {
        "instruction": "",
        "id": "q17184",
        "input": "python using the map function with a constant and a list",
        "output": "",
        "rule": [
            "d17184"
        ]
    },
    {
        "instruction": "",
        "id": "q17185",
        "input": "finding the last occurrence of a character in a string in python",
        "output": "",
        "rule": [
            "d17185"
        ]
    },
    {
        "instruction": "",
        "id": "q17186",
        "input": "iterate a specific number of times in python",
        "output": "",
        "rule": [
            "d17186"
        ]
    },
    {
        "instruction": "",
        "id": "q17187",
        "input": "python variable in a json string",
        "output": "",
        "rule": [
            "d17187"
        ]
    },
    {
        "instruction": "",
        "id": "q17188",
        "input": "python iterate list last element",
        "output": "",
        "rule": [
            "d17188"
        ]
    },
    {
        "instruction": "",
        "id": "q17189",
        "input": "how to get inverse dict in python",
        "output": "",
        "rule": [
            "d17189"
        ]
    },
    {
        "instruction": "",
        "id": "q17190",
        "input": "python this transaction is inactive",
        "output": "",
        "rule": [
            "d17190"
        ]
    },
    {
        "instruction": "",
        "id": "q17191",
        "input": "the final score for fantasy teaam based on the selected coding using python",
        "output": "",
        "rule": [
            "d17191"
        ]
    },
    {
        "instruction": "",
        "id": "q17192",
        "input": "python build a list from a string delimited by space",
        "output": "",
        "rule": [
            "d17192"
        ]
    },
    {
        "instruction": "",
        "id": "q17193",
        "input": "most frequent item in list python",
        "output": "",
        "rule": [
            "d17193"
        ]
    },
    {
        "instruction": "",
        "id": "q17194",
        "input": "strip a list of string python",
        "output": "",
        "rule": [
            "d17194"
        ]
    },
    {
        "instruction": "",
        "id": "q17195",
        "input": "python not recognizing numpy uint8 as integer",
        "output": "",
        "rule": [
            "d17195"
        ]
    },
    {
        "instruction": "",
        "id": "q17196",
        "input": "get datatypes columns python",
        "output": "",
        "rule": [
            "d17196"
        ]
    },
    {
        "instruction": "",
        "id": "q17197",
        "input": "remove a set of characters in python",
        "output": "",
        "rule": [
            "d17197"
        ]
    },
    {
        "instruction": "",
        "id": "q17198",
        "input": "python mongodb int to str",
        "output": "",
        "rule": [
            "d17198"
        ]
    },
    {
        "instruction": "",
        "id": "q17199",
        "input": "python protobuf parsefromstring get int value",
        "output": "",
        "rule": [
            "d17199"
        ]
    },
    {
        "instruction": "",
        "id": "q17200",
        "input": "sqllite python entry exist",
        "output": "",
        "rule": [
            "d17200"
        ]
    },
    {
        "instruction": "",
        "id": "q17201",
        "input": "python how to evaluate if a variable is equal to an integer",
        "output": "",
        "rule": [
            "d17201"
        ]
    },
    {
        "instruction": "",
        "id": "q17202",
        "input": "turn list of lists into one list in python",
        "output": "",
        "rule": [
            "d17202"
        ]
    },
    {
        "instruction": "",
        "id": "q17203",
        "input": "remove leading zeroes python",
        "output": "",
        "rule": [
            "d17203"
        ]
    },
    {
        "instruction": "",
        "id": "q17204",
        "input": "python ctype get cursor position",
        "output": "",
        "rule": [
            "d17204"
        ]
    },
    {
        "instruction": "",
        "id": "q17205",
        "input": "top n value in last dimension python",
        "output": "",
        "rule": [
            "d17205"
        ]
    },
    {
        "instruction": "",
        "id": "q17206",
        "input": "python camel case to snake",
        "output": "",
        "rule": [
            "d17206"
        ]
    },
    {
        "instruction": "",
        "id": "q17207",
        "input": "python how to cast a string char to an int",
        "output": "",
        "rule": [
            "d17207"
        ]
    },
    {
        "instruction": "",
        "id": "q17208",
        "input": "how to test for a key being used in python",
        "output": "",
        "rule": [
            "d17208"
        ]
    },
    {
        "instruction": "",
        "id": "q17209",
        "input": "python if element in array meets conditions",
        "output": "",
        "rule": [
            "d17209"
        ]
    },
    {
        "instruction": "",
        "id": "q17210",
        "input": "python strip if stirng is not empty",
        "output": "",
        "rule": [
            "d17210"
        ]
    },
    {
        "instruction": "",
        "id": "q17211",
        "input": "how to add an item to a set in python",
        "output": "",
        "rule": [
            "d17211"
        ]
    },
    {
        "instruction": "",
        "id": "q17212",
        "input": "retrieve s3 file from python",
        "output": "",
        "rule": [
            "d17212"
        ]
    },
    {
        "instruction": "",
        "id": "q17213",
        "input": "how to read content of text file from python",
        "output": "",
        "rule": [
            "d17213"
        ]
    },
    {
        "instruction": "",
        "id": "q17214",
        "input": "python what checks string characters for whitespaces",
        "output": "",
        "rule": [
            "d17214"
        ]
    },
    {
        "instruction": "",
        "id": "q17215",
        "input": "python get timezone in windows",
        "output": "",
        "rule": [
            "d17215"
        ]
    },
    {
        "instruction": "",
        "id": "q17216",
        "input": "remove all instance of char in string python",
        "output": "",
        "rule": [
            "d17216"
        ]
    },
    {
        "instruction": "",
        "id": "q17217",
        "input": "python check type as string",
        "output": "",
        "rule": [
            "d17217"
        ]
    },
    {
        "instruction": "",
        "id": "q17218",
        "input": "python variable limit in a function",
        "output": "",
        "rule": [
            "d17218"
        ]
    },
    {
        "instruction": "",
        "id": "q17219",
        "input": "how to check if current day is last day of month in python",
        "output": "",
        "rule": [
            "d17219"
        ]
    },
    {
        "instruction": "",
        "id": "q17220",
        "input": "testing if a matrix is an upper triangle python",
        "output": "",
        "rule": [
            "d17220"
        ]
    },
    {
        "instruction": "",
        "id": "q17221",
        "input": "two greater than signs python",
        "output": "",
        "rule": [
            "d17221"
        ]
    },
    {
        "instruction": "",
        "id": "q17222",
        "input": "how to capitalize first letter input python",
        "output": "",
        "rule": [
            "d17222"
        ]
    },
    {
        "instruction": "",
        "id": "q17223",
        "input": "how to check forfirst index python string",
        "output": "",
        "rule": [
            "d17223"
        ]
    },
    {
        "instruction": "",
        "id": "q17224",
        "input": "python substitute values in string",
        "output": "",
        "rule": [
            "d17224"
        ]
    },
    {
        "instruction": "",
        "id": "q17225",
        "input": "how to test if a string in python is all letters",
        "output": "",
        "rule": [
            "d17225"
        ]
    },
    {
        "instruction": "",
        "id": "q17226",
        "input": "check if the dirctionary is null or empty python",
        "output": "",
        "rule": [
            "d17226"
        ]
    },
    {
        "instruction": "",
        "id": "q17227",
        "input": "calling arg parse file from python",
        "output": "",
        "rule": [
            "d17227"
        ]
    },
    {
        "instruction": "",
        "id": "q17228",
        "input": "how to shuffle the items in a matrix python",
        "output": "",
        "rule": [
            "d17228"
        ]
    },
    {
        "instruction": "",
        "id": "q17229",
        "input": "remove all nan values from dictionary python",
        "output": "",
        "rule": [
            "d17229"
        ]
    },
    {
        "instruction": "",
        "id": "q17230",
        "input": "python pyobc cursor executemany",
        "output": "",
        "rule": [
            "d17230"
        ]
    },
    {
        "instruction": "",
        "id": "q17231",
        "input": "continuous normalizing with cdf with python",
        "output": "",
        "rule": [
            "d17231"
        ]
    },
    {
        "instruction": "",
        "id": "q17232",
        "input": "reduce bit depth to 8 from 24 in python",
        "output": "",
        "rule": [
            "d17232"
        ]
    },
    {
        "instruction": "",
        "id": "q17233",
        "input": "how to parse string into date python",
        "output": "",
        "rule": [
            "d17233"
        ]
    },
    {
        "instruction": "",
        "id": "q17234",
        "input": "determine if url is absolute or relative in python",
        "output": "",
        "rule": [
            "d17234"
        ]
    },
    {
        "instruction": "",
        "id": "q17235",
        "input": "python normalize sum 1",
        "output": "",
        "rule": [
            "d17235"
        ]
    },
    {
        "instruction": "",
        "id": "q17236",
        "input": "python 3 dealing with gzipped json",
        "output": "",
        "rule": [
            "d17236"
        ]
    },
    {
        "instruction": "",
        "id": "q17237",
        "input": "asyncio not working python",
        "output": "",
        "rule": [
            "d17237"
        ]
    },
    {
        "instruction": "",
        "id": "q17238",
        "input": "how to get hover position of cursor python",
        "output": "",
        "rule": [
            "d17238"
        ]
    },
    {
        "instruction": "",
        "id": "q17239",
        "input": "python3 how to read and filter lines from a file",
        "output": "",
        "rule": [
            "d17239"
        ]
    },
    {
        "instruction": "",
        "id": "q17240",
        "input": "how to skip blank lines in python",
        "output": "",
        "rule": [
            "d17240"
        ]
    },
    {
        "instruction": "",
        "id": "q17241",
        "input": "how to represent tree in python",
        "output": "",
        "rule": [
            "d17241"
        ]
    },
    {
        "instruction": "",
        "id": "q17242",
        "input": "python check if set is subset of another",
        "output": "",
        "rule": [
            "d17242"
        ]
    },
    {
        "instruction": "",
        "id": "q17243",
        "input": "python3 urllib urlparse domain",
        "output": "",
        "rule": [
            "d17243"
        ]
    },
    {
        "instruction": "",
        "id": "q17244",
        "input": "python os remove files with wildcard",
        "output": "",
        "rule": [
            "d17244"
        ]
    },
    {
        "instruction": "",
        "id": "q17245",
        "input": "how to check for real number python",
        "output": "",
        "rule": [
            "d17245"
        ]
    },
    {
        "instruction": "",
        "id": "q17246",
        "input": "python tensorflow casting int to float",
        "output": "",
        "rule": [
            "d17246"
        ]
    },
    {
        "instruction": "",
        "id": "q17247",
        "input": "round float to nearest whole python",
        "output": "",
        "rule": [
            "d17247"
        ]
    },
    {
        "instruction": "",
        "id": "q17248",
        "input": "python3 extract host from url",
        "output": "",
        "rule": [
            "d17248"
        ]
    },
    {
        "instruction": "",
        "id": "q17249",
        "input": "python count occurrences in a list",
        "output": "",
        "rule": [
            "d17249"
        ]
    },
    {
        "instruction": "",
        "id": "q17250",
        "input": "python repeat n times in list",
        "output": "",
        "rule": [
            "d17250"
        ]
    },
    {
        "instruction": "",
        "id": "q17251",
        "input": "gaussian random variable in python",
        "output": "",
        "rule": [
            "d17251"
        ]
    },
    {
        "instruction": "",
        "id": "q17252",
        "input": "how to select the top 5 in a sorted dictionary python",
        "output": "",
        "rule": [
            "d17252"
        ]
    },
    {
        "instruction": "",
        "id": "q17253",
        "input": "python flatten dict of dicts",
        "output": "",
        "rule": [
            "d17253"
        ]
    },
    {
        "instruction": "",
        "id": "q17254",
        "input": "python forcing the immediate release of memory",
        "output": "",
        "rule": [
            "d17254"
        ]
    },
    {
        "instruction": "",
        "id": "q17255",
        "input": "access files in s3 with python",
        "output": "",
        "rule": [
            "d17255"
        ]
    },
    {
        "instruction": "",
        "id": "q17256",
        "input": "conda activate \"python\" is not recognized as an internal or external",
        "output": "",
        "rule": [
            "d17256"
        ]
    },
    {
        "instruction": "",
        "id": "q17257",
        "input": "turn list of str to int python",
        "output": "",
        "rule": [
            "d17257"
        ]
    },
    {
        "instruction": "",
        "id": "q17258",
        "input": "max length limit of string python",
        "output": "",
        "rule": [
            "d17258"
        ]
    },
    {
        "instruction": "",
        "id": "q17259",
        "input": "python check if hash key exists",
        "output": "",
        "rule": [
            "d17259"
        ]
    },
    {
        "instruction": "",
        "id": "q17260",
        "input": "separate a number and units in python using regular expressions",
        "output": "",
        "rule": [
            "d17260"
        ]
    },
    {
        "instruction": "",
        "id": "q17261",
        "input": "add values to a set in python",
        "output": "",
        "rule": [
            "d17261"
        ]
    },
    {
        "instruction": "",
        "id": "q17262",
        "input": "how to change python versions in spyder",
        "output": "",
        "rule": [
            "d17262"
        ]
    },
    {
        "instruction": "",
        "id": "q17263",
        "input": "using python from conda path in windows",
        "output": "",
        "rule": [
            "d17263"
        ]
    },
    {
        "instruction": "",
        "id": "q17264",
        "input": "eliminate nan from dictionary as values python",
        "output": "",
        "rule": [
            "d17264"
        ]
    },
    {
        "instruction": "",
        "id": "q17265",
        "input": "how to write code for an rms average equation in python",
        "output": "",
        "rule": [
            "d17265"
        ]
    },
    {
        "instruction": "",
        "id": "q17266",
        "input": "does python have template literals",
        "output": "",
        "rule": [
            "d17266"
        ]
    },
    {
        "instruction": "",
        "id": "q17267",
        "input": "make a list of multiple lists into one list python3",
        "output": "",
        "rule": [
            "d17267"
        ]
    },
    {
        "instruction": "",
        "id": "q17268",
        "input": "select an copy to clipboard a column to clipboard in excel python",
        "output": "",
        "rule": [
            "d17268"
        ]
    },
    {
        "instruction": "",
        "id": "q17269",
        "input": "python set bits off",
        "output": "",
        "rule": [
            "d17269"
        ]
    },
    {
        "instruction": "",
        "id": "q17270",
        "input": "limit memory allocated python gpu",
        "output": "",
        "rule": [
            "d17270"
        ]
    },
    {
        "instruction": "",
        "id": "q17271",
        "input": "python checking if value is in enum",
        "output": "",
        "rule": [
            "d17271"
        ]
    },
    {
        "instruction": "",
        "id": "q17272",
        "input": "determine datatype of column python",
        "output": "",
        "rule": [
            "d17272"
        ]
    },
    {
        "instruction": "",
        "id": "q17273",
        "input": "add a type to the enum python",
        "output": "",
        "rule": [
            "d17273"
        ]
    },
    {
        "instruction": "",
        "id": "q17274",
        "input": "python how to replace multiple characters of a string",
        "output": "",
        "rule": [
            "d17274"
        ]
    },
    {
        "instruction": "",
        "id": "q17275",
        "input": "transfer serise string to datetime python",
        "output": "",
        "rule": [
            "d17275"
        ]
    },
    {
        "instruction": "",
        "id": "q17276",
        "input": "python user32 windll send to back window",
        "output": "",
        "rule": [
            "d17276"
        ]
    },
    {
        "instruction": "",
        "id": "q17277",
        "input": "python tensor change dtype float",
        "output": "",
        "rule": [
            "d17277"
        ]
    },
    {
        "instruction": "",
        "id": "q17278",
        "input": "spyder change from python 2 to 3",
        "output": "",
        "rule": [
            "d17278"
        ]
    },
    {
        "instruction": "",
        "id": "q17279",
        "input": "python array to tensor object",
        "output": "",
        "rule": [
            "d17279"
        ]
    },
    {
        "instruction": "",
        "id": "q17280",
        "input": "python pretty print of dict",
        "output": "",
        "rule": [
            "d17280"
        ]
    },
    {
        "instruction": "",
        "id": "q17281",
        "input": "python numpy dumps to",
        "output": "",
        "rule": [
            "d17281"
        ]
    },
    {
        "instruction": "",
        "id": "q17282",
        "input": "read byte data smbus python",
        "output": "",
        "rule": [
            "d17282"
        ]
    },
    {
        "instruction": "",
        "id": "q17283",
        "input": "print the uppercase letters in the string python",
        "output": "",
        "rule": [
            "d17283"
        ]
    },
    {
        "instruction": "",
        "id": "q17284",
        "input": "python get last of month",
        "output": "",
        "rule": [
            "d17284"
        ]
    },
    {
        "instruction": "",
        "id": "q17285",
        "input": "how to check if date format is correct python",
        "output": "",
        "rule": [
            "d17285"
        ]
    },
    {
        "instruction": "",
        "id": "q17286",
        "input": "parsing a childnode's attribute in python 3",
        "output": "",
        "rule": [
            "d17286"
        ]
    },
    {
        "instruction": "",
        "id": "q17287",
        "input": "checking the current python versipn",
        "output": "",
        "rule": [
            "d17287"
        ]
    },
    {
        "instruction": "",
        "id": "q17288",
        "input": "how to check if edge intersects in igraph python",
        "output": "",
        "rule": [
            "d17288"
        ]
    },
    {
        "instruction": "",
        "id": "q17289",
        "input": "blender python fcurves interpolation",
        "output": "",
        "rule": [
            "d17289"
        ]
    },
    {
        "instruction": "",
        "id": "q17290",
        "input": "split sentence by delimiter python",
        "output": "",
        "rule": [
            "d17290"
        ]
    },
    {
        "instruction": "",
        "id": "q17291",
        "input": "cast a list of string in integer in python",
        "output": "",
        "rule": [
            "d17291"
        ]
    },
    {
        "instruction": "",
        "id": "q17292",
        "input": "python delete all occurrences of character in string",
        "output": "",
        "rule": [
            "d17292"
        ]
    },
    {
        "instruction": "",
        "id": "q17293",
        "input": "how to make a function return a fuction in python",
        "output": "",
        "rule": [
            "d17293"
        ]
    },
    {
        "instruction": "",
        "id": "q17294",
        "input": "python get url domain",
        "output": "",
        "rule": [
            "d17294"
        ]
    },
    {
        "instruction": "",
        "id": "q17295",
        "input": "python replace nulls with string in csv",
        "output": "",
        "rule": [
            "d17295"
        ]
    },
    {
        "instruction": "",
        "id": "q17296",
        "input": "how to check memory leak in python",
        "output": "",
        "rule": [
            "d17296"
        ]
    },
    {
        "instruction": "",
        "id": "q17297",
        "input": "python limit times in a minute",
        "output": "",
        "rule": [
            "d17297"
        ]
    },
    {
        "instruction": "",
        "id": "q17298",
        "input": "read a file from s3 bucket python",
        "output": "",
        "rule": [
            "d17298"
        ]
    },
    {
        "instruction": "",
        "id": "q17299",
        "input": "how to read a text file into a set in python",
        "output": "",
        "rule": [
            "d17299"
        ]
    },
    {
        "instruction": "",
        "id": "q17300",
        "input": "python xml delete all atributes from element",
        "output": "",
        "rule": [
            "d17300"
        ]
    },
    {
        "instruction": "",
        "id": "q17301",
        "input": "python stringify list back to list",
        "output": "",
        "rule": [
            "d17301"
        ]
    },
    {
        "instruction": "",
        "id": "q17302",
        "input": "least frequent element in a list python",
        "output": "",
        "rule": [
            "d17302"
        ]
    },
    {
        "instruction": "",
        "id": "q17303",
        "input": "python 3 map to list code",
        "output": "",
        "rule": [
            "d17303"
        ]
    },
    {
        "instruction": "",
        "id": "q17304",
        "input": "how to turn a list of numbers into integers in python",
        "output": "",
        "rule": [
            "d17304"
        ]
    },
    {
        "instruction": "",
        "id": "q17305",
        "input": "python cast str into int",
        "output": "",
        "rule": [
            "d17305"
        ]
    },
    {
        "instruction": "",
        "id": "q17306",
        "input": "python validate a file path or uri",
        "output": "",
        "rule": [
            "d17306"
        ]
    },
    {
        "instruction": "",
        "id": "q17307",
        "input": "condition to see if nan in python",
        "output": "",
        "rule": [
            "d17307"
        ]
    },
    {
        "instruction": "",
        "id": "q17308",
        "input": "python pyparsing two separate parsers",
        "output": "",
        "rule": [
            "d17308"
        ]
    },
    {
        "instruction": "",
        "id": "q17309",
        "input": "return inverted dictionary in python",
        "output": "",
        "rule": [
            "d17309"
        ]
    },
    {
        "instruction": "",
        "id": "q17310",
        "input": "multiply dot product of lists python",
        "output": "",
        "rule": [
            "d17310"
        ]
    },
    {
        "instruction": "",
        "id": "q17311",
        "input": "get the text off the clipboard python",
        "output": "",
        "rule": [
            "d17311"
        ]
    },
    {
        "instruction": "",
        "id": "q17312",
        "input": "python check if a file path contains a file",
        "output": "",
        "rule": [
            "d17312"
        ]
    },
    {
        "instruction": "",
        "id": "q17313",
        "input": "dot product python using itertools",
        "output": "",
        "rule": [
            "d17313"
        ]
    },
    {
        "instruction": "",
        "id": "q17314",
        "input": "how to identify the data type in python without the built in function",
        "output": "",
        "rule": [
            "d17314"
        ]
    },
    {
        "instruction": "",
        "id": "q17315",
        "input": "python wordnet lemmatize a word",
        "output": "",
        "rule": [
            "d17315"
        ]
    },
    {
        "instruction": "",
        "id": "q17316",
        "input": "python str to date time",
        "output": "",
        "rule": [
            "d17316"
        ]
    },
    {
        "instruction": "",
        "id": "q17317",
        "input": "hex to integer converter in python",
        "output": "",
        "rule": [
            "d17317"
        ]
    },
    {
        "instruction": "",
        "id": "q17318",
        "input": "python count occurences in a list",
        "output": "",
        "rule": [
            "d17318"
        ]
    },
    {
        "instruction": "",
        "id": "q17319",
        "input": "make python string uppercase",
        "output": "",
        "rule": [
            "d17319"
        ]
    },
    {
        "instruction": "",
        "id": "q17320",
        "input": "how to change string to a date in python",
        "output": "",
        "rule": [
            "d17320"
        ]
    },
    {
        "instruction": "",
        "id": "q17321",
        "input": "python design to break into equal sizes in 26 bins",
        "output": "",
        "rule": [
            "d17321"
        ]
    },
    {
        "instruction": "",
        "id": "q17322",
        "input": "python read last lines of file",
        "output": "",
        "rule": [
            "d17322"
        ]
    },
    {
        "instruction": "",
        "id": "q17323",
        "input": "how to get the maximum value of the columns in python",
        "output": "",
        "rule": [
            "d17323"
        ]
    },
    {
        "instruction": "",
        "id": "q17324",
        "input": "python most negative number in an array",
        "output": "",
        "rule": [
            "d17324"
        ]
    },
    {
        "instruction": "",
        "id": "q17325",
        "input": "python3 check if string validte date",
        "output": "",
        "rule": [
            "d17325"
        ]
    },
    {
        "instruction": "",
        "id": "q17326",
        "input": "most frequent element in list in python",
        "output": "",
        "rule": [
            "d17326"
        ]
    },
    {
        "instruction": "",
        "id": "q17327",
        "input": "python unpack ip packets",
        "output": "",
        "rule": [
            "d17327"
        ]
    },
    {
        "instruction": "",
        "id": "q17328",
        "input": "how to rotate the elements present in the list in python",
        "output": "",
        "rule": [
            "d17328"
        ]
    },
    {
        "instruction": "",
        "id": "q17329",
        "input": "check if value in enum python",
        "output": "",
        "rule": [
            "d17329"
        ]
    },
    {
        "instruction": "",
        "id": "q17330",
        "input": "python how to connect to an established odbc connection oracle",
        "output": "",
        "rule": [
            "d17330"
        ]
    },
    {
        "instruction": "",
        "id": "q17331",
        "input": "how to create a dictonary from a list of words in python",
        "output": "",
        "rule": [
            "d17331"
        ]
    },
    {
        "instruction": "",
        "id": "q17332",
        "input": "check a path is valid or not python",
        "output": "",
        "rule": [
            "d17332"
        ]
    },
    {
        "instruction": "",
        "id": "q17333",
        "input": "how to test whether the date is valid in python",
        "output": "",
        "rule": [
            "d17333"
        ]
    },
    {
        "instruction": "",
        "id": "q17334",
        "input": "how to check whether a namespace exists or not in gae python",
        "output": "",
        "rule": [
            "d17334"
        ]
    },
    {
        "instruction": "",
        "id": "q17335",
        "input": "python create string from list without commas",
        "output": "",
        "rule": [
            "d17335"
        ]
    },
    {
        "instruction": "",
        "id": "q17336",
        "input": "python limit function time",
        "output": "",
        "rule": [
            "d17336"
        ]
    },
    {
        "instruction": "",
        "id": "q17337",
        "input": "check if a sttring has whitespaces in python",
        "output": "",
        "rule": [
            "d17337"
        ]
    },
    {
        "instruction": "",
        "id": "q17338",
        "input": "python pytorch change byte tensor to float tensor",
        "output": "",
        "rule": [
            "d17338"
        ]
    },
    {
        "instruction": "",
        "id": "q17339",
        "input": "return to exit a function python",
        "output": "",
        "rule": [
            "d17339"
        ]
    },
    {
        "instruction": "",
        "id": "q17340",
        "input": "all dtype of columns python",
        "output": "",
        "rule": [
            "d17340"
        ]
    },
    {
        "instruction": "",
        "id": "q17341",
        "input": "python get last index of char",
        "output": "",
        "rule": [
            "d17341"
        ]
    },
    {
        "instruction": "",
        "id": "q17342",
        "input": "python delete all files mathing regex",
        "output": "",
        "rule": [
            "d17342"
        ]
    },
    {
        "instruction": "",
        "id": "q17343",
        "input": "python timing the execution of a function",
        "output": "",
        "rule": [
            "d17343"
        ]
    },
    {
        "instruction": "",
        "id": "q17344",
        "input": "python check is list is sequential",
        "output": "",
        "rule": [
            "d17344"
        ]
    },
    {
        "instruction": "",
        "id": "q17345",
        "input": "check queue empty python",
        "output": "",
        "rule": [
            "d17345"
        ]
    },
    {
        "instruction": "",
        "id": "q17346",
        "input": "python check if list is empy",
        "output": "",
        "rule": [
            "d17346"
        ]
    },
    {
        "instruction": "",
        "id": "q17347",
        "input": "python dict from another python dict",
        "output": "",
        "rule": [
            "d17347"
        ]
    },
    {
        "instruction": "",
        "id": "q17348",
        "input": "how to skip the first line while looping over a file in python",
        "output": "",
        "rule": [
            "d17348"
        ]
    },
    {
        "instruction": "",
        "id": "q17349",
        "input": "giving the time a function took to execute python",
        "output": "",
        "rule": [
            "d17349"
        ]
    },
    {
        "instruction": "",
        "id": "q17350",
        "input": "removing a duplicate number in list python",
        "output": "",
        "rule": [
            "d17350"
        ]
    },
    {
        "instruction": "",
        "id": "q17351",
        "input": "python variable names starting with underscore",
        "output": "",
        "rule": [
            "d17351"
        ]
    },
    {
        "instruction": "",
        "id": "q17352",
        "input": "python loop skip the last element of a list",
        "output": "",
        "rule": [
            "d17352"
        ]
    },
    {
        "instruction": "",
        "id": "q17353",
        "input": "get timing of functions python",
        "output": "",
        "rule": [
            "d17353"
        ]
    },
    {
        "instruction": "",
        "id": "q17354",
        "input": "python get the index of element in a list with condition",
        "output": "",
        "rule": [
            "d17354"
        ]
    },
    {
        "instruction": "",
        "id": "q17355",
        "input": "python cursor select fetchall",
        "output": "",
        "rule": [
            "d17355"
        ]
    },
    {
        "instruction": "",
        "id": "q17356",
        "input": "how to disallow negative numbers in python",
        "output": "",
        "rule": [
            "d17356"
        ]
    },
    {
        "instruction": "",
        "id": "q17357",
        "input": "how to check if a string is an int in python",
        "output": "",
        "rule": [
            "d17357"
        ]
    },
    {
        "instruction": "",
        "id": "q17358",
        "input": "check if directory is empty or has files with python",
        "output": "",
        "rule": [
            "d17358"
        ]
    },
    {
        "instruction": "",
        "id": "q17359",
        "input": "python code to grab first and last index",
        "output": "",
        "rule": [
            "d17359"
        ]
    },
    {
        "instruction": "",
        "id": "q17360",
        "input": "show types python columns",
        "output": "",
        "rule": [
            "d17360"
        ]
    },
    {
        "instruction": "",
        "id": "q17361",
        "input": "elementtree remove element xml python",
        "output": "",
        "rule": [
            "d17361"
        ]
    },
    {
        "instruction": "",
        "id": "q17362",
        "input": "python check type of variable is string",
        "output": "",
        "rule": [
            "d17362"
        ]
    },
    {
        "instruction": "",
        "id": "q17363",
        "input": "how to read file from s3 bucket python",
        "output": "",
        "rule": [
            "d17363"
        ]
    },
    {
        "instruction": "",
        "id": "q17364",
        "input": "python track the time it takes to run a function",
        "output": "",
        "rule": [
            "d17364"
        ]
    },
    {
        "instruction": "",
        "id": "q17365",
        "input": "python call string positions from a line in a list",
        "output": "",
        "rule": [
            "d17365"
        ]
    },
    {
        "instruction": "",
        "id": "q17366",
        "input": "midpoints between two points python",
        "output": "",
        "rule": [
            "d17366"
        ]
    },
    {
        "instruction": "",
        "id": "q17367",
        "input": "python covert string to camel case",
        "output": "",
        "rule": [
            "d17367"
        ]
    },
    {
        "instruction": "",
        "id": "q17368",
        "input": "reset window color python",
        "output": "",
        "rule": [
            "d17368"
        ]
    },
    {
        "instruction": "",
        "id": "q17369",
        "input": "how to return the second smallest value in an array python",
        "output": "",
        "rule": [
            "d17369"
        ]
    },
    {
        "instruction": "",
        "id": "q17370",
        "input": "exit not defined python",
        "output": "",
        "rule": [
            "d17370"
        ]
    },
    {
        "instruction": "",
        "id": "q17371",
        "input": "python how to lemmatize wordnetlemmatizer",
        "output": "",
        "rule": [
            "d17371"
        ]
    },
    {
        "instruction": "",
        "id": "q17372",
        "input": "generating random number with gaussian distribution in python",
        "output": "",
        "rule": [
            "d17372"
        ]
    },
    {
        "instruction": "",
        "id": "q17373",
        "input": "improve python processing multicore",
        "output": "",
        "rule": [
            "d17373"
        ]
    },
    {
        "instruction": "",
        "id": "q17374",
        "input": "python apply min to column",
        "output": "",
        "rule": [
            "d17374"
        ]
    },
    {
        "instruction": "",
        "id": "q17375",
        "input": "get single file from s3 python",
        "output": "",
        "rule": [
            "d17375"
        ]
    },
    {
        "instruction": "",
        "id": "q17376",
        "input": "list comprehension python flatten",
        "output": "",
        "rule": [
            "d17376"
        ]
    },
    {
        "instruction": "",
        "id": "q17377",
        "input": "python access if key exists",
        "output": "",
        "rule": [
            "d17377"
        ]
    },
    {
        "instruction": "",
        "id": "q17378",
        "input": "python index of largest value of array",
        "output": "",
        "rule": [
            "d17378"
        ]
    },
    {
        "instruction": "",
        "id": "q17379",
        "input": "python conver megabyte to number",
        "output": "",
        "rule": [
            "d17379"
        ]
    },
    {
        "instruction": "",
        "id": "q17380",
        "input": "python request limit bandwidth",
        "output": "",
        "rule": [
            "d17380"
        ]
    },
    {
        "instruction": "",
        "id": "q17381",
        "input": "python moving average nested loop",
        "output": "",
        "rule": [
            "d17381"
        ]
    },
    {
        "instruction": "",
        "id": "q17382",
        "input": "build a dict python using keys and value lists",
        "output": "",
        "rule": [
            "d17382"
        ]
    },
    {
        "instruction": "",
        "id": "q17383",
        "input": "how to detect if a string is an int in python",
        "output": "",
        "rule": [
            "d17383"
        ]
    },
    {
        "instruction": "",
        "id": "q17384",
        "input": "reset usb device python windows",
        "output": "",
        "rule": [
            "d17384"
        ]
    },
    {
        "instruction": "",
        "id": "q17385",
        "input": "whats the best way to calculate the shortest path in a python graph",
        "output": "",
        "rule": [
            "d17385"
        ]
    },
    {
        "instruction": "",
        "id": "q17386",
        "input": "python most frequent item in a list",
        "output": "",
        "rule": [
            "d17386"
        ]
    },
    {
        "instruction": "",
        "id": "q17387",
        "input": "change values to as a percentage python",
        "output": "",
        "rule": [
            "d17387"
        ]
    },
    {
        "instruction": "",
        "id": "q17388",
        "input": "python hash function from big number to smaller",
        "output": "",
        "rule": [
            "d17388"
        ]
    },
    {
        "instruction": "",
        "id": "q17389",
        "input": "python how to truncate decimals",
        "output": "",
        "rule": [
            "d17389"
        ]
    },
    {
        "instruction": "",
        "id": "q17390",
        "input": "networkx python recursive print a tree",
        "output": "",
        "rule": [
            "d17390"
        ]
    },
    {
        "instruction": "",
        "id": "q17391",
        "input": "how to add somethign to a set in python",
        "output": "",
        "rule": [
            "d17391"
        ]
    },
    {
        "instruction": "",
        "id": "q17392",
        "input": "string camel case method python",
        "output": "",
        "rule": [
            "d17392"
        ]
    },
    {
        "instruction": "",
        "id": "q17393",
        "input": "turn list of strings into numbers python",
        "output": "",
        "rule": [
            "d17393"
        ]
    },
    {
        "instruction": "",
        "id": "q17394",
        "input": "return most frequent element in list python",
        "output": "",
        "rule": [
            "d17394"
        ]
    },
    {
        "instruction": "",
        "id": "q17395",
        "input": "how to hash a list in python",
        "output": "",
        "rule": [
            "d17395"
        ]
    },
    {
        "instruction": "",
        "id": "q17396",
        "input": "python first letter large caps the rest small",
        "output": "",
        "rule": [
            "d17396"
        ]
    },
    {
        "instruction": "",
        "id": "q17397",
        "input": "python is double or float",
        "output": "",
        "rule": [
            "d17397"
        ]
    },
    {
        "instruction": "",
        "id": "q17398",
        "input": "does python have a method to generate random numbers with a normal distribution",
        "output": "",
        "rule": [
            "d17398"
        ]
    },
    {
        "instruction": "",
        "id": "q17399",
        "input": "python 3 specify string width and padding",
        "output": "",
        "rule": [
            "d17399"
        ]
    },
    {
        "instruction": "",
        "id": "q17400",
        "input": "python function name should be lowercase",
        "output": "",
        "rule": [
            "d17400"
        ]
    },
    {
        "instruction": "",
        "id": "q17401",
        "input": "python function for not in list",
        "output": "",
        "rule": [
            "d17401"
        ]
    },
    {
        "instruction": "",
        "id": "q17402",
        "input": "how can you create a dictionary of letters and their counts based on a list of strings in python",
        "output": "",
        "rule": [
            "d17402"
        ]
    },
    {
        "instruction": "",
        "id": "q17403",
        "input": "buffer dtype mismatch, expected 'python object' but got 'unsigned long'",
        "output": "",
        "rule": [
            "d17403"
        ]
    },
    {
        "instruction": "",
        "id": "q17404",
        "input": "python filter lambda two dict",
        "output": "",
        "rule": [
            "d17404"
        ]
    },
    {
        "instruction": "",
        "id": "q17405",
        "input": "python length of column in numpy array",
        "output": "",
        "rule": [
            "d17405"
        ]
    },
    {
        "instruction": "",
        "id": "q17406",
        "input": "python execute dot graphviz",
        "output": "",
        "rule": [
            "d17406"
        ]
    },
    {
        "instruction": "",
        "id": "q17407",
        "input": "python openpyxl set color",
        "output": "",
        "rule": [
            "d17407"
        ]
    },
    {
        "instruction": "",
        "id": "q17408",
        "input": "check if a variable is a file in python",
        "output": "",
        "rule": [
            "d17408"
        ]
    },
    {
        "instruction": "",
        "id": "q17409",
        "input": "python3 map 2d list",
        "output": "",
        "rule": [
            "d17409"
        ]
    },
    {
        "instruction": "",
        "id": "q17410",
        "input": "how to calculate a similarity score of two synsets using nltk in python",
        "output": "",
        "rule": [
            "d17410"
        ]
    },
    {
        "instruction": "",
        "id": "q17411",
        "input": "turn list of lists into list python",
        "output": "",
        "rule": [
            "d17411"
        ]
    },
    {
        "instruction": "",
        "id": "q17412",
        "input": "extract row with max value in python",
        "output": "",
        "rule": [
            "d17412"
        ]
    },
    {
        "instruction": "",
        "id": "q17413",
        "input": "python pass argparse to function",
        "output": "",
        "rule": [
            "d17413"
        ]
    },
    {
        "instruction": "",
        "id": "q17414",
        "input": "python map remove without raise",
        "output": "",
        "rule": [
            "d17414"
        ]
    },
    {
        "instruction": "",
        "id": "q17415",
        "input": "set random number from normal distribution in python",
        "output": "",
        "rule": [
            "d17415"
        ]
    },
    {
        "instruction": "",
        "id": "q17416",
        "input": "random walk with bound in python",
        "output": "",
        "rule": [
            "d17416"
        ]
    },
    {
        "instruction": "",
        "id": "q17417",
        "input": "python if str is url",
        "output": "",
        "rule": [
            "d17417"
        ]
    },
    {
        "instruction": "",
        "id": "q17418",
        "input": "remove columns from data frame python",
        "output": "",
        "rule": [
            "d17418"
        ]
    },
    {
        "instruction": "",
        "id": "q17419",
        "input": "get url schema problem python",
        "output": "",
        "rule": [
            "d17419"
        ]
    },
    {
        "instruction": "",
        "id": "q17420",
        "input": "python redis connection pool max size2**31",
        "output": "",
        "rule": [
            "d17420"
        ]
    },
    {
        "instruction": "",
        "id": "q17421",
        "input": "python get min val of column",
        "output": "",
        "rule": [
            "d17421"
        ]
    },
    {
        "instruction": "",
        "id": "q17422",
        "input": "python padding zeros in bytestring",
        "output": "",
        "rule": [
            "d17422"
        ]
    },
    {
        "instruction": "",
        "id": "q17423",
        "input": "sum elements of two vectors python",
        "output": "",
        "rule": [
            "d17423"
        ]
    },
    {
        "instruction": "",
        "id": "q17424",
        "input": "access s3 files from python",
        "output": "",
        "rule": [
            "d17424"
        ]
    },
    {
        "instruction": "",
        "id": "q17425",
        "input": "python get year from date string",
        "output": "",
        "rule": [
            "d17425"
        ]
    },
    {
        "instruction": "",
        "id": "q17426",
        "input": "how to make string into int on python",
        "output": "",
        "rule": [
            "d17426"
        ]
    },
    {
        "instruction": "",
        "id": "q17427",
        "input": "python column to upper",
        "output": "",
        "rule": [
            "d17427"
        ]
    },
    {
        "instruction": "",
        "id": "q17428",
        "input": "how to get the size of the matrix in python",
        "output": "",
        "rule": [
            "d17428"
        ]
    },
    {
        "instruction": "",
        "id": "q17429",
        "input": "how to get maximum of a column in python",
        "output": "",
        "rule": [
            "d17429"
        ]
    },
    {
        "instruction": "",
        "id": "q17430",
        "input": "python3 generate random uuid",
        "output": "",
        "rule": [
            "d17430"
        ]
    },
    {
        "instruction": "",
        "id": "q17431",
        "input": "read in csv as numpy array python",
        "output": "",
        "rule": [
            "d17431"
        ]
    },
    {
        "instruction": "",
        "id": "q17432",
        "input": "remove cache python flask",
        "output": "",
        "rule": [
            "d17432"
        ]
    },
    {
        "instruction": "",
        "id": "q17433",
        "input": "flaten a list of list python",
        "output": "",
        "rule": [
            "d17433"
        ]
    },
    {
        "instruction": "",
        "id": "q17434",
        "input": "how to write or sympole in python",
        "output": "",
        "rule": [
            "d17434"
        ]
    },
    {
        "instruction": "",
        "id": "q17435",
        "input": "python mysql query executemany",
        "output": "",
        "rule": [
            "d17435"
        ]
    },
    {
        "instruction": "",
        "id": "q17436",
        "input": "python cursor fetchone iterable",
        "output": "",
        "rule": [
            "d17436"
        ]
    },
    {
        "instruction": "",
        "id": "q17437",
        "input": "python integer rounded to closest value",
        "output": "",
        "rule": [
            "d17437"
        ]
    },
    {
        "instruction": "",
        "id": "q17438",
        "input": "python api calls limit calls per limit",
        "output": "",
        "rule": [
            "d17438"
        ]
    },
    {
        "instruction": "",
        "id": "q17439",
        "input": "how to compare 'none' with none in python",
        "output": "",
        "rule": [
            "d17439"
        ]
    },
    {
        "instruction": "",
        "id": "q17440",
        "input": "python check if paths are same",
        "output": "",
        "rule": [
            "d17440"
        ]
    },
    {
        "instruction": "",
        "id": "q17441",
        "input": "how to login to jira dynamically using rest apis and python",
        "output": "",
        "rule": [
            "d17441"
        ]
    },
    {
        "instruction": "",
        "id": "q17442",
        "input": "python check for a roll over counter",
        "output": "",
        "rule": [
            "d17442"
        ]
    },
    {
        "instruction": "",
        "id": "q17443",
        "input": "stop python none end",
        "output": "",
        "rule": [
            "d17443"
        ]
    },
    {
        "instruction": "",
        "id": "q17444",
        "input": "python apply median filter to part of the image",
        "output": "",
        "rule": [
            "d17444"
        ]
    },
    {
        "instruction": "",
        "id": "q17445",
        "input": "how to turn list of strings into integers python",
        "output": "",
        "rule": [
            "d17445"
        ]
    },
    {
        "instruction": "",
        "id": "q17446",
        "input": "python judge relative url",
        "output": "",
        "rule": [
            "d17446"
        ]
    },
    {
        "instruction": "",
        "id": "q17447",
        "input": "remove the blank in python string",
        "output": "",
        "rule": [
            "d17447"
        ]
    },
    {
        "instruction": "",
        "id": "q17448",
        "input": "python rest call header",
        "output": "",
        "rule": [
            "d17448"
        ]
    },
    {
        "instruction": "",
        "id": "q17449",
        "input": "how to sav model after epoch python",
        "output": "",
        "rule": [
            "d17449"
        ]
    },
    {
        "instruction": "",
        "id": "q17450",
        "input": "how to get the last item in a series python",
        "output": "",
        "rule": [
            "d17450"
        ]
    },
    {
        "instruction": "",
        "id": "q17451",
        "input": "python last poststep not showing on plot",
        "output": "",
        "rule": [
            "d17451"
        ]
    },
    {
        "instruction": "",
        "id": "q17452",
        "input": "python3 decode not defined",
        "output": "",
        "rule": [
            "d17452"
        ]
    },
    {
        "instruction": "",
        "id": "q17453",
        "input": "how to check if you have 64bit python",
        "output": "",
        "rule": [
            "d17453"
        ]
    },
    {
        "instruction": "",
        "id": "q17454",
        "input": "python function to determine if boolean is prime",
        "output": "",
        "rule": [
            "d17454"
        ]
    },
    {
        "instruction": "",
        "id": "q17455",
        "input": "deleting xml elements with python element tree",
        "output": "",
        "rule": [
            "d17455"
        ]
    },
    {
        "instruction": "",
        "id": "q17456",
        "input": "python print string formate numpy array",
        "output": "",
        "rule": [
            "d17456"
        ]
    },
    {
        "instruction": "",
        "id": "q17457",
        "input": "python dynamo query partition key and sort key",
        "output": "",
        "rule": [
            "d17457"
        ]
    },
    {
        "instruction": "",
        "id": "q17458",
        "input": "return top ten in python",
        "output": "",
        "rule": [
            "d17458"
        ]
    },
    {
        "instruction": "",
        "id": "q17459",
        "input": "python replace multiple strings with same string",
        "output": "",
        "rule": [
            "d17459"
        ]
    },
    {
        "instruction": "",
        "id": "q17460",
        "input": "median of an array of arrays, python",
        "output": "",
        "rule": [
            "d17460"
        ]
    },
    {
        "instruction": "",
        "id": "q17461",
        "input": "how to keep unqiue value in a list python",
        "output": "",
        "rule": [
            "d17461"
        ]
    },
    {
        "instruction": "",
        "id": "q17462",
        "input": "python identify duplicate observations",
        "output": "",
        "rule": [
            "d17462"
        ]
    },
    {
        "instruction": "",
        "id": "q17463",
        "input": "python get dimensions of a window",
        "output": "",
        "rule": [
            "d17463"
        ]
    },
    {
        "instruction": "",
        "id": "q17464",
        "input": "trim off specific number of leading zeros python",
        "output": "",
        "rule": [
            "d17464"
        ]
    },
    {
        "instruction": "",
        "id": "q17465",
        "input": "python base64 incorrect padding",
        "output": "",
        "rule": [
            "d17465"
        ]
    },
    {
        "instruction": "",
        "id": "q17466",
        "input": "get last day of the month data python",
        "output": "",
        "rule": [
            "d17466"
        ]
    },
    {
        "instruction": "",
        "id": "q17467",
        "input": "how to know if a object is in a list twice in python",
        "output": "",
        "rule": [
            "d17467"
        ]
    },
    {
        "instruction": "",
        "id": "q17468",
        "input": "python check datatype of column",
        "output": "",
        "rule": [
            "d17468"
        ]
    },
    {
        "instruction": "",
        "id": "q17469",
        "input": "python check whether file is updated first time",
        "output": "",
        "rule": [
            "d17469"
        ]
    },
    {
        "instruction": "",
        "id": "q17470",
        "input": "pasting data from clipboard in python",
        "output": "",
        "rule": [
            "d17470"
        ]
    },
    {
        "instruction": "",
        "id": "q17471",
        "input": "check datatype of datatable column python",
        "output": "",
        "rule": [
            "d17471"
        ]
    },
    {
        "instruction": "",
        "id": "q17472",
        "input": "how to check if there is nan in an array python",
        "output": "",
        "rule": [
            "d17472"
        ]
    },
    {
        "instruction": "",
        "id": "q17473",
        "input": "python check data shape",
        "output": "",
        "rule": [
            "d17473"
        ]
    },
    {
        "instruction": "",
        "id": "q17474",
        "input": "minimum of a column python",
        "output": "",
        "rule": [
            "d17474"
        ]
    },
    {
        "instruction": "",
        "id": "q17475",
        "input": "python numpy array from csv file",
        "output": "",
        "rule": [
            "d17475"
        ]
    },
    {
        "instruction": "",
        "id": "q17476",
        "input": "python networkx get longest path",
        "output": "",
        "rule": [
            "d17476"
        ]
    },
    {
        "instruction": "",
        "id": "q17477",
        "input": "python list duplicate index",
        "output": "",
        "rule": [
            "d17477"
        ]
    },
    {
        "instruction": "",
        "id": "q17478",
        "input": "python 3 iter every n items",
        "output": "",
        "rule": [
            "d17478"
        ]
    },
    {
        "instruction": "",
        "id": "q17479",
        "input": "python xml elementtree delete child",
        "output": "",
        "rule": [
            "d17479"
        ]
    },
    {
        "instruction": "",
        "id": "q17480",
        "input": "list of lists into a flat list python",
        "output": "",
        "rule": [
            "d17480"
        ]
    },
    {
        "instruction": "",
        "id": "q17481",
        "input": "conditional if a variable is not an empty set python",
        "output": "",
        "rule": [
            "d17481"
        ]
    },
    {
        "instruction": "",
        "id": "q17482",
        "input": "longest common substring using contains python",
        "output": "",
        "rule": [
            "d17482"
        ]
    },
    {
        "instruction": "",
        "id": "q17483",
        "input": "python ndarray nonzero indics",
        "output": "",
        "rule": [
            "d17483"
        ]
    },
    {
        "instruction": "",
        "id": "q17484",
        "input": "how is python binary string encoded",
        "output": "",
        "rule": [
            "d17484"
        ]
    },
    {
        "instruction": "",
        "id": "q17485",
        "input": "set ranges on colormap python",
        "output": "",
        "rule": [
            "d17485"
        ]
    },
    {
        "instruction": "",
        "id": "q17486",
        "input": "minimum distance in a list of pair no in python",
        "output": "",
        "rule": [
            "d17486"
        ]
    },
    {
        "instruction": "",
        "id": "q17487",
        "input": "get the sql query result python postgresql",
        "output": "",
        "rule": [
            "d17487"
        ]
    },
    {
        "instruction": "",
        "id": "q17488",
        "input": "python create tuple from part of a list",
        "output": "",
        "rule": [
            "d17488"
        ]
    },
    {
        "instruction": "",
        "id": "q17489",
        "input": "python check if something is equal to any of a set of objects",
        "output": "",
        "rule": [
            "d17489"
        ]
    },
    {
        "instruction": "",
        "id": "q17490",
        "input": "python flattent list of list",
        "output": "",
        "rule": [
            "d17490"
        ]
    },
    {
        "instruction": "",
        "id": "q17491",
        "input": "python check if a date is valid",
        "output": "",
        "rule": [
            "d17491"
        ]
    },
    {
        "instruction": "",
        "id": "q17492",
        "input": "to know the current postion of the file cursor the function used is in python",
        "output": "",
        "rule": [
            "d17492"
        ]
    },
    {
        "instruction": "",
        "id": "q17493",
        "input": "how to check for whitespace in python",
        "output": "",
        "rule": [
            "d17493"
        ]
    },
    {
        "instruction": "",
        "id": "q17494",
        "input": "change column values to uppercase in python",
        "output": "",
        "rule": [
            "d17494"
        ]
    },
    {
        "instruction": "",
        "id": "q17495",
        "input": "how to see if string is an int python",
        "output": "",
        "rule": [
            "d17495"
        ]
    },
    {
        "instruction": "",
        "id": "q17496",
        "input": "if condition for between values python",
        "output": "",
        "rule": [
            "d17496"
        ]
    },
    {
        "instruction": "",
        "id": "q17497",
        "input": "python to get min of a column",
        "output": "",
        "rule": [
            "d17497"
        ]
    },
    {
        "instruction": "",
        "id": "q17498",
        "input": "python memoryview memory fragments",
        "output": "",
        "rule": [
            "d17498"
        ]
    },
    {
        "instruction": "",
        "id": "q17499",
        "input": "python to determine longest string in list",
        "output": "",
        "rule": [
            "d17499"
        ]
    },
    {
        "instruction": "",
        "id": "q17500",
        "input": "python read process output as a stream",
        "output": "",
        "rule": [
            "d17500"
        ]
    },
    {
        "instruction": "",
        "id": "q17501",
        "input": "implement a function to check if a binary tree is balanced python",
        "output": "",
        "rule": [
            "d17501"
        ]
    },
    {
        "instruction": "",
        "id": "q17502",
        "input": "is python a strict typed language",
        "output": "",
        "rule": [
            "d17502"
        ]
    },
    {
        "instruction": "",
        "id": "q17503",
        "input": "listing all types of variable in datframe python",
        "output": "",
        "rule": [
            "d17503"
        ]
    },
    {
        "instruction": "",
        "id": "q17504",
        "input": "boost python3 bytes extrac",
        "output": "",
        "rule": [
            "d17504"
        ]
    },
    {
        "instruction": "",
        "id": "q17505",
        "input": "python camel to snake",
        "output": "",
        "rule": [
            "d17505"
        ]
    },
    {
        "instruction": "",
        "id": "q17506",
        "input": "selecting the first 10 rows in python",
        "output": "",
        "rule": [
            "d17506"
        ]
    },
    {
        "instruction": "",
        "id": "q17507",
        "input": "python language key not found",
        "output": "",
        "rule": [
            "d17507"
        ]
    },
    {
        "instruction": "",
        "id": "q17508",
        "input": "python check if a file path is a file or directory",
        "output": "",
        "rule": [
            "d17508"
        ]
    },
    {
        "instruction": "",
        "id": "q17509",
        "input": "dictionary python many values to key tuple",
        "output": "",
        "rule": [
            "d17509"
        ]
    },
    {
        "instruction": "",
        "id": "q17510",
        "input": "delete all non alphanumeric characters in a program python",
        "output": "",
        "rule": [
            "d17510"
        ]
    },
    {
        "instruction": "",
        "id": "q17511",
        "input": "python list get most frequent item",
        "output": "",
        "rule": [
            "d17511"
        ]
    },
    {
        "instruction": "",
        "id": "q17512",
        "input": "python base64 encode incorrect padding",
        "output": "",
        "rule": [
            "d17512"
        ]
    },
    {
        "instruction": "",
        "id": "q17513",
        "input": "how to flatten a list of lists in python",
        "output": "",
        "rule": [
            "d17513"
        ]
    },
    {
        "instruction": "",
        "id": "q17514",
        "input": "miliseconds in python datetime from string",
        "output": "",
        "rule": [
            "d17514"
        ]
    },
    {
        "instruction": "",
        "id": "q17515",
        "input": "creating block diagonal matrices in python",
        "output": "",
        "rule": [
            "d17515"
        ]
    },
    {
        "instruction": "",
        "id": "q17516",
        "input": "python sqlite3 cursor select iterable",
        "output": "",
        "rule": [
            "d17516"
        ]
    },
    {
        "instruction": "",
        "id": "q17517",
        "input": "tensorflow python tensor to numpy array",
        "output": "",
        "rule": [
            "d17517"
        ]
    },
    {
        "instruction": "",
        "id": "q17518",
        "input": "python split on whitespace or punctuation",
        "output": "",
        "rule": [
            "d17518"
        ]
    },
    {
        "instruction": "",
        "id": "q17519",
        "input": "replace multiple characters in python string",
        "output": "",
        "rule": [
            "d17519"
        ]
    },
    {
        "instruction": "",
        "id": "q17520",
        "input": "python 3 dict iteriterms",
        "output": "",
        "rule": [
            "d17520"
        ]
    },
    {
        "instruction": "",
        "id": "q17521",
        "input": "if safe to have both python 2 and 3",
        "output": "",
        "rule": [
            "d17521"
        ]
    },
    {
        "instruction": "",
        "id": "q17522",
        "input": "python delete value from set",
        "output": "",
        "rule": [
            "d17522"
        ]
    },
    {
        "instruction": "",
        "id": "q17523",
        "input": "def is prime in python",
        "output": "",
        "rule": [
            "d17523"
        ]
    },
    {
        "instruction": "",
        "id": "q17524",
        "input": "python get datetime now for mysql",
        "output": "",
        "rule": [
            "d17524"
        ]
    },
    {
        "instruction": "",
        "id": "q17525",
        "input": "how to check in python string for only contain alphabets, numbers and underscore",
        "output": "",
        "rule": [
            "d17525"
        ]
    },
    {
        "instruction": "",
        "id": "q17526",
        "input": "cast python list of strings to int",
        "output": "",
        "rule": [
            "d17526"
        ]
    },
    {
        "instruction": "",
        "id": "q17527",
        "input": "python testing if string is int",
        "output": "",
        "rule": [
            "d17527"
        ]
    },
    {
        "instruction": "",
        "id": "q17528",
        "input": "python pylint too strict",
        "output": "",
        "rule": [
            "d17528"
        ]
    },
    {
        "instruction": "",
        "id": "q17529",
        "input": "function that counts the number o variabes equal to a certain value in a list python",
        "output": "",
        "rule": [
            "d17529"
        ]
    },
    {
        "instruction": "",
        "id": "q17530",
        "input": "python sqlalchemy get table column names",
        "output": "",
        "rule": [
            "d17530"
        ]
    },
    {
        "instruction": "",
        "id": "q17531",
        "input": "return row with max value python",
        "output": "",
        "rule": [
            "d17531"
        ]
    },
    {
        "instruction": "",
        "id": "q17532",
        "input": "how to get random variable normal distribution with python",
        "output": "",
        "rule": [
            "d17532"
        ]
    },
    {
        "instruction": "",
        "id": "q17533",
        "input": "python 3 list map lambda",
        "output": "",
        "rule": [
            "d17533"
        ]
    },
    {
        "instruction": "",
        "id": "q17534",
        "input": "how to check length of dequeue in python",
        "output": "",
        "rule": [
            "d17534"
        ]
    },
    {
        "instruction": "",
        "id": "q17535",
        "input": "how to drop an element from a python dictionary",
        "output": "",
        "rule": [
            "d17535"
        ]
    },
    {
        "instruction": "",
        "id": "q17536",
        "input": "python trim blank space from string",
        "output": "",
        "rule": [
            "d17536"
        ]
    },
    {
        "instruction": "",
        "id": "q17537",
        "input": "finding last occorance in a string python",
        "output": "",
        "rule": [
            "d17537"
        ]
    },
    {
        "instruction": "",
        "id": "q17538",
        "input": "deleting an element from a dictionary python",
        "output": "",
        "rule": [
            "d17538"
        ]
    },
    {
        "instruction": "",
        "id": "q17539",
        "input": "how to track a tree python",
        "output": "",
        "rule": [
            "d17539"
        ]
    },
    {
        "instruction": "",
        "id": "q17540",
        "input": "transforming tokens into a count python",
        "output": "",
        "rule": [
            "d17540"
        ]
    },
    {
        "instruction": "",
        "id": "q17541",
        "input": "get percentile of a value in a list python",
        "output": "",
        "rule": [
            "d17541"
        ]
    },
    {
        "instruction": "",
        "id": "q17542",
        "input": "make a string into a date python",
        "output": "",
        "rule": [
            "d17542"
        ]
    },
    {
        "instruction": "",
        "id": "q17543",
        "input": "only keep index of the minimum of each row python",
        "output": "",
        "rule": [
            "d17543"
        ]
    },
    {
        "instruction": "",
        "id": "q17544",
        "input": "python show data type of columns",
        "output": "",
        "rule": [
            "d17544"
        ]
    },
    {
        "instruction": "",
        "id": "q17545",
        "input": "fibonacci python code using sentinel loop",
        "output": "",
        "rule": [
            "d17545"
        ]
    },
    {
        "instruction": "",
        "id": "q17546",
        "input": "most frequent item in a list python",
        "output": "",
        "rule": [
            "d17546"
        ]
    },
    {
        "instruction": "",
        "id": "q17547",
        "input": "how to check if a path is valid in python",
        "output": "",
        "rule": [
            "d17547"
        ]
    },
    {
        "instruction": "",
        "id": "q17548",
        "input": "python covert str to bytearray",
        "output": "",
        "rule": [
            "d17548"
        ]
    },
    {
        "instruction": "",
        "id": "q17549",
        "input": "how to download file from s3 bucket using python",
        "output": "",
        "rule": [
            "d17549"
        ]
    },
    {
        "instruction": "",
        "id": "q17550",
        "input": "how to tell if an init has been called python",
        "output": "",
        "rule": [
            "d17550"
        ]
    },
    {
        "instruction": "",
        "id": "q17551",
        "input": "how to cancatinate semi coloumn in python",
        "output": "",
        "rule": [
            "d17551"
        ]
    },
    {
        "instruction": "",
        "id": "q17552",
        "input": "check each character in string pythong",
        "output": "",
        "rule": [
            "d17552"
        ]
    },
    {
        "instruction": "",
        "id": "q17553",
        "input": "if a string contains whitespace python",
        "output": "",
        "rule": [
            "d17553"
        ]
    },
    {
        "instruction": "",
        "id": "q17554",
        "input": "python code to read file from s3 bucket",
        "output": "",
        "rule": [
            "d17554"
        ]
    },
    {
        "instruction": "",
        "id": "q17555",
        "input": "cast a string to a digit in python",
        "output": "",
        "rule": [
            "d17555"
        ]
    },
    {
        "instruction": "",
        "id": "q17556",
        "input": "how to clean python idle cache",
        "output": "",
        "rule": [
            "d17556"
        ]
    },
    {
        "instruction": "",
        "id": "q17557",
        "input": "checking for uppercase in a string python",
        "output": "",
        "rule": [
            "d17557"
        ]
    },
    {
        "instruction": "",
        "id": "q17558",
        "input": "python string formatting zeropadding",
        "output": "",
        "rule": [
            "d17558"
        ]
    },
    {
        "instruction": "",
        "id": "q17559",
        "input": "python skip rest of a loop",
        "output": "",
        "rule": [
            "d17559"
        ]
    },
    {
        "instruction": "",
        "id": "q17560",
        "input": "python normalize a set of numbers",
        "output": "",
        "rule": [
            "d17560"
        ]
    },
    {
        "instruction": "",
        "id": "q17561",
        "input": "python get date from string without datetime",
        "output": "",
        "rule": [
            "d17561"
        ]
    },
    {
        "instruction": "",
        "id": "q17562",
        "input": "how to round answer to nearest tenth python",
        "output": "",
        "rule": [
            "d17562"
        ]
    },
    {
        "instruction": "",
        "id": "q17563",
        "input": "case independent lookup in python dictionary",
        "output": "",
        "rule": [
            "d17563"
        ]
    },
    {
        "instruction": "",
        "id": "q17564",
        "input": "python retrive list index based on its content",
        "output": "",
        "rule": [
            "d17564"
        ]
    },
    {
        "instruction": "",
        "id": "q17565",
        "input": "python read json from file into dictionary",
        "output": "",
        "rule": [
            "d17565"
        ]
    },
    {
        "instruction": "",
        "id": "q17566",
        "input": "python how to make an inverted dictionary",
        "output": "",
        "rule": [
            "d17566"
        ]
    },
    {
        "instruction": "",
        "id": "q17567",
        "input": "get index of first true in array python",
        "output": "",
        "rule": [
            "d17567"
        ]
    },
    {
        "instruction": "",
        "id": "q17568",
        "input": "truncate first 32 bits in python",
        "output": "",
        "rule": [
            "d17568"
        ]
    },
    {
        "instruction": "",
        "id": "q17569",
        "input": "python check if kargs empty",
        "output": "",
        "rule": [
            "d17569"
        ]
    },
    {
        "instruction": "",
        "id": "q17570",
        "input": "in python how do you use grep in a file",
        "output": "",
        "rule": [
            "d17570"
        ]
    },
    {
        "instruction": "",
        "id": "q17571",
        "input": "sql code in strings in python",
        "output": "",
        "rule": [
            "d17571"
        ]
    },
    {
        "instruction": "",
        "id": "q17572",
        "input": "python code for last in list",
        "output": "",
        "rule": [
            "d17572"
        ]
    },
    {
        "instruction": "",
        "id": "q17573",
        "input": "python print *args keys",
        "output": "",
        "rule": [
            "d17573"
        ]
    },
    {
        "instruction": "",
        "id": "q17574",
        "input": "capitalizing the first letter of a variable in python",
        "output": "",
        "rule": [
            "d17574"
        ]
    },
    {
        "instruction": "",
        "id": "q17575",
        "input": "map function between python2 and python3",
        "output": "",
        "rule": [
            "d17575"
        ]
    },
    {
        "instruction": "",
        "id": "q17576",
        "input": "enum python print name instead of object by default",
        "output": "",
        "rule": [
            "d17576"
        ]
    },
    {
        "instruction": "",
        "id": "q17577",
        "input": "python scikit median of array",
        "output": "",
        "rule": [
            "d17577"
        ]
    },
    {
        "instruction": "",
        "id": "q17578",
        "input": "maximum size of iterable python",
        "output": "",
        "rule": [
            "d17578"
        ]
    },
    {
        "instruction": "",
        "id": "q17579",
        "input": "spyder change from python 2 to 2",
        "output": "",
        "rule": [
            "d17579"
        ]
    },
    {
        "instruction": "",
        "id": "q17580",
        "input": "finding the similar part of two strings in python",
        "output": "",
        "rule": [
            "d17580"
        ]
    },
    {
        "instruction": "",
        "id": "q17581",
        "input": "how to say if not isnumeric in python",
        "output": "",
        "rule": [
            "d17581"
        ]
    },
    {
        "instruction": "",
        "id": "q17582",
        "input": "all combinations of two iterables python list comprhension",
        "output": "",
        "rule": [
            "d17582"
        ]
    },
    {
        "instruction": "",
        "id": "q17583",
        "input": "python win32api mouse position",
        "output": "",
        "rule": [
            "d17583"
        ]
    },
    {
        "instruction": "",
        "id": "q17584",
        "input": "who check upper case in python",
        "output": "",
        "rule": [
            "d17584"
        ]
    },
    {
        "instruction": "",
        "id": "q17585",
        "input": "how to normalize numbers with python",
        "output": "",
        "rule": [
            "d17585"
        ]
    },
    {
        "instruction": "",
        "id": "q17586",
        "input": "python dictionary delete key with empty value",
        "output": "",
        "rule": [
            "d17586"
        ]
    },
    {
        "instruction": "",
        "id": "q17587",
        "input": "python check variable type is string",
        "output": "",
        "rule": [
            "d17587"
        ]
    },
    {
        "instruction": "",
        "id": "q17588",
        "input": "extract bits from large numbers python",
        "output": "",
        "rule": [
            "d17588"
        ]
    },
    {
        "instruction": "",
        "id": "q17589",
        "input": "python delete all rows from table sql",
        "output": "",
        "rule": [
            "d17589"
        ]
    },
    {
        "instruction": "",
        "id": "q17590",
        "input": "python return year from a date string",
        "output": "",
        "rule": [
            "d17590"
        ]
    },
    {
        "instruction": "",
        "id": "q17591",
        "input": "python detect interface existance",
        "output": "",
        "rule": [
            "d17591"
        ]
    },
    {
        "instruction": "",
        "id": "q17592",
        "input": "use template string in python to replcae later",
        "output": "",
        "rule": [
            "d17592"
        ]
    },
    {
        "instruction": "",
        "id": "q17593",
        "input": "calculating the time of a function python",
        "output": "",
        "rule": [
            "d17593"
        ]
    },
    {
        "instruction": "",
        "id": "q17594",
        "input": "how to rotate list left in python3",
        "output": "",
        "rule": [
            "d17594"
        ]
    },
    {
        "instruction": "",
        "id": "q17595",
        "input": "python check is valuie is str",
        "output": "",
        "rule": [
            "d17595"
        ]
    },
    {
        "instruction": "",
        "id": "q17596",
        "input": "call post api from python",
        "output": "",
        "rule": [
            "d17596"
        ]
    },
    {
        "instruction": "",
        "id": "q17597",
        "input": "python get chrome size",
        "output": "",
        "rule": [
            "d17597"
        ]
    },
    {
        "instruction": "",
        "id": "q17598",
        "input": "python computation with the index of min",
        "output": "",
        "rule": [
            "d17598"
        ]
    },
    {
        "instruction": "",
        "id": "q17599",
        "input": "python lambda filter lowercase string",
        "output": "",
        "rule": [
            "d17599"
        ]
    },
    {
        "instruction": "",
        "id": "q17600",
        "input": "python calculate fft for wave form",
        "output": "",
        "rule": [
            "d17600"
        ]
    },
    {
        "instruction": "",
        "id": "q17601",
        "input": "finding max 3 out of a dictionary in python",
        "output": "",
        "rule": [
            "d17601"
        ]
    },
    {
        "instruction": "",
        "id": "q17602",
        "input": "python ast visit get parent node",
        "output": "",
        "rule": [
            "d17602"
        ]
    },
    {
        "instruction": "",
        "id": "q17603",
        "input": "get files changed using commitid using gitpython",
        "output": "",
        "rule": [
            "d17603"
        ]
    },
    {
        "instruction": "",
        "id": "q17604",
        "input": "python sqlite3 executemany %",
        "output": "",
        "rule": [
            "d17604"
        ]
    },
    {
        "instruction": "",
        "id": "q17605",
        "input": "remove leading zeros python",
        "output": "",
        "rule": [
            "d17605"
        ]
    },
    {
        "instruction": "",
        "id": "q17606",
        "input": "print the full name of the day of the week python",
        "output": "",
        "rule": [
            "d17606"
        ]
    },
    {
        "instruction": "",
        "id": "q17607",
        "input": "python fibonacci user input",
        "output": "",
        "rule": [
            "d17607"
        ]
    },
    {
        "instruction": "",
        "id": "q17608",
        "input": "how to detect language in python",
        "output": "",
        "rule": [
            "d17608"
        ]
    },
    {
        "instruction": "",
        "id": "q17609",
        "input": "how to check if a key was pressed with curses python",
        "output": "",
        "rule": [
            "d17609"
        ]
    },
    {
        "instruction": "",
        "id": "q17610",
        "input": "python if a is greater than b",
        "output": "",
        "rule": [
            "d17610"
        ]
    },
    {
        "instruction": "",
        "id": "q17611",
        "input": "python similarities between two strings word2vec",
        "output": "",
        "rule": [
            "d17611"
        ]
    },
    {
        "instruction": "",
        "id": "q17612",
        "input": "lower case string in python",
        "output": "",
        "rule": [
            "d17612"
        ]
    },
    {
        "instruction": "",
        "id": "q17613",
        "input": "get key with max value python",
        "output": "",
        "rule": [
            "d17613"
        ]
    },
    {
        "instruction": "",
        "id": "q17614",
        "input": "python map remove key",
        "output": "",
        "rule": [
            "d17614"
        ]
    },
    {
        "instruction": "",
        "id": "q17615",
        "input": "how to implement a rate limiter in python",
        "output": "",
        "rule": [
            "d17615"
        ]
    },
    {
        "instruction": "",
        "id": "q17616",
        "input": "python greater than string",
        "output": "",
        "rule": [
            "d17616"
        ]
    },
    {
        "instruction": "",
        "id": "q17617",
        "input": "how to pass a file to stdin in python",
        "output": "",
        "rule": [
            "d17617"
        ]
    },
    {
        "instruction": "",
        "id": "q17618",
        "input": "invert dictionary python 3",
        "output": "",
        "rule": [
            "d17618"
        ]
    },
    {
        "instruction": "",
        "id": "q17619",
        "input": "python list index by identity",
        "output": "",
        "rule": [
            "d17619"
        ]
    },
    {
        "instruction": "",
        "id": "q17620",
        "input": "how to get only one row in sql database python using flask",
        "output": "",
        "rule": [
            "d17620"
        ]
    },
    {
        "instruction": "",
        "id": "q17621",
        "input": "python get columns names in a list",
        "output": "",
        "rule": [
            "d17621"
        ]
    },
    {
        "instruction": "",
        "id": "q17622",
        "input": "how to get the index of elements with max value in array python",
        "output": "",
        "rule": [
            "d17622"
        ]
    },
    {
        "instruction": "",
        "id": "q17623",
        "input": "python remove key from dictionary if exist",
        "output": "",
        "rule": [
            "d17623"
        ]
    },
    {
        "instruction": "",
        "id": "q17624",
        "input": "python json value as string",
        "output": "",
        "rule": [
            "d17624"
        ]
    },
    {
        "instruction": "",
        "id": "q17625",
        "input": "return last index in python",
        "output": "",
        "rule": [
            "d17625"
        ]
    },
    {
        "instruction": "",
        "id": "q17626",
        "input": "how to split sentence in python with delimiter",
        "output": "",
        "rule": [
            "d17626"
        ]
    },
    {
        "instruction": "",
        "id": "q17627",
        "input": "exit function in python not defined",
        "output": "",
        "rule": [
            "d17627"
        ]
    },
    {
        "instruction": "",
        "id": "q17628",
        "input": "python argparse call from code",
        "output": "",
        "rule": [
            "d17628"
        ]
    },
    {
        "instruction": "",
        "id": "q17629",
        "input": "get column with max value python",
        "output": "",
        "rule": [
            "d17629"
        ]
    },
    {
        "instruction": "",
        "id": "q17630",
        "input": "docker container ls not listing python",
        "output": "",
        "rule": [
            "d17630"
        ]
    },
    {
        "instruction": "",
        "id": "q17631",
        "input": "remove words of string in list of stringpython",
        "output": "",
        "rule": [
            "d17631"
        ]
    },
    {
        "instruction": "",
        "id": "q17632",
        "input": "how to test if a str is an int python",
        "output": "",
        "rule": [
            "d17632"
        ]
    },
    {
        "instruction": "",
        "id": "q17633",
        "input": "python calculating bitwise differently",
        "output": "",
        "rule": [
            "d17633"
        ]
    },
    {
        "instruction": "",
        "id": "q17634",
        "input": "testing if two strings are equal in python",
        "output": "",
        "rule": [
            "d17634"
        ]
    },
    {
        "instruction": "",
        "id": "q17635",
        "input": "python3 flask jsonify unhashable type list",
        "output": "",
        "rule": [
            "d17635"
        ]
    },
    {
        "instruction": "",
        "id": "q17636",
        "input": "how to get all cookies from python request",
        "output": "",
        "rule": [
            "d17636"
        ]
    },
    {
        "instruction": "",
        "id": "q17637",
        "input": "how to count in lists without the sum command python",
        "output": "",
        "rule": [
            "d17637"
        ]
    },
    {
        "instruction": "",
        "id": "q17638",
        "input": "how to converta string into bytes in python",
        "output": "",
        "rule": [
            "d17638"
        ]
    },
    {
        "instruction": "",
        "id": "q17639",
        "input": "python str number zero pad left and right",
        "output": "",
        "rule": [
            "d17639"
        ]
    },
    {
        "instruction": "",
        "id": "q17640",
        "input": "python 3 cursor position",
        "output": "",
        "rule": [
            "d17640"
        ]
    },
    {
        "instruction": "",
        "id": "q17641",
        "input": "how to delete duplicates in a list python panda",
        "output": "",
        "rule": [
            "d17641"
        ]
    },
    {
        "instruction": "",
        "id": "q17642",
        "input": "how to get bottom n lowestkey value pair from the dictionary in python",
        "output": "",
        "rule": [
            "d17642"
        ]
    },
    {
        "instruction": "",
        "id": "q17643",
        "input": "is last day of month python",
        "output": "",
        "rule": [
            "d17643"
        ]
    },
    {
        "instruction": "",
        "id": "q17644",
        "input": "get key of maximum value in python",
        "output": "",
        "rule": [
            "d17644"
        ]
    },
    {
        "instruction": "",
        "id": "q17645",
        "input": "python docker configuration passing environment varialbes",
        "output": "",
        "rule": [
            "d17645"
        ]
    },
    {
        "instruction": "",
        "id": "q17646",
        "input": "python http request synchronous or asynchronous",
        "output": "",
        "rule": [
            "d17646"
        ]
    },
    {
        "instruction": "",
        "id": "q17647",
        "input": "lowercase letter numbers in python",
        "output": "",
        "rule": [
            "d17647"
        ]
    },
    {
        "instruction": "",
        "id": "q17648",
        "input": "how to uppercase string element python",
        "output": "",
        "rule": [
            "d17648"
        ]
    },
    {
        "instruction": "",
        "id": "q17649",
        "input": "how to make check digit even or odd python",
        "output": "",
        "rule": [
            "d17649"
        ]
    },
    {
        "instruction": "",
        "id": "q17650",
        "input": "date time string python http",
        "output": "",
        "rule": [
            "d17650"
        ]
    },
    {
        "instruction": "",
        "id": "q17651",
        "input": "how to get length of deque in python",
        "output": "",
        "rule": [
            "d17651"
        ]
    },
    {
        "instruction": "",
        "id": "q17652",
        "input": "python how to check if key exists + haskeys",
        "output": "",
        "rule": [
            "d17652"
        ]
    },
    {
        "instruction": "",
        "id": "q17653",
        "input": "python checking for duplicates in a list",
        "output": "",
        "rule": [
            "d17653"
        ]
    },
    {
        "instruction": "",
        "id": "q17654",
        "input": "check if df is not null in python",
        "output": "",
        "rule": [
            "d17654"
        ]
    },
    {
        "instruction": "",
        "id": "q17655",
        "input": "python keep bits byte aligned",
        "output": "",
        "rule": [
            "d17655"
        ]
    },
    {
        "instruction": "",
        "id": "q17656",
        "input": "how to get the year of the date in python",
        "output": "",
        "rule": [
            "d17656"
        ]
    },
    {
        "instruction": "",
        "id": "q17657",
        "input": "pick up a row having a maximum value in a column in python",
        "output": "",
        "rule": [
            "d17657"
        ]
    },
    {
        "instruction": "",
        "id": "q17658",
        "input": "python read keyboard input from specific",
        "output": "",
        "rule": [
            "d17658"
        ]
    },
    {
        "instruction": "",
        "id": "q17659",
        "input": "return key for largest list in python",
        "output": "",
        "rule": [
            "d17659"
        ]
    },
    {
        "instruction": "",
        "id": "q17660",
        "input": "casting map to string python",
        "output": "",
        "rule": [
            "d17660"
        ]
    },
    {
        "instruction": "",
        "id": "q17661",
        "input": "python how to rotate a list",
        "output": "",
        "rule": [
            "d17661"
        ]
    },
    {
        "instruction": "",
        "id": "q17662",
        "input": "python list of unique values in text file",
        "output": "",
        "rule": [
            "d17662"
        ]
    },
    {
        "instruction": "",
        "id": "q17663",
        "input": "python getyear from the date string",
        "output": "",
        "rule": [
            "d17663"
        ]
    },
    {
        "instruction": "",
        "id": "q17664",
        "input": "python create hash of list elements",
        "output": "",
        "rule": [
            "d17664"
        ]
    },
    {
        "instruction": "",
        "id": "q17665",
        "input": "+python +datetime +format iso format",
        "output": "",
        "rule": [
            "d17665"
        ]
    },
    {
        "instruction": "",
        "id": "q17666",
        "input": "how to check if key exists in python",
        "output": "",
        "rule": [
            "d17666"
        ]
    },
    {
        "instruction": "",
        "id": "q17667",
        "input": "python hist returns bin edges right",
        "output": "",
        "rule": [
            "d17667"
        ]
    },
    {
        "instruction": "",
        "id": "q17668",
        "input": "python get top n values from list",
        "output": "",
        "rule": [
            "d17668"
        ]
    },
    {
        "instruction": "",
        "id": "q17669",
        "input": "graphviz dot to png python",
        "output": "",
        "rule": [
            "d17669"
        ]
    },
    {
        "instruction": "",
        "id": "q17670",
        "input": "how to transform a 2d matrix to tensor python",
        "output": "",
        "rule": [
            "d17670"
        ]
    },
    {
        "instruction": "",
        "id": "q17671",
        "input": "how to grep a string in a file using aspython",
        "output": "",
        "rule": [
            "d17671"
        ]
    },
    {
        "instruction": "",
        "id": "q17672",
        "input": "python string \"any lowercase characters\"",
        "output": "",
        "rule": [
            "d17672"
        ]
    },
    {
        "instruction": "",
        "id": "q17673",
        "input": "transfer list to string witho commas python",
        "output": "",
        "rule": [
            "d17673"
        ]
    },
    {
        "instruction": "",
        "id": "q17674",
        "input": "detect language of the text python",
        "output": "",
        "rule": [
            "d17674"
        ]
    },
    {
        "instruction": "",
        "id": "q17675",
        "input": "python get datatype of sql column",
        "output": "",
        "rule": [
            "d17675"
        ]
    },
    {
        "instruction": "",
        "id": "q17676",
        "input": "pylint for python 3",
        "output": "",
        "rule": [
            "d17676"
        ]
    },
    {
        "instruction": "",
        "id": "q17677",
        "input": "determining alphanumeric characters in a string python",
        "output": "",
        "rule": [
            "d17677"
        ]
    },
    {
        "instruction": "",
        "id": "q17678",
        "input": "python see if value is finite",
        "output": "",
        "rule": [
            "d17678"
        ]
    },
    {
        "instruction": "",
        "id": "q17679",
        "input": "delete top comment of python file",
        "output": "",
        "rule": [
            "d17679"
        ]
    },
    {
        "instruction": "",
        "id": "q17680",
        "input": "function that returns first occurence of item in string in python",
        "output": "",
        "rule": [
            "d17680"
        ]
    },
    {
        "instruction": "",
        "id": "q17681",
        "input": "make a function that sets up a logger python",
        "output": "",
        "rule": [
            "d17681"
        ]
    },
    {
        "instruction": "",
        "id": "q17682",
        "input": "check if string equals quotation marks python",
        "output": "",
        "rule": [
            "d17682"
        ]
    },
    {
        "instruction": "",
        "id": "q17683",
        "input": "dot product of two lists of same length python",
        "output": "",
        "rule": [
            "d17683"
        ]
    },
    {
        "instruction": "",
        "id": "q17684",
        "input": "python judge if file empty",
        "output": "",
        "rule": [
            "d17684"
        ]
    },
    {
        "instruction": "",
        "id": "q17685",
        "input": "how to flatten image python",
        "output": "",
        "rule": [
            "d17685"
        ]
    },
    {
        "instruction": "",
        "id": "q17686",
        "input": "python ctypes how to identify a window",
        "output": "",
        "rule": [
            "d17686"
        ]
    },
    {
        "instruction": "",
        "id": "q17687",
        "input": "html color to rgb tuple python",
        "output": "",
        "rule": [
            "d17687"
        ]
    },
    {
        "instruction": "",
        "id": "q17688",
        "input": "map list to every 3 elements python",
        "output": "",
        "rule": [
            "d17688"
        ]
    },
    {
        "instruction": "",
        "id": "q17689",
        "input": "python enum check if value in enum",
        "output": "",
        "rule": [
            "d17689"
        ]
    },
    {
        "instruction": "",
        "id": "q17690",
        "input": "python and remove trailing zeros",
        "output": "",
        "rule": [
            "d17690"
        ]
    },
    {
        "instruction": "",
        "id": "q17691",
        "input": "how do you exit code python and give message to user",
        "output": "",
        "rule": [
            "d17691"
        ]
    },
    {
        "instruction": "",
        "id": "q17692",
        "input": "check if you have 32 or 64 bit python",
        "output": "",
        "rule": [
            "d17692"
        ]
    },
    {
        "instruction": "",
        "id": "q17693",
        "input": "python removing columns from a data frame",
        "output": "",
        "rule": [
            "d17693"
        ]
    },
    {
        "instruction": "",
        "id": "q17694",
        "input": "python matrix multiplication *",
        "output": "",
        "rule": [
            "d17694"
        ]
    },
    {
        "instruction": "",
        "id": "q17695",
        "input": "how to decode base 64 python",
        "output": "",
        "rule": [
            "d17695"
        ]
    },
    {
        "instruction": "",
        "id": "q17696",
        "input": "python json formatted string to string",
        "output": "",
        "rule": [
            "d17696"
        ]
    },
    {
        "instruction": "",
        "id": "q17697",
        "input": "python check if float is none",
        "output": "",
        "rule": [
            "d17697"
        ]
    },
    {
        "instruction": "",
        "id": "q17698",
        "input": "python tell a file type",
        "output": "",
        "rule": [
            "d17698"
        ]
    },
    {
        "instruction": "",
        "id": "q17699",
        "input": "using map on lists python",
        "output": "",
        "rule": [
            "d17699"
        ]
    },
    {
        "instruction": "",
        "id": "q17700",
        "input": "python check for existing hash key",
        "output": "",
        "rule": [
            "d17700"
        ]
    },
    {
        "instruction": "",
        "id": "q17701",
        "input": "how to specify capitalization in python",
        "output": "",
        "rule": [
            "d17701"
        ]
    },
    {
        "instruction": "",
        "id": "q17702",
        "input": "python iter dictionary items",
        "output": "",
        "rule": [
            "d17702"
        ]
    },
    {
        "instruction": "",
        "id": "q17703",
        "input": "test asyncio python not working",
        "output": "",
        "rule": [
            "d17703"
        ]
    },
    {
        "instruction": "",
        "id": "q17704",
        "input": "get datatime from string python",
        "output": "",
        "rule": [
            "d17704"
        ]
    },
    {
        "instruction": "",
        "id": "q17705",
        "input": "how to get data type in python matrix",
        "output": "",
        "rule": [
            "d17705"
        ]
    },
    {
        "instruction": "",
        "id": "q17706",
        "input": "highest 5 values from dictionary python",
        "output": "",
        "rule": [
            "d17706"
        ]
    },
    {
        "instruction": "",
        "id": "q17707",
        "input": "python current time mysql",
        "output": "",
        "rule": [
            "d17707"
        ]
    },
    {
        "instruction": "",
        "id": "q17708",
        "input": "python graph to file",
        "output": "",
        "rule": [
            "d17708"
        ]
    },
    {
        "instruction": "",
        "id": "q17709",
        "input": "python how to flatten image",
        "output": "",
        "rule": [
            "d17709"
        ]
    },
    {
        "instruction": "",
        "id": "q17710",
        "input": "current date in iso string format in python",
        "output": "",
        "rule": [
            "d17710"
        ]
    },
    {
        "instruction": "",
        "id": "q17711",
        "input": "check if a string timestamp iso format python",
        "output": "",
        "rule": [
            "d17711"
        ]
    },
    {
        "instruction": "",
        "id": "q17712",
        "input": "how to print the current timezone in python",
        "output": "",
        "rule": [
            "d17712"
        ]
    },
    {
        "instruction": "",
        "id": "q17713",
        "input": "python 2 to python 3 decoding",
        "output": "",
        "rule": [
            "d17713"
        ]
    },
    {
        "instruction": "",
        "id": "q17714",
        "input": "python test if first letter is capital",
        "output": "",
        "rule": [
            "d17714"
        ]
    },
    {
        "instruction": "",
        "id": "q17715",
        "input": "indices of k smallest elements python",
        "output": "",
        "rule": [
            "d17715"
        ]
    },
    {
        "instruction": "",
        "id": "q17716",
        "input": "python get area of polygon",
        "output": "",
        "rule": [
            "d17716"
        ]
    },
    {
        "instruction": "",
        "id": "q17717",
        "input": "vs code change indent space for python files only",
        "output": "",
        "rule": [
            "d17717"
        ]
    },
    {
        "instruction": "",
        "id": "q17718",
        "input": "python get elemets satisfying condition",
        "output": "",
        "rule": [
            "d17718"
        ]
    },
    {
        "instruction": "",
        "id": "q17719",
        "input": "how to code a tree in python",
        "output": "",
        "rule": [
            "d17719"
        ]
    },
    {
        "instruction": "",
        "id": "q17720",
        "input": "cast python variable string to date",
        "output": "",
        "rule": [
            "d17720"
        ]
    },
    {
        "instruction": "",
        "id": "q17721",
        "input": "python str remove blank",
        "output": "",
        "rule": [
            "d17721"
        ]
    },
    {
        "instruction": "",
        "id": "q17722",
        "input": "python turn uuid into string",
        "output": "",
        "rule": [
            "d17722"
        ]
    },
    {
        "instruction": "",
        "id": "q17723",
        "input": "python3 encoding a bytestring",
        "output": "",
        "rule": [
            "d17723"
        ]
    },
    {
        "instruction": "",
        "id": "q17724",
        "input": "python make all list elements lowercase",
        "output": "",
        "rule": [
            "d17724"
        ]
    },
    {
        "instruction": "",
        "id": "q17725",
        "input": "how to remove leading zeroes in python",
        "output": "",
        "rule": [
            "d17725"
        ]
    },
    {
        "instruction": "",
        "id": "q17726",
        "input": "does readlines in python skip empty lines",
        "output": "",
        "rule": [
            "d17726"
        ]
    },
    {
        "instruction": "",
        "id": "q17727",
        "input": "finding longest path of dag python",
        "output": "",
        "rule": [
            "d17727"
        ]
    },
    {
        "instruction": "",
        "id": "q17728",
        "input": "python check datatype of a column",
        "output": "",
        "rule": [
            "d17728"
        ]
    },
    {
        "instruction": "",
        "id": "q17729",
        "input": "how to replace a substring in a python sdtring",
        "output": "",
        "rule": [
            "d17729"
        ]
    },
    {
        "instruction": "",
        "id": "q17730",
        "input": "get most frequent items in list python",
        "output": "",
        "rule": [
            "d17730"
        ]
    },
    {
        "instruction": "",
        "id": "q17731",
        "input": "max length of list of strings python",
        "output": "",
        "rule": [
            "d17731"
        ]
    },
    {
        "instruction": "",
        "id": "q17732",
        "input": "python re expression to delete all files",
        "output": "",
        "rule": [
            "d17732"
        ]
    },
    {
        "instruction": "",
        "id": "q17733",
        "input": "how to determine depth nested list python",
        "output": "",
        "rule": [
            "d17733"
        ]
    },
    {
        "instruction": "",
        "id": "q17734",
        "input": "tensorflow python get shape",
        "output": "",
        "rule": [
            "d17734"
        ]
    },
    {
        "instruction": "",
        "id": "q17735",
        "input": "how do you get python code to print longest line of a text",
        "output": "",
        "rule": [
            "d17735"
        ]
    },
    {
        "instruction": "",
        "id": "q17736",
        "input": "flatten arbitrary list python",
        "output": "",
        "rule": [
            "d17736"
        ]
    },
    {
        "instruction": "",
        "id": "q17737",
        "input": "index slicing python get last element",
        "output": "",
        "rule": [
            "d17737"
        ]
    },
    {
        "instruction": "",
        "id": "q17738",
        "input": "python square wave with input and end",
        "output": "",
        "rule": [
            "d17738"
        ]
    },
    {
        "instruction": "",
        "id": "q17739",
        "input": "python check is a float zero",
        "output": "",
        "rule": [
            "d17739"
        ]
    },
    {
        "instruction": "",
        "id": "q17740",
        "input": "python requests post how to use params",
        "output": "",
        "rule": [
            "d17740"
        ]
    },
    {
        "instruction": "",
        "id": "q17741",
        "input": "python get files in directory sort by modified time",
        "output": "",
        "rule": [
            "d17741"
        ]
    },
    {
        "instruction": "",
        "id": "q17742",
        "input": "call a fucntion argparse cli python",
        "output": "",
        "rule": [
            "d17742"
        ]
    },
    {
        "instruction": "",
        "id": "q17743",
        "input": "flatten list in list python",
        "output": "",
        "rule": [
            "d17743"
        ]
    },
    {
        "instruction": "",
        "id": "q17744",
        "input": "list of indices to list of values python",
        "output": "",
        "rule": [
            "d17744"
        ]
    },
    {
        "instruction": "",
        "id": "q17745",
        "input": "remove carriage return from string in python",
        "output": "",
        "rule": [
            "d17745"
        ]
    },
    {
        "instruction": "",
        "id": "q17746",
        "input": "python iterate and remove dict filter",
        "output": "",
        "rule": [
            "d17746"
        ]
    },
    {
        "instruction": "",
        "id": "q17747",
        "input": "rendering a python figure in html with javascript",
        "output": "",
        "rule": [
            "d17747"
        ]
    },
    {
        "instruction": "",
        "id": "q17748",
        "input": "python how to check if a string is file",
        "output": "",
        "rule": [
            "d17748"
        ]
    },
    {
        "instruction": "",
        "id": "q17749",
        "input": "python normalize to sum to 1",
        "output": "",
        "rule": [
            "d17749"
        ]
    },
    {
        "instruction": "",
        "id": "q17750",
        "input": "how to check for a line in a file using python",
        "output": "",
        "rule": [
            "d17750"
        ]
    },
    {
        "instruction": "",
        "id": "q17751",
        "input": "python matrix only return values above 0",
        "output": "",
        "rule": [
            "d17751"
        ]
    },
    {
        "instruction": "",
        "id": "q17752",
        "input": "python asyncio socket examples",
        "output": "",
        "rule": [
            "d17752"
        ]
    },
    {
        "instruction": "",
        "id": "q17753",
        "input": "how to parse bits into 32 bit in python chunk",
        "output": "",
        "rule": [
            "d17753"
        ]
    },
    {
        "instruction": "",
        "id": "q17754",
        "input": "windows python get disk uuid",
        "output": "",
        "rule": [
            "d17754"
        ]
    },
    {
        "instruction": "",
        "id": "q17755",
        "input": "python last day of month two months ago",
        "output": "",
        "rule": [
            "d17755"
        ]
    },
    {
        "instruction": "",
        "id": "q17756",
        "input": "get datatypesof columns python",
        "output": "",
        "rule": [
            "d17756"
        ]
    },
    {
        "instruction": "",
        "id": "q17757",
        "input": "python remove all empty items in list",
        "output": "",
        "rule": [
            "d17757"
        ]
    },
    {
        "instruction": "",
        "id": "q17758",
        "input": "how to make a set from an existing file python",
        "output": "",
        "rule": [
            "d17758"
        ]
    },
    {
        "instruction": "",
        "id": "q17759",
        "input": "python get top n element",
        "output": "",
        "rule": [
            "d17759"
        ]
    },
    {
        "instruction": "",
        "id": "q17760",
        "input": "how to get a timezones time in python",
        "output": "",
        "rule": [
            "d17760"
        ]
    },
    {
        "instruction": "",
        "id": "q17761",
        "input": "python test if strings equal",
        "output": "",
        "rule": [
            "d17761"
        ]
    },
    {
        "instruction": "",
        "id": "q17762",
        "input": "how do i check for args in python main",
        "output": "",
        "rule": [
            "d17762"
        ]
    },
    {
        "instruction": "",
        "id": "q17763",
        "input": "python sql with paramters",
        "output": "",
        "rule": [
            "d17763"
        ]
    },
    {
        "instruction": "",
        "id": "q17764",
        "input": "python normalize to normal distribution",
        "output": "",
        "rule": [
            "d17764"
        ]
    },
    {
        "instruction": "",
        "id": "q17765",
        "input": "how to check if a line is in a file in python",
        "output": "",
        "rule": [
            "d17765"
        ]
    },
    {
        "instruction": "",
        "id": "q17766",
        "input": "python map for loop",
        "output": "",
        "rule": [
            "d17766"
        ]
    },
    {
        "instruction": "",
        "id": "q17767",
        "input": "python series get the minimum",
        "output": "",
        "rule": [
            "d17767"
        ]
    },
    {
        "instruction": "",
        "id": "q17768",
        "input": "python read csv as numpy array",
        "output": "",
        "rule": [
            "d17768"
        ]
    },
    {
        "instruction": "",
        "id": "q17769",
        "input": "vectorized normal cdf in python for speed",
        "output": "",
        "rule": [
            "d17769"
        ]
    },
    {
        "instruction": "",
        "id": "q17770",
        "input": "python finding first occurance of character in string",
        "output": "",
        "rule": [
            "d17770"
        ]
    },
    {
        "instruction": "",
        "id": "q17771",
        "input": "python map function replace for loops",
        "output": "",
        "rule": [
            "d17771"
        ]
    },
    {
        "instruction": "",
        "id": "q17772",
        "input": "orthogonalize a matrix python",
        "output": "",
        "rule": [
            "d17772"
        ]
    },
    {
        "instruction": "",
        "id": "q17773",
        "input": "python last element in a list of lists",
        "output": "",
        "rule": [
            "d17773"
        ]
    },
    {
        "instruction": "",
        "id": "q17774",
        "input": "how to get the year from a date in python",
        "output": "",
        "rule": [
            "d17774"
        ]
    },
    {
        "instruction": "",
        "id": "q17775",
        "input": "how to print half a list python",
        "output": "",
        "rule": [
            "d17775"
        ]
    },
    {
        "instruction": "",
        "id": "q17776",
        "input": "check whether the col has null value or not python",
        "output": "",
        "rule": [
            "d17776"
        ]
    },
    {
        "instruction": "",
        "id": "q17777",
        "input": "check for letters without is alpha python",
        "output": "",
        "rule": [
            "d17777"
        ]
    },
    {
        "instruction": "",
        "id": "q17778",
        "input": "datareader python current stock price",
        "output": "",
        "rule": [
            "d17778"
        ]
    },
    {
        "instruction": "",
        "id": "q17779",
        "input": "python flask add cache",
        "output": "",
        "rule": [
            "d17779"
        ]
    },
    {
        "instruction": "",
        "id": "q17780",
        "input": "how to identify last occurrence of character in string in python",
        "output": "",
        "rule": [
            "d17780"
        ]
    },
    {
        "instruction": "",
        "id": "q17781",
        "input": "get top n fields of dict in python",
        "output": "",
        "rule": [
            "d17781"
        ]
    },
    {
        "instruction": "",
        "id": "q17782",
        "input": "get year from string date python",
        "output": "",
        "rule": [
            "d17782"
        ]
    },
    {
        "instruction": "",
        "id": "q17783",
        "input": "creating and finding the midpoints of two points in python",
        "output": "",
        "rule": [
            "d17783"
        ]
    },
    {
        "instruction": "",
        "id": "q17784",
        "input": "python how to verify file locaiton",
        "output": "",
        "rule": [
            "d17784"
        ]
    },
    {
        "instruction": "",
        "id": "q17785",
        "input": "how to check whether a variable is a lambda function in python",
        "output": "",
        "rule": [
            "d17785"
        ]
    },
    {
        "instruction": "",
        "id": "q17786",
        "input": "python change encoding stdout",
        "output": "",
        "rule": [
            "d17786"
        ]
    },
    {
        "instruction": "",
        "id": "q17787",
        "input": "how can i get text file in python",
        "output": "",
        "rule": [
            "d17787"
        ]
    },
    {
        "instruction": "",
        "id": "q17788",
        "input": "python get domain of an http address",
        "output": "",
        "rule": [
            "d17788"
        ]
    },
    {
        "instruction": "",
        "id": "q17789",
        "input": "longest string in a list python",
        "output": "",
        "rule": [
            "d17789"
        ]
    },
    {
        "instruction": "",
        "id": "q17790",
        "input": "relace multiple characters in a string with emty string python",
        "output": "",
        "rule": [
            "d17790"
        ]
    },
    {
        "instruction": "",
        "id": "q17791",
        "input": "way to change the string \"python\" to have all uppercase letters",
        "output": "",
        "rule": [
            "d17791"
        ]
    },
    {
        "instruction": "",
        "id": "q17792",
        "input": "python list filters all blank string",
        "output": "",
        "rule": [
            "d17792"
        ]
    },
    {
        "instruction": "",
        "id": "q17793",
        "input": "python tensor to array",
        "output": "",
        "rule": [
            "d17793"
        ]
    },
    {
        "instruction": "",
        "id": "q17794",
        "input": "check if value is infinity or not python",
        "output": "",
        "rule": [
            "d17794"
        ]
    },
    {
        "instruction": "",
        "id": "q17795",
        "input": "python parse timezone abbreviation",
        "output": "",
        "rule": [
            "d17795"
        ]
    },
    {
        "instruction": "",
        "id": "q17796",
        "input": "compute similarity between data set python",
        "output": "",
        "rule": [
            "d17796"
        ]
    },
    {
        "instruction": "",
        "id": "q17797",
        "input": "python 3 get timezone from pc",
        "output": "",
        "rule": [
            "d17797"
        ]
    },
    {
        "instruction": "",
        "id": "q17798",
        "input": "python parse string to date time",
        "output": "",
        "rule": [
            "d17798"
        ]
    },
    {
        "instruction": "",
        "id": "q17799",
        "input": "python how to judge all elements of an array at the same time",
        "output": "",
        "rule": [
            "d17799"
        ]
    },
    {
        "instruction": "",
        "id": "q17800",
        "input": "python list from delimited string",
        "output": "",
        "rule": [
            "d17800"
        ]
    },
    {
        "instruction": "",
        "id": "q17801",
        "input": "python json list object serializable",
        "output": "",
        "rule": [
            "d17801"
        ]
    },
    {
        "instruction": "",
        "id": "q17802",
        "input": "how to check whether string is whitespace in python",
        "output": "",
        "rule": [
            "d17802"
        ]
    },
    {
        "instruction": "",
        "id": "q17803",
        "input": "how to test if atributes are equal in python",
        "output": "",
        "rule": [
            "d17803"
        ]
    },
    {
        "instruction": "",
        "id": "q17804",
        "input": "get year from datetime date python",
        "output": "",
        "rule": [
            "d17804"
        ]
    },
    {
        "instruction": "",
        "id": "q17805",
        "input": "how to print a binary tree python",
        "output": "",
        "rule": [
            "d17805"
        ]
    },
    {
        "instruction": "",
        "id": "q17806",
        "input": "python last element of a multi diemnsional list",
        "output": "",
        "rule": [
            "d17806"
        ]
    },
    {
        "instruction": "",
        "id": "q17807",
        "input": "python self type str",
        "output": "",
        "rule": [
            "d17807"
        ]
    },
    {
        "instruction": "",
        "id": "q17808",
        "input": "rearrange matrix rows randomly python",
        "output": "",
        "rule": [
            "d17808"
        ]
    },
    {
        "instruction": "",
        "id": "q17809",
        "input": "python change numpy ndarray to strings",
        "output": "",
        "rule": [
            "d17809"
        ]
    },
    {
        "instruction": "",
        "id": "q17810",
        "input": "calculate the midpoint of a list of points python",
        "output": "",
        "rule": [
            "d17810"
        ]
    },
    {
        "instruction": "",
        "id": "q17811",
        "input": "python string compare single quote",
        "output": "",
        "rule": [
            "d17811"
        ]
    },
    {
        "instruction": "",
        "id": "q17812",
        "input": "how to inclrease memory allocated to python",
        "output": "",
        "rule": [
            "d17812"
        ]
    },
    {
        "instruction": "",
        "id": "q17813",
        "input": "\"any\" python list of strings",
        "output": "",
        "rule": [
            "d17813"
        ]
    },
    {
        "instruction": "",
        "id": "q17814",
        "input": "how to generate hash value from list in python program",
        "output": "",
        "rule": [
            "d17814"
        ]
    },
    {
        "instruction": "",
        "id": "q17815",
        "input": "get first digits of string only python",
        "output": "",
        "rule": [
            "d17815"
        ]
    },
    {
        "instruction": "",
        "id": "q17816",
        "input": "python check if every array element satisfies condition",
        "output": "",
        "rule": [
            "d17816"
        ]
    },
    {
        "instruction": "",
        "id": "q17817",
        "input": "how to do bit masking in python3",
        "output": "",
        "rule": [
            "d17817"
        ]
    },
    {
        "instruction": "",
        "id": "q17818",
        "input": "how to add offset in current time python",
        "output": "",
        "rule": [
            "d17818"
        ]
    },
    {
        "instruction": "",
        "id": "q17819",
        "input": "python char in a string to uppercase",
        "output": "",
        "rule": [
            "d17819"
        ]
    },
    {
        "instruction": "",
        "id": "q17820",
        "input": "python for in list except the last",
        "output": "",
        "rule": [
            "d17820"
        ]
    },
    {
        "instruction": "",
        "id": "q17821",
        "input": "how to graph a random walk in python",
        "output": "",
        "rule": [
            "d17821"
        ]
    },
    {
        "instruction": "",
        "id": "q17822",
        "input": "get columns names of table in python",
        "output": "",
        "rule": [
            "d17822"
        ]
    },
    {
        "instruction": "",
        "id": "q17823",
        "input": "how do i create a numpy aray from a python list",
        "output": "",
        "rule": [
            "d17823"
        ]
    },
    {
        "instruction": "",
        "id": "q17824",
        "input": "count elements in queue of python",
        "output": "",
        "rule": [
            "d17824"
        ]
    },
    {
        "instruction": "",
        "id": "q17825",
        "input": "how to fix the timeout error python requests",
        "output": "",
        "rule": [
            "d17825"
        ]
    },
    {
        "instruction": "",
        "id": "q17826",
        "input": "how to rotate a list left in python 3",
        "output": "",
        "rule": [
            "d17826"
        ]
    },
    {
        "instruction": "",
        "id": "q17827",
        "input": "python iterator last value",
        "output": "",
        "rule": [
            "d17827"
        ]
    },
    {
        "instruction": "",
        "id": "q17828",
        "input": "set limits on a function python 3",
        "output": "",
        "rule": [
            "d17828"
        ]
    },
    {
        "instruction": "",
        "id": "q17829",
        "input": "python psutil linux is consuming all the cpu",
        "output": "",
        "rule": [
            "d17829"
        ]
    },
    {
        "instruction": "",
        "id": "q17830",
        "input": "dot product python loop",
        "output": "",
        "rule": [
            "d17830"
        ]
    },
    {
        "instruction": "",
        "id": "q17831",
        "input": "python delete files with wild card",
        "output": "",
        "rule": [
            "d17831"
        ]
    },
    {
        "instruction": "",
        "id": "q17832",
        "input": "how to check python timestamp older than 5 minutes",
        "output": "",
        "rule": [
            "d17832"
        ]
    },
    {
        "instruction": "",
        "id": "q17833",
        "input": "python fastest way to map",
        "output": "",
        "rule": [
            "d17833"
        ]
    },
    {
        "instruction": "",
        "id": "q17834",
        "input": "python invalid filename characters",
        "output": "",
        "rule": [
            "d17834"
        ]
    },
    {
        "instruction": "",
        "id": "q17835",
        "input": "python submit form captcha requests",
        "output": "",
        "rule": [
            "d17835"
        ]
    },
    {
        "instruction": "",
        "id": "q17836",
        "input": "force string to date python",
        "output": "",
        "rule": [
            "d17836"
        ]
    },
    {
        "instruction": "",
        "id": "q17837",
        "input": "get first 100 rows python",
        "output": "",
        "rule": [
            "d17837"
        ]
    },
    {
        "instruction": "",
        "id": "q17838",
        "input": "python join list to string seperated by comma",
        "output": "",
        "rule": [
            "d17838"
        ]
    },
    {
        "instruction": "",
        "id": "q17839",
        "input": "how to remove columns from a data frame python",
        "output": "",
        "rule": [
            "d17839"
        ]
    },
    {
        "instruction": "",
        "id": "q17840",
        "input": "python doesn't stop on keyboard interrupt",
        "output": "",
        "rule": [
            "d17840"
        ]
    },
    {
        "instruction": "",
        "id": "q17841",
        "input": "python2 replace text in string",
        "output": "",
        "rule": [
            "d17841"
        ]
    },
    {
        "instruction": "",
        "id": "q17842",
        "input": "python read protobuf from bytes",
        "output": "",
        "rule": [
            "d17842"
        ]
    },
    {
        "instruction": "",
        "id": "q17843",
        "input": "how to grab the last value of an index in python",
        "output": "",
        "rule": [
            "d17843"
        ]
    },
    {
        "instruction": "",
        "id": "q17844",
        "input": "checking if the row value is the same with the row value above it in python",
        "output": "",
        "rule": [
            "d17844"
        ]
    },
    {
        "instruction": "",
        "id": "q17845",
        "input": "python string value of a json object",
        "output": "",
        "rule": [
            "d17845"
        ]
    },
    {
        "instruction": "",
        "id": "q17846",
        "input": "python how to trim trailing zeroes",
        "output": "",
        "rule": [
            "d17846"
        ]
    },
    {
        "instruction": "",
        "id": "q17847",
        "input": "list python column names",
        "output": "",
        "rule": [
            "d17847"
        ]
    },
    {
        "instruction": "",
        "id": "q17848",
        "input": "python gensim dictionary token2id for",
        "output": "",
        "rule": [
            "d17848"
        ]
    },
    {
        "instruction": "",
        "id": "q17849",
        "input": "how to return the top values in dictionary python",
        "output": "",
        "rule": [
            "d17849"
        ]
    },
    {
        "instruction": "",
        "id": "q17850",
        "input": "how to get time zone python",
        "output": "",
        "rule": [
            "d17850"
        ]
    },
    {
        "instruction": "",
        "id": "q17851",
        "input": "python string replace all",
        "output": "",
        "rule": [
            "d17851"
        ]
    },
    {
        "instruction": "",
        "id": "q17852",
        "input": "how to check if a line in a file has something in it python",
        "output": "",
        "rule": [
            "d17852"
        ]
    },
    {
        "instruction": "",
        "id": "q17853",
        "input": "cast list of strings to int python",
        "output": "",
        "rule": [
            "d17853"
        ]
    },
    {
        "instruction": "",
        "id": "q17854",
        "input": "python return largest even number in the arrary",
        "output": "",
        "rule": [
            "d17854"
        ]
    },
    {
        "instruction": "",
        "id": "q17855",
        "input": "python tree default dict",
        "output": "",
        "rule": [
            "d17855"
        ]
    },
    {
        "instruction": "",
        "id": "q17856",
        "input": "found the first occurrence of target string from strings python",
        "output": "",
        "rule": [
            "d17856"
        ]
    },
    {
        "instruction": "",
        "id": "q17857",
        "input": "python check a binary tree",
        "output": "",
        "rule": [
            "d17857"
        ]
    },
    {
        "instruction": "",
        "id": "q17858",
        "input": "python iterator for dict",
        "output": "",
        "rule": [
            "d17858"
        ]
    },
    {
        "instruction": "",
        "id": "q17859",
        "input": "python most frequent in a list",
        "output": "",
        "rule": [
            "d17859"
        ]
    },
    {
        "instruction": "",
        "id": "q17860",
        "input": "python numpy make empty array",
        "output": "",
        "rule": [
            "d17860"
        ]
    },
    {
        "instruction": "",
        "id": "q17861",
        "input": "python datetime format string with millisecond",
        "output": "",
        "rule": [
            "d17861"
        ]
    },
    {
        "instruction": "",
        "id": "q17862",
        "input": "how to only print the leaf nodes in a tree python",
        "output": "",
        "rule": [
            "d17862"
        ]
    },
    {
        "instruction": "",
        "id": "q17863",
        "input": "python 3 change string to a binary string",
        "output": "",
        "rule": [
            "d17863"
        ]
    },
    {
        "instruction": "",
        "id": "q17864",
        "input": "python remove postfix string",
        "output": "",
        "rule": [
            "d17864"
        ]
    },
    {
        "instruction": "",
        "id": "q17865",
        "input": "raise a umber to a power function python",
        "output": "",
        "rule": [
            "d17865"
        ]
    },
    {
        "instruction": "",
        "id": "q17866",
        "input": "python how to keep leading zeroes",
        "output": "",
        "rule": [
            "d17866"
        ]
    },
    {
        "instruction": "",
        "id": "q17867",
        "input": "python how to ensure function return type",
        "output": "",
        "rule": [
            "d17867"
        ]
    },
    {
        "instruction": "",
        "id": "q17868",
        "input": "python structured array to tensorflow tensor",
        "output": "",
        "rule": [
            "d17868"
        ]
    },
    {
        "instruction": "",
        "id": "q17869",
        "input": "python isfinite for all columns",
        "output": "",
        "rule": [
            "d17869"
        ]
    },
    {
        "instruction": "",
        "id": "q17870",
        "input": "python element wise product",
        "output": "",
        "rule": [
            "d17870"
        ]
    },
    {
        "instruction": "",
        "id": "q17871",
        "input": "check if date is valid python",
        "output": "",
        "rule": [
            "d17871"
        ]
    },
    {
        "instruction": "",
        "id": "q17872",
        "input": "create folder in s3 bucket python",
        "output": "",
        "rule": [
            "d17872"
        ]
    },
    {
        "instruction": "",
        "id": "q17873",
        "input": "median of array in python",
        "output": "",
        "rule": [
            "d17873"
        ]
    },
    {
        "instruction": "",
        "id": "q17874",
        "input": "python how to verify if a key exist",
        "output": "",
        "rule": [
            "d17874"
        ]
    },
    {
        "instruction": "",
        "id": "q17875",
        "input": "python how to remove from a certain word onward with prefix",
        "output": "",
        "rule": [
            "d17875"
        ]
    },
    {
        "instruction": "",
        "id": "q17876",
        "input": "python get computer uuid",
        "output": "",
        "rule": [
            "d17876"
        ]
    },
    {
        "instruction": "",
        "id": "q17877",
        "input": "in python how to check if my path given is that of a file or is a directory",
        "output": "",
        "rule": [
            "d17877"
        ]
    },
    {
        "instruction": "",
        "id": "q17878",
        "input": "sqlite change int to string python",
        "output": "",
        "rule": [
            "d17878"
        ]
    },
    {
        "instruction": "",
        "id": "q17879",
        "input": "python get the first file in a folder",
        "output": "",
        "rule": [
            "d17879"
        ]
    },
    {
        "instruction": "",
        "id": "q17880",
        "input": "check if a set contains one value python",
        "output": "",
        "rule": [
            "d17880"
        ]
    },
    {
        "instruction": "",
        "id": "q17881",
        "input": "python pprint string according to length",
        "output": "",
        "rule": [
            "d17881"
        ]
    },
    {
        "instruction": "",
        "id": "q17882",
        "input": "delete files in python using glob",
        "output": "",
        "rule": [
            "d17882"
        ]
    },
    {
        "instruction": "",
        "id": "q17883",
        "input": "python array of bytes from integers",
        "output": "",
        "rule": [
            "d17883"
        ]
    },
    {
        "instruction": "",
        "id": "q17884",
        "input": "python create empty array without numpy",
        "output": "",
        "rule": [
            "d17884"
        ]
    },
    {
        "instruction": "",
        "id": "q17885",
        "input": "how to combine sets in python",
        "output": "",
        "rule": [
            "d17885"
        ]
    },
    {
        "instruction": "",
        "id": "q17886",
        "input": "python clean up temporary files",
        "output": "",
        "rule": [
            "d17886"
        ]
    },
    {
        "instruction": "",
        "id": "q17887",
        "input": "check if column has null value python",
        "output": "",
        "rule": [
            "d17887"
        ]
    },
    {
        "instruction": "",
        "id": "q17888",
        "input": "python matrix dot multiplication",
        "output": "",
        "rule": [
            "d17888"
        ]
    },
    {
        "instruction": "",
        "id": "q17889",
        "input": "python get docker container name",
        "output": "",
        "rule": [
            "d17889"
        ]
    },
    {
        "instruction": "",
        "id": "q17890",
        "input": "python iterator file lines",
        "output": "",
        "rule": [
            "d17890"
        ]
    },
    {
        "instruction": "",
        "id": "q17891",
        "input": "python finding uppercase strings",
        "output": "",
        "rule": [
            "d17891"
        ]
    },
    {
        "instruction": "",
        "id": "q17892",
        "input": "pad zeros python string",
        "output": "",
        "rule": [
            "d17892"
        ]
    },
    {
        "instruction": "",
        "id": "q17893",
        "input": "python argparse example call function",
        "output": "",
        "rule": [
            "d17893"
        ]
    },
    {
        "instruction": "",
        "id": "q17894",
        "input": "how to capitalize the all letter in python",
        "output": "",
        "rule": [
            "d17894"
        ]
    },
    {
        "instruction": "",
        "id": "q17895",
        "input": "check exact substring python",
        "output": "",
        "rule": [
            "d17895"
        ]
    },
    {
        "instruction": "",
        "id": "q17896",
        "input": "python accuracy recall f1",
        "output": "",
        "rule": [
            "d17896"
        ]
    },
    {
        "instruction": "",
        "id": "q17897",
        "input": "argparse python namespace object has no attribute 'help'",
        "output": "",
        "rule": [
            "d17897"
        ]
    },
    {
        "instruction": "",
        "id": "q17898",
        "input": "extract bits of large numbers python",
        "output": "",
        "rule": [
            "d17898"
        ]
    },
    {
        "instruction": "",
        "id": "q17899",
        "input": "cast str to integer python",
        "output": "",
        "rule": [
            "d17899"
        ]
    },
    {
        "instruction": "",
        "id": "q17900",
        "input": "bit wise & in python",
        "output": "",
        "rule": [
            "d17900"
        ]
    },
    {
        "instruction": "",
        "id": "q17901",
        "input": "python callable arg must be a list",
        "output": "",
        "rule": [
            "d17901"
        ]
    },
    {
        "instruction": "",
        "id": "q17902",
        "input": "vs code python conda not found",
        "output": "",
        "rule": [
            "d17902"
        ]
    },
    {
        "instruction": "",
        "id": "q17903",
        "input": "inverse key and value in dictionary in python",
        "output": "",
        "rule": [
            "d17903"
        ]
    },
    {
        "instruction": "",
        "id": "q17904",
        "input": "identify type of python column",
        "output": "",
        "rule": [
            "d17904"
        ]
    },
    {
        "instruction": "",
        "id": "q17905",
        "input": "to flatten a list consisting of individual values as well as list of lists in python",
        "output": "",
        "rule": [
            "d17905"
        ]
    },
    {
        "instruction": "",
        "id": "q17906",
        "input": "how to truncate decimals python's",
        "output": "",
        "rule": [
            "d17906"
        ]
    },
    {
        "instruction": "",
        "id": "q17907",
        "input": "call function with exit in python",
        "output": "",
        "rule": [
            "d17907"
        ]
    },
    {
        "instruction": "",
        "id": "q17908",
        "input": "python get cpu cores in a cluster",
        "output": "",
        "rule": [
            "d17908"
        ]
    },
    {
        "instruction": "",
        "id": "q17909",
        "input": "flatten list of lists python into list",
        "output": "",
        "rule": [
            "d17909"
        ]
    },
    {
        "instruction": "",
        "id": "q17910",
        "input": "function in python to generate random numbers for a given average",
        "output": "",
        "rule": [
            "d17910"
        ]
    },
    {
        "instruction": "",
        "id": "q17911",
        "input": "add marks to string in python",
        "output": "",
        "rule": [
            "d17911"
        ]
    },
    {
        "instruction": "",
        "id": "q17912",
        "input": "python take n elements from iterator",
        "output": "",
        "rule": [
            "d17912"
        ]
    },
    {
        "instruction": "",
        "id": "q17913",
        "input": "python how to check if file older than",
        "output": "",
        "rule": [
            "d17913"
        ]
    },
    {
        "instruction": "",
        "id": "q17914",
        "input": "python check if whitespace",
        "output": "",
        "rule": [
            "d17914"
        ]
    },
    {
        "instruction": "",
        "id": "q17915",
        "input": "python data frame show index number of the max value of the vector",
        "output": "",
        "rule": [
            "d17915"
        ]
    },
    {
        "instruction": "",
        "id": "q17916",
        "input": "python detect key press do not block",
        "output": "",
        "rule": [
            "d17916"
        ]
    },
    {
        "instruction": "",
        "id": "q17917",
        "input": "python get month last day",
        "output": "",
        "rule": [
            "d17917"
        ]
    },
    {
        "instruction": "",
        "id": "q17918",
        "input": "how to permanently change a string from upper to lower case in python",
        "output": "",
        "rule": [
            "d17918"
        ]
    },
    {
        "instruction": "",
        "id": "q17919",
        "input": "how to get from datetime object about current time zone in python",
        "output": "",
        "rule": [
            "d17919"
        ]
    },
    {
        "instruction": "",
        "id": "q17920",
        "input": "elasticsearch bulk python faster",
        "output": "",
        "rule": [
            "d17920"
        ]
    },
    {
        "instruction": "",
        "id": "q17921",
        "input": "replace none with blank python dict",
        "output": "",
        "rule": [
            "d17921"
        ]
    },
    {
        "instruction": "",
        "id": "q17922",
        "input": "python checking string for whitespace",
        "output": "",
        "rule": [
            "d17922"
        ]
    },
    {
        "instruction": "",
        "id": "q17923",
        "input": "python string to javascript string",
        "output": "",
        "rule": [
            "d17923"
        ]
    },
    {
        "instruction": "",
        "id": "q17924",
        "input": "python dont imeditalte terminate",
        "output": "",
        "rule": [
            "d17924"
        ]
    },
    {
        "instruction": "",
        "id": "q17925",
        "input": "how to get all columns names in python",
        "output": "",
        "rule": [
            "d17925"
        ]
    },
    {
        "instruction": "",
        "id": "q17926",
        "input": "greater than or equal sign python",
        "output": "",
        "rule": [
            "d17926"
        ]
    },
    {
        "instruction": "",
        "id": "q17927",
        "input": "how to get top 5 values from dictionaty in python",
        "output": "",
        "rule": [
            "d17927"
        ]
    },
    {
        "instruction": "",
        "id": "q17928",
        "input": "python get size of the matrix",
        "output": "",
        "rule": [
            "d17928"
        ]
    },
    {
        "instruction": "",
        "id": "q17929",
        "input": "determine if a number is a prime factor python",
        "output": "",
        "rule": [
            "d17929"
        ]
    },
    {
        "instruction": "",
        "id": "q17930",
        "input": "python check not existing key",
        "output": "",
        "rule": [
            "d17930"
        ]
    },
    {
        "instruction": "",
        "id": "q17931",
        "input": "how to test if a set is a subset of another set python",
        "output": "",
        "rule": [
            "d17931"
        ]
    },
    {
        "instruction": "",
        "id": "q17932",
        "input": "python third friday date",
        "output": "",
        "rule": [
            "d17932"
        ]
    },
    {
        "instruction": "",
        "id": "q17933",
        "input": "python api call header and body",
        "output": "",
        "rule": [
            "d17933"
        ]
    },
    {
        "instruction": "",
        "id": "q17934",
        "input": "save an object to file python",
        "output": "",
        "rule": [
            "d17934"
        ]
    },
    {
        "instruction": "",
        "id": "q17935",
        "input": "flatten python list of lists",
        "output": "",
        "rule": [
            "d17935"
        ]
    },
    {
        "instruction": "",
        "id": "q17936",
        "input": "python calendar month how to get last day of month",
        "output": "",
        "rule": [
            "d17936"
        ]
    },
    {
        "instruction": "",
        "id": "q17937",
        "input": "python max argmax key lambda",
        "output": "",
        "rule": [
            "d17937"
        ]
    },
    {
        "instruction": "",
        "id": "q17938",
        "input": "python return a set",
        "output": "",
        "rule": [
            "d17938"
        ]
    },
    {
        "instruction": "",
        "id": "q17939",
        "input": "how go from list to string python",
        "output": "",
        "rule": [
            "d17939"
        ]
    },
    {
        "instruction": "",
        "id": "q17940",
        "input": "string to bytes ascii python",
        "output": "",
        "rule": [
            "d17940"
        ]
    },
    {
        "instruction": "",
        "id": "q17941",
        "input": "python get index for element in list with condition",
        "output": "",
        "rule": [
            "d17941"
        ]
    },
    {
        "instruction": "",
        "id": "q17942",
        "input": "python map instead of for loop",
        "output": "",
        "rule": [
            "d17942"
        ]
    },
    {
        "instruction": "",
        "id": "q17943",
        "input": "python how to exit a code",
        "output": "",
        "rule": [
            "d17943"
        ]
    },
    {
        "instruction": "",
        "id": "q17944",
        "input": "python 4 bytes to int32",
        "output": "",
        "rule": [
            "d17944"
        ]
    },
    {
        "instruction": "",
        "id": "q17945",
        "input": "isoformat python datetitme timezone",
        "output": "",
        "rule": [
            "d17945"
        ]
    },
    {
        "instruction": "",
        "id": "q17946",
        "input": "python check char type",
        "output": "",
        "rule": [
            "d17946"
        ]
    },
    {
        "instruction": "",
        "id": "q17947",
        "input": "python cursor iterate fetchall",
        "output": "",
        "rule": [
            "d17947"
        ]
    },
    {
        "instruction": "",
        "id": "q17948",
        "input": "get duplicate index python",
        "output": "",
        "rule": [
            "d17948"
        ]
    },
    {
        "instruction": "",
        "id": "q17949",
        "input": "elements of list to string python",
        "output": "",
        "rule": [
            "d17949"
        ]
    },
    {
        "instruction": "",
        "id": "q17950",
        "input": "delete an entry out of a dictionary python",
        "output": "",
        "rule": [
            "d17950"
        ]
    },
    {
        "instruction": "",
        "id": "q17951",
        "input": "python subsitute a variable with the variable text",
        "output": "",
        "rule": [
            "d17951"
        ]
    },
    {
        "instruction": "",
        "id": "q17952",
        "input": "check if object is not empty python",
        "output": "",
        "rule": [
            "d17952"
        ]
    },
    {
        "instruction": "",
        "id": "q17953",
        "input": "python for n in arange loop numper of times",
        "output": "",
        "rule": [
            "d17953"
        ]
    },
    {
        "instruction": "",
        "id": "q17954",
        "input": "python verify if type is string",
        "output": "",
        "rule": [
            "d17954"
        ]
    },
    {
        "instruction": "",
        "id": "q17955",
        "input": "python if key doesn't exist create",
        "output": "",
        "rule": [
            "d17955"
        ]
    },
    {
        "instruction": "",
        "id": "q17956",
        "input": "python remove duplicate in collection",
        "output": "",
        "rule": [
            "d17956"
        ]
    },
    {
        "instruction": "",
        "id": "q17957",
        "input": "round to closest defined value python",
        "output": "",
        "rule": [
            "d17957"
        ]
    },
    {
        "instruction": "",
        "id": "q17958",
        "input": "python cycle detection dfs stack",
        "output": "",
        "rule": [
            "d17958"
        ]
    },
    {
        "instruction": "",
        "id": "q17959",
        "input": "how to create a set within a file in python",
        "output": "",
        "rule": [
            "d17959"
        ]
    },
    {
        "instruction": "",
        "id": "q17960",
        "input": "replace a substring of characters in python",
        "output": "",
        "rule": [
            "d17960"
        ]
    },
    {
        "instruction": "",
        "id": "q17961",
        "input": "how to read a text file in python to a set",
        "output": "",
        "rule": [
            "d17961"
        ]
    },
    {
        "instruction": "",
        "id": "q17962",
        "input": "how to tell if a directory is empty in python",
        "output": "",
        "rule": [
            "d17962"
        ]
    },
    {
        "instruction": "",
        "id": "q17963",
        "input": "tell python to quit else rerun main function",
        "output": "",
        "rule": [
            "d17963"
        ]
    },
    {
        "instruction": "",
        "id": "q17964",
        "input": "python django name 'static' is not defined",
        "output": "",
        "rule": [
            "d17964"
        ]
    },
    {
        "instruction": "",
        "id": "q17965",
        "input": "python checking if key exists in shelve",
        "output": "",
        "rule": [
            "d17965"
        ]
    },
    {
        "instruction": "",
        "id": "q17966",
        "input": "python 2^3 exponents using pow",
        "output": "",
        "rule": [
            "d17966"
        ]
    },
    {
        "instruction": "",
        "id": "q17967",
        "input": "implementation of saliency models in python",
        "output": "",
        "rule": [
            "d17967"
        ]
    },
    {
        "instruction": "",
        "id": "q17968",
        "input": "python generate permutions of sequence",
        "output": "",
        "rule": [
            "d17968"
        ]
    },
    {
        "instruction": "",
        "id": "q17969",
        "input": "how do i skip a line without entering it in python",
        "output": "",
        "rule": [
            "d17969"
        ]
    },
    {
        "instruction": "",
        "id": "q17970",
        "input": "python for longest substring in list",
        "output": "",
        "rule": [
            "d17970"
        ]
    },
    {
        "instruction": "",
        "id": "q17971",
        "input": "python 3 parse iso date",
        "output": "",
        "rule": [
            "d17971"
        ]
    },
    {
        "instruction": "",
        "id": "q17972",
        "input": "how to flatten image in python",
        "output": "",
        "rule": [
            "d17972"
        ]
    },
    {
        "instruction": "",
        "id": "q17973",
        "input": "readlines function in python deleting spaces",
        "output": "",
        "rule": [
            "d17973"
        ]
    },
    {
        "instruction": "",
        "id": "q17974",
        "input": "how to check a column type in python",
        "output": "",
        "rule": [
            "d17974"
        ]
    },
    {
        "instruction": "",
        "id": "q17975",
        "input": "python get function by full path",
        "output": "",
        "rule": [
            "d17975"
        ]
    },
    {
        "instruction": "",
        "id": "q17976",
        "input": "finding the last occurence of a character in a string in python",
        "output": "",
        "rule": [
            "d17976"
        ]
    },
    {
        "instruction": "",
        "id": "q17977",
        "input": "python trim white space on column names",
        "output": "",
        "rule": [
            "d17977"
        ]
    },
    {
        "instruction": "",
        "id": "q17978",
        "input": "how to random sample part of normal distribution in python",
        "output": "",
        "rule": [
            "d17978"
        ]
    },
    {
        "instruction": "",
        "id": "q17979",
        "input": "python sqlite3 cursor context",
        "output": "",
        "rule": [
            "d17979"
        ]
    },
    {
        "instruction": "",
        "id": "q17980",
        "input": "python test if line in file",
        "output": "",
        "rule": [
            "d17980"
        ]
    },
    {
        "instruction": "",
        "id": "q17981",
        "input": "python3 decode b string",
        "output": "",
        "rule": [
            "d17981"
        ]
    },
    {
        "instruction": "",
        "id": "q17982",
        "input": "python index of the second largest value in a 2d array",
        "output": "",
        "rule": [
            "d17982"
        ]
    },
    {
        "instruction": "",
        "id": "q17983",
        "input": "turn list of str into int python",
        "output": "",
        "rule": [
            "d17983"
        ]
    },
    {
        "instruction": "",
        "id": "q17984",
        "input": "python expected type 'list', got 'iterator' instead",
        "output": "",
        "rule": [
            "d17984"
        ]
    },
    {
        "instruction": "",
        "id": "q17985",
        "input": "python numpy read array from csv",
        "output": "",
        "rule": [
            "d17985"
        ]
    },
    {
        "instruction": "",
        "id": "q17986",
        "input": "how to use pylint for python 3",
        "output": "",
        "rule": [
            "d17986"
        ]
    },
    {
        "instruction": "",
        "id": "q17987",
        "input": "log distribution in python with a zero value",
        "output": "",
        "rule": [
            "d17987"
        ]
    },
    {
        "instruction": "",
        "id": "q17988",
        "input": "python right bitwise overload",
        "output": "",
        "rule": [
            "d17988"
        ]
    },
    {
        "instruction": "",
        "id": "q17989",
        "input": "python map with conditional function",
        "output": "",
        "rule": [
            "d17989"
        ]
    },
    {
        "instruction": "",
        "id": "q17990",
        "input": "building a url with a query string python",
        "output": "",
        "rule": [
            "d17990"
        ]
    },
    {
        "instruction": "",
        "id": "q17991",
        "input": "python check if path is file or folder",
        "output": "",
        "rule": [
            "d17991"
        ]
    },
    {
        "instruction": "",
        "id": "q17992",
        "input": "python if column is not null",
        "output": "",
        "rule": [
            "d17992"
        ]
    },
    {
        "instruction": "",
        "id": "q17993",
        "input": "determine the mth to last element of a sequence python",
        "output": "",
        "rule": [
            "d17993"
        ]
    },
    {
        "instruction": "",
        "id": "q17994",
        "input": "how to read file from s3 bucket in python",
        "output": "",
        "rule": [
            "d17994"
        ]
    },
    {
        "instruction": "",
        "id": "q17995",
        "input": "how to get the first file of the path python glob",
        "output": "",
        "rule": [
            "d17995"
        ]
    },
    {
        "instruction": "",
        "id": "q17996",
        "input": "truncate to two decimals python",
        "output": "",
        "rule": [
            "d17996"
        ]
    },
    {
        "instruction": "",
        "id": "q17997",
        "input": "loading a series of images in python and resizing them",
        "output": "",
        "rule": [
            "d17997"
        ]
    },
    {
        "instruction": "",
        "id": "q17998",
        "input": "storing elements of a list to string python",
        "output": "",
        "rule": [
            "d17998"
        ]
    },
    {
        "instruction": "",
        "id": "q17999",
        "input": "diffrence bytes bwtween python2 and python3",
        "output": "",
        "rule": [
            "d17999"
        ]
    },
    {
        "instruction": "",
        "id": "q18000",
        "input": "check if line in file python",
        "output": "",
        "rule": [
            "d18000"
        ]
    },
    {
        "instruction": "",
        "id": "q18001",
        "input": "python see if 2 paths equal",
        "output": "",
        "rule": [
            "d18001"
        ]
    },
    {
        "instruction": "",
        "id": "q18002",
        "input": "splitting a tuple into variables python",
        "output": "",
        "rule": [
            "d18002"
        ]
    },
    {
        "instruction": "",
        "id": "q18003",
        "input": "python get the last index of a slice",
        "output": "",
        "rule": [
            "d18003"
        ]
    },
    {
        "instruction": "",
        "id": "q18004",
        "input": "check if a list is sequential python",
        "output": "",
        "rule": [
            "d18004"
        ]
    },
    {
        "instruction": "",
        "id": "q18005",
        "input": "python to get the uid of a process",
        "output": "",
        "rule": [
            "d18005"
        ]
    },
    {
        "instruction": "",
        "id": "q18006",
        "input": "parse a url in python and get the hostname",
        "output": "",
        "rule": [
            "d18006"
        ]
    },
    {
        "instruction": "",
        "id": "q18007",
        "input": "jira python issue fixversion",
        "output": "",
        "rule": [
            "d18007"
        ]
    },
    {
        "instruction": "",
        "id": "q18008",
        "input": "finding the minimum in a vector in python",
        "output": "",
        "rule": [
            "d18008"
        ]
    },
    {
        "instruction": "",
        "id": "q18009",
        "input": "greater than comparison python3",
        "output": "",
        "rule": [
            "d18009"
        ]
    },
    {
        "instruction": "",
        "id": "q18010",
        "input": "last item of series in python",
        "output": "",
        "rule": [
            "d18010"
        ]
    },
    {
        "instruction": "",
        "id": "q18011",
        "input": "python parser call from script",
        "output": "",
        "rule": [
            "d18011"
        ]
    },
    {
        "instruction": "",
        "id": "q18012",
        "input": "get with default value python",
        "output": "",
        "rule": [
            "d18012"
        ]
    },
    {
        "instruction": "",
        "id": "q18013",
        "input": "how to use mulde argparse to input parmeters into python program",
        "output": "",
        "rule": [
            "d18013"
        ]
    },
    {
        "instruction": "",
        "id": "q18014",
        "input": "python replace string until no further replaces made",
        "output": "",
        "rule": [
            "d18014"
        ]
    },
    {
        "instruction": "",
        "id": "q18015",
        "input": "greatest common divisor of 3 numbers python",
        "output": "",
        "rule": [
            "d18015"
        ]
    },
    {
        "instruction": "",
        "id": "q18016",
        "input": "replace duplicare in python list",
        "output": "",
        "rule": [
            "d18016"
        ]
    },
    {
        "instruction": "",
        "id": "q18017",
        "input": "python method to replace multiple characters",
        "output": "",
        "rule": [
            "d18017"
        ]
    },
    {
        "instruction": "",
        "id": "q18018",
        "input": "make jpeg default in python",
        "output": "",
        "rule": [
            "d18018"
        ]
    },
    {
        "instruction": "",
        "id": "q18019",
        "input": "making a string all uppercase python",
        "output": "",
        "rule": [
            "d18019"
        ]
    },
    {
        "instruction": "",
        "id": "q18020",
        "input": "how to pass the current time as variable in python to sql",
        "output": "",
        "rule": [
            "d18020"
        ]
    },
    {
        "instruction": "",
        "id": "q18021",
        "input": "python test assert not equal",
        "output": "",
        "rule": [
            "d18021"
        ]
    },
    {
        "instruction": "",
        "id": "q18022",
        "input": "replace is not working in python",
        "output": "",
        "rule": [
            "d18022"
        ]
    },
    {
        "instruction": "",
        "id": "q18023",
        "input": "how to check if a node is a leaf in python",
        "output": "",
        "rule": [
            "d18023"
        ]
    },
    {
        "instruction": "",
        "id": "q18024",
        "input": "how to rotate a list of numbers in python",
        "output": "",
        "rule": [
            "d18024"
        ]
    },
    {
        "instruction": "",
        "id": "q18025",
        "input": "python bitwise first bit on",
        "output": "",
        "rule": [
            "d18025"
        ]
    },
    {
        "instruction": "",
        "id": "q18026",
        "input": "python urllib get domain",
        "output": "",
        "rule": [
            "d18026"
        ]
    },
    {
        "instruction": "",
        "id": "q18027",
        "input": "what code in python capitalizes the first letter of the word",
        "output": "",
        "rule": [
            "d18027"
        ]
    },
    {
        "instruction": "",
        "id": "q18028",
        "input": "python get min value from column",
        "output": "",
        "rule": [
            "d18028"
        ]
    },
    {
        "instruction": "",
        "id": "q18029",
        "input": "python last day in month",
        "output": "",
        "rule": [
            "d18029"
        ]
    },
    {
        "instruction": "",
        "id": "q18030",
        "input": "generating a checksum of a file python",
        "output": "",
        "rule": [
            "d18030"
        ]
    },
    {
        "instruction": "",
        "id": "q18031",
        "input": "fibonacci sequence python lambda",
        "output": "",
        "rule": [
            "d18031"
        ]
    },
    {
        "instruction": "",
        "id": "q18032",
        "input": "python program to determine days number in a month in a year",
        "output": "",
        "rule": [
            "d18032"
        ]
    },
    {
        "instruction": "",
        "id": "q18033",
        "input": "python get key if it exists",
        "output": "",
        "rule": [
            "d18033"
        ]
    },
    {
        "instruction": "",
        "id": "q18034",
        "input": "python dateutil get last day of this month",
        "output": "",
        "rule": [
            "d18034"
        ]
    },
    {
        "instruction": "",
        "id": "q18035",
        "input": "change json text to string python",
        "output": "",
        "rule": [
            "d18035"
        ]
    },
    {
        "instruction": "",
        "id": "q18036",
        "input": "python itertools tuple for every two elements",
        "output": "",
        "rule": [
            "d18036"
        ]
    },
    {
        "instruction": "",
        "id": "q18037",
        "input": "python3 dict to graphviz nodes",
        "output": "",
        "rule": [
            "d18037"
        ]
    },
    {
        "instruction": "",
        "id": "q18038",
        "input": "python open file or stdin",
        "output": "",
        "rule": [
            "d18038"
        ]
    },
    {
        "instruction": "",
        "id": "q18039",
        "input": "python how to get the file extension",
        "output": "",
        "rule": [
            "d18039"
        ]
    },
    {
        "instruction": "",
        "id": "q18040",
        "input": "how to cut decimals in python",
        "output": "",
        "rule": [
            "d18040"
        ]
    },
    {
        "instruction": "",
        "id": "q18041",
        "input": "python how to combine a list to make a string",
        "output": "",
        "rule": [
            "d18041"
        ]
    },
    {
        "instruction": "",
        "id": "q18042",
        "input": "python, remove special characters [spaces,'(', and ')'] from column names",
        "output": "",
        "rule": [
            "d18042"
        ]
    },
    {
        "instruction": "",
        "id": "q18043",
        "input": "how to check image pixel size python",
        "output": "",
        "rule": [
            "d18043"
        ]
    },
    {
        "instruction": "",
        "id": "q18044",
        "input": "elasticsearch python bulk stackoverflow",
        "output": "",
        "rule": [
            "d18044"
        ]
    },
    {
        "instruction": "",
        "id": "q18045",
        "input": "how to display contents a text file in python",
        "output": "",
        "rule": [
            "d18045"
        ]
    },
    {
        "instruction": "",
        "id": "q18046",
        "input": "python get the model number",
        "output": "",
        "rule": [
            "d18046"
        ]
    },
    {
        "instruction": "",
        "id": "q18047",
        "input": "how to do normalcdf in python",
        "output": "",
        "rule": [
            "d18047"
        ]
    },
    {
        "instruction": "",
        "id": "q18048",
        "input": "get first file in a folder python",
        "output": "",
        "rule": [
            "d18048"
        ]
    },
    {
        "instruction": "",
        "id": "q18049",
        "input": "how to count a list of tokens in python",
        "output": "",
        "rule": [
            "d18049"
        ]
    },
    {
        "instruction": "",
        "id": "q18050",
        "input": "python graphviz create dot file",
        "output": "",
        "rule": [
            "d18050"
        ]
    },
    {
        "instruction": "",
        "id": "q18051",
        "input": "python midpoint of two numbers",
        "output": "",
        "rule": [
            "d18051"
        ]
    },
    {
        "instruction": "",
        "id": "q18052",
        "input": "how to get longest string in an array of string python",
        "output": "",
        "rule": [
            "d18052"
        ]
    },
    {
        "instruction": "",
        "id": "q18053",
        "input": "python read datetime from text string",
        "output": "",
        "rule": [
            "d18053"
        ]
    },
    {
        "instruction": "",
        "id": "q18054",
        "input": "python deleat duplicates in list",
        "output": "",
        "rule": [
            "d18054"
        ]
    },
    {
        "instruction": "",
        "id": "q18055",
        "input": "return longest strings substring using python",
        "output": "",
        "rule": [
            "d18055"
        ]
    },
    {
        "instruction": "",
        "id": "q18056",
        "input": "get key with largest value in python",
        "output": "",
        "rule": [
            "d18056"
        ]
    },
    {
        "instruction": "",
        "id": "q18057",
        "input": "python genrator take next",
        "output": "",
        "rule": [
            "d18057"
        ]
    },
    {
        "instruction": "",
        "id": "q18058",
        "input": "python xml delete element elementtree",
        "output": "",
        "rule": [
            "d18058"
        ]
    },
    {
        "instruction": "",
        "id": "q18059",
        "input": "python drop a key in dictionary",
        "output": "",
        "rule": [
            "d18059"
        ]
    },
    {
        "instruction": "",
        "id": "q18060",
        "input": "python remove leading zeroes",
        "output": "",
        "rule": [
            "d18060"
        ]
    },
    {
        "instruction": "",
        "id": "q18061",
        "input": "how to check type of column in python",
        "output": "",
        "rule": [
            "d18061"
        ]
    },
    {
        "instruction": "",
        "id": "q18062",
        "input": "python 3 create date from string",
        "output": "",
        "rule": [
            "d18062"
        ]
    },
    {
        "instruction": "",
        "id": "q18063",
        "input": "python cast as an enum type",
        "output": "",
        "rule": [
            "d18063"
        ]
    },
    {
        "instruction": "",
        "id": "q18064",
        "input": "how to check column type in python",
        "output": "",
        "rule": [
            "d18064"
        ]
    },
    {
        "instruction": "",
        "id": "q18065",
        "input": "remove all values in dictionary python",
        "output": "",
        "rule": [
            "d18065"
        ]
    },
    {
        "instruction": "",
        "id": "q18066",
        "input": "python check if valid date",
        "output": "",
        "rule": [
            "d18066"
        ]
    },
    {
        "instruction": "",
        "id": "q18067",
        "input": "python list local branches git",
        "output": "",
        "rule": [
            "d18067"
        ]
    },
    {
        "instruction": "",
        "id": "q18068",
        "input": "implementation of cache memory performance in python",
        "output": "",
        "rule": [
            "d18068"
        ]
    },
    {
        "instruction": "",
        "id": "q18069",
        "input": "iterate till second last element in a list python",
        "output": "",
        "rule": [
            "d18069"
        ]
    },
    {
        "instruction": "",
        "id": "q18070",
        "input": "python requests detailed log",
        "output": "",
        "rule": [
            "d18070"
        ]
    },
    {
        "instruction": "",
        "id": "q18071",
        "input": "how to test if a wav file says something python",
        "output": "",
        "rule": [
            "d18071"
        ]
    },
    {
        "instruction": "",
        "id": "q18072",
        "input": "python decide if a qapplication instance is active",
        "output": "",
        "rule": [
            "d18072"
        ]
    },
    {
        "instruction": "",
        "id": "q18073",
        "input": "get the last day of the month in a list python",
        "output": "",
        "rule": [
            "d18073"
        ]
    },
    {
        "instruction": "",
        "id": "q18074",
        "input": "python memview using size",
        "output": "",
        "rule": [
            "d18074"
        ]
    },
    {
        "instruction": "",
        "id": "q18075",
        "input": "how to go to a next line from a current line in line python",
        "output": "",
        "rule": [
            "d18075"
        ]
    },
    {
        "instruction": "",
        "id": "q18076",
        "input": "python openpyxl set cell color",
        "output": "",
        "rule": [
            "d18076"
        ]
    },
    {
        "instruction": "",
        "id": "q18077",
        "input": "python check if file is writeable",
        "output": "",
        "rule": [
            "d18077"
        ]
    },
    {
        "instruction": "",
        "id": "q18078",
        "input": "how do i minimize tabs in python",
        "output": "",
        "rule": [
            "d18078"
        ]
    },
    {
        "instruction": "",
        "id": "q18079",
        "input": "how to choose between yes or no in python",
        "output": "",
        "rule": [
            "d18079"
        ]
    },
    {
        "instruction": "",
        "id": "q18080",
        "input": "python expected type 'list', got 'iterator] instead",
        "output": "",
        "rule": [
            "d18080"
        ]
    },
    {
        "instruction": "",
        "id": "q18081",
        "input": "python how to check if file is empty",
        "output": "",
        "rule": [
            "d18081"
        ]
    },
    {
        "instruction": "",
        "id": "q18082",
        "input": "python generate a random number from a normal distribution",
        "output": "",
        "rule": [
            "d18082"
        ]
    },
    {
        "instruction": "",
        "id": "q18083",
        "input": "python repeat elements in a list different amount of times",
        "output": "",
        "rule": [
            "d18083"
        ]
    },
    {
        "instruction": "",
        "id": "q18084",
        "input": "python checking if a value is in an enumeration",
        "output": "",
        "rule": [
            "d18084"
        ]
    },
    {
        "instruction": "",
        "id": "q18085",
        "input": "check if set is subset of another set python",
        "output": "",
        "rule": [
            "d18085"
        ]
    },
    {
        "instruction": "",
        "id": "q18086",
        "input": "python code to check numbers of rows and columns in a dataset",
        "output": "",
        "rule": [
            "d18086"
        ]
    },
    {
        "instruction": "",
        "id": "q18087",
        "input": "how to check keyboard input with python",
        "output": "",
        "rule": [
            "d18087"
        ]
    },
    {
        "instruction": "",
        "id": "q18088",
        "input": "python everything got changed to lowercase",
        "output": "",
        "rule": [
            "d18088"
        ]
    },
    {
        "instruction": "",
        "id": "q18089",
        "input": "writing text and a variable to a file in python",
        "output": "",
        "rule": [
            "d18089"
        ]
    },
    {
        "instruction": "",
        "id": "q18090",
        "input": "capitalize first element of the list python",
        "output": "",
        "rule": [
            "d18090"
        ]
    },
    {
        "instruction": "",
        "id": "q18091",
        "input": "how to return the key with the largest value in python",
        "output": "",
        "rule": [
            "d18091"
        ]
    },
    {
        "instruction": "",
        "id": "q18092",
        "input": "print only limited element of a list python",
        "output": "",
        "rule": [
            "d18092"
        ]
    },
    {
        "instruction": "",
        "id": "q18093",
        "input": "how to test if str is int python",
        "output": "",
        "rule": [
            "d18093"
        ]
    },
    {
        "instruction": "",
        "id": "q18094",
        "input": "python get cursor position",
        "output": "",
        "rule": [
            "d18094"
        ]
    },
    {
        "instruction": "",
        "id": "q18095",
        "input": "python graph dict of set",
        "output": "",
        "rule": [
            "d18095"
        ]
    },
    {
        "instruction": "",
        "id": "q18096",
        "input": "condense multiple lists to single list python",
        "output": "",
        "rule": [
            "d18096"
        ]
    },
    {
        "instruction": "",
        "id": "q18097",
        "input": "python calculate bounding sphere from points",
        "output": "",
        "rule": [
            "d18097"
        ]
    },
    {
        "instruction": "",
        "id": "q18098",
        "input": "python configuration file check if it exsists",
        "output": "",
        "rule": [
            "d18098"
        ]
    },
    {
        "instruction": "",
        "id": "q18099",
        "input": "python3 os' has no attribute 'getuid'",
        "output": "",
        "rule": [
            "d18099"
        ]
    },
    {
        "instruction": "",
        "id": "q18100",
        "input": "write a function checking whether a number is prime or not python using def",
        "output": "",
        "rule": [
            "d18100"
        ]
    },
    {
        "instruction": "",
        "id": "q18101",
        "input": "pop will remove popped up items in python",
        "output": "",
        "rule": [
            "d18101"
        ]
    },
    {
        "instruction": "",
        "id": "q18102",
        "input": "python limit number to two decimals",
        "output": "",
        "rule": [
            "d18102"
        ]
    },
    {
        "instruction": "",
        "id": "q18103",
        "input": "how to split a word with no whitespaceinto a list in python",
        "output": "",
        "rule": [
            "d18103"
        ]
    },
    {
        "instruction": "",
        "id": "q18104",
        "input": "if any true in array return true python",
        "output": "",
        "rule": [
            "d18104"
        ]
    },
    {
        "instruction": "",
        "id": "q18105",
        "input": "printing out the leaves of a tree in python",
        "output": "",
        "rule": [
            "d18105"
        ]
    },
    {
        "instruction": "",
        "id": "q18106",
        "input": "python get adb devices id",
        "output": "",
        "rule": [
            "d18106"
        ]
    },
    {
        "instruction": "",
        "id": "q18107",
        "input": "lowercase + string object + python",
        "output": "",
        "rule": [
            "d18107"
        ]
    },
    {
        "instruction": "",
        "id": "q18108",
        "input": "check if file exist in key python",
        "output": "",
        "rule": [
            "d18108"
        ]
    },
    {
        "instruction": "",
        "id": "q18109",
        "input": "python decode protobuf without proto",
        "output": "",
        "rule": [
            "d18109"
        ]
    },
    {
        "instruction": "",
        "id": "q18110",
        "input": "python docstring specify yield type",
        "output": "",
        "rule": [
            "d18110"
        ]
    },
    {
        "instruction": "",
        "id": "q18111",
        "input": "python add element for a set",
        "output": "",
        "rule": [
            "d18111"
        ]
    },
    {
        "instruction": "",
        "id": "q18112",
        "input": "python first index of a list that validates a condition",
        "output": "",
        "rule": [
            "d18112"
        ]
    },
    {
        "instruction": "",
        "id": "q18113",
        "input": "list azure containers with specific name type using python",
        "output": "",
        "rule": [
            "d18113"
        ]
    },
    {
        "instruction": "",
        "id": "q18114",
        "input": "python return index of item in list satisfying a condition",
        "output": "",
        "rule": [
            "d18114"
        ]
    },
    {
        "instruction": "",
        "id": "q18115",
        "input": "how to print size of tensor in python in tensorflow",
        "output": "",
        "rule": [
            "d18115"
        ]
    },
    {
        "instruction": "",
        "id": "q18116",
        "input": "how to get the top values in a dictionary for python",
        "output": "",
        "rule": [
            "d18116"
        ]
    },
    {
        "instruction": "",
        "id": "q18117",
        "input": "check if float has some value python",
        "output": "",
        "rule": [
            "d18117"
        ]
    },
    {
        "instruction": "",
        "id": "q18118",
        "input": "last elemnts of a list in python",
        "output": "",
        "rule": [
            "d18118"
        ]
    },
    {
        "instruction": "",
        "id": "q18119",
        "input": "python numpy fill arraw with sine wave",
        "output": "",
        "rule": [
            "d18119"
        ]
    },
    {
        "instruction": "",
        "id": "q18120",
        "input": "how to do normalcdf on python",
        "output": "",
        "rule": [
            "d18120"
        ]
    },
    {
        "instruction": "",
        "id": "q18121",
        "input": "python multiple string substitutions",
        "output": "",
        "rule": [
            "d18121"
        ]
    },
    {
        "instruction": "",
        "id": "q18122",
        "input": "python if variable type is not str",
        "output": "",
        "rule": [
            "d18122"
        ]
    },
    {
        "instruction": "",
        "id": "q18123",
        "input": "how to bitmask python",
        "output": "",
        "rule": [
            "d18123"
        ]
    },
    {
        "instruction": "",
        "id": "q18124",
        "input": "python filter a dictionary key,valyue",
        "output": "",
        "rule": [
            "d18124"
        ]
    },
    {
        "instruction": "",
        "id": "q18125",
        "input": "python if type is a string",
        "output": "",
        "rule": [
            "d18125"
        ]
    },
    {
        "instruction": "",
        "id": "q18126",
        "input": "log of zero define in python",
        "output": "",
        "rule": [
            "d18126"
        ]
    },
    {
        "instruction": "",
        "id": "q18127",
        "input": "check to see if a value in directory is empty in python",
        "output": "",
        "rule": [
            "d18127"
        ]
    },
    {
        "instruction": "",
        "id": "q18128",
        "input": "python if file larger than",
        "output": "",
        "rule": [
            "d18128"
        ]
    },
    {
        "instruction": "",
        "id": "q18129",
        "input": "how to display a dictionary with extra indentation python",
        "output": "",
        "rule": [
            "d18129"
        ]
    },
    {
        "instruction": "",
        "id": "q18130",
        "input": "how to indent a line of text in python",
        "output": "",
        "rule": [
            "d18130"
        ]
    },
    {
        "instruction": "",
        "id": "q18131",
        "input": "to check if a set is empty in python",
        "output": "",
        "rule": [
            "d18131"
        ]
    },
    {
        "instruction": "",
        "id": "q18132",
        "input": "python dict from another dict",
        "output": "",
        "rule": [
            "d18132"
        ]
    },
    {
        "instruction": "",
        "id": "q18133",
        "input": "date time from string python",
        "output": "",
        "rule": [
            "d18133"
        ]
    },
    {
        "instruction": "",
        "id": "q18134",
        "input": "read the last line/raw of file in python",
        "output": "",
        "rule": [
            "d18134"
        ]
    },
    {
        "instruction": "",
        "id": "q18135",
        "input": "time a function using timeit python",
        "output": "",
        "rule": [
            "d18135"
        ]
    },
    {
        "instruction": "",
        "id": "q18136",
        "input": "python if any element in array meets conditions",
        "output": "",
        "rule": [
            "d18136"
        ]
    },
    {
        "instruction": "",
        "id": "q18137",
        "input": "how to name enum python",
        "output": "",
        "rule": [
            "d18137"
        ]
    },
    {
        "instruction": "",
        "id": "q18138",
        "input": "python protobuf from byte array",
        "output": "",
        "rule": [
            "d18138"
        ]
    },
    {
        "instruction": "",
        "id": "q18139",
        "input": "python detect if path is valid",
        "output": "",
        "rule": [
            "d18139"
        ]
    },
    {
        "instruction": "",
        "id": "q18140",
        "input": "python generate hash of list",
        "output": "",
        "rule": [
            "d18140"
        ]
    },
    {
        "instruction": "",
        "id": "q18141",
        "input": "python base64 encoded missing padding",
        "output": "",
        "rule": [
            "d18141"
        ]
    },
    {
        "instruction": "",
        "id": "q18142",
        "input": "is python string comparison case sensitive",
        "output": "",
        "rule": [
            "d18142"
        ]
    },
    {
        "instruction": "",
        "id": "q18143",
        "input": "determine a file exist or not python",
        "output": "",
        "rule": [
            "d18143"
        ]
    },
    {
        "instruction": "",
        "id": "q18144",
        "input": "treeview row selection python",
        "output": "",
        "rule": [
            "d18144"
        ]
    },
    {
        "instruction": "",
        "id": "q18145",
        "input": "python dir to show public attributes",
        "output": "",
        "rule": [
            "d18145"
        ]
    },
    {
        "instruction": "",
        "id": "q18146",
        "input": "python mssql send query that uses in tuple",
        "output": "",
        "rule": [
            "d18146"
        ]
    },
    {
        "instruction": "",
        "id": "q18147",
        "input": "how to have python skip empty lines",
        "output": "",
        "rule": [
            "d18147"
        ]
    },
    {
        "instruction": "",
        "id": "q18148",
        "input": "how to define output path in python",
        "output": "",
        "rule": [
            "d18148"
        ]
    },
    {
        "instruction": "",
        "id": "q18149",
        "input": "python array to tensor",
        "output": "",
        "rule": [
            "d18149"
        ]
    },
    {
        "instruction": "",
        "id": "q18150",
        "input": "set python path for pylint",
        "output": "",
        "rule": [
            "d18150"
        ]
    },
    {
        "instruction": "",
        "id": "q18151",
        "input": "passing python object as a string",
        "output": "",
        "rule": [
            "d18151"
        ]
    },
    {
        "instruction": "",
        "id": "q18152",
        "input": "python spider memery usage not stop growing",
        "output": "",
        "rule": [
            "d18152"
        ]
    },
    {
        "instruction": "",
        "id": "q18153",
        "input": "how to reurn the key for a largest value in python",
        "output": "",
        "rule": [
            "d18153"
        ]
    },
    {
        "instruction": "",
        "id": "q18154",
        "input": "max size of a key in python",
        "output": "",
        "rule": [
            "d18154"
        ]
    },
    {
        "instruction": "",
        "id": "q18155",
        "input": "pythong 3 covert str to int",
        "output": "",
        "rule": [
            "d18155"
        ]
    },
    {
        "instruction": "",
        "id": "q18156",
        "input": "python remove all xml namespaces",
        "output": "",
        "rule": [
            "d18156"
        ]
    },
    {
        "instruction": "",
        "id": "q18157",
        "input": "clear whitespace python string",
        "output": "",
        "rule": [
            "d18157"
        ]
    },
    {
        "instruction": "",
        "id": "q18158",
        "input": "how to print few element of a list in python",
        "output": "",
        "rule": [
            "d18158"
        ]
    },
    {
        "instruction": "",
        "id": "q18159",
        "input": "python set add iterable",
        "output": "",
        "rule": [
            "d18159"
        ]
    },
    {
        "instruction": "",
        "id": "q18160",
        "input": "python check if file has a specific line",
        "output": "",
        "rule": [
            "d18160"
        ]
    },
    {
        "instruction": "",
        "id": "q18161",
        "input": "values in bytearray should be integers between python",
        "output": "",
        "rule": [
            "d18161"
        ]
    },
    {
        "instruction": "",
        "id": "q18162",
        "input": "python string zero fill",
        "output": "",
        "rule": [
            "d18162"
        ]
    },
    {
        "instruction": "",
        "id": "q18163",
        "input": "how to return a string formed by concatenating all the elements in a list in python",
        "output": "",
        "rule": [
            "d18163"
        ]
    },
    {
        "instruction": "",
        "id": "q18164",
        "input": "reading csv as numpy array in python",
        "output": "",
        "rule": [
            "d18164"
        ]
    },
    {
        "instruction": "",
        "id": "q18165",
        "input": "how to get first few rows in python",
        "output": "",
        "rule": [
            "d18165"
        ]
    },
    {
        "instruction": "",
        "id": "q18166",
        "input": "python return based on first digit of string",
        "output": "",
        "rule": [
            "d18166"
        ]
    },
    {
        "instruction": "",
        "id": "q18167",
        "input": "turn string into uppercase python",
        "output": "",
        "rule": [
            "d18167"
        ]
    },
    {
        "instruction": "",
        "id": "q18168",
        "input": "python exit thread in advance",
        "output": "",
        "rule": [
            "d18168"
        ]
    },
    {
        "instruction": "",
        "id": "q18169",
        "input": "how to check character type in python",
        "output": "",
        "rule": [
            "d18169"
        ]
    },
    {
        "instruction": "",
        "id": "q18170",
        "input": "python from string to enum",
        "output": "",
        "rule": [
            "d18170"
        ]
    },
    {
        "instruction": "",
        "id": "q18171",
        "input": "how to get % frequencies python",
        "output": "",
        "rule": [
            "d18171"
        ]
    },
    {
        "instruction": "",
        "id": "q18172",
        "input": "python variable replacement in string",
        "output": "",
        "rule": [
            "d18172"
        ]
    },
    {
        "instruction": "",
        "id": "q18173",
        "input": "python create dict of index and item of list",
        "output": "",
        "rule": [
            "d18173"
        ]
    },
    {
        "instruction": "",
        "id": "q18174",
        "input": "python how to add to kwargs if not present",
        "output": "",
        "rule": [
            "d18174"
        ]
    },
    {
        "instruction": "",
        "id": "q18175",
        "input": "python mysqldb executemany thread",
        "output": "",
        "rule": [
            "d18175"
        ]
    },
    {
        "instruction": "",
        "id": "q18176",
        "input": "python reader skip header line",
        "output": "",
        "rule": [
            "d18176"
        ]
    },
    {
        "instruction": "",
        "id": "q18177",
        "input": "python check if 2 paths are the same",
        "output": "",
        "rule": [
            "d18177"
        ]
    },
    {
        "instruction": "",
        "id": "q18178",
        "input": "python check if doesn't exist",
        "output": "",
        "rule": [
            "d18178"
        ]
    },
    {
        "instruction": "",
        "id": "q18179",
        "input": "crawl async data with python asyncio",
        "output": "",
        "rule": [
            "d18179"
        ]
    },
    {
        "instruction": "",
        "id": "q18180",
        "input": "python text to list tokenizer split",
        "output": "",
        "rule": [
            "d18180"
        ]
    },
    {
        "instruction": "",
        "id": "q18181",
        "input": "python 3 string to bytecode",
        "output": "",
        "rule": [
            "d18181"
        ]
    },
    {
        "instruction": "",
        "id": "q18182",
        "input": "python get set word synonyms",
        "output": "",
        "rule": [
            "d18182"
        ]
    },
    {
        "instruction": "",
        "id": "q18183",
        "input": "read and display a text file in python",
        "output": "",
        "rule": [
            "d18183"
        ]
    },
    {
        "instruction": "",
        "id": "q18184",
        "input": "how to time a python function",
        "output": "",
        "rule": [
            "d18184"
        ]
    },
    {
        "instruction": "",
        "id": "q18185",
        "input": "python lambda get self",
        "output": "",
        "rule": [
            "d18185"
        ]
    },
    {
        "instruction": "",
        "id": "q18186",
        "input": "python change a str to a date",
        "output": "",
        "rule": [
            "d18186"
        ]
    },
    {
        "instruction": "",
        "id": "q18187",
        "input": "compare against enum values in python",
        "output": "",
        "rule": [
            "d18187"
        ]
    },
    {
        "instruction": "",
        "id": "q18188",
        "input": "turning a string into a list in python",
        "output": "",
        "rule": [
            "d18188"
        ]
    },
    {
        "instruction": "",
        "id": "q18189",
        "input": "python check whether date is valid",
        "output": "",
        "rule": [
            "d18189"
        ]
    },
    {
        "instruction": "",
        "id": "q18190",
        "input": "truncate floats to 4 decimals in python",
        "output": "",
        "rule": [
            "d18190"
        ]
    },
    {
        "instruction": "",
        "id": "q18191",
        "input": "stop a function from continuing python",
        "output": "",
        "rule": [
            "d18191"
        ]
    },
    {
        "instruction": "",
        "id": "q18192",
        "input": "how to get back to previous line in python while printing",
        "output": "",
        "rule": [
            "d18192"
        ]
    },
    {
        "instruction": "",
        "id": "q18193",
        "input": "how to shuffe columns python",
        "output": "",
        "rule": [
            "d18193"
        ]
    },
    {
        "instruction": "",
        "id": "q18194",
        "input": "count partitions python permute",
        "output": "",
        "rule": [
            "d18194"
        ]
    },
    {
        "instruction": "",
        "id": "q18195",
        "input": "how do you input the exit function in python",
        "output": "",
        "rule": [
            "d18195"
        ]
    },
    {
        "instruction": "",
        "id": "q18196",
        "input": "wrapper for int or float python",
        "output": "",
        "rule": [
            "d18196"
        ]
    },
    {
        "instruction": "",
        "id": "q18197",
        "input": "python code for least common multiple of a list of numbers",
        "output": "",
        "rule": [
            "d18197"
        ]
    },
    {
        "instruction": "",
        "id": "q18198",
        "input": "index of last occurence of an element in a list in python",
        "output": "",
        "rule": [
            "d18198"
        ]
    },
    {
        "instruction": "",
        "id": "q18199",
        "input": "python how to check if file older then",
        "output": "",
        "rule": [
            "d18199"
        ]
    },
    {
        "instruction": "",
        "id": "q18200",
        "input": "python reading text file as json",
        "output": "",
        "rule": [
            "d18200"
        ]
    },
    {
        "instruction": "",
        "id": "q18201",
        "input": "starttime minus current time delta in python",
        "output": "",
        "rule": [
            "d18201"
        ]
    },
    {
        "instruction": "",
        "id": "q18202",
        "input": "how to create a datetime object with a string date in python",
        "output": "",
        "rule": [
            "d18202"
        ]
    },
    {
        "instruction": "",
        "id": "q18203",
        "input": "python bitwise mask not turning white pixels",
        "output": "",
        "rule": [
            "d18203"
        ]
    },
    {
        "instruction": "",
        "id": "q18204",
        "input": "filter dictionary values in python",
        "output": "",
        "rule": [
            "d18204"
        ]
    },
    {
        "instruction": "",
        "id": "q18205",
        "input": "testing for empty file in python",
        "output": "",
        "rule": [
            "d18205"
        ]
    },
    {
        "instruction": "",
        "id": "q18206",
        "input": "python 3 domain url parse",
        "output": "",
        "rule": [
            "d18206"
        ]
    },
    {
        "instruction": "",
        "id": "q18207",
        "input": "how to determine data type of variable in python",
        "output": "",
        "rule": [
            "d18207"
        ]
    },
    {
        "instruction": "",
        "id": "q18208",
        "input": "python measuring memory usage dynamically",
        "output": "",
        "rule": [
            "d18208"
        ]
    },
    {
        "instruction": "",
        "id": "q18209",
        "input": "python comvert string to title case",
        "output": "",
        "rule": [
            "d18209"
        ]
    },
    {
        "instruction": "",
        "id": "q18210",
        "input": "a check funtion in python for turned based game",
        "output": "",
        "rule": [
            "d18210"
        ]
    },
    {
        "instruction": "",
        "id": "q18211",
        "input": "check if column values are blank in python",
        "output": "",
        "rule": [
            "d18211"
        ]
    },
    {
        "instruction": "",
        "id": "q18212",
        "input": "python extract hostname from url",
        "output": "",
        "rule": [
            "d18212"
        ]
    },
    {
        "instruction": "",
        "id": "q18213",
        "input": "how to prepreocess multiple images in python",
        "output": "",
        "rule": [
            "d18213"
        ]
    },
    {
        "instruction": "",
        "id": "q18214",
        "input": "check is a link is relative python",
        "output": "",
        "rule": [
            "d18214"
        ]
    },
    {
        "instruction": "",
        "id": "q18215",
        "input": "python check for real number",
        "output": "",
        "rule": [
            "d18215"
        ]
    },
    {
        "instruction": "",
        "id": "q18216",
        "input": "if clause checking tow statemetents in python",
        "output": "",
        "rule": [
            "d18216"
        ]
    },
    {
        "instruction": "",
        "id": "q18217",
        "input": "check if a string match date type format python",
        "output": "",
        "rule": [
            "d18217"
        ]
    },
    {
        "instruction": "",
        "id": "q18218",
        "input": "python check if it is not a string",
        "output": "",
        "rule": [
            "d18218"
        ]
    },
    {
        "instruction": "",
        "id": "q18219",
        "input": "product of all elements python",
        "output": "",
        "rule": [
            "d18219"
        ]
    },
    {
        "instruction": "",
        "id": "q18220",
        "input": "how to check if any char in a string is alpha python",
        "output": "",
        "rule": [
            "d18220"
        ]
    },
    {
        "instruction": "",
        "id": "q18221",
        "input": "covert an array to a list in python",
        "output": "",
        "rule": [
            "d18221"
        ]
    },
    {
        "instruction": "",
        "id": "q18222",
        "input": "python how to get the year from a timestamp",
        "output": "",
        "rule": [
            "d18222"
        ]
    },
    {
        "instruction": "",
        "id": "q18223",
        "input": "remove columns a data frame python",
        "output": "",
        "rule": [
            "d18223"
        ]
    },
    {
        "instruction": "",
        "id": "q18224",
        "input": "trimming off leading zeros python",
        "output": "",
        "rule": [
            "d18224"
        ]
    },
    {
        "instruction": "",
        "id": "q18225",
        "input": "finding the last occurance of a character in a string in python",
        "output": "",
        "rule": [
            "d18225"
        ]
    },
    {
        "instruction": "",
        "id": "q18226",
        "input": "python datetime today astimezone",
        "output": "",
        "rule": [
            "d18226"
        ]
    },
    {
        "instruction": "",
        "id": "q18227",
        "input": "is there a way to replace multiple characters in python",
        "output": "",
        "rule": [
            "d18227"
        ]
    },
    {
        "instruction": "",
        "id": "q18228",
        "input": "python draw dependency graph",
        "output": "",
        "rule": [
            "d18228"
        ]
    },
    {
        "instruction": "",
        "id": "q18229",
        "input": "python test elements of an array",
        "output": "",
        "rule": [
            "d18229"
        ]
    },
    {
        "instruction": "",
        "id": "q18230",
        "input": "python remove non english charachters from a text",
        "output": "",
        "rule": [
            "d18230"
        ]
    },
    {
        "instruction": "",
        "id": "q18231",
        "input": "python get a numerical date from a string date",
        "output": "",
        "rule": [
            "d18231"
        ]
    },
    {
        "instruction": "",
        "id": "q18232",
        "input": "vs code python read text file",
        "output": "",
        "rule": [
            "d18232"
        ]
    },
    {
        "instruction": "",
        "id": "q18233",
        "input": "how to open a python conda environment",
        "output": "",
        "rule": [
            "d18233"
        ]
    },
    {
        "instruction": "",
        "id": "q18234",
        "input": "pyodbc python oracle connect",
        "output": "",
        "rule": [
            "d18234"
        ]
    },
    {
        "instruction": "",
        "id": "q18235",
        "input": "conda python env not activated windows",
        "output": "",
        "rule": [
            "d18235"
        ]
    },
    {
        "instruction": "",
        "id": "q18236",
        "input": "python delete all characters from text",
        "output": "",
        "rule": [
            "d18236"
        ]
    },
    {
        "instruction": "",
        "id": "q18237",
        "input": "python how to return separate tuples",
        "output": "",
        "rule": [
            "d18237"
        ]
    },
    {
        "instruction": "",
        "id": "q18238",
        "input": "how to remove a empty string in python",
        "output": "",
        "rule": [
            "d18238"
        ]
    },
    {
        "instruction": "",
        "id": "q18239",
        "input": "how to get randomwalk to work python",
        "output": "",
        "rule": [
            "d18239"
        ]
    },
    {
        "instruction": "",
        "id": "q18240",
        "input": "python datetime utcnow no tzinfo",
        "output": "",
        "rule": [
            "d18240"
        ]
    },
    {
        "instruction": "",
        "id": "q18241",
        "input": "python modify list of strings while iterating",
        "output": "",
        "rule": [
            "d18241"
        ]
    },
    {
        "instruction": "",
        "id": "q18242",
        "input": "how to replace a certain word for another word in a string in python",
        "output": "",
        "rule": [
            "d18242"
        ]
    },
    {
        "instruction": "",
        "id": "q18243",
        "input": "numpy to tensor python",
        "output": "",
        "rule": [
            "d18243"
        ]
    },
    {
        "instruction": "",
        "id": "q18244",
        "input": "finding last index in python",
        "output": "",
        "rule": [
            "d18244"
        ]
    },
    {
        "instruction": "",
        "id": "q18245",
        "input": "how to custom set range on color bar python",
        "output": "",
        "rule": [
            "d18245"
        ]
    },
    {
        "instruction": "",
        "id": "q18246",
        "input": "how to read lines into a set python",
        "output": "",
        "rule": [
            "d18246"
        ]
    },
    {
        "instruction": "",
        "id": "q18247",
        "input": "how to write an exit function python",
        "output": "",
        "rule": [
            "d18247"
        ]
    },
    {
        "instruction": "",
        "id": "q18248",
        "input": "array condition && python",
        "output": "",
        "rule": [
            "d18248"
        ]
    },
    {
        "instruction": "",
        "id": "q18249",
        "input": "python how to detect string with all white spaces",
        "output": "",
        "rule": [
            "d18249"
        ]
    },
    {
        "instruction": "",
        "id": "q18250",
        "input": "how to get first 5 records of array python",
        "output": "",
        "rule": [
            "d18250"
        ]
    },
    {
        "instruction": "",
        "id": "q18251",
        "input": "python passing a tuple in function that takes a string",
        "output": "",
        "rule": [
            "d18251"
        ]
    },
    {
        "instruction": "",
        "id": "q18252",
        "input": "how to get the first 5 elements of a sorted dictionary in python",
        "output": "",
        "rule": [
            "d18252"
        ]
    },
    {
        "instruction": "",
        "id": "q18253",
        "input": "how to make a python program draw a tree using recursion",
        "output": "",
        "rule": [
            "d18253"
        ]
    },
    {
        "instruction": "",
        "id": "q18254",
        "input": "make a 2d empty array python",
        "output": "",
        "rule": [
            "d18254"
        ]
    },
    {
        "instruction": "",
        "id": "q18255",
        "input": "python median value numpy",
        "output": "",
        "rule": [
            "d18255"
        ]
    },
    {
        "instruction": "",
        "id": "q18256",
        "input": "python detect key exist or not",
        "output": "",
        "rule": [
            "d18256"
        ]
    },
    {
        "instruction": "",
        "id": "q18257",
        "input": "how do you add values to a set in python",
        "output": "",
        "rule": [
            "d18257"
        ]
    },
    {
        "instruction": "",
        "id": "q18258",
        "input": "turn a string into a bytearray python",
        "output": "",
        "rule": [
            "d18258"
        ]
    },
    {
        "instruction": "",
        "id": "q18259",
        "input": "get content of textfile as string python",
        "output": "",
        "rule": [
            "d18259"
        ]
    },
    {
        "instruction": "",
        "id": "q18260",
        "input": "python uuid to integer",
        "output": "",
        "rule": [
            "d18260"
        ]
    },
    {
        "instruction": "",
        "id": "q18261",
        "input": "how to turn a string into bytes python",
        "output": "",
        "rule": [
            "d18261"
        ]
    },
    {
        "instruction": "",
        "id": "q18262",
        "input": "python test if path is absolute or relative",
        "output": "",
        "rule": [
            "d18262"
        ]
    },
    {
        "instruction": "",
        "id": "q18263",
        "input": "how to get max value of columns python",
        "output": "",
        "rule": [
            "d18263"
        ]
    },
    {
        "instruction": "",
        "id": "q18264",
        "input": "random walk python making sure walker is in bounds",
        "output": "",
        "rule": [
            "d18264"
        ]
    },
    {
        "instruction": "",
        "id": "q18265",
        "input": "delete from a python dict",
        "output": "",
        "rule": [
            "d18265"
        ]
    },
    {
        "instruction": "",
        "id": "q18266",
        "input": "creating dictionary using indices as map values python",
        "output": "",
        "rule": [
            "d18266"
        ]
    },
    {
        "instruction": "",
        "id": "q18267",
        "input": "determine powershell width using python",
        "output": "",
        "rule": [
            "d18267"
        ]
    },
    {
        "instruction": "",
        "id": "q18268",
        "input": "how to check if file is empty python",
        "output": "",
        "rule": [
            "d18268"
        ]
    },
    {
        "instruction": "",
        "id": "q18269",
        "input": "python logging auto flush",
        "output": "",
        "rule": [
            "d18269"
        ]
    },
    {
        "instruction": "",
        "id": "q18270",
        "input": "how to print half a list in python",
        "output": "",
        "rule": [
            "d18270"
        ]
    },
    {
        "instruction": "",
        "id": "q18271",
        "input": "python raise with or without brackets",
        "output": "",
        "rule": [
            "d18271"
        ]
    },
    {
        "instruction": "",
        "id": "q18272",
        "input": "remove logic symbol from python string",
        "output": "",
        "rule": [
            "d18272"
        ]
    },
    {
        "instruction": "",
        "id": "q18273",
        "input": "check if line is in file python",
        "output": "",
        "rule": [
            "d18273"
        ]
    },
    {
        "instruction": "",
        "id": "q18274",
        "input": "get parent node of a node using python",
        "output": "",
        "rule": [
            "d18274"
        ]
    },
    {
        "instruction": "",
        "id": "q18275",
        "input": "check whether two column names are identical in python",
        "output": "",
        "rule": [
            "d18275"
        ]
    },
    {
        "instruction": "",
        "id": "q18276",
        "input": "how to indent a whole grouping of code in opython at once",
        "output": "",
        "rule": [
            "d18276"
        ]
    },
    {
        "instruction": "",
        "id": "q18277",
        "input": "how to get maximum of a specific column in python list",
        "output": "",
        "rule": [
            "d18277"
        ]
    },
    {
        "instruction": "",
        "id": "q18278",
        "input": "how to sample a multivariate normal distribution python",
        "output": "",
        "rule": [
            "d18278"
        ]
    },
    {
        "instruction": "",
        "id": "q18279",
        "input": "python index if there are duplicates",
        "output": "",
        "rule": [
            "d18279"
        ]
    },
    {
        "instruction": "",
        "id": "q18280",
        "input": "python cast hex string to int",
        "output": "",
        "rule": [
            "d18280"
        ]
    },
    {
        "instruction": "",
        "id": "q18281",
        "input": "python how to check for double quotes",
        "output": "",
        "rule": [
            "d18281"
        ]
    },
    {
        "instruction": "",
        "id": "q18282",
        "input": "return a set in python",
        "output": "",
        "rule": [
            "d18282"
        ]
    },
    {
        "instruction": "",
        "id": "q18283",
        "input": "longest path in tree python",
        "output": "",
        "rule": [
            "d18283"
        ]
    },
    {
        "instruction": "",
        "id": "q18284",
        "input": "how to define a floating value in python",
        "output": "",
        "rule": [
            "d18284"
        ]
    },
    {
        "instruction": "",
        "id": "q18285",
        "input": "sliding windows and rolling window in timeseries python",
        "output": "",
        "rule": [
            "d18285"
        ]
    },
    {
        "instruction": "",
        "id": "q18286",
        "input": "python check that matrix is invertable",
        "output": "",
        "rule": [
            "d18286"
        ]
    },
    {
        "instruction": "",
        "id": "q18287",
        "input": "python flatten list in list",
        "output": "",
        "rule": [
            "d18287"
        ]
    },
    {
        "instruction": "",
        "id": "q18288",
        "input": "python sqlalchemy how to read the table names from a sqllite database",
        "output": "",
        "rule": [
            "d18288"
        ]
    },
    {
        "instruction": "",
        "id": "q18289",
        "input": "python calculate the midpoint of two points",
        "output": "",
        "rule": [
            "d18289"
        ]
    },
    {
        "instruction": "",
        "id": "q18290",
        "input": "python checking if two strings are equal",
        "output": "",
        "rule": [
            "d18290"
        ]
    },
    {
        "instruction": "",
        "id": "q18291",
        "input": "python finding longest common string in text",
        "output": "",
        "rule": [
            "d18291"
        ]
    },
    {
        "instruction": "",
        "id": "q18292",
        "input": "how to limit a number to two decimals python",
        "output": "",
        "rule": [
            "d18292"
        ]
    },
    {
        "instruction": "",
        "id": "q18293",
        "input": "python generating random numbers of given bit length",
        "output": "",
        "rule": [
            "d18293"
        ]
    },
    {
        "instruction": "",
        "id": "q18294",
        "input": "python check if number isinfinite",
        "output": "",
        "rule": [
            "d18294"
        ]
    },
    {
        "instruction": "",
        "id": "q18295",
        "input": "python tornado set default header",
        "output": "",
        "rule": [
            "d18295"
        ]
    },
    {
        "instruction": "",
        "id": "q18296",
        "input": "python how to tell if a socket is closed",
        "output": "",
        "rule": [
            "d18296"
        ]
    },
    {
        "instruction": "",
        "id": "q18297",
        "input": "python copy cookies to a new request",
        "output": "",
        "rule": [
            "d18297"
        ]
    },
    {
        "instruction": "",
        "id": "q18298",
        "input": "turn a list into an array python",
        "output": "",
        "rule": [
            "d18298"
        ]
    },
    {
        "instruction": "",
        "id": "q18299",
        "input": "turn a string into a list and remove parentheses python",
        "output": "",
        "rule": [
            "d18299"
        ]
    },
    {
        "instruction": "",
        "id": "q18300",
        "input": "are python threads asyncronous",
        "output": "",
        "rule": [
            "d18300"
        ]
    },
    {
        "instruction": "",
        "id": "q18301",
        "input": "check if string in a file line python",
        "output": "",
        "rule": [
            "d18301"
        ]
    },
    {
        "instruction": "",
        "id": "q18302",
        "input": "remove leading zeroes in python",
        "output": "",
        "rule": [
            "d18302"
        ]
    },
    {
        "instruction": "",
        "id": "q18303",
        "input": "python cpu usage monitor not full",
        "output": "",
        "rule": [
            "d18303"
        ]
    },
    {
        "instruction": "",
        "id": "q18304",
        "input": "python check each element in list is same size",
        "output": "",
        "rule": [
            "d18304"
        ]
    },
    {
        "instruction": "",
        "id": "q18305",
        "input": "python 3 interger to byte",
        "output": "",
        "rule": [
            "d18305"
        ]
    },
    {
        "instruction": "",
        "id": "q18306",
        "input": "how to clean a directory in python",
        "output": "",
        "rule": [
            "d18306"
        ]
    },
    {
        "instruction": "",
        "id": "q18307",
        "input": "how do you check if two strings are the same in python",
        "output": "",
        "rule": [
            "d18307"
        ]
    },
    {
        "instruction": "",
        "id": "q18308",
        "input": "how to call on method python",
        "output": "",
        "rule": [
            "d18308"
        ]
    },
    {
        "instruction": "",
        "id": "q18309",
        "input": "python calculate similarity for two dictionaries",
        "output": "",
        "rule": [
            "d18309"
        ]
    },
    {
        "instruction": "",
        "id": "q18310",
        "input": "how to get top10 in python",
        "output": "",
        "rule": [
            "d18310"
        ]
    },
    {
        "instruction": "",
        "id": "q18311",
        "input": "python any alphabet in string",
        "output": "",
        "rule": [
            "d18311"
        ]
    },
    {
        "instruction": "",
        "id": "q18312",
        "input": "python array with real and imag",
        "output": "",
        "rule": [
            "d18312"
        ]
    },
    {
        "instruction": "",
        "id": "q18313",
        "input": "is dict key case sensitive in python",
        "output": "",
        "rule": [
            "d18313"
        ]
    },
    {
        "instruction": "",
        "id": "q18314",
        "input": "invert key and values dictionary python",
        "output": "",
        "rule": [
            "d18314"
        ]
    },
    {
        "instruction": "",
        "id": "q18315",
        "input": "python change string to bytearray",
        "output": "",
        "rule": [
            "d18315"
        ]
    },
    {
        "instruction": "",
        "id": "q18316",
        "input": "how to remove none in python string",
        "output": "",
        "rule": [
            "d18316"
        ]
    },
    {
        "instruction": "",
        "id": "q18317",
        "input": "lower case a string in python",
        "output": "",
        "rule": [
            "d18317"
        ]
    },
    {
        "instruction": "",
        "id": "q18318",
        "input": "python sqlite executemany dict",
        "output": "",
        "rule": [
            "d18318"
        ]
    },
    {
        "instruction": "",
        "id": "q18319",
        "input": "python csv to two dimentional array numpy",
        "output": "",
        "rule": [
            "d18319"
        ]
    },
    {
        "instruction": "",
        "id": "q18320",
        "input": "python select the second element of a string within a list",
        "output": "",
        "rule": [
            "d18320"
        ]
    },
    {
        "instruction": "",
        "id": "q18321",
        "input": "flatten dict of dict python",
        "output": "",
        "rule": [
            "d18321"
        ]
    },
    {
        "instruction": "",
        "id": "q18322",
        "input": "how to test for nan in python",
        "output": "",
        "rule": [
            "d18322"
        ]
    },
    {
        "instruction": "",
        "id": "q18323",
        "input": "python how to change all int64 columns to int16",
        "output": "",
        "rule": [
            "d18323"
        ]
    },
    {
        "instruction": "",
        "id": "q18324",
        "input": "python how to get next element of iterator",
        "output": "",
        "rule": [
            "d18324"
        ]
    },
    {
        "instruction": "",
        "id": "q18325",
        "input": "checking for empty file python",
        "output": "",
        "rule": [
            "d18325"
        ]
    },
    {
        "instruction": "",
        "id": "q18326",
        "input": "python qutip compute inner product between two state vectors",
        "output": "",
        "rule": [
            "d18326"
        ]
    },
    {
        "instruction": "",
        "id": "q18327",
        "input": "blockout region in image python opencv code",
        "output": "",
        "rule": [
            "d18327"
        ]
    },
    {
        "instruction": "",
        "id": "q18328",
        "input": "python get number of gpu",
        "output": "",
        "rule": [
            "d18328"
        ]
    },
    {
        "instruction": "",
        "id": "q18329",
        "input": "how to recursively print a tree python",
        "output": "",
        "rule": [
            "d18329"
        ]
    },
    {
        "instruction": "",
        "id": "q18330",
        "input": "delete files using wildcards python",
        "output": "",
        "rule": [
            "d18330"
        ]
    },
    {
        "instruction": "",
        "id": "q18331",
        "input": "python load json to dict",
        "output": "",
        "rule": [
            "d18331"
        ]
    },
    {
        "instruction": "",
        "id": "q18332",
        "input": "python get most frequent item in list",
        "output": "",
        "rule": [
            "d18332"
        ]
    },
    {
        "instruction": "",
        "id": "q18333",
        "input": "python ndarray string cut out",
        "output": "",
        "rule": [
            "d18333"
        ]
    },
    {
        "instruction": "",
        "id": "q18334",
        "input": "dot product simple multiplication python",
        "output": "",
        "rule": [
            "d18334"
        ]
    },
    {
        "instruction": "",
        "id": "q18335",
        "input": "how to compare similarity of two numbers on python",
        "output": "",
        "rule": [
            "d18335"
        ]
    },
    {
        "instruction": "",
        "id": "q18336",
        "input": "index of nonzero value array python",
        "output": "",
        "rule": [
            "d18336"
        ]
    },
    {
        "instruction": "",
        "id": "q18337",
        "input": "python json quotes in string",
        "output": "",
        "rule": [
            "d18337"
        ]
    },
    {
        "instruction": "",
        "id": "q18338",
        "input": "how to check datatime now older than fixed date python",
        "output": "",
        "rule": [
            "d18338"
        ]
    },
    {
        "instruction": "",
        "id": "q18339",
        "input": "get a date from a string pythong",
        "output": "",
        "rule": [
            "d18339"
        ]
    },
    {
        "instruction": "",
        "id": "q18340",
        "input": "python recognize date string as date",
        "output": "",
        "rule": [
            "d18340"
        ]
    },
    {
        "instruction": "",
        "id": "q18341",
        "input": "how to download file from s3 using python code",
        "output": "",
        "rule": [
            "d18341"
        ]
    },
    {
        "instruction": "",
        "id": "q18342",
        "input": "python rate limit requests",
        "output": "",
        "rule": [
            "d18342"
        ]
    },
    {
        "instruction": "",
        "id": "q18343",
        "input": "get rid of leading zeroes python",
        "output": "",
        "rule": [
            "d18343"
        ]
    },
    {
        "instruction": "",
        "id": "q18344",
        "input": "how to check if a file has been changed in python 3",
        "output": "",
        "rule": [
            "d18344"
        ]
    },
    {
        "instruction": "",
        "id": "q18345",
        "input": "return the number of items in histogram plot in python",
        "output": "",
        "rule": [
            "d18345"
        ]
    },
    {
        "instruction": "",
        "id": "q18346",
        "input": "python good bit equivalent",
        "output": "",
        "rule": [
            "d18346"
        ]
    },
    {
        "instruction": "",
        "id": "q18347",
        "input": "python read http status from raw",
        "output": "",
        "rule": [
            "d18347"
        ]
    },
    {
        "instruction": "",
        "id": "q18348",
        "input": "how to capitalize everything in a string python",
        "output": "",
        "rule": [
            "d18348"
        ]
    },
    {
        "instruction": "",
        "id": "q18349",
        "input": "python create key if don't exist",
        "output": "",
        "rule": [
            "d18349"
        ]
    },
    {
        "instruction": "",
        "id": "q18350",
        "input": "change numyp array to just values python",
        "output": "",
        "rule": [
            "d18350"
        ]
    },
    {
        "instruction": "",
        "id": "q18351",
        "input": "in python how to output the last item in a list",
        "output": "",
        "rule": [
            "d18351"
        ]
    },
    {
        "instruction": "",
        "id": "q18352",
        "input": "python limit variable inputs for a function",
        "output": "",
        "rule": [
            "d18352"
        ]
    },
    {
        "instruction": "",
        "id": "q18353",
        "input": "minmum number of spaces indented space python",
        "output": "",
        "rule": [
            "d18353"
        ]
    },
    {
        "instruction": "",
        "id": "q18354",
        "input": "how to make a number a percent python",
        "output": "",
        "rule": [
            "d18354"
        ]
    },
    {
        "instruction": "",
        "id": "q18355",
        "input": "python determine mime type of a file",
        "output": "",
        "rule": [
            "d18355"
        ]
    },
    {
        "instruction": "",
        "id": "q18356",
        "input": "enumerate python last item",
        "output": "",
        "rule": [
            "d18356"
        ]
    },
    {
        "instruction": "",
        "id": "q18357",
        "input": "opencv rgb to hsi in python",
        "output": "",
        "rule": [
            "d18357"
        ]
    },
    {
        "instruction": "",
        "id": "q18358",
        "input": "replacing two characters with replace in python",
        "output": "",
        "rule": [
            "d18358"
        ]
    },
    {
        "instruction": "",
        "id": "q18359",
        "input": "python fastest way to reverse dict",
        "output": "",
        "rule": [
            "d18359"
        ]
    },
    {
        "instruction": "",
        "id": "q18360",
        "input": "how to parse a line into tokens in python",
        "output": "",
        "rule": [
            "d18360"
        ]
    },
    {
        "instruction": "",
        "id": "q18361",
        "input": "wxpython get widget by id",
        "output": "",
        "rule": [
            "d18361"
        ]
    },
    {
        "instruction": "",
        "id": "q18362",
        "input": "biased random walk with bound in python",
        "output": "",
        "rule": [
            "d18362"
        ]
    },
    {
        "instruction": "",
        "id": "q18363",
        "input": "python using lambda on dictionary",
        "output": "",
        "rule": [
            "d18363"
        ]
    },
    {
        "instruction": "",
        "id": "q18364",
        "input": "python plot the median of a column in an array",
        "output": "",
        "rule": [
            "d18364"
        ]
    },
    {
        "instruction": "",
        "id": "q18365",
        "input": "python half of screen pixels",
        "output": "",
        "rule": [
            "d18365"
        ]
    },
    {
        "instruction": "",
        "id": "q18366",
        "input": "how to check if two strings are the same in python",
        "output": "",
        "rule": [
            "d18366"
        ]
    },
    {
        "instruction": "",
        "id": "q18367",
        "input": "how to check for empty file in python",
        "output": "",
        "rule": [
            "d18367"
        ]
    },
    {
        "instruction": "",
        "id": "q18368",
        "input": "python check for a specific process",
        "output": "",
        "rule": [
            "d18368"
        ]
    },
    {
        "instruction": "",
        "id": "q18369",
        "input": "python check date format in iso",
        "output": "",
        "rule": [
            "d18369"
        ]
    },
    {
        "instruction": "",
        "id": "q18370",
        "input": "check if column exists by index python",
        "output": "",
        "rule": [
            "d18370"
        ]
    },
    {
        "instruction": "",
        "id": "q18371",
        "input": "python how to calculate moving average in a window",
        "output": "",
        "rule": [
            "d18371"
        ]
    },
    {
        "instruction": "",
        "id": "q18372",
        "input": "python get row with max value",
        "output": "",
        "rule": [
            "d18372"
        ]
    },
    {
        "instruction": "",
        "id": "q18373",
        "input": "python map to json str",
        "output": "",
        "rule": [
            "d18373"
        ]
    },
    {
        "instruction": "",
        "id": "q18374",
        "input": "computing the product in python",
        "output": "",
        "rule": [
            "d18374"
        ]
    },
    {
        "instruction": "",
        "id": "q18375",
        "input": "function to remove trailing zeros in python",
        "output": "",
        "rule": [
            "d18375"
        ]
    },
    {
        "instruction": "",
        "id": "q18376",
        "input": "return first 100 rows python",
        "output": "",
        "rule": [
            "d18376"
        ]
    },
    {
        "instruction": "",
        "id": "q18377",
        "input": "load a json python",
        "output": "",
        "rule": [
            "d18377"
        ]
    },
    {
        "instruction": "",
        "id": "q18378",
        "input": "python get top max values from dictionary",
        "output": "",
        "rule": [
            "d18378"
        ]
    },
    {
        "instruction": "",
        "id": "q18379",
        "input": "python string replace last occureance",
        "output": "",
        "rule": [
            "d18379"
        ]
    },
    {
        "instruction": "",
        "id": "q18380",
        "input": "count occurnaces in a list python",
        "output": "",
        "rule": [
            "d18380"
        ]
    },
    {
        "instruction": "",
        "id": "q18381",
        "input": "rounding to the nearest preset number python",
        "output": "",
        "rule": [
            "d18381"
        ]
    },
    {
        "instruction": "",
        "id": "q18382",
        "input": "how to check the len of every element if it is equal to each other at the same time in python",
        "output": "",
        "rule": [
            "d18382"
        ]
    },
    {
        "instruction": "",
        "id": "q18383",
        "input": "how to exclude certain text as condition for list comprehension in python",
        "output": "",
        "rule": [
            "d18383"
        ]
    },
    {
        "instruction": "",
        "id": "q18384",
        "input": "python check whether a date is valid",
        "output": "",
        "rule": [
            "d18384"
        ]
    },
    {
        "instruction": "",
        "id": "q18385",
        "input": "python flatten list comprehension",
        "output": "",
        "rule": [
            "d18385"
        ]
    },
    {
        "instruction": "",
        "id": "q18386",
        "input": "python boto3 dynamodb delete all items",
        "output": "",
        "rule": [
            "d18386"
        ]
    },
    {
        "instruction": "",
        "id": "q18387",
        "input": "python return mongodb 'cursor' object is not callable",
        "output": "",
        "rule": [
            "d18387"
        ]
    },
    {
        "instruction": "",
        "id": "q18388",
        "input": "python ctypes get cursor position",
        "output": "",
        "rule": [
            "d18388"
        ]
    },
    {
        "instruction": "",
        "id": "q18389",
        "input": "enumerate python all instances",
        "output": "",
        "rule": [
            "d18389"
        ]
    },
    {
        "instruction": "",
        "id": "q18390",
        "input": "how to check a string for any non integer characters python",
        "output": "",
        "rule": [
            "d18390"
        ]
    },
    {
        "instruction": "",
        "id": "q18391",
        "input": "python ndarray to string variable with no delimiter",
        "output": "",
        "rule": [
            "d18391"
        ]
    },
    {
        "instruction": "",
        "id": "q18392",
        "input": "how to split python string to a list",
        "output": "",
        "rule": [
            "d18392"
        ]
    },
    {
        "instruction": "",
        "id": "q18393",
        "input": "python graphviz windows dot",
        "output": "",
        "rule": [
            "d18393"
        ]
    },
    {
        "instruction": "",
        "id": "q18394",
        "input": "python read json file into dictionary",
        "output": "",
        "rule": [
            "d18394"
        ]
    },
    {
        "instruction": "",
        "id": "q18395",
        "input": "get text of file python",
        "output": "",
        "rule": [
            "d18395"
        ]
    },
    {
        "instruction": "",
        "id": "q18396",
        "input": "replace values in python string",
        "output": "",
        "rule": [
            "d18396"
        ]
    },
    {
        "instruction": "",
        "id": "q18397",
        "input": "python compare if int or not",
        "output": "",
        "rule": [
            "d18397"
        ]
    },
    {
        "instruction": "",
        "id": "q18398",
        "input": "python replace several characters in string",
        "output": "",
        "rule": [
            "d18398"
        ]
    },
    {
        "instruction": "",
        "id": "q18399",
        "input": "how to get the names of the columns in python",
        "output": "",
        "rule": [
            "d18399"
        ]
    },
    {
        "instruction": "",
        "id": "q18400",
        "input": "how to change character in a string python using replace function",
        "output": "",
        "rule": [
            "d18400"
        ]
    },
    {
        "instruction": "",
        "id": "q18401",
        "input": "python split string to tokens",
        "output": "",
        "rule": [
            "d18401"
        ]
    },
    {
        "instruction": "",
        "id": "q18402",
        "input": "removing all words of a list from a text python",
        "output": "",
        "rule": [
            "d18402"
        ]
    },
    {
        "instruction": "",
        "id": "q18403",
        "input": "how to read csv file into a numpy array python",
        "output": "",
        "rule": [
            "d18403"
        ]
    },
    {
        "instruction": "",
        "id": "q18404",
        "input": "python remove hyperlinks from text",
        "output": "",
        "rule": [
            "d18404"
        ]
    },
    {
        "instruction": "",
        "id": "q18405",
        "input": "how to tell if string is absolute path in python",
        "output": "",
        "rule": [
            "d18405"
        ]
    },
    {
        "instruction": "",
        "id": "q18406",
        "input": "python print string numpy array",
        "output": "",
        "rule": [
            "d18406"
        ]
    },
    {
        "instruction": "",
        "id": "q18407",
        "input": "iterate a python map fast way",
        "output": "",
        "rule": [
            "d18407"
        ]
    },
    {
        "instruction": "",
        "id": "q18408",
        "input": "how to detect a legit url with python",
        "output": "",
        "rule": [
            "d18408"
        ]
    },
    {
        "instruction": "",
        "id": "q18409",
        "input": "python check if set is a subset",
        "output": "",
        "rule": [
            "d18409"
        ]
    },
    {
        "instruction": "",
        "id": "q18410",
        "input": "python clearing a dict of any records with no values",
        "output": "",
        "rule": [
            "d18410"
        ]
    },
    {
        "instruction": "",
        "id": "q18411",
        "input": "python list to sql db field",
        "output": "",
        "rule": [
            "d18411"
        ]
    },
    {
        "instruction": "",
        "id": "q18412",
        "input": "delete an item from a set python",
        "output": "",
        "rule": [
            "d18412"
        ]
    },
    {
        "instruction": "",
        "id": "q18413",
        "input": "python tensorflow shape to array",
        "output": "",
        "rule": [
            "d18413"
        ]
    },
    {
        "instruction": "",
        "id": "q18414",
        "input": "how to set python3 django apache",
        "output": "",
        "rule": [
            "d18414"
        ]
    },
    {
        "instruction": "",
        "id": "q18415",
        "input": "python create a tuple from input split",
        "output": "",
        "rule": [
            "d18415"
        ]
    },
    {
        "instruction": "",
        "id": "q18416",
        "input": "how to swithc to an open window in windows 10 using python",
        "output": "",
        "rule": [
            "d18416"
        ]
    },
    {
        "instruction": "",
        "id": "q18417",
        "input": "python index of first match in string",
        "output": "",
        "rule": [
            "d18417"
        ]
    },
    {
        "instruction": "",
        "id": "q18418",
        "input": "python type is not str",
        "output": "",
        "rule": [
            "d18418"
        ]
    },
    {
        "instruction": "",
        "id": "q18419",
        "input": "file of words into set python",
        "output": "",
        "rule": [
            "d18419"
        ]
    },
    {
        "instruction": "",
        "id": "q18420",
        "input": "python set add dictionnary",
        "output": "",
        "rule": [
            "d18420"
        ]
    },
    {
        "instruction": "",
        "id": "q18421",
        "input": "python sqlalchemy modle attributes",
        "output": "",
        "rule": [
            "d18421"
        ]
    },
    {
        "instruction": "",
        "id": "q18422",
        "input": "python list all column names",
        "output": "",
        "rule": [
            "d18422"
        ]
    },
    {
        "instruction": "",
        "id": "q18423",
        "input": "how to exit a code in python",
        "output": "",
        "rule": [
            "d18423"
        ]
    },
    {
        "instruction": "",
        "id": "q18424",
        "input": "longest path in a tree python",
        "output": "",
        "rule": [
            "d18424"
        ]
    },
    {
        "instruction": "",
        "id": "q18425",
        "input": "python hsv to rgb code",
        "output": "",
        "rule": [
            "d18425"
        ]
    },
    {
        "instruction": "",
        "id": "q18426",
        "input": "python json dump to list",
        "output": "",
        "rule": [
            "d18426"
        ]
    },
    {
        "instruction": "",
        "id": "q18427",
        "input": "remove characters string python",
        "output": "",
        "rule": [
            "d18427"
        ]
    },
    {
        "instruction": "",
        "id": "q18428",
        "input": "get last day of month python",
        "output": "",
        "rule": [
            "d18428"
        ]
    },
    {
        "instruction": "",
        "id": "q18429",
        "input": "last week in each month python",
        "output": "",
        "rule": [
            "d18429"
        ]
    },
    {
        "instruction": "",
        "id": "q18430",
        "input": "how to remove columns from data frame python",
        "output": "",
        "rule": [
            "d18430"
        ]
    },
    {
        "instruction": "",
        "id": "q18431",
        "input": "how to get last trading daya as string in python",
        "output": "",
        "rule": [
            "d18431"
        ]
    },
    {
        "instruction": "",
        "id": "q18432",
        "input": "python utcnow timezone aware",
        "output": "",
        "rule": [
            "d18432"
        ]
    },
    {
        "instruction": "",
        "id": "q18433",
        "input": "how to check if a file is not empty in python",
        "output": "",
        "rule": [
            "d18433"
        ]
    },
    {
        "instruction": "",
        "id": "q18434",
        "input": "python numpy ndarray yaml",
        "output": "",
        "rule": [
            "d18434"
        ]
    },
    {
        "instruction": "",
        "id": "q18435",
        "input": "create set from file in python",
        "output": "",
        "rule": [
            "d18435"
        ]
    },
    {
        "instruction": "",
        "id": "q18436",
        "input": "how to check if a string is a link python",
        "output": "",
        "rule": [
            "d18436"
        ]
    },
    {
        "instruction": "",
        "id": "q18437",
        "input": "redis cluster delete all keys python",
        "output": "",
        "rule": [
            "d18437"
        ]
    },
    {
        "instruction": "",
        "id": "q18438",
        "input": "sum to 1 normalize python",
        "output": "",
        "rule": [
            "d18438"
        ]
    },
    {
        "instruction": "",
        "id": "q18439",
        "input": "python loop skip first line",
        "output": "",
        "rule": [
            "d18439"
        ]
    },
    {
        "instruction": "",
        "id": "q18440",
        "input": "python3 orm mysql datetime now",
        "output": "",
        "rule": [
            "d18440"
        ]
    },
    {
        "instruction": "",
        "id": "q18441",
        "input": "python check if date is end of month",
        "output": "",
        "rule": [
            "d18441"
        ]
    },
    {
        "instruction": "",
        "id": "q18442",
        "input": "string to uuid python",
        "output": "",
        "rule": [
            "d18442"
        ]
    },
    {
        "instruction": "",
        "id": "q18443",
        "input": "how to check is a column is null in python",
        "output": "",
        "rule": [
            "d18443"
        ]
    },
    {
        "instruction": "",
        "id": "q18444",
        "input": "supress python output shell",
        "output": "",
        "rule": [
            "d18444"
        ]
    },
    {
        "instruction": "",
        "id": "q18445",
        "input": "python creating dictionary from list of lists",
        "output": "",
        "rule": [
            "d18445"
        ]
    },
    {
        "instruction": "",
        "id": "q18446",
        "input": "python lower each element of list",
        "output": "",
        "rule": [
            "d18446"
        ]
    },
    {
        "instruction": "",
        "id": "q18447",
        "input": "python invert a dict",
        "output": "",
        "rule": [
            "d18447"
        ]
    },
    {
        "instruction": "",
        "id": "q18448",
        "input": "remove hyper links from sentence in python",
        "output": "",
        "rule": [
            "d18448"
        ]
    },
    {
        "instruction": "",
        "id": "q18449",
        "input": "python parsing bits of stream",
        "output": "",
        "rule": [
            "d18449"
        ]
    },
    {
        "instruction": "",
        "id": "q18450",
        "input": "python get value from tensor as float",
        "output": "",
        "rule": [
            "d18450"
        ]
    },
    {
        "instruction": "",
        "id": "q18451",
        "input": "how to capitalize a letter in a string python",
        "output": "",
        "rule": [
            "d18451"
        ]
    },
    {
        "instruction": "",
        "id": "q18452",
        "input": "how to tell if a value is valid based of its base python",
        "output": "",
        "rule": [
            "d18452"
        ]
    },
    {
        "instruction": "",
        "id": "q18453",
        "input": "python curses set text colour",
        "output": "",
        "rule": [
            "d18453"
        ]
    },
    {
        "instruction": "",
        "id": "q18454",
        "input": "python, get time zone info",
        "output": "",
        "rule": [
            "d18454"
        ]
    },
    {
        "instruction": "",
        "id": "q18455",
        "input": "bulk insert into mongodb collection in python",
        "output": "",
        "rule": [
            "d18455"
        ]
    },
    {
        "instruction": "",
        "id": "q18456",
        "input": "how to get visitor's language in python django",
        "output": "",
        "rule": [
            "d18456"
        ]
    },
    {
        "instruction": "",
        "id": "q18457",
        "input": "python join query string to url",
        "output": "",
        "rule": [
            "d18457"
        ]
    },
    {
        "instruction": "",
        "id": "q18458",
        "input": "get all the flags in python",
        "output": "",
        "rule": [
            "d18458"
        ]
    },
    {
        "instruction": "",
        "id": "q18459",
        "input": "how to check if a string is all letters python",
        "output": "",
        "rule": [
            "d18459"
        ]
    },
    {
        "instruction": "",
        "id": "q18460",
        "input": "count the frequency of an integer in a list python",
        "output": "",
        "rule": [
            "d18460"
        ]
    },
    {
        "instruction": "",
        "id": "q18461",
        "input": "isalpha of a character in a string python3",
        "output": "",
        "rule": [
            "d18461"
        ]
    },
    {
        "instruction": "",
        "id": "q18462",
        "input": "how to get random walk onto python",
        "output": "",
        "rule": [
            "d18462"
        ]
    },
    {
        "instruction": "",
        "id": "q18463",
        "input": "python get cache usage for a process",
        "output": "",
        "rule": [
            "d18463"
        ]
    },
    {
        "instruction": "",
        "id": "q18464",
        "input": "remove from python dict by key",
        "output": "",
        "rule": [
            "d18464"
        ]
    },
    {
        "instruction": "",
        "id": "q18465",
        "input": "python3 flatten a list",
        "output": "",
        "rule": [
            "d18465"
        ]
    },
    {
        "instruction": "",
        "id": "q18466",
        "input": "python pyodbc int to string",
        "output": "",
        "rule": [
            "d18466"
        ]
    },
    {
        "instruction": "",
        "id": "q18467",
        "input": "how does python multiply m,atrices",
        "output": "",
        "rule": [
            "d18467"
        ]
    },
    {
        "instruction": "",
        "id": "q18468",
        "input": "determine if three consectuitve day are above a number python",
        "output": "",
        "rule": [
            "d18468"
        ]
    },
    {
        "instruction": "",
        "id": "q18469",
        "input": "python list index for duplicated data",
        "output": "",
        "rule": [
            "d18469"
        ]
    },
    {
        "instruction": "",
        "id": "q18470",
        "input": "replace every instance of word in python string",
        "output": "",
        "rule": [
            "d18470"
        ]
    },
    {
        "instruction": "",
        "id": "q18471",
        "input": "create a limit of a function in python",
        "output": "",
        "rule": [
            "d18471"
        ]
    },
    {
        "instruction": "",
        "id": "q18472",
        "input": "how to get the length of a key python",
        "output": "",
        "rule": [
            "d18472"
        ]
    },
    {
        "instruction": "",
        "id": "q18473",
        "input": "python flask disable cache",
        "output": "",
        "rule": [
            "d18473"
        ]
    },
    {
        "instruction": "",
        "id": "q18474",
        "input": "python how to shorten the decimals in a float",
        "output": "",
        "rule": [
            "d18474"
        ]
    },
    {
        "instruction": "",
        "id": "q18475",
        "input": "add a local variable python setattr",
        "output": "",
        "rule": [
            "d18475"
        ]
    },
    {
        "instruction": "",
        "id": "q18476",
        "input": "count occurences in a list python",
        "output": "",
        "rule": [
            "d18476"
        ]
    },
    {
        "instruction": "",
        "id": "q18477",
        "input": "how to add ast in python",
        "output": "",
        "rule": [
            "d18477"
        ]
    },
    {
        "instruction": "",
        "id": "q18478",
        "input": "if two strungs are equal python",
        "output": "",
        "rule": [
            "d18478"
        ]
    },
    {
        "instruction": "",
        "id": "q18479",
        "input": "cast list as array in python",
        "output": "",
        "rule": [
            "d18479"
        ]
    },
    {
        "instruction": "",
        "id": "q18480",
        "input": "how do you invert a dictionary python",
        "output": "",
        "rule": [
            "d18480"
        ]
    },
    {
        "instruction": "",
        "id": "q18481",
        "input": "python turn json into string",
        "output": "",
        "rule": [
            "d18481"
        ]
    },
    {
        "instruction": "",
        "id": "q18482",
        "input": "python elementtree clear children",
        "output": "",
        "rule": [
            "d18482"
        ]
    },
    {
        "instruction": "",
        "id": "q18483",
        "input": "list of ms access table names python",
        "output": "",
        "rule": [
            "d18483"
        ]
    },
    {
        "instruction": "",
        "id": "q18484",
        "input": "remove extra whitespace from all kind of data frame column values in python",
        "output": "",
        "rule": [
            "d18484"
        ]
    },
    {
        "instruction": "",
        "id": "q18485",
        "input": "python shortest distance on triangulated mesh",
        "output": "",
        "rule": [
            "d18485"
        ]
    },
    {
        "instruction": "",
        "id": "q18486",
        "input": "python last item inl list",
        "output": "",
        "rule": [
            "d18486"
        ]
    },
    {
        "instruction": "",
        "id": "q18487",
        "input": "python script to check for keyboard input",
        "output": "",
        "rule": [
            "d18487"
        ]
    },
    {
        "instruction": "",
        "id": "q18488",
        "input": "python replacing strings in a list using a dictionary",
        "output": "",
        "rule": [
            "d18488"
        ]
    },
    {
        "instruction": "",
        "id": "q18489",
        "input": "python boto3 s3 get latest object date",
        "output": "",
        "rule": [
            "d18489"
        ]
    },
    {
        "instruction": "",
        "id": "q18490",
        "input": "python replace multiple characters from string",
        "output": "",
        "rule": [
            "d18490"
        ]
    },
    {
        "instruction": "",
        "id": "q18491",
        "input": "python numpy read in a csv file into a numpy array",
        "output": "",
        "rule": [
            "d18491"
        ]
    },
    {
        "instruction": "",
        "id": "q18492",
        "input": "python test if path is full",
        "output": "",
        "rule": [
            "d18492"
        ]
    },
    {
        "instruction": "",
        "id": "q18493",
        "input": "python dateutil last day of month",
        "output": "",
        "rule": [
            "d18493"
        ]
    },
    {
        "instruction": "",
        "id": "q18494",
        "input": "python how to ise math pow(x n)",
        "output": "",
        "rule": [
            "d18494"
        ]
    },
    {
        "instruction": "",
        "id": "q18495",
        "input": "check if value is infinity in python",
        "output": "",
        "rule": [
            "d18495"
        ]
    },
    {
        "instruction": "",
        "id": "q18496",
        "input": "cython string to char python3",
        "output": "",
        "rule": [
            "d18496"
        ]
    },
    {
        "instruction": "",
        "id": "q18497",
        "input": "how to check if shape file is empty or not python",
        "output": "",
        "rule": [
            "d18497"
        ]
    },
    {
        "instruction": "",
        "id": "q18498",
        "input": "check each character in a string python alphanumeric",
        "output": "",
        "rule": [
            "d18498"
        ]
    },
    {
        "instruction": "",
        "id": "q18499",
        "input": "get name of week day in python",
        "output": "",
        "rule": [
            "d18499"
        ]
    },
    {
        "instruction": "",
        "id": "q18500",
        "input": "how to meausre distributed of hash function in python",
        "output": "",
        "rule": [
            "d18500"
        ]
    },
    {
        "instruction": "",
        "id": "q18501",
        "input": "python round or cast to int",
        "output": "",
        "rule": [
            "d18501"
        ]
    },
    {
        "instruction": "",
        "id": "q18502",
        "input": "just get an year from a date in python",
        "output": "",
        "rule": [
            "d18502"
        ]
    },
    {
        "instruction": "",
        "id": "q18503",
        "input": "from 1d tensor to a 3d tensor python",
        "output": "",
        "rule": [
            "d18503"
        ]
    },
    {
        "instruction": "",
        "id": "q18504",
        "input": "win32 move window python",
        "output": "",
        "rule": [
            "d18504"
        ]
    },
    {
        "instruction": "",
        "id": "q18505",
        "input": "python isprime function print integers for a range",
        "output": "",
        "rule": [
            "d18505"
        ]
    },
    {
        "instruction": "",
        "id": "q18506",
        "input": "python strip to turn string into number",
        "output": "",
        "rule": [
            "d18506"
        ]
    },
    {
        "instruction": "",
        "id": "q18507",
        "input": "read line in python skip certain newline",
        "output": "",
        "rule": [
            "d18507"
        ]
    },
    {
        "instruction": "",
        "id": "q18508",
        "input": "initialize an array in python without numpy",
        "output": "",
        "rule": [
            "d18508"
        ]
    },
    {
        "instruction": "",
        "id": "q18509",
        "input": "check whether date is valid python",
        "output": "",
        "rule": [
            "d18509"
        ]
    },
    {
        "instruction": "",
        "id": "q18510",
        "input": "difining np array in python string",
        "output": "",
        "rule": [
            "d18510"
        ]
    },
    {
        "instruction": "",
        "id": "q18511",
        "input": "python get last month days",
        "output": "",
        "rule": [
            "d18511"
        ]
    },
    {
        "instruction": "",
        "id": "q18512",
        "input": "python series datetime to seconds",
        "output": "",
        "rule": [
            "d18512"
        ]
    },
    {
        "instruction": "",
        "id": "q18513",
        "input": "boost python expose a struct with enum type member",
        "output": "",
        "rule": [
            "d18513"
        ]
    },
    {
        "instruction": "",
        "id": "q18514",
        "input": "python set locale threadsafe",
        "output": "",
        "rule": [
            "d18514"
        ]
    },
    {
        "instruction": "",
        "id": "q18515",
        "input": "python to javascript table",
        "output": "",
        "rule": [
            "d18515"
        ]
    },
    {
        "instruction": "",
        "id": "q18516",
        "input": "condition for checking file/folder is empty or not inpython",
        "output": "",
        "rule": [
            "d18516"
        ]
    },
    {
        "instruction": "",
        "id": "q18517",
        "input": "how to write text to a file in python",
        "output": "",
        "rule": [
            "d18517"
        ]
    },
    {
        "instruction": "",
        "id": "q18518",
        "input": "python check to see if file is empty",
        "output": "",
        "rule": [
            "d18518"
        ]
    },
    {
        "instruction": "",
        "id": "q18519",
        "input": "tiff to searchable pdf python",
        "output": "",
        "rule": [
            "d18519"
        ]
    },
    {
        "instruction": "",
        "id": "q18520",
        "input": "python create mapping from value to index of a list",
        "output": "",
        "rule": [
            "d18520"
        ]
    },
    {
        "instruction": "",
        "id": "q18521",
        "input": "how to get first 5 rows from sql in python",
        "output": "",
        "rule": [
            "d18521"
        ]
    },
    {
        "instruction": "",
        "id": "q18522",
        "input": "how to not except empty string python",
        "output": "",
        "rule": [
            "d18522"
        ]
    },
    {
        "instruction": "",
        "id": "q18523",
        "input": "how to see if a line matches in a file python",
        "output": "",
        "rule": [
            "d18523"
        ]
    },
    {
        "instruction": "",
        "id": "q18524",
        "input": "how to check if a variable name is valid in python",
        "output": "",
        "rule": [
            "d18524"
        ]
    },
    {
        "instruction": "",
        "id": "q18525",
        "input": "access database python retreive column names",
        "output": "",
        "rule": [
            "d18525"
        ]
    },
    {
        "instruction": "",
        "id": "q18526",
        "input": "add exponents by the power of 2 in python",
        "output": "",
        "rule": [
            "d18526"
        ]
    },
    {
        "instruction": "",
        "id": "q18527",
        "input": "how to index through a string to get certain positions python",
        "output": "",
        "rule": [
            "d18527"
        ]
    },
    {
        "instruction": "",
        "id": "q18528",
        "input": "python read csv data to numpy array",
        "output": "",
        "rule": [
            "d18528"
        ]
    },
    {
        "instruction": "",
        "id": "q18529",
        "input": "python check existance of key",
        "output": "",
        "rule": [
            "d18529"
        ]
    },
    {
        "instruction": "",
        "id": "q18530",
        "input": "python test if string an int",
        "output": "",
        "rule": [
            "d18530"
        ]
    },
    {
        "instruction": "",
        "id": "q18531",
        "input": "sphinx how to show python code",
        "output": "",
        "rule": [
            "d18531"
        ]
    },
    {
        "instruction": "",
        "id": "q18532",
        "input": "bits of a value python",
        "output": "",
        "rule": [
            "d18532"
        ]
    },
    {
        "instruction": "",
        "id": "q18533",
        "input": "how to limit the function's executing time python",
        "output": "",
        "rule": [
            "d18533"
        ]
    },
    {
        "instruction": "",
        "id": "q18534",
        "input": "how to make sure python stay in memory limit",
        "output": "",
        "rule": [
            "d18534"
        ]
    },
    {
        "instruction": "",
        "id": "q18535",
        "input": "is asyncio thread safe python",
        "output": "",
        "rule": [
            "d18535"
        ]
    },
    {
        "instruction": "",
        "id": "q18536",
        "input": "finding duplicate words in a list python",
        "output": "",
        "rule": [
            "d18536"
        ]
    },
    {
        "instruction": "",
        "id": "q18537",
        "input": "how to delete quotes in python so taht the string will turn into a tuple",
        "output": "",
        "rule": [
            "d18537"
        ]
    },
    {
        "instruction": "",
        "id": "q18538",
        "input": "python how to call methods dynamically",
        "output": "",
        "rule": [
            "d18538"
        ]
    },
    {
        "instruction": "",
        "id": "q18539",
        "input": "python select first columns",
        "output": "",
        "rule": [
            "d18539"
        ]
    },
    {
        "instruction": "",
        "id": "q18540",
        "input": "python process memory leak",
        "output": "",
        "rule": [
            "d18540"
        ]
    },
    {
        "instruction": "",
        "id": "q18541",
        "input": "how to format a string into a date with python",
        "output": "",
        "rule": [
            "d18541"
        ]
    },
    {
        "instruction": "",
        "id": "q18542",
        "input": "python strip a list of string",
        "output": "",
        "rule": [
            "d18542"
        ]
    },
    {
        "instruction": "",
        "id": "q18543",
        "input": "python how to get index of smallest value in a series",
        "output": "",
        "rule": [
            "d18543"
        ]
    },
    {
        "instruction": "",
        "id": "q18544",
        "input": "python numpy get dtype of array",
        "output": "",
        "rule": [
            "d18544"
        ]
    },
    {
        "instruction": "",
        "id": "q18545",
        "input": "python to limit memory usage",
        "output": "",
        "rule": [
            "d18545"
        ]
    },
    {
        "instruction": "",
        "id": "q18546",
        "input": "python how to time a function run",
        "output": "",
        "rule": [
            "d18546"
        ]
    },
    {
        "instruction": "",
        "id": "q18547",
        "input": "python keyword for same method name",
        "output": "",
        "rule": [
            "d18547"
        ]
    },
    {
        "instruction": "",
        "id": "q18548",
        "input": "python check memory usage in a process",
        "output": "",
        "rule": [
            "d18548"
        ]
    },
    {
        "instruction": "",
        "id": "q18549",
        "input": "python pad string with zeros to a certain length",
        "output": "",
        "rule": [
            "d18549"
        ]
    },
    {
        "instruction": "",
        "id": "q18550",
        "input": "python get last weeks time",
        "output": "",
        "rule": [
            "d18550"
        ]
    },
    {
        "instruction": "",
        "id": "q18551",
        "input": "python create diagnol block matrix",
        "output": "",
        "rule": [
            "d18551"
        ]
    },
    {
        "instruction": "",
        "id": "q18552",
        "input": "python list out all column names",
        "output": "",
        "rule": [
            "d18552"
        ]
    },
    {
        "instruction": "",
        "id": "q18553",
        "input": "python how to know data type",
        "output": "",
        "rule": [
            "d18553"
        ]
    },
    {
        "instruction": "",
        "id": "q18554",
        "input": "python json file into dict",
        "output": "",
        "rule": [
            "d18554"
        ]
    },
    {
        "instruction": "",
        "id": "q18555",
        "input": "check if float has no decimal python",
        "output": "",
        "rule": [
            "d18555"
        ]
    },
    {
        "instruction": "",
        "id": "q18556",
        "input": "python delete false keys from dict",
        "output": "",
        "rule": [
            "d18556"
        ]
    },
    {
        "instruction": "",
        "id": "q18557",
        "input": "average of 2d array python",
        "output": "",
        "rule": [
            "d18557"
        ]
    },
    {
        "instruction": "",
        "id": "q18558",
        "input": "how to read contents in a text file python",
        "output": "",
        "rule": [
            "d18558"
        ]
    },
    {
        "instruction": "",
        "id": "q18559",
        "input": "check whether a column has null values or not in python",
        "output": "",
        "rule": [
            "d18559"
        ]
    },
    {
        "instruction": "",
        "id": "q18560",
        "input": "python urlparse strip to domain",
        "output": "",
        "rule": [
            "d18560"
        ]
    },
    {
        "instruction": "",
        "id": "q18561",
        "input": "how to write text in a file through python",
        "output": "",
        "rule": [
            "d18561"
        ]
    },
    {
        "instruction": "",
        "id": "q18562",
        "input": "how to logically and an array in python",
        "output": "",
        "rule": [
            "d18562"
        ]
    },
    {
        "instruction": "",
        "id": "q18563",
        "input": "python identify the third friday of a month",
        "output": "",
        "rule": [
            "d18563"
        ]
    },
    {
        "instruction": "",
        "id": "q18564",
        "input": "iterate for loop a fixed number of times python",
        "output": "",
        "rule": [
            "d18564"
        ]
    },
    {
        "instruction": "",
        "id": "q18565",
        "input": "python code to print tree in reverse",
        "output": "",
        "rule": [
            "d18565"
        ]
    },
    {
        "instruction": "",
        "id": "q18566",
        "input": "how to limit memory usage in python programes",
        "output": "",
        "rule": [
            "d18566"
        ]
    },
    {
        "instruction": "",
        "id": "q18567",
        "input": "get name by user id python",
        "output": "",
        "rule": [
            "d18567"
        ]
    },
    {
        "instruction": "",
        "id": "q18568",
        "input": "python get specific timezone name",
        "output": "",
        "rule": [
            "d18568"
        ]
    },
    {
        "instruction": "",
        "id": "q18569",
        "input": "data types of columns in python",
        "output": "",
        "rule": [
            "d18569"
        ]
    },
    {
        "instruction": "",
        "id": "q18570",
        "input": "reshape shuffle matrix python",
        "output": "",
        "rule": [
            "d18570"
        ]
    },
    {
        "instruction": "",
        "id": "q18571",
        "input": "to get all the column names in python",
        "output": "",
        "rule": [
            "d18571"
        ]
    },
    {
        "instruction": "",
        "id": "q18572",
        "input": "python access a textfile",
        "output": "",
        "rule": [
            "d18572"
        ]
    },
    {
        "instruction": "",
        "id": "q18573",
        "input": "python select last items in list",
        "output": "",
        "rule": [
            "d18573"
        ]
    },
    {
        "instruction": "",
        "id": "q18574",
        "input": "python display contents of a text file",
        "output": "",
        "rule": [
            "d18574"
        ]
    },
    {
        "instruction": "",
        "id": "q18575",
        "input": "python test if pageobject is empty",
        "output": "",
        "rule": [
            "d18575"
        ]
    },
    {
        "instruction": "",
        "id": "q18576",
        "input": "python whether today is 3rd wendesday",
        "output": "",
        "rule": [
            "d18576"
        ]
    },
    {
        "instruction": "",
        "id": "q18577",
        "input": "python test if callable",
        "output": "",
        "rule": [
            "d18577"
        ]
    },
    {
        "instruction": "",
        "id": "q18578",
        "input": "python check file contains line",
        "output": "",
        "rule": [
            "d18578"
        ]
    },
    {
        "instruction": "",
        "id": "q18579",
        "input": "capitalize letter in python string",
        "output": "",
        "rule": [
            "d18579"
        ]
    },
    {
        "instruction": "",
        "id": "q18580",
        "input": "python minimum in a column",
        "output": "",
        "rule": [
            "d18580"
        ]
    },
    {
        "instruction": "",
        "id": "q18581",
        "input": "python string to lowercast",
        "output": "",
        "rule": [
            "d18581"
        ]
    },
    {
        "instruction": "",
        "id": "q18582",
        "input": "python check if is an int",
        "output": "",
        "rule": [
            "d18582"
        ]
    },
    {
        "instruction": "",
        "id": "q18583",
        "input": "python underscore in for loop",
        "output": "",
        "rule": [
            "d18583"
        ]
    },
    {
        "instruction": "",
        "id": "q18584",
        "input": "python sqlalchemy column data types",
        "output": "",
        "rule": [
            "d18584"
        ]
    },
    {
        "instruction": "",
        "id": "q18585",
        "input": "how to print values in list greater than 5 python",
        "output": "",
        "rule": [
            "d18585"
        ]
    },
    {
        "instruction": "",
        "id": "q18586",
        "input": "ironpython check if data table exists",
        "output": "",
        "rule": [
            "d18586"
        ]
    },
    {
        "instruction": "",
        "id": "q18587",
        "input": "round float up to int python",
        "output": "",
        "rule": [
            "d18587"
        ]
    },
    {
        "instruction": "",
        "id": "q18588",
        "input": "how to count the number of times a value appears in a list in functions python",
        "output": "",
        "rule": [
            "d18588"
        ]
    },
    {
        "instruction": "",
        "id": "q18589",
        "input": "python longest substring of same char",
        "output": "",
        "rule": [
            "d18589"
        ]
    },
    {
        "instruction": "",
        "id": "q18590",
        "input": "clear output in python 3",
        "output": "",
        "rule": [
            "d18590"
        ]
    },
    {
        "instruction": "",
        "id": "q18591",
        "input": "using python to send serial commands",
        "output": "",
        "rule": [
            "d18591"
        ]
    },
    {
        "instruction": "",
        "id": "q18592",
        "input": "limit execution time of a python function",
        "output": "",
        "rule": [
            "d18592"
        ]
    },
    {
        "instruction": "",
        "id": "q18593",
        "input": "command line python pass argparse to function",
        "output": "",
        "rule": [
            "d18593"
        ]
    },
    {
        "instruction": "",
        "id": "q18594",
        "input": "python manipulate bits 32 bit ints",
        "output": "",
        "rule": [
            "d18594"
        ]
    },
    {
        "instruction": "",
        "id": "q18595",
        "input": "python add min to datetime",
        "output": "",
        "rule": [
            "d18595"
        ]
    },
    {
        "instruction": "",
        "id": "q18596",
        "input": "how to read file from s3 using python using boto",
        "output": "",
        "rule": [
            "d18596"
        ]
    },
    {
        "instruction": "",
        "id": "q18597",
        "input": "turn a timestring in to a date time python",
        "output": "",
        "rule": [
            "d18597"
        ]
    },
    {
        "instruction": "",
        "id": "q18598",
        "input": "function for checking duplicates in lists python",
        "output": "",
        "rule": [
            "d18598"
        ]
    },
    {
        "instruction": "",
        "id": "q18599",
        "input": "python make dict from key list",
        "output": "",
        "rule": [
            "d18599"
        ]
    },
    {
        "instruction": "",
        "id": "q18600",
        "input": "python index of last string",
        "output": "",
        "rule": [
            "d18600"
        ]
    },
    {
        "instruction": "",
        "id": "q18601",
        "input": "python return first 2 dimensions of 3 dimensional array",
        "output": "",
        "rule": [
            "d18601"
        ]
    },
    {
        "instruction": "",
        "id": "q18602",
        "input": "get data type columns python",
        "output": "",
        "rule": [
            "d18602"
        ]
    },
    {
        "instruction": "",
        "id": "q18603",
        "input": "python binary without string",
        "output": "",
        "rule": [
            "d18603"
        ]
    },
    {
        "instruction": "",
        "id": "q18604",
        "input": "get file from s3 python",
        "output": "",
        "rule": [
            "d18604"
        ]
    },
    {
        "instruction": "",
        "id": "q18605",
        "input": "python sql alchemy delete sql table",
        "output": "",
        "rule": [
            "d18605"
        ]
    },
    {
        "instruction": "",
        "id": "q18606",
        "input": "remove entries from a python dictionary",
        "output": "",
        "rule": [
            "d18606"
        ]
    },
    {
        "instruction": "",
        "id": "q18607",
        "input": "how can i get the rdd index python",
        "output": "",
        "rule": [
            "d18607"
        ]
    },
    {
        "instruction": "",
        "id": "q18608",
        "input": "python check if prime function",
        "output": "",
        "rule": [
            "d18608"
        ]
    },
    {
        "instruction": "",
        "id": "q18609",
        "input": "python if type is str",
        "output": "",
        "rule": [
            "d18609"
        ]
    },
    {
        "instruction": "",
        "id": "q18610",
        "input": "python reading json files into dictionary",
        "output": "",
        "rule": [
            "d18610"
        ]
    },
    {
        "instruction": "",
        "id": "q18611",
        "input": "how to check whether the set has nan python",
        "output": "",
        "rule": [
            "d18611"
        ]
    },
    {
        "instruction": "",
        "id": "q18612",
        "input": "get date time object python from string",
        "output": "",
        "rule": [
            "d18612"
        ]
    },
    {
        "instruction": "",
        "id": "q18613",
        "input": "python repeat sequence certain amount of times",
        "output": "",
        "rule": [
            "d18613"
        ]
    },
    {
        "instruction": "",
        "id": "q18614",
        "input": "reading cursor position in python",
        "output": "",
        "rule": [
            "d18614"
        ]
    },
    {
        "instruction": "",
        "id": "q18615",
        "input": "python making a list out of a string",
        "output": "",
        "rule": [
            "d18615"
        ]
    },
    {
        "instruction": "",
        "id": "q18616",
        "input": "python get key with greatest value",
        "output": "",
        "rule": [
            "d18616"
        ]
    },
    {
        "instruction": "",
        "id": "q18617",
        "input": "make string empty in python",
        "output": "",
        "rule": [
            "d18617"
        ]
    },
    {
        "instruction": "",
        "id": "q18618",
        "input": "python tk get background color",
        "output": "",
        "rule": [
            "d18618"
        ]
    },
    {
        "instruction": "",
        "id": "q18619",
        "input": "how to iterate from the last element in a list in python",
        "output": "",
        "rule": [
            "d18619"
        ]
    },
    {
        "instruction": "",
        "id": "q18620",
        "input": "rotating a list in python",
        "output": "",
        "rule": [
            "d18620"
        ]
    },
    {
        "instruction": "",
        "id": "q18621",
        "input": "python sanitize file name",
        "output": "",
        "rule": [
            "d18621"
        ]
    },
    {
        "instruction": "",
        "id": "q18622",
        "input": "handle yaml files in python",
        "output": "",
        "rule": [
            "d18622"
        ]
    },
    {
        "instruction": "",
        "id": "q18623",
        "input": "a function that determines the percentage of missing entries for each column in the dataset python",
        "output": "",
        "rule": [
            "d18623"
        ]
    },
    {
        "instruction": "",
        "id": "q18624",
        "input": "python drop a key from dictionary",
        "output": "",
        "rule": [
            "d18624"
        ]
    },
    {
        "instruction": "",
        "id": "q18625",
        "input": "how to limit python memory",
        "output": "",
        "rule": [
            "d18625"
        ]
    },
    {
        "instruction": "",
        "id": "q18626",
        "input": "definition of prime in python",
        "output": "",
        "rule": [
            "d18626"
        ]
    },
    {
        "instruction": "",
        "id": "q18627",
        "input": "python read a json file into dictionary",
        "output": "",
        "rule": [
            "d18627"
        ]
    },
    {
        "instruction": "",
        "id": "q18628",
        "input": "keep only uppercase words in string python",
        "output": "",
        "rule": [
            "d18628"
        ]
    },
    {
        "instruction": "",
        "id": "q18629",
        "input": "python check is an string",
        "output": "",
        "rule": [
            "d18629"
        ]
    },
    {
        "instruction": "",
        "id": "q18630",
        "input": "marshmallow python calling schema self for a nested field",
        "output": "",
        "rule": [
            "d18630"
        ]
    },
    {
        "instruction": "",
        "id": "q18631",
        "input": "python numpy how to get number of rows of matrix",
        "output": "",
        "rule": [
            "d18631"
        ]
    },
    {
        "instruction": "",
        "id": "q18632",
        "input": "from string to datetime in python",
        "output": "",
        "rule": [
            "d18632"
        ]
    },
    {
        "instruction": "",
        "id": "q18633",
        "input": "python extract numerical part of string",
        "output": "",
        "rule": [
            "d18633"
        ]
    },
    {
        "instruction": "",
        "id": "q18634",
        "input": "how to make a name randomizer in python",
        "output": "",
        "rule": [
            "d18634"
        ]
    },
    {
        "instruction": "",
        "id": "q18635",
        "input": "python covert tensorflow to numpy",
        "output": "",
        "rule": [
            "d18635"
        ]
    },
    {
        "instruction": "",
        "id": "q18636",
        "input": "count number of ocurrences of a number in a list python",
        "output": "",
        "rule": [
            "d18636"
        ]
    },
    {
        "instruction": "",
        "id": "q18637",
        "input": "see if something is formatted url properly python",
        "output": "",
        "rule": [
            "d18637"
        ]
    },
    {
        "instruction": "",
        "id": "q18638",
        "input": "how to check if my python is 64 or 32 bit",
        "output": "",
        "rule": [
            "d18638"
        ]
    },
    {
        "instruction": "",
        "id": "q18639",
        "input": "any python list of strings",
        "output": "",
        "rule": [
            "d18639"
        ]
    },
    {
        "instruction": "",
        "id": "q18640",
        "input": "get time zone in python",
        "output": "",
        "rule": [
            "d18640"
        ]
    },
    {
        "instruction": "",
        "id": "q18641",
        "input": "python sqlalchemy get column type",
        "output": "",
        "rule": [
            "d18641"
        ]
    },
    {
        "instruction": "",
        "id": "q18642",
        "input": "how to skip reading a line python",
        "output": "",
        "rule": [
            "d18642"
        ]
    },
    {
        "instruction": "",
        "id": "q18643",
        "input": "python json file dictionary in a dictionary",
        "output": "",
        "rule": [
            "d18643"
        ]
    },
    {
        "instruction": "",
        "id": "q18644",
        "input": "check if column value is null python",
        "output": "",
        "rule": [
            "d18644"
        ]
    },
    {
        "instruction": "",
        "id": "q18645",
        "input": "python string concat \"a\"/\"b\"",
        "output": "",
        "rule": [
            "d18645"
        ]
    },
    {
        "instruction": "",
        "id": "q18646",
        "input": "python input validation int or sentinal",
        "output": "",
        "rule": [
            "d18646"
        ]
    },
    {
        "instruction": "",
        "id": "q18647",
        "input": "python delete a element from set",
        "output": "",
        "rule": [
            "d18647"
        ]
    },
    {
        "instruction": "",
        "id": "q18648",
        "input": "cplit a string to list in python",
        "output": "",
        "rule": [
            "d18648"
        ]
    },
    {
        "instruction": "",
        "id": "q18649",
        "input": "python last weekday of the month",
        "output": "",
        "rule": [
            "d18649"
        ]
    },
    {
        "instruction": "",
        "id": "q18650",
        "input": "python numpy calculate stdev",
        "output": "",
        "rule": [
            "d18650"
        ]
    },
    {
        "instruction": "",
        "id": "q18651",
        "input": "filter values in a dictionary based on condition python",
        "output": "",
        "rule": [
            "d18651"
        ]
    },
    {
        "instruction": "",
        "id": "q18652",
        "input": "python get content of text file",
        "output": "",
        "rule": [
            "d18652"
        ]
    },
    {
        "instruction": "",
        "id": "q18653",
        "input": "python first 500 elements of array",
        "output": "",
        "rule": [
            "d18653"
        ]
    },
    {
        "instruction": "",
        "id": "q18654",
        "input": "python list of indexes for each newline in string",
        "output": "",
        "rule": [
            "d18654"
        ]
    },
    {
        "instruction": "",
        "id": "q18655",
        "input": "python check the column contains null",
        "output": "",
        "rule": [
            "d18655"
        ]
    },
    {
        "instruction": "",
        "id": "q18656",
        "input": "how to get column length row length of 2d array in python",
        "output": "",
        "rule": [
            "d18656"
        ]
    },
    {
        "instruction": "",
        "id": "q18657",
        "input": "returns property object instead of its value python",
        "output": "",
        "rule": [
            "d18657"
        ]
    },
    {
        "instruction": "",
        "id": "q18658",
        "input": "get every first item of array python",
        "output": "",
        "rule": [
            "d18658"
        ]
    },
    {
        "instruction": "",
        "id": "q18659",
        "input": "python compare none with integer",
        "output": "",
        "rule": [
            "d18659"
        ]
    },
    {
        "instruction": "",
        "id": "q18660",
        "input": "to get last 12 months of data in python",
        "output": "",
        "rule": [
            "d18660"
        ]
    },
    {
        "instruction": "",
        "id": "q18661",
        "input": "maximum value in a column in python",
        "output": "",
        "rule": [
            "d18661"
        ]
    },
    {
        "instruction": "",
        "id": "q18662",
        "input": "finding least value in an array python",
        "output": "",
        "rule": [
            "d18662"
        ]
    },
    {
        "instruction": "",
        "id": "q18663",
        "input": "check and see if any element in array meets condition python",
        "output": "",
        "rule": [
            "d18663"
        ]
    },
    {
        "instruction": "",
        "id": "q18664",
        "input": "strip blank space from string in python",
        "output": "",
        "rule": [
            "d18664"
        ]
    },
    {
        "instruction": "",
        "id": "q18665",
        "input": "check if a node is a leaf node python",
        "output": "",
        "rule": [
            "d18665"
        ]
    },
    {
        "instruction": "",
        "id": "q18666",
        "input": "midpoint of two values in python",
        "output": "",
        "rule": [
            "d18666"
        ]
    },
    {
        "instruction": "",
        "id": "q18667",
        "input": "destroy an object at constructor python using destroy",
        "output": "",
        "rule": [
            "d18667"
        ]
    },
    {
        "instruction": "",
        "id": "q18668",
        "input": "python assert two values are not the same",
        "output": "",
        "rule": [
            "d18668"
        ]
    },
    {
        "instruction": "",
        "id": "q18669",
        "input": "detect language of a text python",
        "output": "",
        "rule": [
            "d18669"
        ]
    },
    {
        "instruction": "",
        "id": "q18670",
        "input": "how to print python *args",
        "output": "",
        "rule": [
            "d18670"
        ]
    },
    {
        "instruction": "",
        "id": "q18671",
        "input": "python call rest service using post",
        "output": "",
        "rule": [
            "d18671"
        ]
    },
    {
        "instruction": "",
        "id": "q18672",
        "input": "using map in python to flip a dictionary",
        "output": "",
        "rule": [
            "d18672"
        ]
    },
    {
        "instruction": "",
        "id": "q18673",
        "input": "python change type from int to boolean",
        "output": "",
        "rule": [
            "d18673"
        ]
    },
    {
        "instruction": "",
        "id": "q18674",
        "input": "python program to unpack a tuple in saveral variable",
        "output": "",
        "rule": [
            "d18674"
        ]
    },
    {
        "instruction": "",
        "id": "q18675",
        "input": "get year from a date in python",
        "output": "",
        "rule": [
            "d18675"
        ]
    },
    {
        "instruction": "",
        "id": "q18676",
        "input": "wordnet python get synset",
        "output": "",
        "rule": [
            "d18676"
        ]
    },
    {
        "instruction": "",
        "id": "q18677",
        "input": "c++ opencv python3 opencv read jpg diffrent",
        "output": "",
        "rule": [
            "d18677"
        ]
    },
    {
        "instruction": "",
        "id": "q18678",
        "input": "remove columns from pd python",
        "output": "",
        "rule": [
            "d18678"
        ]
    },
    {
        "instruction": "",
        "id": "q18679",
        "input": "python queue element stackoverflow",
        "output": "",
        "rule": [
            "d18679"
        ]
    },
    {
        "instruction": "",
        "id": "q18680",
        "input": "python split sting to tokens",
        "output": "",
        "rule": [
            "d18680"
        ]
    },
    {
        "instruction": "",
        "id": "q18681",
        "input": "python get last x bytes of file",
        "output": "",
        "rule": [
            "d18681"
        ]
    },
    {
        "instruction": "",
        "id": "q18682",
        "input": "set default editorfor python scripts windows",
        "output": "",
        "rule": [
            "d18682"
        ]
    },
    {
        "instruction": "",
        "id": "q18683",
        "input": "get current cursor position python",
        "output": "",
        "rule": [
            "d18683"
        ]
    },
    {
        "instruction": "",
        "id": "q18684",
        "input": "python assert not equals",
        "output": "",
        "rule": [
            "d18684"
        ]
    },
    {
        "instruction": "",
        "id": "q18685",
        "input": "to check if there is na value in a column python",
        "output": "",
        "rule": [
            "d18685"
        ]
    },
    {
        "instruction": "",
        "id": "q18686",
        "input": "python get pixel color from image frame",
        "output": "",
        "rule": [
            "d18686"
        ]
    },
    {
        "instruction": "",
        "id": "q18687",
        "input": "python replace multiple value in string",
        "output": "",
        "rule": [
            "d18687"
        ]
    },
    {
        "instruction": "",
        "id": "q18688",
        "input": "python sqlalchemy contains string",
        "output": "",
        "rule": [
            "d18688"
        ]
    },
    {
        "instruction": "",
        "id": "q18689",
        "input": "python concatenate numpy along axis",
        "output": "",
        "rule": [
            "d18689"
        ]
    },
    {
        "instruction": "",
        "id": "q18690",
        "input": "pythonhow covert string on int",
        "output": "",
        "rule": [
            "d18690"
        ]
    },
    {
        "instruction": "",
        "id": "q18691",
        "input": "enum else if python",
        "output": "",
        "rule": [
            "d18691"
        ]
    },
    {
        "instruction": "",
        "id": "q18692",
        "input": "read a file from s3 python",
        "output": "",
        "rule": [
            "d18692"
        ]
    },
    {
        "instruction": "",
        "id": "q18693",
        "input": "how to call a python file to use in argparse for arguement python",
        "output": "",
        "rule": [
            "d18693"
        ]
    },
    {
        "instruction": "",
        "id": "q18694",
        "input": "python truncate leading zeros",
        "output": "",
        "rule": [
            "d18694"
        ]
    },
    {
        "instruction": "",
        "id": "q18695",
        "input": "select multiple of treeview row python",
        "output": "",
        "rule": [
            "d18695"
        ]
    },
    {
        "instruction": "",
        "id": "q18696",
        "input": "callin limit function in python",
        "output": "",
        "rule": [
            "d18696"
        ]
    },
    {
        "instruction": "",
        "id": "q18697",
        "input": "how to select a random number from normal distribution in python",
        "output": "",
        "rule": [
            "d18697"
        ]
    },
    {
        "instruction": "",
        "id": "q18698",
        "input": "check the cores in a processor python multiprocessing",
        "output": "",
        "rule": [
            "d18698"
        ]
    },
    {
        "instruction": "",
        "id": "q18699",
        "input": "zeropadding to string in python",
        "output": "",
        "rule": [
            "d18699"
        ]
    },
    {
        "instruction": "",
        "id": "q18700",
        "input": "check column is null python",
        "output": "",
        "rule": [
            "d18700"
        ]
    },
    {
        "instruction": "",
        "id": "q18701",
        "input": "python replace a char with another in a string",
        "output": "",
        "rule": [
            "d18701"
        ]
    },
    {
        "instruction": "",
        "id": "q18702",
        "input": "python math log index 0 is out of bounds for axis 0 with size 0",
        "output": "",
        "rule": [
            "d18702"
        ]
    },
    {
        "instruction": "",
        "id": "q18703",
        "input": "python comprehension for flatmap",
        "output": "",
        "rule": [
            "d18703"
        ]
    },
    {
        "instruction": "",
        "id": "q18704",
        "input": "python get hostname from url",
        "output": "",
        "rule": [
            "d18704"
        ]
    },
    {
        "instruction": "",
        "id": "q18705",
        "input": "python how to add trailing zeroes",
        "output": "",
        "rule": [
            "d18705"
        ]
    },
    {
        "instruction": "",
        "id": "q18706",
        "input": "how to return first number in array of python",
        "output": "",
        "rule": [
            "d18706"
        ]
    },
    {
        "instruction": "",
        "id": "q18707",
        "input": "python 3 if action is within a set time do nothing",
        "output": "",
        "rule": [
            "d18707"
        ]
    },
    {
        "instruction": "",
        "id": "q18708",
        "input": "python check if a set is a subset",
        "output": "",
        "rule": [
            "d18708"
        ]
    },
    {
        "instruction": "",
        "id": "q18709",
        "input": "rotating a list l n times in python",
        "output": "",
        "rule": [
            "d18709"
        ]
    },
    {
        "instruction": "",
        "id": "q18710",
        "input": "python setuptools extension output dir",
        "output": "",
        "rule": [
            "d18710"
        ]
    },
    {
        "instruction": "",
        "id": "q18711",
        "input": "how to get the domain name from netloc in python",
        "output": "",
        "rule": [
            "d18711"
        ]
    },
    {
        "instruction": "",
        "id": "q18712",
        "input": "python check if type of variable is string",
        "output": "",
        "rule": [
            "d18712"
        ]
    },
    {
        "instruction": "",
        "id": "q18713",
        "input": "get the last month from python",
        "output": "",
        "rule": [
            "d18713"
        ]
    },
    {
        "instruction": "",
        "id": "q18714",
        "input": "currnet position of the file cursor pythone",
        "output": "",
        "rule": [
            "d18714"
        ]
    },
    {
        "instruction": "",
        "id": "q18715",
        "input": "calculate time of a python function",
        "output": "",
        "rule": [
            "d18715"
        ]
    },
    {
        "instruction": "",
        "id": "q18716",
        "input": "how to make a string be a list python",
        "output": "",
        "rule": [
            "d18716"
        ]
    },
    {
        "instruction": "",
        "id": "q18717",
        "input": "how to get the last element in a series python",
        "output": "",
        "rule": [
            "d18717"
        ]
    },
    {
        "instruction": "",
        "id": "q18718",
        "input": "python get index of element satisfying condition",
        "output": "",
        "rule": [
            "d18718"
        ]
    },
    {
        "instruction": "",
        "id": "q18719",
        "input": "fibonacci python loops with return",
        "output": "",
        "rule": [
            "d18719"
        ]
    },
    {
        "instruction": "",
        "id": "q18720",
        "input": "how to suppress true output in python",
        "output": "",
        "rule": [
            "d18720"
        ]
    },
    {
        "instruction": "",
        "id": "q18721",
        "input": "get types of all python columns",
        "output": "",
        "rule": [
            "d18721"
        ]
    },
    {
        "instruction": "",
        "id": "q18722",
        "input": "python limit the execution time of a function call",
        "output": "",
        "rule": [
            "d18722"
        ]
    },
    {
        "instruction": "",
        "id": "q18723",
        "input": "python sample file s3 fetch",
        "output": "",
        "rule": [
            "d18723"
        ]
    },
    {
        "instruction": "",
        "id": "q18724",
        "input": "how to rotate items in a list python",
        "output": "",
        "rule": [
            "d18724"
        ]
    },
    {
        "instruction": "",
        "id": "q18725",
        "input": "python check if a key exists",
        "output": "",
        "rule": [
            "d18725"
        ]
    },
    {
        "instruction": "",
        "id": "q18726",
        "input": "ndarray to string python",
        "output": "",
        "rule": [
            "d18726"
        ]
    },
    {
        "instruction": "",
        "id": "q18727",
        "input": "python delete all files with a given extension",
        "output": "",
        "rule": [
            "d18727"
        ]
    },
    {
        "instruction": "",
        "id": "q18728",
        "input": "how to define a float in python",
        "output": "",
        "rule": [
            "d18728"
        ]
    },
    {
        "instruction": "",
        "id": "q18729",
        "input": "zero padding in strings in python",
        "output": "",
        "rule": [
            "d18729"
        ]
    },
    {
        "instruction": "",
        "id": "q18730",
        "input": "how to list dynamo db table names using python",
        "output": "",
        "rule": [
            "d18730"
        ]
    },
    {
        "instruction": "",
        "id": "q18731",
        "input": "how to kill threads python",
        "output": "",
        "rule": [
            "d18731"
        ]
    },
    {
        "instruction": "",
        "id": "q18732",
        "input": "python list to dictionary with indexs",
        "output": "",
        "rule": [
            "d18732"
        ]
    },
    {
        "instruction": "",
        "id": "q18733",
        "input": "get column names from the database in python pyodbc",
        "output": "",
        "rule": [
            "d18733"
        ]
    },
    {
        "instruction": "",
        "id": "q18734",
        "input": "how to delete something from a set python",
        "output": "",
        "rule": [
            "d18734"
        ]
    },
    {
        "instruction": "",
        "id": "q18735",
        "input": "delete blank str python",
        "output": "",
        "rule": [
            "d18735"
        ]
    },
    {
        "instruction": "",
        "id": "q18736",
        "input": "get read position python",
        "output": "",
        "rule": [
            "d18736"
        ]
    },
    {
        "instruction": "",
        "id": "q18737",
        "input": "change python path pylint",
        "output": "",
        "rule": [
            "d18737"
        ]
    },
    {
        "instruction": "",
        "id": "q18738",
        "input": "python skip[ byte read file",
        "output": "",
        "rule": [
            "d18738"
        ]
    },
    {
        "instruction": "",
        "id": "q18739",
        "input": "python url extraction from domains",
        "output": "",
        "rule": [
            "d18739"
        ]
    },
    {
        "instruction": "",
        "id": "q18740",
        "input": "empty file condition in python",
        "output": "",
        "rule": [
            "d18740"
        ]
    },
    {
        "instruction": "",
        "id": "q18741",
        "input": "max on a list of ints in python",
        "output": "",
        "rule": [
            "d18741"
        ]
    },
    {
        "instruction": "",
        "id": "q18742",
        "input": "how to do a bitwise and function in python",
        "output": "",
        "rule": [
            "d18742"
        ]
    },
    {
        "instruction": "",
        "id": "q18743",
        "input": "python max column value",
        "output": "",
        "rule": [
            "d18743"
        ]
    },
    {
        "instruction": "",
        "id": "q18744",
        "input": "python determine if path is relative or absolute",
        "output": "",
        "rule": [
            "d18744"
        ]
    },
    {
        "instruction": "",
        "id": "q18745",
        "input": "python3 np arry to str",
        "output": "",
        "rule": [
            "d18745"
        ]
    },
    {
        "instruction": "",
        "id": "q18746",
        "input": "get first or default in python",
        "output": "",
        "rule": [
            "d18746"
        ]
    },
    {
        "instruction": "",
        "id": "q18747",
        "input": "python3 hex to int",
        "output": "",
        "rule": [
            "d18747"
        ]
    },
    {
        "instruction": "",
        "id": "q18748",
        "input": "remove links in python clean text",
        "output": "",
        "rule": [
            "d18748"
        ]
    },
    {
        "instruction": "",
        "id": "q18749",
        "input": "usinf filter on dictionary python",
        "output": "",
        "rule": [
            "d18749"
        ]
    },
    {
        "instruction": "",
        "id": "q18750",
        "input": "validations for dict inside array jsonschema python",
        "output": "",
        "rule": [
            "d18750"
        ]
    },
    {
        "instruction": "",
        "id": "q18751",
        "input": "python is yaml load fails",
        "output": "",
        "rule": [
            "d18751"
        ]
    },
    {
        "instruction": "",
        "id": "q18752",
        "input": "python list to tensorflow tensor",
        "output": "",
        "rule": [
            "d18752"
        ]
    },
    {
        "instruction": "",
        "id": "q18753",
        "input": "python hsv rgb transform",
        "output": "",
        "rule": [
            "d18753"
        ]
    },
    {
        "instruction": "",
        "id": "q18754",
        "input": "format decimals as percentages in a column, 2 decimals python",
        "output": "",
        "rule": [
            "d18754"
        ]
    },
    {
        "instruction": "",
        "id": "q18755",
        "input": "how to log in in instagram using python",
        "output": "",
        "rule": [
            "d18755"
        ]
    },
    {
        "instruction": "",
        "id": "q18756",
        "input": "python df check if column has specif nan value",
        "output": "",
        "rule": [
            "d18756"
        ]
    },
    {
        "instruction": "",
        "id": "q18757",
        "input": "get entire first dimension of 3dimension array python",
        "output": "",
        "rule": [
            "d18757"
        ]
    },
    {
        "instruction": "",
        "id": "q18758",
        "input": "python how to skip a line",
        "output": "",
        "rule": [
            "d18758"
        ]
    },
    {
        "instruction": "",
        "id": "q18759",
        "input": "not a number equal python",
        "output": "",
        "rule": [
            "d18759"
        ]
    },
    {
        "instruction": "",
        "id": "q18760",
        "input": "python repeat a value n times in a list",
        "output": "",
        "rule": [
            "d18760"
        ]
    },
    {
        "instruction": "",
        "id": "q18761",
        "input": "how to keep leading zero's in an integer in python",
        "output": "",
        "rule": [
            "d18761"
        ]
    },
    {
        "instruction": "",
        "id": "q18762",
        "input": "make empty 2d array python",
        "output": "",
        "rule": [
            "d18762"
        ]
    },
    {
        "instruction": "",
        "id": "q18763",
        "input": "increase animation speed python",
        "output": "",
        "rule": [
            "d18763"
        ]
    },
    {
        "instruction": "",
        "id": "q18764",
        "input": "check if value is integeer python",
        "output": "",
        "rule": [
            "d18764"
        ]
    },
    {
        "instruction": "",
        "id": "q18765",
        "input": "python check if two path are the same",
        "output": "",
        "rule": [
            "d18765"
        ]
    },
    {
        "instruction": "",
        "id": "q18766",
        "input": "how to replace some characters in a string in python",
        "output": "",
        "rule": [
            "d18766"
        ]
    },
    {
        "instruction": "",
        "id": "q18767",
        "input": "element wise product python",
        "output": "",
        "rule": [
            "d18767"
        ]
    },
    {
        "instruction": "",
        "id": "q18768",
        "input": "python mysql yield all rows",
        "output": "",
        "rule": [
            "d18768"
        ]
    },
    {
        "instruction": "",
        "id": "q18769",
        "input": "how to return to previous line in python",
        "output": "",
        "rule": [
            "d18769"
        ]
    },
    {
        "instruction": "",
        "id": "q18770",
        "input": "python how to define limit of function",
        "output": "",
        "rule": [
            "d18770"
        ]
    },
    {
        "instruction": "",
        "id": "q18771",
        "input": "python string of hex to int",
        "output": "",
        "rule": [
            "d18771"
        ]
    },
    {
        "instruction": "",
        "id": "q18772",
        "input": "python is integer or float",
        "output": "",
        "rule": [
            "d18772"
        ]
    },
    {
        "instruction": "",
        "id": "q18773",
        "input": "python how delete item in a list if partial duplicate",
        "output": "",
        "rule": [
            "d18773"
        ]
    },
    {
        "instruction": "",
        "id": "q18774",
        "input": "how to uppercase first letter in each sentence python string upper method",
        "output": "",
        "rule": [
            "d18774"
        ]
    },
    {
        "instruction": "",
        "id": "q18775",
        "input": "python how to call main that has argparse",
        "output": "",
        "rule": [
            "d18775"
        ]
    },
    {
        "instruction": "",
        "id": "q18776",
        "input": "create a list of unique indexes python",
        "output": "",
        "rule": [
            "d18776"
        ]
    },
    {
        "instruction": "",
        "id": "q18777",
        "input": "how to check if a line is in a txt file python",
        "output": "",
        "rule": [
            "d18777"
        ]
    },
    {
        "instruction": "",
        "id": "q18778",
        "input": "python get two closest numbers in list",
        "output": "",
        "rule": [
            "d18778"
        ]
    },
    {
        "instruction": "",
        "id": "q18779",
        "input": "function that returns plural string python",
        "output": "",
        "rule": [
            "d18779"
        ]
    },
    {
        "instruction": "",
        "id": "q18780",
        "input": "python list the factors of an integer",
        "output": "",
        "rule": [
            "d18780"
        ]
    },
    {
        "instruction": "",
        "id": "q18781",
        "input": "how to get the env variables in python in crontab",
        "output": "",
        "rule": [
            "d18781"
        ]
    },
    {
        "instruction": "",
        "id": "q18782",
        "input": "return last matching index python",
        "output": "",
        "rule": [
            "d18782"
        ]
    },
    {
        "instruction": "",
        "id": "q18783",
        "input": "dot product of 2d matrix in python",
        "output": "",
        "rule": [
            "d18783"
        ]
    },
    {
        "instruction": "",
        "id": "q18784",
        "input": "python strip all items in a list",
        "output": "",
        "rule": [
            "d18784"
        ]
    },
    {
        "instruction": "",
        "id": "q18785",
        "input": "extract model number from a split python",
        "output": "",
        "rule": [
            "d18785"
        ]
    },
    {
        "instruction": "",
        "id": "q18786",
        "input": "change column type from pbject to int python",
        "output": "",
        "rule": [
            "d18786"
        ]
    },
    {
        "instruction": "",
        "id": "q18787",
        "input": "python get unique values from object",
        "output": "",
        "rule": [
            "d18787"
        ]
    },
    {
        "instruction": "",
        "id": "q18788",
        "input": "how to loopback to a previous line in python",
        "output": "",
        "rule": [
            "d18788"
        ]
    },
    {
        "instruction": "",
        "id": "q18789",
        "input": "how to post prune decision tree python",
        "output": "",
        "rule": [
            "d18789"
        ]
    },
    {
        "instruction": "",
        "id": "q18790",
        "input": "python 3 covert string to date",
        "output": "",
        "rule": [
            "d18790"
        ]
    },
    {
        "instruction": "",
        "id": "q18791",
        "input": "how to get branches from git by python",
        "output": "",
        "rule": [
            "d18791"
        ]
    },
    {
        "instruction": "",
        "id": "q18792",
        "input": "python get type of self",
        "output": "",
        "rule": [
            "d18792"
        ]
    },
    {
        "instruction": "",
        "id": "q18793",
        "input": "python list of lists last element",
        "output": "",
        "rule": [
            "d18793"
        ]
    },
    {
        "instruction": "",
        "id": "q18794",
        "input": "highest values of a dictionary values in python",
        "output": "",
        "rule": [
            "d18794"
        ]
    },
    {
        "instruction": "",
        "id": "q18795",
        "input": "python string split to list of tuples",
        "output": "",
        "rule": [
            "d18795"
        ]
    },
    {
        "instruction": "",
        "id": "q18796",
        "input": "how to drop all column names in python",
        "output": "",
        "rule": [
            "d18796"
        ]
    },
    {
        "instruction": "",
        "id": "q18797",
        "input": "index of the last occurrence in python",
        "output": "",
        "rule": [
            "d18797"
        ]
    },
    {
        "instruction": "",
        "id": "q18798",
        "input": "python determine a url relative or absolute",
        "output": "",
        "rule": [
            "d18798"
        ]
    },
    {
        "instruction": "",
        "id": "q18799",
        "input": "extract first row from a table in python sql",
        "output": "",
        "rule": [
            "d18799"
        ]
    },
    {
        "instruction": "",
        "id": "q18800",
        "input": "python url join query string",
        "output": "",
        "rule": [
            "d18800"
        ]
    },
    {
        "instruction": "",
        "id": "q18801",
        "input": "round to nearest even number python",
        "output": "",
        "rule": [
            "d18801"
        ]
    },
    {
        "instruction": "",
        "id": "q18802",
        "input": "python code for changing string to uppercase",
        "output": "",
        "rule": [
            "d18802"
        ]
    },
    {
        "instruction": "",
        "id": "q18803",
        "input": "max string length for given sting list python",
        "output": "",
        "rule": [
            "d18803"
        ]
    },
    {
        "instruction": "",
        "id": "q18804",
        "input": "python flat list of list to list",
        "output": "",
        "rule": [
            "d18804"
        ]
    },
    {
        "instruction": "",
        "id": "q18805",
        "input": "count the occurence in a list python",
        "output": "",
        "rule": [
            "d18805"
        ]
    },
    {
        "instruction": "",
        "id": "q18806",
        "input": "python abort script but not exit the gui",
        "output": "",
        "rule": [
            "d18806"
        ]
    },
    {
        "instruction": "",
        "id": "q18807",
        "input": "python replace function with for loop",
        "output": "",
        "rule": [
            "d18807"
        ]
    },
    {
        "instruction": "",
        "id": "q18808",
        "input": "python determine if data frame has a null",
        "output": "",
        "rule": [
            "d18808"
        ]
    },
    {
        "instruction": "",
        "id": "q18809",
        "input": "hashlib for file python",
        "output": "",
        "rule": [
            "d18809"
        ]
    },
    {
        "instruction": "",
        "id": "q18810",
        "input": "python hash function an integer",
        "output": "",
        "rule": [
            "d18810"
        ]
    },
    {
        "instruction": "",
        "id": "q18811",
        "input": "python fill the nan values in the dataset using median values of column",
        "output": "",
        "rule": [
            "d18811"
        ]
    },
    {
        "instruction": "",
        "id": "q18812",
        "input": "if two strings are equal python",
        "output": "",
        "rule": [
            "d18812"
        ]
    },
    {
        "instruction": "",
        "id": "q18813",
        "input": "pythong if not an integer",
        "output": "",
        "rule": [
            "d18813"
        ]
    },
    {
        "instruction": "",
        "id": "q18814",
        "input": "change an array into a list python",
        "output": "",
        "rule": [
            "d18814"
        ]
    },
    {
        "instruction": "",
        "id": "q18815",
        "input": "python check equal sequence",
        "output": "",
        "rule": [
            "d18815"
        ]
    },
    {
        "instruction": "",
        "id": "q18816",
        "input": "function for checking dtype in python",
        "output": "",
        "rule": [
            "d18816"
        ]
    },
    {
        "instruction": "",
        "id": "q18817",
        "input": "if isprime(n) is a prime return true else return false python",
        "output": "",
        "rule": [
            "d18817"
        ]
    },
    {
        "instruction": "",
        "id": "q18818",
        "input": "python, truncating a string by length",
        "output": "",
        "rule": [
            "d18818"
        ]
    },
    {
        "instruction": "",
        "id": "q18819",
        "input": "python3 how to get the decode",
        "output": "",
        "rule": [
            "d18819"
        ]
    },
    {
        "instruction": "",
        "id": "q18820",
        "input": "capitalize each letter in python",
        "output": "",
        "rule": [
            "d18820"
        ]
    },
    {
        "instruction": "",
        "id": "q18821",
        "input": "python concatenate np array",
        "output": "",
        "rule": [
            "d18821"
        ]
    },
    {
        "instruction": "",
        "id": "q18822",
        "input": "python 3 replace for loop with map",
        "output": "",
        "rule": [
            "d18822"
        ]
    },
    {
        "instruction": "",
        "id": "q18823",
        "input": "python index in list predicate",
        "output": "",
        "rule": [
            "d18823"
        ]
    },
    {
        "instruction": "",
        "id": "q18824",
        "input": "length of a deque python",
        "output": "",
        "rule": [
            "d18824"
        ]
    },
    {
        "instruction": "",
        "id": "q18825",
        "input": "python usb core no backend",
        "output": "",
        "rule": [
            "d18825"
        ]
    },
    {
        "instruction": "",
        "id": "q18826",
        "input": "longest substring no repeating python",
        "output": "",
        "rule": [
            "d18826"
        ]
    },
    {
        "instruction": "",
        "id": "q18827",
        "input": "python3 for each in map",
        "output": "",
        "rule": [
            "d18827"
        ]
    },
    {
        "instruction": "",
        "id": "q18828",
        "input": "how to run spyder with multiple python versions",
        "output": "",
        "rule": [
            "d18828"
        ]
    },
    {
        "instruction": "",
        "id": "q18829",
        "input": "python conver to unsigned int",
        "output": "",
        "rule": [
            "d18829"
        ]
    },
    {
        "instruction": "",
        "id": "q18830",
        "input": "how to tell if link is relative python",
        "output": "",
        "rule": [
            "d18830"
        ]
    },
    {
        "instruction": "",
        "id": "q18831",
        "input": "how to evaluate each element of an array in a function python",
        "output": "",
        "rule": [
            "d18831"
        ]
    },
    {
        "instruction": "",
        "id": "q18832",
        "input": "how to remove blank spaces from lists python",
        "output": "",
        "rule": [
            "d18832"
        ]
    },
    {
        "instruction": "",
        "id": "q18833",
        "input": "python dict to sqlalchemy item",
        "output": "",
        "rule": [
            "d18833"
        ]
    },
    {
        "instruction": "",
        "id": "q18834",
        "input": "how to check if a string is an int python",
        "output": "",
        "rule": [
            "d18834"
        ]
    },
    {
        "instruction": "",
        "id": "q18835",
        "input": "python not equal to a set of values",
        "output": "",
        "rule": [
            "d18835"
        ]
    },
    {
        "instruction": "",
        "id": "q18836",
        "input": "prompt user in python eval(",
        "output": "",
        "rule": [
            "d18836"
        ]
    },
    {
        "instruction": "",
        "id": "q18837",
        "input": "python hide certain output",
        "output": "",
        "rule": [
            "d18837"
        ]
    },
    {
        "instruction": "",
        "id": "q18838",
        "input": "python input default int",
        "output": "",
        "rule": [
            "d18838"
        ]
    },
    {
        "instruction": "",
        "id": "q18839",
        "input": "python filter function return a series, but expected a scalar bool",
        "output": "",
        "rule": [
            "d18839"
        ]
    },
    {
        "instruction": "",
        "id": "q18840",
        "input": "python how to ask a true or false question",
        "output": "",
        "rule": [
            "d18840"
        ]
    },
    {
        "instruction": "",
        "id": "q18841",
        "input": "get last month from python",
        "output": "",
        "rule": [
            "d18841"
        ]
    },
    {
        "instruction": "",
        "id": "q18842",
        "input": "check if two strings are equal python",
        "output": "",
        "rule": [
            "d18842"
        ]
    },
    {
        "instruction": "",
        "id": "q18843",
        "input": "python turn true and false into logical",
        "output": "",
        "rule": [
            "d18843"
        ]
    },
    {
        "instruction": "",
        "id": "q18844",
        "input": "python get prefix from string",
        "output": "",
        "rule": [
            "d18844"
        ]
    },
    {
        "instruction": "",
        "id": "q18845",
        "input": "how to split sentence based on delimeter using python",
        "output": "",
        "rule": [
            "d18845"
        ]
    },
    {
        "instruction": "",
        "id": "q18846",
        "input": "python rest api posting json request",
        "output": "",
        "rule": [
            "d18846"
        ]
    },
    {
        "instruction": "",
        "id": "q18847",
        "input": "python get the number of cpu cores",
        "output": "",
        "rule": [
            "d18847"
        ]
    },
    {
        "instruction": "",
        "id": "q18848",
        "input": "python method object pass in",
        "output": "",
        "rule": [
            "d18848"
        ]
    },
    {
        "instruction": "",
        "id": "q18849",
        "input": "python length of element in matrix",
        "output": "",
        "rule": [
            "d18849"
        ]
    },
    {
        "instruction": "",
        "id": "q18850",
        "input": "pythondetermine file format from binary",
        "output": "",
        "rule": [
            "d18850"
        ]
    },
    {
        "instruction": "",
        "id": "q18851",
        "input": "python adding query string to url",
        "output": "",
        "rule": [
            "d18851"
        ]
    },
    {
        "instruction": "",
        "id": "q18852",
        "input": "python unsupported operand type for nonetype",
        "output": "",
        "rule": [
            "d18852"
        ]
    },
    {
        "instruction": "",
        "id": "q18853",
        "input": "get a date from string python",
        "output": "",
        "rule": [
            "d18853"
        ]
    },
    {
        "instruction": "",
        "id": "q18854",
        "input": "python 3 string to byte encoding",
        "output": "",
        "rule": [
            "d18854"
        ]
    },
    {
        "instruction": "",
        "id": "q18855",
        "input": "how do i filter a python dictionary by its values",
        "output": "",
        "rule": [
            "d18855"
        ]
    },
    {
        "instruction": "",
        "id": "q18856",
        "input": "python how to get day of week name",
        "output": "",
        "rule": [
            "d18856"
        ]
    },
    {
        "instruction": "",
        "id": "q18857",
        "input": "python force string to camel case",
        "output": "",
        "rule": [
            "d18857"
        ]
    },
    {
        "instruction": "",
        "id": "q18858",
        "input": "how to see if a text file is empty in python",
        "output": "",
        "rule": [
            "d18858"
        ]
    },
    {
        "instruction": "",
        "id": "q18859",
        "input": "python user input to exit",
        "output": "",
        "rule": [
            "d18859"
        ]
    },
    {
        "instruction": "",
        "id": "q18860",
        "input": "python how to generate only half of the permutations",
        "output": "",
        "rule": [
            "d18860"
        ]
    },
    {
        "instruction": "",
        "id": "q18861",
        "input": "how to get horizontal alignment on python",
        "output": "",
        "rule": [
            "d18861"
        ]
    },
    {
        "instruction": "",
        "id": "q18862",
        "input": "invalid dimensions for image data in python",
        "output": "",
        "rule": [
            "d18862"
        ]
    },
    {
        "instruction": "",
        "id": "q18863",
        "input": "get and post methods for python server",
        "output": "",
        "rule": [
            "d18863"
        ]
    },
    {
        "instruction": "",
        "id": "q18864",
        "input": "how to check if a file is empty using python",
        "output": "",
        "rule": [
            "d18864"
        ]
    },
    {
        "instruction": "",
        "id": "q18865",
        "input": "python linux detect keypress",
        "output": "",
        "rule": [
            "d18865"
        ]
    },
    {
        "instruction": "",
        "id": "q18866",
        "input": "auto pylint python 2",
        "output": "",
        "rule": [
            "d18866"
        ]
    },
    {
        "instruction": "",
        "id": "q18867",
        "input": "python hash for a file",
        "output": "",
        "rule": [
            "d18867"
        ]
    },
    {
        "instruction": "",
        "id": "q18868",
        "input": "draw tree recursivly in python",
        "output": "",
        "rule": [
            "d18868"
        ]
    },
    {
        "instruction": "",
        "id": "q18869",
        "input": "python hsv 2 rgb",
        "output": "",
        "rule": [
            "d18869"
        ]
    },
    {
        "instruction": "",
        "id": "q18870",
        "input": "how to read the contents of a text file in python",
        "output": "",
        "rule": [
            "d18870"
        ]
    },
    {
        "instruction": "",
        "id": "q18871",
        "input": "how to titlecase words in python",
        "output": "",
        "rule": [
            "d18871"
        ]
    },
    {
        "instruction": "",
        "id": "q18872",
        "input": "python3 how to correct print out bit data",
        "output": "",
        "rule": [
            "d18872"
        ]
    },
    {
        "instruction": "",
        "id": "q18873",
        "input": "python change column name from camel to snake",
        "output": "",
        "rule": [
            "d18873"
        ]
    },
    {
        "instruction": "",
        "id": "q18874",
        "input": "python get desktop size from linux",
        "output": "",
        "rule": [
            "d18874"
        ]
    },
    {
        "instruction": "",
        "id": "q18875",
        "input": "python length longest string in array",
        "output": "",
        "rule": [
            "d18875"
        ]
    },
    {
        "instruction": "",
        "id": "q18876",
        "input": "changing string to int with python",
        "output": "",
        "rule": [
            "d18876"
        ]
    },
    {
        "instruction": "",
        "id": "q18877",
        "input": "python count appearances in a list",
        "output": "",
        "rule": [
            "d18877"
        ]
    },
    {
        "instruction": "",
        "id": "q18878",
        "input": "tensorflow compatible with python",
        "output": "",
        "rule": [
            "d18878"
        ]
    },
    {
        "instruction": "",
        "id": "q18879",
        "input": "enum int comparison python",
        "output": "",
        "rule": [
            "d18879"
        ]
    },
    {
        "instruction": "",
        "id": "q18880",
        "input": "median without numpy python",
        "output": "",
        "rule": [
            "d18880"
        ]
    },
    {
        "instruction": "",
        "id": "q18881",
        "input": "python execute function after specific ammount of time",
        "output": "",
        "rule": [
            "d18881"
        ]
    },
    {
        "instruction": "",
        "id": "q18882",
        "input": "function to count duplicates in list in python",
        "output": "",
        "rule": [
            "d18882"
        ]
    },
    {
        "instruction": "",
        "id": "q18883",
        "input": "return index for a certain value python",
        "output": "",
        "rule": [
            "d18883"
        ]
    },
    {
        "instruction": "",
        "id": "q18884",
        "input": "question 3 what method do you call in an sqlite cursor object in python to run an sql command",
        "output": "",
        "rule": [
            "d18884"
        ]
    },
    {
        "instruction": "",
        "id": "q18885",
        "input": "check if file is blank in python",
        "output": "",
        "rule": [
            "d18885"
        ]
    },
    {
        "instruction": "",
        "id": "q18886",
        "input": "how to change spyder to python 3",
        "output": "",
        "rule": [
            "d18886"
        ]
    },
    {
        "instruction": "",
        "id": "q18887",
        "input": "python any letter in string",
        "output": "",
        "rule": [
            "d18887"
        ]
    },
    {
        "instruction": "",
        "id": "q18888",
        "input": "python boolean and or not",
        "output": "",
        "rule": [
            "d18888"
        ]
    },
    {
        "instruction": "",
        "id": "q18889",
        "input": "python operate on a single bit",
        "output": "",
        "rule": [
            "d18889"
        ]
    },
    {
        "instruction": "",
        "id": "q18890",
        "input": "check if callable python",
        "output": "",
        "rule": [
            "d18890"
        ]
    },
    {
        "instruction": "",
        "id": "q18891",
        "input": "python flask shared cache",
        "output": "",
        "rule": [
            "d18891"
        ]
    },
    {
        "instruction": "",
        "id": "q18892",
        "input": "python if os file doesn't exist",
        "output": "",
        "rule": [
            "d18892"
        ]
    },
    {
        "instruction": "",
        "id": "q18893",
        "input": "python merge greater than",
        "output": "",
        "rule": [
            "d18893"
        ]
    },
    {
        "instruction": "",
        "id": "q18894",
        "input": "how to check int null value in python",
        "output": "",
        "rule": [
            "d18894"
        ]
    },
    {
        "instruction": "",
        "id": "q18895",
        "input": "python check to see if a key exists",
        "output": "",
        "rule": [
            "d18895"
        ]
    },
    {
        "instruction": "",
        "id": "q18896",
        "input": "python np array yaml",
        "output": "",
        "rule": [
            "d18896"
        ]
    },
    {
        "instruction": "",
        "id": "q18897",
        "input": "python config parser get list of sections",
        "output": "",
        "rule": [
            "d18897"
        ]
    },
    {
        "instruction": "",
        "id": "q18898",
        "input": "how to chk that an item is not in a list in python",
        "output": "",
        "rule": [
            "d18898"
        ]
    },
    {
        "instruction": "",
        "id": "q18899",
        "input": "itertools get all partitions into 2 sets python",
        "output": "",
        "rule": [
            "d18899"
        ]
    },
    {
        "instruction": "",
        "id": "q18900",
        "input": "python 3 speed up for loop with map",
        "output": "",
        "rule": [
            "d18900"
        ]
    },
    {
        "instruction": "",
        "id": "q18901",
        "input": "how to throw an assertion error in python",
        "output": "",
        "rule": [
            "d18901"
        ]
    },
    {
        "instruction": "",
        "id": "q18902",
        "input": "uuid to str python 3",
        "output": "",
        "rule": [
            "d18902"
        ]
    },
    {
        "instruction": "",
        "id": "q18903",
        "input": "checking if 2 strings are equal in python",
        "output": "",
        "rule": [
            "d18903"
        ]
    },
    {
        "instruction": "",
        "id": "q18904",
        "input": "how to get the size of desktop using python",
        "output": "",
        "rule": [
            "d18904"
        ]
    },
    {
        "instruction": "",
        "id": "q18905",
        "input": "use requests with python asyncio",
        "output": "",
        "rule": [
            "d18905"
        ]
    },
    {
        "instruction": "",
        "id": "q18906",
        "input": "set maximum string length python",
        "output": "",
        "rule": [
            "d18906"
        ]
    },
    {
        "instruction": "",
        "id": "q18907",
        "input": "split python wordnet synosym",
        "output": "",
        "rule": [
            "d18907"
        ]
    },
    {
        "instruction": "",
        "id": "q18908",
        "input": "compute shortest path in graph python",
        "output": "",
        "rule": [
            "d18908"
        ]
    },
    {
        "instruction": "",
        "id": "q18909",
        "input": "how to make a string of numbers n python",
        "output": "",
        "rule": [
            "d18909"
        ]
    },
    {
        "instruction": "",
        "id": "q18910",
        "input": "python get duplicate index",
        "output": "",
        "rule": [
            "d18910"
        ]
    },
    {
        "instruction": "",
        "id": "q18911",
        "input": "python restful post put",
        "output": "",
        "rule": [
            "d18911"
        ]
    },
    {
        "instruction": "",
        "id": "q18912",
        "input": "how to you inverse a dictionary in python",
        "output": "",
        "rule": [
            "d18912"
        ]
    },
    {
        "instruction": "",
        "id": "q18913",
        "input": "how to drop ( ) in python column names",
        "output": "",
        "rule": [
            "d18913"
        ]
    },
    {
        "instruction": "",
        "id": "q18914",
        "input": "how to change dtype in python to int",
        "output": "",
        "rule": [
            "d18914"
        ]
    },
    {
        "instruction": "",
        "id": "q18915",
        "input": "python open iterate remove newline",
        "output": "",
        "rule": [
            "d18915"
        ]
    },
    {
        "instruction": "",
        "id": "q18916",
        "input": "python index for duplicate element",
        "output": "",
        "rule": [
            "d18916"
        ]
    },
    {
        "instruction": "",
        "id": "q18917",
        "input": "python progarm to insert an element in sorted array",
        "output": "",
        "rule": [
            "d18917"
        ]
    },
    {
        "instruction": "",
        "id": "q18918",
        "input": "python str to named tuple",
        "output": "",
        "rule": [
            "d18918"
        ]
    },
    {
        "instruction": "",
        "id": "q18919",
        "input": "how to invert dictionary in python",
        "output": "",
        "rule": [
            "d18919"
        ]
    },
    {
        "instruction": "",
        "id": "q18920",
        "input": "how to check verson of python being used",
        "output": "",
        "rule": [
            "d18920"
        ]
    },
    {
        "instruction": "",
        "id": "q18921",
        "input": "python normalise list to sum to 1",
        "output": "",
        "rule": [
            "d18921"
        ]
    },
    {
        "instruction": "",
        "id": "q18922",
        "input": "python check if string is file",
        "output": "",
        "rule": [
            "d18922"
        ]
    },
    {
        "instruction": "",
        "id": "q18923",
        "input": "read string from file into a set python",
        "output": "",
        "rule": [
            "d18923"
        ]
    },
    {
        "instruction": "",
        "id": "q18924",
        "input": "python filter lambda dict",
        "output": "",
        "rule": [
            "d18924"
        ]
    },
    {
        "instruction": "",
        "id": "q18925",
        "input": "python imaginary part of complex number array",
        "output": "",
        "rule": [
            "d18925"
        ]
    },
    {
        "instruction": "",
        "id": "q18926",
        "input": "turn a list of str into int python",
        "output": "",
        "rule": [
            "d18926"
        ]
    },
    {
        "instruction": "",
        "id": "q18927",
        "input": "python check what datatypes contained in a column",
        "output": "",
        "rule": [
            "d18927"
        ]
    },
    {
        "instruction": "",
        "id": "q18928",
        "input": "add dictionary to query string to url python",
        "output": "",
        "rule": [
            "d18928"
        ]
    },
    {
        "instruction": "",
        "id": "q18929",
        "input": "python code to check duplicates of index in a list",
        "output": "",
        "rule": [
            "d18929"
        ]
    },
    {
        "instruction": "",
        "id": "q18930",
        "input": "how to get percentile of a value in a list python",
        "output": "",
        "rule": [
            "d18930"
        ]
    },
    {
        "instruction": "",
        "id": "q18931",
        "input": "python top 10 list",
        "output": "",
        "rule": [
            "d18931"
        ]
    },
    {
        "instruction": "",
        "id": "q18932",
        "input": "get first occurence of char in string python",
        "output": "",
        "rule": [
            "d18932"
        ]
    },
    {
        "instruction": "",
        "id": "q18933",
        "input": "same index for duplicates in python",
        "output": "",
        "rule": [
            "d18933"
        ]
    },
    {
        "instruction": "",
        "id": "q18934",
        "input": "python check if is str",
        "output": "",
        "rule": [
            "d18934"
        ]
    },
    {
        "instruction": "",
        "id": "q18935",
        "input": "python post request api",
        "output": "",
        "rule": [
            "d18935"
        ]
    },
    {
        "instruction": "",
        "id": "q18936",
        "input": "python graphviz write dot file",
        "output": "",
        "rule": [
            "d18936"
        ]
    },
    {
        "instruction": "",
        "id": "q18937",
        "input": "how to determine what a python function is called by",
        "output": "",
        "rule": [
            "d18937"
        ]
    },
    {
        "instruction": "",
        "id": "q18938",
        "input": "turn a list of lists into a single list python",
        "output": "",
        "rule": [
            "d18938"
        ]
    },
    {
        "instruction": "",
        "id": "q18939",
        "input": "get last index of a character in python",
        "output": "",
        "rule": [
            "d18939"
        ]
    },
    {
        "instruction": "",
        "id": "q18940",
        "input": "count of bins in python histogram",
        "output": "",
        "rule": [
            "d18940"
        ]
    },
    {
        "instruction": "",
        "id": "q18941",
        "input": "iterate a specific number of times python",
        "output": "",
        "rule": [
            "d18941"
        ]
    },
    {
        "instruction": "",
        "id": "q18942",
        "input": "how to filter matrix values to zero in python",
        "output": "",
        "rule": [
            "d18942"
        ]
    },
    {
        "instruction": "",
        "id": "q18943",
        "input": "python datetime to iso string",
        "output": "",
        "rule": [
            "d18943"
        ]
    },
    {
        "instruction": "",
        "id": "q18944",
        "input": "asyncio python another loop unit tests",
        "output": "",
        "rule": [
            "d18944"
        ]
    },
    {
        "instruction": "",
        "id": "q18945",
        "input": "python mid points for all xy pairs",
        "output": "",
        "rule": [
            "d18945"
        ]
    },
    {
        "instruction": "",
        "id": "q18946",
        "input": "python returns the indices of the top values",
        "output": "",
        "rule": [
            "d18946"
        ]
    },
    {
        "instruction": "",
        "id": "q18947",
        "input": "python mem cache multi process",
        "output": "",
        "rule": [
            "d18947"
        ]
    },
    {
        "instruction": "",
        "id": "q18948",
        "input": "python get 3 closest values",
        "output": "",
        "rule": [
            "d18948"
        ]
    },
    {
        "instruction": "",
        "id": "q18949",
        "input": "python check if a process is running or not",
        "output": "",
        "rule": [
            "d18949"
        ]
    },
    {
        "instruction": "",
        "id": "q18950",
        "input": "concatenate nyumpy arrays python",
        "output": "",
        "rule": [
            "d18950"
        ]
    },
    {
        "instruction": "",
        "id": "q18951",
        "input": "in python how to create code to exit",
        "output": "",
        "rule": [
            "d18951"
        ]
    },
    {
        "instruction": "",
        "id": "q18952",
        "input": "how to count duplicates in python list",
        "output": "",
        "rule": [
            "d18952"
        ]
    },
    {
        "instruction": "",
        "id": "q18953",
        "input": "8 bit uint unpack python",
        "output": "",
        "rule": [
            "d18953"
        ]
    },
    {
        "instruction": "",
        "id": "q18954",
        "input": "python get hostname from url string",
        "output": "",
        "rule": [
            "d18954"
        ]
    },
    {
        "instruction": "",
        "id": "q18955",
        "input": "python capitalize title case",
        "output": "",
        "rule": [
            "d18955"
        ]
    },
    {
        "instruction": "",
        "id": "q18956",
        "input": "read csv into numpy array python",
        "output": "",
        "rule": [
            "d18956"
        ]
    },
    {
        "instruction": "",
        "id": "q18957",
        "input": "number of bins in python histogram",
        "output": "",
        "rule": [
            "d18957"
        ]
    },
    {
        "instruction": "",
        "id": "q18958",
        "input": "how to check for empty file python",
        "output": "",
        "rule": [
            "d18958"
        ]
    },
    {
        "instruction": "",
        "id": "q18959",
        "input": "finding the max depth of list python",
        "output": "",
        "rule": [
            "d18959"
        ]
    },
    {
        "instruction": "",
        "id": "q18960",
        "input": "python test if string is an int",
        "output": "",
        "rule": [
            "d18960"
        ]
    },
    {
        "instruction": "",
        "id": "q18961",
        "input": "check if a set is empty in python",
        "output": "",
        "rule": [
            "d18961"
        ]
    },
    {
        "instruction": "",
        "id": "q18962",
        "input": "python csv to np array",
        "output": "",
        "rule": [
            "d18962"
        ]
    },
    {
        "instruction": "",
        "id": "q18963",
        "input": "stop running function and passing to other variable python",
        "output": "",
        "rule": [
            "d18963"
        ]
    },
    {
        "instruction": "",
        "id": "q18964",
        "input": "round to the nearest in python",
        "output": "",
        "rule": [
            "d18964"
        ]
    },
    {
        "instruction": "",
        "id": "q18965",
        "input": "python hash return int number",
        "output": "",
        "rule": [
            "d18965"
        ]
    },
    {
        "instruction": "",
        "id": "q18966",
        "input": "how to tell if a string holds a whitespace in python",
        "output": "",
        "rule": [
            "d18966"
        ]
    },
    {
        "instruction": "",
        "id": "q18967",
        "input": "how to round to the nearest ten in python",
        "output": "",
        "rule": [
            "d18967"
        ]
    },
    {
        "instruction": "",
        "id": "q18968",
        "input": "get dtypes of columns python",
        "output": "",
        "rule": [
            "d18968"
        ]
    },
    {
        "instruction": "",
        "id": "q18969",
        "input": "python 3 executemany many columns",
        "output": "",
        "rule": [
            "d18969"
        ]
    },
    {
        "instruction": "",
        "id": "q18970",
        "input": "python pattern pluralize word",
        "output": "",
        "rule": [
            "d18970"
        ]
    },
    {
        "instruction": "",
        "id": "q18971",
        "input": "python call built in function using its string name",
        "output": "",
        "rule": [
            "d18971"
        ]
    },
    {
        "instruction": "",
        "id": "q18972",
        "input": "python future asyncio multiple tbreads",
        "output": "",
        "rule": [
            "d18972"
        ]
    },
    {
        "instruction": "",
        "id": "q18973",
        "input": "how to cast a float as an int in python",
        "output": "",
        "rule": [
            "d18973"
        ]
    },
    {
        "instruction": "",
        "id": "q18974",
        "input": "python determine if string is all alpha",
        "output": "",
        "rule": [
            "d18974"
        ]
    },
    {
        "instruction": "",
        "id": "q18975",
        "input": "python list git branches",
        "output": "",
        "rule": [
            "d18975"
        ]
    },
    {
        "instruction": "",
        "id": "q18976",
        "input": "sql like % in python",
        "output": "",
        "rule": [
            "d18976"
        ]
    },
    {
        "instruction": "",
        "id": "q18977",
        "input": "calculate the area under a curve python",
        "output": "",
        "rule": [
            "d18977"
        ]
    },
    {
        "instruction": "",
        "id": "q18978",
        "input": "python keras fit method checkpoints",
        "output": "",
        "rule": [
            "d18978"
        ]
    },
    {
        "instruction": "",
        "id": "q18979",
        "input": "python how to detect english words",
        "output": "",
        "rule": [
            "d18979"
        ]
    },
    {
        "instruction": "",
        "id": "q18980",
        "input": "how to receive the path of a file as a user input on python",
        "output": "",
        "rule": [
            "d18980"
        ]
    },
    {
        "instruction": "",
        "id": "q18981",
        "input": "python async run in",
        "output": "",
        "rule": [
            "d18981"
        ]
    },
    {
        "instruction": "",
        "id": "q18982",
        "input": "check if a file with certain extension exist in python",
        "output": "",
        "rule": [
            "d18982"
        ]
    },
    {
        "instruction": "",
        "id": "q18983",
        "input": "python determine if path is relative or abso",
        "output": "",
        "rule": [
            "d18983"
        ]
    },
    {
        "instruction": "",
        "id": "q18984",
        "input": "python most frequent element in list",
        "output": "",
        "rule": [
            "d18984"
        ]
    },
    {
        "instruction": "",
        "id": "q18985",
        "input": "create sphere through data points in python",
        "output": "",
        "rule": [
            "d18985"
        ]
    },
    {
        "instruction": "",
        "id": "q18986",
        "input": "python hash a int value",
        "output": "",
        "rule": [
            "d18986"
        ]
    },
    {
        "instruction": "",
        "id": "q18987",
        "input": "python using greater than with strings",
        "output": "",
        "rule": [
            "d18987"
        ]
    },
    {
        "instruction": "",
        "id": "q18988",
        "input": "flatten a list of lists in python irregular simple",
        "output": "",
        "rule": [
            "d18988"
        ]
    },
    {
        "instruction": "",
        "id": "q18989",
        "input": "python3 apply function to each list element",
        "output": "",
        "rule": [
            "d18989"
        ]
    },
    {
        "instruction": "",
        "id": "q18990",
        "input": "python readlines skip blank lines",
        "output": "",
        "rule": [
            "d18990"
        ]
    },
    {
        "instruction": "",
        "id": "q18991",
        "input": "show tensor shape python",
        "output": "",
        "rule": [
            "d18991"
        ]
    },
    {
        "instruction": "",
        "id": "q18992",
        "input": "make string all uppercase python",
        "output": "",
        "rule": [
            "d18992"
        ]
    },
    {
        "instruction": "",
        "id": "q18993",
        "input": "can you cast a python list to a bytearray",
        "output": "",
        "rule": [
            "d18993"
        ]
    },
    {
        "instruction": "",
        "id": "q18994",
        "input": "truncate float two decimals python",
        "output": "",
        "rule": [
            "d18994"
        ]
    },
    {
        "instruction": "",
        "id": "q18995",
        "input": "delete an element from a dictionary python",
        "output": "",
        "rule": [
            "d18995"
        ]
    },
    {
        "instruction": "",
        "id": "q18996",
        "input": "how to remove first line from legend matplotlib python",
        "output": "",
        "rule": [
            "d18996"
        ]
    },
    {
        "instruction": "",
        "id": "q18997",
        "input": "zstring pad zero python",
        "output": "",
        "rule": [
            "d18997"
        ]
    },
    {
        "instruction": "",
        "id": "q18998",
        "input": "python argparse script docstring",
        "output": "",
        "rule": [
            "d18998"
        ]
    },
    {
        "instruction": "",
        "id": "q18999",
        "input": "python parse http status line, header line",
        "output": "",
        "rule": [
            "d18999"
        ]
    },
    {
        "instruction": "",
        "id": "q19000",
        "input": "python 3 lambda map",
        "output": "",
        "rule": [
            "d19000"
        ]
    },
    {
        "instruction": "",
        "id": "q19001",
        "input": "how does underscore hide in python",
        "output": "",
        "rule": [
            "d19001"
        ]
    },
    {
        "instruction": "",
        "id": "q19002",
        "input": "python top n elements of sorted dictionary",
        "output": "",
        "rule": [
            "d19002"
        ]
    },
    {
        "instruction": "",
        "id": "q19003",
        "input": "python2 python3 bytes strings",
        "output": "",
        "rule": [
            "d19003"
        ]
    },
    {
        "instruction": "",
        "id": "q19004",
        "input": "subtract months from date python\\",
        "output": "",
        "rule": [
            "d19004"
        ]
    },
    {
        "instruction": "",
        "id": "q19005",
        "input": "graph viz python dot executable",
        "output": "",
        "rule": [
            "d19005"
        ]
    },
    {
        "instruction": "",
        "id": "q19006",
        "input": "how to multiply every value in a list by a constant python",
        "output": "",
        "rule": [
            "d19006"
        ]
    },
    {
        "instruction": "",
        "id": "q19007",
        "input": "python readline skip blank line",
        "output": "",
        "rule": [
            "d19007"
        ]
    },
    {
        "instruction": "",
        "id": "q19008",
        "input": "how to get mimetype of a file in python",
        "output": "",
        "rule": [
            "d19008"
        ]
    },
    {
        "instruction": "",
        "id": "q19009",
        "input": "python is not float",
        "output": "",
        "rule": [
            "d19009"
        ]
    },
    {
        "instruction": "",
        "id": "q19010",
        "input": "python return top n elements",
        "output": "",
        "rule": [
            "d19010"
        ]
    },
    {
        "instruction": "",
        "id": "q19011",
        "input": "how to check if a key as been created in python",
        "output": "",
        "rule": [
            "d19011"
        ]
    },
    {
        "instruction": "",
        "id": "q19012",
        "input": "how to rotate elements of a list left python",
        "output": "",
        "rule": [
            "d19012"
        ]
    },
    {
        "instruction": "",
        "id": "q19013",
        "input": "python remove key from dictionary if exists",
        "output": "",
        "rule": [
            "d19013"
        ]
    },
    {
        "instruction": "",
        "id": "q19014",
        "input": "python how to check if a resultset from a query is empty",
        "output": "",
        "rule": [
            "d19014"
        ]
    },
    {
        "instruction": "",
        "id": "q19015",
        "input": "get column type data frame python",
        "output": "",
        "rule": [
            "d19015"
        ]
    },
    {
        "instruction": "",
        "id": "q19016",
        "input": "how will you check in a string that all characters are alphanumeric python",
        "output": "",
        "rule": [
            "d19016"
        ]
    },
    {
        "instruction": "",
        "id": "q19017",
        "input": "python see if file contains a line",
        "output": "",
        "rule": [
            "d19017"
        ]
    },
    {
        "instruction": "",
        "id": "q19018",
        "input": "how to rotate a list n times in python",
        "output": "",
        "rule": [
            "d19018"
        ]
    },
    {
        "instruction": "",
        "id": "q19019",
        "input": "replace a pattern with single slash in python",
        "output": "",
        "rule": [
            "d19019"
        ]
    },
    {
        "instruction": "",
        "id": "q19020",
        "input": "uniques values of alist in python",
        "output": "",
        "rule": [
            "d19020"
        ]
    },
    {
        "instruction": "",
        "id": "q19021",
        "input": "reading json from file python",
        "output": "",
        "rule": [
            "d19021"
        ]
    },
    {
        "instruction": "",
        "id": "q19022",
        "input": "how to remove columns in a data frame in python",
        "output": "",
        "rule": [
            "d19022"
        ]
    },
    {
        "instruction": "",
        "id": "q19023",
        "input": "python method for reading keypress? in linux",
        "output": "",
        "rule": [
            "d19023"
        ]
    },
    {
        "instruction": "",
        "id": "q19024",
        "input": "python round up to the nearest",
        "output": "",
        "rule": [
            "d19024"
        ]
    },
    {
        "instruction": "",
        "id": "q19025",
        "input": "python string to json string",
        "output": "",
        "rule": [
            "d19025"
        ]
    },
    {
        "instruction": "",
        "id": "q19026",
        "input": "panda python string to date time",
        "output": "",
        "rule": [
            "d19026"
        ]
    },
    {
        "instruction": "",
        "id": "q19027",
        "input": "scala fold equivalent in python",
        "output": "",
        "rule": [
            "d19027"
        ]
    },
    {
        "instruction": "",
        "id": "q19028",
        "input": "python function nested list to list",
        "output": "",
        "rule": [
            "d19028"
        ]
    },
    {
        "instruction": "",
        "id": "q19029",
        "input": "how to delete an entry in a dictionary python",
        "output": "",
        "rule": [
            "d19029"
        ]
    },
    {
        "instruction": "",
        "id": "q19030",
        "input": "how to see if a path is valid in python",
        "output": "",
        "rule": [
            "d19030"
        ]
    },
    {
        "instruction": "",
        "id": "q19031",
        "input": "intersecting of two nonlinear lines python",
        "output": "",
        "rule": [
            "d19031"
        ]
    },
    {
        "instruction": "",
        "id": "q19032",
        "input": "python determine if any values in an array meet a condition",
        "output": "",
        "rule": [
            "d19032"
        ]
    },
    {
        "instruction": "",
        "id": "q19033",
        "input": "how to turn a date number in python into a date",
        "output": "",
        "rule": [
            "d19033"
        ]
    },
    {
        "instruction": "",
        "id": "q19034",
        "input": "python opencv getgaussian kernel",
        "output": "",
        "rule": [
            "d19034"
        ]
    },
    {
        "instruction": "",
        "id": "q19035",
        "input": "check the datatype fo a column python",
        "output": "",
        "rule": [
            "d19035"
        ]
    },
    {
        "instruction": "",
        "id": "q19036",
        "input": "how to read a stream in python",
        "output": "",
        "rule": [
            "d19036"
        ]
    },
    {
        "instruction": "",
        "id": "q19037",
        "input": "python check if two nodes are connected in a graph",
        "output": "",
        "rule": [
            "d19037"
        ]
    },
    {
        "instruction": "",
        "id": "q19038",
        "input": "how to check the presence of nan values in python",
        "output": "",
        "rule": [
            "d19038"
        ]
    },
    {
        "instruction": "",
        "id": "q19039",
        "input": "how to compute dot product on python using a loop",
        "output": "",
        "rule": [
            "d19039"
        ]
    },
    {
        "instruction": "",
        "id": "q19040",
        "input": "get synset in use contextually in a sentence python",
        "output": "",
        "rule": [
            "d19040"
        ]
    },
    {
        "instruction": "",
        "id": "q19041",
        "input": "python pylint similar lines in",
        "output": "",
        "rule": [
            "d19041"
        ]
    },
    {
        "instruction": "",
        "id": "q19042",
        "input": "how to generate the numbers of pi using python",
        "output": "",
        "rule": [
            "d19042"
        ]
    },
    {
        "instruction": "",
        "id": "q19043",
        "input": "python datetime third friday of a month",
        "output": "",
        "rule": [
            "d19043"
        ]
    },
    {
        "instruction": "",
        "id": "q19044",
        "input": "python github store the latest tag",
        "output": "",
        "rule": [
            "d19044"
        ]
    },
    {
        "instruction": "",
        "id": "q19045",
        "input": "longest path in an undirected tree python",
        "output": "",
        "rule": [
            "d19045"
        ]
    },
    {
        "instruction": "",
        "id": "q19046",
        "input": "invert dictionary with list python",
        "output": "",
        "rule": [
            "d19046"
        ]
    },
    {
        "instruction": "",
        "id": "q19047",
        "input": "python limiting trailing zeros",
        "output": "",
        "rule": [
            "d19047"
        ]
    },
    {
        "instruction": "",
        "id": "q19048",
        "input": "python if hash key exists",
        "output": "",
        "rule": [
            "d19048"
        ]
    },
    {
        "instruction": "",
        "id": "q19049",
        "input": "python delete from a dictionary if exists",
        "output": "",
        "rule": [
            "d19049"
        ]
    },
    {
        "instruction": "",
        "id": "q19050",
        "input": "python getch curses check if key is press",
        "output": "",
        "rule": [
            "d19050"
        ]
    },
    {
        "instruction": "",
        "id": "q19051",
        "input": "python attribute dictionary compare eq",
        "output": "",
        "rule": [
            "d19051"
        ]
    },
    {
        "instruction": "",
        "id": "q19052",
        "input": "how to read from stream python",
        "output": "",
        "rule": [
            "d19052"
        ]
    },
    {
        "instruction": "",
        "id": "q19053",
        "input": "count the number of occurences in series of lists python",
        "output": "",
        "rule": [
            "d19053"
        ]
    },
    {
        "instruction": "",
        "id": "q19054",
        "input": "filter on dictionary values python",
        "output": "",
        "rule": [
            "d19054"
        ]
    },
    {
        "instruction": "",
        "id": "q19055",
        "input": "read non blank lines python",
        "output": "",
        "rule": [
            "d19055"
        ]
    },
    {
        "instruction": "",
        "id": "q19056",
        "input": "check if there are only files or directories python",
        "output": "",
        "rule": [
            "d19056"
        ]
    },
    {
        "instruction": "",
        "id": "q19057",
        "input": "python get column with max element",
        "output": "",
        "rule": [
            "d19057"
        ]
    },
    {
        "instruction": "",
        "id": "q19058",
        "input": "get first 100 array elements python",
        "output": "",
        "rule": [
            "d19058"
        ]
    },
    {
        "instruction": "",
        "id": "q19059",
        "input": "python django date isoformat",
        "output": "",
        "rule": [
            "d19059"
        ]
    },
    {
        "instruction": "",
        "id": "q19060",
        "input": "python round up to specific",
        "output": "",
        "rule": [
            "d19060"
        ]
    },
    {
        "instruction": "",
        "id": "q19061",
        "input": "how to tell if a float object is null python",
        "output": "",
        "rule": [
            "d19061"
        ]
    },
    {
        "instruction": "",
        "id": "q19062",
        "input": "how to identify if a string is an integer in python",
        "output": "",
        "rule": [
            "d19062"
        ]
    },
    {
        "instruction": "",
        "id": "q19063",
        "input": "remove none items in dict python",
        "output": "",
        "rule": [
            "d19063"
        ]
    },
    {
        "instruction": "",
        "id": "q19064",
        "input": "restrict float number to fixed decimal in python for series",
        "output": "",
        "rule": [
            "d19064"
        ]
    },
    {
        "instruction": "",
        "id": "q19065",
        "input": "python how to check if shape is empty",
        "output": "",
        "rule": [
            "d19065"
        ]
    },
    {
        "instruction": "",
        "id": "q19066",
        "input": "python how to verify file location",
        "output": "",
        "rule": [
            "d19066"
        ]
    },
    {
        "instruction": "",
        "id": "q19067",
        "input": "python get window dimensions",
        "output": "",
        "rule": [
            "d19067"
        ]
    },
    {
        "instruction": "",
        "id": "q19068",
        "input": "how to check whether a lines exists in a file in python",
        "output": "",
        "rule": [
            "d19068"
        ]
    },
    {
        "instruction": "",
        "id": "q19069",
        "input": "sort a list of files depending on date modified python",
        "output": "",
        "rule": [
            "d19069"
        ]
    },
    {
        "instruction": "",
        "id": "q19070",
        "input": "python + asign sql output to a varaible",
        "output": "",
        "rule": [
            "d19070"
        ]
    },
    {
        "instruction": "",
        "id": "q19071",
        "input": "dot product algorithm in python 3 without numpy",
        "output": "",
        "rule": [
            "d19071"
        ]
    },
    {
        "instruction": "",
        "id": "q19072",
        "input": "python 3 list of unique strings",
        "output": "",
        "rule": [
            "d19072"
        ]
    },
    {
        "instruction": "",
        "id": "q19073",
        "input": "json to pure string python",
        "output": "",
        "rule": [
            "d19073"
        ]
    },
    {
        "instruction": "",
        "id": "q19074",
        "input": "python string replace a certain character",
        "output": "",
        "rule": [
            "d19074"
        ]
    },
    {
        "instruction": "",
        "id": "q19075",
        "input": "how to get the items in dict with highest values python",
        "output": "",
        "rule": [
            "d19075"
        ]
    },
    {
        "instruction": "",
        "id": "q19076",
        "input": "python 16 bit per channel color hsv",
        "output": "",
        "rule": [
            "d19076"
        ]
    },
    {
        "instruction": "",
        "id": "q19077",
        "input": "read file from aws s3 bucket in python",
        "output": "",
        "rule": [
            "d19077"
        ]
    },
    {
        "instruction": "",
        "id": "q19078",
        "input": "python str extract case insensitive",
        "output": "",
        "rule": [
            "d19078"
        ]
    },
    {
        "instruction": "",
        "id": "q19079",
        "input": "read json object as dict from file in python 3",
        "output": "",
        "rule": [
            "d19079"
        ]
    },
    {
        "instruction": "",
        "id": "q19080",
        "input": "python pad array to make same size",
        "output": "",
        "rule": [
            "d19080"
        ]
    },
    {
        "instruction": "",
        "id": "q19081",
        "input": "python validating an int",
        "output": "",
        "rule": [
            "d19081"
        ]
    },
    {
        "instruction": "",
        "id": "q19082",
        "input": "how to code python to translate a language",
        "output": "",
        "rule": [
            "d19082"
        ]
    },
    {
        "instruction": "",
        "id": "q19083",
        "input": "what different between python for windows and linux",
        "output": "",
        "rule": [
            "d19083"
        ]
    },
    {
        "instruction": "",
        "id": "q19084",
        "input": "change a string to a date python",
        "output": "",
        "rule": [
            "d19084"
        ]
    },
    {
        "instruction": "",
        "id": "q19085",
        "input": "flatten the dictionary in python",
        "output": "",
        "rule": [
            "d19085"
        ]
    },
    {
        "instruction": "",
        "id": "q19086",
        "input": "time zones in django python",
        "output": "",
        "rule": [
            "d19086"
        ]
    },
    {
        "instruction": "",
        "id": "q19087",
        "input": "identify if float is null in python",
        "output": "",
        "rule": [
            "d19087"
        ]
    },
    {
        "instruction": "",
        "id": "q19088",
        "input": "python ensure string length fill wih 0s to right",
        "output": "",
        "rule": [
            "d19088"
        ]
    },
    {
        "instruction": "",
        "id": "q19089",
        "input": "python3 parse iso date",
        "output": "",
        "rule": [
            "d19089"
        ]
    },
    {
        "instruction": "",
        "id": "q19090",
        "input": "how to create a set with words from a filepython",
        "output": "",
        "rule": [
            "d19090"
        ]
    },
    {
        "instruction": "",
        "id": "q19091",
        "input": "python list comprehension list into single",
        "output": "",
        "rule": [
            "d19091"
        ]
    },
    {
        "instruction": "",
        "id": "q19092",
        "input": "can key in dictionary be a float in python",
        "output": "",
        "rule": [
            "d19092"
        ]
    },
    {
        "instruction": "",
        "id": "q19093",
        "input": "construct file name python format string",
        "output": "",
        "rule": [
            "d19093"
        ]
    },
    {
        "instruction": "",
        "id": "q19094",
        "input": "get the most frequent value in a list python",
        "output": "",
        "rule": [
            "d19094"
        ]
    },
    {
        "instruction": "",
        "id": "q19095",
        "input": "get all lowercase chars python",
        "output": "",
        "rule": [
            "d19095"
        ]
    },
    {
        "instruction": "",
        "id": "q19096",
        "input": "remove string from column names python",
        "output": "",
        "rule": [
            "d19096"
        ]
    },
    {
        "instruction": "",
        "id": "q19097",
        "input": "how to split a sentence by spaces to a list python",
        "output": "",
        "rule": [
            "d19097"
        ]
    },
    {
        "instruction": "",
        "id": "q19098",
        "input": "python sqlalchemy mssql decimal type",
        "output": "",
        "rule": [
            "d19098"
        ]
    },
    {
        "instruction": "",
        "id": "q19099",
        "input": "using python to send commands over serial",
        "output": "",
        "rule": [
            "d19099"
        ]
    },
    {
        "instruction": "",
        "id": "q19100",
        "input": "python extract host from url",
        "output": "",
        "rule": [
            "d19100"
        ]
    },
    {
        "instruction": "",
        "id": "q19101",
        "input": "change list of int to string python",
        "output": "",
        "rule": [
            "d19101"
        ]
    },
    {
        "instruction": "",
        "id": "q19102",
        "input": "show data types of columns in python",
        "output": "",
        "rule": [
            "d19102"
        ]
    },
    {
        "instruction": "",
        "id": "q19103",
        "input": "python iterate text file remove newlines",
        "output": "",
        "rule": [
            "d19103"
        ]
    },
    {
        "instruction": "",
        "id": "q19104",
        "input": "python enum value is from enum",
        "output": "",
        "rule": [
            "d19104"
        ]
    },
    {
        "instruction": "",
        "id": "q19105",
        "input": "python how to say if not equal to an integer",
        "output": "",
        "rule": [
            "d19105"
        ]
    },
    {
        "instruction": "",
        "id": "q19106",
        "input": "python get column types",
        "output": "",
        "rule": [
            "d19106"
        ]
    },
    {
        "instruction": "",
        "id": "q19107",
        "input": "elasticsearch python bulk slow",
        "output": "",
        "rule": [
            "d19107"
        ]
    },
    {
        "instruction": "",
        "id": "q19108",
        "input": "parsing a date string python",
        "output": "",
        "rule": [
            "d19108"
        ]
    },
    {
        "instruction": "",
        "id": "q19109",
        "input": "how to get the character codes for the chars in the string python",
        "output": "",
        "rule": [
            "d19109"
        ]
    },
    {
        "instruction": "",
        "id": "q19110",
        "input": "how to turn a string into a tuple pythons",
        "output": "",
        "rule": [
            "d19110"
        ]
    },
    {
        "instruction": "",
        "id": "q19111",
        "input": "color to python tuple",
        "output": "",
        "rule": [
            "d19111"
        ]
    },
    {
        "instruction": "",
        "id": "q19112",
        "input": "python how to check if key does not exists",
        "output": "",
        "rule": [
            "d19112"
        ]
    },
    {
        "instruction": "",
        "id": "q19113",
        "input": "check if enum is valid python",
        "output": "",
        "rule": [
            "d19113"
        ]
    },
    {
        "instruction": "",
        "id": "q19114",
        "input": "python setting a default value for an attribute",
        "output": "",
        "rule": [
            "d19114"
        ]
    },
    {
        "instruction": "",
        "id": "q19115",
        "input": "sample api post call python",
        "output": "",
        "rule": [
            "d19115"
        ]
    },
    {
        "instruction": "",
        "id": "q19116",
        "input": "how to get the base 10value for a string in python",
        "output": "",
        "rule": [
            "d19116"
        ]
    },
    {
        "instruction": "",
        "id": "q19117",
        "input": "mulyiple indexing list python",
        "output": "",
        "rule": [
            "d19117"
        ]
    },
    {
        "instruction": "",
        "id": "q19118",
        "input": "how to graph a complex function in python",
        "output": "",
        "rule": [
            "d19118"
        ]
    },
    {
        "instruction": "",
        "id": "q19119",
        "input": "how to know the datatype of column+ sql + python",
        "output": "",
        "rule": [
            "d19119"
        ]
    },
    {
        "instruction": "",
        "id": "q19120",
        "input": "skip over blank lines in file python",
        "output": "",
        "rule": [
            "d19120"
        ]
    },
    {
        "instruction": "",
        "id": "q19121",
        "input": "generate graph from dot file python",
        "output": "",
        "rule": [
            "d19121"
        ]
    },
    {
        "instruction": "",
        "id": "q19122",
        "input": "using recursion in python to print a binary tree",
        "output": "",
        "rule": [
            "d19122"
        ]
    },
    {
        "instruction": "",
        "id": "q19123",
        "input": "python matrix to orthogonal",
        "output": "",
        "rule": [
            "d19123"
        ]
    },
    {
        "instruction": "",
        "id": "q19124",
        "input": "python numpy fill with custom values",
        "output": "",
        "rule": [
            "d19124"
        ]
    },
    {
        "instruction": "",
        "id": "q19125",
        "input": "invert a dictionary in python",
        "output": "",
        "rule": [
            "d19125"
        ]
    },
    {
        "instruction": "",
        "id": "q19126",
        "input": "how to check path is a file or directory in python",
        "output": "",
        "rule": [
            "d19126"
        ]
    },
    {
        "instruction": "",
        "id": "q19127",
        "input": "validate minimum string length of user input in python",
        "output": "",
        "rule": [
            "d19127"
        ]
    },
    {
        "instruction": "",
        "id": "q19128",
        "input": "python set check is consists an element",
        "output": "",
        "rule": [
            "d19128"
        ]
    },
    {
        "instruction": "",
        "id": "q19129",
        "input": "python check if string contains a line in file",
        "output": "",
        "rule": [
            "d19129"
        ]
    },
    {
        "instruction": "",
        "id": "q19130",
        "input": "invert a dictionary python",
        "output": "",
        "rule": [
            "d19130"
        ]
    },
    {
        "instruction": "",
        "id": "q19131",
        "input": "change a string list to int in python",
        "output": "",
        "rule": [
            "d19131"
        ]
    },
    {
        "instruction": "",
        "id": "q19132",
        "input": "che3ck if string is equal to whitespace python",
        "output": "",
        "rule": [
            "d19132"
        ]
    },
    {
        "instruction": "",
        "id": "q19133",
        "input": "covert string to int in python",
        "output": "",
        "rule": [
            "d19133"
        ]
    },
    {
        "instruction": "",
        "id": "q19134",
        "input": "python check the date a file was altered",
        "output": "",
        "rule": [
            "d19134"
        ]
    },
    {
        "instruction": "",
        "id": "q19135",
        "input": "connecting to an access database with python pyodbc",
        "output": "",
        "rule": [
            "d19135"
        ]
    },
    {
        "instruction": "",
        "id": "q19136",
        "input": "remove data frame columns python",
        "output": "",
        "rule": [
            "d19136"
        ]
    },
    {
        "instruction": "",
        "id": "q19137",
        "input": "python default value return tuple",
        "output": "",
        "rule": [
            "d19137"
        ]
    },
    {
        "instruction": "",
        "id": "q19138",
        "input": "python for loop except first and last elements in list",
        "output": "",
        "rule": [
            "d19138"
        ]
    },
    {
        "instruction": "",
        "id": "q19139",
        "input": "python reload is not defined",
        "output": "",
        "rule": [
            "d19139"
        ]
    },
    {
        "instruction": "",
        "id": "q19140",
        "input": "python kmeans get the optimal cluster number",
        "output": "",
        "rule": [
            "d19140"
        ]
    },
    {
        "instruction": "",
        "id": "q19141",
        "input": "python generate all permutations",
        "output": "",
        "rule": [
            "d19141"
        ]
    },
    {
        "instruction": "",
        "id": "q19142",
        "input": "python + calculate matrix product of the two tensors",
        "output": "",
        "rule": [
            "d19142"
        ]
    },
    {
        "instruction": "",
        "id": "q19143",
        "input": "python how to turn a string list into a list",
        "output": "",
        "rule": [
            "d19143"
        ]
    },
    {
        "instruction": "",
        "id": "q19144",
        "input": "get document frequency from tokenized lists python",
        "output": "",
        "rule": [
            "d19144"
        ]
    },
    {
        "instruction": "",
        "id": "q19145",
        "input": "chaning list entries from string to int in python",
        "output": "",
        "rule": [
            "d19145"
        ]
    },
    {
        "instruction": "",
        "id": "q19146",
        "input": "capitalize letters in string python",
        "output": "",
        "rule": [
            "d19146"
        ]
    },
    {
        "instruction": "",
        "id": "q19147",
        "input": "how to change list of strings to integers python",
        "output": "",
        "rule": [
            "d19147"
        ]
    },
    {
        "instruction": "",
        "id": "q19148",
        "input": "how to check for an empty file python",
        "output": "",
        "rule": [
            "d19148"
        ]
    },
    {
        "instruction": "",
        "id": "q19149",
        "input": "elements of a list to string in python",
        "output": "",
        "rule": [
            "d19149"
        ]
    },
    {
        "instruction": "",
        "id": "q19150",
        "input": "how to type cast an unsigned long to int in python",
        "output": "",
        "rule": [
            "d19150"
        ]
    },
    {
        "instruction": "",
        "id": "q19151",
        "input": "python if array is all 1",
        "output": "",
        "rule": [
            "d19151"
        ]
    },
    {
        "instruction": "",
        "id": "q19152",
        "input": "how to check if a string is whitespace in python",
        "output": "",
        "rule": [
            "d19152"
        ]
    },
    {
        "instruction": "",
        "id": "q19153",
        "input": "how to check if a string contains all letters in python",
        "output": "",
        "rule": [
            "d19153"
        ]
    },
    {
        "instruction": "",
        "id": "q19154",
        "input": "rms average equation python",
        "output": "",
        "rule": [
            "d19154"
        ]
    },
    {
        "instruction": "",
        "id": "q19155",
        "input": "linux python memcache return none",
        "output": "",
        "rule": [
            "d19155"
        ]
    },
    {
        "instruction": "",
        "id": "q19156",
        "input": "links to html pages with no duplicates code on python",
        "output": "",
        "rule": [
            "d19156"
        ]
    },
    {
        "instruction": "",
        "id": "q19157",
        "input": "python determine if prime and what factors",
        "output": "",
        "rule": [
            "d19157"
        ]
    },
    {
        "instruction": "",
        "id": "q19158",
        "input": "python choose top 4",
        "output": "",
        "rule": [
            "d19158"
        ]
    },
    {
        "instruction": "",
        "id": "q19159",
        "input": "python requests post parametes dict",
        "output": "",
        "rule": [
            "d19159"
        ]
    },
    {
        "instruction": "",
        "id": "q19160",
        "input": "python datetime from isoformat string",
        "output": "",
        "rule": [
            "d19160"
        ]
    },
    {
        "instruction": "",
        "id": "q19161",
        "input": "python check if two paths are equal",
        "output": "",
        "rule": [
            "d19161"
        ]
    },
    {
        "instruction": "",
        "id": "q19162",
        "input": "python win32api mouse event",
        "output": "",
        "rule": [
            "d19162"
        ]
    },
    {
        "instruction": "",
        "id": "q19163",
        "input": "python flask how to access local cache",
        "output": "",
        "rule": [
            "d19163"
        ]
    },
    {
        "instruction": "",
        "id": "q19164",
        "input": "conda env python not found",
        "output": "",
        "rule": [
            "d19164"
        ]
    },
    {
        "instruction": "",
        "id": "q19165",
        "input": "how to use split on a list in python",
        "output": "",
        "rule": [
            "d19165"
        ]
    },
    {
        "instruction": "",
        "id": "q19166",
        "input": "how to get contents of text file in python",
        "output": "",
        "rule": [
            "d19166"
        ]
    },
    {
        "instruction": "",
        "id": "q19167",
        "input": "python tostring javascript compatible",
        "output": "",
        "rule": [
            "d19167"
        ]
    },
    {
        "instruction": "",
        "id": "q19168",
        "input": "how to perform bitwise operation in python",
        "output": "",
        "rule": [
            "d19168"
        ]
    },
    {
        "instruction": "",
        "id": "q19169",
        "input": "python validate value is number",
        "output": "",
        "rule": [
            "d19169"
        ]
    },
    {
        "instruction": "",
        "id": "q19170",
        "input": "how to call the text file and read it in python",
        "output": "",
        "rule": [
            "d19170"
        ]
    },
    {
        "instruction": "",
        "id": "q19171",
        "input": "python get the depth of list of list",
        "output": "",
        "rule": [
            "d19171"
        ]
    },
    {
        "instruction": "",
        "id": "q19172",
        "input": "python determine if variable type is lambda function",
        "output": "",
        "rule": [
            "d19172"
        ]
    },
    {
        "instruction": "",
        "id": "q19173",
        "input": "all links to html pages with no duplicates vode in python",
        "output": "",
        "rule": [
            "d19173"
        ]
    },
    {
        "instruction": "",
        "id": "q19174",
        "input": "finding maximum value of column python",
        "output": "",
        "rule": [
            "d19174"
        ]
    },
    {
        "instruction": "",
        "id": "q19175",
        "input": "how to check if a request is valid or not in python",
        "output": "",
        "rule": [
            "d19175"
        ]
    },
    {
        "instruction": "",
        "id": "q19176",
        "input": "python types of all panda columns",
        "output": "",
        "rule": [
            "d19176"
        ]
    },
    {
        "instruction": "",
        "id": "q19177",
        "input": "how to check type of object in column in python",
        "output": "",
        "rule": [
            "d19177"
        ]
    },
    {
        "instruction": "",
        "id": "q19178",
        "input": "extract hostname from url python",
        "output": "",
        "rule": [
            "d19178"
        ]
    },
    {
        "instruction": "",
        "id": "q19179",
        "input": "if key exists python do this",
        "output": "",
        "rule": [
            "d19179"
        ]
    },
    {
        "instruction": "",
        "id": "q19180",
        "input": "python list iterator know this is the last",
        "output": "",
        "rule": [
            "d19180"
        ]
    },
    {
        "instruction": "",
        "id": "q19181",
        "input": "get the unique index of a list item python",
        "output": "",
        "rule": [
            "d19181"
        ]
    },
    {
        "instruction": "",
        "id": "q19182",
        "input": "python print function name and all params",
        "output": "",
        "rule": [
            "d19182"
        ]
    },
    {
        "instruction": "",
        "id": "q19183",
        "input": "listen udev python detect keyboard",
        "output": "",
        "rule": [
            "d19183"
        ]
    },
    {
        "instruction": "",
        "id": "q19184",
        "input": "python dateutil get current time zone",
        "output": "",
        "rule": [
            "d19184"
        ]
    },
    {
        "instruction": "",
        "id": "q19185",
        "input": "python reusing a single request session",
        "output": "",
        "rule": [
            "d19185"
        ]
    },
    {
        "instruction": "",
        "id": "q19186",
        "input": "python check for whitespace",
        "output": "",
        "rule": [
            "d19186"
        ]
    },
    {
        "instruction": "",
        "id": "q19187",
        "input": "how to draw a simple tree diagram in python without igraph",
        "output": "",
        "rule": [
            "d19187"
        ]
    },
    {
        "instruction": "",
        "id": "q19188",
        "input": "python passing a flattened list",
        "output": "",
        "rule": [
            "d19188"
        ]
    },
    {
        "instruction": "",
        "id": "q19189",
        "input": "python spacy create noun chunker",
        "output": "",
        "rule": [
            "d19189"
        ]
    },
    {
        "instruction": "",
        "id": "q19190",
        "input": "python custom hash functions",
        "output": "",
        "rule": [
            "d19190"
        ]
    },
    {
        "instruction": "",
        "id": "q19191",
        "input": "function that \"standardizes\" a column python",
        "output": "",
        "rule": [
            "d19191"
        ]
    },
    {
        "instruction": "",
        "id": "q19192",
        "input": "iterator python has next",
        "output": "",
        "rule": [
            "d19192"
        ]
    },
    {
        "instruction": "",
        "id": "q19193",
        "input": "unique function in python for lists",
        "output": "",
        "rule": [
            "d19193"
        ]
    },
    {
        "instruction": "",
        "id": "q19194",
        "input": "python flask auto run",
        "output": "",
        "rule": [
            "d19194"
        ]
    },
    {
        "instruction": "",
        "id": "q19195",
        "input": "delete table from sql using python using sql server native",
        "output": "",
        "rule": [
            "d19195"
        ]
    },
    {
        "instruction": "",
        "id": "q19196",
        "input": "how to write text to a file in a python",
        "output": "",
        "rule": [
            "d19196"
        ]
    },
    {
        "instruction": "",
        "id": "q19197",
        "input": "python dealth last week",
        "output": "",
        "rule": [
            "d19197"
        ]
    },
    {
        "instruction": "",
        "id": "q19198",
        "input": "python median filter 3d array",
        "output": "",
        "rule": [
            "d19198"
        ]
    },
    {
        "instruction": "",
        "id": "q19199",
        "input": "python determine if filename is media file",
        "output": "",
        "rule": [
            "d19199"
        ]
    },
    {
        "instruction": "",
        "id": "q19200",
        "input": "how to capitalize words in python with str",
        "output": "",
        "rule": [
            "d19200"
        ]
    },
    {
        "instruction": "",
        "id": "q19201",
        "input": "verify if value exists in hash table python",
        "output": "",
        "rule": [
            "d19201"
        ]
    },
    {
        "instruction": "",
        "id": "q19202",
        "input": "how to get the number of value fall in each bins histogram python",
        "output": "",
        "rule": [
            "d19202"
        ]
    },
    {
        "instruction": "",
        "id": "q19203",
        "input": "python how to change column to uppercase",
        "output": "",
        "rule": [
            "d19203"
        ]
    },
    {
        "instruction": "",
        "id": "q19204",
        "input": "combine multiple pdfs into one python",
        "output": "",
        "rule": [
            "d19204"
        ]
    },
    {
        "instruction": "",
        "id": "q19205",
        "input": "python get number of cpu cores",
        "output": "",
        "rule": [
            "d19205"
        ]
    },
    {
        "instruction": "",
        "id": "q19206",
        "input": "python numpy ndarray to string",
        "output": "",
        "rule": [
            "d19206"
        ]
    },
    {
        "instruction": "",
        "id": "q19207",
        "input": "python using arrays to return multiple values",
        "output": "",
        "rule": [
            "d19207"
        ]
    },
    {
        "instruction": "",
        "id": "q19208",
        "input": "python if i is not equal to and integer",
        "output": "",
        "rule": [
            "d19208"
        ]
    },
    {
        "instruction": "",
        "id": "q19209",
        "input": "psutil python memory leak",
        "output": "",
        "rule": [
            "d19209"
        ]
    },
    {
        "instruction": "",
        "id": "q19210",
        "input": "generating integer partitions python",
        "output": "",
        "rule": [
            "d19210"
        ]
    },
    {
        "instruction": "",
        "id": "q19211",
        "input": "how to use the capitalize function in python",
        "output": "",
        "rule": [
            "d19211"
        ]
    },
    {
        "instruction": "",
        "id": "q19212",
        "input": "how to check if a string is int or not python",
        "output": "",
        "rule": [
            "d19212"
        ]
    },
    {
        "instruction": "",
        "id": "q19213",
        "input": "verify date string yyyymmdd python",
        "output": "",
        "rule": [
            "d19213"
        ]
    },
    {
        "instruction": "",
        "id": "q19214",
        "input": "python check if date is expired",
        "output": "",
        "rule": [
            "d19214"
        ]
    },
    {
        "instruction": "",
        "id": "q19215",
        "input": "return list of top values python",
        "output": "",
        "rule": [
            "d19215"
        ]
    },
    {
        "instruction": "",
        "id": "q19216",
        "input": "how to make random names in python",
        "output": "",
        "rule": [
            "d19216"
        ]
    },
    {
        "instruction": "",
        "id": "q19217",
        "input": "python parse tuple rest",
        "output": "",
        "rule": [
            "d19217"
        ]
    },
    {
        "instruction": "",
        "id": "q19218",
        "input": "use python to realize auto completion",
        "output": "",
        "rule": [
            "d19218"
        ]
    },
    {
        "instruction": "",
        "id": "q19219",
        "input": "python remove all instances of a char",
        "output": "",
        "rule": [
            "d19219"
        ]
    },
    {
        "instruction": "",
        "id": "q19220",
        "input": "how to print few elements from a list in python",
        "output": "",
        "rule": [
            "d19220"
        ]
    },
    {
        "instruction": "",
        "id": "q19221",
        "input": "python normalize set of numbers",
        "output": "",
        "rule": [
            "d19221"
        ]
    },
    {
        "instruction": "",
        "id": "q19222",
        "input": "how to check file is empty or not in python",
        "output": "",
        "rule": [
            "d19222"
        ]
    },
    {
        "instruction": "",
        "id": "q19223",
        "input": "get all max values in dict python",
        "output": "",
        "rule": [
            "d19223"
        ]
    },
    {
        "instruction": "",
        "id": "q19224",
        "input": "last day of month datetime python",
        "output": "",
        "rule": [
            "d19224"
        ]
    },
    {
        "instruction": "",
        "id": "q19225",
        "input": "casting a string to integer python",
        "output": "",
        "rule": [
            "d19225"
        ]
    },
    {
        "instruction": "",
        "id": "q19226",
        "input": "how to standardize numbers to between 0 and 1 in python",
        "output": "",
        "rule": [
            "d19226"
        ]
    },
    {
        "instruction": "",
        "id": "q19227",
        "input": "strip non latin characters from python text",
        "output": "",
        "rule": [
            "d19227"
        ]
    },
    {
        "instruction": "",
        "id": "q19228",
        "input": "python skip over blank lines while reading",
        "output": "",
        "rule": [
            "d19228"
        ]
    },
    {
        "instruction": "",
        "id": "q19229",
        "input": "remove all encountered char in str python",
        "output": "",
        "rule": [
            "d19229"
        ]
    },
    {
        "instruction": "",
        "id": "q19230",
        "input": "make set of numbers a list python",
        "output": "",
        "rule": [
            "d19230"
        ]
    },
    {
        "instruction": "",
        "id": "q19231",
        "input": "python change a list of number to string",
        "output": "",
        "rule": [
            "d19231"
        ]
    },
    {
        "instruction": "",
        "id": "q19232",
        "input": "count number of occurrences in a list python",
        "output": "",
        "rule": [
            "d19232"
        ]
    },
    {
        "instruction": "",
        "id": "q19233",
        "input": "python create code dependecy graph",
        "output": "",
        "rule": [
            "d19233"
        ]
    },
    {
        "instruction": "",
        "id": "q19234",
        "input": "get single col python 2d array",
        "output": "",
        "rule": [
            "d19234"
        ]
    },
    {
        "instruction": "",
        "id": "q19235",
        "input": "how to replace multiple strings with one string in python 3",
        "output": "",
        "rule": [
            "d19235"
        ]
    },
    {
        "instruction": "",
        "id": "q19236",
        "input": "python code to check if file is empty",
        "output": "",
        "rule": [
            "d19236"
        ]
    },
    {
        "instruction": "",
        "id": "q19237",
        "input": "python read last lines",
        "output": "",
        "rule": [
            "d19237"
        ]
    },
    {
        "instruction": "",
        "id": "q19238",
        "input": "python parse a line into tokens",
        "output": "",
        "rule": [
            "d19238"
        ]
    },
    {
        "instruction": "",
        "id": "q19239",
        "input": "python join list to string by comma",
        "output": "",
        "rule": [
            "d19239"
        ]
    },
    {
        "instruction": "",
        "id": "q19240",
        "input": "python how to make randomwalk work",
        "output": "",
        "rule": [
            "d19240"
        ]
    },
    {
        "instruction": "",
        "id": "q19241",
        "input": "python get the maximum length of string objects in a list",
        "output": "",
        "rule": [
            "d19241"
        ]
    },
    {
        "instruction": "",
        "id": "q19242",
        "input": "how to store the smallest number in array in python",
        "output": "",
        "rule": [
            "d19242"
        ]
    },
    {
        "instruction": "",
        "id": "q19243",
        "input": "fibonacci sequence upto 8 python",
        "output": "",
        "rule": [
            "d19243"
        ]
    },
    {
        "instruction": "",
        "id": "q19244",
        "input": "python for enumerate last item",
        "output": "",
        "rule": [
            "d19244"
        ]
    },
    {
        "instruction": "",
        "id": "q19245",
        "input": "python code to calculate the most frequent",
        "output": "",
        "rule": [
            "d19245"
        ]
    },
    {
        "instruction": "",
        "id": "q19246",
        "input": "serial python send commands",
        "output": "",
        "rule": [
            "d19246"
        ]
    },
    {
        "instruction": "",
        "id": "q19247",
        "input": "remove all the items from the dictionary in python",
        "output": "",
        "rule": [
            "d19247"
        ]
    },
    {
        "instruction": "",
        "id": "q19248",
        "input": "python sqlalchemy set data type",
        "output": "",
        "rule": [
            "d19248"
        ]
    },
    {
        "instruction": "",
        "id": "q19249",
        "input": "python how to check if any two variables are greater than zero",
        "output": "",
        "rule": [
            "d19249"
        ]
    },
    {
        "instruction": "",
        "id": "q19250",
        "input": "get window dimensions python",
        "output": "",
        "rule": [
            "d19250"
        ]
    },
    {
        "instruction": "",
        "id": "q19251",
        "input": "how to return a list of files sorted by file creation time python",
        "output": "",
        "rule": [
            "d19251"
        ]
    },
    {
        "instruction": "",
        "id": "q19252",
        "input": "get last 5 months on a date column in python",
        "output": "",
        "rule": [
            "d19252"
        ]
    },
    {
        "instruction": "",
        "id": "q19253",
        "input": "python detect if cpython or pypu",
        "output": "",
        "rule": [
            "d19253"
        ]
    },
    {
        "instruction": "",
        "id": "q19254",
        "input": "initialize a 2d array in python without numpy",
        "output": "",
        "rule": [
            "d19254"
        ]
    },
    {
        "instruction": "",
        "id": "q19255",
        "input": "how to test if a set is a subset of another in python",
        "output": "",
        "rule": [
            "d19255"
        ]
    },
    {
        "instruction": "",
        "id": "q19256",
        "input": "python semantic completion youcompleteme",
        "output": "",
        "rule": [
            "d19256"
        ]
    },
    {
        "instruction": "",
        "id": "q19257",
        "input": "showing hypthsis symbols in python",
        "output": "",
        "rule": [
            "d19257"
        ]
    },
    {
        "instruction": "",
        "id": "q19258",
        "input": "to check if a particular string is whitespace python",
        "output": "",
        "rule": [
            "d19258"
        ]
    },
    {
        "instruction": "",
        "id": "q19259",
        "input": "python'float' object has no attribute 'getvalue'",
        "output": "",
        "rule": [
            "d19259"
        ]
    },
    {
        "instruction": "",
        "id": "q19260",
        "input": "print all cycles in a directed graph in python",
        "output": "",
        "rule": [
            "d19260"
        ]
    },
    {
        "instruction": "",
        "id": "q19261",
        "input": "check if a path is a file or a directory in python",
        "output": "",
        "rule": [
            "d19261"
        ]
    },
    {
        "instruction": "",
        "id": "q19262",
        "input": "python remove file using wildcard",
        "output": "",
        "rule": [
            "d19262"
        ]
    },
    {
        "instruction": "",
        "id": "q19263",
        "input": "check if a column is null python",
        "output": "",
        "rule": [
            "d19263"
        ]
    },
    {
        "instruction": "",
        "id": "q19264",
        "input": "python check if line exists in file",
        "output": "",
        "rule": [
            "d19264"
        ]
    },
    {
        "instruction": "",
        "id": "q19265",
        "input": "python third friday of month",
        "output": "",
        "rule": [
            "d19265"
        ]
    },
    {
        "instruction": "",
        "id": "q19266",
        "input": "python limit duration function execution metadata",
        "output": "",
        "rule": [
            "d19266"
        ]
    },
    {
        "instruction": "",
        "id": "q19267",
        "input": "bit mask funtion in python",
        "output": "",
        "rule": [
            "d19267"
        ]
    },
    {
        "instruction": "",
        "id": "q19268",
        "input": "python finding last occurance of string",
        "output": "",
        "rule": [
            "d19268"
        ]
    },
    {
        "instruction": "",
        "id": "q19269",
        "input": "assert in or assertcontain in python",
        "output": "",
        "rule": [
            "d19269"
        ]
    },
    {
        "instruction": "",
        "id": "q19270",
        "input": "are python dictionaries case sensitive",
        "output": "",
        "rule": [
            "d19270"
        ]
    },
    {
        "instruction": "",
        "id": "q19271",
        "input": "python code to check for whitespaces",
        "output": "",
        "rule": [
            "d19271"
        ]
    },
    {
        "instruction": "",
        "id": "q19272",
        "input": "how to determine an object's data type python",
        "output": "",
        "rule": [
            "d19272"
        ]
    },
    {
        "instruction": "",
        "id": "q19273",
        "input": "python break or exit command",
        "output": "",
        "rule": [
            "d19273"
        ]
    },
    {
        "instruction": "",
        "id": "q19274",
        "input": "python flatten list inside list",
        "output": "",
        "rule": [
            "d19274"
        ]
    },
    {
        "instruction": "",
        "id": "q19275",
        "input": "python return ordereddict from db cursor",
        "output": "",
        "rule": [
            "d19275"
        ]
    },
    {
        "instruction": "",
        "id": "q19276",
        "input": "write a function that counts the number of times an element appears in a list python",
        "output": "",
        "rule": [
            "d19276"
        ]
    },
    {
        "instruction": "",
        "id": "q19277",
        "input": "python get url from just a domain name",
        "output": "",
        "rule": [
            "d19277"
        ]
    },
    {
        "instruction": "",
        "id": "q19278",
        "input": "how to pass an http request in python",
        "output": "",
        "rule": [
            "d19278"
        ]
    },
    {
        "instruction": "",
        "id": "q19279",
        "input": "comparison to see if it is non numerical value in python",
        "output": "",
        "rule": [
            "d19279"
        ]
    },
    {
        "instruction": "",
        "id": "q19280",
        "input": "python skip for new line in file",
        "output": "",
        "rule": [
            "d19280"
        ]
    },
    {
        "instruction": "",
        "id": "q19281",
        "input": "how display contents of a text file in python",
        "output": "",
        "rule": [
            "d19281"
        ]
    },
    {
        "instruction": "",
        "id": "q19282",
        "input": "python create dictionary given list of values and list of keys",
        "output": "",
        "rule": [
            "d19282"
        ]
    },
    {
        "instruction": "",
        "id": "q19283",
        "input": "move to new row after every space python",
        "output": "",
        "rule": [
            "d19283"
        ]
    },
    {
        "instruction": "",
        "id": "q19284",
        "input": "python make sure string is a valid filename",
        "output": "",
        "rule": [
            "d19284"
        ]
    },
    {
        "instruction": "",
        "id": "q19285",
        "input": "timing a python function",
        "output": "",
        "rule": [
            "d19285"
        ]
    },
    {
        "instruction": "",
        "id": "q19286",
        "input": "python conver list of strings to int",
        "output": "",
        "rule": [
            "d19286"
        ]
    },
    {
        "instruction": "",
        "id": "q19287",
        "input": "python 3 extract tuple",
        "output": "",
        "rule": [
            "d19287"
        ]
    },
    {
        "instruction": "",
        "id": "q19288",
        "input": "python to capitalize alternate",
        "output": "",
        "rule": [
            "d19288"
        ]
    },
    {
        "instruction": "",
        "id": "q19289",
        "input": "how to remove numpy array to make string python",
        "output": "",
        "rule": [
            "d19289"
        ]
    },
    {
        "instruction": "",
        "id": "q19290",
        "input": "case sensitive in string in python",
        "output": "",
        "rule": [
            "d19290"
        ]
    },
    {
        "instruction": "",
        "id": "q19291",
        "input": "how to read json file into a python dictionary",
        "output": "",
        "rule": [
            "d19291"
        ]
    },
    {
        "instruction": "",
        "id": "q19292",
        "input": "python identify if there are any nulls in column",
        "output": "",
        "rule": [
            "d19292"
        ]
    },
    {
        "instruction": "",
        "id": "q19293",
        "input": "how to return the last index calue python\\",
        "output": "",
        "rule": [
            "d19293"
        ]
    },
    {
        "instruction": "",
        "id": "q19294",
        "input": "python best way to store bit field",
        "output": "",
        "rule": [
            "d19294"
        ]
    },
    {
        "instruction": "",
        "id": "q19295",
        "input": "forceing a string into a number python comand",
        "output": "",
        "rule": [
            "d19295"
        ]
    },
    {
        "instruction": "",
        "id": "q19296",
        "input": "python get first column of table",
        "output": "",
        "rule": [
            "d19296"
        ]
    },
    {
        "instruction": "",
        "id": "q19297",
        "input": "python capitalize letters in string",
        "output": "",
        "rule": [
            "d19297"
        ]
    },
    {
        "instruction": "",
        "id": "q19298",
        "input": "jquery serialize to python dict",
        "output": "",
        "rule": [
            "d19298"
        ]
    },
    {
        "instruction": "",
        "id": "q19299",
        "input": "how to make letters obtained from strings uppercase in python",
        "output": "",
        "rule": [
            "d19299"
        ]
    },
    {
        "instruction": "",
        "id": "q19300",
        "input": "python generate fibanacci using lambda",
        "output": "",
        "rule": [
            "d19300"
        ]
    },
    {
        "instruction": "",
        "id": "q19301",
        "input": "python variable index range in memoryview",
        "output": "",
        "rule": [
            "d19301"
        ]
    },
    {
        "instruction": "",
        "id": "q19302",
        "input": "howto read file from s3 directly by path in python",
        "output": "",
        "rule": [
            "d19302"
        ]
    },
    {
        "instruction": "",
        "id": "q19303",
        "input": "how to discard first text of a string in pythong",
        "output": "",
        "rule": [
            "d19303"
        ]
    },
    {
        "instruction": "",
        "id": "q19304",
        "input": "python read csv to numpy array",
        "output": "",
        "rule": [
            "d19304"
        ]
    },
    {
        "instruction": "",
        "id": "q19305",
        "input": "python tensor dot product",
        "output": "",
        "rule": [
            "d19305"
        ]
    },
    {
        "instruction": "",
        "id": "q19306",
        "input": "python check memory usage stackoverflow",
        "output": "",
        "rule": [
            "d19306"
        ]
    },
    {
        "instruction": "",
        "id": "q19307",
        "input": "python unix detect key press",
        "output": "",
        "rule": [
            "d19307"
        ]
    },
    {
        "instruction": "",
        "id": "q19308",
        "input": "python get last index of character",
        "output": "",
        "rule": [
            "d19308"
        ]
    },
    {
        "instruction": "",
        "id": "q19309",
        "input": "printing a tree recursively python",
        "output": "",
        "rule": [
            "d19309"
        ]
    },
    {
        "instruction": "",
        "id": "q19310",
        "input": "python change a string to a date",
        "output": "",
        "rule": [
            "d19310"
        ]
    },
    {
        "instruction": "",
        "id": "q19311",
        "input": "python check for trailing whitespace",
        "output": "",
        "rule": [
            "d19311"
        ]
    },
    {
        "instruction": "",
        "id": "q19312",
        "input": "most frequent substring of strings, python",
        "output": "",
        "rule": [
            "d19312"
        ]
    },
    {
        "instruction": "",
        "id": "q19313",
        "input": "python asyncio start server connection refuse",
        "output": "",
        "rule": [
            "d19313"
        ]
    },
    {
        "instruction": "",
        "id": "q19314",
        "input": "python test async coroutine is running",
        "output": "",
        "rule": [
            "d19314"
        ]
    },
    {
        "instruction": "",
        "id": "q19315",
        "input": "create dictionary of indices in list in python",
        "output": "",
        "rule": [
            "d19315"
        ]
    },
    {
        "instruction": "",
        "id": "q19316",
        "input": "how to get table names from dynamo in python",
        "output": "",
        "rule": [
            "d19316"
        ]
    },
    {
        "instruction": "",
        "id": "q19317",
        "input": "largest common substring python",
        "output": "",
        "rule": [
            "d19317"
        ]
    },
    {
        "instruction": "",
        "id": "q19318",
        "input": "python 3 detect keyboard press linux",
        "output": "",
        "rule": [
            "d19318"
        ]
    },
    {
        "instruction": "",
        "id": "q19319",
        "input": "how to get key with max value python",
        "output": "",
        "rule": [
            "d19319"
        ]
    },
    {
        "instruction": "",
        "id": "q19320",
        "input": "how to do bitwise or on a string of bits in python",
        "output": "",
        "rule": [
            "d19320"
        ]
    },
    {
        "instruction": "",
        "id": "q19321",
        "input": "python exclude words from list",
        "output": "",
        "rule": [
            "d19321"
        ]
    },
    {
        "instruction": "",
        "id": "q19322",
        "input": "dot product of two vectors python sympy",
        "output": "",
        "rule": [
            "d19322"
        ]
    },
    {
        "instruction": "",
        "id": "q19323",
        "input": "reduce trailing zeros python",
        "output": "",
        "rule": [
            "d19323"
        ]
    },
    {
        "instruction": "",
        "id": "q19324",
        "input": "check if two string equal python",
        "output": "",
        "rule": [
            "d19324"
        ]
    },
    {
        "instruction": "",
        "id": "q19325",
        "input": "create a set python from a text file",
        "output": "",
        "rule": [
            "d19325"
        ]
    },
    {
        "instruction": "",
        "id": "q19326",
        "input": "most frequent items in list python",
        "output": "",
        "rule": [
            "d19326"
        ]
    },
    {
        "instruction": "",
        "id": "q19327",
        "input": "pdf to text converter returning me invalid pdf file python",
        "output": "",
        "rule": [
            "d19327"
        ]
    },
    {
        "instruction": "",
        "id": "q19328",
        "input": "how to capitalize all the characters in python",
        "output": "",
        "rule": [
            "d19328"
        ]
    },
    {
        "instruction": "",
        "id": "q19329",
        "input": "truncate variable to three decimals python",
        "output": "",
        "rule": [
            "d19329"
        ]
    },
    {
        "instruction": "",
        "id": "q19330",
        "input": "check is two paths are equivalent python",
        "output": "",
        "rule": [
            "d19330"
        ]
    },
    {
        "instruction": "",
        "id": "q19331",
        "input": "check if a directory is empty python",
        "output": "",
        "rule": [
            "d19331"
        ]
    },
    {
        "instruction": "",
        "id": "q19332",
        "input": "python get overlap between two schedules",
        "output": "",
        "rule": [
            "d19332"
        ]
    },
    {
        "instruction": "",
        "id": "q19333",
        "input": "take top items in a list python",
        "output": "",
        "rule": [
            "d19333"
        ]
    },
    {
        "instruction": "",
        "id": "q19334",
        "input": "print \"hello world\" if a is greater than b in python",
        "output": "",
        "rule": [
            "d19334"
        ]
    },
    {
        "instruction": "",
        "id": "q19335",
        "input": "python fill null value in dictionary",
        "output": "",
        "rule": [
            "d19335"
        ]
    },
    {
        "instruction": "",
        "id": "q19336",
        "input": "python connect to oracle database without dsn",
        "output": "",
        "rule": [
            "d19336"
        ]
    },
    {
        "instruction": "",
        "id": "q19337",
        "input": "python how to grep a file for a string",
        "output": "",
        "rule": [
            "d19337"
        ]
    },
    {
        "instruction": "",
        "id": "q19338",
        "input": "remove element python xml tree",
        "output": "",
        "rule": [
            "d19338"
        ]
    },
    {
        "instruction": "",
        "id": "q19339",
        "input": "python write to file indentation",
        "output": "",
        "rule": [
            "d19339"
        ]
    },
    {
        "instruction": "",
        "id": "q19340",
        "input": "how to keep bit values on python",
        "output": "",
        "rule": [
            "d19340"
        ]
    },
    {
        "instruction": "",
        "id": "q19341",
        "input": "python how to check the queue length",
        "output": "",
        "rule": [
            "d19341"
        ]
    },
    {
        "instruction": "",
        "id": "q19342",
        "input": "python density map gaussian kernel",
        "output": "",
        "rule": [
            "d19342"
        ]
    },
    {
        "instruction": "",
        "id": "q19343",
        "input": "reshape shuffle array python",
        "output": "",
        "rule": [
            "d19343"
        ]
    },
    {
        "instruction": "",
        "id": "q19344",
        "input": "python hashlib function an integer",
        "output": "",
        "rule": [
            "d19344"
        ]
    },
    {
        "instruction": "",
        "id": "q19345",
        "input": "python truncate an existing data frame to keep the column names",
        "output": "",
        "rule": [
            "d19345"
        ]
    },
    {
        "instruction": "",
        "id": "q19346",
        "input": "del element in dictionary in python",
        "output": "",
        "rule": [
            "d19346"
        ]
    },
    {
        "instruction": "",
        "id": "q19347",
        "input": "python delete a value from a set",
        "output": "",
        "rule": [
            "d19347"
        ]
    },
    {
        "instruction": "",
        "id": "q19348",
        "input": "python how to check type is string",
        "output": "",
        "rule": [
            "d19348"
        ]
    },
    {
        "instruction": "",
        "id": "q19349",
        "input": "python reset window color",
        "output": "",
        "rule": [
            "d19349"
        ]
    },
    {
        "instruction": "",
        "id": "q19350",
        "input": "skip first return value in tuple python",
        "output": "",
        "rule": [
            "d19350"
        ]
    },
    {
        "instruction": "",
        "id": "q19351",
        "input": "check whether column contain nulls python",
        "output": "",
        "rule": [
            "d19351"
        ]
    },
    {
        "instruction": "",
        "id": "q19352",
        "input": "get user cpu usage python",
        "output": "",
        "rule": [
            "d19352"
        ]
    },
    {
        "instruction": "",
        "id": "q19353",
        "input": "python how to get rid of repeating items in a list",
        "output": "",
        "rule": [
            "d19353"
        ]
    },
    {
        "instruction": "",
        "id": "q19354",
        "input": "python 3 remove file with pattern",
        "output": "",
        "rule": [
            "d19354"
        ]
    },
    {
        "instruction": "",
        "id": "q19355",
        "input": "inverse dictionary python with a function",
        "output": "",
        "rule": [
            "d19355"
        ]
    },
    {
        "instruction": "",
        "id": "q19356",
        "input": "python check if hessian is invertible",
        "output": "",
        "rule": [
            "d19356"
        ]
    },
    {
        "instruction": "",
        "id": "q19357",
        "input": "python turn list of string into integers",
        "output": "",
        "rule": [
            "d19357"
        ]
    },
    {
        "instruction": "",
        "id": "q19358",
        "input": "test if set is empty python",
        "output": "",
        "rule": [
            "d19358"
        ]
    },
    {
        "instruction": "",
        "id": "q19359",
        "input": "python create dict with list of list",
        "output": "",
        "rule": [
            "d19359"
        ]
    },
    {
        "instruction": "",
        "id": "q19360",
        "input": "check if a set is a subset python",
        "output": "",
        "rule": [
            "d19360"
        ]
    },
    {
        "instruction": "",
        "id": "q19361",
        "input": "python turn list of lists into one list",
        "output": "",
        "rule": [
            "d19361"
        ]
    },
    {
        "instruction": "",
        "id": "q19362",
        "input": "python argparse specify flad",
        "output": "",
        "rule": [
            "d19362"
        ]
    },
    {
        "instruction": "",
        "id": "q19363",
        "input": "change data to bytes in python",
        "output": "",
        "rule": [
            "d19363"
        ]
    },
    {
        "instruction": "",
        "id": "q19364",
        "input": "return indices to python list items meeting a specific condition",
        "output": "",
        "rule": [
            "d19364"
        ]
    },
    {
        "instruction": "",
        "id": "q19365",
        "input": "python queue check size",
        "output": "",
        "rule": [
            "d19365"
        ]
    },
    {
        "instruction": "",
        "id": "q19366",
        "input": "python 3 list cast all top string",
        "output": "",
        "rule": [
            "d19366"
        ]
    },
    {
        "instruction": "",
        "id": "q19367",
        "input": "check first index of a string python",
        "output": "",
        "rule": [
            "d19367"
        ]
    },
    {
        "instruction": "",
        "id": "q19368",
        "input": "python argparser hidden variable",
        "output": "",
        "rule": [
            "d19368"
        ]
    },
    {
        "instruction": "",
        "id": "q19369",
        "input": "how to capaitalize the first letter in each word python",
        "output": "",
        "rule": [
            "d19369"
        ]
    },
    {
        "instruction": "",
        "id": "q19370",
        "input": "equivallent function in python for hash array in perl",
        "output": "",
        "rule": [
            "d19370"
        ]
    },
    {
        "instruction": "",
        "id": "q19371",
        "input": "python if string is int",
        "output": "",
        "rule": [
            "d19371"
        ]
    },
    {
        "instruction": "",
        "id": "q19372",
        "input": "python check if string in line of file",
        "output": "",
        "rule": [
            "d19372"
        ]
    },
    {
        "instruction": "",
        "id": "q19373",
        "input": "messge pack setup int type in python",
        "output": "",
        "rule": [
            "d19373"
        ]
    },
    {
        "instruction": "",
        "id": "q19374",
        "input": "python concurrent future asyncio future",
        "output": "",
        "rule": [
            "d19374"
        ]
    },
    {
        "instruction": "",
        "id": "q19375",
        "input": "python split according to a list of delimiters",
        "output": "",
        "rule": [
            "d19375"
        ]
    },
    {
        "instruction": "",
        "id": "q19376",
        "input": "python from most recent strptime and retrieve last 12 months",
        "output": "",
        "rule": [
            "d19376"
        ]
    },
    {
        "instruction": "",
        "id": "q19377",
        "input": "list the columns in a table in python",
        "output": "",
        "rule": [
            "d19377"
        ]
    },
    {
        "instruction": "",
        "id": "q19378",
        "input": "how to print out dtypes for all columns in python",
        "output": "",
        "rule": [
            "d19378"
        ]
    },
    {
        "instruction": "",
        "id": "q19379",
        "input": "python list with duplicate items get index",
        "output": "",
        "rule": [
            "d19379"
        ]
    },
    {
        "instruction": "",
        "id": "q19380",
        "input": "how to get the file extension in python",
        "output": "",
        "rule": [
            "d19380"
        ]
    },
    {
        "instruction": "",
        "id": "q19381",
        "input": "how to get text file python",
        "output": "",
        "rule": [
            "d19381"
        ]
    },
    {
        "instruction": "",
        "id": "q19382",
        "input": "python string remove blank",
        "output": "",
        "rule": [
            "d19382"
        ]
    },
    {
        "instruction": "",
        "id": "q19383",
        "input": "how to filter a dictionary of values in python",
        "output": "",
        "rule": [
            "d19383"
        ]
    },
    {
        "instruction": "",
        "id": "q19384",
        "input": "how to hash integers python",
        "output": "",
        "rule": [
            "d19384"
        ]
    },
    {
        "instruction": "",
        "id": "q19385",
        "input": "python dict get value filter by another key",
        "output": "",
        "rule": [
            "d19385"
        ]
    },
    {
        "instruction": "",
        "id": "q19386",
        "input": "python engine has no cursor attribute",
        "output": "",
        "rule": [
            "d19386"
        ]
    },
    {
        "instruction": "",
        "id": "q19387",
        "input": "python int and float equals string or float",
        "output": "",
        "rule": [
            "d19387"
        ]
    },
    {
        "instruction": "",
        "id": "q19388",
        "input": "filename and extension of file in python",
        "output": "",
        "rule": [
            "d19388"
        ]
    },
    {
        "instruction": "",
        "id": "q19389",
        "input": "python3 decode byte string",
        "output": "",
        "rule": [
            "d19389"
        ]
    },
    {
        "instruction": "",
        "id": "q19390",
        "input": "returning single value in sql stored procedure python",
        "output": "",
        "rule": [
            "d19390"
        ]
    },
    {
        "instruction": "",
        "id": "q19391",
        "input": "jsonstring to string python",
        "output": "",
        "rule": [
            "d19391"
        ]
    },
    {
        "instruction": "",
        "id": "q19392",
        "input": "type of a column python",
        "output": "",
        "rule": [
            "d19392"
        ]
    },
    {
        "instruction": "",
        "id": "q19393",
        "input": "print all leaf nodes of a binary tree python",
        "output": "",
        "rule": [
            "d19393"
        ]
    },
    {
        "instruction": "",
        "id": "q19394",
        "input": "to check the nan and null values in python",
        "output": "",
        "rule": [
            "d19394"
        ]
    },
    {
        "instruction": "",
        "id": "q19395",
        "input": "python xml elementtree remove child node",
        "output": "",
        "rule": [
            "d19395"
        ]
    },
    {
        "instruction": "",
        "id": "q19396",
        "input": "how to make a distance function in python",
        "output": "",
        "rule": [
            "d19396"
        ]
    },
    {
        "instruction": "",
        "id": "q19397",
        "input": "determine win folder size in python",
        "output": "",
        "rule": [
            "d19397"
        ]
    },
    {
        "instruction": "",
        "id": "q19398",
        "input": "how to check if the date is last date of the month python",
        "output": "",
        "rule": [
            "d19398"
        ]
    },
    {
        "instruction": "",
        "id": "q19399",
        "input": "python get browser size",
        "output": "",
        "rule": [
            "d19399"
        ]
    },
    {
        "instruction": "",
        "id": "q19400",
        "input": "python from string to date time",
        "output": "",
        "rule": [
            "d19400"
        ]
    },
    {
        "instruction": "",
        "id": "q19401",
        "input": "read json object from file as dict python",
        "output": "",
        "rule": [
            "d19401"
        ]
    },
    {
        "instruction": "",
        "id": "q19402",
        "input": "rgb to hsv for image python",
        "output": "",
        "rule": [
            "d19402"
        ]
    },
    {
        "instruction": "",
        "id": "q19403",
        "input": "how to do product xy on python",
        "output": "",
        "rule": [
            "d19403"
        ]
    },
    {
        "instruction": "",
        "id": "q19404",
        "input": "longest common substring python",
        "output": "",
        "rule": [
            "d19404"
        ]
    },
    {
        "instruction": "",
        "id": "q19405",
        "input": "get min of a series python",
        "output": "",
        "rule": [
            "d19405"
        ]
    },
    {
        "instruction": "",
        "id": "q19406",
        "input": "python how to get max from rows in column",
        "output": "",
        "rule": [
            "d19406"
        ]
    },
    {
        "instruction": "",
        "id": "q19407",
        "input": "get the year from a date in python",
        "output": "",
        "rule": [
            "d19407"
        ]
    },
    {
        "instruction": "",
        "id": "q19408",
        "input": "how to change indents to 4 spaces on python",
        "output": "",
        "rule": [
            "d19408"
        ]
    },
    {
        "instruction": "",
        "id": "q19409",
        "input": "python name pylint is not defined",
        "output": "",
        "rule": [
            "d19409"
        ]
    },
    {
        "instruction": "",
        "id": "q19410",
        "input": "python how to capitalize letters of a input string",
        "output": "",
        "rule": [
            "d19410"
        ]
    },
    {
        "instruction": "",
        "id": "q19411",
        "input": "python3 string to bytestring",
        "output": "",
        "rule": [
            "d19411"
        ]
    },
    {
        "instruction": "",
        "id": "q19412",
        "input": "finding the degree of a node in python",
        "output": "",
        "rule": [
            "d19412"
        ]
    },
    {
        "instruction": "",
        "id": "q19413",
        "input": "dot product using python",
        "output": "",
        "rule": [
            "d19413"
        ]
    },
    {
        "instruction": "",
        "id": "q19414",
        "input": "python function for determing data type",
        "output": "",
        "rule": [
            "d19414"
        ]
    },
    {
        "instruction": "",
        "id": "q19415",
        "input": "python split list by token",
        "output": "",
        "rule": [
            "d19415"
        ]
    },
    {
        "instruction": "",
        "id": "q19416",
        "input": "python unsigned int slices",
        "output": "",
        "rule": [
            "d19416"
        ]
    },
    {
        "instruction": "",
        "id": "q19417",
        "input": "how to add an element to a set in python",
        "output": "",
        "rule": [
            "d19417"
        ]
    },
    {
        "instruction": "",
        "id": "q19418",
        "input": "python for last to first",
        "output": "",
        "rule": [
            "d19418"
        ]
    },
    {
        "instruction": "",
        "id": "q19419",
        "input": "convet tensor to arrray in python",
        "output": "",
        "rule": [
            "d19419"
        ]
    },
    {
        "instruction": "",
        "id": "q19420",
        "input": "cast string into integer python",
        "output": "",
        "rule": [
            "d19420"
        ]
    },
    {
        "instruction": "",
        "id": "q19421",
        "input": "the index of the first elements bigger than 0 python",
        "output": "",
        "rule": [
            "d19421"
        ]
    },
    {
        "instruction": "",
        "id": "q19422",
        "input": "python unresolved reference 'struct'",
        "output": "",
        "rule": [
            "d19422"
        ]
    },
    {
        "instruction": "",
        "id": "q19423",
        "input": "vs code python linting",
        "output": "",
        "rule": [
            "d19423"
        ]
    },
    {
        "instruction": "",
        "id": "q19424",
        "input": "python get current selection",
        "output": "",
        "rule": [
            "d19424"
        ]
    },
    {
        "instruction": "",
        "id": "q19425",
        "input": "procedure median, takes 3 inputs and return the median/python",
        "output": "",
        "rule": [
            "d19425"
        ]
    },
    {
        "instruction": "",
        "id": "q19426",
        "input": "finding the minimum of a column python",
        "output": "",
        "rule": [
            "d19426"
        ]
    },
    {
        "instruction": "",
        "id": "q19427",
        "input": "how to get size of row in matrix python",
        "output": "",
        "rule": [
            "d19427"
        ]
    },
    {
        "instruction": "",
        "id": "q19428",
        "input": "python variable names starting in underscore",
        "output": "",
        "rule": [
            "d19428"
        ]
    },
    {
        "instruction": "",
        "id": "q19429",
        "input": "how to get month before month's last date in python",
        "output": "",
        "rule": [
            "d19429"
        ]
    },
    {
        "instruction": "",
        "id": "q19430",
        "input": "check if set is subset of other set python",
        "output": "",
        "rule": [
            "d19430"
        ]
    },
    {
        "instruction": "",
        "id": "q19431",
        "input": "test all values in an array at once python",
        "output": "",
        "rule": [
            "d19431"
        ]
    },
    {
        "instruction": "",
        "id": "q19432",
        "input": "select column for max column in python",
        "output": "",
        "rule": [
            "d19432"
        ]
    },
    {
        "instruction": "",
        "id": "q19433",
        "input": "draw tree recursively in python",
        "output": "",
        "rule": [
            "d19433"
        ]
    },
    {
        "instruction": "",
        "id": "q19434",
        "input": "create date from string in python",
        "output": "",
        "rule": [
            "d19434"
        ]
    },
    {
        "instruction": "",
        "id": "q19435",
        "input": "python identify datatype of column",
        "output": "",
        "rule": [
            "d19435"
        ]
    },
    {
        "instruction": "",
        "id": "q19436",
        "input": "python type cast all strings in list to int",
        "output": "",
        "rule": [
            "d19436"
        ]
    },
    {
        "instruction": "",
        "id": "q19437",
        "input": "python flatten a dict",
        "output": "",
        "rule": [
            "d19437"
        ]
    },
    {
        "instruction": "",
        "id": "q19438",
        "input": "python networkx graph filter degree",
        "output": "",
        "rule": [
            "d19438"
        ]
    },
    {
        "instruction": "",
        "id": "q19439",
        "input": "replace multiple characters with replace python",
        "output": "",
        "rule": [
            "d19439"
        ]
    },
    {
        "instruction": "",
        "id": "q19440",
        "input": "how to get the time zone from a time and a reference time python",
        "output": "",
        "rule": [
            "d19440"
        ]
    },
    {
        "instruction": "",
        "id": "q19441",
        "input": "get list of attribute in python",
        "output": "",
        "rule": [
            "d19441"
        ]
    },
    {
        "instruction": "",
        "id": "q19442",
        "input": "fastest way to extract all lines that match pattern from file python",
        "output": "",
        "rule": [
            "d19442"
        ]
    },
    {
        "instruction": "",
        "id": "q19443",
        "input": "python round function to nearest ten",
        "output": "",
        "rule": [
            "d19443"
        ]
    },
    {
        "instruction": "",
        "id": "q19444",
        "input": "python function to multiply matrix",
        "output": "",
        "rule": [
            "d19444"
        ]
    },
    {
        "instruction": "",
        "id": "q19445",
        "input": "python checking memory leak",
        "output": "",
        "rule": [
            "d19445"
        ]
    },
    {
        "instruction": "",
        "id": "q19446",
        "input": "python split sentence on comma",
        "output": "",
        "rule": [
            "d19446"
        ]
    },
    {
        "instruction": "",
        "id": "q19447",
        "input": "python return the positions of all the 1 in array",
        "output": "",
        "rule": [
            "d19447"
        ]
    },
    {
        "instruction": "",
        "id": "q19448",
        "input": "python how to see the size of matrix",
        "output": "",
        "rule": [
            "d19448"
        ]
    },
    {
        "instruction": "",
        "id": "q19449",
        "input": "check if letter is a blank space python",
        "output": "",
        "rule": [
            "d19449"
        ]
    },
    {
        "instruction": "",
        "id": "q19450",
        "input": "filter that is removing element python",
        "output": "",
        "rule": [
            "d19450"
        ]
    },
    {
        "instruction": "",
        "id": "q19451",
        "input": "python repeat each element of list n times",
        "output": "",
        "rule": [
            "d19451"
        ]
    },
    {
        "instruction": "",
        "id": "q19452",
        "input": "how do yo ushuffle a list in python",
        "output": "",
        "rule": [
            "d19452"
        ]
    },
    {
        "instruction": "",
        "id": "q19453",
        "input": "remove an entry from a dict in python",
        "output": "",
        "rule": [
            "d19453"
        ]
    },
    {
        "instruction": "",
        "id": "q19454",
        "input": "using % and ? as placeholders sqlite3 python",
        "output": "",
        "rule": [
            "d19454"
        ]
    },
    {
        "instruction": "",
        "id": "q19455",
        "input": "python check if no files in directory bytes",
        "output": "",
        "rule": [
            "d19455"
        ]
    },
    {
        "instruction": "",
        "id": "q19456",
        "input": "concatenate np arrays in python",
        "output": "",
        "rule": [
            "d19456"
        ]
    },
    {
        "instruction": "",
        "id": "q19457",
        "input": "check if queue is empty python",
        "output": "",
        "rule": [
            "d19457"
        ]
    },
    {
        "instruction": "",
        "id": "q19458",
        "input": "how to test for empty quotes in python",
        "output": "",
        "rule": [
            "d19458"
        ]
    },
    {
        "instruction": "",
        "id": "q19459",
        "input": "how to get timezone from datetime in python",
        "output": "",
        "rule": [
            "d19459"
        ]
    },
    {
        "instruction": "",
        "id": "q19460",
        "input": "python replace a specific character in a string",
        "output": "",
        "rule": [
            "d19460"
        ]
    },
    {
        "instruction": "",
        "id": "q19461",
        "input": "python casting to a bytestream",
        "output": "",
        "rule": [
            "d19461"
        ]
    },
    {
        "instruction": "",
        "id": "q19462",
        "input": "get the max column value python",
        "output": "",
        "rule": [
            "d19462"
        ]
    },
    {
        "instruction": "",
        "id": "q19463",
        "input": "python sqlalchemy get table columns",
        "output": "",
        "rule": [
            "d19463"
        ]
    },
    {
        "instruction": "",
        "id": "q19464",
        "input": "python get host cpu usage per core",
        "output": "",
        "rule": [
            "d19464"
        ]
    },
    {
        "instruction": "",
        "id": "q19465",
        "input": "python asyncio method has no attribute run",
        "output": "",
        "rule": [
            "d19465"
        ]
    },
    {
        "instruction": "",
        "id": "q19466",
        "input": "how to flatten a list using python",
        "output": "",
        "rule": [
            "d19466"
        ]
    },
    {
        "instruction": "",
        "id": "q19467",
        "input": "python method to get the current index of an item in a list",
        "output": "",
        "rule": [
            "d19467"
        ]
    },
    {
        "instruction": "",
        "id": "q19468",
        "input": "flatten a list of lists in python",
        "output": "",
        "rule": [
            "d19468"
        ]
    },
    {
        "instruction": "",
        "id": "q19469",
        "input": "python get only first item in a list",
        "output": "",
        "rule": [
            "d19469"
        ]
    },
    {
        "instruction": "",
        "id": "q19470",
        "input": "python dictionary key to float",
        "output": "",
        "rule": [
            "d19470"
        ]
    },
    {
        "instruction": "",
        "id": "q19471",
        "input": "python io skip malformed lines",
        "output": "",
        "rule": [
            "d19471"
        ]
    },
    {
        "instruction": "",
        "id": "q19472",
        "input": "python3 django static images not show with right path",
        "output": "",
        "rule": [
            "d19472"
        ]
    },
    {
        "instruction": "",
        "id": "q19473",
        "input": "python set of integers to set of strings",
        "output": "",
        "rule": [
            "d19473"
        ]
    },
    {
        "instruction": "",
        "id": "q19474",
        "input": "s3 python create and delete \"folder \"",
        "output": "",
        "rule": [
            "d19474"
        ]
    },
    {
        "instruction": "",
        "id": "q19475",
        "input": "python pull first column from table",
        "output": "",
        "rule": [
            "d19475"
        ]
    },
    {
        "instruction": "",
        "id": "q19476",
        "input": "grep a file in python",
        "output": "",
        "rule": [
            "d19476"
        ]
    },
    {
        "instruction": "",
        "id": "q19477",
        "input": "counting token frequency in python",
        "output": "",
        "rule": [
            "d19477"
        ]
    },
    {
        "instruction": "",
        "id": "q19478",
        "input": "how to multiply unknown by matrix in python",
        "output": "",
        "rule": [
            "d19478"
        ]
    },
    {
        "instruction": "",
        "id": "q19479",
        "input": "keep unique element in list python",
        "output": "",
        "rule": [
            "d19479"
        ]
    },
    {
        "instruction": "",
        "id": "q19480",
        "input": "create new dictionary from two python",
        "output": "",
        "rule": [
            "d19480"
        ]
    },
    {
        "instruction": "",
        "id": "q19481",
        "input": "how to change a list of int to a string python",
        "output": "",
        "rule": [
            "d19481"
        ]
    },
    {
        "instruction": "",
        "id": "q19482",
        "input": "python force the program to exit",
        "output": "",
        "rule": [
            "d19482"
        ]
    },
    {
        "instruction": "",
        "id": "q19483",
        "input": "python load json into dict",
        "output": "",
        "rule": [
            "d19483"
        ]
    },
    {
        "instruction": "",
        "id": "q19484",
        "input": "how to get index of item in list python without index function",
        "output": "",
        "rule": [
            "d19484"
        ]
    },
    {
        "instruction": "",
        "id": "q19485",
        "input": "turn list of lists into one list python",
        "output": "",
        "rule": [
            "d19485"
        ]
    },
    {
        "instruction": "",
        "id": "q19486",
        "input": "how to see content of text file in python",
        "output": "",
        "rule": [
            "d19486"
        ]
    },
    {
        "instruction": "",
        "id": "q19487",
        "input": "python read csv to numpy matrix including strings",
        "output": "",
        "rule": [
            "d19487"
        ]
    },
    {
        "instruction": "",
        "id": "q19488",
        "input": "python lower roundoff float",
        "output": "",
        "rule": [
            "d19488"
        ]
    },
    {
        "instruction": "",
        "id": "q19489",
        "input": "python how to tell if file is empty",
        "output": "",
        "rule": [
            "d19489"
        ]
    },
    {
        "instruction": "",
        "id": "q19490",
        "input": "python tensor to a single float",
        "output": "",
        "rule": [
            "d19490"
        ]
    },
    {
        "instruction": "",
        "id": "q19491",
        "input": "select first 10 rows in python",
        "output": "",
        "rule": [
            "d19491"
        ]
    },
    {
        "instruction": "",
        "id": "q19492",
        "input": "how to check csv file is empty in python",
        "output": "",
        "rule": [
            "d19492"
        ]
    },
    {
        "instruction": "",
        "id": "q19493",
        "input": "python string rules with lower and uppercase letters",
        "output": "",
        "rule": [
            "d19493"
        ]
    },
    {
        "instruction": "",
        "id": "q19494",
        "input": "datetime to excel timestamp python3",
        "output": "",
        "rule": [
            "d19494"
        ]
    },
    {
        "instruction": "",
        "id": "q19495",
        "input": "python get the minimum value along axis in numpy",
        "output": "",
        "rule": [
            "d19495"
        ]
    },
    {
        "instruction": "",
        "id": "q19496",
        "input": "moving average predictionn using python on sales data aset",
        "output": "",
        "rule": [
            "d19496"
        ]
    },
    {
        "instruction": "",
        "id": "q19497",
        "input": "remove duplicate from list python",
        "output": "",
        "rule": [
            "d19497"
        ]
    },
    {
        "instruction": "",
        "id": "q19498",
        "input": "remove python xml elementtree",
        "output": "",
        "rule": [
            "d19498"
        ]
    },
    {
        "instruction": "",
        "id": "q19499",
        "input": "max called on an array python",
        "output": "",
        "rule": [
            "d19499"
        ]
    },
    {
        "instruction": "",
        "id": "q19500",
        "input": "logarithmic plot zero python",
        "output": "",
        "rule": [
            "d19500"
        ]
    },
    {
        "instruction": "",
        "id": "q19501",
        "input": "python simulate keyboard events linux",
        "output": "",
        "rule": [
            "d19501"
        ]
    },
    {
        "instruction": "",
        "id": "q19502",
        "input": "python return top 10 prediction results with probabilites",
        "output": "",
        "rule": [
            "d19502"
        ]
    },
    {
        "instruction": "",
        "id": "q19503",
        "input": "index of min in vecotr python",
        "output": "",
        "rule": [
            "d19503"
        ]
    },
    {
        "instruction": "",
        "id": "q19504",
        "input": "json file to dict in python",
        "output": "",
        "rule": [
            "d19504"
        ]
    },
    {
        "instruction": "",
        "id": "q19505",
        "input": "python list comprehension moving average",
        "output": "",
        "rule": [
            "d19505"
        ]
    },
    {
        "instruction": "",
        "id": "q19506",
        "input": "how to truncate decimals python",
        "output": "",
        "rule": [
            "d19506"
        ]
    },
    {
        "instruction": "",
        "id": "q19507",
        "input": "python delete all files with certain extension",
        "output": "",
        "rule": [
            "d19507"
        ]
    },
    {
        "instruction": "",
        "id": "q19508",
        "input": "python change plural to singular",
        "output": "",
        "rule": [
            "d19508"
        ]
    },
    {
        "instruction": "",
        "id": "q19509",
        "input": "how to pytorch tensors can be converted to python scalars",
        "output": "",
        "rule": [
            "d19509"
        ]
    },
    {
        "instruction": "",
        "id": "q19510",
        "input": "python opencv hsv black range",
        "output": "",
        "rule": [
            "d19510"
        ]
    },
    {
        "instruction": "",
        "id": "q19511",
        "input": "how to set a null value to an int in python",
        "output": "",
        "rule": [
            "d19511"
        ]
    },
    {
        "instruction": "",
        "id": "q19512",
        "input": "python if string contains space delete space",
        "output": "",
        "rule": [
            "d19512"
        ]
    },
    {
        "instruction": "",
        "id": "q19513",
        "input": "python remove all instances of a char in a string",
        "output": "",
        "rule": [
            "d19513"
        ]
    },
    {
        "instruction": "",
        "id": "q19514",
        "input": "python merge to dic",
        "output": "",
        "rule": [
            "d19514"
        ]
    },
    {
        "instruction": "",
        "id": "q19515",
        "input": "python minimum of multiple series",
        "output": "",
        "rule": [
            "d19515"
        ]
    },
    {
        "instruction": "",
        "id": "q19516",
        "input": "python to title case with apostrophe in string",
        "output": "",
        "rule": [
            "d19516"
        ]
    },
    {
        "instruction": "",
        "id": "q19517",
        "input": "deleting a element from a dictionary python",
        "output": "",
        "rule": [
            "d19517"
        ]
    },
    {
        "instruction": "",
        "id": "q19518",
        "input": "use python to check if a process is running",
        "output": "",
        "rule": [
            "d19518"
        ]
    },
    {
        "instruction": "",
        "id": "q19519",
        "input": "catch logarithm zero python",
        "output": "",
        "rule": [
            "d19519"
        ]
    },
    {
        "instruction": "",
        "id": "q19520",
        "input": "python how to make a list a hashable type",
        "output": "",
        "rule": [
            "d19520"
        ]
    },
    {
        "instruction": "",
        "id": "q19521",
        "input": "how to check datatype of a column in python",
        "output": "",
        "rule": [
            "d19521"
        ]
    },
    {
        "instruction": "",
        "id": "q19522",
        "input": "python, odbc, ms access check if record exists",
        "output": "",
        "rule": [
            "d19522"
        ]
    },
    {
        "instruction": "",
        "id": "q19523",
        "input": "how to check if file exist in key python",
        "output": "",
        "rule": [
            "d19523"
        ]
    },
    {
        "instruction": "",
        "id": "q19524",
        "input": "python top n elements",
        "output": "",
        "rule": [
            "d19524"
        ]
    },
    {
        "instruction": "",
        "id": "q19525",
        "input": "python assert command not found",
        "output": "",
        "rule": [
            "d19525"
        ]
    },
    {
        "instruction": "",
        "id": "q19526",
        "input": "python length of column 1 of np array",
        "output": "",
        "rule": [
            "d19526"
        ]
    },
    {
        "instruction": "",
        "id": "q19527",
        "input": "create a dict with keys as list indices python",
        "output": "",
        "rule": [
            "d19527"
        ]
    },
    {
        "instruction": "",
        "id": "q19528",
        "input": "how to check if set is subset of another set python",
        "output": "",
        "rule": [
            "d19528"
        ]
    },
    {
        "instruction": "",
        "id": "q19529",
        "input": "python remove elements from a list not in another list",
        "output": "",
        "rule": [
            "d19529"
        ]
    },
    {
        "instruction": "",
        "id": "q19530",
        "input": "python int 8bit data type",
        "output": "",
        "rule": [
            "d19530"
        ]
    },
    {
        "instruction": "",
        "id": "q19531",
        "input": "try catch block python time limit api",
        "output": "",
        "rule": [
            "d19531"
        ]
    },
    {
        "instruction": "",
        "id": "q19532",
        "input": "sets and lists in python similarity",
        "output": "",
        "rule": [
            "d19532"
        ]
    },
    {
        "instruction": "",
        "id": "q19533",
        "input": "python how to check if a file is empty or not",
        "output": "",
        "rule": [
            "d19533"
        ]
    },
    {
        "instruction": "",
        "id": "q19534",
        "input": "get first character of string in a list python",
        "output": "",
        "rule": [
            "d19534"
        ]
    },
    {
        "instruction": "",
        "id": "q19535",
        "input": "type quit to exit program python",
        "output": "",
        "rule": [
            "d19535"
        ]
    },
    {
        "instruction": "",
        "id": "q19536",
        "input": "non blank lines python",
        "output": "",
        "rule": [
            "d19536"
        ]
    },
    {
        "instruction": "",
        "id": "q19537",
        "input": "python delete files wildcard",
        "output": "",
        "rule": [
            "d19537"
        ]
    },
    {
        "instruction": "",
        "id": "q19538",
        "input": "python remove word contains list",
        "output": "",
        "rule": [
            "d19538"
        ]
    },
    {
        "instruction": "",
        "id": "q19539",
        "input": "get cursor position python",
        "output": "",
        "rule": [
            "d19539"
        ]
    },
    {
        "instruction": "",
        "id": "q19540",
        "input": "python remove all emptstrings from list",
        "output": "",
        "rule": [
            "d19540"
        ]
    },
    {
        "instruction": "",
        "id": "q19541",
        "input": "python return index of list duplicates",
        "output": "",
        "rule": [
            "d19541"
        ]
    },
    {
        "instruction": "",
        "id": "q19542",
        "input": "python set precision on string",
        "output": "",
        "rule": [
            "d19542"
        ]
    },
    {
        "instruction": "",
        "id": "q19543",
        "input": "calculate a sphere through data points with python",
        "output": "",
        "rule": [
            "d19543"
        ]
    },
    {
        "instruction": "",
        "id": "q19544",
        "input": "python how to remove leading zeroes",
        "output": "",
        "rule": [
            "d19544"
        ]
    },
    {
        "instruction": "",
        "id": "q19545",
        "input": "flatten dic of nested dict python",
        "output": "",
        "rule": [
            "d19545"
        ]
    },
    {
        "instruction": "",
        "id": "q19546",
        "input": "if x is not equal to integer in python",
        "output": "",
        "rule": [
            "d19546"
        ]
    },
    {
        "instruction": "",
        "id": "q19547",
        "input": "how to split multiple tokens in python",
        "output": "",
        "rule": [
            "d19547"
        ]
    },
    {
        "instruction": "",
        "id": "q19548",
        "input": "how to do normal cdf in python",
        "output": "",
        "rule": [
            "d19548"
        ]
    },
    {
        "instruction": "",
        "id": "q19549",
        "input": "python split sentence into words by spaces and comma",
        "output": "",
        "rule": [
            "d19549"
        ]
    },
    {
        "instruction": "",
        "id": "q19550",
        "input": "change dtype python to int64",
        "output": "",
        "rule": [
            "d19550"
        ]
    },
    {
        "instruction": "",
        "id": "q19551",
        "input": "python turning text file into set",
        "output": "",
        "rule": [
            "d19551"
        ]
    },
    {
        "instruction": "",
        "id": "q19552",
        "input": "denote not a number in python",
        "output": "",
        "rule": [
            "d19552"
        ]
    },
    {
        "instruction": "",
        "id": "q19553",
        "input": "datetime from string to datetime in python",
        "output": "",
        "rule": [
            "d19553"
        ]
    },
    {
        "instruction": "",
        "id": "q19554",
        "input": "python check for next character in a string",
        "output": "",
        "rule": [
            "d19554"
        ]
    },
    {
        "instruction": "",
        "id": "q19555",
        "input": "how to print exit code python",
        "output": "",
        "rule": [
            "d19555"
        ]
    },
    {
        "instruction": "",
        "id": "q19556",
        "input": "how do you limit the number of decimals of a number in python",
        "output": "",
        "rule": [
            "d19556"
        ]
    },
    {
        "instruction": "",
        "id": "q19557",
        "input": "capture the standard output stream of a cell into a variable in local namespace ,python",
        "output": "",
        "rule": [
            "d19557"
        ]
    },
    {
        "instruction": "",
        "id": "q19558",
        "input": "how do you join a list into a string python",
        "output": "",
        "rule": [
            "d19558"
        ]
    },
    {
        "instruction": "",
        "id": "q19559",
        "input": "how to read file from s3 bucket using python",
        "output": "",
        "rule": [
            "d19559"
        ]
    },
    {
        "instruction": "",
        "id": "q19560",
        "input": "python memoryview memory at",
        "output": "",
        "rule": [
            "d19560"
        ]
    },
    {
        "instruction": "",
        "id": "q19561",
        "input": "how to get degree of a node of a graph in python",
        "output": "",
        "rule": [
            "d19561"
        ]
    },
    {
        "instruction": "",
        "id": "q19562",
        "input": "python strip illegal characters for file name",
        "output": "",
        "rule": [
            "d19562"
        ]
    },
    {
        "instruction": "",
        "id": "q19563",
        "input": "none integer comparison python",
        "output": "",
        "rule": [
            "d19563"
        ]
    },
    {
        "instruction": "",
        "id": "q19564",
        "input": "test for duplicates in python lists",
        "output": "",
        "rule": [
            "d19564"
        ]
    },
    {
        "instruction": "",
        "id": "q19565",
        "input": "python read json as dictonary",
        "output": "",
        "rule": [
            "d19565"
        ]
    },
    {
        "instruction": "",
        "id": "q19566",
        "input": "index of first non zero element in list python",
        "output": "",
        "rule": [
            "d19566"
        ]
    },
    {
        "instruction": "",
        "id": "q19567",
        "input": "python check most frequent in a list",
        "output": "",
        "rule": [
            "d19567"
        ]
    },
    {
        "instruction": "",
        "id": "q19568",
        "input": "python check if numerical value or not",
        "output": "",
        "rule": [
            "d19568"
        ]
    },
    {
        "instruction": "",
        "id": "q19569",
        "input": "check if whitespace exists python",
        "output": "",
        "rule": [
            "d19569"
        ]
    },
    {
        "instruction": "",
        "id": "q19570",
        "input": "how to check if a variable is integer using type in python",
        "output": "",
        "rule": [
            "d19570"
        ]
    },
    {
        "instruction": "",
        "id": "q19571",
        "input": "how to make column right margin in python",
        "output": "",
        "rule": [
            "d19571"
        ]
    },
    {
        "instruction": "",
        "id": "q19572",
        "input": "how to check empty file in python",
        "output": "",
        "rule": [
            "d19572"
        ]
    },
    {
        "instruction": "",
        "id": "q19573",
        "input": "python value is not numeric",
        "output": "",
        "rule": [
            "d19573"
        ]
    },
    {
        "instruction": "",
        "id": "q19574",
        "input": "evaluating if two strings are equal python",
        "output": "",
        "rule": [
            "d19574"
        ]
    },
    {
        "instruction": "",
        "id": "q19575",
        "input": "python how to check if an absolute path or relative path",
        "output": "",
        "rule": [
            "d19575"
        ]
    },
    {
        "instruction": "",
        "id": "q19576",
        "input": "python dictionary get top 10 values",
        "output": "",
        "rule": [
            "d19576"
        ]
    },
    {
        "instruction": "",
        "id": "q19577",
        "input": "how to tell python to print something x number of times",
        "output": "",
        "rule": [
            "d19577"
        ]
    },
    {
        "instruction": "",
        "id": "q19578",
        "input": "python create dict keys from list",
        "output": "",
        "rule": [
            "d19578"
        ]
    },
    {
        "instruction": "",
        "id": "q19579",
        "input": "how to check image size using size in python",
        "output": "",
        "rule": [
            "d19579"
        ]
    },
    {
        "instruction": "",
        "id": "q19580",
        "input": "python assert to compare values",
        "output": "",
        "rule": [
            "d19580"
        ]
    },
    {
        "instruction": "",
        "id": "q19581",
        "input": "printing concatanated strigns python",
        "output": "",
        "rule": [
            "d19581"
        ]
    },
    {
        "instruction": "",
        "id": "q19582",
        "input": "python unpack bac char in struct format",
        "output": "",
        "rule": [
            "d19582"
        ]
    },
    {
        "instruction": "",
        "id": "q19583",
        "input": "python pad string with zeros left",
        "output": "",
        "rule": [
            "d19583"
        ]
    },
    {
        "instruction": "",
        "id": "q19584",
        "input": "python check if file exists and is file",
        "output": "",
        "rule": [
            "d19584"
        ]
    },
    {
        "instruction": "",
        "id": "q19585",
        "input": "calculating the midpoint between 2 data points in python",
        "output": "",
        "rule": [
            "d19585"
        ]
    },
    {
        "instruction": "",
        "id": "q19586",
        "input": "python open any file encoding",
        "output": "",
        "rule": [
            "d19586"
        ]
    },
    {
        "instruction": "",
        "id": "q19587",
        "input": "python get all dict keys filter by value",
        "output": "",
        "rule": [
            "d19587"
        ]
    },
    {
        "instruction": "",
        "id": "q19588",
        "input": "python limiting memory usage",
        "output": "",
        "rule": [
            "d19588"
        ]
    },
    {
        "instruction": "",
        "id": "q19589",
        "input": "python longest path algorithm",
        "output": "",
        "rule": [
            "d19589"
        ]
    },
    {
        "instruction": "",
        "id": "q19590",
        "input": "do uppercase matter python",
        "output": "",
        "rule": [
            "d19590"
        ]
    },
    {
        "instruction": "",
        "id": "q19591",
        "input": "python , how to read 40 bytes from bytes array",
        "output": "",
        "rule": [
            "d19591"
        ]
    },
    {
        "instruction": "",
        "id": "q19592",
        "input": "python code to covert matrix to tensorflow object",
        "output": "",
        "rule": [
            "d19592"
        ]
    },
    {
        "instruction": "",
        "id": "q19593",
        "input": "python snake or camel case",
        "output": "",
        "rule": [
            "d19593"
        ]
    },
    {
        "instruction": "",
        "id": "q19594",
        "input": "python test whether file is empty",
        "output": "",
        "rule": [
            "d19594"
        ]
    },
    {
        "instruction": "",
        "id": "q19595",
        "input": "python filter map on key values",
        "output": "",
        "rule": [
            "d19595"
        ]
    },
    {
        "instruction": "",
        "id": "q19596",
        "input": "request python post api",
        "output": "",
        "rule": [
            "d19596"
        ]
    },
    {
        "instruction": "",
        "id": "q19597",
        "input": "opengl with python 2d",
        "output": "",
        "rule": [
            "d19597"
        ]
    },
    {
        "instruction": "",
        "id": "q19598",
        "input": "how to turn js array into python list",
        "output": "",
        "rule": [
            "d19598"
        ]
    },
    {
        "instruction": "",
        "id": "q19599",
        "input": "python text to bool",
        "output": "",
        "rule": [
            "d19599"
        ]
    },
    {
        "instruction": "",
        "id": "q19600",
        "input": "python call callback async",
        "output": "",
        "rule": [
            "d19600"
        ]
    },
    {
        "instruction": "",
        "id": "q19601",
        "input": "how to tell if a set is empty in python",
        "output": "",
        "rule": [
            "d19601"
        ]
    },
    {
        "instruction": "",
        "id": "q19602",
        "input": "python test if environment var is undefined or empty",
        "output": "",
        "rule": [
            "d19602"
        ]
    },
    {
        "instruction": "",
        "id": "q19603",
        "input": "python isnan how to check if an entire column is nan",
        "output": "",
        "rule": [
            "d19603"
        ]
    },
    {
        "instruction": "",
        "id": "q19604",
        "input": "python 2 pyodbc executemany",
        "output": "",
        "rule": [
            "d19604"
        ]
    },
    {
        "instruction": "",
        "id": "q19605",
        "input": "python check if a variable is iterable",
        "output": "",
        "rule": [
            "d19605"
        ]
    },
    {
        "instruction": "",
        "id": "q19606",
        "input": "how to prevent a file from modifying python",
        "output": "",
        "rule": [
            "d19606"
        ]
    },
    {
        "instruction": "",
        "id": "q19607",
        "input": "how to make functions that returns a function python",
        "output": "",
        "rule": [
            "d19607"
        ]
    },
    {
        "instruction": "",
        "id": "q19608",
        "input": "how to print without moving cursor python",
        "output": "",
        "rule": [
            "d19608"
        ]
    },
    {
        "instruction": "",
        "id": "q19609",
        "input": "calculate an average in python using the count of an array",
        "output": "",
        "rule": [
            "d19609"
        ]
    },
    {
        "instruction": "",
        "id": "q19610",
        "input": "how to make a 2d array with booleans in python",
        "output": "",
        "rule": [
            "d19610"
        ]
    },
    {
        "instruction": "",
        "id": "q19611",
        "input": "check if a variable is an array python",
        "output": "",
        "rule": [
            "d19611"
        ]
    },
    {
        "instruction": "",
        "id": "q19612",
        "input": "python 3 remove directory recursively",
        "output": "",
        "rule": [
            "d19612"
        ]
    },
    {
        "instruction": "",
        "id": "q19613",
        "input": "x limit and y limit in python",
        "output": "",
        "rule": [
            "d19613"
        ]
    },
    {
        "instruction": "",
        "id": "q19614",
        "input": "python string formatting in list",
        "output": "",
        "rule": [
            "d19614"
        ]
    },
    {
        "instruction": "",
        "id": "q19615",
        "input": "get distinct in list python",
        "output": "",
        "rule": [
            "d19615"
        ]
    },
    {
        "instruction": "",
        "id": "q19616",
        "input": "python read dot file",
        "output": "",
        "rule": [
            "d19616"
        ]
    },
    {
        "instruction": "",
        "id": "q19617",
        "input": "traverse all but the last item in a list in python",
        "output": "",
        "rule": [
            "d19617"
        ]
    },
    {
        "instruction": "",
        "id": "q19618",
        "input": "python buffer is smaller than requested size",
        "output": "",
        "rule": [
            "d19618"
        ]
    },
    {
        "instruction": "",
        "id": "q19619",
        "input": "how to read file from aws s3 using python s3fs",
        "output": "",
        "rule": [
            "d19619"
        ]
    },
    {
        "instruction": "",
        "id": "q19620",
        "input": "python wrapper function for a method",
        "output": "",
        "rule": [
            "d19620"
        ]
    },
    {
        "instruction": "",
        "id": "q19621",
        "input": "how to check value is int or float python",
        "output": "",
        "rule": [
            "d19621"
        ]
    },
    {
        "instruction": "",
        "id": "q19622",
        "input": "how to join two data frames python",
        "output": "",
        "rule": [
            "d19622"
        ]
    },
    {
        "instruction": "",
        "id": "q19623",
        "input": "how to execute a parser script in python",
        "output": "",
        "rule": [
            "d19623"
        ]
    },
    {
        "instruction": "",
        "id": "q19624",
        "input": "python add default value",
        "output": "",
        "rule": [
            "d19624"
        ]
    },
    {
        "instruction": "",
        "id": "q19625",
        "input": "how to remove empty elements in a list python",
        "output": "",
        "rule": [
            "d19625"
        ]
    },
    {
        "instruction": "",
        "id": "q19626",
        "input": "validating an input is an integer python",
        "output": "",
        "rule": [
            "d19626"
        ]
    },
    {
        "instruction": "",
        "id": "q19627",
        "input": "how to detect if list in python has no elements",
        "output": "",
        "rule": [
            "d19627"
        ]
    },
    {
        "instruction": "",
        "id": "q19628",
        "input": "how to move cursor to the next line in python",
        "output": "",
        "rule": [
            "d19628"
        ]
    },
    {
        "instruction": "",
        "id": "q19629",
        "input": "definition python nonetype to int",
        "output": "",
        "rule": [
            "d19629"
        ]
    },
    {
        "instruction": "",
        "id": "q19630",
        "input": "how to truncate to two decimals in python",
        "output": "",
        "rule": [
            "d19630"
        ]
    },
    {
        "instruction": "",
        "id": "q19631",
        "input": "python enable executable permisions on file",
        "output": "",
        "rule": [
            "d19631"
        ]
    },
    {
        "instruction": "",
        "id": "q19632",
        "input": "how to calculate manhattan distance in python",
        "output": "",
        "rule": [
            "d19632"
        ]
    },
    {
        "instruction": "",
        "id": "q19633",
        "input": "python longest directed path",
        "output": "",
        "rule": [
            "d19633"
        ]
    },
    {
        "instruction": "",
        "id": "q19634",
        "input": "how to tell what you python path is",
        "output": "",
        "rule": [
            "d19634"
        ]
    },
    {
        "instruction": "",
        "id": "q19635",
        "input": "bin data into integers python",
        "output": "",
        "rule": [
            "d19635"
        ]
    },
    {
        "instruction": "",
        "id": "q19636",
        "input": "how do i cut off leading zeroes in python",
        "output": "",
        "rule": [
            "d19636"
        ]
    },
    {
        "instruction": "",
        "id": "q19637",
        "input": "accesing elements in a heap in python",
        "output": "",
        "rule": [
            "d19637"
        ]
    },
    {
        "instruction": "",
        "id": "q19638",
        "input": "auto crop particular object from image in python",
        "output": "",
        "rule": [
            "d19638"
        ]
    },
    {
        "instruction": "",
        "id": "q19639",
        "input": "bi linear interpolation in python",
        "output": "",
        "rule": [
            "d19639"
        ]
    },
    {
        "instruction": "",
        "id": "q19640",
        "input": "python check for all numeric types",
        "output": "",
        "rule": [
            "d19640"
        ]
    },
    {
        "instruction": "",
        "id": "q19641",
        "input": "join list of strings with character python",
        "output": "",
        "rule": [
            "d19641"
        ]
    },
    {
        "instruction": "",
        "id": "q19642",
        "input": "how to use chain with a json file python",
        "output": "",
        "rule": [
            "d19642"
        ]
    },
    {
        "instruction": "",
        "id": "q19643",
        "input": "validate credit card number in python using string input",
        "output": "",
        "rule": [
            "d19643"
        ]
    },
    {
        "instruction": "",
        "id": "q19644",
        "input": "cython python2 bool function",
        "output": "",
        "rule": [
            "d19644"
        ]
    },
    {
        "instruction": "",
        "id": "q19645",
        "input": "python list remove list indices must be",
        "output": "",
        "rule": [
            "d19645"
        ]
    },
    {
        "instruction": "",
        "id": "q19646",
        "input": "how to eliminate instances in python",
        "output": "",
        "rule": [
            "d19646"
        ]
    },
    {
        "instruction": "",
        "id": "q19647",
        "input": "calculate standard deviation using python",
        "output": "",
        "rule": [
            "d19647"
        ]
    },
    {
        "instruction": "",
        "id": "q19648",
        "input": "intialize a list with size and 0 python",
        "output": "",
        "rule": [
            "d19648"
        ]
    },
    {
        "instruction": "",
        "id": "q19649",
        "input": "instagram login python requests",
        "output": "",
        "rule": [
            "d19649"
        ]
    },
    {
        "instruction": "",
        "id": "q19650",
        "input": "python image detect shape",
        "output": "",
        "rule": [
            "d19650"
        ]
    },
    {
        "instruction": "",
        "id": "q19651",
        "input": "how to rotate an array 90 degrees in python",
        "output": "",
        "rule": [
            "d19651"
        ]
    },
    {
        "instruction": "",
        "id": "q19652",
        "input": "python flask deployment static path",
        "output": "",
        "rule": [
            "d19652"
        ]
    },
    {
        "instruction": "",
        "id": "q19653",
        "input": "python 'worksheet' object is not callable",
        "output": "",
        "rule": [
            "d19653"
        ]
    },
    {
        "instruction": "",
        "id": "q19654",
        "input": "how to covert a data set to series in python",
        "output": "",
        "rule": [
            "d19654"
        ]
    },
    {
        "instruction": "",
        "id": "q19655",
        "input": "python dataset get first 50 rows",
        "output": "",
        "rule": [
            "d19655"
        ]
    },
    {
        "instruction": "",
        "id": "q19656",
        "input": "how to check in python if token is person or not",
        "output": "",
        "rule": [
            "d19656"
        ]
    },
    {
        "instruction": "",
        "id": "q19657",
        "input": "number of standard deviations python from a fit",
        "output": "",
        "rule": [
            "d19657"
        ]
    },
    {
        "instruction": "",
        "id": "q19658",
        "input": "python cgi form get value",
        "output": "",
        "rule": [
            "d19658"
        ]
    },
    {
        "instruction": "",
        "id": "q19659",
        "input": "python receive **kwargs pass on **kwargs",
        "output": "",
        "rule": [
            "d19659"
        ]
    },
    {
        "instruction": "",
        "id": "q19660",
        "input": "python white space check",
        "output": "",
        "rule": [
            "d19660"
        ]
    },
    {
        "instruction": "",
        "id": "q19661",
        "input": "how to check for eof in python",
        "output": "",
        "rule": [
            "d19661"
        ]
    },
    {
        "instruction": "",
        "id": "q19662",
        "input": "how to clear python variables at begining of code",
        "output": "",
        "rule": [
            "d19662"
        ]
    },
    {
        "instruction": "",
        "id": "q19663",
        "input": "how to check if sql connection is open in python",
        "output": "",
        "rule": [
            "d19663"
        ]
    },
    {
        "instruction": "",
        "id": "q19664",
        "input": "select rows if a field is null in python",
        "output": "",
        "rule": [
            "d19664"
        ]
    },
    {
        "instruction": "",
        "id": "q19665",
        "input": "plot remove axis python",
        "output": "",
        "rule": [
            "d19665"
        ]
    },
    {
        "instruction": "",
        "id": "q19666",
        "input": "python check is object is defined",
        "output": "",
        "rule": [
            "d19666"
        ]
    },
    {
        "instruction": "",
        "id": "q19667",
        "input": "python remove characters from query",
        "output": "",
        "rule": [
            "d19667"
        ]
    },
    {
        "instruction": "",
        "id": "q19668",
        "input": "python, get timezone info in python",
        "output": "",
        "rule": [
            "d19668"
        ]
    },
    {
        "instruction": "",
        "id": "q19669",
        "input": "python how to replace a string with underscores",
        "output": "",
        "rule": [
            "d19669"
        ]
    },
    {
        "instruction": "",
        "id": "q19670",
        "input": "code to take the transpose of a matrix in python",
        "output": "",
        "rule": [
            "d19670"
        ]
    },
    {
        "instruction": "",
        "id": "q19671",
        "input": "python check if two images are the same",
        "output": "",
        "rule": [
            "d19671"
        ]
    },
    {
        "instruction": "",
        "id": "q19672",
        "input": "is string python conditional",
        "output": "",
        "rule": [
            "d19672"
        ]
    },
    {
        "instruction": "",
        "id": "q19673",
        "input": "python function to remove headers",
        "output": "",
        "rule": [
            "d19673"
        ]
    },
    {
        "instruction": "",
        "id": "q19674",
        "input": "python custom type from list comprehension",
        "output": "",
        "rule": [
            "d19674"
        ]
    },
    {
        "instruction": "",
        "id": "q19675",
        "input": "returns random number in standardn normal distribution python",
        "output": "",
        "rule": [
            "d19675"
        ]
    },
    {
        "instruction": "",
        "id": "q19676",
        "input": "record training time python",
        "output": "",
        "rule": [
            "d19676"
        ]
    },
    {
        "instruction": "",
        "id": "q19677",
        "input": "python how to get stem of filename",
        "output": "",
        "rule": [
            "d19677"
        ]
    },
    {
        "instruction": "",
        "id": "q19678",
        "input": "python direct all print output to log file",
        "output": "",
        "rule": [
            "d19678"
        ]
    },
    {
        "instruction": "",
        "id": "q19679",
        "input": "how to get contents fromtext file python",
        "output": "",
        "rule": [
            "d19679"
        ]
    },
    {
        "instruction": "",
        "id": "q19680",
        "input": "how to remove the duplicates in list in python",
        "output": "",
        "rule": [
            "d19680"
        ]
    },
    {
        "instruction": "",
        "id": "q19681",
        "input": "how to conduct a delaunay triangulation python",
        "output": "",
        "rule": [
            "d19681"
        ]
    },
    {
        "instruction": "",
        "id": "q19682",
        "input": "python how to check dtype",
        "output": "",
        "rule": [
            "d19682"
        ]
    },
    {
        "instruction": "",
        "id": "q19683",
        "input": "cast object of type bytes to string python",
        "output": "",
        "rule": [
            "d19683"
        ]
    },
    {
        "instruction": "",
        "id": "q19684",
        "input": "python remove repeated elements in list",
        "output": "",
        "rule": [
            "d19684"
        ]
    },
    {
        "instruction": "",
        "id": "q19685",
        "input": "python smooth an array",
        "output": "",
        "rule": [
            "d19685"
        ]
    },
    {
        "instruction": "",
        "id": "q19686",
        "input": "python dictionary get case insensistive key",
        "output": "",
        "rule": [
            "d19686"
        ]
    },
    {
        "instruction": "",
        "id": "q19687",
        "input": "key in sorted function python",
        "output": "",
        "rule": [
            "d19687"
        ]
    },
    {
        "instruction": "",
        "id": "q19688",
        "input": "indexes of sorted list python",
        "output": "",
        "rule": [
            "d19688"
        ]
    },
    {
        "instruction": "",
        "id": "q19689",
        "input": "using color in python printouts",
        "output": "",
        "rule": [
            "d19689"
        ]
    },
    {
        "instruction": "",
        "id": "q19690",
        "input": "how to check 2 strings are the same in python",
        "output": "",
        "rule": [
            "d19690"
        ]
    },
    {
        "instruction": "",
        "id": "q19691",
        "input": "python check that can open file",
        "output": "",
        "rule": [
            "d19691"
        ]
    },
    {
        "instruction": "",
        "id": "q19692",
        "input": "python calculate log likelihood normal distributino",
        "output": "",
        "rule": [
            "d19692"
        ]
    },
    {
        "instruction": "",
        "id": "q19693",
        "input": "python make directory exists",
        "output": "",
        "rule": [
            "d19693"
        ]
    },
    {
        "instruction": "",
        "id": "q19694",
        "input": "python redirect stdout on screen and to file",
        "output": "",
        "rule": [
            "d19694"
        ]
    },
    {
        "instruction": "",
        "id": "q19695",
        "input": "python closing db connection",
        "output": "",
        "rule": [
            "d19695"
        ]
    },
    {
        "instruction": "",
        "id": "q19696",
        "input": "python request cookie get",
        "output": "",
        "rule": [
            "d19696"
        ]
    },
    {
        "instruction": "",
        "id": "q19697",
        "input": "delete empty elements in list python3",
        "output": "",
        "rule": [
            "d19697"
        ]
    },
    {
        "instruction": "",
        "id": "q19698",
        "input": "python how to dump to json file",
        "output": "",
        "rule": [
            "d19698"
        ]
    },
    {
        "instruction": "",
        "id": "q19699",
        "input": "python redirect stdout to 2 places",
        "output": "",
        "rule": [
            "d19699"
        ]
    },
    {
        "instruction": "",
        "id": "q19700",
        "input": "python 2to3 whole directory",
        "output": "",
        "rule": [
            "d19700"
        ]
    },
    {
        "instruction": "",
        "id": "q19701",
        "input": "python how to skip subsequent lines",
        "output": "",
        "rule": [
            "d19701"
        ]
    },
    {
        "instruction": "",
        "id": "q19702",
        "input": "python get git branch name",
        "output": "",
        "rule": [
            "d19702"
        ]
    },
    {
        "instruction": "",
        "id": "q19703",
        "input": "python how to check if email and password exist",
        "output": "",
        "rule": [
            "d19703"
        ]
    },
    {
        "instruction": "",
        "id": "q19704",
        "input": "get the date from a string python",
        "output": "",
        "rule": [
            "d19704"
        ]
    },
    {
        "instruction": "",
        "id": "q19705",
        "input": "python get index of lowest value in list",
        "output": "",
        "rule": [
            "d19705"
        ]
    },
    {
        "instruction": "",
        "id": "q19706",
        "input": "python write lines on new line next",
        "output": "",
        "rule": [
            "d19706"
        ]
    },
    {
        "instruction": "",
        "id": "q19707",
        "input": "int to bool in python",
        "output": "",
        "rule": [
            "d19707"
        ]
    },
    {
        "instruction": "",
        "id": "q19708",
        "input": "python numpy array how to return rows not include nan",
        "output": "",
        "rule": [
            "d19708"
        ]
    },
    {
        "instruction": "",
        "id": "q19709",
        "input": "comparing sets python with boolean and set",
        "output": "",
        "rule": [
            "d19709"
        ]
    },
    {
        "instruction": "",
        "id": "q19710",
        "input": "python cast string to custom type",
        "output": "",
        "rule": [
            "d19710"
        ]
    },
    {
        "instruction": "",
        "id": "q19711",
        "input": "filter a dictionary in python and only return the key",
        "output": "",
        "rule": [
            "d19711"
        ]
    },
    {
        "instruction": "",
        "id": "q19712",
        "input": "datetime to epoch python2",
        "output": "",
        "rule": [
            "d19712"
        ]
    },
    {
        "instruction": "",
        "id": "q19713",
        "input": "python how to remove extra spaces in a string",
        "output": "",
        "rule": [
            "d19713"
        ]
    },
    {
        "instruction": "",
        "id": "q19714",
        "input": "running python on your webserver",
        "output": "",
        "rule": [
            "d19714"
        ]
    },
    {
        "instruction": "",
        "id": "q19715",
        "input": "python check if date is valid",
        "output": "",
        "rule": [
            "d19715"
        ]
    },
    {
        "instruction": "",
        "id": "q19716",
        "input": "python milliseconds delta time to float",
        "output": "",
        "rule": [
            "d19716"
        ]
    },
    {
        "instruction": "",
        "id": "q19717",
        "input": "python reusing an iterator",
        "output": "",
        "rule": [
            "d19717"
        ]
    },
    {
        "instruction": "",
        "id": "q19718",
        "input": "finding the median in python 3",
        "output": "",
        "rule": [
            "d19718"
        ]
    },
    {
        "instruction": "",
        "id": "q19719",
        "input": "how to delete the element in list at a particular index in python",
        "output": "",
        "rule": [
            "d19719"
        ]
    },
    {
        "instruction": "",
        "id": "q19720",
        "input": "how to test if two files are the same in python",
        "output": "",
        "rule": [
            "d19720"
        ]
    },
    {
        "instruction": "",
        "id": "q19721",
        "input": "add a header to a csv in python",
        "output": "",
        "rule": [
            "d19721"
        ]
    },
    {
        "instruction": "",
        "id": "q19722",
        "input": "python delete logfile still in use",
        "output": "",
        "rule": [
            "d19722"
        ]
    },
    {
        "instruction": "",
        "id": "q19723",
        "input": "truncate a number after certain amount of decimals in python",
        "output": "",
        "rule": [
            "d19723"
        ]
    },
    {
        "instruction": "",
        "id": "q19724",
        "input": "join list of empty strings and strings python",
        "output": "",
        "rule": [
            "d19724"
        ]
    },
    {
        "instruction": "",
        "id": "q19725",
        "input": "how to make upper and lower case string the same in python",
        "output": "",
        "rule": [
            "d19725"
        ]
    },
    {
        "instruction": "",
        "id": "q19726",
        "input": "python count whitespace characters",
        "output": "",
        "rule": [
            "d19726"
        ]
    },
    {
        "instruction": "",
        "id": "q19727",
        "input": "does cos and sin in python use degrees or radians",
        "output": "",
        "rule": [
            "d19727"
        ]
    },
    {
        "instruction": "",
        "id": "q19728",
        "input": "python add to two values",
        "output": "",
        "rule": [
            "d19728"
        ]
    },
    {
        "instruction": "",
        "id": "q19729",
        "input": "create conda environment for python 2",
        "output": "",
        "rule": [
            "d19729"
        ]
    },
    {
        "instruction": "",
        "id": "q19730",
        "input": "python check two image same",
        "output": "",
        "rule": [
            "d19730"
        ]
    },
    {
        "instruction": "",
        "id": "q19731",
        "input": "python prettyprint object with str",
        "output": "",
        "rule": [
            "d19731"
        ]
    },
    {
        "instruction": "",
        "id": "q19732",
        "input": "python ndarray fast iterate",
        "output": "",
        "rule": [
            "d19732"
        ]
    },
    {
        "instruction": "",
        "id": "q19733",
        "input": "python2 get value from dict with default value",
        "output": "",
        "rule": [
            "d19733"
        ]
    },
    {
        "instruction": "",
        "id": "q19734",
        "input": "python iterator of a dictionary",
        "output": "",
        "rule": [
            "d19734"
        ]
    },
    {
        "instruction": "",
        "id": "q19735",
        "input": "how to load a string file in python",
        "output": "",
        "rule": [
            "d19735"
        ]
    },
    {
        "instruction": "",
        "id": "q19736",
        "input": "split on multiple tokens python split",
        "output": "",
        "rule": [
            "d19736"
        ]
    },
    {
        "instruction": "",
        "id": "q19737",
        "input": "generate white noise in python",
        "output": "",
        "rule": [
            "d19737"
        ]
    },
    {
        "instruction": "",
        "id": "q19738",
        "input": "connect to python ftp server host",
        "output": "",
        "rule": [
            "d19738"
        ]
    },
    {
        "instruction": "",
        "id": "q19739",
        "input": "extract number of channels in an image python",
        "output": "",
        "rule": [
            "d19739"
        ]
    },
    {
        "instruction": "",
        "id": "q19740",
        "input": "how to create a sort key in python",
        "output": "",
        "rule": [
            "d19740"
        ]
    },
    {
        "instruction": "",
        "id": "q19741",
        "input": "calculate mid points between numbers python",
        "output": "",
        "rule": [
            "d19741"
        ]
    },
    {
        "instruction": "",
        "id": "q19742",
        "input": "call a list of dictinaries data from ajax in python flask",
        "output": "",
        "rule": [
            "d19742"
        ]
    },
    {
        "instruction": "",
        "id": "q19743",
        "input": "python function compare length of 2 strings",
        "output": "",
        "rule": [
            "d19743"
        ]
    },
    {
        "instruction": "",
        "id": "q19744",
        "input": "protobuf python dictionary f dictionary",
        "output": "",
        "rule": [
            "d19744"
        ]
    },
    {
        "instruction": "",
        "id": "q19745",
        "input": "python get sort index numpy array",
        "output": "",
        "rule": [
            "d19745"
        ]
    },
    {
        "instruction": "",
        "id": "q19746",
        "input": "python how to lemmatizer",
        "output": "",
        "rule": [
            "d19746"
        ]
    },
    {
        "instruction": "",
        "id": "q19747",
        "input": "python histogram get number of bins",
        "output": "",
        "rule": [
            "d19747"
        ]
    },
    {
        "instruction": "",
        "id": "q19748",
        "input": "check if array contains integer python",
        "output": "",
        "rule": [
            "d19748"
        ]
    },
    {
        "instruction": "",
        "id": "q19749",
        "input": "best way to get key against a value from python dictionary",
        "output": "",
        "rule": [
            "d19749"
        ]
    },
    {
        "instruction": "",
        "id": "q19750",
        "input": "python datetime to microseconds since epoch",
        "output": "",
        "rule": [
            "d19750"
        ]
    },
    {
        "instruction": "",
        "id": "q19751",
        "input": "how to know the proxies in a browser python",
        "output": "",
        "rule": [
            "d19751"
        ]
    },
    {
        "instruction": "",
        "id": "q19752",
        "input": "how to execute async in python",
        "output": "",
        "rule": [
            "d19752"
        ]
    },
    {
        "instruction": "",
        "id": "q19753",
        "input": "cross validation python without sklearn",
        "output": "",
        "rule": [
            "d19753"
        ]
    },
    {
        "instruction": "",
        "id": "q19754",
        "input": "remove zeros from a list in python",
        "output": "",
        "rule": [
            "d19754"
        ]
    },
    {
        "instruction": "",
        "id": "q19755",
        "input": "python grab every n elements",
        "output": "",
        "rule": [
            "d19755"
        ]
    },
    {
        "instruction": "",
        "id": "q19756",
        "input": "how to do dot product vectors in python",
        "output": "",
        "rule": [
            "d19756"
        ]
    },
    {
        "instruction": "",
        "id": "q19757",
        "input": "python garbage collector how to delete unnecessary",
        "output": "",
        "rule": [
            "d19757"
        ]
    },
    {
        "instruction": "",
        "id": "q19758",
        "input": "python check if row contains none",
        "output": "",
        "rule": [
            "d19758"
        ]
    },
    {
        "instruction": "",
        "id": "q19759",
        "input": "how to remove border in image in python",
        "output": "",
        "rule": [
            "d19759"
        ]
    },
    {
        "instruction": "",
        "id": "q19760",
        "input": "python regex substitute from dictionary",
        "output": "",
        "rule": [
            "d19760"
        ]
    },
    {
        "instruction": "",
        "id": "q19761",
        "input": "python change directory decorate",
        "output": "",
        "rule": [
            "d19761"
        ]
    },
    {
        "instruction": "",
        "id": "q19762",
        "input": "python register a service",
        "output": "",
        "rule": [
            "d19762"
        ]
    },
    {
        "instruction": "",
        "id": "q19763",
        "input": "how to make a str all lowercasein python",
        "output": "",
        "rule": [
            "d19763"
        ]
    },
    {
        "instruction": "",
        "id": "q19764",
        "input": "python 3 slice function",
        "output": "",
        "rule": [
            "d19764"
        ]
    },
    {
        "instruction": "",
        "id": "q19765",
        "input": "apply a list of functions python",
        "output": "",
        "rule": [
            "d19765"
        ]
    },
    {
        "instruction": "",
        "id": "q19766",
        "input": "how to add size on the python",
        "output": "",
        "rule": [
            "d19766"
        ]
    },
    {
        "instruction": "",
        "id": "q19767",
        "input": "how to clear a frame in python",
        "output": "",
        "rule": [
            "d19767"
        ]
    },
    {
        "instruction": "",
        "id": "q19768",
        "input": "python not (condition1 and condition2)",
        "output": "",
        "rule": [
            "d19768"
        ]
    },
    {
        "instruction": "",
        "id": "q19769",
        "input": "python check valid attribute names",
        "output": "",
        "rule": [
            "d19769"
        ]
    },
    {
        "instruction": "",
        "id": "q19770",
        "input": "python get the date of creation of file",
        "output": "",
        "rule": [
            "d19770"
        ]
    },
    {
        "instruction": "",
        "id": "q19771",
        "input": "make values as strings in a list in python",
        "output": "",
        "rule": [
            "d19771"
        ]
    },
    {
        "instruction": "",
        "id": "q19772",
        "input": "how to check if memory leak in python program",
        "output": "",
        "rule": [
            "d19772"
        ]
    },
    {
        "instruction": "",
        "id": "q19773",
        "input": "python assert data type check if array type",
        "output": "",
        "rule": [
            "d19773"
        ]
    },
    {
        "instruction": "",
        "id": "q19774",
        "input": "how to check column value is null python",
        "output": "",
        "rule": [
            "d19774"
        ]
    },
    {
        "instruction": "",
        "id": "q19775",
        "input": "python sql server query date to datetime object",
        "output": "",
        "rule": [
            "d19775"
        ]
    },
    {
        "instruction": "",
        "id": "q19776",
        "input": "python json print tree",
        "output": "",
        "rule": [
            "d19776"
        ]
    },
    {
        "instruction": "",
        "id": "q19777",
        "input": "how to give x axis limits in python plot",
        "output": "",
        "rule": [
            "d19777"
        ]
    },
    {
        "instruction": "",
        "id": "q19778",
        "input": "compute l2 norm in python",
        "output": "",
        "rule": [
            "d19778"
        ]
    },
    {
        "instruction": "",
        "id": "q19779",
        "input": "how to log a variable without knowing its type in python",
        "output": "",
        "rule": [
            "d19779"
        ]
    },
    {
        "instruction": "",
        "id": "q19780",
        "input": "python map, delete key",
        "output": "",
        "rule": [
            "d19780"
        ]
    },
    {
        "instruction": "",
        "id": "q19781",
        "input": "dictionarry type from python to c++",
        "output": "",
        "rule": [
            "d19781"
        ]
    },
    {
        "instruction": "",
        "id": "q19782",
        "input": "axes3d view setting python 3",
        "output": "",
        "rule": [
            "d19782"
        ]
    },
    {
        "instruction": "",
        "id": "q19783",
        "input": "python get month start and end date by month and year",
        "output": "",
        "rule": [
            "d19783"
        ]
    },
    {
        "instruction": "",
        "id": "q19784",
        "input": "python set that can take repeats",
        "output": "",
        "rule": [
            "d19784"
        ]
    },
    {
        "instruction": "",
        "id": "q19785",
        "input": "python flask request get form name",
        "output": "",
        "rule": [
            "d19785"
        ]
    },
    {
        "instruction": "",
        "id": "q19786",
        "input": "python for comprehension sum",
        "output": "",
        "rule": [
            "d19786"
        ]
    },
    {
        "instruction": "",
        "id": "q19787",
        "input": "python draw image frombyte array",
        "output": "",
        "rule": [
            "d19787"
        ]
    },
    {
        "instruction": "",
        "id": "q19788",
        "input": "python get file last modified time datetime",
        "output": "",
        "rule": [
            "d19788"
        ]
    },
    {
        "instruction": "",
        "id": "q19789",
        "input": "python first line from file",
        "output": "",
        "rule": [
            "d19789"
        ]
    },
    {
        "instruction": "",
        "id": "q19790",
        "input": "python break list into batches of 50",
        "output": "",
        "rule": [
            "d19790"
        ]
    },
    {
        "instruction": "",
        "id": "q19791",
        "input": "how to see all python versions",
        "output": "",
        "rule": [
            "d19791"
        ]
    },
    {
        "instruction": "",
        "id": "q19792",
        "input": "how to sort a list in alphabetic order python",
        "output": "",
        "rule": [
            "d19792"
        ]
    },
    {
        "instruction": "",
        "id": "q19793",
        "input": "python test path exists",
        "output": "",
        "rule": [
            "d19793"
        ]
    },
    {
        "instruction": "",
        "id": "q19794",
        "input": "python check if object has attribute and if it is not none",
        "output": "",
        "rule": [
            "d19794"
        ]
    },
    {
        "instruction": "",
        "id": "q19795",
        "input": "changing from list to string in python",
        "output": "",
        "rule": [
            "d19795"
        ]
    },
    {
        "instruction": "",
        "id": "q19796",
        "input": "easy way to check is a boolean has changed in python",
        "output": "",
        "rule": [
            "d19796"
        ]
    },
    {
        "instruction": "",
        "id": "q19797",
        "input": "get result from cursor python",
        "output": "",
        "rule": [
            "d19797"
        ]
    },
    {
        "instruction": "",
        "id": "q19798",
        "input": "python get current loggers",
        "output": "",
        "rule": [
            "d19798"
        ]
    },
    {
        "instruction": "",
        "id": "q19799",
        "input": "python parse date strptime day of month no padd",
        "output": "",
        "rule": [
            "d19799"
        ]
    },
    {
        "instruction": "",
        "id": "q19800",
        "input": "how to return the type of an object in python",
        "output": "",
        "rule": [
            "d19800"
        ]
    },
    {
        "instruction": "",
        "id": "q19801",
        "input": "how to get the first and last index of element in list python",
        "output": "",
        "rule": [
            "d19801"
        ]
    },
    {
        "instruction": "",
        "id": "q19802",
        "input": "how to get a document in a collection using mongoengine api server in python",
        "output": "",
        "rule": [
            "d19802"
        ]
    },
    {
        "instruction": "",
        "id": "q19803",
        "input": "doctype html parse python",
        "output": "",
        "rule": [
            "d19803"
        ]
    },
    {
        "instruction": "",
        "id": "q19804",
        "input": "python full screen adjust to the screen",
        "output": "",
        "rule": [
            "d19804"
        ]
    },
    {
        "instruction": "",
        "id": "q19805",
        "input": "how to set default values in dict python",
        "output": "",
        "rule": [
            "d19805"
        ]
    },
    {
        "instruction": "",
        "id": "q19806",
        "input": "image segmentation kmeans python",
        "output": "",
        "rule": [
            "d19806"
        ]
    },
    {
        "instruction": "",
        "id": "q19807",
        "input": "test for empty python dictionary",
        "output": "",
        "rule": [
            "d19807"
        ]
    },
    {
        "instruction": "",
        "id": "q19808",
        "input": "python logging rotating file handler by date",
        "output": "",
        "rule": [
            "d19808"
        ]
    },
    {
        "instruction": "",
        "id": "q19809",
        "input": "python get type of values in a columns",
        "output": "",
        "rule": [
            "d19809"
        ]
    },
    {
        "instruction": "",
        "id": "q19810",
        "input": "remove from index object in python",
        "output": "",
        "rule": [
            "d19810"
        ]
    },
    {
        "instruction": "",
        "id": "q19811",
        "input": "plot linear regression python on existing plot",
        "output": "",
        "rule": [
            "d19811"
        ]
    },
    {
        "instruction": "",
        "id": "q19812",
        "input": "python gzip decompress stream",
        "output": "",
        "rule": [
            "d19812"
        ]
    },
    {
        "instruction": "",
        "id": "q19813",
        "input": "python cut string by length",
        "output": "",
        "rule": [
            "d19813"
        ]
    },
    {
        "instruction": "",
        "id": "q19814",
        "input": "converter string to json python",
        "output": "",
        "rule": [
            "d19814"
        ]
    },
    {
        "instruction": "",
        "id": "q19815",
        "input": "python image margin padding",
        "output": "",
        "rule": [
            "d19815"
        ]
    },
    {
        "instruction": "",
        "id": "q19816",
        "input": "remove item from series python",
        "output": "",
        "rule": [
            "d19816"
        ]
    },
    {
        "instruction": "",
        "id": "q19817",
        "input": "check if address is valid python",
        "output": "",
        "rule": [
            "d19817"
        ]
    },
    {
        "instruction": "",
        "id": "q19818",
        "input": "replace multiple things in a string python",
        "output": "",
        "rule": [
            "d19818"
        ]
    },
    {
        "instruction": "",
        "id": "q19819",
        "input": "python logging format brace bracket",
        "output": "",
        "rule": [
            "d19819"
        ]
    },
    {
        "instruction": "",
        "id": "q19820",
        "input": "python strip new lines while reading file",
        "output": "",
        "rule": [
            "d19820"
        ]
    },
    {
        "instruction": "",
        "id": "q19821",
        "input": "how to determine the index of an object on a list python",
        "output": "",
        "rule": [
            "d19821"
        ]
    },
    {
        "instruction": "",
        "id": "q19822",
        "input": "how to remove repeated numbers in a list in python",
        "output": "",
        "rule": [
            "d19822"
        ]
    },
    {
        "instruction": "",
        "id": "q19823",
        "input": "reversing a dictionary in python",
        "output": "",
        "rule": [
            "d19823"
        ]
    },
    {
        "instruction": "",
        "id": "q19824",
        "input": "python disable output buffer",
        "output": "",
        "rule": [
            "d19824"
        ]
    },
    {
        "instruction": "",
        "id": "q19825",
        "input": "python get an unique id",
        "output": "",
        "rule": [
            "d19825"
        ]
    },
    {
        "instruction": "",
        "id": "q19826",
        "input": "python logging create blank line",
        "output": "",
        "rule": [
            "d19826"
        ]
    },
    {
        "instruction": "",
        "id": "q19827",
        "input": "check specific header in python",
        "output": "",
        "rule": [
            "d19827"
        ]
    },
    {
        "instruction": "",
        "id": "q19828",
        "input": "get common values in a dictionary python",
        "output": "",
        "rule": [
            "d19828"
        ]
    },
    {
        "instruction": "",
        "id": "q19829",
        "input": "python random permutation of a set",
        "output": "",
        "rule": [
            "d19829"
        ]
    },
    {
        "instruction": "",
        "id": "q19830",
        "input": "unhasable type list in python to replace with a hashable list",
        "output": "",
        "rule": [
            "d19830"
        ]
    },
    {
        "instruction": "",
        "id": "q19831",
        "input": "python get variable by name locals globals",
        "output": "",
        "rule": [
            "d19831"
        ]
    },
    {
        "instruction": "",
        "id": "q19832",
        "input": "python split string ever n characters",
        "output": "",
        "rule": [
            "d19832"
        ]
    },
    {
        "instruction": "",
        "id": "q19833",
        "input": "python logging set verbosity",
        "output": "",
        "rule": [
            "d19833"
        ]
    },
    {
        "instruction": "",
        "id": "q19834",
        "input": "set a pixel python",
        "output": "",
        "rule": [
            "d19834"
        ]
    },
    {
        "instruction": "",
        "id": "q19835",
        "input": "discover file extension python",
        "output": "",
        "rule": [
            "d19835"
        ]
    },
    {
        "instruction": "",
        "id": "q19836",
        "input": "python draw line in control",
        "output": "",
        "rule": [
            "d19836"
        ]
    },
    {
        "instruction": "",
        "id": "q19837",
        "input": "python check if a valid date",
        "output": "",
        "rule": [
            "d19837"
        ]
    },
    {
        "instruction": "",
        "id": "q19838",
        "input": "delete spaces and non number terms from a string python",
        "output": "",
        "rule": [
            "d19838"
        ]
    },
    {
        "instruction": "",
        "id": "q19839",
        "input": "python django foreach list to str with ,",
        "output": "",
        "rule": [
            "d19839"
        ]
    },
    {
        "instruction": "",
        "id": "q19840",
        "input": "python django postgres flow",
        "output": "",
        "rule": [
            "d19840"
        ]
    },
    {
        "instruction": "",
        "id": "q19841",
        "input": "how to filter an image using a mask in python",
        "output": "",
        "rule": [
            "d19841"
        ]
    },
    {
        "instruction": "",
        "id": "q19842",
        "input": "python longest consecutive ones group",
        "output": "",
        "rule": [
            "d19842"
        ]
    },
    {
        "instruction": "",
        "id": "q19843",
        "input": "python parsing yaml file",
        "output": "",
        "rule": [
            "d19843"
        ]
    },
    {
        "instruction": "",
        "id": "q19844",
        "input": "python get list of methods on object",
        "output": "",
        "rule": [
            "d19844"
        ]
    },
    {
        "instruction": "",
        "id": "q19845",
        "input": "how to covert a string column to a float in python",
        "output": "",
        "rule": [
            "d19845"
        ]
    },
    {
        "instruction": "",
        "id": "q19846",
        "input": "printing data type off all columns in data frame in python",
        "output": "",
        "rule": [
            "d19846"
        ]
    },
    {
        "instruction": "",
        "id": "q19847",
        "input": "multiply matrix with different constant in python",
        "output": "",
        "rule": [
            "d19847"
        ]
    },
    {
        "instruction": "",
        "id": "q19848",
        "input": "permutations in python with three arguements",
        "output": "",
        "rule": [
            "d19848"
        ]
    },
    {
        "instruction": "",
        "id": "q19849",
        "input": "type not equal to string python",
        "output": "",
        "rule": [
            "d19849"
        ]
    },
    {
        "instruction": "",
        "id": "q19850",
        "input": "how to modify print function in python",
        "output": "",
        "rule": [
            "d19850"
        ]
    },
    {
        "instruction": "",
        "id": "q19851",
        "input": "using dot file with python graphviz",
        "output": "",
        "rule": [
            "d19851"
        ]
    },
    {
        "instruction": "",
        "id": "q19852",
        "input": "python lamba filter with or",
        "output": "",
        "rule": [
            "d19852"
        ]
    },
    {
        "instruction": "",
        "id": "q19853",
        "input": "check index mongod python",
        "output": "",
        "rule": [
            "d19853"
        ]
    },
    {
        "instruction": "",
        "id": "q19854",
        "input": "how to load data from url with python",
        "output": "",
        "rule": [
            "d19854"
        ]
    },
    {
        "instruction": "",
        "id": "q19855",
        "input": "python check if field exists in sql table",
        "output": "",
        "rule": [
            "d19855"
        ]
    },
    {
        "instruction": "",
        "id": "q19856",
        "input": "matplotlib python remove ticks",
        "output": "",
        "rule": [
            "d19856"
        ]
    },
    {
        "instruction": "",
        "id": "q19857",
        "input": "using aparser from python shell",
        "output": "",
        "rule": [
            "d19857"
        ]
    },
    {
        "instruction": "",
        "id": "q19858",
        "input": "python how to retrieve an anchor tag",
        "output": "",
        "rule": [
            "d19858"
        ]
    },
    {
        "instruction": "",
        "id": "q19859",
        "input": "python decode and print base64 string",
        "output": "",
        "rule": [
            "d19859"
        ]
    },
    {
        "instruction": "",
        "id": "q19860",
        "input": "python 2to 3 script",
        "output": "",
        "rule": [
            "d19860"
        ]
    },
    {
        "instruction": "",
        "id": "q19861",
        "input": "adding noise to images python",
        "output": "",
        "rule": [
            "d19861"
        ]
    },
    {
        "instruction": "",
        "id": "q19862",
        "input": "sum results of a query python sqlalchemy",
        "output": "",
        "rule": [
            "d19862"
        ]
    },
    {
        "instruction": "",
        "id": "q19863",
        "input": "python default value if null",
        "output": "",
        "rule": [
            "d19863"
        ]
    },
    {
        "instruction": "",
        "id": "q19864",
        "input": "first few lines of a file python print",
        "output": "",
        "rule": [
            "d19864"
        ]
    },
    {
        "instruction": "",
        "id": "q19865",
        "input": "how do i tell something to print 6 lines in the paragraph in python",
        "output": "",
        "rule": [
            "d19865"
        ]
    },
    {
        "instruction": "",
        "id": "q19866",
        "input": "3 dimension convolution of cnn with python numpy",
        "output": "",
        "rule": [
            "d19866"
        ]
    },
    {
        "instruction": "",
        "id": "q19867",
        "input": "using mask in images python",
        "output": "",
        "rule": [
            "d19867"
        ]
    },
    {
        "instruction": "",
        "id": "q19868",
        "input": "python flatten dict items",
        "output": "",
        "rule": [
            "d19868"
        ]
    },
    {
        "instruction": "",
        "id": "q19869",
        "input": "incorrect header check python",
        "output": "",
        "rule": [
            "d19869"
        ]
    },
    {
        "instruction": "",
        "id": "q19870",
        "input": "how to get domain from url netloc python",
        "output": "",
        "rule": [
            "d19870"
        ]
    },
    {
        "instruction": "",
        "id": "q19871",
        "input": "how to add noise to an image using python",
        "output": "",
        "rule": [
            "d19871"
        ]
    },
    {
        "instruction": "",
        "id": "q19872",
        "input": "python csv read numpy array",
        "output": "",
        "rule": [
            "d19872"
        ]
    },
    {
        "instruction": "",
        "id": "q19873",
        "input": "implement a tree python",
        "output": "",
        "rule": [
            "d19873"
        ]
    },
    {
        "instruction": "",
        "id": "q19874",
        "input": "print attributes of object in python",
        "output": "",
        "rule": [
            "d19874"
        ]
    },
    {
        "instruction": "",
        "id": "q19875",
        "input": "vs code python default indentation",
        "output": "",
        "rule": [
            "d19875"
        ]
    },
    {
        "instruction": "",
        "id": "q19876",
        "input": "python word similarity sementic",
        "output": "",
        "rule": [
            "d19876"
        ]
    },
    {
        "instruction": "",
        "id": "q19877",
        "input": "python read json iterate",
        "output": "",
        "rule": [
            "d19877"
        ]
    },
    {
        "instruction": "",
        "id": "q19878",
        "input": "python subplot not able to set xticklabels",
        "output": "",
        "rule": [
            "d19878"
        ]
    },
    {
        "instruction": "",
        "id": "q19879",
        "input": "how to read an image file into python using its path",
        "output": "",
        "rule": [
            "d19879"
        ]
    },
    {
        "instruction": "",
        "id": "q19880",
        "input": "argparse python add subparser to subparser",
        "output": "",
        "rule": [
            "d19880"
        ]
    },
    {
        "instruction": "",
        "id": "q19881",
        "input": "remove white spaces from string in python",
        "output": "",
        "rule": [
            "d19881"
        ]
    },
    {
        "instruction": "",
        "id": "q19882",
        "input": "python utc time to local time",
        "output": "",
        "rule": [
            "d19882"
        ]
    },
    {
        "instruction": "",
        "id": "q19883",
        "input": "python check for files edited within time",
        "output": "",
        "rule": [
            "d19883"
        ]
    },
    {
        "instruction": "",
        "id": "q19884",
        "input": "python pprint a long string",
        "output": "",
        "rule": [
            "d19884"
        ]
    },
    {
        "instruction": "",
        "id": "q19885",
        "input": "close window python gui",
        "output": "",
        "rule": [
            "d19885"
        ]
    },
    {
        "instruction": "",
        "id": "q19886",
        "input": "python read file json with",
        "output": "",
        "rule": [
            "d19886"
        ]
    },
    {
        "instruction": "",
        "id": "q19887",
        "input": "how to load and execute a sql file in python",
        "output": "",
        "rule": [
            "d19887"
        ]
    },
    {
        "instruction": "",
        "id": "q19888",
        "input": "iterate over file names in directory python",
        "output": "",
        "rule": [
            "d19888"
        ]
    },
    {
        "instruction": "",
        "id": "q19889",
        "input": "how to sort the columns in python in data frame",
        "output": "",
        "rule": [
            "d19889"
        ]
    },
    {
        "instruction": "",
        "id": "q19890",
        "input": "opencv resize keep ratio python",
        "output": "",
        "rule": [
            "d19890"
        ]
    },
    {
        "instruction": "",
        "id": "q19891",
        "input": "how to concatenate output in same file python",
        "output": "",
        "rule": [
            "d19891"
        ]
    },
    {
        "instruction": "",
        "id": "q19892",
        "input": "check file size in python",
        "output": "",
        "rule": [
            "d19892"
        ]
    },
    {
        "instruction": "",
        "id": "q19893",
        "input": "cast timestamp datatype python",
        "output": "",
        "rule": [
            "d19893"
        ]
    },
    {
        "instruction": "",
        "id": "q19894",
        "input": "python setcurrentindex qcombobox changing the index, but not the value",
        "output": "",
        "rule": [
            "d19894"
        ]
    },
    {
        "instruction": "",
        "id": "q19895",
        "input": "python enum not json serializable",
        "output": "",
        "rule": [
            "d19895"
        ]
    },
    {
        "instruction": "",
        "id": "q19896",
        "input": "python how to check if method is overload",
        "output": "",
        "rule": [
            "d19896"
        ]
    },
    {
        "instruction": "",
        "id": "q19897",
        "input": "python iterate through queryset",
        "output": "",
        "rule": [
            "d19897"
        ]
    },
    {
        "instruction": "",
        "id": "q19898",
        "input": "how to create a char array in python ctypes",
        "output": "",
        "rule": [
            "d19898"
        ]
    },
    {
        "instruction": "",
        "id": "q19899",
        "input": "python get last occurrence in string",
        "output": "",
        "rule": [
            "d19899"
        ]
    },
    {
        "instruction": "",
        "id": "q19900",
        "input": "how to round a float to an int in python",
        "output": "",
        "rule": [
            "d19900"
        ]
    },
    {
        "instruction": "",
        "id": "q19901",
        "input": "get mouse coordinates python",
        "output": "",
        "rule": [
            "d19901"
        ]
    },
    {
        "instruction": "",
        "id": "q19902",
        "input": "how to delete python paths",
        "output": "",
        "rule": [
            "d19902"
        ]
    },
    {
        "instruction": "",
        "id": "q19903",
        "input": "python every time take n items from list using yield",
        "output": "",
        "rule": [
            "d19903"
        ]
    },
    {
        "instruction": "",
        "id": "q19904",
        "input": "python method objects by name",
        "output": "",
        "rule": [
            "d19904"
        ]
    },
    {
        "instruction": "",
        "id": "q19905",
        "input": "python split strings into list of lines",
        "output": "",
        "rule": [
            "d19905"
        ]
    },
    {
        "instruction": "",
        "id": "q19906",
        "input": "python index for first column name",
        "output": "",
        "rule": [
            "d19906"
        ]
    },
    {
        "instruction": "",
        "id": "q19907",
        "input": "python memoryview to structure",
        "output": "",
        "rule": [
            "d19907"
        ]
    },
    {
        "instruction": "",
        "id": "q19908",
        "input": "how do i clear python cache",
        "output": "",
        "rule": [
            "d19908"
        ]
    },
    {
        "instruction": "",
        "id": "q19909",
        "input": "creating a leap year function in python returning true or false",
        "output": "",
        "rule": [
            "d19909"
        ]
    },
    {
        "instruction": "",
        "id": "q19910",
        "input": "python automate entering of credentials",
        "output": "",
        "rule": [
            "d19910"
        ]
    },
    {
        "instruction": "",
        "id": "q19911",
        "input": "python if list of items is in line",
        "output": "",
        "rule": [
            "d19911"
        ]
    },
    {
        "instruction": "",
        "id": "q19912",
        "input": "python how to multiply matrix",
        "output": "",
        "rule": [
            "d19912"
        ]
    },
    {
        "instruction": "",
        "id": "q19913",
        "input": "turn string to a list in python",
        "output": "",
        "rule": [
            "d19913"
        ]
    },
    {
        "instruction": "",
        "id": "q19914",
        "input": "graph corresponding to the adjacency matrix python",
        "output": "",
        "rule": [
            "d19914"
        ]
    },
    {
        "instruction": "",
        "id": "q19915",
        "input": "python most frequent element multidimension",
        "output": "",
        "rule": [
            "d19915"
        ]
    },
    {
        "instruction": "",
        "id": "q19916",
        "input": "how to move a row up in python",
        "output": "",
        "rule": [
            "d19916"
        ]
    },
    {
        "instruction": "",
        "id": "q19917",
        "input": "capture output of python pprint into a file",
        "output": "",
        "rule": [
            "d19917"
        ]
    },
    {
        "instruction": "",
        "id": "q19918",
        "input": "custom json serialize python tuple",
        "output": "",
        "rule": [
            "d19918"
        ]
    },
    {
        "instruction": "",
        "id": "q19919",
        "input": "how to code tables in python using latex",
        "output": "",
        "rule": [
            "d19919"
        ]
    },
    {
        "instruction": "",
        "id": "q19920",
        "input": "python how to show help",
        "output": "",
        "rule": [
            "d19920"
        ]
    },
    {
        "instruction": "",
        "id": "q19921",
        "input": "max heap insert python",
        "output": "",
        "rule": [
            "d19921"
        ]
    },
    {
        "instruction": "",
        "id": "q19922",
        "input": "how to check for duplicate characters in a python string",
        "output": "",
        "rule": [
            "d19922"
        ]
    },
    {
        "instruction": "",
        "id": "q19923",
        "input": "how to correct socket not define error in python",
        "output": "",
        "rule": [
            "d19923"
        ]
    },
    {
        "instruction": "",
        "id": "q19924",
        "input": "python draft4validator validate schema",
        "output": "",
        "rule": [
            "d19924"
        ]
    },
    {
        "instruction": "",
        "id": "q19925",
        "input": "get number of rows in output of sql query in python",
        "output": "",
        "rule": [
            "d19925"
        ]
    },
    {
        "instruction": "",
        "id": "q19926",
        "input": "add index support objects python",
        "output": "",
        "rule": [
            "d19926"
        ]
    },
    {
        "instruction": "",
        "id": "q19927",
        "input": "make python tuple from list of strings",
        "output": "",
        "rule": [
            "d19927"
        ]
    },
    {
        "instruction": "",
        "id": "q19928",
        "input": "how to create a variable containing multiple figures python",
        "output": "",
        "rule": [
            "d19928"
        ]
    },
    {
        "instruction": "",
        "id": "q19929",
        "input": "python validate url invalid characters",
        "output": "",
        "rule": [
            "d19929"
        ]
    },
    {
        "instruction": "",
        "id": "q19930",
        "input": "python compare float of number to integer",
        "output": "",
        "rule": [
            "d19930"
        ]
    },
    {
        "instruction": "",
        "id": "q19931",
        "input": "python pdb see stack",
        "output": "",
        "rule": [
            "d19931"
        ]
    },
    {
        "instruction": "",
        "id": "q19932",
        "input": "how to raise a number to a power in python 3",
        "output": "",
        "rule": [
            "d19932"
        ]
    },
    {
        "instruction": "",
        "id": "q19933",
        "input": "how to set width of bar in horizontal bar chart python",
        "output": "",
        "rule": [
            "d19933"
        ]
    },
    {
        "instruction": "",
        "id": "q19934",
        "input": "writing javascript in python for webpage",
        "output": "",
        "rule": [
            "d19934"
        ]
    },
    {
        "instruction": "",
        "id": "q19935",
        "input": "python two vector multiply",
        "output": "",
        "rule": [
            "d19935"
        ]
    },
    {
        "instruction": "",
        "id": "q19936",
        "input": "python dynamically read args in functions",
        "output": "",
        "rule": [
            "d19936"
        ]
    },
    {
        "instruction": "",
        "id": "q19937",
        "input": "python draw line with scope and intercept",
        "output": "",
        "rule": [
            "d19937"
        ]
    },
    {
        "instruction": "",
        "id": "q19938",
        "input": "python good way to load a yaml file",
        "output": "",
        "rule": [
            "d19938"
        ]
    },
    {
        "instruction": "",
        "id": "q19939",
        "input": "python detect if a file is a symbolic link",
        "output": "",
        "rule": [
            "d19939"
        ]
    },
    {
        "instruction": "",
        "id": "q19940",
        "input": "test if multiple variables are none python",
        "output": "",
        "rule": [
            "d19940"
        ]
    },
    {
        "instruction": "",
        "id": "q19941",
        "input": "delete a column in python db",
        "output": "",
        "rule": [
            "d19941"
        ]
    },
    {
        "instruction": "",
        "id": "q19942",
        "input": "calculate the eigen values in python",
        "output": "",
        "rule": [
            "d19942"
        ]
    },
    {
        "instruction": "",
        "id": "q19943",
        "input": "python read adb devices",
        "output": "",
        "rule": [
            "d19943"
        ]
    },
    {
        "instruction": "",
        "id": "q19944",
        "input": "how to capitalize only the first letter of a string in python",
        "output": "",
        "rule": [
            "d19944"
        ]
    },
    {
        "instruction": "",
        "id": "q19945",
        "input": "python function that takes a string and returns an int",
        "output": "",
        "rule": [
            "d19945"
        ]
    },
    {
        "instruction": "",
        "id": "q19946",
        "input": "python lookup and add idiom",
        "output": "",
        "rule": [
            "d19946"
        ]
    },
    {
        "instruction": "",
        "id": "q19947",
        "input": "python elementtree delete namespace",
        "output": "",
        "rule": [
            "d19947"
        ]
    },
    {
        "instruction": "",
        "id": "q19948",
        "input": "what can you store in a python session",
        "output": "",
        "rule": [
            "d19948"
        ]
    },
    {
        "instruction": "",
        "id": "q19949",
        "input": "wrapping python as a wrapper",
        "output": "",
        "rule": [
            "d19949"
        ]
    },
    {
        "instruction": "",
        "id": "q19950",
        "input": "configure a list of characters into a string python",
        "output": "",
        "rule": [
            "d19950"
        ]
    },
    {
        "instruction": "",
        "id": "q19951",
        "input": "python list of self variables",
        "output": "",
        "rule": [
            "d19951"
        ]
    },
    {
        "instruction": "",
        "id": "q19952",
        "input": "how to stop streaming data python",
        "output": "",
        "rule": [
            "d19952"
        ]
    },
    {
        "instruction": "",
        "id": "q19953",
        "input": "python create remote file ssh",
        "output": "",
        "rule": [
            "d19953"
        ]
    },
    {
        "instruction": "",
        "id": "q19954",
        "input": "get the first value in a series python",
        "output": "",
        "rule": [
            "d19954"
        ]
    },
    {
        "instruction": "",
        "id": "q19955",
        "input": "fetch a variable from its name + python",
        "output": "",
        "rule": [
            "d19955"
        ]
    },
    {
        "instruction": "",
        "id": "q19956",
        "input": "how to change dimensions of a window in python",
        "output": "",
        "rule": [
            "d19956"
        ]
    },
    {
        "instruction": "",
        "id": "q19957",
        "input": "python numpy array fix dtype",
        "output": "",
        "rule": [
            "d19957"
        ]
    },
    {
        "instruction": "",
        "id": "q19958",
        "input": "python3 extending an empty diff results in none type",
        "output": "",
        "rule": [
            "d19958"
        ]
    },
    {
        "instruction": "",
        "id": "q19959",
        "input": "windows cmd python display width",
        "output": "",
        "rule": [
            "d19959"
        ]
    },
    {
        "instruction": "",
        "id": "q19960",
        "input": "top values in list python",
        "output": "",
        "rule": [
            "d19960"
        ]
    },
    {
        "instruction": "",
        "id": "q19961",
        "input": "md5 value of a file python",
        "output": "",
        "rule": [
            "d19961"
        ]
    },
    {
        "instruction": "",
        "id": "q19962",
        "input": "code to create folders in python",
        "output": "",
        "rule": [
            "d19962"
        ]
    },
    {
        "instruction": "",
        "id": "q19963",
        "input": "python check if certain length of input equals something",
        "output": "",
        "rule": [
            "d19963"
        ]
    },
    {
        "instruction": "",
        "id": "q19964",
        "input": "python iterate chunks of string",
        "output": "",
        "rule": [
            "d19964"
        ]
    },
    {
        "instruction": "",
        "id": "q19965",
        "input": "how to check datatype in data frame in python",
        "output": "",
        "rule": [
            "d19965"
        ]
    },
    {
        "instruction": "",
        "id": "q19966",
        "input": "python get first object in a list",
        "output": "",
        "rule": [
            "d19966"
        ]
    },
    {
        "instruction": "",
        "id": "q19967",
        "input": "python extract all numbers in a string",
        "output": "",
        "rule": [
            "d19967"
        ]
    },
    {
        "instruction": "",
        "id": "q19968",
        "input": "python unittest assert not raises",
        "output": "",
        "rule": [
            "d19968"
        ]
    },
    {
        "instruction": "",
        "id": "q19969",
        "input": "python zmq check if connected",
        "output": "",
        "rule": [
            "d19969"
        ]
    },
    {
        "instruction": "",
        "id": "q19970",
        "input": "using string to generate datetime date in python",
        "output": "",
        "rule": [
            "d19970"
        ]
    },
    {
        "instruction": "",
        "id": "q19971",
        "input": "python list comprehension flatten",
        "output": "",
        "rule": [
            "d19971"
        ]
    },
    {
        "instruction": "",
        "id": "q19972",
        "input": "python code remove duplicate labels",
        "output": "",
        "rule": [
            "d19972"
        ]
    },
    {
        "instruction": "",
        "id": "q19973",
        "input": "heatmap python set the axis limits",
        "output": "",
        "rule": [
            "d19973"
        ]
    },
    {
        "instruction": "",
        "id": "q19974",
        "input": "rotate between items in a list python",
        "output": "",
        "rule": [
            "d19974"
        ]
    },
    {
        "instruction": "",
        "id": "q19975",
        "input": "how to exclude item from index python",
        "output": "",
        "rule": [
            "d19975"
        ]
    },
    {
        "instruction": "",
        "id": "q19976",
        "input": "remove punctuation and stop words python nltk",
        "output": "",
        "rule": [
            "d19976"
        ]
    },
    {
        "instruction": "",
        "id": "q19977",
        "input": "strip spaces from columns in python",
        "output": "",
        "rule": [
            "d19977"
        ]
    },
    {
        "instruction": "",
        "id": "q19978",
        "input": "python datetime get last month number",
        "output": "",
        "rule": [
            "d19978"
        ]
    },
    {
        "instruction": "",
        "id": "q19979",
        "input": "python assertassert no description",
        "output": "",
        "rule": [
            "d19979"
        ]
    },
    {
        "instruction": "",
        "id": "q19980",
        "input": "python program calculating angle from two points",
        "output": "",
        "rule": [
            "d19980"
        ]
    },
    {
        "instruction": "",
        "id": "q19981",
        "input": "python split iterable into batches",
        "output": "",
        "rule": [
            "d19981"
        ]
    },
    {
        "instruction": "",
        "id": "q19982",
        "input": "easy python decompiler invalid pys file",
        "output": "",
        "rule": [
            "d19982"
        ]
    },
    {
        "instruction": "",
        "id": "q19983",
        "input": "close stdin subprocess python",
        "output": "",
        "rule": [
            "d19983"
        ]
    },
    {
        "instruction": "",
        "id": "q19984",
        "input": "remove a value from all keys in a dictionary python",
        "output": "",
        "rule": [
            "d19984"
        ]
    },
    {
        "instruction": "",
        "id": "q19985",
        "input": "assertion error python how to solve",
        "output": "",
        "rule": [
            "d19985"
        ]
    },
    {
        "instruction": "",
        "id": "q19986",
        "input": "python remove words from sentences in a list",
        "output": "",
        "rule": [
            "d19986"
        ]
    },
    {
        "instruction": "",
        "id": "q19987",
        "input": "python iterate over many regex sub",
        "output": "",
        "rule": [
            "d19987"
        ]
    },
    {
        "instruction": "",
        "id": "q19988",
        "input": "python multiindex get index freeze",
        "output": "",
        "rule": [
            "d19988"
        ]
    },
    {
        "instruction": "",
        "id": "q19989",
        "input": "python two range union",
        "output": "",
        "rule": [
            "d19989"
        ]
    },
    {
        "instruction": "",
        "id": "q19990",
        "input": "decode object to bytes python",
        "output": "",
        "rule": [
            "d19990"
        ]
    },
    {
        "instruction": "",
        "id": "q19991",
        "input": "limit float decimals in python",
        "output": "",
        "rule": [
            "d19991"
        ]
    },
    {
        "instruction": "",
        "id": "q19992",
        "input": "delete an element from set python",
        "output": "",
        "rule": [
            "d19992"
        ]
    },
    {
        "instruction": "",
        "id": "q19993",
        "input": "object id in python equivalent in golang",
        "output": "",
        "rule": [
            "d19993"
        ]
    },
    {
        "instruction": "",
        "id": "q19994",
        "input": "python create dictionary with keys and no values",
        "output": "",
        "rule": [
            "d19994"
        ]
    },
    {
        "instruction": "",
        "id": "q19995",
        "input": "python check if directory is writable",
        "output": "",
        "rule": [
            "d19995"
        ]
    },
    {
        "instruction": "",
        "id": "q19996",
        "input": "python df change type",
        "output": "",
        "rule": [
            "d19996"
        ]
    },
    {
        "instruction": "",
        "id": "q19997",
        "input": "how to put json in file python",
        "output": "",
        "rule": [
            "d19997"
        ]
    },
    {
        "instruction": "",
        "id": "q19998",
        "input": "set a rect to a variable python",
        "output": "",
        "rule": [
            "d19998"
        ]
    },
    {
        "instruction": "",
        "id": "q19999",
        "input": "python borderless table via format function",
        "output": "",
        "rule": [
            "d19999"
        ]
    },
    {
        "instruction": "",
        "id": "q20000",
        "input": "how to select region in array python",
        "output": "",
        "rule": [
            "d20000"
        ]
    },
    {
        "instruction": "",
        "id": "q20001",
        "input": "python is not not none",
        "output": "",
        "rule": [
            "d20001"
        ]
    },
    {
        "instruction": "",
        "id": "q20002",
        "input": "python dir is writable",
        "output": "",
        "rule": [
            "d20002"
        ]
    },
    {
        "instruction": "",
        "id": "q20003",
        "input": "behave python element not visible",
        "output": "",
        "rule": [
            "d20003"
        ]
    },
    {
        "instruction": "",
        "id": "q20004",
        "input": "python detect change of slope",
        "output": "",
        "rule": [
            "d20004"
        ]
    },
    {
        "instruction": "",
        "id": "q20005",
        "input": "python tkinter unchecking checkbutton change variable",
        "output": "",
        "rule": [
            "d20005"
        ]
    },
    {
        "instruction": "",
        "id": "q20006",
        "input": "python json dumps numpy key",
        "output": "",
        "rule": [
            "d20006"
        ]
    },
    {
        "instruction": "",
        "id": "q20007",
        "input": "how to change python input to upper case",
        "output": "",
        "rule": [
            "d20007"
        ]
    },
    {
        "instruction": "",
        "id": "q20008",
        "input": "python minidom html to dict",
        "output": "",
        "rule": [
            "d20008"
        ]
    },
    {
        "instruction": "",
        "id": "q20009",
        "input": "how to remove punctuation and special charachhters in python",
        "output": "",
        "rule": [
            "d20009"
        ]
    },
    {
        "instruction": "",
        "id": "q20010",
        "input": "update figure in python to show change",
        "output": "",
        "rule": [
            "d20010"
        ]
    },
    {
        "instruction": "",
        "id": "q20011",
        "input": "python hashlib of entire file",
        "output": "",
        "rule": [
            "d20011"
        ]
    },
    {
        "instruction": "",
        "id": "q20012",
        "input": "get processing power from other devices in python",
        "output": "",
        "rule": [
            "d20012"
        ]
    },
    {
        "instruction": "",
        "id": "q20013",
        "input": "python get hash of file filestorage",
        "output": "",
        "rule": [
            "d20013"
        ]
    },
    {
        "instruction": "",
        "id": "q20014",
        "input": "how to detect number of cpu cores in python",
        "output": "",
        "rule": [
            "d20014"
        ]
    },
    {
        "instruction": "",
        "id": "q20015",
        "input": "how to return the index of a number in a list python",
        "output": "",
        "rule": [
            "d20015"
        ]
    },
    {
        "instruction": "",
        "id": "q20016",
        "input": "python list of all objects",
        "output": "",
        "rule": [
            "d20016"
        ]
    },
    {
        "instruction": "",
        "id": "q20017",
        "input": "python iterate regex matches",
        "output": "",
        "rule": [
            "d20017"
        ]
    },
    {
        "instruction": "",
        "id": "q20018",
        "input": "python get rid of comments in json string",
        "output": "",
        "rule": [
            "d20018"
        ]
    },
    {
        "instruction": "",
        "id": "q20019",
        "input": "python code to check if line in file exists",
        "output": "",
        "rule": [
            "d20019"
        ]
    },
    {
        "instruction": "",
        "id": "q20020",
        "input": "python thread spawn async",
        "output": "",
        "rule": [
            "d20020"
        ]
    },
    {
        "instruction": "",
        "id": "q20021",
        "input": "python \"not is none\" \"is not none\"",
        "output": "",
        "rule": [
            "d20021"
        ]
    },
    {
        "instruction": "",
        "id": "q20022",
        "input": "check if attribute exists python",
        "output": "",
        "rule": [
            "d20022"
        ]
    },
    {
        "instruction": "",
        "id": "q20023",
        "input": "python remove non printing characters",
        "output": "",
        "rule": [
            "d20023"
        ]
    },
    {
        "instruction": "",
        "id": "q20024",
        "input": "python pool imap mutltiple argements",
        "output": "",
        "rule": [
            "d20024"
        ]
    },
    {
        "instruction": "",
        "id": "q20025",
        "input": "drop column if all column values are nan in python",
        "output": "",
        "rule": [
            "d20025"
        ]
    },
    {
        "instruction": "",
        "id": "q20026",
        "input": "python check if end of file reached",
        "output": "",
        "rule": [
            "d20026"
        ]
    },
    {
        "instruction": "",
        "id": "q20027",
        "input": "set table widget cell width python",
        "output": "",
        "rule": [
            "d20027"
        ]
    },
    {
        "instruction": "",
        "id": "q20028",
        "input": "from json to obejct python",
        "output": "",
        "rule": [
            "d20028"
        ]
    },
    {
        "instruction": "",
        "id": "q20029",
        "input": "redis python get list length",
        "output": "",
        "rule": [
            "d20029"
        ]
    },
    {
        "instruction": "",
        "id": "q20030",
        "input": "proxy setup for python",
        "output": "",
        "rule": [
            "d20030"
        ]
    },
    {
        "instruction": "",
        "id": "q20031",
        "input": "python check type equals to",
        "output": "",
        "rule": [
            "d20031"
        ]
    },
    {
        "instruction": "",
        "id": "q20032",
        "input": "python remove none values from a list",
        "output": "",
        "rule": [
            "d20032"
        ]
    },
    {
        "instruction": "",
        "id": "q20033",
        "input": "how to see all variables in python",
        "output": "",
        "rule": [
            "d20033"
        ]
    },
    {
        "instruction": "",
        "id": "q20034",
        "input": "python create a filter with cutoff frequency",
        "output": "",
        "rule": [
            "d20034"
        ]
    },
    {
        "instruction": "",
        "id": "q20035",
        "input": "python shuffle columns of a matrix",
        "output": "",
        "rule": [
            "d20035"
        ]
    },
    {
        "instruction": "",
        "id": "q20036",
        "input": "python delete all listswith similar name",
        "output": "",
        "rule": [
            "d20036"
        ]
    },
    {
        "instruction": "",
        "id": "q20037",
        "input": "round numbers in array to nearest whole python",
        "output": "",
        "rule": [
            "d20037"
        ]
    },
    {
        "instruction": "",
        "id": "q20038",
        "input": "change utc time to relative time python",
        "output": "",
        "rule": [
            "d20038"
        ]
    },
    {
        "instruction": "",
        "id": "q20039",
        "input": "how to check if file is not empty python",
        "output": "",
        "rule": [
            "d20039"
        ]
    },
    {
        "instruction": "",
        "id": "q20040",
        "input": "area of a triangle using python",
        "output": "",
        "rule": [
            "d20040"
        ]
    },
    {
        "instruction": "",
        "id": "q20041",
        "input": "python make a copy not reference",
        "output": "",
        "rule": [
            "d20041"
        ]
    },
    {
        "instruction": "",
        "id": "q20042",
        "input": "python heappush max heap",
        "output": "",
        "rule": [
            "d20042"
        ]
    },
    {
        "instruction": "",
        "id": "q20043",
        "input": "pythonreturn json file from a function",
        "output": "",
        "rule": [
            "d20043"
        ]
    },
    {
        "instruction": "",
        "id": "q20044",
        "input": "python check if file can be opened",
        "output": "",
        "rule": [
            "d20044"
        ]
    },
    {
        "instruction": "",
        "id": "q20045",
        "input": "python lastworking day of month",
        "output": "",
        "rule": [
            "d20045"
        ]
    },
    {
        "instruction": "",
        "id": "q20046",
        "input": "how to get the maximum cell in one row in python",
        "output": "",
        "rule": [
            "d20046"
        ]
    },
    {
        "instruction": "",
        "id": "q20047",
        "input": "redefine the range in python",
        "output": "",
        "rule": [
            "d20047"
        ]
    },
    {
        "instruction": "",
        "id": "q20048",
        "input": "escape percent sign in python",
        "output": "",
        "rule": [
            "d20048"
        ]
    },
    {
        "instruction": "",
        "id": "q20049",
        "input": "plot kde over histogram python",
        "output": "",
        "rule": [
            "d20049"
        ]
    },
    {
        "instruction": "",
        "id": "q20050",
        "input": "normalize to 1 in python",
        "output": "",
        "rule": [
            "d20050"
        ]
    },
    {
        "instruction": "",
        "id": "q20051",
        "input": "python interpolate between different coordinate matrices",
        "output": "",
        "rule": [
            "d20051"
        ]
    },
    {
        "instruction": "",
        "id": "q20052",
        "input": "see properties of an object python",
        "output": "",
        "rule": [
            "d20052"
        ]
    },
    {
        "instruction": "",
        "id": "q20053",
        "input": "how to check if sprites collide in python",
        "output": "",
        "rule": [
            "d20053"
        ]
    },
    {
        "instruction": "",
        "id": "q20054",
        "input": "python function get all objects of certain type",
        "output": "",
        "rule": [
            "d20054"
        ]
    },
    {
        "instruction": "",
        "id": "q20055",
        "input": "how to cast an object as a float python",
        "output": "",
        "rule": [
            "d20055"
        ]
    },
    {
        "instruction": "",
        "id": "q20056",
        "input": "python redis close conn",
        "output": "",
        "rule": [
            "d20056"
        ]
    },
    {
        "instruction": "",
        "id": "q20057",
        "input": "python dialog box to specify folder",
        "output": "",
        "rule": [
            "d20057"
        ]
    },
    {
        "instruction": "",
        "id": "q20058",
        "input": "python how to remove docstrings from compiled code",
        "output": "",
        "rule": [
            "d20058"
        ]
    },
    {
        "instruction": "",
        "id": "q20059",
        "input": "math normalize a matrix python",
        "output": "",
        "rule": [
            "d20059"
        ]
    },
    {
        "instruction": "",
        "id": "q20060",
        "input": "passing functions as argumetns python",
        "output": "",
        "rule": [
            "d20060"
        ]
    },
    {
        "instruction": "",
        "id": "q20061",
        "input": "to get the next line in python",
        "output": "",
        "rule": [
            "d20061"
        ]
    },
    {
        "instruction": "",
        "id": "q20062",
        "input": "get table column names from database python",
        "output": "",
        "rule": [
            "d20062"
        ]
    },
    {
        "instruction": "",
        "id": "q20063",
        "input": "python sparse matrix features name",
        "output": "",
        "rule": [
            "d20063"
        ]
    },
    {
        "instruction": "",
        "id": "q20064",
        "input": "python get objectthat called a function",
        "output": "",
        "rule": [
            "d20064"
        ]
    },
    {
        "instruction": "",
        "id": "q20065",
        "input": "python async function update state",
        "output": "",
        "rule": [
            "d20065"
        ]
    },
    {
        "instruction": "",
        "id": "q20066",
        "input": "python check if variable is float, int, boolean",
        "output": "",
        "rule": [
            "d20066"
        ]
    },
    {
        "instruction": "",
        "id": "q20067",
        "input": "maximum list depth python",
        "output": "",
        "rule": [
            "d20067"
        ]
    },
    {
        "instruction": "",
        "id": "q20068",
        "input": "ssis check if python is still running in vackground",
        "output": "",
        "rule": [
            "d20068"
        ]
    },
    {
        "instruction": "",
        "id": "q20069",
        "input": "python max length of one line",
        "output": "",
        "rule": [
            "d20069"
        ]
    },
    {
        "instruction": "",
        "id": "q20070",
        "input": "how to get thousands of http requests asynchronously python",
        "output": "",
        "rule": [
            "d20070"
        ]
    },
    {
        "instruction": "",
        "id": "q20071",
        "input": "python range function stack overflow",
        "output": "",
        "rule": [
            "d20071"
        ]
    },
    {
        "instruction": "",
        "id": "q20072",
        "input": "python get last record in file",
        "output": "",
        "rule": [
            "d20072"
        ]
    },
    {
        "instruction": "",
        "id": "q20073",
        "input": "python network activity log on and log off",
        "output": "",
        "rule": [
            "d20073"
        ]
    },
    {
        "instruction": "",
        "id": "q20074",
        "input": "python list get index with default",
        "output": "",
        "rule": [
            "d20074"
        ]
    },
    {
        "instruction": "",
        "id": "q20075",
        "input": "in a random generate sequence in python how do you retain a function",
        "output": "",
        "rule": [
            "d20075"
        ]
    },
    {
        "instruction": "",
        "id": "q20076",
        "input": "python strictredis redis password",
        "output": "",
        "rule": [
            "d20076"
        ]
    },
    {
        "instruction": "",
        "id": "q20077",
        "input": "python dict to key string and value stirng",
        "output": "",
        "rule": [
            "d20077"
        ]
    },
    {
        "instruction": "",
        "id": "q20078",
        "input": "python update minify js file",
        "output": "",
        "rule": [
            "d20078"
        ]
    },
    {
        "instruction": "",
        "id": "q20079",
        "input": "how to deifne a rotation in python",
        "output": "",
        "rule": [
            "d20079"
        ]
    },
    {
        "instruction": "",
        "id": "q20080",
        "input": "python get average volume of audio",
        "output": "",
        "rule": [
            "d20080"
        ]
    },
    {
        "instruction": "",
        "id": "q20081",
        "input": "python split words in to list",
        "output": "",
        "rule": [
            "d20081"
        ]
    },
    {
        "instruction": "",
        "id": "q20082",
        "input": "python how check int or float",
        "output": "",
        "rule": [
            "d20082"
        ]
    },
    {
        "instruction": "",
        "id": "q20083",
        "input": "write file python change text color",
        "output": "",
        "rule": [
            "d20083"
        ]
    },
    {
        "instruction": "",
        "id": "q20084",
        "input": "python get location of min/max",
        "output": "",
        "rule": [
            "d20084"
        ]
    },
    {
        "instruction": "",
        "id": "q20085",
        "input": "extract words from documents python",
        "output": "",
        "rule": [
            "d20085"
        ]
    },
    {
        "instruction": "",
        "id": "q20086",
        "input": "python \"binary string\" to int",
        "output": "",
        "rule": [
            "d20086"
        ]
    },
    {
        "instruction": "",
        "id": "q20087",
        "input": "python return index of object in a list",
        "output": "",
        "rule": [
            "d20087"
        ]
    },
    {
        "instruction": "",
        "id": "q20088",
        "input": "l2 norm for array python",
        "output": "",
        "rule": [
            "d20088"
        ]
    },
    {
        "instruction": "",
        "id": "q20089",
        "input": "how to fill linterrepter python",
        "output": "",
        "rule": [
            "d20089"
        ]
    },
    {
        "instruction": "",
        "id": "q20090",
        "input": "how to check datatype of column in python",
        "output": "",
        "rule": [
            "d20090"
        ]
    },
    {
        "instruction": "",
        "id": "q20091",
        "input": "python interactive window python is not defined",
        "output": "",
        "rule": [
            "d20091"
        ]
    },
    {
        "instruction": "",
        "id": "q20092",
        "input": "datetime add a month to a date python",
        "output": "",
        "rule": [
            "d20092"
        ]
    },
    {
        "instruction": "",
        "id": "q20093",
        "input": "python correlation pearson coefficient",
        "output": "",
        "rule": [
            "d20093"
        ]
    },
    {
        "instruction": "",
        "id": "q20094",
        "input": "how do i mae the cursor on python skinny again",
        "output": "",
        "rule": [
            "d20094"
        ]
    },
    {
        "instruction": "",
        "id": "q20095",
        "input": "test the number of characters in python list",
        "output": "",
        "rule": [
            "d20095"
        ]
    },
    {
        "instruction": "",
        "id": "q20096",
        "input": "sent urlencoded payload in python",
        "output": "",
        "rule": [
            "d20096"
        ]
    },
    {
        "instruction": "",
        "id": "q20097",
        "input": "python setuptools command not found",
        "output": "",
        "rule": [
            "d20097"
        ]
    },
    {
        "instruction": "",
        "id": "q20098",
        "input": "python ctypes load dll dependancies",
        "output": "",
        "rule": [
            "d20098"
        ]
    },
    {
        "instruction": "",
        "id": "q20099",
        "input": "python create dictionray from a list of keys",
        "output": "",
        "rule": [
            "d20099"
        ]
    },
    {
        "instruction": "",
        "id": "q20100",
        "input": "python function to reduce image size",
        "output": "",
        "rule": [
            "d20100"
        ]
    },
    {
        "instruction": "",
        "id": "q20101",
        "input": "python filling missing values with fillna",
        "output": "",
        "rule": [
            "d20101"
        ]
    },
    {
        "instruction": "",
        "id": "q20102",
        "input": "how to count the number of objects in python",
        "output": "",
        "rule": [
            "d20102"
        ]
    },
    {
        "instruction": "",
        "id": "q20103",
        "input": "python cmd get dynamically added do methods to show up in help",
        "output": "",
        "rule": [
            "d20103"
        ]
    },
    {
        "instruction": "",
        "id": "q20104",
        "input": "how to change a dictionary to a numy array in python",
        "output": "",
        "rule": [
            "d20104"
        ]
    },
    {
        "instruction": "",
        "id": "q20105",
        "input": "sort by a token in string python",
        "output": "",
        "rule": [
            "d20105"
        ]
    },
    {
        "instruction": "",
        "id": "q20106",
        "input": "python check file is readonly",
        "output": "",
        "rule": [
            "d20106"
        ]
    },
    {
        "instruction": "",
        "id": "q20107",
        "input": "declaring empty numpy array in python",
        "output": "",
        "rule": [
            "d20107"
        ]
    },
    {
        "instruction": "",
        "id": "q20108",
        "input": "test for iterable is string in python",
        "output": "",
        "rule": [
            "d20108"
        ]
    },
    {
        "instruction": "",
        "id": "q20109",
        "input": "python print results of query loop",
        "output": "",
        "rule": [
            "d20109"
        ]
    },
    {
        "instruction": "",
        "id": "q20110",
        "input": "how to save header of fits file to export python",
        "output": "",
        "rule": [
            "d20110"
        ]
    },
    {
        "instruction": "",
        "id": "q20111",
        "input": "python calc page align",
        "output": "",
        "rule": [
            "d20111"
        ]
    },
    {
        "instruction": "",
        "id": "q20112",
        "input": "python numpy array as float",
        "output": "",
        "rule": [
            "d20112"
        ]
    },
    {
        "instruction": "",
        "id": "q20113",
        "input": "input string that replaces occurences python",
        "output": "",
        "rule": [
            "d20113"
        ]
    },
    {
        "instruction": "",
        "id": "q20114",
        "input": "python check all items in list are ints",
        "output": "",
        "rule": [
            "d20114"
        ]
    },
    {
        "instruction": "",
        "id": "q20115",
        "input": "how to save variable to text file python",
        "output": "",
        "rule": [
            "d20115"
        ]
    },
    {
        "instruction": "",
        "id": "q20116",
        "input": "how to skip an index in a for loop python",
        "output": "",
        "rule": [
            "d20116"
        ]
    },
    {
        "instruction": "",
        "id": "q20117",
        "input": "how to create a tokenization code in python",
        "output": "",
        "rule": [
            "d20117"
        ]
    },
    {
        "instruction": "",
        "id": "q20118",
        "input": "python raise without parentheses",
        "output": "",
        "rule": [
            "d20118"
        ]
    },
    {
        "instruction": "",
        "id": "q20119",
        "input": "how to seperate list with commas python",
        "output": "",
        "rule": [
            "d20119"
        ]
    },
    {
        "instruction": "",
        "id": "q20120",
        "input": "python asynchronous function call return",
        "output": "",
        "rule": [
            "d20120"
        ]
    },
    {
        "instruction": "",
        "id": "q20121",
        "input": "how to make a seconds to time in python",
        "output": "",
        "rule": [
            "d20121"
        ]
    },
    {
        "instruction": "",
        "id": "q20122",
        "input": "python cast true or false as numbers",
        "output": "",
        "rule": [
            "d20122"
        ]
    },
    {
        "instruction": "",
        "id": "q20123",
        "input": "add milliseconds to datetime python",
        "output": "",
        "rule": [
            "d20123"
        ]
    },
    {
        "instruction": "",
        "id": "q20124",
        "input": "how to read the last n lines of a program on python",
        "output": "",
        "rule": [
            "d20124"
        ]
    },
    {
        "instruction": "",
        "id": "q20125",
        "input": "python mysql get list of table columns",
        "output": "",
        "rule": [
            "d20125"
        ]
    },
    {
        "instruction": "",
        "id": "q20126",
        "input": "how to get domain part of a url in python",
        "output": "",
        "rule": [
            "d20126"
        ]
    },
    {
        "instruction": "",
        "id": "q20127",
        "input": "python flatten a nested dictionaary",
        "output": "",
        "rule": [
            "d20127"
        ]
    },
    {
        "instruction": "",
        "id": "q20128",
        "input": "python session set get",
        "output": "",
        "rule": [
            "d20128"
        ]
    },
    {
        "instruction": "",
        "id": "q20129",
        "input": "python save graph into file",
        "output": "",
        "rule": [
            "d20129"
        ]
    },
    {
        "instruction": "",
        "id": "q20130",
        "input": "chmod python windows to remove file",
        "output": "",
        "rule": [
            "d20130"
        ]
    },
    {
        "instruction": "",
        "id": "q20131",
        "input": "add suffixes on concat python",
        "output": "",
        "rule": [
            "d20131"
        ]
    },
    {
        "instruction": "",
        "id": "q20132",
        "input": "how to check python object iterable",
        "output": "",
        "rule": [
            "d20132"
        ]
    },
    {
        "instruction": "",
        "id": "q20133",
        "input": "python 3 tkinter open file dialog",
        "output": "",
        "rule": [
            "d20133"
        ]
    },
    {
        "instruction": "",
        "id": "q20134",
        "input": "how to indent self python",
        "output": "",
        "rule": [
            "d20134"
        ]
    },
    {
        "instruction": "",
        "id": "q20135",
        "input": "tracking centroid of an object python",
        "output": "",
        "rule": [
            "d20135"
        ]
    },
    {
        "instruction": "",
        "id": "q20136",
        "input": "python3 ctypes return float array",
        "output": "",
        "rule": [
            "d20136"
        ]
    },
    {
        "instruction": "",
        "id": "q20137",
        "input": "how to make paragraphs in python",
        "output": "",
        "rule": [
            "d20137"
        ]
    },
    {
        "instruction": "",
        "id": "q20138",
        "input": "python rest requests delete",
        "output": "",
        "rule": [
            "d20138"
        ]
    },
    {
        "instruction": "",
        "id": "q20139",
        "input": "python replace month number",
        "output": "",
        "rule": [
            "d20139"
        ]
    },
    {
        "instruction": "",
        "id": "q20140",
        "input": "how to tell what type of data object is in python",
        "output": "",
        "rule": [
            "d20140"
        ]
    },
    {
        "instruction": "",
        "id": "q20141",
        "input": "python jsonschema validate schema file",
        "output": "",
        "rule": [
            "d20141"
        ]
    },
    {
        "instruction": "",
        "id": "q20142",
        "input": "get wechat access token python",
        "output": "",
        "rule": [
            "d20142"
        ]
    },
    {
        "instruction": "",
        "id": "q20143",
        "input": "python change str value to int",
        "output": "",
        "rule": [
            "d20143"
        ]
    },
    {
        "instruction": "",
        "id": "q20144",
        "input": "implementing drag and drop python",
        "output": "",
        "rule": [
            "d20144"
        ]
    },
    {
        "instruction": "",
        "id": "q20145",
        "input": "get unique list from two lists python",
        "output": "",
        "rule": [
            "d20145"
        ]
    },
    {
        "instruction": "",
        "id": "q20146",
        "input": "python 3 not runnning in git bash",
        "output": "",
        "rule": [
            "d20146"
        ]
    },
    {
        "instruction": "",
        "id": "q20147",
        "input": "create unknown number of names to print in python",
        "output": "",
        "rule": [
            "d20147"
        ]
    },
    {
        "instruction": "",
        "id": "q20148",
        "input": "python json if element exists",
        "output": "",
        "rule": [
            "d20148"
        ]
    },
    {
        "instruction": "",
        "id": "q20149",
        "input": "number of unique values in list python",
        "output": "",
        "rule": [
            "d20149"
        ]
    },
    {
        "instruction": "",
        "id": "q20150",
        "input": "how to randomize items in a list in python",
        "output": "",
        "rule": [
            "d20150"
        ]
    },
    {
        "instruction": "",
        "id": "q20151",
        "input": "python windows check for keypress",
        "output": "",
        "rule": [
            "d20151"
        ]
    },
    {
        "instruction": "",
        "id": "q20152",
        "input": "python bind scrollbar to canvas",
        "output": "",
        "rule": [
            "d20152"
        ]
    },
    {
        "instruction": "",
        "id": "q20153",
        "input": "python setlevel how to only record error",
        "output": "",
        "rule": [
            "d20153"
        ]
    },
    {
        "instruction": "",
        "id": "q20154",
        "input": "format string with *args python",
        "output": "",
        "rule": [
            "d20154"
        ]
    },
    {
        "instruction": "",
        "id": "q20155",
        "input": "python get hostip from url",
        "output": "",
        "rule": [
            "d20155"
        ]
    },
    {
        "instruction": "",
        "id": "q20156",
        "input": "python numpy masked vailding",
        "output": "",
        "rule": [
            "d20156"
        ]
    },
    {
        "instruction": "",
        "id": "q20157",
        "input": "python child widget close signal",
        "output": "",
        "rule": [
            "d20157"
        ]
    },
    {
        "instruction": "",
        "id": "q20158",
        "input": "python read from csv into numpy array",
        "output": "",
        "rule": [
            "d20158"
        ]
    },
    {
        "instruction": "",
        "id": "q20159",
        "input": "cast string to bytearray python",
        "output": "",
        "rule": [
            "d20159"
        ]
    },
    {
        "instruction": "",
        "id": "q20160",
        "input": "load str into python object",
        "output": "",
        "rule": [
            "d20160"
        ]
    },
    {
        "instruction": "",
        "id": "q20161",
        "input": "python ldap get all groups a user belongs to",
        "output": "",
        "rule": [
            "d20161"
        ]
    },
    {
        "instruction": "",
        "id": "q20162",
        "input": "python check type if string",
        "output": "",
        "rule": [
            "d20162"
        ]
    },
    {
        "instruction": "",
        "id": "q20163",
        "input": "python get current globals",
        "output": "",
        "rule": [
            "d20163"
        ]
    },
    {
        "instruction": "",
        "id": "q20164",
        "input": "get child loggers python",
        "output": "",
        "rule": [
            "d20164"
        ]
    },
    {
        "instruction": "",
        "id": "q20165",
        "input": "how to know if a text file is empty in python",
        "output": "",
        "rule": [
            "d20165"
        ]
    },
    {
        "instruction": "",
        "id": "q20166",
        "input": "python normal distribution p values",
        "output": "",
        "rule": [
            "d20166"
        ]
    },
    {
        "instruction": "",
        "id": "q20167",
        "input": "python ctypes array of arrays",
        "output": "",
        "rule": [
            "d20167"
        ]
    },
    {
        "instruction": "",
        "id": "q20168",
        "input": "scale 1d array python to between 0 and 1",
        "output": "",
        "rule": [
            "d20168"
        ]
    },
    {
        "instruction": "",
        "id": "q20169",
        "input": "python upper case lower case converter",
        "output": "",
        "rule": [
            "d20169"
        ]
    },
    {
        "instruction": "",
        "id": "q20170",
        "input": "ply python expression evaluator",
        "output": "",
        "rule": [
            "d20170"
        ]
    },
    {
        "instruction": "",
        "id": "q20171",
        "input": "python hashlib calc sha1 of file",
        "output": "",
        "rule": [
            "d20171"
        ]
    },
    {
        "instruction": "",
        "id": "q20172",
        "input": "python pdb no capture std output",
        "output": "",
        "rule": [
            "d20172"
        ]
    },
    {
        "instruction": "",
        "id": "q20173",
        "input": "python how to write a factorial",
        "output": "",
        "rule": [
            "d20173"
        ]
    },
    {
        "instruction": "",
        "id": "q20174",
        "input": "python get the last column",
        "output": "",
        "rule": [
            "d20174"
        ]
    },
    {
        "instruction": "",
        "id": "q20175",
        "input": "python how to change file extension",
        "output": "",
        "rule": [
            "d20175"
        ]
    },
    {
        "instruction": "",
        "id": "q20176",
        "input": "python get process memory info",
        "output": "",
        "rule": [
            "d20176"
        ]
    },
    {
        "instruction": "",
        "id": "q20177",
        "input": "check if 2 string are equal python",
        "output": "",
        "rule": [
            "d20177"
        ]
    },
    {
        "instruction": "",
        "id": "q20178",
        "input": "flask python create one table sqlalchemy",
        "output": "",
        "rule": [
            "d20178"
        ]
    },
    {
        "instruction": "",
        "id": "q20179",
        "input": "clean output folder in python",
        "output": "",
        "rule": [
            "d20179"
        ]
    },
    {
        "instruction": "",
        "id": "q20180",
        "input": "python print nodes binary tree",
        "output": "",
        "rule": [
            "d20180"
        ]
    },
    {
        "instruction": "",
        "id": "q20181",
        "input": "python query string parsing",
        "output": "",
        "rule": [
            "d20181"
        ]
    },
    {
        "instruction": "",
        "id": "q20182",
        "input": "cycle through a folder of images python",
        "output": "",
        "rule": [
            "d20182"
        ]
    },
    {
        "instruction": "",
        "id": "q20183",
        "input": "check if a date is valid python",
        "output": "",
        "rule": [
            "d20183"
        ]
    },
    {
        "instruction": "",
        "id": "q20184",
        "input": "python spherical bessel functions",
        "output": "",
        "rule": [
            "d20184"
        ]
    },
    {
        "instruction": "",
        "id": "q20185",
        "input": "how to check a file is empty in python",
        "output": "",
        "rule": [
            "d20185"
        ]
    },
    {
        "instruction": "",
        "id": "q20186",
        "input": "python stop process multiprocessing",
        "output": "",
        "rule": [
            "d20186"
        ]
    },
    {
        "instruction": "",
        "id": "q20187",
        "input": "python make sure all words are separated by a single space",
        "output": "",
        "rule": [
            "d20187"
        ]
    },
    {
        "instruction": "",
        "id": "q20188",
        "input": "making a multidimensional array of only 1 in python",
        "output": "",
        "rule": [
            "d20188"
        ]
    },
    {
        "instruction": "",
        "id": "q20189",
        "input": "python initialize variable of an object",
        "output": "",
        "rule": [
            "d20189"
        ]
    },
    {
        "instruction": "",
        "id": "q20190",
        "input": "python elasticsearch limit results",
        "output": "",
        "rule": [
            "d20190"
        ]
    },
    {
        "instruction": "",
        "id": "q20191",
        "input": "how to force exit python without raise",
        "output": "",
        "rule": [
            "d20191"
        ]
    },
    {
        "instruction": "",
        "id": "q20192",
        "input": "python weak reference to bound method",
        "output": "",
        "rule": [
            "d20192"
        ]
    },
    {
        "instruction": "",
        "id": "q20193",
        "input": "calling index iterable python",
        "output": "",
        "rule": [
            "d20193"
        ]
    },
    {
        "instruction": "",
        "id": "q20194",
        "input": "python datetime maybe undefined",
        "output": "",
        "rule": [
            "d20194"
        ]
    },
    {
        "instruction": "",
        "id": "q20195",
        "input": "python go to next page",
        "output": "",
        "rule": [
            "d20195"
        ]
    },
    {
        "instruction": "",
        "id": "q20196",
        "input": "filling null value sin data frame in python",
        "output": "",
        "rule": [
            "d20196"
        ]
    },
    {
        "instruction": "",
        "id": "q20197",
        "input": "python run external command and get output",
        "output": "",
        "rule": [
            "d20197"
        ]
    },
    {
        "instruction": "",
        "id": "q20198",
        "input": "how to compile python program to use in c++",
        "output": "",
        "rule": [
            "d20198"
        ]
    },
    {
        "instruction": "",
        "id": "q20199",
        "input": "python img to bytearray",
        "output": "",
        "rule": [
            "d20199"
        ]
    },
    {
        "instruction": "",
        "id": "q20200",
        "input": "how to use access token oauth python",
        "output": "",
        "rule": [
            "d20200"
        ]
    },
    {
        "instruction": "",
        "id": "q20201",
        "input": "have python line continue on to next line",
        "output": "",
        "rule": [
            "d20201"
        ]
    },
    {
        "instruction": "",
        "id": "q20202",
        "input": "precision of ints in python",
        "output": "",
        "rule": [
            "d20202"
        ]
    },
    {
        "instruction": "",
        "id": "q20203",
        "input": "modify the dice roll program to call a function for the die roll s python",
        "output": "",
        "rule": [
            "d20203"
        ]
    },
    {
        "instruction": "",
        "id": "q20204",
        "input": "python 'namespace' object is not iterable",
        "output": "",
        "rule": [
            "d20204"
        ]
    },
    {
        "instruction": "",
        "id": "q20205",
        "input": "how to specify seed for python random",
        "output": "",
        "rule": [
            "d20205"
        ]
    },
    {
        "instruction": "",
        "id": "q20206",
        "input": "python use default arg",
        "output": "",
        "rule": [
            "d20206"
        ]
    },
    {
        "instruction": "",
        "id": "q20207",
        "input": "python change array dtype to int",
        "output": "",
        "rule": [
            "d20207"
        ]
    },
    {
        "instruction": "",
        "id": "q20208",
        "input": "python forcible close socket before opening",
        "output": "",
        "rule": [
            "d20208"
        ]
    },
    {
        "instruction": "",
        "id": "q20209",
        "input": "python series'value non zero index",
        "output": "",
        "rule": [
            "d20209"
        ]
    },
    {
        "instruction": "",
        "id": "q20210",
        "input": "how to add a number to certain elements of an array numpy python",
        "output": "",
        "rule": [
            "d20210"
        ]
    },
    {
        "instruction": "",
        "id": "q20211",
        "input": "python unit test and coverage at same time",
        "output": "",
        "rule": [
            "d20211"
        ]
    },
    {
        "instruction": "",
        "id": "q20212",
        "input": "python only list files with specific extension",
        "output": "",
        "rule": [
            "d20212"
        ]
    },
    {
        "instruction": "",
        "id": "q20213",
        "input": "python global type hinting",
        "output": "",
        "rule": [
            "d20213"
        ]
    },
    {
        "instruction": "",
        "id": "q20214",
        "input": "how to make a function in python to take the average of list numbers",
        "output": "",
        "rule": [
            "d20214"
        ]
    },
    {
        "instruction": "",
        "id": "q20215",
        "input": "check if two arrays are equal python",
        "output": "",
        "rule": [
            "d20215"
        ]
    },
    {
        "instruction": "",
        "id": "q20216",
        "input": "python round down numpy",
        "output": "",
        "rule": [
            "d20216"
        ]
    },
    {
        "instruction": "",
        "id": "q20217",
        "input": "python pywin32 screenshoot refresh",
        "output": "",
        "rule": [
            "d20217"
        ]
    },
    {
        "instruction": "",
        "id": "q20218",
        "input": "get largest date from a list python",
        "output": "",
        "rule": [
            "d20218"
        ]
    },
    {
        "instruction": "",
        "id": "q20219",
        "input": "python lock no blocking",
        "output": "",
        "rule": [
            "d20219"
        ]
    },
    {
        "instruction": "",
        "id": "q20220",
        "input": "delete item from a set python",
        "output": "",
        "rule": [
            "d20220"
        ]
    },
    {
        "instruction": "",
        "id": "q20221",
        "input": "how to make a sentence into underscores with python",
        "output": "",
        "rule": [
            "d20221"
        ]
    },
    {
        "instruction": "",
        "id": "q20222",
        "input": "python timestamp remove timezone",
        "output": "",
        "rule": [
            "d20222"
        ]
    },
    {
        "instruction": "",
        "id": "q20223",
        "input": "python sanic change all object id to string",
        "output": "",
        "rule": [
            "d20223"
        ]
    },
    {
        "instruction": "",
        "id": "q20224",
        "input": "python mock mark a test as expected failure",
        "output": "",
        "rule": [
            "d20224"
        ]
    },
    {
        "instruction": "",
        "id": "q20225",
        "input": "python get current users desktop",
        "output": "",
        "rule": [
            "d20225"
        ]
    },
    {
        "instruction": "",
        "id": "q20226",
        "input": "python connect to redis in other docker container",
        "output": "",
        "rule": [
            "d20226"
        ]
    },
    {
        "instruction": "",
        "id": "q20227",
        "input": "python subplot second y axis",
        "output": "",
        "rule": [
            "d20227"
        ]
    },
    {
        "instruction": "",
        "id": "q20228",
        "input": "python function to detect first element of list",
        "output": "",
        "rule": [
            "d20228"
        ]
    },
    {
        "instruction": "",
        "id": "q20229",
        "input": "how to flip a matrix in python",
        "output": "",
        "rule": [
            "d20229"
        ]
    },
    {
        "instruction": "",
        "id": "q20230",
        "input": "python full name of object from global",
        "output": "",
        "rule": [
            "d20230"
        ]
    },
    {
        "instruction": "",
        "id": "q20231",
        "input": "check if input is an integer or boolean python",
        "output": "",
        "rule": [
            "d20231"
        ]
    },
    {
        "instruction": "",
        "id": "q20232",
        "input": "storing columns as array python",
        "output": "",
        "rule": [
            "d20232"
        ]
    },
    {
        "instruction": "",
        "id": "q20233",
        "input": "create column in python by joining columns",
        "output": "",
        "rule": [
            "d20233"
        ]
    },
    {
        "instruction": "",
        "id": "q20234",
        "input": "how to remove blank lines in python file",
        "output": "",
        "rule": [
            "d20234"
        ]
    },
    {
        "instruction": "",
        "id": "q20235",
        "input": "how to know size of queue in python",
        "output": "",
        "rule": [
            "d20235"
        ]
    },
    {
        "instruction": "",
        "id": "q20236",
        "input": "python substring index of",
        "output": "",
        "rule": [
            "d20236"
        ]
    },
    {
        "instruction": "",
        "id": "q20237",
        "input": "comparing int to none python",
        "output": "",
        "rule": [
            "d20237"
        ]
    },
    {
        "instruction": "",
        "id": "q20238",
        "input": "json to protobuf python",
        "output": "",
        "rule": [
            "d20238"
        ]
    },
    {
        "instruction": "",
        "id": "q20239",
        "input": "how to join 2 data frames in python",
        "output": "",
        "rule": [
            "d20239"
        ]
    },
    {
        "instruction": "",
        "id": "q20240",
        "input": "how to product of a list in python",
        "output": "",
        "rule": [
            "d20240"
        ]
    },
    {
        "instruction": "",
        "id": "q20241",
        "input": "get all dates between range datetime python",
        "output": "",
        "rule": [
            "d20241"
        ]
    },
    {
        "instruction": "",
        "id": "q20242",
        "input": "python access file on remote",
        "output": "",
        "rule": [
            "d20242"
        ]
    },
    {
        "instruction": "",
        "id": "q20243",
        "input": "how to download txt file from internet in python",
        "output": "",
        "rule": [
            "d20243"
        ]
    },
    {
        "instruction": "",
        "id": "q20244",
        "input": "stopwords list remove python",
        "output": "",
        "rule": [
            "d20244"
        ]
    },
    {
        "instruction": "",
        "id": "q20245",
        "input": "limit on open file handles in python",
        "output": "",
        "rule": [
            "d20245"
        ]
    },
    {
        "instruction": "",
        "id": "q20246",
        "input": "determine the longest sentence in corpus in nlp python ocde",
        "output": "",
        "rule": [
            "d20246"
        ]
    },
    {
        "instruction": "",
        "id": "q20247",
        "input": "python deterministic dictionary printing",
        "output": "",
        "rule": [
            "d20247"
        ]
    },
    {
        "instruction": "",
        "id": "q20248",
        "input": "remove namespace from xml tag python",
        "output": "",
        "rule": [
            "d20248"
        ]
    },
    {
        "instruction": "",
        "id": "q20249",
        "input": "fill is null with other columns python",
        "output": "",
        "rule": [
            "d20249"
        ]
    },
    {
        "instruction": "",
        "id": "q20250",
        "input": "python async input from gui",
        "output": "",
        "rule": [
            "d20250"
        ]
    },
    {
        "instruction": "",
        "id": "q20251",
        "input": "how to identify the index of an element of a set in python",
        "output": "",
        "rule": [
            "d20251"
        ]
    },
    {
        "instruction": "",
        "id": "q20252",
        "input": "python 3 print object string",
        "output": "",
        "rule": [
            "d20252"
        ]
    },
    {
        "instruction": "",
        "id": "q20253",
        "input": "python get most recent file containing string",
        "output": "",
        "rule": [
            "d20253"
        ]
    },
    {
        "instruction": "",
        "id": "q20254",
        "input": "python sqlite3 delete doesn't delete records",
        "output": "",
        "rule": [
            "d20254"
        ]
    },
    {
        "instruction": "",
        "id": "q20255",
        "input": "python apply function to iterator",
        "output": "",
        "rule": [
            "d20255"
        ]
    },
    {
        "instruction": "",
        "id": "q20256",
        "input": "use python next to iterate through",
        "output": "",
        "rule": [
            "d20256"
        ]
    },
    {
        "instruction": "",
        "id": "q20257",
        "input": "how to print all the variables in an object python",
        "output": "",
        "rule": [
            "d20257"
        ]
    },
    {
        "instruction": "",
        "id": "q20258",
        "input": "how to determine the index interval for given range of array python",
        "output": "",
        "rule": [
            "d20258"
        ]
    },
    {
        "instruction": "",
        "id": "q20259",
        "input": "python print numpy array with string",
        "output": "",
        "rule": [
            "d20259"
        ]
    },
    {
        "instruction": "",
        "id": "q20260",
        "input": "python assert value is of type",
        "output": "",
        "rule": [
            "d20260"
        ]
    },
    {
        "instruction": "",
        "id": "q20261",
        "input": "python multiproccessing map with multiple inputs",
        "output": "",
        "rule": [
            "d20261"
        ]
    },
    {
        "instruction": "",
        "id": "q20262",
        "input": "python add suffix to filename",
        "output": "",
        "rule": [
            "d20262"
        ]
    },
    {
        "instruction": "",
        "id": "q20263",
        "input": "best way to deal with pagination in python",
        "output": "",
        "rule": [
            "d20263"
        ]
    },
    {
        "instruction": "",
        "id": "q20264",
        "input": "finding factors in python and return list",
        "output": "",
        "rule": [
            "d20264"
        ]
    },
    {
        "instruction": "",
        "id": "q20265",
        "input": "best way to read xml in python",
        "output": "",
        "rule": [
            "d20265"
        ]
    },
    {
        "instruction": "",
        "id": "q20266",
        "input": "how to put a string in a yaml file python",
        "output": "",
        "rule": [
            "d20266"
        ]
    },
    {
        "instruction": "",
        "id": "q20267",
        "input": "python move cursor to secific line",
        "output": "",
        "rule": [
            "d20267"
        ]
    },
    {
        "instruction": "",
        "id": "q20268",
        "input": "token to id python",
        "output": "",
        "rule": [
            "d20268"
        ]
    },
    {
        "instruction": "",
        "id": "q20269",
        "input": "python urlparse get domain",
        "output": "",
        "rule": [
            "d20269"
        ]
    },
    {
        "instruction": "",
        "id": "q20270",
        "input": "python turn a string into a number",
        "output": "",
        "rule": [
            "d20270"
        ]
    },
    {
        "instruction": "",
        "id": "q20271",
        "input": "python check if all are type string in a column",
        "output": "",
        "rule": [
            "d20271"
        ]
    },
    {
        "instruction": "",
        "id": "q20272",
        "input": "bin means python numpy",
        "output": "",
        "rule": [
            "d20272"
        ]
    },
    {
        "instruction": "",
        "id": "q20273",
        "input": "python boto3 delete key from s3",
        "output": "",
        "rule": [
            "d20273"
        ]
    },
    {
        "instruction": "",
        "id": "q20274",
        "input": "random walk steps python",
        "output": "",
        "rule": [
            "d20274"
        ]
    },
    {
        "instruction": "",
        "id": "q20275",
        "input": "python delete objects inside of objects",
        "output": "",
        "rule": [
            "d20275"
        ]
    },
    {
        "instruction": "",
        "id": "q20276",
        "input": "truncate seconds from a timestamp in python code",
        "output": "",
        "rule": [
            "d20276"
        ]
    },
    {
        "instruction": "",
        "id": "q20277",
        "input": "python json load unorde",
        "output": "",
        "rule": [
            "d20277"
        ]
    },
    {
        "instruction": "",
        "id": "q20278",
        "input": "python yaml expected single document",
        "output": "",
        "rule": [
            "d20278"
        ]
    },
    {
        "instruction": "",
        "id": "q20279",
        "input": "python filter object at",
        "output": "",
        "rule": [
            "d20279"
        ]
    },
    {
        "instruction": "",
        "id": "q20280",
        "input": "python nonetype object has no attributte",
        "output": "",
        "rule": [
            "d20280"
        ]
    },
    {
        "instruction": "",
        "id": "q20281",
        "input": "python tkinter how to create scrollable canvas",
        "output": "",
        "rule": [
            "d20281"
        ]
    },
    {
        "instruction": "",
        "id": "q20282",
        "input": "geojson to topojson python",
        "output": "",
        "rule": [
            "d20282"
        ]
    },
    {
        "instruction": "",
        "id": "q20283",
        "input": "python get png image dimensions",
        "output": "",
        "rule": [
            "d20283"
        ]
    },
    {
        "instruction": "",
        "id": "q20284",
        "input": "python flask separate functions get and post",
        "output": "",
        "rule": [
            "d20284"
        ]
    },
    {
        "instruction": "",
        "id": "q20285",
        "input": "return year from date python",
        "output": "",
        "rule": [
            "d20285"
        ]
    },
    {
        "instruction": "",
        "id": "q20286",
        "input": "how to get all modes python",
        "output": "",
        "rule": [
            "d20286"
        ]
    },
    {
        "instruction": "",
        "id": "q20287",
        "input": "integer and returns a random bitstring of size python",
        "output": "",
        "rule": [
            "d20287"
        ]
    },
    {
        "instruction": "",
        "id": "q20288",
        "input": "how to get the encoding of a file python",
        "output": "",
        "rule": [
            "d20288"
        ]
    },
    {
        "instruction": "",
        "id": "q20289",
        "input": "python connect to aws rds",
        "output": "",
        "rule": [
            "d20289"
        ]
    },
    {
        "instruction": "",
        "id": "q20290",
        "input": "python cv2 check if image is empty",
        "output": "",
        "rule": [
            "d20290"
        ]
    },
    {
        "instruction": "",
        "id": "q20291",
        "input": "how to hide a window using a button in python",
        "output": "",
        "rule": [
            "d20291"
        ]
    },
    {
        "instruction": "",
        "id": "q20292",
        "input": "python marshmallow validation schema from parent",
        "output": "",
        "rule": [
            "d20292"
        ]
    },
    {
        "instruction": "",
        "id": "q20293",
        "input": "fillna with string for specific columnin python",
        "output": "",
        "rule": [
            "d20293"
        ]
    },
    {
        "instruction": "",
        "id": "q20294",
        "input": "how to separate list elements by white space python",
        "output": "",
        "rule": [
            "d20294"
        ]
    },
    {
        "instruction": "",
        "id": "q20295",
        "input": "how to default value in python",
        "output": "",
        "rule": [
            "d20295"
        ]
    },
    {
        "instruction": "",
        "id": "q20296",
        "input": "python dict keys lowercase",
        "output": "",
        "rule": [
            "d20296"
        ]
    },
    {
        "instruction": "",
        "id": "q20297",
        "input": "python get index of list values that equal",
        "output": "",
        "rule": [
            "d20297"
        ]
    },
    {
        "instruction": "",
        "id": "q20298",
        "input": "python requests logging not work",
        "output": "",
        "rule": [
            "d20298"
        ]
    },
    {
        "instruction": "",
        "id": "q20299",
        "input": "python static files flask",
        "output": "",
        "rule": [
            "d20299"
        ]
    },
    {
        "instruction": "",
        "id": "q20300",
        "input": "rest json schema validation python",
        "output": "",
        "rule": [
            "d20300"
        ]
    },
    {
        "instruction": "",
        "id": "q20301",
        "input": "write in bold and read in color of the print mesaage in python",
        "output": "",
        "rule": [
            "d20301"
        ]
    },
    {
        "instruction": "",
        "id": "q20302",
        "input": "python type cast to bigint",
        "output": "",
        "rule": [
            "d20302"
        ]
    },
    {
        "instruction": "",
        "id": "q20303",
        "input": "converts matrix to pictures by python",
        "output": "",
        "rule": [
            "d20303"
        ]
    },
    {
        "instruction": "",
        "id": "q20304",
        "input": "python random selection from function",
        "output": "",
        "rule": [
            "d20304"
        ]
    },
    {
        "instruction": "",
        "id": "q20305",
        "input": "python keep processpool open until tasks complete",
        "output": "",
        "rule": [
            "d20305"
        ]
    },
    {
        "instruction": "",
        "id": "q20306",
        "input": "running a def a specified amount of time python 3",
        "output": "",
        "rule": [
            "d20306"
        ]
    },
    {
        "instruction": "",
        "id": "q20307",
        "input": "python str to dateal time",
        "output": "",
        "rule": [
            "d20307"
        ]
    },
    {
        "instruction": "",
        "id": "q20308",
        "input": "python check if file is executable",
        "output": "",
        "rule": [
            "d20308"
        ]
    },
    {
        "instruction": "",
        "id": "q20309",
        "input": "python how to check the queue lenght",
        "output": "",
        "rule": [
            "d20309"
        ]
    },
    {
        "instruction": "",
        "id": "q20310",
        "input": "query server objects ldap in python",
        "output": "",
        "rule": [
            "d20310"
        ]
    },
    {
        "instruction": "",
        "id": "q20311",
        "input": "python docx document section different page",
        "output": "",
        "rule": [
            "d20311"
        ]
    },
    {
        "instruction": "",
        "id": "q20312",
        "input": "write a json object to file python",
        "output": "",
        "rule": [
            "d20312"
        ]
    },
    {
        "instruction": "",
        "id": "q20313",
        "input": "how to compute the minimum value of a tensor in python",
        "output": "",
        "rule": [
            "d20313"
        ]
    },
    {
        "instruction": "",
        "id": "q20314",
        "input": "python unittest how to assert 2 lists are almost equal",
        "output": "",
        "rule": [
            "d20314"
        ]
    },
    {
        "instruction": "",
        "id": "q20315",
        "input": "how to check if 2 inputs are equal in python assert equal",
        "output": "",
        "rule": [
            "d20315"
        ]
    },
    {
        "instruction": "",
        "id": "q20316",
        "input": "python loop through proxies request",
        "output": "",
        "rule": [
            "d20316"
        ]
    },
    {
        "instruction": "",
        "id": "q20317",
        "input": "python loess with gaussian kernel",
        "output": "",
        "rule": [
            "d20317"
        ]
    },
    {
        "instruction": "",
        "id": "q20318",
        "input": "greatest common divisor function in python",
        "output": "",
        "rule": [
            "d20318"
        ]
    },
    {
        "instruction": "",
        "id": "q20319",
        "input": "how to clear up memory python",
        "output": "",
        "rule": [
            "d20319"
        ]
    },
    {
        "instruction": "",
        "id": "q20320",
        "input": "get eucliedan distance between two vectors python",
        "output": "",
        "rule": [
            "d20320"
        ]
    },
    {
        "instruction": "",
        "id": "q20321",
        "input": "python interactive shell color",
        "output": "",
        "rule": [
            "d20321"
        ]
    },
    {
        "instruction": "",
        "id": "q20322",
        "input": "passing a range of values python years",
        "output": "",
        "rule": [
            "d20322"
        ]
    },
    {
        "instruction": "",
        "id": "q20323",
        "input": "python yaml for each key value",
        "output": "",
        "rule": [
            "d20323"
        ]
    },
    {
        "instruction": "",
        "id": "q20324",
        "input": "python test if value is ctypes array",
        "output": "",
        "rule": [
            "d20324"
        ]
    },
    {
        "instruction": "",
        "id": "q20325",
        "input": "function return apply async python",
        "output": "",
        "rule": [
            "d20325"
        ]
    },
    {
        "instruction": "",
        "id": "q20326",
        "input": "reload device program code in python",
        "output": "",
        "rule": [
            "d20326"
        ]
    },
    {
        "instruction": "",
        "id": "q20327",
        "input": "split string into n parts python",
        "output": "",
        "rule": [
            "d20327"
        ]
    },
    {
        "instruction": "",
        "id": "q20328",
        "input": "python get object as dict",
        "output": "",
        "rule": [
            "d20328"
        ]
    },
    {
        "instruction": "",
        "id": "q20329",
        "input": "selecting a range of 2d elements from a numpy array gives empty array in python 3",
        "output": "",
        "rule": [
            "d20329"
        ]
    },
    {
        "instruction": "",
        "id": "q20330",
        "input": "python read tokens from line",
        "output": "",
        "rule": [
            "d20330"
        ]
    },
    {
        "instruction": "",
        "id": "q20331",
        "input": "write data into fits file python",
        "output": "",
        "rule": [
            "d20331"
        ]
    },
    {
        "instruction": "",
        "id": "q20332",
        "input": "python print string with visible ansi codes",
        "output": "",
        "rule": [
            "d20332"
        ]
    },
    {
        "instruction": "",
        "id": "q20333",
        "input": "python check if value in enum",
        "output": "",
        "rule": [
            "d20333"
        ]
    },
    {
        "instruction": "",
        "id": "q20334",
        "input": "python sqlite table names in database",
        "output": "",
        "rule": [
            "d20334"
        ]
    },
    {
        "instruction": "",
        "id": "q20335",
        "input": "how to remove all element from a python dictionary",
        "output": "",
        "rule": [
            "d20335"
        ]
    },
    {
        "instruction": "",
        "id": "q20336",
        "input": "python parse query string from url",
        "output": "",
        "rule": [
            "d20336"
        ]
    },
    {
        "instruction": "",
        "id": "q20337",
        "input": "python remove element set",
        "output": "",
        "rule": [
            "d20337"
        ]
    },
    {
        "instruction": "",
        "id": "q20338",
        "input": "manhattan distance in python using longitude and latitude",
        "output": "",
        "rule": [
            "d20338"
        ]
    },
    {
        "instruction": "",
        "id": "q20339",
        "input": "how to read from a file to a list python",
        "output": "",
        "rule": [
            "d20339"
        ]
    },
    {
        "instruction": "",
        "id": "q20340",
        "input": "dynamically update value in dictionary python",
        "output": "",
        "rule": [
            "d20340"
        ]
    },
    {
        "instruction": "",
        "id": "q20341",
        "input": "python replace string from right",
        "output": "",
        "rule": [
            "d20341"
        ]
    },
    {
        "instruction": "",
        "id": "q20342",
        "input": "how to check if a path is writeable python",
        "output": "",
        "rule": [
            "d20342"
        ]
    },
    {
        "instruction": "",
        "id": "q20343",
        "input": "get attribute type in python",
        "output": "",
        "rule": [
            "d20343"
        ]
    },
    {
        "instruction": "",
        "id": "q20344",
        "input": "get fields of object python",
        "output": "",
        "rule": [
            "d20344"
        ]
    },
    {
        "instruction": "",
        "id": "q20345",
        "input": "how to fetch one value from one row from mysql query in python",
        "output": "",
        "rule": [
            "d20345"
        ]
    },
    {
        "instruction": "",
        "id": "q20346",
        "input": "python flask routes add",
        "output": "",
        "rule": [
            "d20346"
        ]
    },
    {
        "instruction": "",
        "id": "q20347",
        "input": "define function arg type and default values python",
        "output": "",
        "rule": [
            "d20347"
        ]
    },
    {
        "instruction": "",
        "id": "q20348",
        "input": "python image shape detect",
        "output": "",
        "rule": [
            "d20348"
        ]
    },
    {
        "instruction": "",
        "id": "q20349",
        "input": "what can iterators be iterated only once in python",
        "output": "",
        "rule": [
            "d20349"
        ]
    },
    {
        "instruction": "",
        "id": "q20350",
        "input": "remove all characters in string in python",
        "output": "",
        "rule": [
            "d20350"
        ]
    },
    {
        "instruction": "",
        "id": "q20351",
        "input": "python circle in a square bitmap array",
        "output": "",
        "rule": [
            "d20351"
        ]
    },
    {
        "instruction": "",
        "id": "q20352",
        "input": "location of maya python exe",
        "output": "",
        "rule": [
            "d20352"
        ]
    },
    {
        "instruction": "",
        "id": "q20353",
        "input": "how to make letters uppercase in python skipping spaces",
        "output": "",
        "rule": [
            "d20353"
        ]
    },
    {
        "instruction": "",
        "id": "q20354",
        "input": "python delete element from set",
        "output": "",
        "rule": [
            "d20354"
        ]
    },
    {
        "instruction": "",
        "id": "q20355",
        "input": "python get current git branch",
        "output": "",
        "rule": [
            "d20355"
        ]
    },
    {
        "instruction": "",
        "id": "q20356",
        "input": "how to make a restart button using python",
        "output": "",
        "rule": [
            "d20356"
        ]
    },
    {
        "instruction": "",
        "id": "q20357",
        "input": "tracing python code execution",
        "output": "",
        "rule": [
            "d20357"
        ]
    },
    {
        "instruction": "",
        "id": "q20358",
        "input": "delete pyc files from python script",
        "output": "",
        "rule": [
            "d20358"
        ]
    },
    {
        "instruction": "",
        "id": "q20359",
        "input": "sleep holding up python",
        "output": "",
        "rule": [
            "d20359"
        ]
    },
    {
        "instruction": "",
        "id": "q20360",
        "input": "traversal in tree in python",
        "output": "",
        "rule": [
            "d20360"
        ]
    },
    {
        "instruction": "",
        "id": "q20361",
        "input": "timing a function call python",
        "output": "",
        "rule": [
            "d20361"
        ]
    },
    {
        "instruction": "",
        "id": "q20362",
        "input": "python how to stop playsound",
        "output": "",
        "rule": [
            "d20362"
        ]
    },
    {
        "instruction": "",
        "id": "q20363",
        "input": "python change dictioinary values in place",
        "output": "",
        "rule": [
            "d20363"
        ]
    },
    {
        "instruction": "",
        "id": "q20364",
        "input": "can i pass instance method as variable python",
        "output": "",
        "rule": [
            "d20364"
        ]
    },
    {
        "instruction": "",
        "id": "q20365",
        "input": "pickle python read entiere file",
        "output": "",
        "rule": [
            "d20365"
        ]
    },
    {
        "instruction": "",
        "id": "q20366",
        "input": "should there be equal no of columns to concanate two df python",
        "output": "",
        "rule": [
            "d20366"
        ]
    },
    {
        "instruction": "",
        "id": "q20367",
        "input": "python flatten deep nested list",
        "output": "",
        "rule": [
            "d20367"
        ]
    },
    {
        "instruction": "",
        "id": "q20368",
        "input": "how to show a variable amount of precision in python string format",
        "output": "",
        "rule": [
            "d20368"
        ]
    },
    {
        "instruction": "",
        "id": "q20369",
        "input": "python array get element by index with default",
        "output": "",
        "rule": [
            "d20369"
        ]
    },
    {
        "instruction": "",
        "id": "q20370",
        "input": "check if string is int in python",
        "output": "",
        "rule": [
            "d20370"
        ]
    },
    {
        "instruction": "",
        "id": "q20371",
        "input": "how to change numpy array to list in python",
        "output": "",
        "rule": [
            "d20371"
        ]
    },
    {
        "instruction": "",
        "id": "q20372",
        "input": "read a file into a set python",
        "output": "",
        "rule": [
            "d20372"
        ]
    },
    {
        "instruction": "",
        "id": "q20373",
        "input": "python round float to int",
        "output": "",
        "rule": [
            "d20373"
        ]
    },
    {
        "instruction": "",
        "id": "q20374",
        "input": "how to write a parser on python",
        "output": "",
        "rule": [
            "d20374"
        ]
    },
    {
        "instruction": "",
        "id": "q20375",
        "input": "python dict with keys no value",
        "output": "",
        "rule": [
            "d20375"
        ]
    },
    {
        "instruction": "",
        "id": "q20376",
        "input": "how to remove blank lines from a text file in python",
        "output": "",
        "rule": [
            "d20376"
        ]
    },
    {
        "instruction": "",
        "id": "q20377",
        "input": "how to hash a binary file in python",
        "output": "",
        "rule": [
            "d20377"
        ]
    },
    {
        "instruction": "",
        "id": "q20378",
        "input": "python get function keyword names",
        "output": "",
        "rule": [
            "d20378"
        ]
    },
    {
        "instruction": "",
        "id": "q20379",
        "input": "iterate through words in text file python",
        "output": "",
        "rule": [
            "d20379"
        ]
    },
    {
        "instruction": "",
        "id": "q20380",
        "input": "python make a put request to restful endpoint",
        "output": "",
        "rule": [
            "d20380"
        ]
    },
    {
        "instruction": "",
        "id": "q20381",
        "input": "python get the id of the current thread",
        "output": "",
        "rule": [
            "d20381"
        ]
    },
    {
        "instruction": "",
        "id": "q20382",
        "input": "python function returning a list of all entities is called",
        "output": "",
        "rule": [
            "d20382"
        ]
    },
    {
        "instruction": "",
        "id": "q20383",
        "input": "how to flat a list of list python",
        "output": "",
        "rule": [
            "d20383"
        ]
    },
    {
        "instruction": "",
        "id": "q20384",
        "input": "python read yaml to numpy",
        "output": "",
        "rule": [
            "d20384"
        ]
    },
    {
        "instruction": "",
        "id": "q20385",
        "input": "discord python get user from id string",
        "output": "",
        "rule": [
            "d20385"
        ]
    },
    {
        "instruction": "",
        "id": "q20386",
        "input": "list of arbitrary objects to counts in python",
        "output": "",
        "rule": [
            "d20386"
        ]
    },
    {
        "instruction": "",
        "id": "q20387",
        "input": "how to know queue size in python",
        "output": "",
        "rule": [
            "d20387"
        ]
    },
    {
        "instruction": "",
        "id": "q20388",
        "input": "impute missing values in python",
        "output": "",
        "rule": [
            "d20388"
        ]
    },
    {
        "instruction": "",
        "id": "q20389",
        "input": "python dict rank by value",
        "output": "",
        "rule": [
            "d20389"
        ]
    },
    {
        "instruction": "",
        "id": "q20390",
        "input": "generate short unique id python",
        "output": "",
        "rule": [
            "d20390"
        ]
    },
    {
        "instruction": "",
        "id": "q20391",
        "input": "python numpy inverse of the matrix",
        "output": "",
        "rule": [
            "d20391"
        ]
    },
    {
        "instruction": "",
        "id": "q20392",
        "input": "python how to mix backslash and forward slashes in path",
        "output": "",
        "rule": [
            "d20392"
        ]
    },
    {
        "instruction": "",
        "id": "q20393",
        "input": "reduce functon not defined in python",
        "output": "",
        "rule": [
            "d20393"
        ]
    },
    {
        "instruction": "",
        "id": "q20394",
        "input": "python detect key press linux",
        "output": "",
        "rule": [
            "d20394"
        ]
    },
    {
        "instruction": "",
        "id": "q20395",
        "input": "how to generate random binary tree in python",
        "output": "",
        "rule": [
            "d20395"
        ]
    },
    {
        "instruction": "",
        "id": "q20396",
        "input": "python get epoch milis from datetime",
        "output": "",
        "rule": [
            "d20396"
        ]
    },
    {
        "instruction": "",
        "id": "q20397",
        "input": "python get environ user windows",
        "output": "",
        "rule": [
            "d20397"
        ]
    },
    {
        "instruction": "",
        "id": "q20398",
        "input": "iterator is past the end python",
        "output": "",
        "rule": [
            "d20398"
        ]
    },
    {
        "instruction": "",
        "id": "q20399",
        "input": "python if file not exist then creat",
        "output": "",
        "rule": [
            "d20399"
        ]
    },
    {
        "instruction": "",
        "id": "q20400",
        "input": "python howe to tell if path passed in is absolute or relative",
        "output": "",
        "rule": [
            "d20400"
        ]
    },
    {
        "instruction": "",
        "id": "q20401",
        "input": "maker a string lowercase pythong",
        "output": "",
        "rule": [
            "d20401"
        ]
    },
    {
        "instruction": "",
        "id": "q20402",
        "input": "python sys stdout write new line",
        "output": "",
        "rule": [
            "d20402"
        ]
    },
    {
        "instruction": "",
        "id": "q20403",
        "input": "python how to create a iterable",
        "output": "",
        "rule": [
            "d20403"
        ]
    },
    {
        "instruction": "",
        "id": "q20404",
        "input": "how to use python function in tensorflow",
        "output": "",
        "rule": [
            "d20404"
        ]
    },
    {
        "instruction": "",
        "id": "q20405",
        "input": "python how to get range of array with positive values numpy",
        "output": "",
        "rule": [
            "d20405"
        ]
    },
    {
        "instruction": "",
        "id": "q20406",
        "input": "python 3 a build string from iterable",
        "output": "",
        "rule": [
            "d20406"
        ]
    },
    {
        "instruction": "",
        "id": "q20407",
        "input": "unchecking a radio button python",
        "output": "",
        "rule": [
            "d20407"
        ]
    },
    {
        "instruction": "",
        "id": "q20408",
        "input": "python expected type sized",
        "output": "",
        "rule": [
            "d20408"
        ]
    },
    {
        "instruction": "",
        "id": "q20409",
        "input": "python load csv to numpy array",
        "output": "",
        "rule": [
            "d20409"
        ]
    },
    {
        "instruction": "",
        "id": "q20410",
        "input": "python remove element from list time complexity",
        "output": "",
        "rule": [
            "d20410"
        ]
    },
    {
        "instruction": "",
        "id": "q20411",
        "input": "python property by string name",
        "output": "",
        "rule": [
            "d20411"
        ]
    },
    {
        "instruction": "",
        "id": "q20412",
        "input": "index of an entry in a list python",
        "output": "",
        "rule": [
            "d20412"
        ]
    },
    {
        "instruction": "",
        "id": "q20413",
        "input": "python how to determine if an iterable is iterable",
        "output": "",
        "rule": [
            "d20413"
        ]
    },
    {
        "instruction": "",
        "id": "q20414",
        "input": "python how to create date from string",
        "output": "",
        "rule": [
            "d20414"
        ]
    },
    {
        "instruction": "",
        "id": "q20415",
        "input": "how to append a line in a file in the middle of file in python",
        "output": "",
        "rule": [
            "d20415"
        ]
    },
    {
        "instruction": "",
        "id": "q20416",
        "input": "how to split a string by every character in python",
        "output": "",
        "rule": [
            "d20416"
        ]
    },
    {
        "instruction": "",
        "id": "q20417",
        "input": "python get index of element each time it appears in list",
        "output": "",
        "rule": [
            "d20417"
        ]
    },
    {
        "instruction": "",
        "id": "q20418",
        "input": "python how to make dot character",
        "output": "",
        "rule": [
            "d20418"
        ]
    },
    {
        "instruction": "",
        "id": "q20419",
        "input": "python heap top element",
        "output": "",
        "rule": [
            "d20419"
        ]
    },
    {
        "instruction": "",
        "id": "q20420",
        "input": "in python, how to print strings in different colours",
        "output": "",
        "rule": [
            "d20420"
        ]
    },
    {
        "instruction": "",
        "id": "q20421",
        "input": "python yield unsupported operand type(s)",
        "output": "",
        "rule": [
            "d20421"
        ]
    },
    {
        "instruction": "",
        "id": "q20422",
        "input": "how to sort files by filename python",
        "output": "",
        "rule": [
            "d20422"
        ]
    },
    {
        "instruction": "",
        "id": "q20423",
        "input": "how to change the axis range in a plot in python for subplots",
        "output": "",
        "rule": [
            "d20423"
        ]
    },
    {
        "instruction": "",
        "id": "q20424",
        "input": "python view vector to asimuth elevation",
        "output": "",
        "rule": [
            "d20424"
        ]
    },
    {
        "instruction": "",
        "id": "q20425",
        "input": "python sort data by variable",
        "output": "",
        "rule": [
            "d20425"
        ]
    },
    {
        "instruction": "",
        "id": "q20426",
        "input": "compute the middle index in list python",
        "output": "",
        "rule": [
            "d20426"
        ]
    },
    {
        "instruction": "",
        "id": "q20427",
        "input": "python josn dump to file",
        "output": "",
        "rule": [
            "d20427"
        ]
    },
    {
        "instruction": "",
        "id": "q20428",
        "input": "python remove condition apply to dict",
        "output": "",
        "rule": [
            "d20428"
        ]
    },
    {
        "instruction": "",
        "id": "q20429",
        "input": "python remove directory tree if no files",
        "output": "",
        "rule": [
            "d20429"
        ]
    },
    {
        "instruction": "",
        "id": "q20430",
        "input": "how to pop a node off a stack python",
        "output": "",
        "rule": [
            "d20430"
        ]
    },
    {
        "instruction": "",
        "id": "q20431",
        "input": "python open file with exclusive access permissions",
        "output": "",
        "rule": [
            "d20431"
        ]
    },
    {
        "instruction": "",
        "id": "q20432",
        "input": "python gevent combine multiprocessing",
        "output": "",
        "rule": [
            "d20432"
        ]
    },
    {
        "instruction": "",
        "id": "q20433",
        "input": "create copy that doesn't alter original python",
        "output": "",
        "rule": [
            "d20433"
        ]
    },
    {
        "instruction": "",
        "id": "q20434",
        "input": "remove trailing whitespace in python",
        "output": "",
        "rule": [
            "d20434"
        ]
    },
    {
        "instruction": "",
        "id": "q20435",
        "input": "python default menuitem select",
        "output": "",
        "rule": [
            "d20435"
        ]
    },
    {
        "instruction": "",
        "id": "q20436",
        "input": "get sort indexes in a list python",
        "output": "",
        "rule": [
            "d20436"
        ]
    },
    {
        "instruction": "",
        "id": "q20437",
        "input": "how to start a new line in python gui",
        "output": "",
        "rule": [
            "d20437"
        ]
    },
    {
        "instruction": "",
        "id": "q20438",
        "input": "how to get tuple of colors in image python",
        "output": "",
        "rule": [
            "d20438"
        ]
    },
    {
        "instruction": "",
        "id": "q20439",
        "input": "make datetime aware python",
        "output": "",
        "rule": [
            "d20439"
        ]
    },
    {
        "instruction": "",
        "id": "q20440",
        "input": "python dict drop empty",
        "output": "",
        "rule": [
            "d20440"
        ]
    },
    {
        "instruction": "",
        "id": "q20441",
        "input": "python pretty print without sort",
        "output": "",
        "rule": [
            "d20441"
        ]
    },
    {
        "instruction": "",
        "id": "q20442",
        "input": "python check if interactive",
        "output": "",
        "rule": [
            "d20442"
        ]
    },
    {
        "instruction": "",
        "id": "q20443",
        "input": "python pid determine existence",
        "output": "",
        "rule": [
            "d20443"
        ]
    },
    {
        "instruction": "",
        "id": "q20444",
        "input": "python pymongo insert without duplicatte",
        "output": "",
        "rule": [
            "d20444"
        ]
    },
    {
        "instruction": "",
        "id": "q20445",
        "input": "how to read json files with multiple object python",
        "output": "",
        "rule": [
            "d20445"
        ]
    },
    {
        "instruction": "",
        "id": "q20446",
        "input": "python discord leave voice channel",
        "output": "",
        "rule": [
            "d20446"
        ]
    },
    {
        "instruction": "",
        "id": "q20447",
        "input": "python unittest make tests discoverable",
        "output": "",
        "rule": [
            "d20447"
        ]
    },
    {
        "instruction": "",
        "id": "q20448",
        "input": "multiline text send message python",
        "output": "",
        "rule": [
            "d20448"
        ]
    },
    {
        "instruction": "",
        "id": "q20449",
        "input": "extract integers from string in python",
        "output": "",
        "rule": [
            "d20449"
        ]
    },
    {
        "instruction": "",
        "id": "q20450",
        "input": "python take a string after the title",
        "output": "",
        "rule": [
            "d20450"
        ]
    },
    {
        "instruction": "",
        "id": "q20451",
        "input": "how to randomly select rows in ndarray in python",
        "output": "",
        "rule": [
            "d20451"
        ]
    },
    {
        "instruction": "",
        "id": "q20452",
        "input": "how to open a file with a path in python",
        "output": "",
        "rule": [
            "d20452"
        ]
    },
    {
        "instruction": "",
        "id": "q20453",
        "input": "python count distance between two vectors",
        "output": "",
        "rule": [
            "d20453"
        ]
    },
    {
        "instruction": "",
        "id": "q20454",
        "input": "python get dimensions of list",
        "output": "",
        "rule": [
            "d20454"
        ]
    },
    {
        "instruction": "",
        "id": "q20455",
        "input": "python filter lowpass minmum cutoff frequency",
        "output": "",
        "rule": [
            "d20455"
        ]
    },
    {
        "instruction": "",
        "id": "q20456",
        "input": "python 3, seperate a string into a list at comma",
        "output": "",
        "rule": [
            "d20456"
        ]
    },
    {
        "instruction": "",
        "id": "q20457",
        "input": "how to delete an element in a python dictionary",
        "output": "",
        "rule": [
            "d20457"
        ]
    },
    {
        "instruction": "",
        "id": "q20458",
        "input": "how know if the box was selected in checkbox in python",
        "output": "",
        "rule": [
            "d20458"
        ]
    },
    {
        "instruction": "",
        "id": "q20459",
        "input": "standard scalar function in python",
        "output": "",
        "rule": [
            "d20459"
        ]
    },
    {
        "instruction": "",
        "id": "q20460",
        "input": "python random gaussian distribution noise",
        "output": "",
        "rule": [
            "d20460"
        ]
    },
    {
        "instruction": "",
        "id": "q20461",
        "input": "return the number of numeric attributes in python",
        "output": "",
        "rule": [
            "d20461"
        ]
    },
    {
        "instruction": "",
        "id": "q20462",
        "input": "python pil camera capture",
        "output": "",
        "rule": [
            "d20462"
        ]
    },
    {
        "instruction": "",
        "id": "q20463",
        "input": "python flask create cookie expiration",
        "output": "",
        "rule": [
            "d20463"
        ]
    },
    {
        "instruction": "",
        "id": "q20464",
        "input": "python sqlalchemy model *",
        "output": "",
        "rule": [
            "d20464"
        ]
    },
    {
        "instruction": "",
        "id": "q20465",
        "input": "python how to move to next command in for loop",
        "output": "",
        "rule": [
            "d20465"
        ]
    },
    {
        "instruction": "",
        "id": "q20466",
        "input": "python check if object is a char",
        "output": "",
        "rule": [
            "d20466"
        ]
    },
    {
        "instruction": "",
        "id": "q20467",
        "input": "how to achieve logarithmic complexity in python",
        "output": "",
        "rule": [
            "d20467"
        ]
    },
    {
        "instruction": "",
        "id": "q20468",
        "input": "python listbox scrollbar not tk",
        "output": "",
        "rule": [
            "d20468"
        ]
    },
    {
        "instruction": "",
        "id": "q20469",
        "input": "identify the most common number in an array python",
        "output": "",
        "rule": [
            "d20469"
        ]
    },
    {
        "instruction": "",
        "id": "q20470",
        "input": "pull multiple values to make table python",
        "output": "",
        "rule": [
            "d20470"
        ]
    },
    {
        "instruction": "",
        "id": "q20471",
        "input": "python adjust data to normal distribution",
        "output": "",
        "rule": [
            "d20471"
        ]
    },
    {
        "instruction": "",
        "id": "q20472",
        "input": "python check if float has no floating points",
        "output": "",
        "rule": [
            "d20472"
        ]
    },
    {
        "instruction": "",
        "id": "q20473",
        "input": "string remove the last blank python",
        "output": "",
        "rule": [
            "d20473"
        ]
    },
    {
        "instruction": "",
        "id": "q20474",
        "input": "python how to display object attributes",
        "output": "",
        "rule": [
            "d20474"
        ]
    },
    {
        "instruction": "",
        "id": "q20475",
        "input": "determine if a list of numbers contains duplicates python",
        "output": "",
        "rule": [
            "d20475"
        ]
    },
    {
        "instruction": "",
        "id": "q20476",
        "input": "python figure add title label size",
        "output": "",
        "rule": [
            "d20476"
        ]
    },
    {
        "instruction": "",
        "id": "q20477",
        "input": "python networkx longest path directed acyclic graph",
        "output": "",
        "rule": [
            "d20477"
        ]
    },
    {
        "instruction": "",
        "id": "q20478",
        "input": "how to take list as input in python seperated with spaces",
        "output": "",
        "rule": [
            "d20478"
        ]
    },
    {
        "instruction": "",
        "id": "q20479",
        "input": "is a list in python an array",
        "output": "",
        "rule": [
            "d20479"
        ]
    },
    {
        "instruction": "",
        "id": "q20480",
        "input": "python cosine similarity of two vectors",
        "output": "",
        "rule": [
            "d20480"
        ]
    },
    {
        "instruction": "",
        "id": "q20481",
        "input": "how to model a sphere python",
        "output": "",
        "rule": [
            "d20481"
        ]
    },
    {
        "instruction": "",
        "id": "q20482",
        "input": "how to check paths in python",
        "output": "",
        "rule": [
            "d20482"
        ]
    },
    {
        "instruction": "",
        "id": "q20483",
        "input": "python test truth value of list",
        "output": "",
        "rule": [
            "d20483"
        ]
    },
    {
        "instruction": "",
        "id": "q20484",
        "input": "python string value of enum",
        "output": "",
        "rule": [
            "d20484"
        ]
    },
    {
        "instruction": "",
        "id": "q20485",
        "input": "python create null pointer with ctypes",
        "output": "",
        "rule": [
            "d20485"
        ]
    },
    {
        "instruction": "",
        "id": "q20486",
        "input": "python md5 hash string",
        "output": "",
        "rule": [
            "d20486"
        ]
    },
    {
        "instruction": "",
        "id": "q20487",
        "input": "python how to match dictionarys",
        "output": "",
        "rule": [
            "d20487"
        ]
    },
    {
        "instruction": "",
        "id": "q20488",
        "input": "select elements from a list, then delete these elements in the original list python",
        "output": "",
        "rule": [
            "d20488"
        ]
    },
    {
        "instruction": "",
        "id": "q20489",
        "input": "pybool to c++ python 3",
        "output": "",
        "rule": [
            "d20489"
        ]
    },
    {
        "instruction": "",
        "id": "q20490",
        "input": "how to add a ? in python url",
        "output": "",
        "rule": [
            "d20490"
        ]
    },
    {
        "instruction": "",
        "id": "q20491",
        "input": "python how to check whether the process with pid exist",
        "output": "",
        "rule": [
            "d20491"
        ]
    },
    {
        "instruction": "",
        "id": "q20492",
        "input": "how to cehck if somethign is a constant python",
        "output": "",
        "rule": [
            "d20492"
        ]
    },
    {
        "instruction": "",
        "id": "q20493",
        "input": "python check if variable exists in locals",
        "output": "",
        "rule": [
            "d20493"
        ]
    },
    {
        "instruction": "",
        "id": "q20494",
        "input": "python filter a dictionary by value",
        "output": "",
        "rule": [
            "d20494"
        ]
    },
    {
        "instruction": "",
        "id": "q20495",
        "input": "read json file and turn into dictionary using python",
        "output": "",
        "rule": [
            "d20495"
        ]
    },
    {
        "instruction": "",
        "id": "q20496",
        "input": "python change the shape of list",
        "output": "",
        "rule": [
            "d20496"
        ]
    },
    {
        "instruction": "",
        "id": "q20497",
        "input": "how to get the datatypes in python",
        "output": "",
        "rule": [
            "d20497"
        ]
    },
    {
        "instruction": "",
        "id": "q20498",
        "input": "initializing an empty string with a size python",
        "output": "",
        "rule": [
            "d20498"
        ]
    },
    {
        "instruction": "",
        "id": "q20499",
        "input": "cast str as int in python",
        "output": "",
        "rule": [
            "d20499"
        ]
    },
    {
        "instruction": "",
        "id": "q20500",
        "input": "python, sql table column details",
        "output": "",
        "rule": [
            "d20500"
        ]
    },
    {
        "instruction": "",
        "id": "q20501",
        "input": "python pathlib to traverse directories",
        "output": "",
        "rule": [
            "d20501"
        ]
    },
    {
        "instruction": "",
        "id": "q20502",
        "input": "python create list of columns with their dtype",
        "output": "",
        "rule": [
            "d20502"
        ]
    },
    {
        "instruction": "",
        "id": "q20503",
        "input": "python turn all nested object to dict",
        "output": "",
        "rule": [
            "d20503"
        ]
    },
    {
        "instruction": "",
        "id": "q20504",
        "input": "python read dicom images",
        "output": "",
        "rule": [
            "d20504"
        ]
    },
    {
        "instruction": "",
        "id": "q20505",
        "input": "python making string lower case",
        "output": "",
        "rule": [
            "d20505"
        ]
    },
    {
        "instruction": "",
        "id": "q20506",
        "input": "how to implement a macro in python",
        "output": "",
        "rule": [
            "d20506"
        ]
    },
    {
        "instruction": "",
        "id": "q20507",
        "input": "python subprocess close stdin",
        "output": "",
        "rule": [
            "d20507"
        ]
    },
    {
        "instruction": "",
        "id": "q20508",
        "input": "sum within a comprehension python",
        "output": "",
        "rule": [
            "d20508"
        ]
    },
    {
        "instruction": "",
        "id": "q20509",
        "input": "python timedelta without microseconds",
        "output": "",
        "rule": [
            "d20509"
        ]
    },
    {
        "instruction": "",
        "id": "q20510",
        "input": "change python object to string",
        "output": "",
        "rule": [
            "d20510"
        ]
    },
    {
        "instruction": "",
        "id": "q20511",
        "input": "eit request header in python flask",
        "output": "",
        "rule": [
            "d20511"
        ]
    },
    {
        "instruction": "",
        "id": "q20512",
        "input": "python lower all elements in list",
        "output": "",
        "rule": [
            "d20512"
        ]
    },
    {
        "instruction": "",
        "id": "q20513",
        "input": "using sort to move element in to new position in list python",
        "output": "",
        "rule": [
            "d20513"
        ]
    },
    {
        "instruction": "",
        "id": "q20514",
        "input": "remove special characters from column names in python",
        "output": "",
        "rule": [
            "d20514"
        ]
    },
    {
        "instruction": "",
        "id": "q20515",
        "input": "calculate the average of a given list in python",
        "output": "",
        "rule": [
            "d20515"
        ]
    },
    {
        "instruction": "",
        "id": "q20516",
        "input": "past python git clone",
        "output": "",
        "rule": [
            "d20516"
        ]
    },
    {
        "instruction": "",
        "id": "q20517",
        "input": "python lambda function with 3 params",
        "output": "",
        "rule": [
            "d20517"
        ]
    },
    {
        "instruction": "",
        "id": "q20518",
        "input": "check for punctuation python",
        "output": "",
        "rule": [
            "d20518"
        ]
    },
    {
        "instruction": "",
        "id": "q20519",
        "input": "unsupported media type json python",
        "output": "",
        "rule": [
            "d20519"
        ]
    },
    {
        "instruction": "",
        "id": "q20520",
        "input": "python separate string to list",
        "output": "",
        "rule": [
            "d20520"
        ]
    },
    {
        "instruction": "",
        "id": "q20521",
        "input": "python remove phrase from list of strings",
        "output": "",
        "rule": [
            "d20521"
        ]
    },
    {
        "instruction": "",
        "id": "q20522",
        "input": "python fastest way to load data",
        "output": "",
        "rule": [
            "d20522"
        ]
    },
    {
        "instruction": "",
        "id": "q20523",
        "input": "add noise to the audio python",
        "output": "",
        "rule": [
            "d20523"
        ]
    },
    {
        "instruction": "",
        "id": "q20524",
        "input": "object with commas turned into list python",
        "output": "",
        "rule": [
            "d20524"
        ]
    },
    {
        "instruction": "",
        "id": "q20525",
        "input": "python set limits on x axis",
        "output": "",
        "rule": [
            "d20525"
        ]
    },
    {
        "instruction": "",
        "id": "q20526",
        "input": "is python ssl socket connection thread safe",
        "output": "",
        "rule": [
            "d20526"
        ]
    },
    {
        "instruction": "",
        "id": "q20527",
        "input": "python3 encode decode bytes",
        "output": "",
        "rule": [
            "d20527"
        ]
    },
    {
        "instruction": "",
        "id": "q20528",
        "input": "xsd file to python object",
        "output": "",
        "rule": [
            "d20528"
        ]
    },
    {
        "instruction": "",
        "id": "q20529",
        "input": "python expand a path",
        "output": "",
        "rule": [
            "d20529"
        ]
    },
    {
        "instruction": "",
        "id": "q20530",
        "input": "python flask template table example",
        "output": "",
        "rule": [
            "d20530"
        ]
    },
    {
        "instruction": "",
        "id": "q20531",
        "input": "how to check if object defined python",
        "output": "",
        "rule": [
            "d20531"
        ]
    },
    {
        "instruction": "",
        "id": "q20532",
        "input": "s3 sync between bucket python",
        "output": "",
        "rule": [
            "d20532"
        ]
    },
    {
        "instruction": "",
        "id": "q20533",
        "input": "change the position of 3d coordinate in python",
        "output": "",
        "rule": [
            "d20533"
        ]
    },
    {
        "instruction": "",
        "id": "q20534",
        "input": "python how to get the number of cores in a computer",
        "output": "",
        "rule": [
            "d20534"
        ]
    },
    {
        "instruction": "",
        "id": "q20535",
        "input": "python how to use pdb set trace",
        "output": "",
        "rule": [
            "d20535"
        ]
    },
    {
        "instruction": "",
        "id": "q20536",
        "input": "python dictionary url encode",
        "output": "",
        "rule": [
            "d20536"
        ]
    },
    {
        "instruction": "",
        "id": "q20537",
        "input": "how to check whether a string is int in python",
        "output": "",
        "rule": [
            "d20537"
        ]
    },
    {
        "instruction": "",
        "id": "q20538",
        "input": "python 3 change permission of file chmod",
        "output": "",
        "rule": [
            "d20538"
        ]
    },
    {
        "instruction": "",
        "id": "q20539",
        "input": "python gaussian filter array",
        "output": "",
        "rule": [
            "d20539"
        ]
    },
    {
        "instruction": "",
        "id": "q20540",
        "input": "how to cut off a calculated number to two decimals in python",
        "output": "",
        "rule": [
            "d20540"
        ]
    },
    {
        "instruction": "",
        "id": "q20541",
        "input": "replace many value at once in python",
        "output": "",
        "rule": [
            "d20541"
        ]
    },
    {
        "instruction": "",
        "id": "q20542",
        "input": "python numpy conver to float64",
        "output": "",
        "rule": [
            "d20542"
        ]
    },
    {
        "instruction": "",
        "id": "q20543",
        "input": "python how to rank a list object",
        "output": "",
        "rule": [
            "d20543"
        ]
    },
    {
        "instruction": "",
        "id": "q20544",
        "input": "how to check if file doesn't exist in python",
        "output": "",
        "rule": [
            "d20544"
        ]
    },
    {
        "instruction": "",
        "id": "q20545",
        "input": "how to get the parent directory in python",
        "output": "",
        "rule": [
            "d20545"
        ]
    },
    {
        "instruction": "",
        "id": "q20546",
        "input": "resize an image python pil",
        "output": "",
        "rule": [
            "d20546"
        ]
    },
    {
        "instruction": "",
        "id": "q20547",
        "input": "python boxplot data frame",
        "output": "",
        "rule": [
            "d20547"
        ]
    },
    {
        "instruction": "",
        "id": "q20548",
        "input": "python glpk read from lp file",
        "output": "",
        "rule": [
            "d20548"
        ]
    },
    {
        "instruction": "",
        "id": "q20549",
        "input": "python threadpool close join",
        "output": "",
        "rule": [
            "d20549"
        ]
    },
    {
        "instruction": "",
        "id": "q20550",
        "input": "python sklearn onehotencoder string values",
        "output": "",
        "rule": [
            "d20550"
        ]
    },
    {
        "instruction": "",
        "id": "q20551",
        "input": "python change to bytes",
        "output": "",
        "rule": [
            "d20551"
        ]
    },
    {
        "instruction": "",
        "id": "q20552",
        "input": "python json loads try",
        "output": "",
        "rule": [
            "d20552"
        ]
    },
    {
        "instruction": "",
        "id": "q20553",
        "input": "create an empty column in data frame python",
        "output": "",
        "rule": [
            "d20553"
        ]
    },
    {
        "instruction": "",
        "id": "q20554",
        "input": "remove whitespace at end of line in python",
        "output": "",
        "rule": [
            "d20554"
        ]
    },
    {
        "instruction": "",
        "id": "q20555",
        "input": "python file opening modes",
        "output": "",
        "rule": [
            "d20555"
        ]
    },
    {
        "instruction": "",
        "id": "q20556",
        "input": "python code input prompt for questions",
        "output": "",
        "rule": [
            "d20556"
        ]
    },
    {
        "instruction": "",
        "id": "q20557",
        "input": "python parse a log file that is logging",
        "output": "",
        "rule": [
            "d20557"
        ]
    },
    {
        "instruction": "",
        "id": "q20558",
        "input": "remove an entry from a dict python",
        "output": "",
        "rule": [
            "d20558"
        ]
    },
    {
        "instruction": "",
        "id": "q20559",
        "input": "new line statemnt pythong write",
        "output": "",
        "rule": [
            "d20559"
        ]
    },
    {
        "instruction": "",
        "id": "q20560",
        "input": "python view as series column format string",
        "output": "",
        "rule": [
            "d20560"
        ]
    },
    {
        "instruction": "",
        "id": "q20561",
        "input": "python select not null column values",
        "output": "",
        "rule": [
            "d20561"
        ]
    },
    {
        "instruction": "",
        "id": "q20562",
        "input": "how do functions in python know the parametr type",
        "output": "",
        "rule": [
            "d20562"
        ]
    },
    {
        "instruction": "",
        "id": "q20563",
        "input": "cursor positioning python windows",
        "output": "",
        "rule": [
            "d20563"
        ]
    },
    {
        "instruction": "",
        "id": "q20564",
        "input": "python how to equally space points in an ellipse",
        "output": "",
        "rule": [
            "d20564"
        ]
    },
    {
        "instruction": "",
        "id": "q20565",
        "input": "how to see how similar two images are in python",
        "output": "",
        "rule": [
            "d20565"
        ]
    },
    {
        "instruction": "",
        "id": "q20566",
        "input": "how to make a input to have no spaces in python\\",
        "output": "",
        "rule": [
            "d20566"
        ]
    },
    {
        "instruction": "",
        "id": "q20567",
        "input": "next line to read in python",
        "output": "",
        "rule": [
            "d20567"
        ]
    },
    {
        "instruction": "",
        "id": "q20568",
        "input": "move an item in list to front python",
        "output": "",
        "rule": [
            "d20568"
        ]
    },
    {
        "instruction": "",
        "id": "q20569",
        "input": "python wrap (s,w) print",
        "output": "",
        "rule": [
            "d20569"
        ]
    },
    {
        "instruction": "",
        "id": "q20570",
        "input": "how to check if missing values are blanks or nan or none in python",
        "output": "",
        "rule": [
            "d20570"
        ]
    },
    {
        "instruction": "",
        "id": "q20571",
        "input": "python to get the indices of bin edges",
        "output": "",
        "rule": [
            "d20571"
        ]
    },
    {
        "instruction": "",
        "id": "q20572",
        "input": "python comma separated value",
        "output": "",
        "rule": [
            "d20572"
        ]
    },
    {
        "instruction": "",
        "id": "q20573",
        "input": "python requests disable ssl certificate verification",
        "output": "",
        "rule": [
            "d20573"
        ]
    },
    {
        "instruction": "",
        "id": "q20574",
        "input": "python var and distribution of probability",
        "output": "",
        "rule": [
            "d20574"
        ]
    },
    {
        "instruction": "",
        "id": "q20575",
        "input": "how to determine it's a orthogonal matrix using python",
        "output": "",
        "rule": [
            "d20575"
        ]
    },
    {
        "instruction": "",
        "id": "q20576",
        "input": "strip html tags in python",
        "output": "",
        "rule": [
            "d20576"
        ]
    },
    {
        "instruction": "",
        "id": "q20577",
        "input": "center align python text",
        "output": "",
        "rule": [
            "d20577"
        ]
    },
    {
        "instruction": "",
        "id": "q20578",
        "input": "python get list of keys on an object",
        "output": "",
        "rule": [
            "d20578"
        ]
    },
    {
        "instruction": "",
        "id": "q20579",
        "input": "is there any python function to check for nan valu",
        "output": "",
        "rule": [
            "d20579"
        ]
    },
    {
        "instruction": "",
        "id": "q20580",
        "input": "python get cookie for request",
        "output": "",
        "rule": [
            "d20580"
        ]
    },
    {
        "instruction": "",
        "id": "q20581",
        "input": "python is list no na",
        "output": "",
        "rule": [
            "d20581"
        ]
    },
    {
        "instruction": "",
        "id": "q20582",
        "input": "python determine if a file is image",
        "output": "",
        "rule": [
            "d20582"
        ]
    },
    {
        "instruction": "",
        "id": "q20583",
        "input": "python reorganise a data frame",
        "output": "",
        "rule": [
            "d20583"
        ]
    },
    {
        "instruction": "",
        "id": "q20584",
        "input": "read first line in txt file in python",
        "output": "",
        "rule": [
            "d20584"
        ]
    },
    {
        "instruction": "",
        "id": "q20585",
        "input": "pass defined parser object to subparser python",
        "output": "",
        "rule": [
            "d20585"
        ]
    },
    {
        "instruction": "",
        "id": "q20586",
        "input": "how to print generic error in python",
        "output": "",
        "rule": [
            "d20586"
        ]
    },
    {
        "instruction": "",
        "id": "q20587",
        "input": "python change the name of a key",
        "output": "",
        "rule": [
            "d20587"
        ]
    },
    {
        "instruction": "",
        "id": "q20588",
        "input": "moving mouse python click",
        "output": "",
        "rule": [
            "d20588"
        ]
    },
    {
        "instruction": "",
        "id": "q20589",
        "input": "python to determine if services are running",
        "output": "",
        "rule": [
            "d20589"
        ]
    },
    {
        "instruction": "",
        "id": "q20590",
        "input": "python set contains multiple items",
        "output": "",
        "rule": [
            "d20590"
        ]
    },
    {
        "instruction": "",
        "id": "q20591",
        "input": "python protobyf parse from byte",
        "output": "",
        "rule": [
            "d20591"
        ]
    },
    {
        "instruction": "",
        "id": "q20592",
        "input": "python check if a directory is writable",
        "output": "",
        "rule": [
            "d20592"
        ]
    },
    {
        "instruction": "",
        "id": "q20593",
        "input": "object as list python",
        "output": "",
        "rule": [
            "d20593"
        ]
    },
    {
        "instruction": "",
        "id": "q20594",
        "input": "replace function nan python",
        "output": "",
        "rule": [
            "d20594"
        ]
    },
    {
        "instruction": "",
        "id": "q20595",
        "input": "python hash table check if key exist",
        "output": "",
        "rule": [
            "d20595"
        ]
    },
    {
        "instruction": "",
        "id": "q20596",
        "input": "take all points in box python",
        "output": "",
        "rule": [
            "d20596"
        ]
    },
    {
        "instruction": "",
        "id": "q20597",
        "input": "python create enum by name",
        "output": "",
        "rule": [
            "d20597"
        ]
    },
    {
        "instruction": "",
        "id": "q20598",
        "input": "python matplotlib use arrow markers",
        "output": "",
        "rule": [
            "d20598"
        ]
    },
    {
        "instruction": "",
        "id": "q20599",
        "input": "python function default args",
        "output": "",
        "rule": [
            "d20599"
        ]
    },
    {
        "instruction": "",
        "id": "q20600",
        "input": "python how to select first 100 rows",
        "output": "",
        "rule": [
            "d20600"
        ]
    },
    {
        "instruction": "",
        "id": "q20601",
        "input": "removing columnsns in data frame python",
        "output": "",
        "rule": [
            "d20601"
        ]
    },
    {
        "instruction": "",
        "id": "q20602",
        "input": "python array to torch tensor",
        "output": "",
        "rule": [
            "d20602"
        ]
    },
    {
        "instruction": "",
        "id": "q20603",
        "input": "how to turn a list into a csv python",
        "output": "",
        "rule": [
            "d20603"
        ]
    },
    {
        "instruction": "",
        "id": "q20604",
        "input": "how do i unzip file in python",
        "output": "",
        "rule": [
            "d20604"
        ]
    }
]